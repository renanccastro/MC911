
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ICONST CCONST SCONST COMMA PLUS MINUS TIMES DIVIDE COLON LPAREN RPAREN ASSIGN SEMI ARROW LTEQUAL LESS GREATER GTEQUAL EQUAL LBRACKET RBRACKET ID MODULO AND OR NOTEQ NOT CONCAT IF RETURNS ELSIF DOWN CHARS REF ABS NULL ARRAY WHILE PRINT LENGTH LOC READ SYN LOWER TO EXIT UPPER PROC NUM THEN DO FI TYPE FALSE DCL IN ASC INT FOR BOOL RESULT OD END ELSE RETURN TRUE CHAR BYprogram : statement_liststatement_list : statement statement_nullablestatement_nullable : statement statement_nullable\n                              | emptystatement : declaration_statement\n                     | synonym_statement\n                     | newmode_statement\n                     | action_statement\n                     | procedure_statementsynonym_statement : SYN synonym_list SEMIsynonym_list : synonym_definition\n                        | synonym_definition COMMA synonym_listsynonym_definition : identifier_list mode ASSIGN expression\n                              | identifier_list ASSIGN expressiondeclaration_statement : DCL declaration_list SEMIdeclaration_list : declaration\n                            | declaration COMMA declaration_listdeclaration : identifier_list mode initialization\n                       | identifier_list modeinitialization : ASSIGN expressionidentifier_list : identifier\n                           | identifier COMMA identifier_listidentifier : IDnewmode_statement : TYPE newmode_list SEMInewmode_list : mode_definition\n                        | mode_definition COMMA newmode_listmode_definition : identifier_list ASSIGN modeprocedure_statement : ID COLON procedure_definitionprocedure_definition : PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI\n                                | PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMIformal_parameter_list : formal_parameter\n                                 | formal_parameter COMMA formal_parameter_listformal_parameter : identifier_list mode LOC\n                            | identifier_list moderesult_spec : RETURNS LPAREN mode LOC RPAREN\n                       | RETURNS LPAREN mode RPARENmode : mode_name\n                | discrete_mode\n                | reference_mode\n                | composite_modemode_name : identifierdiscrete_mode : integer_mode\n                         | boolean_mode\n                         | character_mode\n                         | discrete_range_modediscrete_mode_name : identifierinteger_mode : INTboolean_mode : BOOLcharacter_mode : CHARdiscrete_range_mode : discrete_mode_name LPAREN literal_range RPAREN\n                               | discrete_mode LPAREN literal_range RPARENliteral_range : lower_bound COLON upper_boundlower_bound : expressionupper_bound : expressionreference_mode : REF modecomposite_mode : string_mode\n                          | array_modestring_mode : CHARS LBRACKET string_length RBRACKETstring_length : integer_literalarray_mode : ARRAY LBRACKET index_mode_list RBRACKET element_modeindex_mode_list : index_mode\n                           | index_mode COMMA index_mode_listindex_mode : discrete_mode\n                      | literal_rangeelement_mode : modelocation : identifier\n\t\t\t\t    | dereferenced_reference\n\t\t\t\t    | string_element\n\t\t\t\t    | string_slice\n\t\t\t\t    | array_element\n\t\t\t\t    | array_slice\n\t\t\t\t    | call_actiondereferenced_reference : array_location ARROWstring_element : identifier LBRACKET start_element RBRACKETstart_element : expressionstring_slice : identifier LBRACKET left_element COLON right_element RBRACKETleft_element : expressionright_element : expressionarray_element : array_location LBRACKET expression_list RBRACKETexpression_list : expression\n    \t\t\t\t\t   | expression COMMA expression_listarray_slice : array_location LBRACKET lower_bound COLON upper_bound RBRACKETarray_location : locationexpression : operand0\n                      | conditional_expressionparenthesized_expression : LPAREN expression RPARENconditional_expression : IF expression then_expression else_expression FI\n                                  | IF expression then_expression elsif_expression else_expression FIthen_expression : THEN expressionelse_expression : ELSE expressionelsif_expression : ELSIF expression then_expression\n                            | elsif_expression ELSIF expression then_expressionoperand0 : operand1\n                    | operand0 operator1 operand1operand1 : operand2\n                    | operand1 operator2 operand2operand2 : operand3\n                    | operand2 arithmetic_multiplicative_operator operand3operand3 : monadic_operator operand4\n                    | operand4operand4 : array_location\n                    | referenced_location\n                    | primitive_valuearithmetic_multiplicative_operator : TIMES\n                                              | DIVIDE\n                                              | MODULOmonadic_operator : MINUS\n                            | NOTreferenced_location : ARROW array_locationoperator1 : relational_operator\n                     | membership_operatoroperator2 : arithmetic_additive_operator\n                     | string_concatenation_operatorarithmetic_additive_operator : PLUS\n                                        | MINUSstring_concatenation_operator : CONCATrelational_operator : AND\n                               | OR\n                               | EQUAL\n                               | NOTEQ\n                               | GREATER\n                               | GTEQUAL\n                               | LESS\n                               | LTEQUALmembership_operator : INprimitive_value : literal\n                           | value_array_element\n                           | value_array_slice\n                           | parenthesized_expressionliteral : integer_literal\n                   | boolean_literal\n                   | character_literal\n                   | empty_literal\n                   | character_string_literalvalue_array_element : primitive_value LBRACKET expression_list RBRACKETvalue_array_slice : primitive_value LBRACKET expression COLON expression RBRACKETinteger_literal : ICONSTboolean_literal : TRUE\n                           | FALSEcharacter_literal : CCONSTempty_literal : NULLcharacter_string_literal : SCONSTaction_statement : identifier COLON action SEMI\n                            | action SEMIaction : bracketed_action\n                  | assignment_action\n                  | call_action\n                  | exit_action\n                  | result_action\n                  | return_actionbracketed_action : if_action\n                            | do_actionassignment_action : array_location assigning_operator expressionassigning_operator : closed_dyadic_operator ASSIGN\n                              | ASSIGNclosed_dyadic_operator : arithmetic_additive_operator\n                                  | arithmetic_multiplicative_operator\n                                  | string_concatenation_operatorif_action : IF expression then_clause else_clause FI\n                     | IF expression then_clause FIthen_clause : THEN action_statement_listelse_clause : ELSE action_statement_list\n                       | ELSIF expression then_clause else_clause\n                       | ELSIF expression then_clauseaction_statement_list : action_statement action_statement_nullableaction_statement_nullable : action_statement action_statement_nullable\n                                     | emptycall_action : procedure_call\n                       | builtin_callbuiltin_call : builtin_name LPAREN parameter_list RPAREN\n                        | builtin_name LPAREN RPARENbuiltin_name : ABS\n                        | ASC\n                        | NUM\n                        | UPPER\n                        | LOWER\n                        | LENGTH\n                        | READ\n                        | PRINTprocedure_call : ID LPAREN parameter_list RPAREN\n                          | ID LPAREN RPARENparameter_list : expression\n                          | expression COMMA parameter_listexit_action : EXIT label_idlabel_id : IDreturn_action : RETURN resultresult : expression\n                  | emptyresult_action : RESULT expressiondo_action : DO control_part SEMI action_statement_nullable OD\n                     | DO action_statement_nullable ODcontrol_part : for_control while_control \n                        | for_control   \n                        | while_controlfor_control : FOR iterationiteration : step_enumeration\n                     | range_enumerationstep_enumeration : identifier ASSIGN expression step_value DOWN end_value \n                            | identifier ASSIGN expression step_value end_value \n                            | identifier ASSIGN expression DOWN end_value \n                            | identifier ASSIGN expression end_valuestep_value : BY expressionend_value : TO expressionrange_enumeration : identifier DOWN IN discrete_mode\n                             | identifier IN discrete_modewhile_control : WHILE expressionempty :'
    
_lr_action_items = {'REF':([101,102,117,122,166,190,225,249,307,331,],[-21,-23,190,190,190,190,-22,190,190,190,]),'AND':([1,5,12,14,21,25,32,37,55,64,65,66,67,68,69,73,74,75,76,77,79,81,82,83,84,88,89,90,92,93,94,95,96,98,99,132,144,159,201,209,212,214,220,221,222,223,245,260,280,291,292,317,],[-68,-71,-83,-69,-70,-168,-67,-169,-73,-102,-132,-141,-137,-23,-140,-101,-133,-103,-138,-139,-72,-97,-142,-128,-126,-127,-66,149,-95,-100,-129,-131,-134,-93,-130,-181,-109,-99,-171,-180,-79,-74,-86,-94,-98,-96,-170,-135,-66,-82,-76,-136,]),'UPPER':([0,4,11,15,20,22,24,26,42,43,45,47,48,49,52,54,56,57,59,60,61,62,63,78,80,85,86,91,97,107,109,120,121,127,129,133,143,147,148,149,150,151,152,153,154,155,156,157,158,160,161,162,163,167,170,178,198,203,205,208,210,211,213,215,219,228,233,234,235,237,240,241,242,246,259,263,264,295,301,303,306,308,315,332,342,344,],[9,-8,-5,9,9,-9,9,9,-6,-7,9,9,-104,-155,9,-106,-116,-114,-105,-115,9,9,9,9,-107,9,9,9,-108,9,9,-144,9,9,-28,-154,9,-122,-120,-117,-121,-124,-125,9,-111,-110,-118,-119,-123,9,9,-112,-113,-24,9,9,-15,9,-10,9,9,9,-143,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,-30,-29,]),'NULL':([15,24,26,47,48,49,52,54,56,57,59,60,61,63,80,85,86,91,97,109,121,133,143,147,148,149,150,151,152,153,154,155,156,157,158,160,161,162,163,203,208,210,211,215,219,228,233,237,240,241,242,246,259,263,264,295,301,303,306,308,],[66,66,66,66,-104,-155,66,-106,-116,-114,-105,-115,66,66,-107,66,66,66,-108,66,66,-154,66,-122,-120,-117,-121,-124,-125,66,-111,-110,-118,-119,-123,66,66,-112,-113,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'LTEQUAL':([1,5,12,14,21,25,32,37,55,64,65,66,67,68,69,73,74,75,76,77,79,81,82,83,84,88,89,90,92,93,94,95,96,98,99,132,144,159,201,209,212,214,220,221,222,223,245,260,280,291,292,317,],[-68,-71,-83,-69,-70,-168,-67,-169,-73,-102,-132,-141,-137,-23,-140,-101,-133,-103,-138,-139,-72,-97,-142,-128,-126,-127,-66,151,-95,-100,-129,-131,-134,-93,-130,-181,-109,-99,-171,-180,-79,-74,-86,-94,-98,-96,-170,-135,-66,-82,-76,-136,]),'ICONST':([15,24,26,47,48,49,52,54,56,57,59,60,61,63,80,85,86,91,97,109,121,133,143,147,148,149,150,151,152,153,154,155,156,157,158,160,161,162,163,203,208,210,211,215,219,228,233,237,238,240,241,242,246,259,263,264,295,301,303,306,308,],[67,67,67,67,-104,-155,67,-106,-116,-114,-105,-115,67,67,-107,67,67,67,-108,67,67,-154,67,-122,-120,-117,-121,-124,-125,67,-111,-110,-118,-119,-123,67,67,-112,-113,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'ID':([0,4,11,15,19,20,22,24,26,27,28,36,42,43,45,47,48,49,52,54,56,57,59,60,61,62,63,78,80,85,86,91,97,101,102,107,109,111,117,120,121,122,127,129,133,143,147,148,149,150,151,152,153,154,155,156,157,158,160,161,162,163,164,165,166,167,170,178,190,198,199,203,204,205,207,208,210,211,213,215,219,225,228,229,233,234,235,237,240,241,242,246,249,259,263,264,270,290,295,301,303,306,307,308,315,331,332,342,344,],[3,-8,-5,68,102,68,-9,68,68,116,102,102,-6,-7,3,68,-104,-155,68,-106,-116,-114,-105,-115,68,138,68,68,-107,68,68,68,-108,-21,-23,68,68,102,102,-144,68,102,3,-28,-154,68,-122,-120,-117,-121,-124,-125,68,-111,-110,-118,-119,-123,68,68,-112,-113,102,102,102,-24,68,68,102,-15,102,68,102,-10,102,68,68,68,-143,68,68,-22,68,102,68,68,68,68,68,68,68,68,102,68,68,68,102,102,68,68,68,68,102,68,3,102,3,-30,-29,]),'CCONST':([15,24,26,47,48,49,52,54,56,57,59,60,61,63,80,85,86,91,97,109,121,133,143,147,148,149,150,151,152,153,154,155,156,157,158,160,161,162,163,203,208,210,211,215,219,228,233,237,240,241,242,246,259,263,264,295,301,303,306,308,],[69,69,69,69,-104,-155,69,-106,-116,-114,-105,-115,69,69,-107,69,69,69,-108,69,69,-154,69,-122,-120,-117,-121,-124,-125,69,-111,-110,-118,-119,-123,69,69,-112,-113,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'$end':([4,11,22,33,39,42,43,45,120,125,126,127,129,167,198,205,206,213,342,344,],[-8,-5,-9,-1,0,-6,-7,-207,-144,-4,-2,-207,-28,-24,-15,-10,-3,-143,-30,-29,]),'OD':([20,105,106,107,120,169,170,213,227,],[-207,168,-167,-207,-144,-166,-207,-143,266,]),'ASC':([0,4,11,15,20,22,24,26,42,43,45,47,48,49,52,54,56,57,59,60,61,62,63,78,80,85,86,91,97,107,109,120,121,127,129,133,143,147,148,149,150,151,152,153,154,155,156,157,158,160,161,162,163,167,170,178,198,203,205,208,210,211,213,215,219,228,233,234,235,237,240,241,242,246,259,263,264,295,301,303,306,308,315,332,342,344,],[17,-8,-5,17,17,-9,17,17,-6,-7,17,17,-104,-155,17,-106,-116,-114,-105,-115,17,17,17,17,-107,17,17,17,-108,17,17,-144,17,17,-28,-154,17,-122,-120,-117,-121,-124,-125,17,-111,-110,-118,-119,-123,17,17,-112,-113,-24,17,17,-15,17,-10,17,17,17,-143,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-30,-29,]),'PROC':([46,],[128,]),'WHILE':([1,5,12,14,20,21,25,32,37,55,64,65,66,67,68,69,71,73,74,75,76,77,79,81,82,83,84,88,89,90,92,93,94,95,96,98,99,112,132,144,159,172,174,175,179,185,187,188,194,196,197,201,209,212,214,220,221,222,223,245,260,269,291,292,296,302,304,310,311,317,318,322,323,324,335,],[-68,-71,-83,-69,109,-70,-168,-67,-169,-73,-102,-132,-141,-137,-23,-140,-85,-101,-133,-103,-138,-139,-72,-97,-142,-128,-126,-127,-66,-84,-95,-100,-129,-131,-134,-93,-130,109,-181,-109,-99,-195,-196,-197,-45,-48,-44,-49,-47,-43,-42,-171,-180,-79,-74,-86,-94,-98,-96,-170,-135,-205,-82,-76,-87,-201,-204,-50,-51,-136,-88,-199,-200,-203,-198,]),'ARRAY':([101,102,117,122,166,190,225,249,307,331,],[-21,-23,180,180,180,180,-22,180,180,180,]),'LBRACKET':([1,3,5,7,8,12,14,16,21,25,32,37,55,65,66,67,68,69,73,74,75,76,77,79,82,83,84,88,89,94,95,96,99,132,138,144,180,181,201,209,212,214,220,245,260,280,291,292,317,],[-68,-23,-71,52,63,-83,-69,-72,-70,-168,-67,-169,-73,-132,-141,-137,-23,-140,52,-133,143,-138,-139,-72,-142,-128,-126,-127,63,-129,-131,-134,-130,-181,-23,52,237,238,-171,-180,-79,-74,-86,-170,-135,63,-82,-76,-136,]),'BY':([1,5,12,14,21,25,32,37,55,64,65,66,67,68,69,71,73,74,75,76,77,79,81,82,83,84,88,89,90,92,93,94,95,96,98,99,132,144,159,201,209,212,214,220,221,222,223,245,260,267,291,292,296,317,318,],[-68,-71,-83,-69,-70,-168,-67,-169,-73,-102,-132,-141,-137,-23,-140,-85,-101,-133,-103,-138,-139,-72,-97,-142,-128,-126,-127,-66,-84,-95,-100,-129,-131,-134,-93,-130,-181,-109,-99,-171,-180,-79,-74,-86,-94,-98,-96,-170,-135,303,-82,-76,-87,-136,-88,]),'SCONST':([15,24,26,47,48,49,52,54,56,57,59,60,61,63,80,85,86,91,97,109,121,133,143,147,148,149,150,151,152,153,154,155,156,157,158,160,161,162,163,203,208,210,211,215,219,228,233,237,240,241,242,246,259,263,264,295,301,303,306,308,],[82,82,82,82,-104,-155,82,-106,-116,-114,-105,-115,82,82,-107,82,82,82,-108,82,82,-154,82,-122,-120,-117,-121,-124,-125,82,-111,-110,-118,-119,-123,82,82,-112,-113,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'TRUE':([15,24,26,47,48,49,52,54,56,57,59,60,61,63,80,85,86,91,97,109,121,133,143,147,148,149,150,151,152,153,154,155,156,157,158,160,161,162,163,203,208,210,211,215,219,228,233,237,240,241,242,246,259,263,264,295,301,303,306,308,],[76,76,76,76,-104,-155,76,-106,-116,-114,-105,-115,76,76,-107,76,76,76,-108,76,76,-154,76,-122,-120,-117,-121,-124,-125,76,-111,-110,-118,-119,-123,76,76,-112,-113,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'ASSIGN':([1,3,5,7,8,12,14,16,21,25,32,37,48,50,51,53,54,55,56,57,58,59,60,68,89,101,102,103,122,132,138,173,179,182,183,185,186,187,188,189,191,192,193,194,195,196,197,201,202,209,212,214,225,243,245,291,292,309,310,311,328,329,],[-68,-23,-71,49,-66,-83,-69,-72,-70,-168,-67,-169,-104,-156,133,-157,-106,-73,-116,-114,-158,-105,-115,-23,-66,-21,-23,166,203,-181,-23,228,-45,240,-37,-48,-40,-44,-49,-38,-56,-41,-57,-47,-39,-43,-42,-171,246,-180,-79,-74,-22,-55,-170,-82,-76,-58,-50,-51,-65,-60,]),'IN':([1,5,12,14,21,25,32,37,55,64,65,66,67,68,69,73,74,75,76,77,79,81,82,83,84,88,89,90,92,93,94,95,96,98,99,102,132,144,159,173,201,209,212,214,220,221,222,223,230,245,260,280,291,292,317,],[-68,-71,-83,-69,-70,-168,-67,-169,-73,-102,-132,-141,-137,-23,-140,-101,-133,-103,-138,-139,-72,-97,-142,-128,-126,-127,-66,152,-95,-100,-129,-131,-134,-93,-130,-23,-181,-109,-99,229,-171,-180,-79,-74,-86,-94,-98,-96,270,-170,-135,-66,-82,-76,-136,]),'READ':([0,4,11,15,20,22,24,26,42,43,45,47,48,49,52,54,56,57,59,60,61,62,63,78,80,85,86,91,97,107,109,120,121,127,129,133,143,147,148,149,150,151,152,153,154,155,156,157,158,160,161,162,163,167,170,178,198,203,205,208,210,211,213,215,219,228,233,234,235,237,240,241,242,246,259,263,264,295,301,303,306,308,315,332,342,344,],[35,-8,-5,35,35,-9,35,35,-6,-7,35,35,-104,-155,35,-106,-116,-114,-105,-115,35,35,35,35,-107,35,35,35,-108,35,35,-144,35,35,-28,-154,35,-122,-120,-117,-121,-124,-125,35,-111,-110,-118,-119,-123,35,35,-112,-113,-24,35,35,-15,35,-10,35,35,35,-143,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-30,-29,]),'RETURNS':([289,],[313,]),'ELSIF':([1,5,12,14,21,25,32,37,55,64,65,66,67,68,69,71,73,74,75,76,77,79,81,82,83,84,88,89,90,92,93,94,95,96,98,99,106,107,120,132,144,159,169,177,201,209,212,213,214,218,220,221,222,223,235,236,245,260,261,265,274,291,292,296,305,317,318,320,334,],[-68,-71,-83,-69,-70,-168,-67,-169,-73,-102,-132,-141,-137,-23,-140,-85,-101,-133,-103,-138,-139,-72,-97,-142,-128,-126,-127,-66,-84,-95,-100,-129,-131,-134,-93,-130,-167,-207,-144,-181,-109,-99,-166,233,-171,-180,-79,-143,-74,263,-86,-94,-98,-96,-207,-161,-170,-135,295,-89,-165,-82,-76,-87,233,-136,-88,-91,-92,]),'FALSE':([15,24,26,47,48,49,52,54,56,57,59,60,61,63,80,85,86,91,97,109,121,133,143,147,148,149,150,151,152,153,154,155,156,157,158,160,161,162,163,203,208,210,211,215,219,228,233,237,240,241,242,246,259,263,264,295,301,303,306,308,],[77,77,77,77,-104,-155,77,-106,-116,-114,-105,-115,77,77,-107,77,77,77,-108,77,77,-154,77,-122,-120,-117,-121,-124,-125,77,-111,-110,-118,-119,-123,77,77,-112,-113,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'RETURN':([0,4,11,20,22,42,43,45,62,107,120,127,129,167,170,178,198,205,213,234,235,315,332,342,344,],[15,-8,-5,15,-9,-6,-7,15,15,15,-144,15,-28,-24,15,15,-15,-10,-143,15,15,15,15,-30,-29,]),'ARROW':([1,3,5,7,8,12,14,15,16,21,24,25,26,32,37,47,48,49,52,54,55,56,57,59,60,61,63,68,73,79,80,85,86,89,91,97,109,121,132,133,138,143,144,147,148,149,150,151,152,153,154,155,156,157,158,160,161,162,163,201,203,208,209,210,211,212,214,215,219,228,233,237,240,241,242,245,246,259,263,264,280,291,292,295,301,303,306,308,],[-68,-23,-71,55,-66,-83,-69,78,-72,-70,78,-168,78,-67,-169,78,-104,-155,78,-106,-73,-116,-114,-105,-115,78,78,-23,55,-72,-107,78,78,-66,78,-108,78,78,-181,-154,-23,78,55,-122,-120,-117,-121,-124,-125,78,-111,-110,-118,-119,-123,78,78,-112,-113,-171,78,78,-180,78,78,-79,-74,78,78,78,78,78,78,78,78,-170,78,78,78,78,-66,-82,-76,78,78,78,78,78,]),'COLON':([1,3,5,8,12,14,21,25,32,37,55,64,65,66,67,68,69,71,73,74,75,76,77,79,81,82,83,84,88,89,90,92,93,94,95,96,98,99,132,134,135,140,142,144,159,201,209,212,214,216,220,221,222,223,245,260,276,278,280,291,292,296,317,318,],[-68,46,-71,62,-83,-69,-70,-168,-67,-169,-73,-102,-132,-141,-137,-23,-140,-85,-101,-133,-103,-138,-139,-72,-97,-142,-128,-126,-127,-66,-84,-95,-100,-129,-131,-134,-93,-130,-181,-53,211,-77,215,-109,-99,-171,-180,-79,-74,259,-86,-94,-98,-96,-170,-135,-53,308,-66,-82,-76,-87,-136,-88,]),'TYPE':([0,4,11,22,42,43,45,120,127,129,167,198,205,213,315,332,342,344,],[19,-8,-5,-9,-6,-7,19,-144,19,-28,-24,-15,-10,-143,19,19,-30,-29,]),'FI':([1,5,12,14,21,25,32,37,55,64,65,66,67,68,69,71,73,74,75,76,77,79,81,82,83,84,88,89,90,92,93,94,95,96,98,99,106,107,120,132,144,159,169,177,201,209,212,213,214,220,221,222,223,231,235,236,245,260,262,273,274,291,292,294,296,298,305,317,318,326,],[-68,-71,-83,-69,-70,-168,-67,-169,-73,-102,-132,-141,-137,-23,-140,-85,-101,-133,-103,-138,-139,-72,-97,-142,-128,-126,-127,-66,-84,-95,-100,-129,-131,-134,-93,-130,-167,-207,-144,-181,-109,-99,-166,232,-171,-180,-79,-143,-74,-86,-94,-98,-96,271,-207,-161,-170,-135,296,-162,-165,-82,-76,318,-87,-90,-164,-136,-88,-163,]),'END':([4,11,22,42,43,120,125,127,129,167,198,205,206,213,315,332,333,337,342,344,],[-8,-5,-9,-6,-7,-144,-4,-207,-28,-24,-15,-10,-3,-143,-207,-207,338,341,-30,-29,]),'RBRACKET':([1,5,12,14,21,25,32,37,55,64,65,66,67,68,69,71,73,74,75,76,77,79,81,82,83,84,88,89,90,92,93,94,95,96,98,99,132,134,136,140,141,144,159,179,185,187,188,194,196,197,201,209,212,214,216,217,220,221,222,223,245,253,254,255,256,257,258,260,275,277,279,281,282,283,291,292,293,296,310,311,317,318,327,330,],[-68,-71,-83,-69,-70,-168,-67,-169,-73,-102,-132,-141,-137,-23,-140,-85,-101,-133,-103,-138,-139,-72,-97,-142,-128,-126,-127,-66,-84,-95,-100,-129,-131,-134,-93,-130,-181,-80,212,-75,214,-109,-99,-45,-48,-44,-49,-47,-43,-42,-171,-180,-79,-74,-80,260,-86,-94,-98,-96,-170,-80,-81,-54,291,-78,292,-135,-61,307,-63,-64,309,-59,-82,-76,317,-87,-50,-51,-136,-88,-62,-52,]),'DO':([0,4,11,20,22,42,43,45,62,107,120,127,129,167,170,178,198,205,213,234,235,315,332,342,344,],[20,-8,-5,20,-9,-6,-7,20,20,20,-144,20,-28,-24,20,20,-15,-10,-143,20,20,20,20,-30,-29,]),'NUM':([0,4,11,15,20,22,24,26,42,43,45,47,48,49,52,54,56,57,59,60,61,62,63,78,80,85,86,91,97,107,109,120,121,127,129,133,143,147,148,149,150,151,152,153,154,155,156,157,158,160,161,162,163,167,170,178,198,203,205,208,210,211,213,215,219,228,233,234,235,237,240,241,242,246,259,263,264,295,301,303,306,308,315,332,342,344,],[38,-8,-5,38,38,-9,38,38,-6,-7,38,38,-104,-155,38,-106,-116,-114,-105,-115,38,38,38,38,-107,38,38,38,-108,38,38,-144,38,38,-28,-154,38,-122,-120,-117,-121,-124,-125,38,-111,-110,-118,-119,-123,38,38,-112,-113,-24,38,38,-15,38,-10,38,38,38,-143,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-30,-29,]),'THEN':([1,5,12,14,21,25,32,37,55,64,65,66,67,68,69,71,73,74,75,76,77,79,81,82,83,84,88,89,90,92,93,94,95,96,98,99,113,132,144,145,159,201,209,212,214,220,221,222,223,245,260,272,291,292,296,297,317,318,319,],[-68,-71,-83,-69,-70,-168,-67,-169,-73,-102,-132,-141,-137,-23,-140,-85,-101,-133,-103,-138,-139,-72,-97,-142,-128,-126,-127,-66,-84,-95,-100,-129,-131,-134,-93,-130,178,-181,-109,219,-99,-171,-180,-79,-74,-86,-94,-98,-96,-170,-135,178,-82,-76,-87,219,-136,-88,219,]),'NOTEQ':([1,5,12,14,21,25,32,37,55,64,65,66,67,68,69,73,74,75,76,77,79,81,82,83,84,88,89,90,92,93,94,95,96,98,99,132,144,159,201,209,212,214,220,221,222,223,245,260,280,291,292,317,],[-68,-71,-83,-69,-70,-168,-67,-169,-73,-102,-132,-141,-137,-23,-140,-101,-133,-103,-138,-139,-72,-97,-142,-128,-126,-127,-66,148,-95,-100,-129,-131,-134,-93,-130,-181,-109,-99,-171,-180,-79,-74,-86,-94,-98,-96,-170,-135,-66,-82,-76,-136,]),'TIMES':([1,3,5,7,8,12,14,16,21,25,32,37,55,64,65,66,67,68,69,73,74,75,76,77,79,81,82,83,84,88,89,92,93,94,95,96,99,132,138,144,159,201,209,212,214,220,222,223,245,260,280,291,292,317,],[-68,-23,-71,48,-66,-83,-69,-72,-70,-168,-67,-169,-73,-102,-132,-141,-137,-23,-140,-101,-133,-103,-138,-139,-72,-97,-142,-128,-126,-127,-66,48,-100,-129,-131,-134,-130,-181,-23,-109,-99,-171,-180,-79,-74,-86,-98,48,-170,-135,-66,-82,-76,-136,]),'PRINT':([0,4,11,15,20,22,24,26,42,43,45,47,48,49,52,54,56,57,59,60,61,62,63,78,80,85,86,91,97,107,109,120,121,127,129,133,143,147,148,149,150,151,152,153,154,155,156,157,158,160,161,162,163,167,170,178,198,203,205,208,210,211,213,215,219,228,233,234,235,237,240,241,242,246,259,263,264,295,301,303,306,308,315,332,342,344,],[23,-8,-5,23,23,-9,23,23,-6,-7,23,23,-104,-155,23,-106,-116,-114,-105,-115,23,23,23,23,-107,23,23,23,-108,23,23,-144,23,23,-28,-154,23,-122,-120,-117,-121,-124,-125,23,-111,-110,-118,-119,-123,23,23,-112,-113,-24,23,23,-15,23,-10,23,23,23,-143,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-30,-29,]),'DOWN':([1,5,12,14,21,25,32,37,55,64,65,66,67,68,69,71,73,74,75,76,77,79,81,82,83,84,88,89,90,92,93,94,95,96,98,99,102,132,144,159,173,201,209,212,214,220,221,222,223,245,260,267,291,292,296,299,317,318,325,],[-68,-71,-83,-69,-70,-168,-67,-169,-73,-102,-132,-141,-137,-23,-140,-85,-101,-133,-103,-138,-139,-72,-97,-142,-128,-126,-127,-66,-84,-95,-100,-129,-131,-134,-93,-130,-23,-181,-109,-99,230,-171,-180,-79,-74,-86,-94,-98,-96,-170,-135,300,-82,-76,-87,321,-136,-88,-202,]),'IF':([0,4,11,15,20,22,24,26,42,43,45,47,49,52,61,62,63,85,86,107,109,120,121,127,129,133,143,167,170,178,198,203,205,208,210,211,213,215,219,228,233,234,235,237,240,241,242,246,259,263,264,295,301,303,306,308,315,332,342,344,],[24,-8,-5,85,24,-9,85,85,-6,-7,24,85,-155,85,85,24,85,85,85,24,85,-144,85,24,-28,-154,85,-24,24,24,-15,85,-10,85,85,85,-143,85,85,85,85,24,24,85,85,85,85,85,85,85,85,85,85,85,85,85,24,24,-30,-29,]),'NOT':([15,24,26,47,48,49,52,54,56,57,59,60,61,63,85,86,109,121,133,143,147,148,149,150,151,152,153,154,155,156,157,158,160,161,162,163,203,208,210,211,215,219,228,233,237,240,241,242,246,259,263,264,295,301,303,306,308,],[97,97,97,97,-104,-155,97,-106,-116,-114,-105,-115,97,97,97,97,97,97,-154,97,-122,-120,-117,-121,-124,-125,97,-111,-110,-118,-119,-123,97,97,-112,-113,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,]),'RESULT':([0,4,11,20,22,42,43,45,62,107,120,127,129,167,170,178,198,205,213,234,235,315,332,342,344,],[26,-8,-5,26,-9,-6,-7,26,26,26,-144,26,-28,-24,26,26,-15,-10,-143,26,26,26,26,-30,-29,]),'EXIT':([0,4,11,20,22,42,43,45,62,107,120,127,129,167,170,178,198,205,213,234,235,315,332,342,344,],[27,-8,-5,27,-9,-6,-7,27,27,27,-144,27,-28,-24,27,27,-15,-10,-143,27,27,27,27,-30,-29,]),'LPAREN':([3,9,13,15,17,23,24,26,31,34,35,38,44,47,48,49,52,54,56,57,59,60,61,63,68,80,85,86,91,97,102,109,121,128,133,138,143,147,148,149,150,151,152,153,154,155,156,157,158,160,161,162,163,179,184,185,187,188,189,192,194,196,197,203,208,210,211,215,219,228,233,237,240,241,242,246,259,263,264,268,269,279,280,295,301,303,304,306,308,310,311,313,],[47,-175,-177,86,-173,-179,86,86,-172,121,-178,-174,-176,86,-104,-155,86,-106,-116,-114,-105,-115,86,86,47,-107,86,86,86,-108,-23,86,86,207,-154,47,86,-122,-120,-117,-121,-124,-125,86,-111,-110,-118,-119,-123,86,86,-112,-113,-45,241,-48,-44,-49,242,-46,-47,-43,-42,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,-46,242,242,-46,86,86,86,242,86,86,-50,-51,331,]),'BOOL':([101,102,117,122,166,190,225,229,237,249,270,306,307,331,],[-21,-23,185,185,185,185,-22,185,185,185,185,185,185,185,]),'EQUAL':([1,5,12,14,21,25,32,37,55,64,65,66,67,68,69,73,74,75,76,77,79,81,82,83,84,88,89,90,92,93,94,95,96,98,99,132,144,159,201,209,212,214,220,221,222,223,245,260,280,291,292,317,],[-68,-71,-83,-69,-70,-168,-67,-169,-73,-102,-132,-141,-137,-23,-140,-101,-133,-103,-138,-139,-72,-97,-142,-128,-126,-127,-66,157,-95,-100,-129,-131,-134,-93,-130,-181,-109,-99,-171,-180,-79,-74,-86,-94,-98,-96,-170,-135,-66,-82,-76,-136,]),'DCL':([0,4,11,22,42,43,45,120,127,129,167,198,205,213,315,332,342,344,],[28,-8,-5,-9,-6,-7,28,-144,28,-28,-24,-15,-10,-143,28,28,-30,-29,]),'CHAR':([101,102,117,122,166,190,225,229,237,249,270,306,307,331,],[-21,-23,188,188,188,188,-22,188,188,188,188,188,188,188,]),'CHARS':([101,102,117,122,166,190,225,249,307,331,],[-21,-23,181,181,181,181,-22,181,181,181,]),'DIVIDE':([1,3,5,7,8,12,14,16,21,25,32,37,55,64,65,66,67,68,69,73,74,75,76,77,79,81,82,83,84,88,89,92,93,94,95,96,99,132,138,144,159,201,209,212,214,220,222,223,245,260,280,291,292,317,],[-68,-23,-71,59,-66,-83,-69,-72,-70,-168,-67,-169,-73,-102,-132,-141,-137,-23,-140,-101,-133,-103,-138,-139,-72,-97,-142,-128,-126,-127,-66,59,-100,-129,-131,-134,-130,-181,-23,-109,-99,-171,-180,-79,-74,-86,-98,59,-170,-135,-66,-82,-76,-136,]),'ELSE':([1,5,12,14,21,25,32,37,55,64,65,66,67,68,69,71,73,74,75,76,77,79,81,82,83,84,88,89,90,92,93,94,95,96,98,99,106,107,120,132,144,159,169,177,201,209,212,213,214,218,220,221,222,223,235,236,245,260,261,265,274,291,292,296,305,317,318,320,334,],[-68,-71,-83,-69,-70,-168,-67,-169,-73,-102,-132,-141,-137,-23,-140,-85,-101,-133,-103,-138,-139,-72,-97,-142,-128,-126,-127,-66,-84,-95,-100,-129,-131,-134,-93,-130,-167,-207,-144,-181,-109,-99,-166,234,-171,-180,-79,-143,-74,264,-86,-94,-98,-96,-207,-161,-170,-135,264,-89,-165,-82,-76,-87,234,-136,-88,-91,-92,]),'GTEQUAL':([1,5,12,14,21,25,32,37,55,64,65,66,67,68,69,73,74,75,76,77,79,81,82,83,84,88,89,90,92,93,94,95,96,98,99,132,144,159,201,209,212,214,220,221,222,223,245,260,280,291,292,317,],[-68,-71,-83,-69,-70,-168,-67,-169,-73,-102,-132,-141,-137,-23,-140,-101,-133,-103,-138,-139,-72,-97,-142,-128,-126,-127,-66,147,-95,-100,-129,-131,-134,-93,-130,-181,-109,-99,-171,-180,-79,-74,-86,-94,-98,-96,-170,-135,-66,-82,-76,-136,]),'INT':([101,102,117,122,166,190,225,229,237,249,270,306,307,331,],[-21,-23,194,194,194,194,-22,194,194,194,194,194,194,194,]),'RPAREN':([1,5,12,14,21,25,32,37,47,55,64,65,66,67,68,69,71,73,74,75,76,77,79,81,82,83,84,88,89,90,92,93,94,95,96,98,99,102,121,130,131,132,144,146,159,179,183,185,186,187,188,189,191,192,193,194,195,196,197,200,201,209,212,214,220,221,222,223,243,245,250,251,252,255,260,285,286,288,291,292,296,309,310,311,312,316,317,318,328,329,330,336,339,],[-68,-71,-83,-69,-70,-168,-67,-169,132,-73,-102,-132,-141,-137,-23,-140,-85,-101,-133,-103,-138,-139,-72,-97,-142,-128,-126,-127,-66,-84,-95,-100,-129,-131,-134,-93,-130,-23,201,-182,209,-181,-109,220,-99,-45,-37,-48,-40,-44,-49,-38,-56,-41,-57,-47,-39,-43,-42,245,-171,-180,-79,-74,-86,-94,-98,-96,-55,-170,289,-31,-183,-54,-135,310,311,-34,-82,-76,-87,-58,-50,-51,-33,-32,-136,-88,-65,-60,-52,340,343,]),'COMMA':([1,5,12,14,21,25,32,37,55,64,65,66,67,68,69,71,73,74,75,76,77,79,81,82,83,84,88,89,90,92,93,94,95,96,98,99,100,101,102,119,123,130,132,134,144,159,179,182,183,185,186,187,188,189,191,192,193,194,195,196,197,201,209,212,214,216,220,221,222,223,226,239,243,245,247,251,253,255,260,275,279,281,284,287,288,291,292,296,309,310,311,312,317,318,328,329,330,],[-68,-71,-83,-69,-70,-168,-67,-169,-73,-102,-132,-141,-137,-23,-140,-85,-101,-133,-103,-138,-139,-72,-97,-142,-128,-126,-127,-66,-84,-95,-100,-129,-131,-134,-93,-130,164,165,-23,199,204,208,-181,210,-109,-99,-45,-19,-37,-48,-40,-44,-49,-38,-56,-41,-57,-47,-39,-43,-42,-171,-180,-79,-74,210,-86,-94,-98,-96,-27,-18,-55,-170,-14,290,210,-54,-135,306,-63,-64,-20,-13,-34,-82,-76,-87,-58,-50,-51,-33,-136,-88,-65,-60,-52,]),'MODULO':([1,3,5,7,8,12,14,16,21,25,32,37,55,64,65,66,67,68,69,73,74,75,76,77,79,81,82,83,84,88,89,92,93,94,95,96,99,132,138,144,159,201,209,212,214,220,222,223,245,260,280,291,292,317,],[-68,-23,-71,54,-66,-83,-69,-72,-70,-168,-67,-169,-73,-102,-132,-141,-137,-23,-140,-101,-133,-103,-138,-139,-72,-97,-142,-128,-126,-127,-66,54,-100,-129,-131,-134,-130,-181,-23,-109,-99,-171,-180,-79,-74,-86,-98,54,-170,-135,-66,-82,-76,-136,]),'FOR':([20,],[111,]),'TO':([1,5,12,14,21,25,32,37,55,64,65,66,67,68,69,71,73,74,75,76,77,79,81,82,83,84,88,89,90,92,93,94,95,96,98,99,132,144,159,201,209,212,214,220,221,222,223,245,260,267,291,292,296,299,300,317,318,321,325,],[-68,-71,-83,-69,-70,-168,-67,-169,-73,-102,-132,-141,-137,-23,-140,-85,-101,-133,-103,-138,-139,-72,-97,-142,-128,-126,-127,-66,-84,-95,-100,-129,-131,-134,-93,-130,-181,-109,-99,-171,-180,-79,-74,-86,-94,-98,-96,-170,-135,301,-82,-76,-87,301,301,-136,-88,301,-202,]),'SEMI':([1,2,5,6,10,12,14,15,16,18,21,25,29,30,32,37,40,41,55,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,81,82,83,84,87,88,89,90,92,93,94,95,96,98,99,100,102,104,108,110,112,114,115,116,118,119,123,124,132,137,139,144,159,168,171,172,174,175,176,179,182,183,185,186,187,188,189,191,192,193,194,195,196,197,201,209,212,214,220,221,222,223,224,226,232,239,243,244,245,247,248,260,266,269,271,284,287,289,291,292,296,302,304,309,310,311,314,317,318,322,323,324,328,329,335,338,340,341,343,],[-68,-151,-71,-150,-146,-83,-69,-207,-147,-145,-70,-168,120,-149,-67,-169,-152,-148,-73,-102,-132,-141,-137,-23,-140,-188,-85,-187,-101,-133,-103,-138,-139,-72,-97,-142,-128,-126,-186,-127,-66,-84,-95,-100,-129,-131,-134,-93,-130,-25,-23,167,170,-194,-193,-189,-184,-185,198,-16,-11,205,-181,-153,213,-109,-99,-191,-206,-195,-196,-197,-192,-45,-19,-37,-48,-40,-44,-49,-38,-56,-41,-57,-47,-39,-43,-42,-171,-180,-79,-74,-86,-94,-98,-96,-26,-27,-160,-18,-55,-17,-170,-14,-12,-135,-190,-205,-159,-20,-13,315,-82,-76,-87,-201,-204,-58,-50,-51,332,-136,-88,-199,-200,-203,-65,-60,-198,342,-36,344,-35,]),'GREATER':([1,5,12,14,21,25,32,37,55,64,65,66,67,68,69,73,74,75,76,77,79,81,82,83,84,88,89,90,92,93,94,95,96,98,99,132,144,159,201,209,212,214,220,221,222,223,245,260,280,291,292,317,],[-68,-71,-83,-69,-70,-168,-67,-169,-73,-102,-132,-141,-137,-23,-140,-101,-133,-103,-138,-139,-72,-97,-142,-128,-126,-127,-66,150,-95,-100,-129,-131,-134,-93,-130,-181,-109,-99,-171,-180,-79,-74,-86,-94,-98,-96,-170,-135,-66,-82,-76,-136,]),'SYN':([0,4,11,22,42,43,45,120,127,129,167,198,205,213,315,332,342,344,],[36,-8,-5,-9,-6,-7,36,-144,36,-28,-24,-15,-10,-143,36,36,-30,-29,]),'LENGTH':([0,4,11,15,20,22,24,26,42,43,45,47,48,49,52,54,56,57,59,60,61,62,63,78,80,85,86,91,97,107,109,120,121,127,129,133,143,147,148,149,150,151,152,153,154,155,156,157,158,160,161,162,163,167,170,178,198,203,205,208,210,211,213,215,219,228,233,234,235,237,240,241,242,246,259,263,264,295,301,303,306,308,315,332,342,344,],[13,-8,-5,13,13,-9,13,13,-6,-7,13,13,-104,-155,13,-106,-116,-114,-105,-115,13,13,13,13,-107,13,13,13,-108,13,13,-144,13,13,-28,-154,13,-122,-120,-117,-121,-124,-125,13,-111,-110,-118,-119,-123,13,13,-112,-113,-24,13,13,-15,13,-10,13,13,13,-143,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,-30,-29,]),'CONCAT':([1,3,5,7,8,12,14,16,21,25,32,37,55,64,65,66,67,68,69,73,74,75,76,77,79,81,82,83,84,88,89,92,93,94,95,96,98,99,132,138,144,159,201,209,212,214,220,221,222,223,245,260,280,291,292,317,],[-68,-23,-71,56,-66,-83,-69,-72,-70,-168,-67,-169,-73,-102,-132,-141,-137,-23,-140,-101,-133,-103,-138,-139,-72,-97,-142,-128,-126,-127,-66,-95,-100,-129,-131,-134,56,-130,-181,-23,-109,-99,-171,-180,-79,-74,-86,56,-98,-96,-170,-135,-66,-82,-76,-136,]),'LOC':([102,179,183,185,186,187,188,189,191,192,193,194,195,196,197,243,288,309,310,311,328,329,336,],[-23,-45,-37,-48,-40,-44,-49,-38,-56,-41,-57,-47,-39,-43,-42,-55,312,-58,-50,-51,-65,-60,339,]),'MINUS':([1,3,5,7,8,12,14,15,16,21,24,25,26,32,37,47,48,49,52,54,55,56,57,59,60,61,63,64,65,66,67,68,69,73,74,75,76,77,79,81,82,83,84,85,86,88,89,92,93,94,95,96,98,99,109,121,132,133,138,143,144,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,201,203,208,209,210,211,212,214,215,219,220,221,222,223,228,233,237,240,241,242,245,246,259,260,263,264,280,291,292,295,301,303,306,308,317,],[-68,-23,-71,60,-66,-83,-69,80,-72,-70,80,-168,80,-67,-169,80,-104,-155,80,-106,-73,-116,-114,-105,-115,80,80,-102,-132,-141,-137,-23,-140,-101,-133,-103,-138,-139,-72,-97,-142,-128,-126,80,80,-127,-66,-95,-100,-129,-131,-134,60,-130,80,80,-181,-154,-23,80,-109,-122,-120,-117,-121,-124,-125,80,-111,-110,-118,-119,-123,-99,80,80,-112,-113,-171,80,80,-180,80,80,-79,-74,80,80,-86,60,-98,-96,80,80,80,80,80,80,-170,80,80,-135,80,80,-66,-82,-76,80,80,80,80,80,-136,]),'ABS':([0,4,11,15,20,22,24,26,42,43,45,47,48,49,52,54,56,57,59,60,61,62,63,78,80,85,86,91,97,107,109,120,121,127,129,133,143,147,148,149,150,151,152,153,154,155,156,157,158,160,161,162,163,167,170,178,198,203,205,208,210,211,213,215,219,228,233,234,235,237,240,241,242,246,259,263,264,295,301,303,306,308,315,332,342,344,],[31,-8,-5,31,31,-9,31,31,-6,-7,31,31,-104,-155,31,-106,-116,-114,-105,-115,31,31,31,31,-107,31,31,31,-108,31,31,-144,31,31,-28,-154,31,-122,-120,-117,-121,-124,-125,31,-111,-110,-118,-119,-123,31,31,-112,-113,-24,31,31,-15,31,-10,31,31,31,-143,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-30,-29,]),'LESS':([1,5,12,14,21,25,32,37,55,64,65,66,67,68,69,73,74,75,76,77,79,81,82,83,84,88,89,90,92,93,94,95,96,98,99,132,144,159,201,209,212,214,220,221,222,223,245,260,280,291,292,317,],[-68,-71,-83,-69,-70,-168,-67,-169,-73,-102,-132,-141,-137,-23,-140,-101,-133,-103,-138,-139,-72,-97,-142,-128,-126,-127,-66,158,-95,-100,-129,-131,-134,-93,-130,-181,-109,-99,-171,-180,-79,-74,-86,-94,-98,-96,-170,-135,-66,-82,-76,-136,]),'OR':([1,5,12,14,21,25,32,37,55,64,65,66,67,68,69,73,74,75,76,77,79,81,82,83,84,88,89,90,92,93,94,95,96,98,99,132,144,159,201,209,212,214,220,221,222,223,245,260,280,291,292,317,],[-68,-71,-83,-69,-70,-168,-67,-169,-73,-102,-132,-141,-137,-23,-140,-101,-133,-103,-138,-139,-72,-97,-142,-128,-126,-127,-66,156,-95,-100,-129,-131,-134,-93,-130,-181,-109,-99,-171,-180,-79,-74,-86,-94,-98,-96,-170,-135,-66,-82,-76,-136,]),'LOWER':([0,4,11,15,20,22,24,26,42,43,45,47,48,49,52,54,56,57,59,60,61,62,63,78,80,85,86,91,97,107,109,120,121,127,129,133,143,147,148,149,150,151,152,153,154,155,156,157,158,160,161,162,163,167,170,178,198,203,205,208,210,211,213,215,219,228,233,234,235,237,240,241,242,246,259,263,264,295,301,303,306,308,315,332,342,344,],[44,-8,-5,44,44,-9,44,44,-6,-7,44,44,-104,-155,44,-106,-116,-114,-105,-115,44,44,44,44,-107,44,44,44,-108,44,44,-144,44,44,-28,-154,44,-122,-120,-117,-121,-124,-125,44,-111,-110,-118,-119,-123,44,44,-112,-113,-24,44,44,-15,44,-10,44,44,44,-143,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-30,-29,]),'PLUS':([1,3,5,7,8,12,14,16,21,25,32,37,55,64,65,66,67,68,69,73,74,75,76,77,79,81,82,83,84,88,89,92,93,94,95,96,98,99,132,138,144,159,201,209,212,214,220,221,222,223,245,260,280,291,292,317,],[-68,-23,-71,57,-66,-83,-69,-72,-70,-168,-67,-169,-73,-102,-132,-141,-137,-23,-140,-101,-133,-103,-138,-139,-72,-97,-142,-128,-126,-127,-66,-95,-100,-129,-131,-134,57,-130,-181,-23,-109,-99,-171,-180,-79,-74,-86,57,-98,-96,-170,-135,-66,-82,-76,-136,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'referenced_location':([15,24,26,47,52,61,63,85,86,91,109,121,143,153,160,161,203,208,210,211,215,219,228,233,237,240,241,242,246,259,263,264,295,301,303,306,308,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'action_statement_nullable':([20,107,170,235,],[105,169,227,274,]),'else_clause':([177,305,],[231,326,]),'if_action':([0,20,45,62,107,127,170,178,234,235,315,332,],[2,2,2,2,2,2,2,2,2,2,2,2,]),'character_literal':([15,24,26,47,52,61,63,85,86,91,109,121,143,153,160,161,203,208,210,211,215,219,228,233,237,240,241,242,246,259,263,264,295,301,303,306,308,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'synonym_list':([36,204,],[124,248,]),'arithmetic_multiplicative_operator':([7,92,223,],[53,160,160,]),'action_statement':([0,20,45,107,127,170,178,234,235,315,332,],[4,107,4,107,4,107,235,235,107,4,4,]),'expression':([15,24,26,47,52,61,63,85,86,109,121,143,203,208,210,211,215,219,228,233,237,240,241,242,246,259,263,264,295,301,303,306,308,],[72,113,114,130,134,137,140,145,146,171,130,216,247,130,253,255,257,265,267,272,276,284,276,276,287,293,297,298,319,324,325,276,255,]),'return_action':([0,20,45,62,107,127,170,178,234,235,315,332,],[6,6,6,6,6,6,6,6,6,6,6,6,]),'control_part':([20,],[108,]),'identifier':([0,15,19,20,24,26,28,36,45,47,52,61,62,63,78,85,86,91,107,109,111,117,121,122,127,143,153,160,161,164,165,166,170,178,190,199,203,204,207,208,210,211,215,219,228,229,233,234,235,237,240,241,242,246,249,259,263,264,270,290,295,301,303,306,307,308,315,331,332,],[8,89,101,8,89,89,101,101,8,89,89,89,89,89,89,89,89,89,8,89,173,192,89,192,8,89,89,89,89,101,101,192,8,8,192,101,89,101,101,89,89,89,89,89,89,268,89,8,8,280,89,89,89,89,192,89,89,89,268,101,89,89,89,280,192,89,8,192,8,]),'assignment_action':([0,20,45,62,107,127,170,178,234,235,315,332,],[10,10,10,10,10,10,10,10,10,10,10,10,]),'character_mode':([117,122,166,190,229,237,249,270,306,307,331,],[187,187,187,187,187,187,187,187,187,187,187,]),'parameter_list':([47,121,208,],[131,200,252,]),'literal_range':([237,241,242,306,],[281,285,286,281,]),'else_expression':([218,261,],[262,294,]),'then_expression':([145,297,319,],[218,320,334,]),'mode_definition':([19,164,],[100,100,]),'declaration_list':([28,199,],[118,244,]),'right_element':([215,],[258,]),'discrete_mode':([117,122,166,190,229,237,249,270,306,307,331,],[189,189,189,189,269,279,189,304,279,189,189,]),'operand3':([15,24,26,47,52,61,63,85,86,109,121,143,153,160,161,203,208,210,211,215,219,228,233,237,240,241,242,246,259,263,264,295,301,303,306,308,],[81,81,81,81,81,81,81,81,81,81,81,81,81,222,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'identifier_list':([19,28,36,164,165,199,204,207,290,],[103,117,122,103,225,117,122,249,249,]),'upper_bound':([211,308,],[256,330,]),'value_array_slice':([15,24,26,47,52,61,63,85,86,91,109,121,143,153,160,161,203,208,210,211,215,219,228,233,237,240,241,242,246,259,263,264,295,301,303,306,308,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'literal':([15,24,26,47,52,61,63,85,86,91,109,121,143,153,160,161,203,208,210,211,215,219,228,233,237,240,241,242,246,259,263,264,295,301,303,306,308,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'array_element':([0,15,20,24,26,45,47,52,61,62,63,78,85,86,91,107,109,121,127,143,153,160,161,170,178,203,208,210,211,215,219,228,233,234,235,237,240,241,242,246,259,263,264,295,301,303,306,308,315,332,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'end_value':([267,299,300,321,],[302,322,323,335,]),'while_control':([20,112,],[110,176,]),'newmode_list':([19,164,],[104,224,]),'initialization':([182,],[239,]),'result':([15,],[87,]),'operator2':([98,221,],[161,161,]),'discrete_mode_name':([117,122,166,190,229,237,249,270,306,307,331,],[184,184,184,184,184,184,184,184,184,184,184,]),'value_array_element':([15,24,26,47,52,61,63,85,86,91,109,121,143,153,160,161,203,208,210,211,215,219,228,233,237,240,241,242,246,259,263,264,295,301,303,306,308,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'string_slice':([0,15,20,24,26,45,47,52,61,62,63,78,85,86,91,107,109,121,127,143,153,160,161,170,178,203,208,210,211,215,219,228,233,234,235,237,240,241,242,246,259,263,264,295,301,303,306,308,315,332,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'relational_operator':([90,],[155,]),'result_action':([0,20,45,62,107,127,170,178,234,235,315,332,],[30,30,30,30,30,30,30,30,30,30,30,30,]),'range_enumeration':([111,],[175,]),'lower_bound':([52,237,241,242,306,],[135,278,278,278,278,]),'assigning_operator':([7,],[61,]),'expression_list':([52,143,210,],[136,217,254,]),'operand2':([15,24,26,47,52,61,63,85,86,109,121,143,153,161,203,208,210,211,215,219,228,233,237,240,241,242,246,259,263,264,295,301,303,306,308,],[92,92,92,92,92,92,92,92,92,92,92,92,92,223,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,]),'statement_list':([0,],[33,]),'synonym_definition':([36,204,],[123,123,]),'label_id':([27,],[115,]),'parenthesized_expression':([15,24,26,47,52,61,63,85,86,91,109,121,143,153,160,161,203,208,210,211,215,219,228,233,237,240,241,242,246,259,263,264,295,301,303,306,308,],[94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,]),'reference_mode':([117,122,166,190,249,307,331,],[195,195,195,195,195,195,195,]),'start_element':([63,],[141,]),'boolean_literal':([15,24,26,47,52,61,63,85,86,91,109,121,143,153,160,161,203,208,210,211,215,219,228,233,237,240,241,242,246,259,263,264,295,301,303,306,308,],[95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'character_string_literal':([15,24,26,47,52,61,63,85,86,91,109,121,143,153,160,161,203,208,210,211,215,219,228,233,237,240,241,242,246,259,263,264,295,301,303,306,308,],[96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'operator1':([90,],[153,]),'declaration':([28,199,],[119,119,]),'string_element':([0,15,20,24,26,45,47,52,61,62,63,78,85,86,91,107,109,121,127,143,153,160,161,170,178,203,208,210,211,215,219,228,233,234,235,237,240,241,242,246,259,263,264,295,301,303,306,308,315,332,],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,]),'integer_mode':([117,122,166,190,229,237,249,270,306,307,331,],[197,197,197,197,197,197,197,197,197,197,197,]),'step_value':([267,],[299,]),'index_mode':([237,306,],[275,275,]),'mode':([117,122,166,190,249,307,331,],[182,202,226,243,288,328,336,]),'empty':([15,20,45,107,127,170,235,315,332,],[70,106,125,106,125,106,106,125,125,]),'builtin_call':([0,15,20,24,26,45,47,52,61,62,63,78,85,86,91,107,109,121,127,143,153,160,161,170,178,203,208,210,211,215,219,228,233,234,235,237,240,241,242,246,259,263,264,295,301,303,306,308,315,332,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'conditional_expression':([15,24,26,47,52,61,63,85,86,109,121,143,203,208,210,211,215,219,228,233,237,240,241,242,246,259,263,264,295,301,303,306,308,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'membership_operator':([90,],[154,]),'array_location':([0,15,20,24,26,45,47,52,61,62,63,78,85,86,91,107,109,121,127,143,153,160,161,170,178,203,208,210,211,215,219,228,233,234,235,237,240,241,242,246,259,263,264,295,301,303,306,308,315,332,],[7,73,7,73,73,7,73,73,73,7,73,144,73,73,73,7,73,73,7,73,73,73,73,7,7,73,73,73,73,73,73,73,73,7,7,73,73,73,73,73,73,73,73,73,73,73,73,73,7,7,]),'empty_literal':([15,24,26,47,52,61,63,85,86,91,109,121,143,153,160,161,203,208,210,211,215,219,228,233,237,240,241,242,246,259,263,264,295,301,303,306,308,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'then_clause':([113,272,],[177,305,]),'composite_mode':([117,122,166,190,249,307,331,],[186,186,186,186,186,186,186,]),'formal_parameter':([207,290,],[251,251,]),'declaration_statement':([0,45,127,315,332,],[11,11,11,11,11,]),'action_statement_list':([178,234,],[236,273,]),'location':([0,15,20,24,26,45,47,52,61,62,63,78,85,86,91,107,109,121,127,143,153,160,161,170,178,203,208,210,211,215,219,228,233,234,235,237,240,241,242,246,259,263,264,295,301,303,306,308,315,332,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'array_mode':([117,122,166,190,249,307,331,],[193,193,193,193,193,193,193,]),'index_mode_list':([237,306,],[277,327,]),'call_action':([0,15,20,24,26,45,47,52,61,62,63,78,85,86,91,107,109,121,127,143,153,160,161,170,178,203,208,210,211,215,219,228,233,234,235,237,240,241,242,246,259,263,264,295,301,303,306,308,315,332,],[16,79,16,79,79,16,79,79,79,16,79,79,79,79,79,16,79,79,16,79,79,79,79,16,16,79,79,79,79,79,79,79,79,16,16,79,79,79,79,79,79,79,79,79,79,79,79,79,16,16,]),'closed_dyadic_operator':([7,],[51,]),'bracketed_action':([0,20,45,62,107,127,170,178,234,235,315,332,],[18,18,18,18,18,18,18,18,18,18,18,18,]),'procedure_statement':([0,45,127,315,332,],[22,22,22,22,22,]),'discrete_range_mode':([117,122,166,190,229,237,249,270,306,307,331,],[179,179,179,179,179,179,179,179,179,179,179,]),'procedure_definition':([46,],[129,]),'result_spec':([289,],[314,]),'procedure_call':([0,15,20,24,26,45,47,52,61,62,63,78,85,86,91,107,109,121,127,143,153,160,161,170,178,203,208,210,211,215,219,228,233,234,235,237,240,241,242,246,259,263,264,295,301,303,306,308,315,332,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'string_mode':([117,122,166,190,249,307,331,],[191,191,191,191,191,191,191,]),'string_length':([238,],[282,]),'array_slice':([0,15,20,24,26,45,47,52,61,62,63,78,85,86,91,107,109,121,127,143,153,160,161,170,178,203,208,210,211,215,219,228,233,234,235,237,240,241,242,246,259,263,264,295,301,303,306,308,315,332,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'string_concatenation_operator':([7,98,221,],[58,163,163,]),'primitive_value':([15,24,26,47,52,61,63,85,86,91,109,121,143,153,160,161,203,208,210,211,215,219,228,233,237,240,241,242,246,259,263,264,295,301,303,306,308,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'action':([0,20,45,62,107,127,170,178,234,235,315,332,],[29,29,29,139,29,29,29,29,29,29,29,29,]),'formal_parameter_list':([207,290,],[250,316,]),'operand1':([15,24,26,47,52,61,63,85,86,109,121,143,153,203,208,210,211,215,219,228,233,237,240,241,242,246,259,263,264,295,301,303,306,308,],[98,98,98,98,98,98,98,98,98,98,98,98,221,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,]),'monadic_operator':([15,24,26,47,52,61,63,85,86,109,121,143,153,160,161,203,208,210,211,215,219,228,233,237,240,241,242,246,259,263,264,295,301,303,306,308,],[91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,]),'statement_nullable':([45,127,315,332,],[126,206,333,337,]),'elsif_expression':([218,],[261,]),'dereferenced_reference':([0,15,20,24,26,45,47,52,61,62,63,78,85,86,91,107,109,121,127,143,153,160,161,170,178,203,208,210,211,215,219,228,233,234,235,237,240,241,242,246,259,263,264,295,301,303,306,308,315,332,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'arithmetic_additive_operator':([7,98,221,],[50,162,162,]),'operand4':([15,24,26,47,52,61,63,85,86,91,109,121,143,153,160,161,203,208,210,211,215,219,228,233,237,240,241,242,246,259,263,264,295,301,303,306,308,],[93,93,93,93,93,93,93,93,93,159,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,]),'builtin_name':([0,15,20,24,26,45,47,52,61,62,63,78,85,86,91,107,109,121,127,143,153,160,161,170,178,203,208,210,211,215,219,228,233,234,235,237,240,241,242,246,259,263,264,295,301,303,306,308,315,332,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'element_mode':([307,],[329,]),'iteration':([111,],[172,]),'for_control':([20,],[112,]),'program':([0,],[39,]),'do_action':([0,20,45,62,107,127,170,178,234,235,315,332,],[40,40,40,40,40,40,40,40,40,40,40,40,]),'left_element':([63,],[142,]),'exit_action':([0,20,45,62,107,127,170,178,234,235,315,332,],[41,41,41,41,41,41,41,41,41,41,41,41,]),'synonym_statement':([0,45,127,315,332,],[42,42,42,42,42,]),'boolean_mode':([117,122,166,190,229,237,249,270,306,307,331,],[196,196,196,196,196,196,196,196,196,196,196,]),'step_enumeration':([111,],[174,]),'mode_name':([117,122,166,190,249,307,331,],[183,183,183,183,183,183,183,]),'operand0':([15,24,26,47,52,61,63,85,86,109,121,143,203,208,210,211,215,219,228,233,237,240,241,242,246,259,263,264,295,301,303,306,308,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'newmode_statement':([0,45,127,315,332,],[43,43,43,43,43,]),'integer_literal':([15,24,26,47,52,61,63,85,86,91,109,121,143,153,160,161,203,208,210,211,215,219,228,233,237,238,240,241,242,246,259,263,264,295,301,303,306,308,],[99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,283,99,99,99,99,99,99,99,99,99,99,99,99,]),'statement':([0,45,127,315,332,],[45,127,127,127,127,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','Parser.py',61),
  ('statement_list -> statement statement_nullable','statement_list',2,'p_statement_list','Parser.py',65),
  ('statement_nullable -> statement statement_nullable','statement_nullable',2,'p_statement_nullable','Parser.py',77),
  ('statement_nullable -> empty','statement_nullable',1,'p_statement_nullable','Parser.py',78),
  ('statement -> declaration_statement','statement',1,'p_statement','Parser.py',90),
  ('statement -> synonym_statement','statement',1,'p_statement','Parser.py',91),
  ('statement -> newmode_statement','statement',1,'p_statement','Parser.py',92),
  ('statement -> action_statement','statement',1,'p_statement','Parser.py',93),
  ('statement -> procedure_statement','statement',1,'p_statement','Parser.py',94),
  ('synonym_statement -> SYN synonym_list SEMI','synonym_statement',3,'p_synonym_statement','Parser.py',103),
  ('synonym_list -> synonym_definition','synonym_list',1,'p_synonym_list','Parser.py',107),
  ('synonym_list -> synonym_definition COMMA synonym_list','synonym_list',3,'p_synonym_list','Parser.py',108),
  ('synonym_definition -> identifier_list mode ASSIGN expression','synonym_definition',4,'p_synonym_definition','Parser.py',117),
  ('synonym_definition -> identifier_list ASSIGN expression','synonym_definition',3,'p_synonym_definition','Parser.py',118),
  ('declaration_statement -> DCL declaration_list SEMI','declaration_statement',3,'p_declaration_statement','Parser.py',132),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','Parser.py',136),
  ('declaration_list -> declaration COMMA declaration_list','declaration_list',3,'p_declaration_list','Parser.py',137),
  ('declaration -> identifier_list mode initialization','declaration',3,'p_declaration','Parser.py',145),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','Parser.py',146),
  ('initialization -> ASSIGN expression','initialization',2,'p_initialization','Parser.py',150),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','Parser.py',154),
  ('identifier_list -> identifier COMMA identifier_list','identifier_list',3,'p_identifier_list','Parser.py',155),
  ('identifier -> ID','identifier',1,'p_identifier','Parser.py',164),
  ('newmode_statement -> TYPE newmode_list SEMI','newmode_statement',3,'p_newmode_statement','Parser.py',175),
  ('newmode_list -> mode_definition','newmode_list',1,'p_newmode_list','Parser.py',179),
  ('newmode_list -> mode_definition COMMA newmode_list','newmode_list',3,'p_newmode_list','Parser.py',180),
  ('mode_definition -> identifier_list ASSIGN mode','mode_definition',3,'p_mode_definition','Parser.py',189),
  ('procedure_statement -> ID COLON procedure_definition','procedure_statement',3,'p_procedure_statement','Parser.py',200),
  ('procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI','procedure_definition',9,'p_procedure_definition','Parser.py',204),
  ('procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI','procedure_definition',8,'p_procedure_definition','Parser.py',205),
  ('formal_parameter_list -> formal_parameter','formal_parameter_list',1,'p_formal_parameter_list','Parser.py',209),
  ('formal_parameter_list -> formal_parameter COMMA formal_parameter_list','formal_parameter_list',3,'p_formal_parameter_list','Parser.py',210),
  ('formal_parameter -> identifier_list mode LOC','formal_parameter',3,'p_formal_parameter','Parser.py',219),
  ('formal_parameter -> identifier_list mode','formal_parameter',2,'p_formal_parameter','Parser.py',220),
  ('result_spec -> RETURNS LPAREN mode LOC RPAREN','result_spec',5,'p_result_spec','Parser.py',226),
  ('result_spec -> RETURNS LPAREN mode RPAREN','result_spec',4,'p_result_spec','Parser.py',227),
  ('mode -> mode_name','mode',1,'p_mode','Parser.py',232),
  ('mode -> discrete_mode','mode',1,'p_mode','Parser.py',233),
  ('mode -> reference_mode','mode',1,'p_mode','Parser.py',234),
  ('mode -> composite_mode','mode',1,'p_mode','Parser.py',235),
  ('mode_name -> identifier','mode_name',1,'p_mode_name','Parser.py',239),
  ('discrete_mode -> integer_mode','discrete_mode',1,'p_discrete_mode','Parser.py',247),
  ('discrete_mode -> boolean_mode','discrete_mode',1,'p_discrete_mode','Parser.py',248),
  ('discrete_mode -> character_mode','discrete_mode',1,'p_discrete_mode','Parser.py',249),
  ('discrete_mode -> discrete_range_mode','discrete_mode',1,'p_discrete_mode','Parser.py',250),
  ('discrete_mode_name -> identifier','discrete_mode_name',1,'p_discrete_mode_name','Parser.py',254),
  ('integer_mode -> INT','integer_mode',1,'p_integer_mode','Parser.py',258),
  ('boolean_mode -> BOOL','boolean_mode',1,'p_boolean_mode','Parser.py',262),
  ('character_mode -> CHAR','character_mode',1,'p_character_mode','Parser.py',266),
  ('discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','Parser.py',275),
  ('discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','Parser.py',276),
  ('literal_range -> lower_bound COLON upper_bound','literal_range',3,'p_literal_range','Parser.py',280),
  ('lower_bound -> expression','lower_bound',1,'p_lower_bound','Parser.py',284),
  ('upper_bound -> expression','upper_bound',1,'p_upper_bound','Parser.py',288),
  ('reference_mode -> REF mode','reference_mode',2,'p_reference_mode','Parser.py',295),
  ('composite_mode -> string_mode','composite_mode',1,'p_composite_mode','Parser.py',302),
  ('composite_mode -> array_mode','composite_mode',1,'p_composite_mode','Parser.py',303),
  ('string_mode -> CHARS LBRACKET string_length RBRACKET','string_mode',4,'p_string_mode','Parser.py',307),
  ('string_length -> integer_literal','string_length',1,'p_string_length','Parser.py',311),
  ('array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode','array_mode',5,'p_array_mode','Parser.py',315),
  ('index_mode_list -> index_mode','index_mode_list',1,'p_index_mode_list','Parser.py',319),
  ('index_mode_list -> index_mode COMMA index_mode_list','index_mode_list',3,'p_index_mode_list','Parser.py',320),
  ('index_mode -> discrete_mode','index_mode',1,'p_index_mode','Parser.py',329),
  ('index_mode -> literal_range','index_mode',1,'p_index_mode','Parser.py',330),
  ('element_mode -> mode','element_mode',1,'p_element_mode','Parser.py',334),
  ('location -> identifier','location',1,'p_location','Parser.py',345),
  ('location -> dereferenced_reference','location',1,'p_location','Parser.py',346),
  ('location -> string_element','location',1,'p_location','Parser.py',347),
  ('location -> string_slice','location',1,'p_location','Parser.py',348),
  ('location -> array_element','location',1,'p_location','Parser.py',349),
  ('location -> array_slice','location',1,'p_location','Parser.py',350),
  ('location -> call_action','location',1,'p_location','Parser.py',351),
  ('dereferenced_reference -> array_location ARROW','dereferenced_reference',2,'p_dereferenced_reference','Parser.py',355),
  ('string_element -> identifier LBRACKET start_element RBRACKET','string_element',4,'p_string_element','Parser.py',359),
  ('start_element -> expression','start_element',1,'p_start_element','Parser.py',363),
  ('string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET','string_slice',6,'p_string_slice','Parser.py',367),
  ('left_element -> expression','left_element',1,'p_left_element','Parser.py',371),
  ('right_element -> expression','right_element',1,'p_right_element','Parser.py',375),
  ('array_element -> array_location LBRACKET expression_list RBRACKET','array_element',4,'p_array_element','Parser.py',379),
  ('expression_list -> expression','expression_list',1,'p_expression_list','Parser.py',383),
  ('expression_list -> expression COMMA expression_list','expression_list',3,'p_expression_list','Parser.py',384),
  ('array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET','array_slice',6,'p_array_slice','Parser.py',391),
  ('array_location -> location','array_location',1,'p_array_location','Parser.py',395),
  ('expression -> operand0','expression',1,'p_expression','Parser.py',405),
  ('expression -> conditional_expression','expression',1,'p_expression','Parser.py',406),
  ('parenthesized_expression -> LPAREN expression RPAREN','parenthesized_expression',3,'p_parenthesized_expression','Parser.py',410),
  ('conditional_expression -> IF expression then_expression else_expression FI','conditional_expression',5,'p_conditional_expression','Parser.py',418),
  ('conditional_expression -> IF expression then_expression elsif_expression else_expression FI','conditional_expression',6,'p_conditional_expression','Parser.py',419),
  ('then_expression -> THEN expression','then_expression',2,'p_then_expression','Parser.py',423),
  ('else_expression -> ELSE expression','else_expression',2,'p_else_expression','Parser.py',427),
  ('elsif_expression -> ELSIF expression then_expression','elsif_expression',3,'p_elsif_expression','Parser.py',431),
  ('elsif_expression -> elsif_expression ELSIF expression then_expression','elsif_expression',4,'p_elsif_expression','Parser.py',432),
  ('operand0 -> operand1','operand0',1,'p_operand0','Parser.py',447),
  ('operand0 -> operand0 operator1 operand1','operand0',3,'p_operand0','Parser.py',448),
  ('operand1 -> operand2','operand1',1,'p_operand1','Parser.py',455),
  ('operand1 -> operand1 operator2 operand2','operand1',3,'p_operand1','Parser.py',456),
  ('operand2 -> operand3','operand2',1,'p_operand2','Parser.py',463),
  ('operand2 -> operand2 arithmetic_multiplicative_operator operand3','operand2',3,'p_operand2','Parser.py',464),
  ('operand3 -> monadic_operator operand4','operand3',2,'p_operand3','Parser.py',472),
  ('operand3 -> operand4','operand3',1,'p_operand3','Parser.py',473),
  ('operand4 -> array_location','operand4',1,'p_operand4','Parser.py',480),
  ('operand4 -> referenced_location','operand4',1,'p_operand4','Parser.py',481),
  ('operand4 -> primitive_value','operand4',1,'p_operand4','Parser.py',482),
  ('arithmetic_multiplicative_operator -> TIMES','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',493),
  ('arithmetic_multiplicative_operator -> DIVIDE','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',494),
  ('arithmetic_multiplicative_operator -> MODULO','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',495),
  ('monadic_operator -> MINUS','monadic_operator',1,'p_monadic_operator','Parser.py',499),
  ('monadic_operator -> NOT','monadic_operator',1,'p_monadic_operator','Parser.py',500),
  ('referenced_location -> ARROW array_location','referenced_location',2,'p_referenced_location','Parser.py',504),
  ('operator1 -> relational_operator','operator1',1,'p_operator1','Parser.py',508),
  ('operator1 -> membership_operator','operator1',1,'p_operator1','Parser.py',509),
  ('operator2 -> arithmetic_additive_operator','operator2',1,'p_operator2','Parser.py',513),
  ('operator2 -> string_concatenation_operator','operator2',1,'p_operator2','Parser.py',514),
  ('arithmetic_additive_operator -> PLUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','Parser.py',518),
  ('arithmetic_additive_operator -> MINUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','Parser.py',519),
  ('string_concatenation_operator -> CONCAT','string_concatenation_operator',1,'p_string_concatenation_operator','Parser.py',523),
  ('relational_operator -> AND','relational_operator',1,'p_relational_operator','Parser.py',527),
  ('relational_operator -> OR','relational_operator',1,'p_relational_operator','Parser.py',528),
  ('relational_operator -> EQUAL','relational_operator',1,'p_relational_operator','Parser.py',529),
  ('relational_operator -> NOTEQ','relational_operator',1,'p_relational_operator','Parser.py',530),
  ('relational_operator -> GREATER','relational_operator',1,'p_relational_operator','Parser.py',531),
  ('relational_operator -> GTEQUAL','relational_operator',1,'p_relational_operator','Parser.py',532),
  ('relational_operator -> LESS','relational_operator',1,'p_relational_operator','Parser.py',533),
  ('relational_operator -> LTEQUAL','relational_operator',1,'p_relational_operator','Parser.py',534),
  ('membership_operator -> IN','membership_operator',1,'p_membership_operator','Parser.py',538),
  ('primitive_value -> literal','primitive_value',1,'p_primitive_value','Parser.py',550),
  ('primitive_value -> value_array_element','primitive_value',1,'p_primitive_value','Parser.py',551),
  ('primitive_value -> value_array_slice','primitive_value',1,'p_primitive_value','Parser.py',552),
  ('primitive_value -> parenthesized_expression','primitive_value',1,'p_primitive_value','Parser.py',553),
  ('literal -> integer_literal','literal',1,'p_literal','Parser.py',557),
  ('literal -> boolean_literal','literal',1,'p_literal','Parser.py',558),
  ('literal -> character_literal','literal',1,'p_literal','Parser.py',559),
  ('literal -> empty_literal','literal',1,'p_literal','Parser.py',560),
  ('literal -> character_string_literal','literal',1,'p_literal','Parser.py',561),
  ('value_array_element -> primitive_value LBRACKET expression_list RBRACKET','value_array_element',4,'p_value_array_element','Parser.py',565),
  ('value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET','value_array_slice',6,'p_value_array_slice','Parser.py',569),
  ('integer_literal -> ICONST','integer_literal',1,'p_integer_literal','Parser.py',577),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','Parser.py',581),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','Parser.py',582),
  ('character_literal -> CCONST','character_literal',1,'p_character_literal','Parser.py',586),
  ('empty_literal -> NULL','empty_literal',1,'p_empty_literal','Parser.py',590),
  ('character_string_literal -> SCONST','character_string_literal',1,'p_character_string_literal','Parser.py',594),
  ('action_statement -> identifier COLON action SEMI','action_statement',4,'p_action_statement','Parser.py',605),
  ('action_statement -> action SEMI','action_statement',2,'p_action_statement','Parser.py',606),
  ('action -> bracketed_action','action',1,'p_action','Parser.py',611),
  ('action -> assignment_action','action',1,'p_action','Parser.py',612),
  ('action -> call_action','action',1,'p_action','Parser.py',613),
  ('action -> exit_action','action',1,'p_action','Parser.py',614),
  ('action -> result_action','action',1,'p_action','Parser.py',615),
  ('action -> return_action','action',1,'p_action','Parser.py',616),
  ('bracketed_action -> if_action','bracketed_action',1,'p_bracketed_action','Parser.py',620),
  ('bracketed_action -> do_action','bracketed_action',1,'p_bracketed_action','Parser.py',621),
  ('assignment_action -> array_location assigning_operator expression','assignment_action',3,'p_assignment_action','Parser.py',625),
  ('assigning_operator -> closed_dyadic_operator ASSIGN','assigning_operator',2,'p_assigning_operator','Parser.py',629),
  ('assigning_operator -> ASSIGN','assigning_operator',1,'p_assigning_operator','Parser.py',630),
  ('closed_dyadic_operator -> arithmetic_additive_operator','closed_dyadic_operator',1,'p_closed_dyadic_operator','Parser.py',634),
  ('closed_dyadic_operator -> arithmetic_multiplicative_operator','closed_dyadic_operator',1,'p_closed_dyadic_operator','Parser.py',635),
  ('closed_dyadic_operator -> string_concatenation_operator','closed_dyadic_operator',1,'p_closed_dyadic_operator','Parser.py',636),
  ('if_action -> IF expression then_clause else_clause FI','if_action',5,'p_if_action','Parser.py',640),
  ('if_action -> IF expression then_clause FI','if_action',4,'p_if_action','Parser.py',641),
  ('then_clause -> THEN action_statement_list','then_clause',2,'p_then_clause','Parser.py',645),
  ('else_clause -> ELSE action_statement_list','else_clause',2,'p_else_clause','Parser.py',649),
  ('else_clause -> ELSIF expression then_clause else_clause','else_clause',4,'p_else_clause','Parser.py',650),
  ('else_clause -> ELSIF expression then_clause','else_clause',3,'p_else_clause','Parser.py',651),
  ('action_statement_list -> action_statement action_statement_nullable','action_statement_list',2,'p_action_statement_list','Parser.py',662),
  ('action_statement_nullable -> action_statement action_statement_nullable','action_statement_nullable',2,'p_action_statement_nullable','Parser.py',674),
  ('action_statement_nullable -> empty','action_statement_nullable',1,'p_action_statement_nullable','Parser.py',675),
  ('call_action -> procedure_call','call_action',1,'p_call_action','Parser.py',692),
  ('call_action -> builtin_call','call_action',1,'p_call_action','Parser.py',693),
  ('builtin_call -> builtin_name LPAREN parameter_list RPAREN','builtin_call',4,'p_builtin_call','Parser.py',697),
  ('builtin_call -> builtin_name LPAREN RPAREN','builtin_call',3,'p_builtin_call','Parser.py',698),
  ('builtin_name -> ABS','builtin_name',1,'p_builtin_name','Parser.py',703),
  ('builtin_name -> ASC','builtin_name',1,'p_builtin_name','Parser.py',704),
  ('builtin_name -> NUM','builtin_name',1,'p_builtin_name','Parser.py',705),
  ('builtin_name -> UPPER','builtin_name',1,'p_builtin_name','Parser.py',706),
  ('builtin_name -> LOWER','builtin_name',1,'p_builtin_name','Parser.py',707),
  ('builtin_name -> LENGTH','builtin_name',1,'p_builtin_name','Parser.py',708),
  ('builtin_name -> READ','builtin_name',1,'p_builtin_name','Parser.py',709),
  ('builtin_name -> PRINT','builtin_name',1,'p_builtin_name','Parser.py',710),
  ('procedure_call -> ID LPAREN parameter_list RPAREN','procedure_call',4,'p_procedure_call','Parser.py',714),
  ('procedure_call -> ID LPAREN RPAREN','procedure_call',3,'p_procedure_call','Parser.py',715),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','Parser.py',719),
  ('parameter_list -> expression COMMA parameter_list','parameter_list',3,'p_parameter_list','Parser.py',720),
  ('exit_action -> EXIT label_id','exit_action',2,'p_exit_action','Parser.py',729),
  ('label_id -> ID','label_id',1,'p_label_id','Parser.py',733),
  ('return_action -> RETURN result','return_action',2,'p_return_action','Parser.py',737),
  ('result -> expression','result',1,'p_result','Parser.py',741),
  ('result -> empty','result',1,'p_result','Parser.py',742),
  ('result_action -> RESULT expression','result_action',2,'p_result_action','Parser.py',745),
  ('do_action -> DO control_part SEMI action_statement_nullable OD','do_action',5,'p_do_action','Parser.py',753),
  ('do_action -> DO action_statement_nullable OD','do_action',3,'p_do_action','Parser.py',754),
  ('control_part -> for_control while_control','control_part',2,'p_control_part','Parser.py',761),
  ('control_part -> for_control','control_part',1,'p_control_part','Parser.py',762),
  ('control_part -> while_control','control_part',1,'p_control_part','Parser.py',763),
  ('for_control -> FOR iteration','for_control',2,'p_for_control','Parser.py',767),
  ('iteration -> step_enumeration','iteration',1,'p_iteration','Parser.py',771),
  ('iteration -> range_enumeration','iteration',1,'p_iteration','Parser.py',772),
  ('step_enumeration -> identifier ASSIGN expression step_value DOWN end_value','step_enumeration',6,'p_step_enumeration','Parser.py',776),
  ('step_enumeration -> identifier ASSIGN expression step_value end_value','step_enumeration',5,'p_step_enumeration','Parser.py',777),
  ('step_enumeration -> identifier ASSIGN expression DOWN end_value','step_enumeration',5,'p_step_enumeration','Parser.py',778),
  ('step_enumeration -> identifier ASSIGN expression end_value','step_enumeration',4,'p_step_enumeration','Parser.py',779),
  ('step_value -> BY expression','step_value',2,'p_step_value','Parser.py',791),
  ('end_value -> TO expression','end_value',2,'p_end_value','Parser.py',795),
  ('range_enumeration -> identifier DOWN IN discrete_mode','range_enumeration',4,'p_range_enumeration','Parser.py',799),
  ('range_enumeration -> identifier IN discrete_mode','range_enumeration',3,'p_range_enumeration','Parser.py',800),
  ('while_control -> WHILE expression','while_control',2,'p_while_control','Parser.py',807),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',813),
]
