
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ICONST CCONST SCONST COMMA PLUS MINUS TIMES DIVIDE COLON LPAREN RPAREN ASSIGN SEMI ARROW LTEQUAL LESS GREATER GTEQUAL EQUAL LBRACKET RBRACKET ID MODULO AND OR NOTEQ NOT CONCAT NULL RETURNS ABS ELSE LOC EXIT READ FALSE LENGTH PRINT LOWER TO OD CHAR DCL NUM INT ASC ELSIF FI CHARS BY UPPER BOOL PROC SYN RESULT TRUE REF FOR IN DOWN ARRAY END WHILE RETURN THEN DO IF TYPEprogram : statement_liststatement_list : statement statement_nullablestatement_nullable : statement statement_nullable\n                              | emptystatement : declaration_statement\n                     | synonym_statement\n                     | newmode_statement\n                     | action_statement\n                     | procedure_statementsynonym_statement : SYN synonym_list SEMIsynonym_list : synonym_definition\n                        | synonym_definition COMMA synonym_listsynonym_definition : identifier_list mode ASSIGN expression\n                              | identifier_list ASSIGN expressiondeclaration_statement : DCL declaration_list SEMIdeclaration_list : declaration\n                            | declaration COMMA declaration_listdeclaration : identifier_list mode initialization\n                       | identifier_list modeinitialization : ASSIGN expressionidentifier_list : identifier\n                           | identifier COMMA identifier_listidentifier : IDnewmode_statement : TYPE newmode_list SEMInewmode_list : mode_definition\n                        | mode_definition COMMA newmode_listmode_definition : identifier_list ASSIGN modeprocedure_statement : ID COLON procedure_definitionprocedure_definition : PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI\n                                | PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMIformal_parameter_list : formal_parameter\n                                 | formal_parameter COMMA formal_parameter_listformal_parameter : identifier_list mode LOC\n                            | identifier_list moderesult_spec : RETURNS LPAREN mode LOC RPAREN\n                       | RETURNS LPAREN mode RPARENmode : mode_name\n                | discrete_mode\n                | reference_mode\n                | composite_modemode_name : identifierdiscrete_mode : integer_mode\n                         | boolean_mode\n                         | character_mode\n                         | discrete_range_modediscrete_mode_name : identifierinteger_mode : INTboolean_mode : BOOLcharacter_mode : CHARdiscrete_range_mode : discrete_mode_name LPAREN literal_range RPAREN\n                               | discrete_mode LPAREN literal_range RPARENliteral_range : lower_bound COLON upper_boundlower_bound : expressionupper_bound : expressionreference_mode : REF modecomposite_mode : string_mode\n                          | array_modestring_mode : CHARS LBRACKET string_length RBRACKETstring_length : integer_literalarray_mode : ARRAY LBRACKET index_mode_list RBRACKET element_modeindex_mode_list : index_mode\n                           | index_mode COMMA index_mode_listindex_mode : discrete_mode\n                      | literal_rangeelement_mode : modelocation : identifier\n\t\t\t\t    | dereferenced_reference\n\t\t\t\t    | string_element\n\t\t\t\t    | string_slice\n\t\t\t\t    | array_element\n\t\t\t\t    | array_slice\n\t\t\t\t    | call_actiondereferenced_reference : array_location ARROWstring_element : identifier LBRACKET start_element RBRACKETstart_element : expressionstring_slice : identifier LBRACKET left_element COLON right_element RBRACKETleft_element : expressionright_element : expressionarray_element : array_location LBRACKET expression_list RBRACKETexpression_list : expression\n    \t\t\t\t\t   | expression COMMA expression_listarray_slice : array_location LBRACKET lower_bound COLON upper_bound RBRACKETarray_location : locationexpression : operand0\n                      | conditional_expressionparenthesized_expression : LPAREN expression RPARENconditional_expression : IF expression then_expression else_expression FI\n                                  | IF expression then_expression elsif_expression else_expression FIthen_expression : THEN expressionelse_expression : ELSE expressionelsif_expression : ELSIF expression then_expression\n                            | elsif_expression ELSIF expression then_expressionoperand0 : operand1\n                    | operand0 operator1 operand1operand1 : operand2\n                    | operand1 operator2 operand2operand2 : operand3\n                    | operand2 arithmetic_multiplicative_operator operand3operand3 : monadic_operator operand4\n                    | operand4operand4 : array_location\n                    | referenced_location\n                    | primitive_valuearithmetic_multiplicative_operator : TIMES\n                                              | DIVIDE\n                                              | MODULOmonadic_operator : MINUS\n                            | NOTreferenced_location : ARROW array_locationoperator1 : relational_operator\n                     | membership_operatoroperator2 : arithmetic_additive_operator\n                     | string_concatenation_operatorarithmetic_additive_operator : PLUS\n                                        | MINUSstring_concatenation_operator : CONCATrelational_operator : AND\n                               | OR\n                               | EQUAL\n                               | NOTEQ\n                               | GREATER\n                               | GTEQUAL\n                               | LESS\n                               | LTEQUALmembership_operator : INprimitive_value : literal\n                           | value_array_element\n                           | value_array_slice\n                           | parenthesized_expressionliteral : integer_literal\n                   | boolean_literal\n                   | character_literal\n                   | empty_literal\n                   | character_string_literalvalue_array_element : primitive_value LBRACKET expression_list RBRACKETvalue_array_slice : primitive_value LBRACKET expression COLON expression RBRACKETinteger_literal : ICONSTboolean_literal : TRUE\n                           | FALSEcharacter_literal : CCONSTempty_literal : NULLcharacter_string_literal : SCONSTaction_statement : identifier COLON action SEMI\n                            | action SEMIaction : bracketed_action\n                  | assignment_action\n                  | call_action\n                  | exit_action\n                  | result_action\n                  | return_actionbracketed_action : if_action\n                            | do_actionassignment_action : array_location assigning_operator expressionassigning_operator : closed_dyadic_operator ASSIGN\n                              | ASSIGNclosed_dyadic_operator : arithmetic_additive_operator\n                                  | arithmetic_multiplicative_operator\n                                  | string_concatenation_operatorif_action : IF expression then_clause else_clause FI\n                     | IF expression then_clause FIthen_clause : THEN action_statement_listelse_clause : ELSE action_statement_list\n                       | ELSIF expression then_clause else_clause\n                       | ELSIF expression then_clauseaction_statement_list : action_statement action_statement_nullableaction_statement_nullable : action_statement action_statement_nullable\n                                     | emptycall_action : procedure_call\n                       | builtin_callbuiltin_call : builtin_name LPAREN parameter_list RPAREN\n                        | builtin_name LPAREN RPARENbuiltin_name : ABS\n                        | ASC\n                        | NUM\n                        | UPPER\n                        | LOWER\n                        | LENGTH\n                        | READ\n                        | PRINTprocedure_call : ID LPAREN parameter_list RPAREN\n                          | ID LPAREN RPARENparameter_list : expression\n                          | expression COMMA parameter_listexit_action : EXIT label_idlabel_id : IDreturn_action : RETURN resultresult : expression\n                  | emptyresult_action : RESULT expressiondo_action : DO control_part SEMI action_statement_nullable OD\n                     | DO action_statement_nullable ODcontrol_part : for_control while_control \n                        | for_control   \n                        | while_controlfor_control : FOR iterationiteration : step_enumeration\n                     | range_enumerationstep_enumeration : identifier ASSIGN expression step_value DOWN end_value\n                            | identifier ASSIGN expression step_value end_value\n                            | identifier ASSIGN expression DOWN end_value\n                            | identifier ASSIGN expression end_valuestep_value : BY expressionend_value : TO expressionrange_enumeration : identifier DOWN IN discrete_mode\n                             | identifier IN discrete_modewhile_control : WHILE expressionempty :'
    
_lr_action_items = {'CONCAT':([3,7,13,18,21,22,29,33,37,38,39,43,53,54,55,56,57,58,60,62,65,67,68,70,71,72,73,74,75,76,77,78,80,82,83,85,86,116,134,153,156,168,197,210,212,213,220,225,230,241,243,259,279,310,311,316,],[-168,-83,-23,-67,-68,-169,-70,-66,110,-69,-71,-72,-137,-95,-100,-140,-134,110,-133,-131,-130,-141,-97,-102,-139,-129,-103,-126,-142,-138,-132,-66,-127,-128,-72,-101,-23,-73,-171,-109,-99,-181,-23,-170,-98,-96,110,-86,-180,-74,-79,-135,-66,-76,-82,-136,]),'ASC':([0,11,12,14,17,20,26,27,40,42,45,51,52,59,66,69,79,81,84,92,93,95,99,108,109,110,111,112,113,115,117,118,121,123,128,135,136,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,155,158,170,172,199,204,206,211,214,217,218,221,229,232,234,237,238,240,242,244,245,248,257,258,260,291,298,299,305,309,322,334,339,343,],[2,2,2,2,-5,2,-7,-8,-9,-6,2,2,-144,-108,2,2,2,-107,2,2,2,2,2,2,2,-116,2,-106,-115,-114,-104,-155,2,-105,-24,2,2,-113,-112,2,-123,-111,-124,-121,-118,-120,-119,-110,-117,2,-122,-125,2,2,-28,-15,-154,2,-10,2,2,2,2,2,2,2,2,2,2,2,-143,2,2,2,2,2,2,2,2,2,2,2,2,2,-30,-29,]),'LOWER':([0,11,12,14,17,20,26,27,40,42,45,51,52,59,66,69,79,81,84,92,93,95,99,108,109,110,111,112,113,115,117,118,121,123,128,135,136,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,155,158,170,172,199,204,206,211,214,217,218,221,229,232,234,237,238,240,242,244,245,248,257,258,260,291,298,299,305,309,322,334,339,343,],[30,30,30,30,-5,30,-7,-8,-9,-6,30,30,-144,-108,30,30,30,-107,30,30,30,30,30,30,30,-116,30,-106,-115,-114,-104,-155,30,-105,-24,30,30,-113,-112,30,-123,-111,-124,-121,-118,-120,-119,-110,-117,30,-122,-125,30,30,-28,-15,-154,30,-10,30,30,30,30,30,30,30,30,30,30,30,-143,30,30,30,30,30,30,30,30,30,30,30,30,30,-30,-29,]),'LTEQUAL':([3,7,18,21,22,29,38,39,53,54,55,56,57,58,60,62,64,65,67,68,70,71,72,73,74,75,76,77,78,80,82,83,85,86,116,134,153,156,168,210,212,213,220,225,230,241,243,259,279,310,311,316,],[-168,-83,-67,-68,-169,-70,-69,-71,-137,-95,-100,-140,-134,-93,-133,-131,143,-130,-141,-97,-102,-139,-129,-103,-126,-142,-138,-132,-66,-127,-128,-72,-101,-23,-73,-171,-109,-99,-181,-170,-98,-96,-94,-86,-180,-74,-79,-135,-66,-76,-82,-136,]),'MODULO':([3,7,13,18,21,22,29,33,37,38,39,43,53,54,55,56,57,60,62,65,67,68,70,71,72,73,74,75,76,77,78,80,82,83,85,86,116,134,153,156,168,197,210,212,213,225,230,241,243,259,279,310,311,316,],[-168,-83,-23,-67,-68,-169,-70,-66,112,-69,-71,-72,-137,112,-100,-140,-134,-133,-131,-130,-141,-97,-102,-139,-129,-103,-126,-142,-138,-132,-66,-127,-128,-72,-101,-23,-73,-171,-109,-99,-181,-23,-170,-98,112,-86,-180,-74,-79,-135,-66,-76,-82,-136,]),'TYPE':([0,14,17,26,27,40,42,52,99,128,170,172,206,242,322,334,339,343,],[4,4,-5,-7,-8,-9,-6,-144,4,-24,-28,-15,-10,-143,4,4,-30,-29,]),'OR':([3,7,18,21,22,29,38,39,53,54,55,56,57,58,60,62,64,65,67,68,70,71,72,73,74,75,76,77,78,80,82,83,85,86,116,134,153,156,168,210,212,213,220,225,230,241,243,259,279,310,311,316,],[-168,-83,-67,-68,-169,-70,-69,-71,-137,-95,-100,-140,-134,-93,-133,-131,145,-130,-141,-97,-102,-139,-129,-103,-126,-142,-138,-132,-66,-127,-128,-72,-101,-23,-73,-171,-109,-99,-181,-170,-98,-96,-94,-86,-180,-74,-79,-135,-66,-76,-82,-136,]),'INT':([46,50,106,125,130,187,209,228,238,262,268,308,309,335,],[-23,-21,177,177,177,177,-22,177,177,177,177,177,177,177,]),'NOTEQ':([3,7,18,21,22,29,38,39,53,54,55,56,57,58,60,62,64,65,67,68,70,71,72,73,74,75,76,77,78,80,82,83,85,86,116,134,153,156,168,210,212,213,220,225,230,241,243,259,279,310,311,316,],[-168,-83,-67,-68,-169,-70,-69,-71,-137,-95,-100,-140,-134,-93,-133,-131,146,-130,-141,-97,-102,-139,-129,-103,-126,-142,-138,-132,-66,-127,-128,-72,-101,-23,-73,-171,-109,-99,-181,-170,-98,-96,-94,-86,-180,-74,-79,-135,-66,-76,-82,-136,]),'EQUAL':([3,7,18,21,22,29,38,39,53,54,55,56,57,58,60,62,64,65,67,68,70,71,72,73,74,75,76,77,78,80,82,83,85,86,116,134,153,156,168,210,212,213,220,225,230,241,243,259,279,310,311,316,],[-168,-83,-67,-68,-169,-70,-69,-71,-137,-95,-100,-140,-134,-93,-133,-131,147,-130,-141,-97,-102,-139,-129,-103,-126,-142,-138,-132,-66,-127,-128,-72,-101,-23,-73,-171,-109,-99,-181,-170,-98,-96,-94,-86,-180,-74,-79,-135,-66,-76,-82,-136,]),'DOWN':([3,7,18,21,22,29,38,39,46,53,54,55,56,57,58,60,61,62,64,65,67,68,70,71,72,73,74,75,76,77,78,80,82,83,85,86,116,134,153,156,164,168,210,212,213,220,225,230,241,243,259,265,289,300,310,311,313,316,318,],[-168,-83,-67,-68,-169,-70,-69,-71,-23,-137,-95,-100,-140,-134,-93,-133,-85,-131,-84,-130,-141,-97,-102,-139,-129,-103,-126,-142,-138,-132,-66,-127,-128,-72,-101,-23,-73,-171,-109,-99,227,-181,-170,-98,-96,-94,-86,-180,-74,-79,-135,296,-87,320,-76,-82,-88,-136,-202,]),'PRINT':([0,11,12,14,17,20,26,27,40,42,45,51,52,59,66,69,79,81,84,92,93,95,99,108,109,110,111,112,113,115,117,118,121,123,128,135,136,137,138,140,141,142,143,144,145,146,147,148,149,150,151,152,155,158,170,172,199,204,206,211,214,217,218,221,229,232,234,237,238,240,242,244,245,248,257,258,260,291,298,299,305,309,322,334,339,343,],[6,6,6,6,-5,6,-7,-8,-9,-6,6,6,-144,-108,6,6,6,-107,6,6,6,6,6,6,6,-116,6,-106,-115,-114,-104,-155,6,-105,-24,6,6,-113,-112,6,-123,-111,-124,-121,-118,-120,-119,-110,-117,6,-122,-125,6,6,-28,-15,-154,6,-10,6,6,6,6,6,6,6,6,6,6,6,-143,6,6,6,6,6,6,6,6,6,6,6,6,6,-30,-29,]),'NOT':([11,20,45,51,69,84,93,95,108,110,111,112,113,115,117,118,121,123,135,136,137,138,141,142,143,144,145,146,147,148,149,150,151,152,155,199,204,211,214,221,229,232,234,237,238,240,244,245,248,257,258,260,291,298,299,305,309,],[59,59,59,59,59,59,59,59,59,-116,59,-106,-115,-114,-104,-155,59,-105,59,59,-113,-112,-123,-111,-124,-121,-118,-120,-119,-110,-117,59,-122,-125,59,-154,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'DIVIDE':([3,7,13,18,21,22,29,33,37,38,39,43,53,54,55,56,57,60,62,65,67,68,70,71,72,73,74,75,76,77,78,80,82,83,85,86,116,134,153,156,168,197,210,212,213,225,230,241,243,259,279,310,311,316,],[-168,-83,-23,-67,-68,-169,-70,-66,123,-69,-71,-72,-137,123,-100,-140,-134,-133,-131,-130,-141,-97,-102,-139,-129,-103,-126,-142,-138,-132,-66,-127,-128,-72,-101,-23,-73,-171,-109,-99,-181,-23,-170,-98,123,-86,-180,-74,-79,-135,-66,-76,-82,-136,]),'FI':([3,7,18,21,22,29,38,39,52,53,54,55,56,57,58,60,61,62,64,65,67,68,70,71,72,73,74,75,76,77,78,80,82,83,85,86,89,92,116,134,139,153,156,161,168,210,212,213,216,218,219,220,225,230,241,242,243,252,253,255,259,288,289,290,293,310,311,312,313,316,],[-168,-83,-67,-68,-169,-70,-69,-71,-144,-137,-95,-100,-140,-134,-93,-133,-85,-131,-84,-130,-141,-97,-102,-139,-129,-103,-126,-142,-138,-132,-66,-127,-128,-72,-101,-23,-167,-207,-73,-171,215,-109,-99,-166,-181,-170,-98,-96,251,-207,-161,-94,-86,-180,-74,-143,-79,-162,-165,289,-135,-164,-87,313,-90,-76,-82,-163,-88,-136,]),'ELSE':([3,7,18,21,22,29,38,39,52,53,54,55,56,57,58,60,61,62,64,65,67,68,70,71,72,73,74,75,76,77,78,80,82,83,85,86,89,92,116,134,139,153,156,161,168,210,212,213,218,219,220,222,225,230,241,242,243,253,254,256,259,288,289,310,311,313,315,316,331,],[-168,-83,-67,-68,-169,-70,-69,-71,-144,-137,-95,-100,-140,-134,-93,-133,-85,-131,-84,-130,-141,-97,-102,-139,-129,-103,-126,-142,-138,-132,-66,-127,-128,-72,-101,-23,-167,-207,-73,-171,217,-109,-99,-166,-181,-170,-98,-96,-207,-161,-94,258,-86,-180,-74,-143,-79,-165,-89,258,-135,217,-87,-76,-82,-88,-91,-136,-92,]),'IF':([0,11,12,14,17,20,26,27,40,42,45,51,52,69,84,92,93,95,99,108,109,111,118,121,128,140,155,158,170,172,199,204,206,211,214,217,218,221,229,232,234,237,238,240,242,244,245,248,257,258,260,291,298,299,305,309,322,334,339,343,],[11,69,11,11,-5,69,-7,-8,-9,-6,69,69,-144,69,69,11,69,69,11,69,11,69,-155,69,-24,11,69,11,-28,-15,-154,69,-10,69,69,11,11,69,69,69,69,69,69,69,-143,69,69,69,69,69,69,69,69,69,69,69,11,11,-30,-29,]),'DO':([0,12,14,17,26,27,40,42,52,92,99,109,128,140,158,170,172,206,217,218,242,322,334,339,343,],[12,12,12,-5,-7,-8,-9,-6,-144,12,12,12,-24,12,12,-28,-15,-10,12,12,-143,12,12,-30,-29,]),'OD':([12,52,89,91,92,158,161,226,242,],[-207,-144,-167,160,-207,-207,-166,261,-143,]),'LESS':([3,7,18,21,22,29,38,39,53,54,55,56,57,58,60,62,64,65,67,68,70,71,72,73,74,75,76,77,78,80,82,83,85,86,116,134,153,156,168,210,212,213,220,225,230,241,243,259,279,310,311,316,],[-168,-83,-67,-68,-169,-70,-69,-71,-137,-95,-100,-140,-134,-93,-133,-131,141,-130,-141,-97,-102,-139,-129,-103,-126,-142,-138,-132,-66,-127,-128,-72,-101,-23,-73,-171,-109,-99,-181,-170,-98,-96,-94,-86,-180,-74,-79,-135,-66,-76,-82,-136,]),'RBRACKET':([3,7,18,21,22,29,38,39,53,54,55,56,57,58,60,61,62,64,65,67,68,70,71,72,73,74,75,76,77,78,80,82,83,85,86,116,134,153,156,168,173,175,176,177,183,184,190,193,195,200,201,210,212,213,220,223,224,225,230,241,243,259,273,274,276,277,278,280,281,282,283,284,285,286,289,294,304,307,310,311,313,316,327,330,],[-168,-83,-67,-68,-169,-70,-69,-71,-137,-95,-100,-140,-134,-93,-133,-85,-131,-84,-130,-141,-97,-102,-139,-129,-103,-126,-142,-138,-132,-66,-127,-128,-72,-101,-23,-73,-171,-109,-99,-181,-45,-44,-49,-47,-43,-48,-42,-75,241,243,-80,-170,-98,-96,-94,259,-80,-86,-180,-74,-79,-135,-59,306,308,-61,-64,-63,-78,310,-81,-80,-54,311,-87,316,-50,-51,-76,-82,-88,-136,-52,-62,]),'$end}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'closed_dyadic_operator':([37,],[114,]),'discrete_mode':([106,125,130,187,228,238,262,268,308,309,335,],[189,189,189,189,264,280,295,189,189,280,189,]),'procedure_call':([0,11,12,14,20,45,51,66,69,79,84,92,93,95,99,108,109,111,121,135,136,140,150,155,158,204,211,214,217,218,221,229,232,234,237,238,240,244,245,248,257,258,260,291,298,299,305,309,322,334,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'string_mode':([106,125,130,187,268,308,335,],[174,174,174,174,174,174,174,]),'iteration':([94,],[163,]),'character_mode':([106,125,130,187,228,238,262,268,308,309,335,],[175,175,175,175,175,175,175,175,175,175,175,]),'operand4':([11,20,45,51,69,79,84,93,95,108,111,121,135,136,150,155,204,211,214,221,229,232,234,237,238,240,244,245,248,257,258,260,291,298,299,305,309,],[55,55,55,55,55,156,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'builtin_name':([0,11,12,14,20,45,51,66,69,79,84,92,93,95,99,108,109,111,121,135,136,140,150,155,158,204,211,214,217,218,221,229,232,234,237,238,240,244,245,248,257,258,260,291,298,299,305,309,322,334,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'character_string_literal':([11,20,45,51,69,79,84,93,95,108,111,121,135,136,150,155,204,211,214,221,229,232,234,237,238,240,244,245,248,257,258,260,291,298,299,305,309,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'expression_list':([121,155,244,],[200,223,283,]),'operand1':([11,20,45,51,69,84,93,95,108,111,121,150,155,204,211,214,221,229,232,234,237,238,240,244,245,248,257,258,260,291,298,299,305,309,],[58,58,58,58,58,58,58,58,58,58,58,220,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'membership_operator':([64,],[142,]),'do_action':([0,12,14,92,99,109,140,158,217,218,322,334,],[9,9,9,9,9,9,9,9,9,9,9,9,]),'boolean_literal':([11,20,45,51,69,79,84,93,95,108,111,121,135,136,150,155,204,211,214,221,229,232,234,237,238,240,244,245,248,257,258,260,291,298,299,305,309,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'assignment_action':([0,12,14,92,99,109,140,158,217,218,322,334,],[25,25,25,25,25,25,25,25,25,25,25,25,]),'statement_nullable':([14,99,322,334,],[98,171,333,337,]),'for_control':([12,],[90,]),'then_clause':([63,250,],[139,288,]),'integer_literal':([11,20,45,51,69,79,84,93,95,108,111,121,135,136,150,155,204,211,214,221,229,232,234,235,237,238,240,244,245,248,257,258,260,291,298,299,305,309,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,273,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'result':([20,],[102,]),'statement':([0,14,99,322,334,],[14,99,99,99,99,]),'program':([0,],[15,]),'synonym_list':([41,203,],[126,246,]),'synonym_definition':([41,203,],[124,124,]),'return_action':([0,12,14,92,99,109,140,158,217,218,322,334,],[19,19,19,19,19,19,19,19,19,19,19,19,]),'primitive_value':([11,20,45,51,69,79,84,93,95,108,111,121,135,136,150,155,204,211,214,221,229,232,234,237,238,240,244,245,248,257,258,260,291,298,299,305,309,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'empty_literal':([11,20,45,51,69,79,84,93,95,108,111,121,135,136,150,155,204,211,214,221,229,232,234,237,238,240,244,245,248,257,258,260,291,298,299,305,309,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'right_element':([240,],[282,]),'identifier_list':([4,24,41,129,131,192,203,231,302,],[49,106,125,49,209,106,125,268,268,]),'builtin_call':([0,11,12,14,20,45,51,66,69,79,84,92,93,95,99,108,109,111,121,135,136,140,150,155,158,204,211,214,217,218,221,229,232,234,237,238,240,244,245,248,257,258,260,291,298,299,305,309,322,334,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'literal':([11,20,45,51,69,79,84,93,95,108,111,121,135,136,150,155,204,211,214,221,229,232,234,237,238,240,244,245,248,257,258,260,291,298,299,305,309,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'index_mode_list':([238,309,],[276,330,]),'string_length':([235,],[274,]),'newmode_list':([4,129,],[47,207,]),'string_element':([0,11,12,14,20,45,51,66,69,79,84,92,93,95,99,108,109,111,121,135,136,140,150,155,158,204,211,214,217,218,221,229,232,234,237,238,240,244,245,248,257,258,260,291,298,299,305,309,322,334,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'declaration':([24,192,],[107,107,]),'array_element':([0,11,12,14,20,45,51,66,69,79,84,92,93,95,99,108,109,111,121,135,136,140,150,155,158,204,211,214,217,218,221,229,232,234,237,238,240,244,245,248,257,258,260,291,298,299,305,309,322,334,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'lower_bound':([121,234,237,238,309,],[202,272,272,272,272,]),'assigning_operator':([37,],[111,]),'statement_list':([0,],[32,]),'upper_bound':([245,305,],[286,327,]),'identifier':([0,4,11,12,14,20,24,41,45,51,66,69,79,84,92,93,94,95,99,106,108,109,111,121,125,129,130,131,135,136,140,150,155,158,187,192,203,204,211,214,217,218,221,228,229,231,232,234,237,238,240,244,245,248,257,258,260,262,268,291,298,299,302,305,308,309,322,334,335,],[33,50,78,33,33,78,50,50,78,78,78,78,78,78,33,78,164,78,33,179,78,78,78,78,179,50,179,50,78,78,33,78,78,33,179,50,50,78,78,78,33,33,78,263,78,50,78,78,78,279,78,78,78,78,78,78,78,263,179,78,78,78,50,78,179,279,33,33,179,]),'element_mode':([308,],[328,]),'mode':([106,125,130,187,268,308,335,],[182,205,208,236,303,329,338,]),'action_statement_list':([140,217,],[219,252,]),'initialization':([182,],[233,]),'referenced_location':([11,20,45,51,69,79,84,93,95,108,111,121,135,136,150,155,204,211,214,221,229,232,234,237,238,240,244,245,248,257,258,260,291,298,299,305,309,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'array_slice':([0,11,12,14,20,45,51,66,69,79,84,92,93,95,99,108,109,111,121,135,136,140,150,155,158,204,211,214,217,218,221,229,232,234,237,238,240,244,245,248,257,258,260,291,298,299,305,309,322,334,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'procedure_statement':([0,14,99,322,334,],[40,40,40,40,40,]),'operator2':([58,220,],[136,136,]),'step_enumeration':([94,],[166,]),'synonym_statement':([0,14,99,322,334,],[42,42,42,42,42,]),'call_action':([0,11,12,14,20,45,51,66,69,79,84,92,93,95,99,108,109,111,121,135,136,140,150,155,158,204,211,214,217,218,221,229,232,234,237,238,240,244,245,248,257,258,260,291,298,299,305,309,322,334,],[43,83,43,43,83,83,83,83,83,83,83,43,83,83,43,83,43,83,83,83,83,43,83,83,43,83,83,83,43,43,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,43,43,]),'left_element':([108,],[194,]),'mode_name':([106,125,130,187,268,308,335,],[188,188,188,188,188,188,188,]),'declaration_list':([24,192,],[105,239,]),'else_clause':([139,288,],[216,312,]),'monadic_operator':([11,20,45,51,69,84,93,95,108,111,121,135,136,150,155,204,211,214,221,229,232,234,237,238,240,244,245,248,257,258,260,291,298,299,305,309,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'bracketed_action':([0,12,14,92,99,109,140,158,217,218,322,334,],[1,1,1,1,1,1,1,1,1,1,1,1,]),'arithmetic_additive_operator':([37,58,220,],[120,138,138,]),'arithmetic_multiplicative_operator':([37,54,213,],[122,135,135,]),'discrete_range_mode':([106,125,130,187,228,238,262,268,308,309,335,],[173,173,173,173,173,173,173,173,173,173,173,]),'result_spec':([301,],[323,]),'operand2':([11,20,45,51,69,84,93,95,108,111,121,136,150,155,204,211,214,221,229,232,234,237,238,240,244,245,248,257,258,260,291,298,299,305,309,],[54,54,54,54,54,54,54,54,54,54,54,213,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'value_array_element':([11,20,45,51,69,79,84,93,95,108,111,121,135,136,150,155,204,211,214,221,229,232,234,237,238,240,244,245,248,257,258,260,291,298,299,305,309,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'integer_mode':([106,125,130,187,228,238,262,268,308,309,335,],[190,190,190,190,190,190,190,190,190,190,190,]),'location':([0,11,12,14,20,45,51,66,69,79,84,92,93,95,99,108,109,111,121,135,136,140,150,155,158,204,211,214,217,218,221,229,232,234,237,238,240,244,245,248,257,258,260,291,298,299,305,309,322,334,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'action':([0,12,14,92,99,109,140,158,217,218,322,334,],[8,8,8,8,8,196,8,8,8,8,8,8,]),'control_part':([12,],[87,]),'while_control':([12,90,],[88,159,]),'elsif_expression':([222,],[256,]),'composite_mode':([106,125,130,187,268,308,335,],[178,178,178,178,178,178,178,]),'empty':([12,14,20,92,99,158,218,322,334,],[89,97,100,89,97,89,89,97,97,]),'step_value':([265,],[300,]),'conditional_expression':([11,20,45,51,69,84,93,95,108,111,121,155,204,211,214,221,229,232,234,237,238,240,244,245,248,257,258,260,291,298,299,305,309,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'index_mode':([238,309,],[277,277,]),'operand0':([11,20,45,51,69,84,93,95,108,111,121,155,204,211,214,221,229,232,234,237,238,240,244,245,248,257,258,260,291,298,299,305,309,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'discrete_mode_name':([106,125,130,187,228,238,262,268,308,309,335,],[185,185,185,185,185,185,185,185,185,185,185,]),'formal_parameter':([231,302,],[267,267,]),'declaration_statement':([0,14,99,322,334,],[17,17,17,17,17,]),'range_enumeration':([94,],[165,]),'operand3':([11,20,45,51,69,84,93,95,108,111,121,135,136,150,155,204,211,214,221,229,232,234,237,238,240,244,245,248,257,258,260,291,298,299,305,309,],[68,68,68,68,68,68,68,68,68,68,68,212,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'dereferenced_reference':([0,11,12,14,20,45,51,66,69,79,84,92,93,95,99,108,109,111,121,135,136,140,150,155,158,204,211,214,217,218,221,229,232,234,237,238,240,244,245,248,257,258,260,291,298,299,305,309,322,334,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'operator1':([64,],[150,]),'action_statement':([0,12,14,92,99,140,158,217,218,322,334,],[27,92,27,92,27,218,92,218,92,27,27,]),'parenthesized_expression':([11,20,45,51,69,79,84,93,95,108,111,121,135,136,150,155,204,211,214,221,229,232,234,237,238,240,244,245,248,257,258,260,291,298,299,305,309,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'string_slice':([0,11,12,14,20,45,51,66,69,79,84,92,93,95,99,108,109,111,121,135,136,140,150,155,158,204,211,214,217,218,221,229,232,234,237,238,240,244,245,248,257,258,260,291,298,299,305,309,322,334,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'value_array_slice':([11,20,45,51,69,79,84,93,95,108,111,121,135,136,150,155,204,211,214,221,229,232,234,237,238,240,244,245,248,257,258,260,291,298,299,305,309,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'else_expression':([222,256,],[255,290,]),'expression':([11,20,45,51,69,84,93,95,108,111,121,155,204,211,214,221,229,232,234,237,238,240,244,245,248,257,258,260,291,298,299,305,309,],[63,101,127,133,154,157,162,133,193,198,201,224,247,133,250,254,265,269,270,270,270,281,284,285,287,292,293,294,314,318,319,285,270,]),'literal_range':([234,237,238,309,],[271,275,278,278,]),'newmode_statement':([0,14,99,322,334,],[26,26,26,26,26,]),'procedure_definition':([96,],[170,]),'character_literal':([11,20,45,51,69,79,84,93,95,108,111,121,135,136,150,155,204,211,214,221,229,232,234,237,238,240,244,245,248,257,258,260,291,298,299,305,309,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'mode_definition':([4,129,],[48,48,]),'exit_action':([0,12,14,92,99,109,140,158,217,218,322,334,],[10,10,10,10,10,10,10,10,10,10,10,10,]),'then_expression':([154,292,314,],[222,315,331,]),'reference_mode':([106,125,130,187,268,308,335,],[180,180,180,180,180,180,180,]),'array_mode':([106,125,130,187,268,308,335,],[181,181,181,181,181,181,181,]),'if_action':([0,12,14,92,99,109,140,158,217,218,322,334,],[44,44,44,44,44,44,44,44,44,44,44,44,]),'formal_parameter_list':([231,302,],[266,325,]),'end_value':([265,296,300,320,],[297,317,321,332,]),'array_location':([0,11,12,14,20,45,51,66,69,79,84,92,93,95,99,108,109,111,121,135,136,140,150,155,158,204,211,214,217,218,221,229,232,234,237,238,240,244,245,248,257,258,260,291,298,299,305,309,322,334,],[37,85,37,37,85,85,85,153,85,85,85,37,85,85,37,85,37,85,85,85,85,37,85,85,37,85,85,85,37,37,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,37,37,]),'action_statement_nullable':([12,92,158,218,],[91,161,226,253,]),'parameter_list':([51,95,211,],[132,167,249,]),'boolean_mode':([106,125,130,187,228,238,262,268,308,309,335,],[183,183,183,183,183,183,183,183,183,183,183,]),'result_action':([0,12,14,92,99,109,140,158,217,218,322,334,],[35,35,35,35,35,35,35,35,35,35,35,35,]),'relational_operator':([64,],[148,]),'string_concatenation_operator':([37,58,220,],[119,137,137,]),'label_id':([23,],[104,]),'start_element':([108,],[195,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','Parser.py',63),
  ('statement_list -> statement statement_nullable','statement_list',2,'p_statement_list','Parser.py',67),
  ('statement_nullable -> statement statement_nullable','statement_nullable',2,'p_statement_nullable','Parser.py',79),
  ('statement_nullable -> empty','statement_nullable',1,'p_statement_nullable','Parser.py',80),
  ('statement -> declaration_statement','statement',1,'p_statement','Parser.py',92),
  ('statement -> synonym_statement','statement',1,'p_statement','Parser.py',93),
  ('statement -> newmode_statement','statement',1,'p_statement','Parser.py',94),
  ('statement -> action_statement','statement',1,'p_statement','Parser.py',95),
  ('statement -> procedure_statement','statement',1,'p_statement','Parser.py',96),
  ('synonym_statement -> SYN synonym_list SEMI','synonym_statement',3,'p_synonym_statement','Parser.py',105),
  ('synonym_list -> synonym_definition','synonym_list',1,'p_synonym_list','Parser.py',109),
  ('synonym_list -> synonym_definition COMMA synonym_list','synonym_list',3,'p_synonym_list','Parser.py',110),
  ('synonym_definition -> identifier_list mode ASSIGN expression','synonym_definition',4,'p_synonym_definition','Parser.py',119),
  ('synonym_definition -> identifier_list ASSIGN expression','synonym_definition',3,'p_synonym_definition','Parser.py',120),
  ('declaration_statement -> DCL declaration_list SEMI','declaration_statement',3,'p_declaration_statement','Parser.py',134),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','Parser.py',138),
  ('declaration_list -> declaration COMMA declaration_list','declaration_list',3,'p_declaration_list','Parser.py',139),
  ('declaration -> identifier_list mode initialization','declaration',3,'p_declaration','Parser.py',147),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','Parser.py',148),
  ('initialization -> ASSIGN expression','initialization',2,'p_initialization','Parser.py',152),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','Parser.py',156),
  ('identifier_list -> identifier COMMA identifier_list','identifier_list',3,'p_identifier_list','Parser.py',157),
  ('identifier -> ID','identifier',1,'p_identifier','Parser.py',166),
  ('newmode_statement -> TYPE newmode_list SEMI','newmode_statement',3,'p_newmode_statement','Parser.py',176),
  ('newmode_list -> mode_definition','newmode_list',1,'p_newmode_list','Parser.py',180),
  ('newmode_list -> mode_definition COMMA newmode_list','newmode_list',3,'p_newmode_list','Parser.py',181),
  ('mode_definition -> identifier_list ASSIGN mode','mode_definition',3,'p_mode_definition','Parser.py',190),
  ('procedure_statement -> ID COLON procedure_definition','procedure_statement',3,'p_procedure_statement','Parser.py',201),
  ('procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI','procedure_definition',9,'p_procedure_definition','Parser.py',205),
  ('procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI','procedure_definition',8,'p_procedure_definition','Parser.py',206),
  ('formal_parameter_list -> formal_parameter','formal_parameter_list',1,'p_formal_parameter_list','Parser.py',210),
  ('formal_parameter_list -> formal_parameter COMMA formal_parameter_list','formal_parameter_list',3,'p_formal_parameter_list','Parser.py',211),
  ('formal_parameter -> identifier_list mode LOC','formal_parameter',3,'p_formal_parameter','Parser.py',220),
  ('formal_parameter -> identifier_list mode','formal_parameter',2,'p_formal_parameter','Parser.py',221),
  ('result_spec -> RETURNS LPAREN mode LOC RPAREN','result_spec',5,'p_result_spec','Parser.py',227),
  ('result_spec -> RETURNS LPAREN mode RPAREN','result_spec',4,'p_result_spec','Parser.py',228),
  ('mode -> mode_name','mode',1,'p_mode','Parser.py',233),
  ('mode -> discrete_mode','mode',1,'p_mode','Parser.py',234),
  ('mode -> reference_mode','mode',1,'p_mode','Parser.py',235),
  ('mode -> composite_mode','mode',1,'p_mode','Parser.py',236),
  ('mode_name -> identifier','mode_name',1,'p_mode_name','Parser.py',240),
  ('discrete_mode -> integer_mode','discrete_mode',1,'p_discrete_mode','Parser.py',248),
  ('discrete_mode -> boolean_mode','discrete_mode',1,'p_discrete_mode','Parser.py',249),
  ('discrete_mode -> character_mode','discrete_mode',1,'p_discrete_mode','Parser.py',250),
  ('discrete_mode -> discrete_range_mode','discrete_mode',1,'p_discrete_mode','Parser.py',251),
  ('discrete_mode_name -> identifier','discrete_mode_name',1,'p_discrete_mode_name','Parser.py',255),
  ('integer_mode -> INT','integer_mode',1,'p_integer_mode','Parser.py',259),
  ('boolean_mode -> BOOL','boolean_mode',1,'p_boolean_mode','Parser.py',263),
  ('character_mode -> CHAR','character_mode',1,'p_character_mode','Parser.py',267),
  ('discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','Parser.py',276),
  ('discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','Parser.py',277),
  ('literal_range -> lower_bound COLON upper_bound','literal_range',3,'p_literal_range','Parser.py',281),
  ('lower_bound -> expression','lower_bound',1,'p_lower_bound','Parser.py',285),
  ('upper_bound -> expression','upper_bound',1,'p_upper_bound','Parser.py',289),
  ('reference_mode -> REF mode','reference_mode',2,'p_reference_mode','Parser.py',296),
  ('composite_mode -> string_mode','composite_mode',1,'p_composite_mode','Parser.py',303),
  ('composite_mode -> array_mode','composite_mode',1,'p_composite_mode','Parser.py',304),
  ('string_mode -> CHARS LBRACKET string_length RBRACKET','string_mode',4,'p_string_mode','Parser.py',308),
  ('string_length -> integer_literal','string_length',1,'p_string_length','Parser.py',312),
  ('array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode','array_mode',5,'p_array_mode','Parser.py',316),
  ('index_mode_list -> index_mode','index_mode_list',1,'p_index_mode_list','Parser.py',320),
  ('index_mode_list -> index_mode COMMA index_mode_list','index_mode_list',3,'p_index_mode_list','Parser.py',321),
  ('index_mode -> discrete_mode','index_mode',1,'p_index_mode','Parser.py',330),
  ('index_mode -> literal_range','index_mode',1,'p_index_mode','Parser.py',331),
  ('element_mode -> mode','element_mode',1,'p_element_mode','Parser.py',335),
  ('location -> identifier','location',1,'p_location','Parser.py',346),
  ('location -> dereferenced_reference','location',1,'p_location','Parser.py',347),
  ('location -> string_element','location',1,'p_location','Parser.py',348),
  ('location -> string_slice','location',1,'p_location','Parser.py',349),
  ('location -> array_element','location',1,'p_location','Parser.py',350),
  ('location -> array_slice','location',1,'p_location','Parser.py',351),
  ('location -> call_action','location',1,'p_location','Parser.py',352),
  ('dereferenced_reference -> array_location ARROW','dereferenced_reference',2,'p_dereferenced_reference','Parser.py',356),
  ('string_element -> identifier LBRACKET start_element RBRACKET','string_element',4,'p_string_element','Parser.py',360),
  ('start_element -> expression','start_element',1,'p_start_element','Parser.py',364),
  ('string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET','string_slice',6,'p_string_slice','Parser.py',368),
  ('left_element -> expression','left_element',1,'p_left_element','Parser.py',372),
  ('right_element -> expression','right_element',1,'p_right_element','Parser.py',376),
  ('array_element -> array_location LBRACKET expression_list RBRACKET','array_element',4,'p_array_element','Parser.py',380),
  ('expression_list -> expression','expression_list',1,'p_expression_list','Parser.py',384),
  ('expression_list -> expression COMMA expression_list','expression_list',3,'p_expression_list','Parser.py',385),
  ('array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET','array_slice',6,'p_array_slice','Parser.py',392),
  ('array_location -> location','array_location',1,'p_array_location','Parser.py',396),
  ('expression -> operand0','expression',1,'p_expression','Parser.py',406),
  ('expression -> conditional_expression','expression',1,'p_expression','Parser.py',407),
  ('parenthesized_expression -> LPAREN expression RPAREN','parenthesized_expression',3,'p_parenthesized_expression','Parser.py',411),
  ('conditional_expression -> IF expression then_expression else_expression FI','conditional_expression',5,'p_conditional_expression','Parser.py',419),
  ('conditional_expression -> IF expression then_expression elsif_expression else_expression FI','conditional_expression',6,'p_conditional_expression','Parser.py',420),
  ('then_expression -> THEN expression','then_expression',2,'p_then_expression','Parser.py',424),
  ('else_expression -> ELSE expression','else_expression',2,'p_else_expression','Parser.py',428),
  ('elsif_expression -> ELSIF expression then_expression','elsif_expression',3,'p_elsif_expression','Parser.py',432),
  ('elsif_expression -> elsif_expression ELSIF expression then_expression','elsif_expression',4,'p_elsif_expression','Parser.py',433),
  ('operand0 -> operand1','operand0',1,'p_operand0','Parser.py',448),
  ('operand0 -> operand0 operator1 operand1','operand0',3,'p_operand0','Parser.py',449),
  ('operand1 -> operand2','operand1',1,'p_operand1','Parser.py',456),
  ('operand1 -> operand1 operator2 operand2','operand1',3,'p_operand1','Parser.py',457),
  ('operand2 -> operand3','operand2',1,'p_operand2','Parser.py',464),
  ('operand2 -> operand2 arithmetic_multiplicative_operator operand3','operand2',3,'p_operand2','Parser.py',465),
  ('operand3 -> monadic_operator operand4','operand3',2,'p_operand3','Parser.py',473),
  ('operand3 -> operand4','operand3',1,'p_operand3','Parser.py',474),
  ('operand4 -> array_location','operand4',1,'p_operand4','Parser.py',481),
  ('operand4 -> referenced_location','operand4',1,'p_operand4','Parser.py',482),
  ('operand4 -> primitive_value','operand4',1,'p_operand4','Parser.py',483),
  ('arithmetic_multiplicative_operator -> TIMES','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',494),
  ('arithmetic_multiplicative_operator -> DIVIDE','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',495),
  ('arithmetic_multiplicative_operator -> MODULO','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',496),
  ('monadic_operator -> MINUS','monadic_operator',1,'p_monadic_operator','Parser.py',500),
  ('monadic_operator -> NOT','monadic_operator',1,'p_monadic_operator','Parser.py',501),
  ('referenced_location -> ARROW array_location','referenced_location',2,'p_referenced_location','Parser.py',505),
  ('operator1 -> relational_operator','operator1',1,'p_operator1','Parser.py',509),
  ('operator1 -> membership_operator','operator1',1,'p_operator1','Parser.py',510),
  ('operator2 -> arithmetic_additive_operator','operator2',1,'p_operator2','Parser.py',514),
  ('operator2 -> string_concatenation_operator','operator2',1,'p_operator2','Parser.py',515),
  ('arithmetic_additive_operator -> PLUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','Parser.py',519),
  ('arithmetic_additive_operator -> MINUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','Parser.py',520),
  ('string_concatenation_operator -> CONCAT','string_concatenation_operator',1,'p_string_concatenation_operator','Parser.py',524),
  ('relational_operator -> AND','relational_operator',1,'p_relational_operator','Parser.py',528),
  ('relational_operator -> OR','relational_operator',1,'p_relational_operator','Parser.py',529),
  ('relational_operator -> EQUAL','relational_operator',1,'p_relational_operator','Parser.py',530),
  ('relational_operator -> NOTEQ','relational_operator',1,'p_relational_operator','Parser.py',531),
  ('relational_operator -> GREATER','relational_operator',1,'p_relational_operator','Parser.py',532),
  ('relational_operator -> GTEQUAL','relational_operator',1,'p_relational_operator','Parser.py',533),
  ('relational_operator -> LESS','relational_operator',1,'p_relational_operator','Parser.py',534),
  ('relational_operator -> LTEQUAL','relational_operator',1,'p_relational_operator','Parser.py',535),
  ('membership_operator -> IN','membership_operator',1,'p_membership_operator','Parser.py',539),
  ('primitive_value -> literal','primitive_value',1,'p_primitive_value','Parser.py',551),
  ('primitive_value -> value_array_element','primitive_value',1,'p_primitive_value','Parser.py',552),
  ('primitive_value -> value_array_slice','primitive_value',1,'p_primitive_value','Parser.py',553),
  ('primitive_value -> parenthesized_expression','primitive_value',1,'p_primitive_value','Parser.py',554),
  ('literal -> integer_literal','literal',1,'p_literal','Parser.py',558),
  ('literal -> boolean_literal','literal',1,'p_literal','Parser.py',559),
  ('literal -> character_literal','literal',1,'p_literal','Parser.py',560),
  ('literal -> empty_literal','literal',1,'p_literal','Parser.py',561),
  ('literal -> character_string_literal','literal',1,'p_literal','Parser.py',562),
  ('value_array_element -> primitive_value LBRACKET expression_list RBRACKET','value_array_element',4,'p_value_array_element','Parser.py',566),
  ('value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET','value_array_slice',6,'p_value_array_slice','Parser.py',570),
  ('integer_literal -> ICONST','integer_literal',1,'p_integer_literal','Parser.py',578),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','Parser.py',582),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','Parser.py',583),
  ('character_literal -> CCONST','character_literal',1,'p_character_literal','Parser.py',587),
  ('empty_literal -> NULL','empty_literal',1,'p_empty_literal','Parser.py',591),
  ('character_string_literal -> SCONST','character_string_literal',1,'p_character_string_literal','Parser.py',595),
  ('action_statement -> identifier COLON action SEMI','action_statement',4,'p_action_statement','Parser.py',606),
  ('action_statement -> action SEMI','action_statement',2,'p_action_statement','Parser.py',607),
  ('action -> bracketed_action','action',1,'p_action','Parser.py',612),
  ('action -> assignment_action','action',1,'p_action','Parser.py',613),
  ('action -> call_action','action',1,'p_action','Parser.py',614),
  ('action -> exit_action','action',1,'p_action','Parser.py',615),
  ('action -> result_action','action',1,'p_action','Parser.py',616),
  ('action -> return_action','action',1,'p_action','Parser.py',617),
  ('bracketed_action -> if_action','bracketed_action',1,'p_bracketed_action','Parser.py',621),
  ('bracketed_action -> do_action','bracketed_action',1,'p_bracketed_action','Parser.py',622),
  ('assignment_action -> array_location assigning_operator expression','assignment_action',3,'p_assignment_action','Parser.py',626),
  ('assigning_operator -> closed_dyadic_operator ASSIGN','assigning_operator',2,'p_assigning_operator','Parser.py',630),
  ('assigning_operator -> ASSIGN','assigning_operator',1,'p_assigning_operator','Parser.py',631),
  ('closed_dyadic_operator -> arithmetic_additive_operator','closed_dyadic_operator',1,'p_closed_dyadic_operator','Parser.py',635),
  ('closed_dyadic_operator -> arithmetic_multiplicative_operator','closed_dyadic_operator',1,'p_closed_dyadic_operator','Parser.py',636),
  ('closed_dyadic_operator -> string_concatenation_operator','closed_dyadic_operator',1,'p_closed_dyadic_operator','Parser.py',637),
  ('if_action -> IF expression then_clause else_clause FI','if_action',5,'p_if_action','Parser.py',641),
  ('if_action -> IF expression then_clause FI','if_action',4,'p_if_action','Parser.py',642),
  ('then_clause -> THEN action_statement_list','then_clause',2,'p_then_clause','Parser.py',646),
  ('else_clause -> ELSE action_statement_list','else_clause',2,'p_else_clause','Parser.py',650),
  ('else_clause -> ELSIF expression then_clause else_clause','else_clause',4,'p_else_clause','Parser.py',651),
  ('else_clause -> ELSIF expression then_clause','else_clause',3,'p_else_clause','Parser.py',652),
  ('action_statement_list -> action_statement action_statement_nullable','action_statement_list',2,'p_action_statement_list','Parser.py',663),
  ('action_statement_nullable -> action_statement action_statement_nullable','action_statement_nullable',2,'p_action_statement_nullable','Parser.py',675),
  ('action_statement_nullable -> empty','action_statement_nullable',1,'p_action_statement_nullable','Parser.py',676),
  ('call_action -> procedure_call','call_action',1,'p_call_action','Parser.py',693),
  ('call_action -> builtin_call','call_action',1,'p_call_action','Parser.py',694),
  ('builtin_call -> builtin_name LPAREN parameter_list RPAREN','builtin_call',4,'p_builtin_call','Parser.py',698),
  ('builtin_call -> builtin_name LPAREN RPAREN','builtin_call',3,'p_builtin_call','Parser.py',699),
  ('builtin_name -> ABS','builtin_name',1,'p_builtin_name','Parser.py',704),
  ('builtin_name -> ASC','builtin_name',1,'p_builtin_name','Parser.py',705),
  ('builtin_name -> NUM','builtin_name',1,'p_builtin_name','Parser.py',706),
  ('builtin_name -> UPPER','builtin_name',1,'p_builtin_name','Parser.py',707),
  ('builtin_name -> LOWER','builtin_name',1,'p_builtin_name','Parser.py',708),
  ('builtin_name -> LENGTH','builtin_name',1,'p_builtin_name','Parser.py',709),
  ('builtin_name -> READ','builtin_name',1,'p_builtin_name','Parser.py',710),
  ('builtin_name -> PRINT','builtin_name',1,'p_builtin_name','Parser.py',711),
  ('procedure_call -> ID LPAREN parameter_list RPAREN','procedure_call',4,'p_procedure_call','Parser.py',715),
  ('procedure_call -> ID LPAREN RPAREN','procedure_call',3,'p_procedure_call','Parser.py',716),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','Parser.py',720),
  ('parameter_list -> expression COMMA parameter_list','parameter_list',3,'p_parameter_list','Parser.py',721),
  ('exit_action -> EXIT label_id','exit_action',2,'p_exit_action','Parser.py',730),
  ('label_id -> ID','label_id',1,'p_label_id','Parser.py',734),
  ('return_action -> RETURN result','return_action',2,'p_return_action','Parser.py',738),
  ('result -> expression','result',1,'p_result','Parser.py',742),
  ('result -> empty','result',1,'p_result','Parser.py',743),
  ('result_action -> RESULT expression','result_action',2,'p_result_action','Parser.py',746),
  ('do_action -> DO control_part SEMI action_statement_nullable OD','do_action',5,'p_do_action','Parser.py',754),
  ('do_action -> DO action_statement_nullable OD','do_action',3,'p_do_action','Parser.py',755),
  ('control_part -> for_control while_control','control_part',2,'p_control_part','Parser.py',762),
  ('control_part -> for_control','control_part',1,'p_control_part','Parser.py',763),
  ('control_part -> while_control','control_part',1,'p_control_part','Parser.py',764),
  ('for_control -> FOR iteration','for_control',2,'p_for_control','Parser.py',768),
  ('iteration -> step_enumeration','iteration',1,'p_iteration','Parser.py',772),
  ('iteration -> range_enumeration','iteration',1,'p_iteration','Parser.py',773),
  ('step_enumeration -> identifier ASSIGN expression step_value DOWN end_value','step_enumeration',6,'p_step_enumeration','Parser.py',777),
  ('step_enumeration -> identifier ASSIGN expression step_value end_value','step_enumeration',5,'p_step_enumeration','Parser.py',778),
  ('step_enumeration -> identifier ASSIGN expression DOWN end_value','step_enumeration',5,'p_step_enumeration','Parser.py',779),
  ('step_enumeration -> identifier ASSIGN expression end_value','step_enumeration',4,'p_step_enumeration','Parser.py',780),
  ('step_value -> BY expression','step_value',2,'p_step_value','Parser.py',792),
  ('end_value -> TO expression','end_value',2,'p_end_value','Parser.py',796),
  ('range_enumeration -> identifier DOWN IN discrete_mode','range_enumeration',4,'p_range_enumeration','Parser.py',800),
  ('range_enumeration -> identifier IN discrete_mode','range_enumeration',3,'p_range_enumeration','Parser.py',801),
  ('while_control -> WHILE expression','while_control',2,'p_while_control','Parser.py',808),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',814),
]
