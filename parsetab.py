
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ICONST CCONST SCONST COMMA PLUS MINUS TIMES DIVIDE COLON LPAREN RPAREN ASSIGN SEMI ARROW LTEQUAL LESS GREATER GTEQUAL EQUAL LBRACKET RBRACKET ID MODULO AND OR NOTEQ NOT CONCAT LOC FALSE RETURNS WHILE CHARS DOWN IF DCL IN FOR CHAR ELSE OD ASC EXIT INT BOOL TYPE PROC PRINT SYN ABS READ ELSIF RETURN BY NUM RESULT ARRAY TO TRUE FI REF NULL LOWER DO END UPPER THEN LENGTHprogram : statement_liststatement_list : statement statement_nullablestatement_nullable : statement statement_nullable\n                              | emptystatement : declaration_statement\n                     | synonym_statement\n                     | newmode_statement\n                     | action_statement\n                     | procedure_statementsynonym_statement : SYN synonym_list SEMIsynonym_list : synonym_definition\n                        | synonym_definition COMMA synonym_listsynonym_definition : identifier_list mode ASSIGN expression\n                              | identifier_list ASSIGN expressiondeclaration_statement : DCL declaration_list SEMIdeclaration_list : declaration\n                            | declaration COMMA declaration_listdeclaration : identifier_list mode initialization\n                       | identifier_list modeinitialization : ASSIGN expressionidentifier_list : identifier\n                           | identifier COMMA identifier_listidentifier : IDnewmode_statement : TYPE newmode_list SEMInewmode_list : mode_definition\n                        | mode_definition COMMA newmode_listmode_definition : identifier_list ASSIGN modeprocedure_statement : ID COLON procedure_definitionprocedure_definition : PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI\n                                | PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMIformal_parameter_list : formal_parameter\n                                 | formal_parameter COMMA formal_parameter_listformal_parameter : identifier_list mode LOC\n                            | identifier_list moderesult_spec : RETURNS LPAREN mode LOC RPAREN\n                       | RETURNS LPAREN mode RPARENmode : mode_name\n                | discrete_mode\n                | reference_mode\n                | composite_modemode_name : identifierdiscrete_mode : integer_mode\n                         | boolean_mode\n                         | character_mode\n                         | discrete_range_modediscrete_mode_name : identifierinteger_mode : INTboolean_mode : BOOLcharacter_mode : CHARdiscrete_range_mode : discrete_mode_name LPAREN literal_range RPAREN\n                               | discrete_mode LPAREN literal_range RPARENliteral_range : lower_bound COLON upper_boundlower_bound : expressionupper_bound : expressionreference_mode : REF modecomposite_mode : string_mode\n                          | array_modestring_mode : CHARS LBRACKET string_length RBRACKETstring_length : integer_literalarray_mode : ARRAY LBRACKET index_mode_list RBRACKET element_modeindex_mode_list : index_mode\n                           | index_mode COMMA index_mode_listindex_mode : discrete_mode\n                      | literal_rangeelement_mode : modelocation : identifier\n\t\t\t\t    | dereferenced_reference\n\t\t\t\t    | string_element\n\t\t\t\t    | string_slice\n\t\t\t\t    | array_element\n\t\t\t\t    | array_slice\n\t\t\t\t    | call_actiondereferenced_reference : array_location ARROWstring_element : identifier LBRACKET start_element RBRACKETstart_element : expressionstring_slice : identifier LBRACKET left_element COLON right_element RBRACKETleft_element : expressionright_element : expressionarray_element : array_location LBRACKET expression_list RBRACKETexpression_list : expression\n    \t\t\t\t\t   | expression COMMA expression_listarray_slice : array_location LBRACKET lower_bound COLON upper_bound RBRACKETarray_location : locationexpression : operand0\n                      | conditional_expressionparenthesized_expression : LPAREN expression RPARENconditional_expression : IF expression then_expression else_expression FI\n                                  | IF expression then_expression elsif_expression else_expression FIthen_expression : THEN expressionelse_expression : ELSE expressionelsif_expression : ELSIF expression then_expression\n                            | elsif_expression ELSIF expression then_expressionoperand0 : operand1\n                    | operand0 operator1 operand1operand1 : operand2\n                    | operand1 operator2 operand2operand2 : operand3\n                    | operand2 arithmetic_multiplicative_operator operand3operand3 : monadic_operator operand4\n                    | operand4operand4 : array_location\n                    | referenced_location\n                    | primitive_valuearithmetic_multiplicative_operator : TIMES\n                                              | DIVIDE\n                                              | MODULOmonadic_operator : MINUS\n                            | NOTreferenced_location : ARROW array_locationoperator1 : relational_operator\n                     | membership_operatoroperator2 : arithmetic_additive_operator\n                     | string_concatenation_operatorarithmetic_additive_operator : PLUS\n                                        | MINUSstring_concatenation_operator : CONCATrelational_operator : AND\n                               | OR\n                               | EQUAL\n                               | NOTEQ\n                               | GREATER\n                               | GTEQUAL\n                               | LESS\n                               | LTEQUALmembership_operator : INprimitive_value : literal\n                           | value_array_element\n                           | value_array_slice\n                           | parenthesized_expressionliteral : integer_literal\n                   | boolean_literal\n                   | character_literal\n                   | empty_literal\n                   | character_string_literalvalue_array_element : primitive_value LBRACKET expression_list RBRACKETvalue_array_slice : primitive_value LBRACKET expression COLON expression RBRACKETinteger_literal : ICONSTboolean_literal : TRUE\n                           | FALSEcharacter_literal : CCONSTempty_literal : NULLcharacter_string_literal : SCONSTaction_statement : identifier COLON action SEMI\n                            | action SEMIaction : bracketed_action\n                  | assignment_action\n                  | call_action\n                  | exit_action\n                  | result_action\n                  | return_actionbracketed_action : if_action\n                            | do_actionassignment_action : array_location assigning_operator expressionassigning_operator : closed_dyadic_operator ASSIGN\n                              | ASSIGNclosed_dyadic_operator : arithmetic_additive_operator\n                                  | arithmetic_multiplicative_operator\n                                  | string_concatenation_operatorif_action : IF expression then_clause else_clause FI\n                     | IF expression then_clause FIthen_clause : THEN action_statement_listelse_clause : ELSE action_statement_list\n                       | ELSIF expression then_clause else_clause\n                       | ELSIF expression then_clauseaction_statement_list : action_statement action_statement_nullableaction_statement_nullable : action_statement action_statement_nullable\n                                     | emptycall_action : procedure_call\n                       | builtin_callbuiltin_call : builtin_name LPAREN parameter_list RPAREN\n                        | builtin_name LPAREN RPARENbuiltin_name : ABS\n                        | ASC\n                        | NUM\n                        | UPPER\n                        | LOWER\n                        | LENGTH\n                        | READ\n                        | PRINTprocedure_call : ID LPAREN parameter_list RPAREN\n                          | ID LPAREN RPARENparameter_list : expression\n                          | expression COMMA parameter_listexit_action : EXIT label_idlabel_id : IDreturn_action : RETURN resultresult : expression\n                  | emptyresult_action : RESULT expressiondo_action : DO control_part SEMI action_statement_nullable OD\n                     | DO action_statement_nullable ODcontrol_part : for_control while_control \n                        | for_control   \n                        | while_controlfor_control : FOR iterationiteration : step_enumeration\n                     | range_enumerationstep_enumeration : identifier ASSIGN expression step_value DOWN end_value\n                            | identifier ASSIGN expression step_value end_value\n                            | identifier ASSIGN expression DOWN end_value\n                            | identifier ASSIGN expression end_valuestep_value : BY expressionend_value : TO expressionrange_enumeration : identifier DOWN IN discrete_mode\n                             | identifier IN discrete_modewhile_control : WHILE expressionempty :'
    
_lr_action_items = {'EXIT':([0,2,3,5,9,22,23,44,46,73,112,121,134,158,160,166,197,201,236,242,244,318,333,341,344,],[33,33,-7,-6,-9,-5,-8,33,33,-144,33,33,-10,-24,-28,-15,33,33,-143,33,33,33,33,-30,-29,]),'COMMA':([4,8,13,21,27,28,43,45,57,64,65,66,68,74,77,78,79,80,81,82,83,85,87,88,90,91,92,93,94,95,96,97,98,100,101,102,103,104,105,109,110,131,137,138,140,141,143,144,146,148,150,151,152,153,154,156,162,164,167,172,188,189,209,215,217,220,222,225,227,228,230,231,232,235,237,250,251,257,260,261,262,265,269,271,288,289,291,294,297,299,304,312,313,314,320,321,323,],[-69,-67,-169,-168,-68,-71,-83,-70,-73,-23,135,136,157,165,-72,-93,-134,-103,-100,-141,-139,-129,-132,-138,-126,-95,-102,-85,-127,-137,-101,-140,-66,-23,-97,-128,-130,-131,-84,-133,-142,208,-38,-40,-47,-57,-41,-48,-45,-56,-43,-49,-39,-42,-44,-37,-181,223,-19,-99,-109,-171,-79,-14,-55,-27,-180,-18,-96,208,-86,-98,-94,-170,-74,-54,208,-63,293,-64,-13,295,-20,-135,-82,-51,-50,-58,-34,-87,-76,-52,-65,-60,-33,-136,-88,]),'COLON':([4,8,13,15,21,25,27,28,43,45,57,77,78,79,80,81,82,83,85,87,88,90,91,92,93,94,95,96,97,98,100,101,102,103,104,105,109,110,130,131,162,172,188,189,194,195,209,222,227,228,230,231,232,235,237,254,255,259,271,288,299,304,321,323,],[-69,-67,-169,71,-168,112,-68,-71,-83,-70,-73,-72,-93,-134,-103,-100,-141,-139,-129,-132,-138,-126,-95,-102,-85,-127,-137,-101,-140,-66,-23,-97,-128,-130,-131,-84,-133,-142,207,-53,-181,-99,-109,-171,238,-77,-79,-180,-96,270,-86,-98,-94,-170,-74,290,-53,-66,-135,-82,-87,-76,-136,-88,]),'TRUE':([20,36,41,49,51,52,53,54,56,59,61,62,72,84,86,89,99,106,111,113,122,133,145,168,169,170,171,174,175,176,177,178,179,180,181,182,183,184,185,186,207,208,212,213,214,216,223,226,234,238,241,247,270,273,274,290,293,303,310,311,],[88,88,88,-104,-114,-106,88,-116,88,-105,-115,-155,88,-108,88,88,-107,88,88,88,88,-154,88,88,-112,-113,88,88,-111,-117,-124,-119,-125,-121,-118,-120,-122,-123,88,-110,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'BOOL':([64,66,67,76,149,159,211,214,248,267,284,292,293,331,],[-23,-21,144,144,144,144,-22,144,144,144,144,144,144,144,]),'RPAREN':([4,8,13,21,27,28,43,45,57,64,72,77,78,79,80,81,82,83,85,87,88,90,91,92,93,94,95,96,97,98,100,101,102,103,104,105,109,110,111,137,138,140,141,143,144,146,148,150,151,152,153,154,156,162,163,164,172,173,188,189,190,209,217,222,227,230,231,232,235,237,250,253,256,265,266,268,271,288,289,291,294,297,299,304,312,313,314,316,320,321,323,336,340,],[-69,-67,-169,-168,-68,-71,-83,-70,-73,-23,162,-72,-93,-134,-103,-100,-141,-139,-129,-132,-138,-126,-95,-102,-85,-127,-137,-101,-140,-66,-23,-97,-128,-130,-131,-84,-133,-142,189,-38,-40,-47,-57,-41,-48,-45,-56,-43,-49,-39,-42,-44,-37,-181,222,-182,-99,230,-109,-171,235,-79,-55,-180,-96,-86,-98,-94,-170,-74,-54,289,291,-31,296,-183,-135,-82,-51,-50,-58,-34,-87,-76,-52,-65,-60,-32,-33,-136,-88,339,343,]),'ARRAY':([64,66,67,76,149,159,211,267,292,331,],[-23,-21,142,142,142,142,-22,142,142,142,]),'EQUAL':([4,8,13,21,27,28,43,45,57,77,78,79,80,81,82,83,85,87,88,90,91,92,94,95,96,97,98,100,101,102,103,104,105,109,110,162,172,188,189,209,222,227,230,231,232,235,237,259,271,288,304,321,],[-69,-67,-169,-168,-68,-71,-83,-70,-73,-72,-93,-134,-103,-100,-141,-139,-129,-132,-138,-126,-95,-102,-127,-137,-101,-140,-66,-23,-97,-128,-130,-131,178,-133,-142,-181,-99,-109,-171,-79,-180,-96,-86,-98,-94,-170,-74,-66,-135,-82,-76,-136,]),'TIMES':([1,4,8,10,13,15,21,25,27,28,43,45,57,77,79,80,81,82,83,85,87,88,90,91,92,94,95,96,97,98,100,101,102,103,104,109,110,162,172,188,189,191,209,222,227,230,231,235,237,259,271,288,304,321,],[-72,-69,-67,49,-169,-23,-168,-66,-68,-71,-83,-70,-73,-72,-134,-103,-100,-141,-139,-129,-132,-138,-126,49,-102,-127,-137,-101,-140,-66,-23,-97,-128,-130,-131,-133,-142,-181,-99,-109,-171,-23,-79,-180,49,-86,-98,-170,-74,-66,-135,-82,-76,-136,]),'LBRACKET':([1,4,8,10,13,15,21,25,27,28,43,45,57,77,79,80,82,83,85,87,88,90,94,95,96,97,98,100,102,103,104,109,110,142,155,162,188,189,191,209,222,230,235,237,259,271,288,304,321,],[-72,-69,-67,56,-169,-23,-168,113,-68,-71,-83,-70,-73,-72,-134,171,-141,-139,-129,-132,-138,-126,-127,-137,56,-140,113,-23,-128,-130,-131,-133,-142,214,218,-181,56,-171,-23,-79,-180,-86,-170,-74,113,-135,-82,-76,-136,]),'LTEQUAL':([4,8,13,21,27,28,43,45,57,77,78,79,80,81,82,83,85,87,88,90,91,92,94,95,96,97,98,100,101,102,103,104,105,109,110,162,172,188,189,209,222,227,230,231,232,235,237,259,271,288,304,321,],[-69,-67,-169,-168,-68,-71,-83,-70,-73,-72,-93,-134,-103,-100,-141,-139,-129,-132,-138,-126,-95,-102,-127,-137,-101,-140,-66,-23,-97,-128,-130,-131,177,-133,-142,-181,-99,-109,-171,-79,-180,-96,-86,-98,-94,-170,-74,-66,-135,-82,-76,-136,]),'THEN':([4,8,13,21,27,28,43,45,57,77,78,79,80,81,82,83,85,87,88,90,91,92,93,94,95,96,97,98,100,101,102,103,104,105,109,110,116,162,172,187,188,189,209,222,227,230,231,232,235,237,271,280,288,299,300,304,321,323,324,],[-69,-67,-169,-168,-68,-71,-83,-70,-73,-72,-93,-134,-103,-100,-141,-139,-129,-132,-138,-126,-95,-102,-85,-127,-137,-101,-140,-66,-23,-97,-128,-130,-131,-84,-133,-142,197,-181,-99,234,-109,-171,-79,-180,-96,-86,-98,-94,-170,-74,-135,197,-82,-87,234,-76,-136,-88,234,]),'LESS':([4,8,13,21,27,28,43,45,57,77,78,79,80,81,82,83,85,87,88,90,91,92,94,95,96,97,98,100,101,102,103,104,105,109,110,162,172,188,189,209,222,227,230,231,232,235,237,259,271,288,304,321,],[-69,-67,-169,-168,-68,-71,-83,-70,-73,-72,-93,-134,-103,-100,-141,-139,-129,-132,-138,-126,-95,-102,-127,-137,-101,-140,-66,-23,-97,-128,-130,-131,184,-133,-142,-181,-99,-109,-171,-79,-180,-96,-86,-98,-94,-170,-74,-66,-135,-82,-76,-136,]),'END':([3,5,9,22,23,46,48,73,128,134,158,160,166,236,318,332,333,338,341,344,],[-7,-6,-9,-5,-8,-207,-4,-144,-3,-10,-24,-28,-15,-143,-207,337,-207,342,-30,-29,]),'RBRACKET':([4,8,13,21,27,28,43,45,57,77,78,79,80,81,82,83,85,87,88,90,91,92,93,94,95,96,97,98,100,101,102,103,104,105,109,110,131,132,140,144,146,150,151,153,154,162,172,188,189,193,195,209,222,227,228,229,230,231,232,235,237,249,250,251,252,257,258,260,261,263,264,271,277,278,288,289,291,298,299,304,312,315,321,323,],[-69,-67,-169,-168,-68,-71,-83,-70,-73,-72,-93,-134,-103,-100,-141,-139,-129,-132,-138,-126,-95,-102,-85,-127,-137,-101,-140,-66,-23,-97,-128,-130,-131,-84,-133,-142,-80,209,-47,-48,-45,-43,-49,-42,-44,-181,-99,-109,-171,237,-75,-79,-180,-96,-80,271,-86,-98,-94,-170,-74,288,-54,-80,-81,-63,292,-61,-64,294,-59,-135,304,-78,-82,-51,-50,321,-87,-76,-52,-62,-136,-88,]),'FALSE':([20,36,41,49,51,52,53,54,56,59,61,62,72,84,86,89,99,106,111,113,122,133,145,168,169,170,171,174,175,176,177,178,179,180,181,182,183,184,185,186,207,208,212,213,214,216,223,226,234,238,241,247,270,273,274,290,293,303,310,311,],[83,83,83,-104,-114,-106,83,-116,83,-105,-115,-155,83,-108,83,83,-107,83,83,83,83,-154,83,83,-112,-113,83,83,-111,-117,-124,-119,-125,-121,-118,-120,-122,-123,83,-110,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'READ':([0,2,3,5,9,20,22,23,36,41,44,46,49,51,52,53,54,56,59,61,62,72,73,84,86,89,99,106,108,111,112,113,121,122,133,134,145,158,160,166,168,169,170,171,174,175,176,177,178,179,180,181,182,183,184,185,186,197,201,207,208,212,213,214,216,223,226,234,236,238,241,242,244,247,270,273,274,290,293,303,310,311,318,333,341,344,],[11,11,-7,-6,-9,11,-5,-8,11,11,11,11,-104,-114,-106,11,-116,11,-105,-115,-155,11,-144,-108,11,11,-107,11,11,11,11,11,11,11,-154,-10,11,-24,-28,-15,11,-112,-113,11,11,-111,-117,-124,-119,-125,-121,-118,-120,-122,-123,11,-110,11,11,11,11,11,11,11,11,11,11,11,-143,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-30,-29,]),'CHAR':([64,66,67,76,149,159,211,214,248,267,284,292,293,331,],[-23,-21,151,151,151,151,-22,151,151,151,151,151,151,151,]),'WHILE':([4,8,13,21,27,28,43,44,45,57,77,78,79,80,81,82,83,85,87,88,90,91,92,93,94,95,96,97,98,100,101,102,103,104,105,109,110,127,140,144,146,150,151,153,154,162,172,188,189,203,204,205,209,222,227,230,231,232,235,237,271,286,288,289,291,299,304,306,309,321,323,326,328,329,335,],[-69,-67,-169,-168,-68,-71,-83,122,-70,-73,-72,-93,-134,-103,-100,-141,-139,-129,-132,-138,-126,-95,-102,-85,-127,-137,-101,-140,-66,-23,-97,-128,-130,-131,-84,-133,-142,122,-47,-48,-45,-43,-49,-42,-44,-181,-99,-109,-171,-195,-197,-196,-79,-180,-96,-86,-98,-94,-170,-74,-135,-205,-82,-51,-50,-87,-76,-204,-201,-136,-88,-200,-199,-203,-198,]),'MODULO':([1,4,8,10,13,15,21,25,27,28,43,45,57,77,79,80,81,82,83,85,87,88,90,91,92,94,95,96,97,98,100,101,102,103,104,109,110,162,172,188,189,191,209,222,227,230,231,235,237,259,271,288,304,321,],[-72,-69,-67,52,-169,-23,-168,-66,-68,-71,-83,-70,-73,-72,-134,-103,-100,-141,-139,-129,-132,-138,-126,52,-102,-127,-137,-101,-140,-66,-23,-97,-128,-130,-131,-133,-142,-181,-99,-109,-171,-23,-79,-180,52,-86,-98,-170,-74,-66,-135,-82,-76,-136,]),'CONCAT':([1,4,8,10,13,15,21,25,27,28,43,45,57,77,78,79,80,81,82,83,85,87,88,90,91,92,94,95,96,97,98,100,101,102,103,104,109,110,162,172,188,189,191,209,222,227,230,231,232,235,237,259,271,288,304,321,],[-72,-69,-67,54,-169,-23,-168,-66,-68,-71,-83,-70,-73,-72,54,-134,-103,-100,-141,-139,-129,-132,-138,-126,-95,-102,-127,-137,-101,-140,-66,-23,-97,-128,-130,-131,-133,-142,-181,-99,-109,-171,-23,-79,-180,-96,-86,-98,54,-170,-74,-66,-135,-82,-76,-136,]),'ELSE':([4,8,13,21,27,28,43,45,57,73,77,78,79,80,81,82,83,85,87,88,90,91,92,93,94,95,96,97,98,100,101,102,103,104,105,109,110,121,126,162,172,188,189,196,199,209,222,227,230,231,232,233,235,236,237,243,244,271,275,276,282,288,299,304,305,321,322,323,334,],[-69,-67,-169,-168,-68,-71,-83,-70,-73,-144,-72,-93,-134,-103,-100,-141,-139,-129,-132,-138,-126,-95,-102,-85,-127,-137,-101,-140,-66,-23,-97,-128,-130,-131,-84,-133,-142,-207,-167,-181,-99,-109,-171,242,-166,-79,-180,-96,-86,-98,-94,274,-170,-143,-74,-161,-207,-135,274,-89,-165,-82,-87,-76,242,-136,-91,-88,-92,]),'AND':([4,8,13,21,27,28,43,45,57,77,78,79,80,81,82,83,85,87,88,90,91,92,94,95,96,97,98,100,101,102,103,104,105,109,110,162,172,188,189,209,222,227,230,231,232,235,237,259,271,288,304,321,],[-69,-67,-169,-168,-68,-71,-83,-70,-73,-72,-93,-134,-103,-100,-141,-139,-129,-132,-138,-126,-95,-102,-127,-137,-101,-140,-66,-23,-97,-128,-130,-131,176,-133,-142,-181,-99,-109,-171,-79,-180,-96,-86,-98,-94,-170,-74,-66,-135,-82,-76,-136,]),'LPAREN':([6,7,11,15,16,17,20,24,36,37,40,41,42,49,51,52,53,54,56,59,61,62,64,72,84,86,89,99,100,106,111,113,122,133,137,139,140,143,144,145,146,150,151,153,154,161,168,169,170,171,174,175,176,177,178,179,180,181,182,183,184,185,186,191,207,208,212,213,214,216,223,226,234,238,241,247,257,259,270,273,274,286,287,289,290,291,293,303,306,310,311,317,],[-179,-174,-178,72,-175,-172,89,111,89,-176,-177,89,-173,-104,-114,-106,89,-116,89,-105,-115,-155,-23,89,-108,89,89,-107,72,89,89,89,89,-154,212,213,-47,-46,-48,89,-45,-43,-49,-42,-44,221,89,-112,-113,89,89,-111,-117,-124,-119,-125,-121,-118,-120,-122,-123,89,-110,72,89,89,89,89,89,89,89,89,89,89,89,89,212,-46,89,89,89,212,-46,-51,89,-50,89,89,212,89,89,331,]),'$end':([2,3,5,9,22,23,34,38,46,47,48,73,128,134,158,160,166,236,341,344,],[-207,-7,-6,-9,-5,-8,0,-1,-207,-2,-4,-144,-3,-10,-24,-28,-15,-143,-30,-29,]),'PLUS':([1,4,8,10,13,15,21,25,27,28,43,45,57,77,78,79,80,81,82,83,85,87,88,90,91,92,94,95,96,97,98,100,101,102,103,104,109,110,162,172,188,189,191,209,222,227,230,231,232,235,237,259,271,288,304,321,],[-72,-69,-67,51,-169,-23,-168,-66,-68,-71,-83,-70,-73,-72,51,-134,-103,-100,-141,-139,-129,-132,-138,-126,-95,-102,-127,-137,-101,-140,-66,-23,-97,-128,-130,-131,-133,-142,-181,-99,-109,-171,-23,-79,-180,-96,-86,-98,51,-170,-74,-66,-135,-82,-76,-136,]),'SYN':([0,2,3,5,9,22,23,46,73,134,158,160,166,236,318,333,341,344,],[12,12,-7,-6,-9,-5,-8,12,-144,-10,-24,-28,-15,-143,12,12,-30,-29,]),'INT':([64,66,67,76,149,159,211,214,248,267,284,292,293,331,],[-23,-21,140,140,140,140,-22,140,140,140,140,140,140,140,]),'FOR':([44,],[125,]),'NOTEQ':([4,8,13,21,27,28,43,45,57,77,78,79,80,81,82,83,85,87,88,90,91,92,94,95,96,97,98,100,101,102,103,104,105,109,110,162,172,188,189,209,222,227,230,231,232,235,237,259,271,288,304,321,],[-69,-67,-169,-168,-68,-71,-83,-70,-73,-72,-93,-134,-103,-100,-141,-139,-129,-132,-138,-126,-95,-102,-127,-137,-101,-140,-66,-23,-97,-128,-130,-131,182,-133,-142,-181,-99,-109,-171,-79,-180,-96,-86,-98,-94,-170,-74,-66,-135,-82,-76,-136,]),'TYPE':([0,2,3,5,9,22,23,46,73,134,158,160,166,236,318,333,341,344,],[14,14,-7,-6,-9,-5,-8,14,-144,-10,-24,-28,-15,-143,14,14,-30,-29,]),'PROC':([71,],[161,]),'RETURNS':([296,],[317,]),'ID':([0,2,3,5,9,12,14,19,20,22,23,33,36,41,44,46,49,51,52,53,54,56,59,61,62,64,66,67,72,73,76,84,86,89,99,106,108,111,112,113,121,122,125,133,134,135,136,145,149,157,158,159,160,165,166,168,169,170,171,174,175,176,177,178,179,180,181,182,183,184,185,186,197,201,207,208,211,212,213,214,216,221,223,226,234,236,238,241,242,244,247,248,267,270,273,274,284,290,292,293,295,303,310,311,318,331,333,341,344,],[15,15,-7,-6,-9,64,64,64,100,-5,-8,115,100,100,100,15,-104,-114,-106,100,-116,100,-105,-115,-155,-23,-21,64,100,-144,64,-108,100,100,-107,100,100,100,191,100,100,100,64,-154,-10,64,64,100,64,64,-24,64,-28,64,-15,100,-112,-113,100,100,-111,-117,-124,-119,-125,-121,-118,-120,-122,-123,100,-110,100,100,100,100,-22,100,100,100,100,64,100,100,100,-143,100,100,100,100,100,64,64,100,100,100,64,100,64,100,64,100,100,100,15,64,15,-30,-29,]),'UPPER':([0,2,3,5,9,20,22,23,36,41,44,46,49,51,52,53,54,56,59,61,62,72,73,84,86,89,99,106,108,111,112,113,121,122,133,134,145,158,160,166,168,169,170,171,174,175,176,177,178,179,180,181,182,183,184,185,186,197,201,207,208,212,213,214,216,223,226,234,236,238,241,242,244,247,270,273,274,290,293,303,310,311,318,333,341,344,],[16,16,-7,-6,-9,16,-5,-8,16,16,16,16,-104,-114,-106,16,-116,16,-105,-115,-155,16,-144,-108,16,16,-107,16,16,16,16,16,16,16,-154,-10,16,-24,-28,-15,16,-112,-113,16,16,-111,-117,-124,-119,-125,-121,-118,-120,-122,-123,16,-110,16,16,16,16,16,16,16,16,16,16,16,-143,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-30,-29,]),'ABS':([0,2,3,5,9,20,22,23,36,41,44,46,49,51,52,53,54,56,59,61,62,72,73,84,86,89,99,106,108,111,112,113,121,122,133,134,145,158,160,166,168,169,170,171,174,175,176,177,178,179,180,181,182,183,184,185,186,197,201,207,208,212,213,214,216,223,226,234,236,238,241,242,244,247,270,273,274,290,293,303,310,311,318,333,341,344,],[17,17,-7,-6,-9,17,-5,-8,17,17,17,17,-104,-114,-106,17,-116,17,-105,-115,-155,17,-144,-108,17,17,-107,17,17,17,17,17,17,17,-154,-10,17,-24,-28,-15,17,-112,-113,17,17,-111,-117,-124,-119,-125,-121,-118,-120,-122,-123,17,-110,17,17,17,17,17,17,17,17,17,17,17,-143,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-30,-29,]),'MINUS':([1,4,8,10,13,15,20,21,25,27,28,36,41,43,45,49,51,52,53,54,56,57,59,61,62,72,77,78,79,80,81,82,83,85,87,88,89,90,91,92,94,95,96,97,98,100,101,102,103,104,106,109,110,111,113,122,133,145,162,168,169,170,171,172,174,175,176,177,178,179,180,181,182,183,184,185,186,188,189,191,207,208,209,212,213,214,216,222,223,226,227,230,231,232,234,235,237,238,241,247,259,270,271,273,274,288,290,293,303,304,310,311,321,],[-72,-69,-67,61,-169,-23,99,-168,-66,-68,-71,99,99,-83,-70,-104,-114,-106,99,-116,99,-73,-105,-115,-155,99,-72,61,-134,-103,-100,-141,-139,-129,-132,-138,99,-126,-95,-102,-127,-137,-101,-140,-66,-23,-97,-128,-130,-131,99,-133,-142,99,99,99,-154,99,-181,99,-112,-113,99,-99,99,-111,-117,-124,-119,-125,-121,-118,-120,-122,-123,99,-110,-109,-171,-23,99,99,-79,99,99,99,99,-180,99,99,-96,-86,-98,61,99,-170,-74,99,99,99,-66,99,-135,99,99,-82,99,99,99,-76,99,99,-136,]),'DCL':([0,2,3,5,9,22,23,46,73,134,158,160,166,236,318,333,341,344,],[19,19,-7,-6,-9,-5,-8,19,-144,-10,-24,-28,-15,-143,19,19,-30,-29,]),'RESULT':([0,2,3,5,9,22,23,44,46,73,112,121,134,158,160,166,197,201,236,242,244,318,333,341,344,],[20,20,-7,-6,-9,-5,-8,20,20,-144,20,20,-10,-24,-28,-15,20,20,-143,20,20,20,20,-30,-29,]),'NOT':([20,36,41,49,51,52,53,54,56,59,61,62,72,89,106,111,113,122,133,145,168,169,170,171,174,175,176,177,178,179,180,181,182,183,184,185,186,207,208,212,213,214,216,223,226,234,238,241,247,270,273,274,290,293,303,310,311,],[84,84,84,-104,-114,-106,84,-116,84,-105,-115,-155,84,84,84,84,84,84,-154,84,84,-112,-113,84,84,-111,-117,-124,-119,-125,-121,-118,-120,-122,-123,84,-110,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'DOWN':([4,8,13,21,27,28,43,45,57,64,77,78,79,80,81,82,83,85,87,88,90,91,92,93,94,95,96,97,98,100,101,102,103,104,105,109,110,162,172,188,189,202,209,222,227,230,231,232,235,237,271,285,288,299,304,308,321,323,330,],[-69,-67,-169,-168,-68,-71,-83,-70,-73,-23,-72,-93,-134,-103,-100,-141,-139,-129,-132,-138,-126,-95,-102,-85,-127,-137,-101,-140,-66,-23,-97,-128,-130,-131,-84,-133,-142,-181,-99,-109,-171,246,-79,-180,-96,-86,-98,-94,-170,-74,-135,307,-82,-87,-76,327,-136,-88,-202,]),'ICONST':([20,36,41,49,51,52,53,54,56,59,61,62,72,84,86,89,99,106,111,113,122,133,145,168,169,170,171,174,175,176,177,178,179,180,181,182,183,184,185,186,207,208,212,213,214,216,218,223,226,234,238,241,247,270,273,274,290,293,303,310,311,],[95,95,95,-104,-114,-106,95,-116,95,-105,-115,-155,95,-108,95,95,-107,95,95,95,95,-154,95,95,-112,-113,95,95,-111,-117,-124,-119,-125,-121,-118,-120,-122,-123,95,-110,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'SEMI':([1,4,8,13,18,21,26,27,28,29,30,31,32,35,39,41,43,45,57,63,64,65,68,69,74,75,77,78,79,80,81,82,83,85,87,88,90,91,92,93,94,95,96,97,98,100,101,102,103,104,105,107,109,110,114,115,117,118,119,123,124,127,129,137,138,140,141,143,144,146,148,150,151,152,153,154,156,162,167,172,188,189,192,198,200,203,204,205,206,209,210,215,217,219,220,222,224,225,227,230,231,232,235,237,240,262,269,271,279,283,286,288,289,291,294,296,299,304,306,309,313,314,319,321,323,326,328,329,335,337,339,342,343,],[-147,-69,-67,-169,73,-168,-145,-68,-71,-150,-146,-152,-149,-148,-151,-207,-83,-70,-73,134,-23,-11,-25,158,-16,166,-72,-93,-134,-103,-100,-141,-139,-129,-132,-138,-126,-95,-102,-85,-127,-137,-101,-140,-66,-23,-97,-128,-130,-131,-84,-189,-133,-142,-184,-185,-188,-186,-187,201,-194,-193,-153,-38,-40,-47,-57,-41,-48,-45,-56,-43,-49,-39,-42,-44,-37,-181,-19,-99,-109,-171,236,-191,-206,-195,-197,-196,-192,-79,-12,-14,-55,-26,-27,-180,-17,-18,-96,-86,-98,-94,-170,-74,-160,-13,-20,-135,-159,-190,-205,-82,-51,-50,-58,318,-87,-76,-204,-201,-65,-60,333,-136,-88,-200,-199,-203,-198,341,-36,344,-35,]),'CCONST':([20,36,41,49,51,52,53,54,56,59,61,62,72,84,86,89,99,106,111,113,122,133,145,168,169,170,171,174,175,176,177,178,179,180,181,182,183,184,185,186,207,208,212,213,214,216,223,226,234,238,241,247,270,273,274,290,293,303,310,311,],[97,97,97,-104,-114,-106,97,-116,97,-105,-115,-155,97,-108,97,97,-107,97,97,97,97,-154,97,97,-112,-113,97,97,-111,-117,-124,-119,-125,-121,-118,-120,-122,-123,97,-110,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,]),'OR':([4,8,13,21,27,28,43,45,57,77,78,79,80,81,82,83,85,87,88,90,91,92,94,95,96,97,98,100,101,102,103,104,105,109,110,162,172,188,189,209,222,227,230,231,232,235,237,259,271,288,304,321,],[-69,-67,-169,-168,-68,-71,-83,-70,-73,-72,-93,-134,-103,-100,-141,-139,-129,-132,-138,-126,-95,-102,-127,-137,-101,-140,-66,-23,-97,-128,-130,-131,181,-133,-142,-181,-99,-109,-171,-79,-180,-96,-86,-98,-94,-170,-74,-66,-135,-82,-76,-136,]),'GTEQUAL':([4,8,13,21,27,28,43,45,57,77,78,79,80,81,82,83,85,87,88,90,91,92,94,95,96,97,98,100,101,102,103,104,105,109,110,162,172,188,189,209,222,227,230,231,232,235,237,259,271,288,304,321,],[-69,-67,-169,-168,-68,-71,-83,-70,-73,-72,-93,-134,-103,-100,-141,-139,-129,-132,-138,-126,-95,-102,-127,-137,-101,-140,-66,-23,-97,-128,-130,-131,183,-133,-142,-181,-99,-109,-171,-79,-180,-96,-86,-98,-94,-170,-74,-66,-135,-82,-76,-136,]),'ASSIGN':([1,4,8,10,13,15,21,25,27,28,43,45,49,50,51,52,54,55,57,58,59,60,61,64,66,67,70,98,100,137,138,140,141,143,144,146,147,148,150,151,152,153,154,156,162,167,189,191,202,209,211,217,222,235,237,288,289,291,294,304,313,314,],[-72,-69,-67,62,-169,-23,-168,-66,-68,-71,-83,-70,-104,-156,-114,-106,-116,-158,-73,133,-105,-157,-115,-23,-21,145,159,-66,-23,-38,-40,-47,-57,-41,-48,-45,216,-56,-43,-49,-39,-42,-44,-37,-181,226,-171,-23,247,-79,-22,-55,-180,-170,-74,-82,-51,-50,-58,-76,-65,-60,]),'PRINT':([0,2,3,5,9,20,22,23,36,41,44,46,49,51,52,53,54,56,59,61,62,72,73,84,86,89,99,106,108,111,112,113,121,122,133,134,145,158,160,166,168,169,170,171,174,175,176,177,178,179,180,181,182,183,184,185,186,197,201,207,208,212,213,214,216,223,226,234,236,238,241,242,244,247,270,273,274,290,293,303,310,311,318,333,341,344,],[6,6,-7,-6,-9,6,-5,-8,6,6,6,6,-104,-114,-106,6,-116,6,-105,-115,-155,6,-144,-108,6,6,-107,6,6,6,6,6,6,6,-154,-10,6,-24,-28,-15,6,-112,-113,6,6,-111,-117,-124,-119,-125,-121,-118,-120,-122,-123,6,-110,6,6,6,6,6,6,6,6,6,6,6,-143,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,-30,-29,]),'REF':([64,66,67,76,149,159,211,267,292,331,],[-23,-21,149,149,149,149,-22,149,149,149,]),'BY':([4,8,13,21,27,28,43,45,57,77,78,79,80,81,82,83,85,87,88,90,91,92,93,94,95,96,97,98,100,101,102,103,104,105,109,110,162,172,188,189,209,222,227,230,231,232,235,237,271,285,288,299,304,321,323,],[-69,-67,-169,-168,-68,-71,-83,-70,-73,-72,-93,-134,-103,-100,-141,-139,-129,-132,-138,-126,-95,-102,-85,-127,-137,-101,-140,-66,-23,-97,-128,-130,-131,-84,-133,-142,-181,-99,-109,-171,-79,-180,-96,-86,-98,-94,-170,-74,-135,311,-82,-87,-76,-136,-88,]),'DIVIDE':([1,4,8,10,13,15,21,25,27,28,43,45,57,77,79,80,81,82,83,85,87,88,90,91,92,94,95,96,97,98,100,101,102,103,104,109,110,162,172,188,189,191,209,222,227,230,231,235,237,259,271,288,304,321,],[-72,-69,-67,59,-169,-23,-168,-66,-68,-71,-83,-70,-73,-72,-134,-103,-100,-141,-139,-129,-132,-138,-126,59,-102,-127,-137,-101,-140,-66,-23,-97,-128,-130,-131,-133,-142,-181,-99,-109,-171,-23,-79,-180,59,-86,-98,-170,-74,-66,-135,-82,-76,-136,]),'TO':([4,8,13,21,27,28,43,45,57,77,78,79,80,81,82,83,85,87,88,90,91,92,93,94,95,96,97,98,100,101,102,103,104,105,109,110,162,172,188,189,209,222,227,230,231,232,235,237,271,285,288,299,304,307,308,321,323,327,330,],[-69,-67,-169,-168,-68,-71,-83,-70,-73,-72,-93,-134,-103,-100,-141,-139,-129,-132,-138,-126,-95,-102,-85,-127,-137,-101,-140,-66,-23,-97,-128,-130,-131,-84,-133,-142,-181,-99,-109,-171,-79,-180,-96,-86,-98,-94,-170,-74,-135,310,-82,-87,-76,310,310,-136,-88,310,-202,]),'IN':([4,8,13,21,27,28,43,45,57,64,77,78,79,80,81,82,83,85,87,88,90,91,92,94,95,96,97,98,100,101,102,103,104,105,109,110,162,172,188,189,202,209,222,227,230,231,232,235,237,246,259,271,288,304,321,],[-69,-67,-169,-168,-68,-71,-83,-70,-73,-23,-72,-93,-134,-103,-100,-141,-139,-129,-132,-138,-126,-95,-102,-127,-137,-101,-140,-66,-23,-97,-128,-130,-131,179,-133,-142,-181,-99,-109,-171,248,-79,-180,-96,-86,-98,-94,-170,-74,284,-66,-135,-82,-76,-136,]),'OD':([44,73,120,121,126,199,201,236,245,],[-207,-144,198,-207,-167,-166,-207,-143,283,]),'ELSIF':([4,8,13,21,27,28,43,45,57,73,77,78,79,80,81,82,83,85,87,88,90,91,92,93,94,95,96,97,98,100,101,102,103,104,105,109,110,121,126,162,172,188,189,196,199,209,222,227,230,231,232,233,235,236,237,243,244,271,275,276,282,288,299,304,305,321,322,323,334,],[-69,-67,-169,-168,-68,-71,-83,-70,-73,-144,-72,-93,-134,-103,-100,-141,-139,-129,-132,-138,-126,-95,-102,-85,-127,-137,-101,-140,-66,-23,-97,-128,-130,-131,-84,-133,-142,-207,-167,-181,-99,-109,-171,241,-166,-79,-180,-96,-86,-98,-94,273,-170,-143,-74,-161,-207,-135,303,-89,-165,-82,-87,-76,241,-136,-91,-88,-92,]),'SCONST':([20,36,41,49,51,52,53,54,56,59,61,62,72,84,86,89,99,106,111,113,122,133,145,168,169,170,171,174,175,176,177,178,179,180,181,182,183,184,185,186,207,208,212,213,214,216,223,226,234,238,241,247,270,273,274,290,293,303,310,311,],[110,110,110,-104,-114,-106,110,-116,110,-105,-115,-155,110,-108,110,110,-107,110,110,110,110,-154,110,110,-112,-113,110,110,-111,-117,-124,-119,-125,-121,-118,-120,-122,-123,110,-110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,]),'LOC':([64,137,138,140,141,143,144,146,148,150,151,152,153,154,156,217,289,291,294,297,313,314,336,],[-23,-38,-40,-47,-57,-41,-48,-45,-56,-43,-49,-39,-42,-44,-37,-55,-51,-50,-58,320,-65,-60,340,]),'NULL':([20,36,41,49,51,52,53,54,56,59,61,62,72,84,86,89,99,106,111,113,122,133,145,168,169,170,171,174,175,176,177,178,179,180,181,182,183,184,185,186,207,208,212,213,214,216,223,226,234,238,241,247,270,273,274,290,293,303,310,311,],[82,82,82,-104,-114,-106,82,-116,82,-105,-115,-155,82,-108,82,82,-107,82,82,82,82,-154,82,82,-112,-113,82,82,-111,-117,-124,-119,-125,-121,-118,-120,-122,-123,82,-110,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'IF':([0,2,3,5,9,20,22,23,36,41,44,46,53,56,62,72,73,89,106,111,112,113,121,122,133,134,145,158,160,166,171,197,201,207,208,212,213,214,216,223,226,234,236,238,241,242,244,247,270,273,274,290,293,303,310,311,318,333,341,344,],[36,36,-7,-6,-9,106,-5,-8,106,106,36,36,106,106,-155,106,-144,106,106,106,36,106,36,106,-154,-10,106,-24,-28,-15,106,36,36,106,106,106,106,106,106,106,106,106,-143,106,106,36,36,106,106,106,106,106,106,106,106,106,36,36,-30,-29,]),'CHARS':([64,66,67,76,149,159,211,267,292,331,],[-23,-21,155,155,155,155,-22,155,155,155,]),'GREATER':([4,8,13,21,27,28,43,45,57,77,78,79,80,81,82,83,85,87,88,90,91,92,94,95,96,97,98,100,101,102,103,104,105,109,110,162,172,188,189,209,222,227,230,231,232,235,237,259,271,288,304,321,],[-69,-67,-169,-168,-68,-71,-83,-70,-73,-72,-93,-134,-103,-100,-141,-139,-129,-132,-138,-126,-95,-102,-127,-137,-101,-140,-66,-23,-97,-128,-130,-131,180,-133,-142,-181,-99,-109,-171,-79,-180,-96,-86,-98,-94,-170,-74,-66,-135,-82,-76,-136,]),'ARROW':([1,4,8,10,13,15,20,21,25,27,28,36,41,43,45,49,51,52,53,54,56,57,59,61,62,72,77,84,86,89,96,98,99,100,106,111,113,122,133,145,162,168,169,170,171,174,175,176,177,178,179,180,181,182,183,184,185,186,188,189,191,207,208,209,212,213,214,216,222,223,226,234,235,237,238,241,247,259,270,273,274,288,290,293,303,304,310,311,],[-72,-69,-67,57,-169,-23,108,-168,-66,-68,-71,108,108,-83,-70,-104,-114,-106,108,-116,108,-73,-105,-115,-155,108,-72,-108,108,108,57,-66,-107,-23,108,108,108,108,-154,108,-181,108,-112,-113,108,108,-111,-117,-124,-119,-125,-121,-118,-120,-122,-123,108,-110,57,-171,-23,108,108,-79,108,108,108,108,-180,108,108,108,-170,-74,108,108,108,-66,108,108,108,-82,108,108,108,-76,108,108,]),'FI':([4,8,13,21,27,28,43,45,57,73,77,78,79,80,81,82,83,85,87,88,90,91,92,93,94,95,96,97,98,100,101,102,103,104,105,109,110,121,126,162,172,188,189,196,199,209,222,227,230,231,232,235,236,237,239,243,244,271,272,281,282,288,299,301,302,304,305,321,323,325,],[-69,-67,-169,-168,-68,-71,-83,-70,-73,-144,-72,-93,-134,-103,-100,-141,-139,-129,-132,-138,-126,-95,-102,-85,-127,-137,-101,-140,-66,-23,-97,-128,-130,-131,-84,-133,-142,-207,-167,-181,-99,-109,-171,240,-166,-79,-180,-96,-86,-98,-94,-170,-143,-74,279,-161,-207,-135,299,-162,-165,-82,-87,-90,323,-76,-164,-136,-88,-163,]),'LENGTH':([0,2,3,5,9,20,22,23,36,41,44,46,49,51,52,53,54,56,59,61,62,72,73,84,86,89,99,106,108,111,112,113,121,122,133,134,145,158,160,166,168,169,170,171,174,175,176,177,178,179,180,181,182,183,184,185,186,197,201,207,208,212,213,214,216,223,226,234,236,238,241,242,244,247,270,273,274,290,293,303,310,311,318,333,341,344,],[40,40,-7,-6,-9,40,-5,-8,40,40,40,40,-104,-114,-106,40,-116,40,-105,-115,-155,40,-144,-108,40,40,-107,40,40,40,40,40,40,40,-154,-10,40,-24,-28,-15,40,-112,-113,40,40,-111,-117,-124,-119,-125,-121,-118,-120,-122,-123,40,-110,40,40,40,40,40,40,40,40,40,40,40,-143,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-30,-29,]),'RETURN':([0,2,3,5,9,22,23,44,46,73,112,121,134,158,160,166,197,201,236,242,244,318,333,341,344,],[41,41,-7,-6,-9,-5,-8,41,41,-144,41,41,-10,-24,-28,-15,41,41,-143,41,41,41,41,-30,-29,]),'ASC':([0,2,3,5,9,20,22,23,36,41,44,46,49,51,52,53,54,56,59,61,62,72,73,84,86,89,99,106,108,111,112,113,121,122,133,134,145,158,160,166,168,169,170,171,174,175,176,177,178,179,180,181,182,183,184,185,186,197,201,207,208,212,213,214,216,223,226,234,236,238,241,242,244,247,270,273,274,290,293,303,310,311,318,333,341,344,],[42,42,-7,-6,-9,42,-5,-8,42,42,42,42,-104,-114,-106,42,-116,42,-105,-115,-155,42,-144,-108,42,42,-107,42,42,42,42,42,42,42,-154,-10,42,-24,-28,-15,42,-112,-113,42,42,-111,-117,-124,-119,-125,-121,-118,-120,-122,-123,42,-110,42,42,42,42,42,42,42,42,42,42,42,-143,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-30,-29,]),'NUM':([0,2,3,5,9,20,22,23,36,41,44,46,49,51,52,53,54,56,59,61,62,72,73,84,86,89,99,106,108,111,112,113,121,122,133,134,145,158,160,166,168,169,170,171,174,175,176,177,178,179,180,181,182,183,184,185,186,197,201,207,208,212,213,214,216,223,226,234,236,238,241,242,244,247,270,273,274,290,293,303,310,311,318,333,341,344,],[7,7,-7,-6,-9,7,-5,-8,7,7,7,7,-104,-114,-106,7,-116,7,-105,-115,-155,7,-144,-108,7,7,-107,7,7,7,7,7,7,7,-154,-10,7,-24,-28,-15,7,-112,-113,7,7,-111,-117,-124,-119,-125,-121,-118,-120,-122,-123,7,-110,7,7,7,7,7,7,7,7,7,7,7,-143,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-30,-29,]),'LOWER':([0,2,3,5,9,20,22,23,36,41,44,46,49,51,52,53,54,56,59,61,62,72,73,84,86,89,99,106,108,111,112,113,121,122,133,134,145,158,160,166,168,169,170,171,174,175,176,177,178,179,180,181,182,183,184,185,186,197,201,207,208,212,213,214,216,223,226,234,236,238,241,242,244,247,270,273,274,290,293,303,310,311,318,333,341,344,],[37,37,-7,-6,-9,37,-5,-8,37,37,37,37,-104,-114,-106,37,-116,37,-105,-115,-155,37,-144,-108,37,37,-107,37,37,37,37,37,37,37,-154,-10,37,-24,-28,-15,37,-112,-113,37,37,-111,-117,-124,-119,-125,-121,-118,-120,-122,-123,37,-110,37,37,37,37,37,37,37,37,37,37,37,-143,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-30,-29,]),'DO':([0,2,3,5,9,22,23,44,46,73,112,121,134,158,160,166,197,201,236,242,244,318,333,341,344,],[44,44,-7,-6,-9,-5,-8,44,44,-144,44,44,-10,-24,-28,-15,44,44,-143,44,44,44,44,-30,-29,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'call_action':([0,2,20,36,41,44,46,53,56,72,86,89,106,108,111,112,113,121,122,145,168,171,174,185,197,201,207,208,212,213,214,216,223,226,234,238,241,242,244,247,270,273,274,290,293,303,310,311,318,333,],[1,1,77,77,77,1,1,77,77,77,77,77,77,77,77,1,77,1,77,77,77,77,77,77,1,1,77,77,77,77,77,77,77,77,77,77,77,1,1,77,77,77,77,77,77,77,77,77,1,1,]),'statement':([0,2,46,318,333,],[2,46,46,46,46,]),'operand1':([20,36,41,53,56,72,89,106,111,113,122,145,171,185,207,208,212,213,214,216,223,226,234,238,241,247,270,273,274,290,293,303,310,311,],[78,78,78,78,78,78,78,78,78,78,78,78,78,232,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'referenced_location':([20,36,41,53,56,72,86,89,106,111,113,122,145,168,171,174,185,207,208,212,213,214,216,223,226,234,238,241,247,270,273,274,290,293,303,310,311,],[92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,]),'declaration_list':([19,165,],[75,224,]),'array_mode':([67,76,149,159,267,292,331,],[141,141,141,141,141,141,141,]),'start_element':([113,],[193,]),'assignment_action':([0,2,44,46,112,121,197,201,242,244,318,333,],[30,30,30,30,30,30,30,30,30,30,30,30,]),'closed_dyadic_operator':([10,],[58,]),'else_expression':([233,275,],[272,302,]),'identifier_list':([12,14,19,135,136,157,165,221,295,],[67,70,76,67,211,70,76,267,267,]),'step_enumeration':([125,],[205,]),'procedure_statement':([0,2,46,318,333,],[9,9,9,9,9,]),'control_part':([44,],[123,]),'upper_bound':([207,290,],[249,312,]),'arithmetic_additive_operator':([10,78,232,],[50,169,169,]),'else_clause':([196,305,],[239,325,]),'string_slice':([0,2,20,36,41,44,46,53,56,72,86,89,106,108,111,112,113,121,122,145,168,171,174,185,197,201,207,208,212,213,214,216,223,226,234,238,241,242,244,247,270,273,274,290,293,303,310,311,318,333,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'action_statement_nullable':([44,121,201,244,],[120,199,245,282,]),'element_mode':([292,],[314,]),'builtin_call':([0,2,20,36,41,44,46,53,56,72,86,89,106,108,111,112,113,121,122,145,168,171,174,185,197,201,207,208,212,213,214,216,223,226,234,238,241,242,244,247,270,273,274,290,293,303,310,311,318,333,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'formal_parameter':([221,295,],[265,265,]),'elsif_expression':([233,],[275,]),'declaration':([19,165,],[74,74,]),'operator1':([105,],[185,]),'action':([0,2,44,46,112,121,197,201,242,244,318,333,],[18,18,18,18,192,18,18,18,18,18,18,18,]),'discrete_mode':([67,76,149,159,214,248,267,284,292,293,331,],[137,137,137,137,257,286,137,306,137,257,137,]),'composite_mode':([67,76,149,159,267,292,331,],[138,138,138,138,138,138,138,]),'left_element':([113,],[194,]),'primitive_value':([20,36,41,53,56,72,86,89,106,111,113,122,145,168,171,174,185,207,208,212,213,214,216,223,226,234,238,241,247,270,273,274,290,293,303,310,311,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'discrete_mode_name':([67,76,149,159,214,248,267,284,292,293,331,],[139,139,139,139,139,139,139,139,139,139,139,]),'operand2':([20,36,41,53,56,72,89,106,111,113,122,145,168,171,185,207,208,212,213,214,216,223,226,234,238,241,247,270,273,274,290,293,303,310,311,],[91,91,91,91,91,91,91,91,91,91,91,91,227,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,]),'index_mode_list':([214,293,],[258,315,]),'synonym_definition':([12,135,],[65,65,]),'newmode_list':([14,157,],[69,219,]),'formal_parameter_list':([221,295,],[266,316,]),'action_statement':([0,2,44,46,121,197,201,242,244,318,333,],[23,23,121,23,121,244,121,244,121,23,23,]),'builtin_name':([0,2,20,36,41,44,46,53,56,72,86,89,106,108,111,112,113,121,122,145,168,171,174,185,197,201,207,208,212,213,214,216,223,226,234,238,241,242,244,247,270,273,274,290,293,303,310,311,318,333,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'identifier':([0,2,12,14,19,20,36,41,44,46,53,56,67,72,76,86,89,106,108,111,112,113,121,122,125,135,136,145,149,157,159,165,168,171,174,185,197,201,207,208,212,213,214,216,221,223,226,234,238,241,242,244,247,248,267,270,273,274,284,290,292,293,295,303,310,311,318,331,333,],[25,25,66,66,66,98,98,98,25,25,98,98,143,98,143,98,98,98,98,98,98,98,25,98,202,66,66,98,143,66,143,66,98,98,98,98,25,25,98,98,98,98,259,98,66,98,98,98,98,98,25,25,98,287,143,98,98,98,287,98,143,259,66,98,98,98,25,143,25,]),'array_slice':([0,2,20,36,41,44,46,53,56,72,86,89,106,108,111,112,113,121,122,145,168,171,174,185,197,201,207,208,212,213,214,216,223,226,234,238,241,242,244,247,270,273,274,290,293,303,310,311,318,333,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'lower_bound':([56,212,213,214,293,],[130,254,254,254,254,]),'for_control':([44,],[127,]),'string_mode':([67,76,149,159,267,292,331,],[148,148,148,148,148,148,148,]),'location':([0,2,20,36,41,44,46,53,56,72,86,89,106,108,111,112,113,121,122,145,168,171,174,185,197,201,207,208,212,213,214,216,223,226,234,238,241,242,244,247,270,273,274,290,293,303,310,311,318,333,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'value_array_slice':([20,36,41,53,56,72,86,89,106,111,113,122,145,168,171,174,185,207,208,212,213,214,216,223,226,234,238,241,247,270,273,274,290,293,303,310,311,],[102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,]),'then_expression':([187,300,324,],[233,322,334,]),'boolean_literal':([20,36,41,53,56,72,86,89,106,111,113,122,145,168,171,174,185,207,208,212,213,214,216,223,226,234,238,241,247,270,273,274,290,293,303,310,311,],[104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,]),'value_array_element':([20,36,41,53,56,72,86,89,106,111,113,122,145,168,171,174,185,207,208,212,213,214,216,223,226,234,238,241,247,270,273,274,290,293,303,310,311,],[94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,]),'boolean_mode':([67,76,149,159,214,248,267,284,292,293,331,],[150,150,150,150,150,150,150,150,150,150,150,]),'string_concatenation_operator':([10,78,232,],[55,170,170,]),'reference_mode':([67,76,149,159,267,292,331,],[152,152,152,152,152,152,152,]),'empty_literal':([20,36,41,53,56,72,86,89,106,111,113,122,145,168,171,174,185,207,208,212,213,214,216,223,226,234,238,241,247,270,273,274,290,293,303,310,311,],[109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,]),'end_value':([285,307,308,327,],[309,326,328,335,]),'if_action':([0,2,44,46,112,121,197,201,242,244,318,333,],[39,39,39,39,39,39,39,39,39,39,39,39,]),'integer_literal':([20,36,41,53,56,72,86,89,106,111,113,122,145,168,171,174,185,207,208,212,213,214,216,218,223,226,234,238,241,247,270,273,274,290,293,303,310,311,],[103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,264,103,103,103,103,103,103,103,103,103,103,103,103,103,103,]),'array_element':([0,2,20,36,41,44,46,53,56,72,86,89,106,108,111,112,113,121,122,145,168,171,174,185,197,201,207,208,212,213,214,216,223,226,234,238,241,242,244,247,270,273,274,290,293,303,310,311,318,333,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'literal_range':([212,213,214,293,],[253,256,261,261,]),'action_statement_list':([197,242,],[243,281,]),'newmode_statement':([0,2,46,318,333,],[3,3,3,3,3,]),'membership_operator':([105,],[175,]),'conditional_expression':([20,36,41,53,56,72,89,106,111,113,122,145,171,207,208,212,213,214,216,223,226,234,238,241,247,270,273,274,290,293,303,310,311,],[93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,]),'character_string_literal':([20,36,41,53,56,72,86,89,106,111,113,122,145,168,171,174,185,207,208,212,213,214,216,223,226,234,238,241,247,270,273,274,290,293,303,310,311,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'literal':([20,36,41,53,56,72,86,89,106,111,113,122,145,168,171,174,185,207,208,212,213,214,216,223,226,234,238,241,247,270,273,274,290,293,303,310,311,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'operand4':([20,36,41,53,56,72,86,89,106,111,113,122,145,168,171,174,185,207,208,212,213,214,216,223,226,234,238,241,247,270,273,274,290,293,303,310,311,],[81,81,81,81,81,81,172,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'result_action':([0,2,44,46,112,121,197,201,242,244,318,333,],[32,32,32,32,32,32,32,32,32,32,32,32,]),'synonym_statement':([0,2,46,318,333,],[5,5,5,5,5,]),'mode_definition':([14,157,],[68,68,]),'step_value':([285,],[308,]),'string_length':([218,],[263,]),'initialization':([167,],[225,]),'array_location':([0,2,20,36,41,44,46,53,56,72,86,89,106,108,111,112,113,121,122,145,168,171,174,185,197,201,207,208,212,213,214,216,223,226,234,238,241,242,244,247,270,273,274,290,293,303,310,311,318,333,],[10,10,96,96,96,10,10,96,96,96,96,96,96,188,96,10,96,10,96,96,96,96,96,96,10,10,96,96,96,96,96,96,96,96,96,96,96,10,10,96,96,96,96,96,96,96,96,96,10,10,]),'monadic_operator':([20,36,41,53,56,72,89,106,111,113,122,145,168,171,174,185,207,208,212,213,214,216,223,226,234,238,241,247,270,273,274,290,293,303,310,311,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'statement_list':([0,],[38,]),'relational_operator':([105,],[186,]),'while_control':([44,127,],[124,206,]),'statement_nullable':([2,46,318,333,],[47,128,332,338,]),'integer_mode':([67,76,149,159,214,248,267,284,292,293,331,],[153,153,153,153,153,153,153,153,153,153,153,]),'procedure_definition':([71,],[160,]),'character_mode':([67,76,149,159,214,248,267,284,292,293,331,],[154,154,154,154,154,154,154,154,154,154,154,]),'empty':([2,41,44,46,121,201,244,318,333,],[48,117,126,48,126,126,126,48,48,]),'mode_name':([67,76,149,159,267,292,331,],[156,156,156,156,156,156,156,]),'parameter_list':([72,111,223,],[163,190,268,]),'procedure_call':([0,2,20,36,41,44,46,53,56,72,86,89,106,108,111,112,113,121,122,145,168,171,174,185,197,201,207,208,212,213,214,216,223,226,234,238,241,242,244,247,270,273,274,290,293,303,310,311,318,333,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'label_id':([33,],[114,]),'parenthesized_expression':([20,36,41,53,56,72,86,89,106,111,113,122,145,168,171,174,185,207,208,212,213,214,216,223,226,234,238,241,247,270,273,274,290,293,303,310,311,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'declaration_statement':([0,2,46,318,333,],[22,22,22,22,22,]),'assigning_operator':([10,],[53,]),'bracketed_action':([0,2,44,46,112,121,197,201,242,244,318,333,],[26,26,26,26,26,26,26,26,26,26,26,26,]),'string_element':([0,2,20,36,41,44,46,53,56,72,86,89,106,108,111,112,113,121,122,145,168,171,174,185,197,201,207,208,212,213,214,216,223,226,234,238,241,242,244,247,270,273,274,290,293,303,310,311,318,333,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'expression_list':([56,171,208,],[132,229,252,]),'return_action':([0,2,44,46,112,121,197,201,242,244,318,333,],[29,29,29,29,29,29,29,29,29,29,29,29,]),'discrete_range_mode':([67,76,149,159,214,248,267,284,292,293,331,],[146,146,146,146,146,146,146,146,146,146,146,]),'result_spec':([296,],[319,]),'result':([41,],[118,]),'do_action':([0,2,44,46,112,121,197,201,242,244,318,333,],[31,31,31,31,31,31,31,31,31,31,31,31,]),'iteration':([125,],[203,]),'operand3':([20,36,41,53,56,72,89,106,111,113,122,145,168,171,174,185,207,208,212,213,214,216,223,226,234,238,241,247,270,273,274,290,293,303,310,311,],[101,101,101,101,101,101,101,101,101,101,101,101,101,101,231,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,]),'index_mode':([214,293,],[260,260,]),'program':([0,],[34,]),'exit_action':([0,2,44,46,112,121,197,201,242,244,318,333,],[35,35,35,35,35,35,35,35,35,35,35,35,]),'range_enumeration':([125,],[204,]),'operand0':([20,36,41,53,56,72,89,106,111,113,122,145,171,207,208,212,213,214,216,223,226,234,238,241,247,270,273,274,290,293,303,310,311,],[105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,]),'expression':([20,36,41,53,56,72,89,106,111,113,122,145,171,207,208,212,213,214,216,223,226,234,238,241,247,270,273,274,290,293,303,310,311,],[107,116,119,129,131,164,173,187,164,195,200,215,228,250,251,255,255,255,262,164,269,276,278,280,285,298,300,301,250,255,324,329,330,]),'mode':([67,76,149,159,267,292,331,],[147,167,217,220,297,313,336,]),'right_element':([238,],[277,]),'operator2':([78,232,],[168,168,]),'then_clause':([116,280,],[196,305,]),'synonym_list':([12,135,],[63,210,]),'arithmetic_multiplicative_operator':([10,91,227,],[60,174,174,]),'character_literal':([20,36,41,53,56,72,86,89,106,111,113,122,145,168,171,174,185,207,208,212,213,214,216,223,226,234,238,241,247,270,273,274,290,293,303,310,311,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'dereferenced_reference':([0,2,20,36,41,44,46,53,56,72,86,89,106,108,111,112,113,121,122,145,168,171,174,185,197,201,207,208,212,213,214,216,223,226,234,238,241,242,244,247,270,273,274,290,293,303,310,311,318,333,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','Parser.py',63),
  ('statement_list -> statement statement_nullable','statement_list',2,'p_statement_list','Parser.py',67),
  ('statement_nullable -> statement statement_nullable','statement_nullable',2,'p_statement_nullable','Parser.py',79),
  ('statement_nullable -> empty','statement_nullable',1,'p_statement_nullable','Parser.py',80),
  ('statement -> declaration_statement','statement',1,'p_statement','Parser.py',92),
  ('statement -> synonym_statement','statement',1,'p_statement','Parser.py',93),
  ('statement -> newmode_statement','statement',1,'p_statement','Parser.py',94),
  ('statement -> action_statement','statement',1,'p_statement','Parser.py',95),
  ('statement -> procedure_statement','statement',1,'p_statement','Parser.py',96),
  ('synonym_statement -> SYN synonym_list SEMI','synonym_statement',3,'p_synonym_statement','Parser.py',105),
  ('synonym_list -> synonym_definition','synonym_list',1,'p_synonym_list','Parser.py',109),
  ('synonym_list -> synonym_definition COMMA synonym_list','synonym_list',3,'p_synonym_list','Parser.py',110),
  ('synonym_definition -> identifier_list mode ASSIGN expression','synonym_definition',4,'p_synonym_definition','Parser.py',119),
  ('synonym_definition -> identifier_list ASSIGN expression','synonym_definition',3,'p_synonym_definition','Parser.py',120),
  ('declaration_statement -> DCL declaration_list SEMI','declaration_statement',3,'p_declaration_statement','Parser.py',134),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','Parser.py',138),
  ('declaration_list -> declaration COMMA declaration_list','declaration_list',3,'p_declaration_list','Parser.py',139),
  ('declaration -> identifier_list mode initialization','declaration',3,'p_declaration','Parser.py',147),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','Parser.py',148),
  ('initialization -> ASSIGN expression','initialization',2,'p_initialization','Parser.py',152),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','Parser.py',156),
  ('identifier_list -> identifier COMMA identifier_list','identifier_list',3,'p_identifier_list','Parser.py',157),
  ('identifier -> ID','identifier',1,'p_identifier','Parser.py',166),
  ('newmode_statement -> TYPE newmode_list SEMI','newmode_statement',3,'p_newmode_statement','Parser.py',176),
  ('newmode_list -> mode_definition','newmode_list',1,'p_newmode_list','Parser.py',180),
  ('newmode_list -> mode_definition COMMA newmode_list','newmode_list',3,'p_newmode_list','Parser.py',181),
  ('mode_definition -> identifier_list ASSIGN mode','mode_definition',3,'p_mode_definition','Parser.py',190),
  ('procedure_statement -> ID COLON procedure_definition','procedure_statement',3,'p_procedure_statement','Parser.py',201),
  ('procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI','procedure_definition',9,'p_procedure_definition','Parser.py',205),
  ('procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI','procedure_definition',8,'p_procedure_definition','Parser.py',206),
  ('formal_parameter_list -> formal_parameter','formal_parameter_list',1,'p_formal_parameter_list','Parser.py',210),
  ('formal_parameter_list -> formal_parameter COMMA formal_parameter_list','formal_parameter_list',3,'p_formal_parameter_list','Parser.py',211),
  ('formal_parameter -> identifier_list mode LOC','formal_parameter',3,'p_formal_parameter','Parser.py',220),
  ('formal_parameter -> identifier_list mode','formal_parameter',2,'p_formal_parameter','Parser.py',221),
  ('result_spec -> RETURNS LPAREN mode LOC RPAREN','result_spec',5,'p_result_spec','Parser.py',227),
  ('result_spec -> RETURNS LPAREN mode RPAREN','result_spec',4,'p_result_spec','Parser.py',228),
  ('mode -> mode_name','mode',1,'p_mode','Parser.py',233),
  ('mode -> discrete_mode','mode',1,'p_mode','Parser.py',234),
  ('mode -> reference_mode','mode',1,'p_mode','Parser.py',235),
  ('mode -> composite_mode','mode',1,'p_mode','Parser.py',236),
  ('mode_name -> identifier','mode_name',1,'p_mode_name','Parser.py',240),
  ('discrete_mode -> integer_mode','discrete_mode',1,'p_discrete_mode','Parser.py',248),
  ('discrete_mode -> boolean_mode','discrete_mode',1,'p_discrete_mode','Parser.py',249),
  ('discrete_mode -> character_mode','discrete_mode',1,'p_discrete_mode','Parser.py',250),
  ('discrete_mode -> discrete_range_mode','discrete_mode',1,'p_discrete_mode','Parser.py',251),
  ('discrete_mode_name -> identifier','discrete_mode_name',1,'p_discrete_mode_name','Parser.py',255),
  ('integer_mode -> INT','integer_mode',1,'p_integer_mode','Parser.py',259),
  ('boolean_mode -> BOOL','boolean_mode',1,'p_boolean_mode','Parser.py',263),
  ('character_mode -> CHAR','character_mode',1,'p_character_mode','Parser.py',267),
  ('discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','Parser.py',276),
  ('discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','Parser.py',277),
  ('literal_range -> lower_bound COLON upper_bound','literal_range',3,'p_literal_range','Parser.py',281),
  ('lower_bound -> expression','lower_bound',1,'p_lower_bound','Parser.py',285),
  ('upper_bound -> expression','upper_bound',1,'p_upper_bound','Parser.py',289),
  ('reference_mode -> REF mode','reference_mode',2,'p_reference_mode','Parser.py',296),
  ('composite_mode -> string_mode','composite_mode',1,'p_composite_mode','Parser.py',303),
  ('composite_mode -> array_mode','composite_mode',1,'p_composite_mode','Parser.py',304),
  ('string_mode -> CHARS LBRACKET string_length RBRACKET','string_mode',4,'p_string_mode','Parser.py',308),
  ('string_length -> integer_literal','string_length',1,'p_string_length','Parser.py',312),
  ('array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode','array_mode',5,'p_array_mode','Parser.py',316),
  ('index_mode_list -> index_mode','index_mode_list',1,'p_index_mode_list','Parser.py',320),
  ('index_mode_list -> index_mode COMMA index_mode_list','index_mode_list',3,'p_index_mode_list','Parser.py',321),
  ('index_mode -> discrete_mode','index_mode',1,'p_index_mode','Parser.py',330),
  ('index_mode -> literal_range','index_mode',1,'p_index_mode','Parser.py',331),
  ('element_mode -> mode','element_mode',1,'p_element_mode','Parser.py',335),
  ('location -> identifier','location',1,'p_location','Parser.py',346),
  ('location -> dereferenced_reference','location',1,'p_location','Parser.py',347),
  ('location -> string_element','location',1,'p_location','Parser.py',348),
  ('location -> string_slice','location',1,'p_location','Parser.py',349),
  ('location -> array_element','location',1,'p_location','Parser.py',350),
  ('location -> array_slice','location',1,'p_location','Parser.py',351),
  ('location -> call_action','location',1,'p_location','Parser.py',352),
  ('dereferenced_reference -> array_location ARROW','dereferenced_reference',2,'p_dereferenced_reference','Parser.py',356),
  ('string_element -> identifier LBRACKET start_element RBRACKET','string_element',4,'p_string_element','Parser.py',360),
  ('start_element -> expression','start_element',1,'p_start_element','Parser.py',364),
  ('string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET','string_slice',6,'p_string_slice','Parser.py',368),
  ('left_element -> expression','left_element',1,'p_left_element','Parser.py',372),
  ('right_element -> expression','right_element',1,'p_right_element','Parser.py',376),
  ('array_element -> array_location LBRACKET expression_list RBRACKET','array_element',4,'p_array_element','Parser.py',380),
  ('expression_list -> expression','expression_list',1,'p_expression_list','Parser.py',384),
  ('expression_list -> expression COMMA expression_list','expression_list',3,'p_expression_list','Parser.py',385),
  ('array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET','array_slice',6,'p_array_slice','Parser.py',392),
  ('array_location -> location','array_location',1,'p_array_location','Parser.py',396),
  ('expression -> operand0','expression',1,'p_expression','Parser.py',406),
  ('expression -> conditional_expression','expression',1,'p_expression','Parser.py',407),
  ('parenthesized_expression -> LPAREN expression RPAREN','parenthesized_expression',3,'p_parenthesized_expression','Parser.py',411),
  ('conditional_expression -> IF expression then_expression else_expression FI','conditional_expression',5,'p_conditional_expression','Parser.py',419),
  ('conditional_expression -> IF expression then_expression elsif_expression else_expression FI','conditional_expression',6,'p_conditional_expression','Parser.py',420),
  ('then_expression -> THEN expression','then_expression',2,'p_then_expression','Parser.py',424),
  ('else_expression -> ELSE expression','else_expression',2,'p_else_expression','Parser.py',428),
  ('elsif_expression -> ELSIF expression then_expression','elsif_expression',3,'p_elsif_expression','Parser.py',432),
  ('elsif_expression -> elsif_expression ELSIF expression then_expression','elsif_expression',4,'p_elsif_expression','Parser.py',433),
  ('operand0 -> operand1','operand0',1,'p_operand0','Parser.py',448),
  ('operand0 -> operand0 operator1 operand1','operand0',3,'p_operand0','Parser.py',449),
  ('operand1 -> operand2','operand1',1,'p_operand1','Parser.py',456),
  ('operand1 -> operand1 operator2 operand2','operand1',3,'p_operand1','Parser.py',457),
  ('operand2 -> operand3','operand2',1,'p_operand2','Parser.py',464),
  ('operand2 -> operand2 arithmetic_multiplicative_operator operand3','operand2',3,'p_operand2','Parser.py',465),
  ('operand3 -> monadic_operator operand4','operand3',2,'p_operand3','Parser.py',473),
  ('operand3 -> operand4','operand3',1,'p_operand3','Parser.py',474),
  ('operand4 -> array_location','operand4',1,'p_operand4','Parser.py',481),
  ('operand4 -> referenced_location','operand4',1,'p_operand4','Parser.py',482),
  ('operand4 -> primitive_value','operand4',1,'p_operand4','Parser.py',483),
  ('arithmetic_multiplicative_operator -> TIMES','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',494),
  ('arithmetic_multiplicative_operator -> DIVIDE','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',495),
  ('arithmetic_multiplicative_operator -> MODULO','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',496),
  ('monadic_operator -> MINUS','monadic_operator',1,'p_monadic_operator','Parser.py',500),
  ('monadic_operator -> NOT','monadic_operator',1,'p_monadic_operator','Parser.py',501),
  ('referenced_location -> ARROW array_location','referenced_location',2,'p_referenced_location','Parser.py',505),
  ('operator1 -> relational_operator','operator1',1,'p_operator1','Parser.py',509),
  ('operator1 -> membership_operator','operator1',1,'p_operator1','Parser.py',510),
  ('operator2 -> arithmetic_additive_operator','operator2',1,'p_operator2','Parser.py',514),
  ('operator2 -> string_concatenation_operator','operator2',1,'p_operator2','Parser.py',515),
  ('arithmetic_additive_operator -> PLUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','Parser.py',519),
  ('arithmetic_additive_operator -> MINUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','Parser.py',520),
  ('string_concatenation_operator -> CONCAT','string_concatenation_operator',1,'p_string_concatenation_operator','Parser.py',524),
  ('relational_operator -> AND','relational_operator',1,'p_relational_operator','Parser.py',528),
  ('relational_operator -> OR','relational_operator',1,'p_relational_operator','Parser.py',529),
  ('relational_operator -> EQUAL','relational_operator',1,'p_relational_operator','Parser.py',530),
  ('relational_operator -> NOTEQ','relational_operator',1,'p_relational_operator','Parser.py',531),
  ('relational_operator -> GREATER','relational_operator',1,'p_relational_operator','Parser.py',532),
  ('relational_operator -> GTEQUAL','relational_operator',1,'p_relational_operator','Parser.py',533),
  ('relational_operator -> LESS','relational_operator',1,'p_relational_operator','Parser.py',534),
  ('relational_operator -> LTEQUAL','relational_operator',1,'p_relational_operator','Parser.py',535),
  ('membership_operator -> IN','membership_operator',1,'p_membership_operator','Parser.py',539),
  ('primitive_value -> literal','primitive_value',1,'p_primitive_value','Parser.py',551),
  ('primitive_value -> value_array_element','primitive_value',1,'p_primitive_value','Parser.py',552),
  ('primitive_value -> value_array_slice','primitive_value',1,'p_primitive_value','Parser.py',553),
  ('primitive_value -> parenthesized_expression','primitive_value',1,'p_primitive_value','Parser.py',554),
  ('literal -> integer_literal','literal',1,'p_literal','Parser.py',558),
  ('literal -> boolean_literal','literal',1,'p_literal','Parser.py',559),
  ('literal -> character_literal','literal',1,'p_literal','Parser.py',560),
  ('literal -> empty_literal','literal',1,'p_literal','Parser.py',561),
  ('literal -> character_string_literal','literal',1,'p_literal','Parser.py',562),
  ('value_array_element -> primitive_value LBRACKET expression_list RBRACKET','value_array_element',4,'p_value_array_element','Parser.py',566),
  ('value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET','value_array_slice',6,'p_value_array_slice','Parser.py',570),
  ('integer_literal -> ICONST','integer_literal',1,'p_integer_literal','Parser.py',578),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','Parser.py',582),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','Parser.py',583),
  ('character_literal -> CCONST','character_literal',1,'p_character_literal','Parser.py',587),
  ('empty_literal -> NULL','empty_literal',1,'p_empty_literal','Parser.py',591),
  ('character_string_literal -> SCONST','character_string_literal',1,'p_character_string_literal','Parser.py',595),
  ('action_statement -> identifier COLON action SEMI','action_statement',4,'p_action_statement','Parser.py',606),
  ('action_statement -> action SEMI','action_statement',2,'p_action_statement','Parser.py',607),
  ('action -> bracketed_action','action',1,'p_action','Parser.py',612),
  ('action -> assignment_action','action',1,'p_action','Parser.py',613),
  ('action -> call_action','action',1,'p_action','Parser.py',614),
  ('action -> exit_action','action',1,'p_action','Parser.py',615),
  ('action -> result_action','action',1,'p_action','Parser.py',616),
  ('action -> return_action','action',1,'p_action','Parser.py',617),
  ('bracketed_action -> if_action','bracketed_action',1,'p_bracketed_action','Parser.py',621),
  ('bracketed_action -> do_action','bracketed_action',1,'p_bracketed_action','Parser.py',622),
  ('assignment_action -> array_location assigning_operator expression','assignment_action',3,'p_assignment_action','Parser.py',626),
  ('assigning_operator -> closed_dyadic_operator ASSIGN','assigning_operator',2,'p_assigning_operator','Parser.py',630),
  ('assigning_operator -> ASSIGN','assigning_operator',1,'p_assigning_operator','Parser.py',631),
  ('closed_dyadic_operator -> arithmetic_additive_operator','closed_dyadic_operator',1,'p_closed_dyadic_operator','Parser.py',635),
  ('closed_dyadic_operator -> arithmetic_multiplicative_operator','closed_dyadic_operator',1,'p_closed_dyadic_operator','Parser.py',636),
  ('closed_dyadic_operator -> string_concatenation_operator','closed_dyadic_operator',1,'p_closed_dyadic_operator','Parser.py',637),
  ('if_action -> IF expression then_clause else_clause FI','if_action',5,'p_if_action','Parser.py',641),
  ('if_action -> IF expression then_clause FI','if_action',4,'p_if_action','Parser.py',642),
  ('then_clause -> THEN action_statement_list','then_clause',2,'p_then_clause','Parser.py',646),
  ('else_clause -> ELSE action_statement_list','else_clause',2,'p_else_clause','Parser.py',650),
  ('else_clause -> ELSIF expression then_clause else_clause','else_clause',4,'p_else_clause','Parser.py',651),
  ('else_clause -> ELSIF expression then_clause','else_clause',3,'p_else_clause','Parser.py',652),
  ('action_statement_list -> action_statement action_statement_nullable','action_statement_list',2,'p_action_statement_list','Parser.py',663),
  ('action_statement_nullable -> action_statement action_statement_nullable','action_statement_nullable',2,'p_action_statement_nullable','Parser.py',675),
  ('action_statement_nullable -> empty','action_statement_nullable',1,'p_action_statement_nullable','Parser.py',676),
  ('call_action -> procedure_call','call_action',1,'p_call_action','Parser.py',693),
  ('call_action -> builtin_call','call_action',1,'p_call_action','Parser.py',694),
  ('builtin_call -> builtin_name LPAREN parameter_list RPAREN','builtin_call',4,'p_builtin_call','Parser.py',698),
  ('builtin_call -> builtin_name LPAREN RPAREN','builtin_call',3,'p_builtin_call','Parser.py',699),
  ('builtin_name -> ABS','builtin_name',1,'p_builtin_name','Parser.py',704),
  ('builtin_name -> ASC','builtin_name',1,'p_builtin_name','Parser.py',705),
  ('builtin_name -> NUM','builtin_name',1,'p_builtin_name','Parser.py',706),
  ('builtin_name -> UPPER','builtin_name',1,'p_builtin_name','Parser.py',707),
  ('builtin_name -> LOWER','builtin_name',1,'p_builtin_name','Parser.py',708),
  ('builtin_name -> LENGTH','builtin_name',1,'p_builtin_name','Parser.py',709),
  ('builtin_name -> READ','builtin_name',1,'p_builtin_name','Parser.py',710),
  ('builtin_name -> PRINT','builtin_name',1,'p_builtin_name','Parser.py',711),
  ('procedure_call -> ID LPAREN parameter_list RPAREN','procedure_call',4,'p_procedure_call','Parser.py',715),
  ('procedure_call -> ID LPAREN RPAREN','procedure_call',3,'p_procedure_call','Parser.py',716),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','Parser.py',720),
  ('parameter_list -> expression COMMA parameter_list','parameter_list',3,'p_parameter_list','Parser.py',721),
  ('exit_action -> EXIT label_id','exit_action',2,'p_exit_action','Parser.py',730),
  ('label_id -> ID','label_id',1,'p_label_id','Parser.py',734),
  ('return_action -> RETURN result','return_action',2,'p_return_action','Parser.py',738),
  ('result -> expression','result',1,'p_result','Parser.py',742),
  ('result -> empty','result',1,'p_result','Parser.py',743),
  ('result_action -> RESULT expression','result_action',2,'p_result_action','Parser.py',746),
  ('do_action -> DO control_part SEMI action_statement_nullable OD','do_action',5,'p_do_action','Parser.py',754),
  ('do_action -> DO action_statement_nullable OD','do_action',3,'p_do_action','Parser.py',755),
  ('control_part -> for_control while_control','control_part',2,'p_control_part','Parser.py',762),
  ('control_part -> for_control','control_part',1,'p_control_part','Parser.py',763),
  ('control_part -> while_control','control_part',1,'p_control_part','Parser.py',764),
  ('for_control -> FOR iteration','for_control',2,'p_for_control','Parser.py',768),
  ('iteration -> step_enumeration','iteration',1,'p_iteration','Parser.py',772),
  ('iteration -> range_enumeration','iteration',1,'p_iteration','Parser.py',773),
  ('step_enumeration -> identifier ASSIGN expression step_value DOWN end_value','step_enumeration',6,'p_step_enumeration','Parser.py',777),
  ('step_enumeration -> identifier ASSIGN expression step_value end_value','step_enumeration',5,'p_step_enumeration','Parser.py',778),
  ('step_enumeration -> identifier ASSIGN expression DOWN end_value','step_enumeration',5,'p_step_enumeration','Parser.py',779),
  ('step_enumeration -> identifier ASSIGN expression end_value','step_enumeration',4,'p_step_enumeration','Parser.py',780),
  ('step_value -> BY expression','step_value',2,'p_step_value','Parser.py',792),
  ('end_value -> TO expression','end_value',2,'p_end_value','Parser.py',796),
  ('range_enumeration -> identifier DOWN IN discrete_mode','range_enumeration',4,'p_range_enumeration','Parser.py',800),
  ('range_enumeration -> identifier IN discrete_mode','range_enumeration',3,'p_range_enumeration','Parser.py',801),
  ('while_control -> WHILE expression','while_control',2,'p_while_control','Parser.py',808),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',814),
]
