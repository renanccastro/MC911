
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftANDORleftEQUALNOTEQleftLTEQUALLESSGREATERGTEQUALleftPLUSMINUSleftTIMESDIVIDEMODULOrightUMINUSUNOTICONST CCONST SCONST COMMA PLUS MINUS TIMES DIVIDE COLON LPAREN RPAREN ASSIGN SEMI ARROW LTEQUAL LESS GREATER GTEQUAL EQUAL LBRACKET RBRACKET ID MODULO AND OR NOTEQ NOT CONCAT HAT ELSE SYN ABS PRINT LOWER CHAR THEN RETURNS ELSIF FALSE UPPER NUM OD END LOC INT RESULT BOOL DO READ LENGTH NULL IF ASC TYPE TO IN EXIT DCL DOWN TRUE ARRAY PROC RETURN REF FI CHARS FOR BY WHILEprogram : statement_liststatement_list : statement statement_nullablestatement_nullable : statement statement_nullable\n                              | emptystatement : declaration_statement\n                     | synonym_statement\n                     | newmode_statement\n                     | action_statement\n                     | procedure_statementsynonym_statement : SYN synonym_list SEMIsynonym_list : synonym_definition\n                        | synonym_definition COMMA synonym_listsynonym_definition : identifier_list mode ASSIGN expression\n                              | identifier_list ASSIGN expressiondeclaration_statement : DCL declaration_list SEMIdeclaration_list : declaration\n                            | declaration COMMA declaration_listdeclaration : identifier_list mode initialization\n                       | identifier_list modeinitialization : ASSIGN expressionidentifier_list : identifier\n                           | identifier COMMA identifier_listidentifier : IDnewmode_statement : TYPE newmode_list SEMInewmode_list : mode_definition\n                        | mode_definition COMMA newmode_listmode_definition : identifier_list ASSIGN modeprocedure_statement : ID COLON procedure_definitionprocedure_definition : PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI\n                                | PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI\n                                | PROC LPAREN  RPAREN result_spec SEMI statement_nullable END SEMI\n                                | PROC LPAREN  RPAREN SEMI statement_nullable END SEMIformal_parameter_list : formal_parameter\n                                 | formal_parameter COMMA formal_parameter_listformal_parameter : identifier_list mode LOC\n                            | identifier_list moderesult_spec : RETURNS LPAREN mode LOC RPAREN\n                       | RETURNS LPAREN mode RPARENmode : mode_name\n                | discrete_mode\n                | reference_mode\n                | composite_modemode_name : identifierdiscrete_mode : integer_mode\n                         | boolean_mode\n                         | character_mode\n                         | discrete_range_modediscrete_mode_name : identifierinteger_mode : INTboolean_mode : BOOLcharacter_mode : CHARdiscrete_range_mode : discrete_mode_name LPAREN literal_range RPAREN\n                               | discrete_mode LPAREN literal_range RPARENliteral_range : lower_bound COLON upper_boundlower_bound : expressionupper_bound : expressionreference_mode : REF modecomposite_mode : string_mode\n                          | array_modestring_mode : CHARS LBRACKET string_length RBRACKETstring_length : integer_literalarray_mode : ARRAY LBRACKET index_mode_list RBRACKET element_modeindex_mode_list : index_mode\n                           | index_mode COMMA index_mode_listindex_mode : discrete_mode\n                      | literal_rangeelement_mode : modelocation : identifier\n\t\t\t\t    | dereferenced_reference\n\t\t\t\t    | string_element\n\t\t\t\t    | string_slice\n\t\t\t\t    | array_element\n\t\t\t\t    | array_slice\n\t\t\t\t    | call_actiondereferenced_reference : array_location ARROWstring_element : identifier LBRACKET start_element RBRACKETstart_element : expressionstring_slice : identifier LBRACKET left_element COLON right_element RBRACKETleft_element : expressionright_element : expressionarray_element : array_location LBRACKET expression_list RBRACKETexpression_list : expression\n    \t\t\t\t\t   | expression COMMA expression_listarray_slice : array_location LBRACKET lower_bound COLON upper_bound RBRACKETarray_location : locationexpression : operand0\n                      | conditional_expressionparenthesized_expression : LPAREN expression RPARENconditional_expression : IF expression then_expression else_expression FI\n                                  | IF expression then_expression elsif_expression else_expression FIthen_expression : THEN expressionelse_expression : ELSE expressionelsif_expression : ELSIF expression then_expression\n                            | elsif_expression ELSIF expression then_expressionoperand0 : operand1\n                    | operand0 operator1 operand1operand1 : operand2\n                    | operand1 operator2 operand2operand2 : operand3\n                    | operand2 arithmetic_multiplicative_operator operand3operand3 : monadic_operator operand4\n                    | operand4operand4 : array_location\n                    | referenced_location\n                    | primitive_valuearithmetic_multiplicative_operator : TIMES\n                                              | DIVIDE\n                                              | MODULOmonadic_operator : MINUS %prec UMINUS\n                            | NOT %prec UNOTreferenced_location : ARROW array_locationoperator1 : membership_operator\n                     | relational_operatorrelational_operator : AND\n                               | OR\n                               | EQUAL\n                               | NOTEQ\n                               | GREATER\n                               | GTEQUAL\n                               | LESS\n                               | LTEQUALoperator2 : arithmetic_additive_operator\n                     | string_concatenation_operatorarithmetic_additive_operator : PLUS\n                                        | MINUSstring_concatenation_operator : CONCATmembership_operator : INprimitive_value : literal\n                           | value_array_element\n                           | value_array_slice\n                           | parenthesized_expressionliteral : integer_literal\n                   | boolean_literal\n                   | character_literal\n                   | empty_literal\n                   | character_string_literalvalue_array_element : primitive_value LBRACKET expression_list RBRACKETvalue_array_slice : primitive_value LBRACKET expression COLON expression RBRACKETinteger_literal : ICONSTboolean_literal : TRUE\n                           | FALSEcharacter_literal : CCONST\n                             | HAT LPAREN ICONST RPARENempty_literal : NULLcharacter_string_literal : SCONSTaction_statement : identifier COLON action SEMI\n                            | action SEMIaction : bracketed_action\n                  | assignment_action\n                  | call_action\n                  | exit_action\n                  | result_action\n                  | return_actionbracketed_action : if_action\n                            | do_actionassignment_action : array_location assigning_operator expressionassigning_operator : closed_dyadic_operator ASSIGN\n                              | ASSIGNclosed_dyadic_operator : arithmetic_additive_operator\n                                  | arithmetic_multiplicative_operator\n                                  | string_concatenation_operatorif_action : IF expression then_clause else_clause FI\n                     | IF expression then_clause FIthen_clause : THEN action_statement_listelse_clause : ELSE action_statement_list\n                       | ELSIF expression then_clause else_clause\n                       | ELSIF expression then_clauseaction_statement_list : action_statement action_statement_nullableaction_statement_nullable : action_statement action_statement_nullable\n                                     | emptycall_action : procedure_call\n                       | builtin_callbuiltin_call : builtin_name LPAREN parameter_list RPAREN\n                        | builtin_name LPAREN RPARENbuiltin_name : ABS\n                        | ASC\n                        | NUM\n                        | UPPER\n                        | LOWER\n                        | LENGTH\n                        | READ\n                        | PRINTprocedure_call : ID LPAREN parameter_list RPAREN\n                          | ID LPAREN RPARENparameter_list : expression\n                          | expression COMMA parameter_listexit_action : EXIT identifierreturn_action : RETURN resultresult : expression\n                  | emptyresult_action : RESULT expressiondo_action : DO control_part SEMI action_statement_nullable OD\n                     | DO action_statement_nullable ODcontrol_part : for_control while_control \n                        | for_control   \n                        | while_controlfor_control : FOR iterationiteration : step_enumeration\n                     | range_enumerationstep_enumeration : identifier ASSIGN expression step_value DOWN end_value\n                            | identifier ASSIGN expression step_value end_value\n                            | identifier ASSIGN expression DOWN end_value\n                            | identifier ASSIGN expression end_valuestep_value : BY expressionend_value : TO expressionrange_enumeration : identifier DOWN IN discrete_mode\n                             | identifier IN discrete_modewhile_control : WHILE expressionempty :'
    
_lr_action_items = {'READ':([0,5,11,13,20,22,27,28,40,42,45,56,57,66,83,84,86,90,91,92,95,96,105,106,107,109,110,111,112,113,114,116,118,124,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,155,168,173,179,201,205,207,217,222,223,224,227,231,232,233,237,238,239,241,242,245,248,253,255,258,295,299,307,309,314,318,323,329,344,348,353,356,357,],[3,-9,3,-8,3,3,3,3,-7,-5,-6,3,3,3,-109,-110,3,3,3,3,3,3,-107,-125,-124,-106,3,-158,3,-108,-126,-147,3,3,-24,-123,-122,3,3,-112,-114,-121,-113,-118,-115,-120,-116,-119,-127,-117,3,3,-28,3,-157,3,-15,3,-10,3,3,-146,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,-32,-31,-30,-29,]),'INT':([46,50,121,125,128,192,210,229,245,261,268,317,318,325,],[-23,-21,184,184,184,184,-22,184,184,184,184,184,184,184,]),'THEN':([4,7,15,23,29,31,39,43,53,54,55,58,59,60,63,64,65,67,68,69,70,71,72,73,75,76,77,78,79,80,81,82,85,87,88,108,120,132,133,152,156,202,212,213,214,219,221,225,230,247,251,252,277,293,294,304,311,319,321,322,],[-85,-172,-70,-69,-71,-73,-171,-72,-128,-141,-74,-102,-132,-133,-23,-139,-68,-129,-95,-134,-103,-135,-86,-130,-142,-104,-144,-87,-131,-105,-136,-140,-99,-145,-97,-75,179,-111,-101,217,-184,-174,-88,-98,-96,-100,-183,-76,-81,-173,-143,-137,179,217,-89,-78,-84,-138,217,-90,]),'END':([5,13,40,42,45,116,117,118,131,155,178,201,207,223,299,323,324,329,341,344,345,348,351,353,356,357,],[-9,-8,-7,-5,-6,-147,-4,-209,-24,-28,-3,-15,-10,-146,-209,-209,342,-209,347,-209,352,-32,355,-31,-30,-29,]),'ELSE':([4,7,15,23,29,31,39,43,53,54,55,58,59,60,63,64,65,67,68,69,70,71,72,73,75,76,77,78,79,80,81,82,85,87,88,94,96,108,116,132,133,156,165,180,202,212,213,214,218,219,221,223,225,230,233,234,247,251,252,254,257,275,294,304,311,312,319,320,322,340,],[-85,-172,-70,-69,-71,-73,-171,-72,-128,-141,-74,-102,-132,-133,-23,-139,-68,-129,-95,-134,-103,-135,-86,-130,-142,-104,-144,-87,-131,-105,-136,-140,-99,-145,-97,-170,-209,-75,-147,-111,-101,-184,-169,238,-174,-88,-98,-96,258,-100,-183,-146,-76,-81,-209,-164,-173,-143,-137,-91,258,-168,-89,-78,-84,238,-138,-93,-90,-94,]),'CHARS':([46,50,121,125,128,192,210,261,317,325,],[-23,-21,197,197,197,197,-22,197,197,197,]),'EXIT':([0,5,13,22,27,40,42,45,91,96,116,118,131,155,168,179,201,207,223,233,238,299,323,329,344,348,353,356,357,],[9,-9,-8,9,9,-7,-5,-6,9,9,-147,9,-24,-28,9,9,-15,-10,-146,9,9,9,9,9,9,-32,-31,-30,-29,]),'LOC':([46,182,183,184,185,186,187,188,190,191,193,194,195,196,199,243,302,313,315,316,337,338,343,],[-23,-41,-59,-49,-50,-39,-44,-51,-40,-58,-47,-46,-45,-43,-42,-57,327,-52,-53,-60,-67,-62,349,]),'PLUS':([2,4,7,12,15,19,23,25,29,31,39,43,53,54,55,58,59,60,63,64,65,67,68,69,70,71,73,75,76,77,79,80,81,82,85,87,88,108,132,133,156,159,202,212,213,214,219,221,225,230,247,251,252,287,304,311,319,],[-74,-85,-172,-23,-70,-68,-69,107,-71,-73,-171,-72,-128,-141,-74,-102,-132,-133,-23,-139,-68,-129,107,-134,-103,-135,-130,-142,-104,-144,-131,-105,-136,-140,-99,-145,-97,-75,-111,-101,-184,-23,-174,-88,-98,107,-100,-183,-76,-81,-173,-143,-137,-68,-78,-84,-138,]),'LBRACKET':([2,4,7,12,15,19,23,25,29,31,39,43,53,54,55,59,60,63,64,65,67,69,70,71,73,75,77,79,80,81,82,87,108,132,156,159,197,198,202,212,221,225,230,247,251,252,287,304,311,319,],[-74,-85,-172,-23,-70,92,-69,112,-71,-73,-171,-72,-128,-141,-74,-132,-133,-23,-139,92,-129,-134,112,-135,-130,-142,-144,-131,151,-136,-140,-145,-75,112,-184,-23,244,245,-174,-88,-183,-76,-81,-173,-143,-137,92,-78,-84,-138,]),'RETURN':([0,5,13,22,27,40,42,45,91,96,116,118,131,155,168,179,201,207,223,233,238,299,323,329,344,348,353,356,357,],[11,-9,-8,11,11,-7,-5,-6,11,11,-147,11,-24,-28,11,11,-15,-10,-146,11,11,11,11,11,11,-32,-31,-30,-29,]),'ICONST':([11,20,28,57,66,83,84,86,90,92,95,105,106,107,109,110,111,112,113,114,124,134,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,173,205,217,222,224,227,231,232,237,239,241,242,244,245,248,253,255,258,295,307,309,314,318,],[64,64,64,64,64,-109,-110,64,64,64,64,-107,-125,-124,-106,64,-158,64,-108,-126,64,211,-123,-122,64,64,-112,-114,-121,-113,-118,-115,-120,-116,-119,-127,-117,64,64,-157,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'ID':([0,5,9,10,11,13,20,22,27,28,30,40,42,44,45,46,50,56,57,66,83,84,86,90,91,92,95,96,100,105,106,107,109,110,111,112,113,114,116,118,121,124,125,128,129,130,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,155,168,173,179,192,200,201,205,206,207,210,217,220,222,223,224,227,229,231,232,233,237,238,239,241,242,245,248,253,255,258,261,268,295,299,301,307,309,314,317,318,323,325,329,344,348,353,356,357,],[12,-9,46,46,63,-8,63,63,12,63,46,-7,-5,46,-6,-23,-21,63,63,63,-109,-110,63,63,159,63,63,63,46,-107,-125,-124,-106,63,-158,63,-108,-126,-147,12,46,63,46,46,46,46,-24,-123,-122,63,63,-112,-114,-121,-113,-118,-115,-120,-116,-119,-127,-117,63,63,-28,63,-157,63,46,46,-15,63,46,-10,-22,63,46,63,-146,63,63,46,63,63,63,63,63,63,63,63,63,63,63,63,63,46,46,63,12,46,63,63,63,46,63,12,46,12,12,-32,-31,-30,-29,]),'WHILE':([4,7,15,22,23,29,31,39,43,53,54,55,58,59,60,63,64,65,67,68,69,70,71,72,73,75,76,77,78,79,80,81,82,85,87,88,98,108,132,133,156,169,170,171,184,185,187,188,193,194,195,202,212,213,214,219,221,225,230,247,251,252,270,294,304,306,310,311,313,315,319,322,330,333,334,346,],[-85,-172,-70,95,-69,-71,-73,-171,-72,-128,-141,-74,-102,-132,-133,-23,-139,-68,-129,-95,-134,-103,-135,-86,-130,-142,-104,-144,-87,-131,-105,-136,-140,-99,-145,-97,95,-75,-111,-101,-184,-197,-198,-199,-49,-50,-44,-51,-47,-46,-45,-174,-88,-98,-96,-100,-183,-76,-81,-173,-143,-137,-207,-89,-78,-203,-206,-84,-52,-53,-138,-90,-202,-201,-205,-200,]),'NOTEQ':([4,7,15,23,29,31,39,43,53,54,55,58,59,60,63,64,65,67,68,69,70,71,72,73,75,76,77,79,80,81,82,85,87,88,108,132,133,156,202,212,213,214,219,221,225,230,247,251,252,287,304,311,319,],[-85,-172,-70,-69,-71,-73,-171,-72,-128,-141,-74,-102,-132,-133,-23,-139,-68,-129,-95,-134,-103,-135,150,-130,-142,-104,-144,-131,-105,-136,-140,-99,-145,-97,-75,-111,-101,-184,-174,-88,-98,-96,-100,-183,-76,-81,-173,-143,-137,-68,-78,-84,-138,]),'UPPER':([0,5,11,13,20,22,27,28,40,42,45,56,57,66,83,84,86,90,91,92,95,96,105,106,107,109,110,111,112,113,114,116,118,124,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,155,168,173,179,201,205,207,217,222,223,224,227,231,232,233,237,238,239,241,242,245,248,253,255,258,295,299,307,309,314,318,323,329,344,348,353,356,357,],[14,-9,14,-8,14,14,14,14,-7,-5,-6,14,14,14,-109,-110,14,14,14,14,14,14,-107,-125,-124,-106,14,-158,14,-108,-126,-147,14,14,-24,-123,-122,14,14,-112,-114,-121,-113,-118,-115,-120,-116,-119,-127,-117,14,14,-28,14,-157,14,-15,14,-10,14,14,-146,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,-32,-31,-30,-29,]),'PROC':([89,],[154,]),'BY':([4,7,15,23,29,31,39,43,53,54,55,58,59,60,63,64,65,67,68,69,70,71,72,73,75,76,77,78,79,80,81,82,85,87,88,108,132,133,156,202,212,213,214,219,221,225,230,247,251,252,267,294,304,311,319,322,],[-85,-172,-70,-69,-71,-73,-171,-72,-128,-141,-74,-102,-132,-133,-23,-139,-68,-129,-95,-134,-103,-135,-86,-130,-142,-104,-144,-87,-131,-105,-136,-140,-99,-145,-97,-75,-111,-101,-184,-174,-88,-98,-96,-100,-183,-76,-81,-173,-143,-137,307,-89,-78,-84,-138,-90,]),'LENGTH':([0,5,11,13,20,22,27,28,40,42,45,56,57,66,83,84,86,90,91,92,95,96,105,106,107,109,110,111,112,113,114,116,118,124,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,155,168,173,179,201,205,207,217,222,223,224,227,231,232,233,237,238,239,241,242,245,248,253,255,258,295,299,307,309,314,318,323,329,344,348,353,356,357,],[16,-9,16,-8,16,16,16,16,-7,-5,-6,16,16,16,-109,-110,16,16,16,16,16,16,-107,-125,-124,-106,16,-158,16,-108,-126,-147,16,16,-24,-123,-122,16,16,-112,-114,-121,-113,-118,-115,-120,-116,-119,-127,-117,16,16,-28,16,-157,16,-15,16,-10,16,16,-146,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-32,-31,-30,-29,]),'AND':([4,7,15,23,29,31,39,43,53,54,55,58,59,60,63,64,65,67,68,69,70,71,72,73,75,76,77,79,80,81,82,85,87,88,108,132,133,156,202,212,213,214,219,221,225,230,247,251,252,287,304,311,319,],[-85,-172,-70,-69,-71,-73,-171,-72,-128,-141,-74,-102,-132,-133,-23,-139,-68,-129,-95,-134,-103,-135,141,-130,-142,-104,-144,-131,-105,-136,-140,-99,-145,-97,-75,-111,-101,-184,-174,-88,-98,-96,-100,-183,-76,-81,-173,-143,-137,-68,-78,-84,-138,]),'ABS':([0,5,11,13,20,22,27,28,40,42,45,56,57,66,83,84,86,90,91,92,95,96,105,106,107,109,110,111,112,113,114,116,118,124,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,155,168,173,179,201,205,207,217,222,223,224,227,231,232,233,237,238,239,241,242,245,248,253,255,258,295,299,307,309,314,318,323,329,344,348,353,356,357,],[18,-9,18,-8,18,18,18,18,-7,-5,-6,18,18,18,-109,-110,18,18,18,18,18,18,-107,-125,-124,-106,18,-158,18,-108,-126,-147,18,18,-24,-123,-122,18,18,-112,-114,-121,-113,-118,-115,-120,-116,-119,-127,-117,18,18,-28,18,-157,18,-15,18,-10,18,18,-146,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-32,-31,-30,-29,]),'DOWN':([4,7,15,23,29,31,39,43,46,53,54,55,58,59,60,63,64,65,67,68,69,70,71,72,73,75,76,77,78,79,80,81,82,85,87,88,108,132,133,156,172,202,212,213,214,219,221,225,230,247,251,252,267,294,304,308,311,319,322,331,],[-85,-172,-70,-69,-71,-73,-171,-72,-23,-128,-141,-74,-102,-132,-133,-23,-139,-68,-129,-95,-134,-103,-135,-86,-130,-142,-104,-144,-87,-131,-105,-136,-140,-99,-145,-97,-75,-111,-101,-184,228,-174,-88,-98,-96,-100,-183,-76,-81,-173,-143,-137,305,-89,-78,332,-84,-138,-90,-204,]),'LPAREN':([3,11,12,14,16,18,20,21,28,35,37,38,41,46,57,61,63,66,83,84,86,90,92,95,105,106,107,109,110,111,112,113,114,124,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,154,159,173,181,184,185,187,188,190,193,194,195,196,205,217,222,224,227,231,232,237,239,241,242,245,248,253,255,258,269,270,287,289,295,300,307,309,310,313,314,315,318,],[-181,66,90,-178,-180,-175,66,-177,66,-182,-179,-176,124,-23,66,134,90,66,-109,-110,66,66,66,66,-107,-125,-124,-106,66,-158,66,-108,-126,66,-123,-122,66,66,-112,-114,-121,-113,-118,-115,-120,-116,-119,-127,-117,66,66,220,90,-157,239,-49,-50,-44,-51,242,-47,-46,-45,-48,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,-48,242,-48,242,66,325,66,66,242,-52,66,-53,66,]),'RESULT':([0,5,13,22,27,40,42,45,91,96,116,118,131,155,168,179,201,207,223,233,238,299,323,329,344,348,353,356,357,],[20,-9,-8,20,20,-7,-5,-6,20,20,-147,20,-24,-28,20,20,-15,-10,-146,20,20,20,20,20,20,-32,-31,-30,-29,]),'NUM':([0,5,11,13,20,22,27,28,40,42,45,56,57,66,83,84,86,90,91,92,95,96,105,106,107,109,110,111,112,113,114,116,118,124,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,155,168,173,179,201,205,207,217,222,223,224,227,231,232,233,237,238,239,241,242,245,248,253,255,258,295,299,307,309,314,318,323,329,344,348,353,356,357,],[21,-9,21,-8,21,21,21,21,-7,-5,-6,21,21,21,-109,-110,21,21,21,21,21,21,-107,-125,-124,-106,21,-158,21,-108,-126,-147,21,21,-24,-123,-122,21,21,-112,-114,-121,-113,-118,-115,-120,-116,-119,-127,-117,21,21,-28,21,-157,21,-15,21,-10,21,21,-146,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-32,-31,-30,-29,]),'GREATER':([4,7,15,23,29,31,39,43,53,54,55,58,59,60,63,64,65,67,68,69,70,71,72,73,75,76,77,79,80,81,82,85,87,88,108,132,133,156,202,212,213,214,219,221,225,230,247,251,252,287,304,311,319,],[-85,-172,-70,-69,-71,-73,-171,-72,-128,-141,-74,-102,-132,-133,-23,-139,-68,-129,-95,-134,-103,-135,144,-130,-142,-104,-144,-131,-105,-136,-140,-99,-145,-97,-75,-111,-101,-184,-174,-88,-98,-96,-100,-183,-76,-81,-173,-143,-137,-68,-78,-84,-138,]),'DO':([0,5,13,22,27,40,42,45,91,96,116,118,131,155,168,179,201,207,223,233,238,299,323,329,344,348,353,356,357,],[22,-9,-8,22,22,-7,-5,-6,22,22,-147,22,-24,-28,22,22,-15,-10,-146,22,22,22,22,22,22,-32,-31,-30,-29,]),'ASSIGN':([2,4,7,12,15,19,23,25,29,31,39,43,46,48,50,63,65,102,103,104,105,106,107,108,109,113,114,115,125,156,159,172,182,183,184,185,186,187,188,189,190,191,193,194,195,196,199,202,204,210,221,225,230,243,247,304,311,313,315,316,337,338,],[-74,-85,-172,-23,-70,-68,-69,111,-71,-73,-171,-72,-23,128,-21,-23,-68,173,-160,-161,-107,-125,-124,-75,-106,-108,-126,-159,205,-184,-23,227,-41,-59,-49,-50,-39,-44,-51,241,-40,-58,-47,-46,-45,-43,-42,-174,248,-22,-183,-76,-81,-57,-173,-78,-84,-52,-53,-60,-67,-62,]),'$end':([5,13,27,33,36,40,42,45,116,117,118,119,131,155,178,201,207,223,348,353,356,357,],[-9,-8,-209,0,-1,-7,-5,-6,-147,-4,-209,-2,-24,-28,-3,-15,-10,-146,-32,-31,-30,-29,]),'CONCAT':([2,4,7,12,15,19,23,25,29,31,39,43,53,54,55,58,59,60,63,64,65,67,68,69,70,71,73,75,76,77,79,80,81,82,85,87,88,108,132,133,156,159,202,212,213,214,219,221,225,230,247,251,252,287,304,311,319,],[-74,-85,-172,-23,-70,-68,-69,114,-71,-73,-171,-72,-128,-141,-74,-102,-132,-133,-23,-139,-68,-129,114,-134,-103,-135,-130,-142,-104,-144,-131,-105,-136,-140,-99,-145,-97,-75,-111,-101,-184,-23,-174,-88,-98,114,-100,-183,-76,-81,-173,-143,-137,-68,-78,-84,-138,]),'FI':([4,7,15,23,29,31,39,43,53,54,55,58,59,60,63,64,65,67,68,69,70,71,72,73,75,76,77,78,79,80,81,82,85,87,88,94,96,108,116,132,133,156,165,180,202,212,213,214,219,221,223,225,230,233,234,235,247,251,252,256,275,278,294,296,297,304,311,312,319,322,335,],[-85,-172,-70,-69,-71,-73,-171,-72,-128,-141,-74,-102,-132,-133,-23,-139,-68,-129,-95,-134,-103,-135,-86,-130,-142,-104,-144,-87,-131,-105,-136,-140,-99,-145,-97,-170,-209,-75,-147,-111,-101,-184,-169,236,-174,-88,-98,-96,-100,-183,-146,-76,-81,-209,-164,276,-173,-143,-137,294,-168,-165,-89,322,-92,-78,-84,-167,-138,-90,-166,]),'IN':([4,7,15,23,29,31,39,43,46,53,54,55,58,59,60,63,64,65,67,68,69,70,71,72,73,75,76,77,79,80,81,82,85,87,88,108,132,133,156,172,202,212,213,214,219,221,225,228,230,247,251,252,287,304,311,319,],[-85,-172,-70,-69,-71,-73,-171,-72,-23,-128,-141,-74,-102,-132,-133,-23,-139,-68,-129,-95,-134,-103,-135,149,-130,-142,-104,-144,-131,-105,-136,-140,-99,-145,-97,-75,-111,-101,-184,229,-174,-88,-98,-96,-100,-183,-76,268,-81,-173,-143,-137,-68,-78,-84,-138,]),'IF':([0,5,11,13,20,22,27,28,40,42,45,66,86,90,91,92,95,96,110,111,112,116,118,124,131,151,155,168,173,179,201,205,207,217,222,223,224,227,231,232,233,237,238,239,241,242,245,248,253,255,258,295,299,307,309,314,318,323,329,344,348,353,356,357,],[28,-9,86,-8,86,28,28,86,-7,-5,-6,86,86,86,28,86,86,28,86,-158,86,-147,28,86,-24,86,-28,28,-157,28,-15,86,-10,86,86,-146,86,86,86,86,28,86,28,86,86,86,86,86,86,86,86,86,28,86,86,86,86,28,28,28,-32,-31,-30,-29,]),'DCL':([0,5,13,27,40,42,45,116,118,131,155,201,207,223,299,323,329,344,348,353,356,357,],[30,-9,-8,30,-7,-5,-6,-147,30,-24,-28,-15,-10,-146,30,30,30,30,-32,-31,-30,-29,]),'TIMES':([2,4,7,12,15,19,23,25,29,31,39,43,53,54,55,58,59,60,63,64,65,67,69,70,71,73,75,76,77,79,80,81,82,85,87,88,108,132,133,156,159,202,212,213,219,221,225,230,247,251,252,287,304,311,319,],[-74,-85,-172,-23,-70,-68,-69,109,-71,-73,-171,-72,-128,-141,-74,-102,-132,-133,-23,-139,-68,-129,-134,-103,-135,-130,-142,-104,-144,-131,-105,-136,-140,-99,-145,109,-75,-111,-101,-184,-23,-174,-88,109,-100,-183,-76,-81,-173,-143,-137,-68,-78,-84,-138,]),'TYPE':([0,5,13,27,40,42,45,116,118,131,155,201,207,223,299,323,329,344,348,353,356,357,],[10,-9,-8,10,-7,-5,-6,-147,10,-24,-28,-15,-10,-146,10,10,10,10,-32,-31,-30,-29,]),'MODULO':([2,4,7,12,15,19,23,25,29,31,39,43,53,54,55,58,59,60,63,64,65,67,69,70,71,73,75,76,77,79,80,81,82,85,87,88,108,132,133,156,159,202,212,213,219,221,225,230,247,251,252,287,304,311,319,],[-74,-85,-172,-23,-70,-68,-69,113,-71,-73,-171,-72,-128,-141,-74,-102,-132,-133,-23,-139,-68,-129,-134,-103,-135,-130,-142,-104,-144,-131,-105,-136,-140,-99,-145,113,-75,-111,-101,-184,-23,-174,-88,113,-100,-183,-76,-81,-173,-143,-137,-68,-78,-84,-138,]),'LOWER':([0,5,11,13,20,22,27,28,40,42,45,56,57,66,83,84,86,90,91,92,95,96,105,106,107,109,110,111,112,113,114,116,118,124,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,155,168,173,179,201,205,207,217,222,223,224,227,231,232,233,237,238,239,241,242,245,248,253,255,258,295,299,307,309,314,318,323,329,344,348,353,356,357,],[37,-9,37,-8,37,37,37,37,-7,-5,-6,37,37,37,-109,-110,37,37,37,37,37,37,-107,-125,-124,-106,37,-158,37,-108,-126,-147,37,37,-24,-123,-122,37,37,-112,-114,-121,-113,-118,-115,-120,-116,-119,-127,-117,37,37,-28,37,-157,37,-15,37,-10,37,37,-146,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-32,-31,-30,-29,]),'OD':([22,94,96,97,116,165,168,223,226,],[-209,-170,-209,166,-147,-169,-209,-146,266,]),'CCONST':([11,20,28,57,66,83,84,86,90,92,95,105,106,107,109,110,111,112,113,114,124,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,173,205,217,222,224,227,231,232,237,239,241,242,245,248,253,255,258,295,307,309,314,318,],[75,75,75,75,75,-109,-110,75,75,75,75,-107,-125,-124,-106,75,-158,75,-108,-126,75,-123,-122,75,75,-112,-114,-121,-113,-118,-115,-120,-116,-119,-127,-117,75,75,-157,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'EQUAL':([4,7,15,23,29,31,39,43,53,54,55,58,59,60,63,64,65,67,68,69,70,71,72,73,75,76,77,79,80,81,82,85,87,88,108,132,133,156,202,212,213,214,219,221,225,230,247,251,252,287,304,311,319,],[-85,-172,-70,-69,-71,-73,-171,-72,-128,-141,-74,-102,-132,-133,-23,-139,-68,-129,-95,-134,-103,-135,147,-130,-142,-104,-144,-131,-105,-136,-140,-99,-145,-97,-75,-111,-101,-184,-174,-88,-98,-96,-100,-183,-76,-81,-173,-143,-137,-68,-78,-84,-138,]),'PRINT':([0,5,11,13,20,22,27,28,40,42,45,56,57,66,83,84,86,90,91,92,95,96,105,106,107,109,110,111,112,113,114,116,118,124,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,155,168,173,179,201,205,207,217,222,223,224,227,231,232,233,237,238,239,241,242,245,248,253,255,258,295,299,307,309,314,318,323,329,344,348,353,356,357,],[35,-9,35,-8,35,35,35,35,-7,-5,-6,35,35,35,-109,-110,35,35,35,35,35,35,-107,-125,-124,-106,35,-158,35,-108,-126,-147,35,35,-24,-123,-122,35,35,-112,-114,-121,-113,-118,-115,-120,-116,-119,-127,-117,35,35,-28,35,-157,35,-15,35,-10,35,35,-146,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-32,-31,-30,-29,]),'COMMA':([4,7,15,23,29,31,39,43,46,49,50,53,54,55,58,59,60,63,64,65,67,68,69,70,71,72,73,75,76,77,78,79,80,81,82,85,87,88,108,122,126,132,133,156,158,177,182,183,184,185,186,187,188,189,190,191,193,194,195,196,199,202,208,212,213,214,216,219,221,225,230,240,243,247,249,251,252,260,271,274,282,286,289,290,291,294,302,304,311,313,315,316,319,322,327,336,337,338,],[-85,-172,-70,-69,-71,-73,-171,-72,-23,129,130,-128,-141,-74,-102,-132,-133,-23,-139,-68,-129,-95,-134,-103,-135,-86,-130,-142,-104,-144,-87,-131,-105,-136,-140,-99,-145,-97,-75,200,206,-111,-101,-184,222,232,-41,-59,-49,-50,-39,-44,-51,-19,-40,-58,-47,-46,-45,-43,-42,-174,-27,-88,-98,-96,232,-100,-183,-76,-81,-18,-57,-173,-14,-143,-137,301,-56,232,-20,-66,-65,318,-13,-89,-36,-78,-84,-52,-53,-60,-138,-90,-35,-54,-67,-62,]),'BOOL':([46,50,121,125,128,192,210,229,245,261,268,317,318,325,],[-23,-21,185,185,185,185,-22,185,185,185,185,185,185,185,]),'SYN':([0,5,13,27,40,42,45,116,118,131,155,201,207,223,299,323,329,344,348,353,356,357,],[44,-9,-8,44,-7,-5,-6,-147,44,-24,-28,-15,-10,-146,44,44,44,44,-32,-31,-30,-29,]),'COLON':([4,7,12,15,19,23,29,31,39,43,53,54,55,58,59,60,63,64,65,67,68,69,70,71,72,73,75,76,77,78,79,80,81,82,85,87,88,108,132,133,156,161,163,176,177,202,212,213,214,216,219,221,225,230,247,251,252,280,281,287,294,304,311,319,322,],[-85,-172,89,-70,91,-69,-71,-73,-171,-72,-128,-141,-74,-102,-132,-133,-23,-139,-68,-129,-95,-134,-103,-135,-86,-130,-142,-104,-144,-87,-131,-105,-136,-140,-99,-145,-97,-75,-111,-101,-184,224,-79,231,-55,-174,-88,-98,-96,253,-100,-183,-76,-81,-173,-143,-137,314,-55,-68,-89,-78,-84,-138,-90,]),'HAT':([11,20,28,57,66,83,84,86,90,92,95,105,106,107,109,110,111,112,113,114,124,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,173,205,217,222,224,227,231,232,237,239,241,242,245,248,253,255,258,295,307,309,314,318,],[61,61,61,61,61,-109,-110,61,61,61,61,-107,-125,-124,-106,61,-158,61,-108,-126,61,-123,-122,61,61,-112,-114,-121,-113,-118,-115,-120,-116,-119,-127,-117,61,61,-157,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'FALSE':([11,20,28,57,66,83,84,86,90,92,95,105,106,107,109,110,111,112,113,114,124,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,173,205,217,222,224,227,231,232,237,239,241,242,245,248,253,255,258,295,307,309,314,318,],[54,54,54,54,54,-109,-110,54,54,54,54,-107,-125,-124,-106,54,-158,54,-108,-126,54,-123,-122,54,54,-112,-114,-121,-113,-118,-115,-120,-116,-119,-127,-117,54,54,-157,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'CHAR':([46,50,121,125,128,192,210,229,245,261,268,317,318,325,],[-23,-21,188,188,188,188,-22,188,188,188,188,188,188,188,]),'RBRACKET':([4,7,15,23,29,31,39,43,53,54,55,58,59,60,63,64,65,67,68,69,70,71,72,73,75,76,77,78,79,80,81,82,85,87,88,108,132,133,156,162,163,175,177,184,185,187,188,193,194,195,202,212,213,214,215,216,219,221,225,230,247,251,252,264,265,271,272,273,274,284,285,286,288,289,290,292,294,304,311,313,315,319,322,336,339,],[-85,-172,-70,-69,-71,-73,-171,-72,-128,-141,-74,-102,-132,-133,-23,-139,-68,-129,-95,-134,-103,-135,-86,-130,-142,-104,-144,-87,-131,-105,-136,-140,-99,-145,-97,-75,-111,-101,-184,225,-77,230,-82,-49,-50,-44,-51,-47,-46,-45,-174,-88,-98,-96,252,-82,-100,-183,-76,-81,-173,-143,-137,304,-80,-56,311,-83,-82,-61,316,-66,317,-65,-63,319,-89,-78,-84,-52,-53,-138,-90,-54,-64,]),'FOR':([22,],[100,]),'RETURNS':([259,303,],[300,300,]),'RPAREN':([4,7,15,23,29,31,39,43,46,53,54,55,58,59,60,63,64,65,67,68,69,70,71,72,73,75,76,77,78,79,80,81,82,85,87,88,90,108,124,132,133,135,156,157,158,182,183,184,185,186,187,188,190,191,193,194,195,196,199,202,203,211,212,213,214,219,220,221,225,230,243,247,251,252,260,262,263,271,279,283,294,302,304,311,313,315,316,319,322,326,327,336,337,338,343,349,],[-85,-172,-70,-69,-71,-73,-171,-72,-23,-128,-141,-74,-102,-132,-133,-23,-139,-68,-129,-95,-134,-103,-135,-86,-130,-142,-104,-144,-87,-131,-105,-136,-140,-99,-145,-97,156,-75,202,-111,-101,212,-184,221,-185,-41,-59,-49,-50,-39,-44,-51,-40,-58,-47,-46,-45,-43,-42,-174,247,251,-88,-98,-96,-100,259,-183,-76,-81,-57,-173,-143,-137,-33,303,-186,-56,313,315,-89,-36,-78,-84,-52,-53,-60,-138,-90,-34,-35,-54,-67,-62,350,354,]),'NULL':([11,20,28,57,66,83,84,86,90,92,95,105,106,107,109,110,111,112,113,114,124,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,173,205,217,222,224,227,231,232,237,239,241,242,245,248,253,255,258,295,307,309,314,318,],[77,77,77,77,77,-109,-110,77,77,77,77,-107,-125,-124,-106,77,-158,77,-108,-126,77,-123,-122,77,77,-112,-114,-121,-113,-118,-115,-120,-116,-119,-127,-117,77,77,-157,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'REF':([46,50,121,125,128,192,210,261,317,325,],[-23,-21,192,192,192,192,-22,192,192,192,]),'LESS':([4,7,15,23,29,31,39,43,53,54,55,58,59,60,63,64,65,67,68,69,70,71,72,73,75,76,77,79,80,81,82,85,87,88,108,132,133,156,202,212,213,214,219,221,225,230,247,251,252,287,304,311,319,],[-85,-172,-70,-69,-71,-73,-171,-72,-128,-141,-74,-102,-132,-133,-23,-139,-68,-129,-95,-134,-103,-135,146,-130,-142,-104,-144,-131,-105,-136,-140,-99,-145,-97,-75,-111,-101,-184,-174,-88,-98,-96,-100,-183,-76,-81,-173,-143,-137,-68,-78,-84,-138,]),'DIVIDE':([2,4,7,12,15,19,23,25,29,31,39,43,53,54,55,58,59,60,63,64,65,67,69,70,71,73,75,76,77,79,80,81,82,85,87,88,108,132,133,156,159,202,212,213,219,221,225,230,247,251,252,287,304,311,319,],[-74,-85,-172,-23,-70,-68,-69,105,-71,-73,-171,-72,-128,-141,-74,-102,-132,-133,-23,-139,-68,-129,-134,-103,-135,-130,-142,-104,-144,-131,-105,-136,-140,-99,-145,105,-75,-111,-101,-184,-23,-174,-88,105,-100,-183,-76,-81,-173,-143,-137,-68,-78,-84,-138,]),'MINUS':([2,4,7,11,12,15,19,20,23,25,28,29,31,39,43,53,54,55,58,59,60,63,64,65,66,67,68,69,70,71,73,75,76,77,79,80,81,82,85,86,87,88,90,92,95,105,106,107,108,109,110,111,112,113,114,124,132,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,156,159,173,202,205,212,213,214,217,219,221,222,224,225,227,230,231,232,237,239,241,242,245,247,248,251,252,253,255,258,287,295,304,307,309,311,314,318,319,],[-74,-85,-172,83,-23,-70,-68,83,-69,106,83,-71,-73,-171,-72,-128,-141,-74,-102,-132,-133,-23,-139,-68,83,-129,106,-134,-103,-135,-130,-142,-104,-144,-131,-105,-136,-140,-99,83,-145,-97,83,83,83,-107,-125,-124,-75,-106,83,-158,83,-108,-126,83,-111,-101,-123,-122,83,83,-112,-114,-121,-113,-118,-115,-120,-116,-119,-127,-117,83,83,-184,-23,-157,-174,83,-88,-98,106,83,-100,-183,83,83,-76,83,-81,83,83,83,83,83,83,83,-173,83,-143,-137,83,83,83,-68,83,-78,83,83,-84,83,83,-138,]),'NOT':([11,20,28,66,86,90,92,95,105,106,107,109,110,111,112,113,114,124,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,173,205,217,222,224,227,231,232,237,239,241,242,245,248,253,255,258,295,307,309,314,318,],[84,84,84,84,84,84,84,84,-107,-125,-124,-106,84,-158,84,-108,-126,84,-123,-122,84,84,-112,-114,-121,-113,-118,-115,-120,-116,-119,-127,-117,84,84,-157,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'LTEQUAL':([4,7,15,23,29,31,39,43,53,54,55,58,59,60,63,64,65,67,68,69,70,71,72,73,75,76,77,79,80,81,82,85,87,88,108,132,133,156,202,212,213,214,219,221,225,230,247,251,252,287,304,311,319,],[-85,-172,-70,-69,-71,-73,-171,-72,-128,-141,-74,-102,-132,-133,-23,-139,-68,-129,-95,-134,-103,-135,142,-130,-142,-104,-144,-131,-105,-136,-140,-99,-145,-97,-75,-111,-101,-184,-174,-88,-98,-96,-100,-183,-76,-81,-173,-143,-137,-68,-78,-84,-138,]),'ARRAY':([46,50,121,125,128,192,210,261,317,325,],[-23,-21,198,198,198,198,-22,198,198,198,]),'ARROW':([2,4,7,11,12,15,19,20,23,25,28,29,31,39,43,55,57,63,65,66,70,83,84,86,90,92,95,105,106,107,108,109,110,111,112,113,114,124,132,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,156,159,173,202,205,217,221,222,224,225,227,230,231,232,237,239,241,242,245,247,248,253,255,258,287,295,304,307,309,311,314,318,],[-74,-85,-172,56,-23,-70,-68,56,-69,108,56,-71,-73,-171,-72,-74,56,-23,-68,56,108,-109,-110,56,56,56,56,-107,-125,-124,-75,-106,56,-158,56,-108,-126,56,108,-123,-122,56,56,-112,-114,-121,-113,-118,-115,-120,-116,-119,-127,-117,56,56,-184,-23,-157,-174,56,56,-183,56,56,-76,56,-81,56,56,56,56,56,56,56,-173,56,56,56,56,-68,56,-78,56,56,-84,56,56,]),'TO':([4,7,15,23,29,31,39,43,53,54,55,58,59,60,63,64,65,67,68,69,70,71,72,73,75,76,77,78,79,80,81,82,85,87,88,108,132,133,156,202,212,213,214,219,221,225,230,247,251,252,267,294,304,305,308,311,319,322,331,332,],[-85,-172,-70,-69,-71,-73,-171,-72,-128,-141,-74,-102,-132,-133,-23,-139,-68,-129,-95,-134,-103,-135,-86,-130,-142,-104,-144,-87,-131,-105,-136,-140,-99,-145,-97,-75,-111,-101,-184,-174,-88,-98,-96,-100,-183,-76,-81,-173,-143,-137,309,-89,-78,309,309,-84,-138,-90,-204,309,]),'ELSIF':([4,7,15,23,29,31,39,43,53,54,55,58,59,60,63,64,65,67,68,69,70,71,72,73,75,76,77,78,79,80,81,82,85,87,88,94,96,108,116,132,133,156,165,180,202,212,213,214,218,219,221,223,225,230,233,234,247,251,252,254,257,275,294,304,311,312,319,320,322,340,],[-85,-172,-70,-69,-71,-73,-171,-72,-128,-141,-74,-102,-132,-133,-23,-139,-68,-129,-95,-134,-103,-135,-86,-130,-142,-104,-144,-87,-131,-105,-136,-140,-99,-145,-97,-170,-209,-75,-147,-111,-101,-184,-169,237,-174,-88,-98,-96,255,-100,-183,-146,-76,-81,-209,-164,-173,-143,-137,-91,295,-168,-89,-78,-84,237,-138,-93,-90,-94,]),'ASC':([0,5,11,13,20,22,27,28,40,42,45,56,57,66,83,84,86,90,91,92,95,96,105,106,107,109,110,111,112,113,114,116,118,124,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,155,168,173,179,201,205,207,217,222,223,224,227,231,232,233,237,238,239,241,242,245,248,253,255,258,295,299,307,309,314,318,323,329,344,348,353,356,357,],[38,-9,38,-8,38,38,38,38,-7,-5,-6,38,38,38,-109,-110,38,38,38,38,38,38,-107,-125,-124,-106,38,-158,38,-108,-126,-147,38,38,-24,-123,-122,38,38,-112,-114,-121,-113,-118,-115,-120,-116,-119,-127,-117,38,38,-28,38,-157,38,-15,38,-10,38,38,-146,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-32,-31,-30,-29,]),'TRUE':([11,20,28,57,66,83,84,86,90,92,95,105,106,107,109,110,111,112,113,114,124,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,173,205,217,222,224,227,231,232,237,239,241,242,245,248,253,255,258,295,307,309,314,318,],[82,82,82,82,82,-109,-110,82,82,82,82,-107,-125,-124,-106,82,-158,82,-108,-126,82,-123,-122,82,82,-112,-114,-121,-113,-118,-115,-120,-116,-119,-127,-117,82,82,-157,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'SCONST':([11,20,28,57,66,83,84,86,90,92,95,105,106,107,109,110,111,112,113,114,124,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,173,205,217,222,224,227,231,232,237,239,241,242,245,248,253,255,258,295,307,309,314,318,],[87,87,87,87,87,-109,-110,87,87,87,87,-107,-125,-124,-106,87,-158,87,-108,-126,87,-123,-122,87,87,-112,-114,-121,-113,-118,-115,-120,-116,-119,-127,-117,87,87,-157,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'SEMI':([1,2,4,6,7,8,11,15,17,23,24,26,29,31,32,34,39,43,46,47,49,51,52,53,54,55,58,59,60,62,63,64,65,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,85,87,88,93,98,99,101,108,122,123,126,127,132,133,156,160,164,166,167,169,170,171,174,182,183,184,185,186,187,188,189,190,191,193,194,195,196,199,202,208,209,212,213,214,219,221,225,230,236,240,243,246,247,249,250,251,252,259,266,270,276,282,291,294,298,303,304,306,310,311,313,315,316,319,322,328,330,333,334,337,338,342,346,347,350,352,354,355,],[-152,-150,-85,-151,-172,-149,-209,-70,-153,-69,-155,116,-71,-73,-154,-148,-171,-72,-23,-187,-25,131,-190,-128,-141,-74,-102,-132,-133,-188,-23,-139,-68,-129,-95,-134,-103,-135,-86,-130,-189,-142,-104,-144,-87,-131,-105,-136,-140,-99,-145,-97,-191,-195,168,-196,-75,-16,201,-11,207,-111,-101,-184,223,-208,-193,-194,-197,-198,-199,-156,-41,-59,-49,-50,-39,-44,-51,-19,-40,-58,-47,-46,-45,-43,-42,-174,-27,-26,-88,-98,-96,-100,-183,-76,-81,-163,-18,-57,-17,-173,-14,-12,-143,-137,299,-192,-207,-162,-20,-13,-89,323,329,-78,-203,-206,-84,-52,-53,-60,-138,-90,344,-202,-201,-205,-67,-62,348,-200,353,-38,356,-37,357,]),'GTEQUAL':([4,7,15,23,29,31,39,43,53,54,55,58,59,60,63,64,65,67,68,69,70,71,72,73,75,76,77,79,80,81,82,85,87,88,108,132,133,156,202,212,213,214,219,221,225,230,247,251,252,287,304,311,319,],[-85,-172,-70,-69,-71,-73,-171,-72,-128,-141,-74,-102,-132,-133,-23,-139,-68,-129,-95,-134,-103,-135,148,-130,-142,-104,-144,-131,-105,-136,-140,-99,-145,-97,-75,-111,-101,-184,-174,-88,-98,-96,-100,-183,-76,-81,-173,-143,-137,-68,-78,-84,-138,]),'OR':([4,7,15,23,29,31,39,43,53,54,55,58,59,60,63,64,65,67,68,69,70,71,72,73,75,76,77,79,80,81,82,85,87,88,108,132,133,156,202,212,213,214,219,221,225,230,247,251,252,287,304,311,319,],[-85,-172,-70,-69,-71,-73,-171,-72,-128,-141,-74,-102,-132,-133,-23,-139,-68,-129,-95,-134,-103,-135,145,-130,-142,-104,-144,-131,-105,-136,-140,-99,-145,-97,-75,-111,-101,-184,-174,-88,-98,-96,-100,-183,-76,-81,-173,-143,-137,-68,-78,-84,-138,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'closed_dyadic_operator':([25,],[102,]),'call_action':([0,11,20,22,27,28,56,57,66,86,90,91,92,95,96,110,112,118,124,138,139,151,153,168,179,205,217,222,224,227,231,232,233,237,238,239,241,242,245,248,253,255,258,295,299,307,309,314,318,323,329,344,],[2,55,55,2,2,55,55,55,55,55,55,2,55,55,2,55,55,2,55,55,55,55,55,2,2,55,55,55,55,55,55,55,2,55,2,55,55,55,55,55,55,55,55,55,2,55,55,55,55,2,2,2,]),'initialization':([189,],[240,]),'value_array_element':([11,20,28,57,66,86,90,92,95,110,112,124,138,139,151,153,205,217,222,224,227,231,232,237,239,241,242,245,248,253,255,258,295,307,309,314,318,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'literal':([11,20,28,57,66,86,90,92,95,110,112,124,138,139,151,153,205,217,222,224,227,231,232,237,239,241,242,245,248,253,255,258,295,307,309,314,318,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'location':([0,11,20,22,27,28,56,57,66,86,90,91,92,95,96,110,112,118,124,138,139,151,153,168,179,205,217,222,224,227,231,232,233,237,238,239,241,242,245,248,253,255,258,295,299,307,309,314,318,323,329,344,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'else_clause':([180,312,],[235,335,]),'declaration':([30,200,],[122,122,]),'expression_list':([112,151,232,],[175,215,273,]),'exit_action':([0,22,27,91,96,118,168,179,233,238,299,323,329,344,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'array_mode':([121,125,128,192,261,317,325,],[183,183,183,183,183,183,183,]),'builtin_call':([0,11,20,22,27,28,56,57,66,86,90,91,92,95,96,110,112,118,124,138,139,151,153,168,179,205,217,222,224,227,231,232,233,237,238,239,241,242,245,248,253,255,258,295,299,307,309,314,318,323,329,344,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'identifier_list':([10,30,44,129,130,200,206,220,301,],[48,121,125,48,210,121,125,261,261,]),'integer_literal':([11,20,28,57,66,86,90,92,95,110,112,124,138,139,151,153,205,217,222,224,227,231,232,237,239,241,242,244,245,248,253,255,258,295,307,309,314,318,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,284,59,59,59,59,59,59,59,59,59,59,]),'operator2':([68,214,],[138,138,]),'action_statement':([0,22,27,96,118,168,179,233,238,299,323,329,344,],[13,96,13,96,13,96,233,96,233,13,13,13,13,]),'discrete_range_mode':([121,125,128,192,229,245,261,268,317,318,325,],[193,193,193,193,193,193,193,193,193,193,193,]),'character_literal':([11,20,28,57,66,86,90,92,95,110,112,124,138,139,151,153,205,217,222,224,227,231,232,237,239,241,242,245,248,253,255,258,295,307,309,314,318,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'action':([0,22,27,91,96,118,168,179,233,238,299,323,329,344,],[26,26,26,160,26,26,26,26,26,26,26,26,26,26,]),'literal_range':([239,242,245,318,],[279,283,286,286,]),'for_control':([22,],[98,]),'statement':([0,27,118,299,323,329,344,],[27,118,118,118,118,118,118,]),'array_slice':([0,11,20,22,27,28,56,57,66,86,90,91,92,95,96,110,112,118,124,138,139,151,153,168,179,205,217,222,224,227,231,232,233,237,238,239,241,242,245,248,253,255,258,295,299,307,309,314,318,323,329,344,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'membership_operator':([72,],[140,]),'step_enumeration':([100,],[170,]),'end_value':([267,305,308,332,],[306,330,333,346,]),'relational_operator':([72,],[143,]),'newmode_list':([10,129,],[51,209,]),'parameter_list':([90,124,222,],[157,203,263,]),'action_statement_list':([179,238,],[234,278,]),'builtin_name':([0,11,20,22,27,28,56,57,66,86,90,91,92,95,96,110,112,118,124,138,139,151,153,168,179,205,217,222,224,227,231,232,233,237,238,239,241,242,245,248,253,255,258,295,299,307,309,314,318,323,329,344,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'statement_list':([0,],[36,]),'conditional_expression':([11,20,28,66,86,90,92,95,110,112,124,151,205,217,222,224,227,231,232,237,239,241,242,245,248,253,255,258,295,307,309,314,318,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'parenthesized_expression':([11,20,28,57,66,86,90,92,95,110,112,124,138,139,151,153,205,217,222,224,227,231,232,237,239,241,242,245,248,253,255,258,295,307,309,314,318,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'lower_bound':([112,239,242,245,318,],[176,280,280,280,280,]),'procedure_call':([0,11,20,22,27,28,56,57,66,86,90,91,92,95,96,110,112,118,124,138,139,151,153,168,179,205,217,222,224,227,231,232,233,237,238,239,241,242,245,248,253,255,258,295,299,307,309,314,318,323,329,344,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'control_part':([22,],[99,]),'primitive_value':([11,20,28,57,66,86,90,92,95,110,112,124,138,139,151,153,205,217,222,224,227,231,232,237,239,241,242,245,248,253,255,258,295,307,309,314,318,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'expression':([11,20,28,66,86,90,92,95,110,112,124,151,205,217,222,224,227,231,232,237,239,241,242,245,248,253,255,258,295,307,309,314,318,],[74,93,120,135,152,158,163,164,174,177,158,216,249,254,158,265,267,271,274,277,281,282,281,281,291,292,293,297,321,331,334,271,281,]),'while_control':([22,98,],[101,167,]),'element_mode':([317,],[338,]),'array_location':([0,11,20,22,27,28,56,57,66,86,90,91,92,95,96,110,112,118,124,138,139,151,153,168,179,205,217,222,224,227,231,232,233,237,238,239,241,242,245,248,253,255,258,295,299,307,309,314,318,323,329,344,],[25,70,70,25,25,70,132,70,70,70,70,25,70,70,25,70,70,25,70,70,70,70,70,25,25,70,70,70,70,70,70,70,25,70,25,70,70,70,70,70,70,70,70,70,25,70,70,70,70,25,25,25,]),'left_element':([92,],[161,]),'boolean_mode':([121,125,128,192,229,245,261,268,317,318,325,],[195,195,195,195,195,195,195,195,195,195,195,]),'operand2':([11,20,28,66,86,90,92,95,110,112,124,138,139,151,205,217,222,224,227,231,232,237,239,241,242,245,248,253,255,258,295,307,309,314,318,],[88,88,88,88,88,88,88,88,88,88,88,213,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'declaration_list':([30,200,],[123,246,]),'array_element':([0,11,20,22,27,28,56,57,66,86,90,91,92,95,96,110,112,118,124,138,139,151,153,168,179,205,217,222,224,227,231,232,233,237,238,239,241,242,245,248,253,255,258,295,299,307,309,314,318,323,329,344,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'result_action':([0,22,27,91,96,118,168,179,233,238,299,323,329,344,],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,]),'operator1':([72,],[139,]),'empty':([11,22,27,96,118,168,233,299,323,329,344,],[52,94,117,94,117,94,94,117,117,117,117,]),'result_spec':([259,303,],[298,328,]),'formal_parameter':([220,301,],[260,260,]),'else_expression':([218,257,],[256,296,]),'procedure_definition':([89,],[155,]),'procedure_statement':([0,27,118,299,323,329,344,],[5,5,5,5,5,5,5,]),'start_element':([92,],[162,]),'assignment_action':([0,22,27,91,96,118,168,179,233,238,299,323,329,344,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'operand4':([11,20,28,57,66,86,90,92,95,110,112,124,138,139,151,153,205,217,222,224,227,231,232,237,239,241,242,245,248,253,255,258,295,307,309,314,318,],[58,58,58,133,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'index_mode':([245,318,],[290,290,]),'if_action':([0,22,27,91,96,118,168,179,233,238,299,323,329,344,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'result':([11,],[62,]),'program':([0,],[33,]),'string_mode':([121,125,128,192,261,317,325,],[191,191,191,191,191,191,191,]),'string_element':([0,11,20,22,27,28,56,57,66,86,90,91,92,95,96,110,112,118,124,138,139,151,153,168,179,205,217,222,224,227,231,232,233,237,238,239,241,242,245,248,253,255,258,295,299,307,309,314,318,323,329,344,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'return_action':([0,22,27,91,96,118,168,179,233,238,299,323,329,344,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'character_mode':([121,125,128,192,229,245,261,268,317,318,325,],[194,194,194,194,194,194,194,194,194,194,194,]),'step_value':([267,],[308,]),'operand1':([11,20,28,66,86,90,92,95,110,112,124,139,151,205,217,222,224,227,231,232,237,239,241,242,245,248,253,255,258,295,307,309,314,318,],[68,68,68,68,68,68,68,68,68,68,68,214,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'reference_mode':([121,125,128,192,261,317,325,],[182,182,182,182,182,182,182,]),'dereferenced_reference':([0,11,20,22,27,28,56,57,66,86,90,91,92,95,96,110,112,118,124,138,139,151,153,168,179,205,217,222,224,227,231,232,233,237,238,239,241,242,245,248,253,255,258,295,299,307,309,314,318,323,329,344,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'do_action':([0,22,27,91,96,118,168,179,233,238,299,323,329,344,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'bracketed_action':([0,22,27,91,96,118,168,179,233,238,299,323,329,344,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'then_expression':([152,293,321,],[218,320,340,]),'formal_parameter_list':([220,301,],[262,326,]),'arithmetic_additive_operator':([25,68,214,],[115,137,137,]),'string_slice':([0,11,20,22,27,28,56,57,66,86,90,91,92,95,96,110,112,118,124,138,139,151,153,168,179,205,217,222,224,227,231,232,233,237,238,239,241,242,245,248,253,255,258,295,299,307,309,314,318,323,329,344,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'arithmetic_multiplicative_operator':([25,88,213,],[103,153,153,]),'action_statement_nullable':([22,96,168,233,],[97,165,226,275,]),'boolean_literal':([11,20,28,57,66,86,90,92,95,110,112,124,138,139,151,153,205,217,222,224,227,231,232,237,239,241,242,245,248,253,255,258,295,307,309,314,318,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'iteration':([100,],[169,]),'operand0':([11,20,28,66,86,90,92,95,110,112,124,151,205,217,222,224,227,231,232,237,239,241,242,245,248,253,255,258,295,307,309,314,318,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'value_array_slice':([11,20,28,57,66,86,90,92,95,110,112,124,138,139,151,153,205,217,222,224,227,231,232,237,239,241,242,245,248,253,255,258,295,307,309,314,318,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'monadic_operator':([11,20,28,66,86,90,92,95,110,112,124,138,139,151,153,205,217,222,224,227,231,232,237,239,241,242,245,248,253,255,258,295,307,309,314,318,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'empty_literal':([11,20,28,57,66,86,90,92,95,110,112,124,138,139,151,153,205,217,222,224,227,231,232,237,239,241,242,245,248,253,255,258,295,307,309,314,318,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'referenced_location':([11,20,28,57,66,86,90,92,95,110,112,124,138,139,151,153,205,217,222,224,227,231,232,237,239,241,242,245,248,253,255,258,295,307,309,314,318,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'statement_nullable':([27,118,299,323,329,344,],[119,178,324,341,345,351,]),'declaration_statement':([0,27,118,299,323,329,344,],[42,42,42,42,42,42,42,]),'index_mode_list':([245,318,],[288,339,]),'range_enumeration':([100,],[171,]),'integer_mode':([121,125,128,192,229,245,261,268,317,318,325,],[187,187,187,187,187,187,187,187,187,187,187,]),'newmode_statement':([0,27,118,299,323,329,344,],[40,40,40,40,40,40,40,]),'mode':([121,125,128,192,261,317,325,],[189,204,208,243,302,337,343,]),'discrete_mode':([121,125,128,192,229,245,261,268,317,318,325,],[190,190,190,190,270,289,190,310,190,289,190,]),'discrete_mode_name':([121,125,128,192,229,245,261,268,317,318,325,],[181,181,181,181,181,181,181,181,181,181,181,]),'character_string_literal':([11,20,28,57,66,86,90,92,95,110,112,124,138,139,151,153,205,217,222,224,227,231,232,237,239,241,242,245,248,253,255,258,295,307,309,314,318,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'synonym_definition':([44,206,],[126,126,]),'string_concatenation_operator':([25,68,214,],[104,136,136,]),'right_element':([224,],[264,]),'synonym_list':([44,206,],[127,250,]),'operand3':([11,20,28,66,86,90,92,95,110,112,124,138,139,151,153,205,217,222,224,227,231,232,237,239,241,242,245,248,253,255,258,295,307,309,314,318,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,219,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'string_length':([244,],[285,]),'upper_bound':([231,314,],[272,336,]),'assigning_operator':([25,],[110,]),'mode_definition':([10,129,],[49,49,]),'identifier':([0,9,10,11,20,22,27,28,30,44,56,57,66,86,90,91,92,95,96,100,110,112,118,121,124,125,128,129,130,138,139,151,153,168,179,192,200,205,206,217,220,222,224,227,229,231,232,233,237,238,239,241,242,245,248,253,255,258,261,268,295,299,301,307,309,314,317,318,323,325,329,344,],[19,47,50,65,65,19,19,65,50,50,65,65,65,65,65,65,65,65,19,172,65,65,19,196,65,196,196,50,50,65,65,65,65,19,19,196,50,65,50,65,50,65,65,65,269,65,65,19,65,19,65,65,65,287,65,65,65,65,196,269,65,19,50,65,65,65,196,287,19,196,19,19,]),'then_clause':([120,277,],[180,312,]),'mode_name':([121,125,128,192,261,317,325,],[186,186,186,186,186,186,186,]),'elsif_expression':([218,],[257,]),'synonym_statement':([0,27,118,299,323,329,344,],[45,45,45,45,45,45,45,]),'composite_mode':([121,125,128,192,261,317,325,],[199,199,199,199,199,199,199,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','Parser.py',72),
  ('statement_list -> statement statement_nullable','statement_list',2,'p_statement_list','Parser.py',76),
  ('statement_nullable -> statement statement_nullable','statement_nullable',2,'p_statement_nullable','Parser.py',88),
  ('statement_nullable -> empty','statement_nullable',1,'p_statement_nullable','Parser.py',89),
  ('statement -> declaration_statement','statement',1,'p_statement','Parser.py',101),
  ('statement -> synonym_statement','statement',1,'p_statement','Parser.py',102),
  ('statement -> newmode_statement','statement',1,'p_statement','Parser.py',103),
  ('statement -> action_statement','statement',1,'p_statement','Parser.py',104),
  ('statement -> procedure_statement','statement',1,'p_statement','Parser.py',105),
  ('synonym_statement -> SYN synonym_list SEMI','synonym_statement',3,'p_synonym_statement','Parser.py',114),
  ('synonym_list -> synonym_definition','synonym_list',1,'p_synonym_list','Parser.py',118),
  ('synonym_list -> synonym_definition COMMA synonym_list','synonym_list',3,'p_synonym_list','Parser.py',119),
  ('synonym_definition -> identifier_list mode ASSIGN expression','synonym_definition',4,'p_synonym_definition','Parser.py',128),
  ('synonym_definition -> identifier_list ASSIGN expression','synonym_definition',3,'p_synonym_definition','Parser.py',129),
  ('declaration_statement -> DCL declaration_list SEMI','declaration_statement',3,'p_declaration_statement','Parser.py',143),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','Parser.py',147),
  ('declaration_list -> declaration COMMA declaration_list','declaration_list',3,'p_declaration_list','Parser.py',148),
  ('declaration -> identifier_list mode initialization','declaration',3,'p_declaration','Parser.py',157),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','Parser.py',158),
  ('initialization -> ASSIGN expression','initialization',2,'p_initialization','Parser.py',162),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','Parser.py',166),
  ('identifier_list -> identifier COMMA identifier_list','identifier_list',3,'p_identifier_list','Parser.py',167),
  ('identifier -> ID','identifier',1,'p_identifier','Parser.py',176),
  ('newmode_statement -> TYPE newmode_list SEMI','newmode_statement',3,'p_newmode_statement','Parser.py',186),
  ('newmode_list -> mode_definition','newmode_list',1,'p_newmode_list','Parser.py',190),
  ('newmode_list -> mode_definition COMMA newmode_list','newmode_list',3,'p_newmode_list','Parser.py',191),
  ('mode_definition -> identifier_list ASSIGN mode','mode_definition',3,'p_mode_definition','Parser.py',200),
  ('procedure_statement -> ID COLON procedure_definition','procedure_statement',3,'p_procedure_statement','Parser.py',211),
  ('procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI','procedure_definition',9,'p_procedure_definition','Parser.py',215),
  ('procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI','procedure_definition',8,'p_procedure_definition','Parser.py',216),
  ('procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI','procedure_definition',8,'p_procedure_definition','Parser.py',217),
  ('procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI','procedure_definition',7,'p_procedure_definition','Parser.py',218),
  ('formal_parameter_list -> formal_parameter','formal_parameter_list',1,'p_formal_parameter_list','Parser.py',231),
  ('formal_parameter_list -> formal_parameter COMMA formal_parameter_list','formal_parameter_list',3,'p_formal_parameter_list','Parser.py',232),
  ('formal_parameter -> identifier_list mode LOC','formal_parameter',3,'p_formal_parameter','Parser.py',241),
  ('formal_parameter -> identifier_list mode','formal_parameter',2,'p_formal_parameter','Parser.py',242),
  ('result_spec -> RETURNS LPAREN mode LOC RPAREN','result_spec',5,'p_result_spec','Parser.py',248),
  ('result_spec -> RETURNS LPAREN mode RPAREN','result_spec',4,'p_result_spec','Parser.py',249),
  ('mode -> mode_name','mode',1,'p_mode','Parser.py',254),
  ('mode -> discrete_mode','mode',1,'p_mode','Parser.py',255),
  ('mode -> reference_mode','mode',1,'p_mode','Parser.py',256),
  ('mode -> composite_mode','mode',1,'p_mode','Parser.py',257),
  ('mode_name -> identifier','mode_name',1,'p_mode_name','Parser.py',261),
  ('discrete_mode -> integer_mode','discrete_mode',1,'p_discrete_mode','Parser.py',269),
  ('discrete_mode -> boolean_mode','discrete_mode',1,'p_discrete_mode','Parser.py',270),
  ('discrete_mode -> character_mode','discrete_mode',1,'p_discrete_mode','Parser.py',271),
  ('discrete_mode -> discrete_range_mode','discrete_mode',1,'p_discrete_mode','Parser.py',272),
  ('discrete_mode_name -> identifier','discrete_mode_name',1,'p_discrete_mode_name','Parser.py',276),
  ('integer_mode -> INT','integer_mode',1,'p_integer_mode','Parser.py',280),
  ('boolean_mode -> BOOL','boolean_mode',1,'p_boolean_mode','Parser.py',284),
  ('character_mode -> CHAR','character_mode',1,'p_character_mode','Parser.py',288),
  ('discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','Parser.py',297),
  ('discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','Parser.py',298),
  ('literal_range -> lower_bound COLON upper_bound','literal_range',3,'p_literal_range','Parser.py',302),
  ('lower_bound -> expression','lower_bound',1,'p_lower_bound','Parser.py',306),
  ('upper_bound -> expression','upper_bound',1,'p_upper_bound','Parser.py',310),
  ('reference_mode -> REF mode','reference_mode',2,'p_reference_mode','Parser.py',317),
  ('composite_mode -> string_mode','composite_mode',1,'p_composite_mode','Parser.py',324),
  ('composite_mode -> array_mode','composite_mode',1,'p_composite_mode','Parser.py',325),
  ('string_mode -> CHARS LBRACKET string_length RBRACKET','string_mode',4,'p_string_mode','Parser.py',329),
  ('string_length -> integer_literal','string_length',1,'p_string_length','Parser.py',333),
  ('array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode','array_mode',5,'p_array_mode','Parser.py',337),
  ('index_mode_list -> index_mode','index_mode_list',1,'p_index_mode_list','Parser.py',341),
  ('index_mode_list -> index_mode COMMA index_mode_list','index_mode_list',3,'p_index_mode_list','Parser.py',342),
  ('index_mode -> discrete_mode','index_mode',1,'p_index_mode','Parser.py',351),
  ('index_mode -> literal_range','index_mode',1,'p_index_mode','Parser.py',352),
  ('element_mode -> mode','element_mode',1,'p_element_mode','Parser.py',356),
  ('location -> identifier','location',1,'p_location','Parser.py',367),
  ('location -> dereferenced_reference','location',1,'p_location','Parser.py',368),
  ('location -> string_element','location',1,'p_location','Parser.py',369),
  ('location -> string_slice','location',1,'p_location','Parser.py',370),
  ('location -> array_element','location',1,'p_location','Parser.py',371),
  ('location -> array_slice','location',1,'p_location','Parser.py',372),
  ('location -> call_action','location',1,'p_location','Parser.py',373),
  ('dereferenced_reference -> array_location ARROW','dereferenced_reference',2,'p_dereferenced_reference','Parser.py',377),
  ('string_element -> identifier LBRACKET start_element RBRACKET','string_element',4,'p_string_element','Parser.py',381),
  ('start_element -> expression','start_element',1,'p_start_element','Parser.py',385),
  ('string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET','string_slice',6,'p_string_slice','Parser.py',389),
  ('left_element -> expression','left_element',1,'p_left_element','Parser.py',393),
  ('right_element -> expression','right_element',1,'p_right_element','Parser.py',397),
  ('array_element -> array_location LBRACKET expression_list RBRACKET','array_element',4,'p_array_element','Parser.py',401),
  ('expression_list -> expression','expression_list',1,'p_expression_list','Parser.py',405),
  ('expression_list -> expression COMMA expression_list','expression_list',3,'p_expression_list','Parser.py',406),
  ('array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET','array_slice',6,'p_array_slice','Parser.py',413),
  ('array_location -> location','array_location',1,'p_array_location','Parser.py',417),
  ('expression -> operand0','expression',1,'p_expression','Parser.py',427),
  ('expression -> conditional_expression','expression',1,'p_expression','Parser.py',428),
  ('parenthesized_expression -> LPAREN expression RPAREN','parenthesized_expression',3,'p_parenthesized_expression','Parser.py',432),
  ('conditional_expression -> IF expression then_expression else_expression FI','conditional_expression',5,'p_conditional_expression','Parser.py',440),
  ('conditional_expression -> IF expression then_expression elsif_expression else_expression FI','conditional_expression',6,'p_conditional_expression','Parser.py',441),
  ('then_expression -> THEN expression','then_expression',2,'p_then_expression','Parser.py',445),
  ('else_expression -> ELSE expression','else_expression',2,'p_else_expression','Parser.py',449),
  ('elsif_expression -> ELSIF expression then_expression','elsif_expression',3,'p_elsif_expression','Parser.py',453),
  ('elsif_expression -> elsif_expression ELSIF expression then_expression','elsif_expression',4,'p_elsif_expression','Parser.py',454),
  ('operand0 -> operand1','operand0',1,'p_operand0','Parser.py',469),
  ('operand0 -> operand0 operator1 operand1','operand0',3,'p_operand0','Parser.py',470),
  ('operand1 -> operand2','operand1',1,'p_operand1','Parser.py',477),
  ('operand1 -> operand1 operator2 operand2','operand1',3,'p_operand1','Parser.py',478),
  ('operand2 -> operand3','operand2',1,'p_operand2','Parser.py',485),
  ('operand2 -> operand2 arithmetic_multiplicative_operator operand3','operand2',3,'p_operand2','Parser.py',486),
  ('operand3 -> monadic_operator operand4','operand3',2,'p_operand3','Parser.py',494),
  ('operand3 -> operand4','operand3',1,'p_operand3','Parser.py',495),
  ('operand4 -> array_location','operand4',1,'p_operand4','Parser.py',502),
  ('operand4 -> referenced_location','operand4',1,'p_operand4','Parser.py',503),
  ('operand4 -> primitive_value','operand4',1,'p_operand4','Parser.py',504),
  ('arithmetic_multiplicative_operator -> TIMES','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',515),
  ('arithmetic_multiplicative_operator -> DIVIDE','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',516),
  ('arithmetic_multiplicative_operator -> MODULO','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',517),
  ('monadic_operator -> MINUS','monadic_operator',1,'p_monadic_operator','Parser.py',521),
  ('monadic_operator -> NOT','monadic_operator',1,'p_monadic_operator','Parser.py',522),
  ('referenced_location -> ARROW array_location','referenced_location',2,'p_referenced_location','Parser.py',526),
  ('operator1 -> membership_operator','operator1',1,'p_operator1','Parser.py',530),
  ('operator1 -> relational_operator','operator1',1,'p_operator1','Parser.py',531),
  ('relational_operator -> AND','relational_operator',1,'p_relational_operator','Parser.py',534),
  ('relational_operator -> OR','relational_operator',1,'p_relational_operator','Parser.py',535),
  ('relational_operator -> EQUAL','relational_operator',1,'p_relational_operator','Parser.py',536),
  ('relational_operator -> NOTEQ','relational_operator',1,'p_relational_operator','Parser.py',537),
  ('relational_operator -> GREATER','relational_operator',1,'p_relational_operator','Parser.py',538),
  ('relational_operator -> GTEQUAL','relational_operator',1,'p_relational_operator','Parser.py',539),
  ('relational_operator -> LESS','relational_operator',1,'p_relational_operator','Parser.py',540),
  ('relational_operator -> LTEQUAL','relational_operator',1,'p_relational_operator','Parser.py',541),
  ('operator2 -> arithmetic_additive_operator','operator2',1,'p_operator2','Parser.py',545),
  ('operator2 -> string_concatenation_operator','operator2',1,'p_operator2','Parser.py',546),
  ('arithmetic_additive_operator -> PLUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','Parser.py',550),
  ('arithmetic_additive_operator -> MINUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','Parser.py',551),
  ('string_concatenation_operator -> CONCAT','string_concatenation_operator',1,'p_string_concatenation_operator','Parser.py',555),
  ('membership_operator -> IN','membership_operator',1,'p_membership_operator','Parser.py',560),
  ('primitive_value -> literal','primitive_value',1,'p_primitive_value','Parser.py',572),
  ('primitive_value -> value_array_element','primitive_value',1,'p_primitive_value','Parser.py',573),
  ('primitive_value -> value_array_slice','primitive_value',1,'p_primitive_value','Parser.py',574),
  ('primitive_value -> parenthesized_expression','primitive_value',1,'p_primitive_value','Parser.py',575),
  ('literal -> integer_literal','literal',1,'p_literal','Parser.py',579),
  ('literal -> boolean_literal','literal',1,'p_literal','Parser.py',580),
  ('literal -> character_literal','literal',1,'p_literal','Parser.py',581),
  ('literal -> empty_literal','literal',1,'p_literal','Parser.py',582),
  ('literal -> character_string_literal','literal',1,'p_literal','Parser.py',583),
  ('value_array_element -> primitive_value LBRACKET expression_list RBRACKET','value_array_element',4,'p_value_array_element','Parser.py',587),
  ('value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET','value_array_slice',6,'p_value_array_slice','Parser.py',591),
  ('integer_literal -> ICONST','integer_literal',1,'p_integer_literal','Parser.py',599),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','Parser.py',603),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','Parser.py',604),
  ('character_literal -> CCONST','character_literal',1,'p_character_literal','Parser.py',608),
  ('character_literal -> HAT LPAREN ICONST RPAREN','character_literal',4,'p_character_literal','Parser.py',609),
  ('empty_literal -> NULL','empty_literal',1,'p_empty_literal','Parser.py',618),
  ('character_string_literal -> SCONST','character_string_literal',1,'p_character_string_literal','Parser.py',622),
  ('action_statement -> identifier COLON action SEMI','action_statement',4,'p_action_statement','Parser.py',633),
  ('action_statement -> action SEMI','action_statement',2,'p_action_statement','Parser.py',634),
  ('action -> bracketed_action','action',1,'p_action','Parser.py',639),
  ('action -> assignment_action','action',1,'p_action','Parser.py',640),
  ('action -> call_action','action',1,'p_action','Parser.py',641),
  ('action -> exit_action','action',1,'p_action','Parser.py',642),
  ('action -> result_action','action',1,'p_action','Parser.py',643),
  ('action -> return_action','action',1,'p_action','Parser.py',644),
  ('bracketed_action -> if_action','bracketed_action',1,'p_bracketed_action','Parser.py',648),
  ('bracketed_action -> do_action','bracketed_action',1,'p_bracketed_action','Parser.py',649),
  ('assignment_action -> array_location assigning_operator expression','assignment_action',3,'p_assignment_action','Parser.py',653),
  ('assigning_operator -> closed_dyadic_operator ASSIGN','assigning_operator',2,'p_assigning_operator','Parser.py',657),
  ('assigning_operator -> ASSIGN','assigning_operator',1,'p_assigning_operator','Parser.py',658),
  ('closed_dyadic_operator -> arithmetic_additive_operator','closed_dyadic_operator',1,'p_closed_dyadic_operator','Parser.py',662),
  ('closed_dyadic_operator -> arithmetic_multiplicative_operator','closed_dyadic_operator',1,'p_closed_dyadic_operator','Parser.py',663),
  ('closed_dyadic_operator -> string_concatenation_operator','closed_dyadic_operator',1,'p_closed_dyadic_operator','Parser.py',664),
  ('if_action -> IF expression then_clause else_clause FI','if_action',5,'p_if_action','Parser.py',668),
  ('if_action -> IF expression then_clause FI','if_action',4,'p_if_action','Parser.py',669),
  ('then_clause -> THEN action_statement_list','then_clause',2,'p_then_clause','Parser.py',673),
  ('else_clause -> ELSE action_statement_list','else_clause',2,'p_else_clause','Parser.py',677),
  ('else_clause -> ELSIF expression then_clause else_clause','else_clause',4,'p_else_clause','Parser.py',678),
  ('else_clause -> ELSIF expression then_clause','else_clause',3,'p_else_clause','Parser.py',679),
  ('action_statement_list -> action_statement action_statement_nullable','action_statement_list',2,'p_action_statement_list','Parser.py',690),
  ('action_statement_nullable -> action_statement action_statement_nullable','action_statement_nullable',2,'p_action_statement_nullable','Parser.py',702),
  ('action_statement_nullable -> empty','action_statement_nullable',1,'p_action_statement_nullable','Parser.py',703),
  ('call_action -> procedure_call','call_action',1,'p_call_action','Parser.py',720),
  ('call_action -> builtin_call','call_action',1,'p_call_action','Parser.py',721),
  ('builtin_call -> builtin_name LPAREN parameter_list RPAREN','builtin_call',4,'p_builtin_call','Parser.py',725),
  ('builtin_call -> builtin_name LPAREN RPAREN','builtin_call',3,'p_builtin_call','Parser.py',726),
  ('builtin_name -> ABS','builtin_name',1,'p_builtin_name','Parser.py',731),
  ('builtin_name -> ASC','builtin_name',1,'p_builtin_name','Parser.py',732),
  ('builtin_name -> NUM','builtin_name',1,'p_builtin_name','Parser.py',733),
  ('builtin_name -> UPPER','builtin_name',1,'p_builtin_name','Parser.py',734),
  ('builtin_name -> LOWER','builtin_name',1,'p_builtin_name','Parser.py',735),
  ('builtin_name -> LENGTH','builtin_name',1,'p_builtin_name','Parser.py',736),
  ('builtin_name -> READ','builtin_name',1,'p_builtin_name','Parser.py',737),
  ('builtin_name -> PRINT','builtin_name',1,'p_builtin_name','Parser.py',738),
  ('procedure_call -> ID LPAREN parameter_list RPAREN','procedure_call',4,'p_procedure_call','Parser.py',742),
  ('procedure_call -> ID LPAREN RPAREN','procedure_call',3,'p_procedure_call','Parser.py',743),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','Parser.py',747),
  ('parameter_list -> expression COMMA parameter_list','parameter_list',3,'p_parameter_list','Parser.py',748),
  ('exit_action -> EXIT identifier','exit_action',2,'p_exit_action','Parser.py',757),
  ('return_action -> RETURN result','return_action',2,'p_return_action','Parser.py',765),
  ('result -> expression','result',1,'p_result','Parser.py',769),
  ('result -> empty','result',1,'p_result','Parser.py',770),
  ('result_action -> RESULT expression','result_action',2,'p_result_action','Parser.py',773),
  ('do_action -> DO control_part SEMI action_statement_nullable OD','do_action',5,'p_do_action','Parser.py',781),
  ('do_action -> DO action_statement_nullable OD','do_action',3,'p_do_action','Parser.py',782),
  ('control_part -> for_control while_control','control_part',2,'p_control_part','Parser.py',789),
  ('control_part -> for_control','control_part',1,'p_control_part','Parser.py',790),
  ('control_part -> while_control','control_part',1,'p_control_part','Parser.py',791),
  ('for_control -> FOR iteration','for_control',2,'p_for_control','Parser.py',795),
  ('iteration -> step_enumeration','iteration',1,'p_iteration','Parser.py',799),
  ('iteration -> range_enumeration','iteration',1,'p_iteration','Parser.py',800),
  ('step_enumeration -> identifier ASSIGN expression step_value DOWN end_value','step_enumeration',6,'p_step_enumeration','Parser.py',804),
  ('step_enumeration -> identifier ASSIGN expression step_value end_value','step_enumeration',5,'p_step_enumeration','Parser.py',805),
  ('step_enumeration -> identifier ASSIGN expression DOWN end_value','step_enumeration',5,'p_step_enumeration','Parser.py',806),
  ('step_enumeration -> identifier ASSIGN expression end_value','step_enumeration',4,'p_step_enumeration','Parser.py',807),
  ('step_value -> BY expression','step_value',2,'p_step_value','Parser.py',819),
  ('end_value -> TO expression','end_value',2,'p_end_value','Parser.py',823),
  ('range_enumeration -> identifier DOWN IN discrete_mode','range_enumeration',4,'p_range_enumeration','Parser.py',827),
  ('range_enumeration -> identifier IN discrete_mode','range_enumeration',3,'p_range_enumeration','Parser.py',828),
  ('while_control -> WHILE expression','while_control',2,'p_while_control','Parser.py',835),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',841),
]
