
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ICONST CCONST SCONST COMMA PLUS MINUS TIMES DIVIDE COLON LPAREN RPAREN ASSIGN SEMI ARROW LTEQUAL LESS GREATER GTEQUAL EQUAL LBRACKET RBRACKET ID MODULO AND OR NOTEQ NOT CONCAT LOWER ARRAY CHARS LOC TO RETURN DOWN EXIT NULL BY UPPER THEN RETURNS CHAR FI READ TRUE INT OD TYPE ABS ELSE BOOL PRINT DO IF LENGTH RESULT SYN END FOR PROC FALSE WHILE ASC ELSIF REF DCL IN NUMprogram : statement_liststatement_list : statement statement_nullablestatement_nullable : statement statement_nullable\n                              | emptystatement : declaration_statement\n                     | synonym_statement\n                     | newmode_statement\n                     | action_statement\n                     | procedure_statementsynonym_statement : SYN synonym_list SEMIsynonym_list : synonym_definition\n                        | synonym_definition COMMA synonym_listsynonym_definition : identifier_list mode ASSIGN expression\n                              | identifier_list ASSIGN expressiondeclaration_statement : DCL declaration_list SEMIdeclaration_list : declaration\n                            | declaration COMMA declaration_listdeclaration : identifier_list mode initialization\n                       | identifier_list modeinitialization : ASSIGN expressionidentifier_list : identifier\n                           | identifier COMMA identifier_listidentifier : IDnewmode_statement : TYPE newmode_list SEMInewmode_list : mode_definition\n                        | mode_definition COMMA newmode_listmode_definition : identifier_list ASSIGN modeprocedure_statement : ID COLON procedure_definitionprocedure_definition : PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI\n                                | PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMIformal_parameter_list : formal_parameter\n                                 | formal_parameter COMMA formal_parameter_listformal_parameter : identifier_list mode LOC\n                            | identifier_list moderesult_spec : RETURNS LPAREN mode LOC RPAREN\n                       | RETURNS LPAREN mode RPARENmode : mode_name\n                | discrete_mode\n                | reference_mode\n                | composite_modemode_name : identifierdiscrete_mode : integer_mode\n                         | boolean_mode\n                         | character_mode\n                         | discrete_range_modediscrete_mode_name : identifierinteger_mode : INTboolean_mode : BOOLcharacter_mode : CHARdiscrete_range_mode : discrete_mode_name LPAREN literal_range RPAREN\n                               | discrete_mode LPAREN literal_range RPARENliteral_range : lower_bound COLON upper_boundlower_bound : expressionupper_bound : expressionreference_mode : REF modecomposite_mode : string_mode\n                          | array_modestring_mode : CHARS LBRACKET string_length RBRACKETstring_length : integer_literalarray_mode : ARRAY LBRACKET index_mode_list RBRACKET element_modeindex_mode_list : index_mode\n                           | index_mode COMMA index_mode_listindex_mode : discrete_mode\n                      | literal_rangeelement_mode : modelocation : identifier\n\t\t\t\t    | dereferenced_reference\n\t\t\t\t    | string_element\n\t\t\t\t    | string_slice\n\t\t\t\t    | array_element\n\t\t\t\t    | array_slicedereferenced_reference : array_location ARROWstring_element : identifier LBRACKET start_element LBRACKETstart_element : expressionstring_slice : identifier LBRACKET left_element COLON right_element RBRACKETleft_element : expressionright_element : expressionarray_element : array_location LBRACKET expression_list RBRACKETexpression_list : expression\n    \t\t\t\t\t   | expression COMMA expression_listarray_slice : array_location LBRACKET lower_bound COLON upper_bound RBRACKETarray_location : locationexpression : operand0\n                      | conditional_expressionparenthesized_expression : LPAREN expression RPARENconditional_expression : IF expression then_expression else_expression FI\n                                  | IF expression then_expression elsif_expression else_expression FIthen_expression : THEN expressionelse_expression : ELSE expressionelsif_expression : ELSIF expression then_expression\n                            | elsif_expression ELSIF expression then_expressionoperand0 : operand1\n                    | operand0 operator1 operand1operand1 : operand2\n                    | operand1 operator2 operand2operand2 : operand3\n                    | operand2 arithmetic_multiplicative_operator operand3operand3 : monadic_operator operand4\n                    | operand4operand4 : array_location\n                    | referenced_location\n                    | primitive_valuearithmetic_multiplicative_operator : TIMES\n                                              | DIVIDE\n                                              | MODULOmonadic_operator : MINUS\n                            | NOTreferenced_location : ARROW array_locationoperator1 : relational_operator\n                     | membership_operatoroperator2 : arithmetic_additive_operator\n                     | string_concatenation_operatorarithmetic_additive_operator : PLUS\n                                        | MINUSstring_concatenation_operator : CONCATrelational_operator : AND\n                               | OR\n                               | EQUAL\n                               | NOTEQ\n                               | GREATER\n                               | GTEQUAL\n                               | LESS\n                               | LTEQUALmembership_operator : INprimitive_value : literal\n                           | value_array_element\n                           | value_array_slice\n                           | parenthesized_expressionliteral : integer_literal\n                   | boolean_literal\n                   | character_literal\n                   | empty_literal\n                   | character_string_literalvalue_array_element : primitive_value LBRACKET expression_list RBRACKETvalue_array_slice : primitive_value LBRACKET expression COLON expression RBRACKETinteger_literal : ICONSTboolean_literal : TRUE\n                           | FALSEcharacter_literal : CCONSTempty_literal : NULLcharacter_string_literal : SCONSTaction_statement : identifier COLON action SEMI\n                            | action SEMIaction : bracketed_action\n                  | assignment_action\n                  | call_action\n                  | exit_action\n                  | result_action\n                  | return_actionbracketed_action : if_actionassignment_action : array_location assigning_operator expressionassigning_operator : closed_dyadic_operator ASSIGN\n                              | ASSIGNclosed_dyadic_operator : arithmetic_additive_operator\n                                  | arithmetic_multiplicative_operator\n                                  | string_concatenation_operatorif_action : IF expression then_clause else_clause FI\n                     | IF expression then_clausethen_clause : THEN action_statement_listelse_clause : ELSE action_statement_list\n                       | ELSIF expression then_clause else_clause\n                       | ELSIF expression then_clauseaction_statement_list : action_statement action_statement_nullableaction_statement_nullable : action_statement action_statement_nullable\n                                     | emptycall_action : procedure_call\n                       | builtin_callbuiltin_call : builtin_name LPAREN parameter_list RPAREN\n                        | builtin_name LPAREN RPARENbuiltin_name : ABS\n                        | ASC\n                        | NUM\n                        | UPPER\n                        | LOWER\n                        | LENGTH\n                        | READ\n                        | PRINTprocedure_call : ID LPAREN parameter_list RPAREN\n                          | ID LPAREN RPARENparameter_list : expression\n                          | expression COMMA parameter_listexit_action : EXIT label_idlabel_id : IDreturn_action : RETURN resultresult : expression\n                  | emptyresult_action : RESULT expressionempty :'
    
_lr_action_items = {'IN':([6,14,17,27,31,36,44,45,47,48,50,51,52,53,55,56,58,60,61,62,64,65,66,67,68,69,71,73,74,75,76,109,120,138,188,189,190,191,218,222,236,242,277,278,283,],[-68,-82,-67,-70,-71,-69,-129,-139,-92,-127,123,-94,-128,-138,-133,-99,-96,-137,-130,-100,-140,-102,-66,-136,-132,-141,-101,-23,-126,-125,-131,-72,-108,-98,-95,-93,-97,-85,-73,-78,-134,-66,-75,-81,-135,]),'CONCAT':([5,6,14,17,24,27,31,33,36,44,45,47,48,51,52,53,55,56,58,60,61,62,64,65,66,67,68,69,71,73,74,75,76,109,120,138,174,188,189,190,191,194,218,222,236,242,277,278,283,],[-23,-68,-82,-67,-66,-70,-71,101,-69,-129,-139,101,-127,-94,-128,-138,-133,-99,-96,-137,-130,-100,-140,-102,-66,-136,-132,-141,-101,-23,-126,-125,-131,-72,-108,-98,-23,-95,101,-97,-85,-23,-73,-78,-134,-66,-75,-81,-135,]),'CCONST':([3,19,41,46,54,57,63,72,81,86,96,101,103,105,107,108,110,111,112,114,117,118,119,121,122,123,124,125,126,127,128,129,130,131,132,133,137,167,181,186,196,200,201,203,205,209,214,217,221,223,227,228,235,262,269,270,],[45,45,45,45,45,-106,-107,45,45,45,45,-115,45,-153,-104,-114,-105,-103,-113,45,-111,45,-112,45,-121,-124,-119,-109,-117,-120,-123,-110,-116,-122,-118,45,45,45,-152,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'ID':([0,3,4,8,9,12,18,19,22,28,35,39,41,43,46,49,54,57,63,72,73,77,79,81,84,86,94,95,96,100,101,103,105,107,108,110,111,112,114,117,118,119,121,122,123,124,125,126,127,128,129,130,131,132,133,135,137,156,158,159,160,164,166,167,169,178,179,180,181,186,193,196,197,200,201,203,205,207,209,211,214,216,217,221,223,227,228,229,235,250,262,269,270,271,276,290,294,296,302,305,],[5,73,73,73,-8,-5,88,73,5,73,-9,-7,73,-6,73,73,73,-106,-107,73,-23,73,-21,73,73,73,5,174,73,-143,-115,73,-153,-104,-114,-105,-103,-113,73,-111,73,-112,73,-121,-124,-119,-109,-117,-120,-123,-110,-116,-122,-118,73,194,73,73,-15,73,73,-28,73,73,-10,73,73,-24,-152,73,194,73,194,73,73,73,73,-22,73,73,73,-142,73,73,73,73,73,194,73,73,73,73,73,73,73,5,73,5,-30,-29,]),'ASSIGN':([5,6,14,17,24,27,31,33,36,66,73,79,84,97,101,102,104,106,107,108,109,110,111,112,113,139,140,141,142,143,144,145,146,147,148,149,150,153,155,157,168,174,194,206,207,218,222,268,272,273,277,278,286,287,],[-23,-68,-82,-67,-66,-70,-71,105,-69,-66,-23,-21,167,178,-115,181,-156,-154,-104,-114,-72,-105,-103,-113,-155,-40,-48,-41,-44,-47,-37,-57,-38,201,-42,-45,-49,-43,-39,-56,214,-23,-23,-55,-22,-73,-78,-51,-58,-50,-75,-81,-60,-65,]),'DCL':([0,9,12,22,35,39,43,94,100,158,164,169,180,216,290,296,302,305,],[4,-8,-5,4,-9,-7,-6,4,-143,-15,-28,-10,-24,-142,4,4,-30,-29,]),'GREATER':([6,14,17,27,31,36,44,45,47,48,50,51,52,53,55,56,58,60,61,62,64,65,66,67,68,69,71,73,74,75,76,109,120,138,188,189,190,191,218,222,236,242,277,278,283,],[-68,-82,-67,-70,-71,-69,-129,-139,-92,-127,127,-94,-128,-138,-133,-99,-96,-137,-130,-100,-140,-102,-66,-136,-132,-141,-101,-23,-126,-125,-131,-72,-108,-98,-95,-93,-97,-85,-73,-78,-134,-66,-75,-81,-135,]),'ARROW':([3,5,6,14,17,19,24,27,31,33,36,41,46,54,57,62,63,66,72,73,81,86,96,101,103,105,107,108,109,110,111,112,114,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,137,167,174,181,186,194,196,200,201,203,205,209,214,217,218,221,222,223,227,228,235,242,262,269,270,277,278,],[49,-23,-68,-82,-67,49,-66,-70,-71,109,-69,49,49,49,-106,109,-107,-66,49,-23,49,49,49,-115,49,-153,-104,-114,-72,-105,-103,-113,49,-111,49,-112,109,49,-121,-124,-119,-109,-117,-120,-123,-110,-116,-122,-118,49,49,49,-23,-152,49,-23,49,49,49,49,49,49,49,49,-73,49,-78,49,49,49,49,-66,49,49,49,-75,-81,]),'LOWER':([0,9,12,22,35,39,43,94,95,100,135,158,164,169,180,193,197,216,229,290,296,302,305,],[7,-8,-5,7,-9,-7,-6,7,7,-143,7,-15,-28,-10,-24,7,7,-142,7,7,7,-30,-29,]),'SYN':([0,9,12,22,35,39,43,94,100,158,164,169,180,216,290,296,302,305,],[8,-8,-5,8,-9,-7,-6,8,-143,-15,-28,-10,-24,-142,8,8,-30,-29,]),'RBRACKET':([6,14,17,27,31,36,44,45,47,48,50,51,52,53,55,56,58,60,61,62,64,65,66,67,68,69,70,71,73,74,75,76,109,120,138,140,142,143,148,149,150,153,182,183,188,189,190,191,198,199,218,222,236,241,243,244,245,246,247,254,255,256,257,258,259,260,267,268,273,277,278,279,283,284,285,],[-68,-82,-67,-70,-71,-69,-129,-139,-92,-127,-83,-94,-128,-138,-133,-99,-96,-137,-130,-100,-140,-102,-66,-136,-132,-141,-84,-101,-23,-126,-125,-131,-72,-108,-98,-48,-44,-47,-42,-45,-49,-43,-79,222,-95,-93,-97,-85,-79,236,-73,-78,-134,-63,-64,-61,271,-59,272,-77,277,-79,-80,-54,278,-86,283,-51,-50,-75,-81,-87,-135,-52,-62,]),'IF':([0,3,9,12,19,22,35,39,41,43,46,54,81,86,94,95,96,100,103,105,114,135,137,158,164,167,169,180,181,186,193,196,197,200,201,203,205,209,214,216,217,221,223,227,228,229,235,262,269,270,290,296,302,305,],[3,46,-8,-5,46,3,-9,-7,46,-6,46,46,46,46,3,3,46,-143,46,-153,46,3,46,-15,-28,46,-10,-24,-152,46,3,46,3,46,46,46,46,46,46,-142,46,46,46,46,46,3,46,46,46,46,3,3,-30,-29,]),'MODULO':([5,6,14,17,24,27,31,33,36,44,45,48,51,52,53,55,56,58,60,61,62,64,65,66,67,68,69,71,73,74,75,76,109,120,138,174,188,190,191,194,218,222,236,242,277,278,283,],[-23,-68,-82,-67,-66,-70,-71,110,-69,-129,-139,-127,110,-128,-138,-133,-99,-96,-137,-130,-100,-140,-102,-66,-136,-132,-141,-101,-23,-126,-125,-131,-72,-108,-98,-23,110,-97,-85,-23,-73,-78,-134,-66,-75,-81,-135,]),'LOC':([73,139,140,141,142,143,144,145,146,148,149,150,153,155,157,206,268,272,273,274,286,287,297,],[-23,-40,-48,-41,-44,-47,-37,-57,-38,-42,-45,-49,-43,-39,-56,-55,-51,-58,-50,288,-60,-65,301,]),'FALSE':([3,19,41,46,54,57,63,72,81,86,96,101,103,105,107,108,110,111,112,114,117,118,119,121,122,123,124,125,126,127,128,129,130,131,132,133,137,167,181,186,196,200,201,203,205,209,214,217,221,223,227,228,235,262,269,270,],[53,53,53,53,53,-106,-107,53,53,53,53,-115,53,-153,-104,-114,-105,-103,-113,53,-111,53,-112,53,-121,-124,-119,-109,-117,-120,-123,-110,-116,-122,-118,53,53,53,-152,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'BOOL':([73,77,79,84,156,178,203,207,250,270,271,294,],[-23,140,-21,140,140,140,140,-22,140,140,140,140,]),'LPAREN':([1,3,5,7,10,16,19,26,29,30,34,37,41,46,54,57,63,72,73,81,86,96,101,103,105,107,108,110,111,112,114,117,118,119,121,122,123,124,125,126,127,128,129,130,131,132,133,137,140,141,142,143,146,148,149,150,153,154,165,167,174,181,186,194,196,200,201,203,205,209,214,217,221,223,227,228,235,241,242,262,268,269,270,273,289,],[-173,54,81,-174,86,-172,54,-176,-177,-171,-170,-175,54,54,54,-106,-107,54,-23,54,54,54,-115,54,-153,-104,-114,-105,-103,-113,54,-111,54,-112,54,-121,-124,-119,-109,-117,-120,-123,-110,-116,-122,-118,54,54,-48,-46,-44,-47,200,-42,-45,-49,-43,205,211,54,81,-152,54,81,54,54,54,54,54,54,54,54,54,54,54,54,54,200,-46,54,-51,54,54,-50,294,]),'CHAR':([73,77,79,84,156,178,203,207,250,270,271,294,],[-23,150,-21,150,150,150,150,-22,150,150,150,150,]),'PRINT':([0,9,12,22,35,39,43,94,95,100,135,158,164,169,180,193,197,216,229,290,296,302,305,],[29,-8,-5,29,-9,-7,-6,29,29,-143,29,-15,-28,-10,-24,29,29,-142,29,29,29,-30,-29,]),'AND':([6,14,17,27,31,36,44,45,47,48,50,51,52,53,55,56,58,60,61,62,64,65,66,67,68,69,71,73,74,75,76,109,120,138,188,189,190,191,218,222,236,242,277,278,283,],[-68,-82,-67,-70,-71,-69,-129,-139,-92,-127,130,-94,-128,-138,-133,-99,-96,-137,-130,-100,-140,-102,-66,-136,-132,-141,-101,-23,-126,-125,-131,-72,-108,-98,-95,-93,-97,-85,-73,-78,-134,-66,-75,-81,-135,]),'THEN':([6,14,17,27,31,36,44,45,47,48,50,51,52,53,55,56,58,59,60,61,62,64,65,66,67,68,69,70,71,73,74,75,76,109,116,120,138,188,189,190,191,218,222,233,236,260,263,277,278,279,280,283,],[-68,-82,-67,-70,-71,-69,-129,-139,-92,-127,-83,-94,-128,-138,-133,-99,-96,135,-137,-130,-100,-140,-102,-66,-136,-132,-141,-84,-101,-23,-126,-125,-131,-72,186,-108,-98,-95,-93,-97,-85,-73,-78,135,-134,-86,186,-75,-81,-87,186,-135,]),'UPPER':([0,9,12,22,35,39,43,94,95,100,135,158,164,169,180,193,197,216,229,290,296,302,305,],[1,-8,-5,1,-9,-7,-6,1,1,-143,1,-15,-28,-10,-24,1,1,-142,1,1,1,-30,-29,]),'EXIT':([0,9,12,22,35,39,43,94,95,100,135,158,164,169,180,193,197,216,229,290,296,302,305,],[18,-8,-5,18,-9,-7,-6,18,18,-143,18,-15,-28,-10,-24,18,18,-142,18,18,18,-30,-29,]),'SCONST':([3,19,41,46,54,57,63,72,81,86,96,101,103,105,107,108,110,111,112,114,117,118,119,121,122,123,124,125,126,127,128,129,130,131,132,133,137,167,181,186,196,200,201,203,205,209,214,217,221,223,227,228,235,262,269,270,],[69,69,69,69,69,-106,-107,69,69,69,69,-115,69,-153,-104,-114,-105,-103,-113,69,-111,69,-112,69,-121,-124,-119,-109,-117,-120,-123,-110,-116,-122,-118,69,69,69,-152,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'RETURN':([0,9,12,22,35,39,43,94,95,100,135,158,164,169,180,193,197,216,229,290,296,302,305,],[19,-8,-5,19,-9,-7,-6,19,19,-143,19,-15,-28,-10,-24,19,19,-142,19,19,19,-30,-29,]),'TRUE':([3,19,41,46,54,57,63,72,81,86,96,101,103,105,107,108,110,111,112,114,117,118,119,121,122,123,124,125,126,127,128,129,130,131,132,133,137,167,181,186,196,200,201,203,205,209,214,217,221,223,227,228,235,262,269,270,],[60,60,60,60,60,-106,-107,60,60,60,60,-115,60,-153,-104,-114,-105,-103,-113,60,-111,60,-112,60,-121,-124,-119,-109,-117,-120,-123,-110,-116,-122,-118,60,60,60,-152,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'TYPE':([0,9,12,22,35,39,43,94,100,158,164,169,180,216,290,296,302,305,],[28,-8,-5,28,-9,-7,-6,28,-143,-15,-28,-10,-24,-142,28,28,-30,-29,]),'REF':([73,77,79,84,156,178,207,250,271,294,],[-23,156,-21,156,156,156,-22,156,156,156,]),'PLUS':([5,6,14,17,24,27,31,33,36,44,45,47,48,51,52,53,55,56,58,60,61,62,64,65,66,67,68,69,71,73,74,75,76,109,120,138,174,188,189,190,191,194,218,222,236,242,277,278,283,],[-23,-68,-82,-67,-66,-70,-71,112,-69,-129,-139,112,-127,-94,-128,-138,-133,-99,-96,-137,-130,-100,-140,-102,-66,-136,-132,-141,-101,-23,-126,-125,-131,-72,-108,-98,-23,-95,112,-97,-85,-23,-73,-78,-134,-66,-75,-81,-135,]),'NOT':([3,19,41,46,54,81,86,96,101,103,105,107,108,110,111,112,114,117,118,119,121,122,123,124,125,126,127,128,129,130,131,132,133,137,167,181,186,196,200,201,203,205,209,214,217,221,223,227,228,235,262,269,270,],[63,63,63,63,63,63,63,63,-115,63,-153,-104,-114,-105,-103,-113,63,-111,63,-112,63,-121,-124,-119,-109,-117,-120,-123,-110,-116,-122,-118,63,63,63,-152,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'NULL':([3,19,41,46,54,57,63,72,81,86,96,101,103,105,107,108,110,111,112,114,117,118,119,121,122,123,124,125,126,127,128,129,130,131,132,133,137,167,181,186,196,200,201,203,205,209,214,217,221,223,227,228,235,262,269,270,],[64,64,64,64,64,-106,-107,64,64,64,64,-115,64,-153,-104,-114,-105,-103,-113,64,-111,64,-112,64,-121,-124,-119,-109,-117,-120,-123,-110,-116,-122,-118,64,64,64,-152,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'EQUAL':([6,14,17,27,31,36,44,45,47,48,50,51,52,53,55,56,58,60,61,62,64,65,66,67,68,69,71,73,74,75,76,109,120,138,188,189,190,191,218,222,236,242,277,278,283,],[-68,-82,-67,-70,-71,-69,-129,-139,-92,-127,132,-94,-128,-138,-133,-99,-96,-137,-130,-100,-140,-102,-66,-136,-132,-141,-101,-23,-126,-125,-131,-72,-108,-98,-95,-93,-97,-85,-73,-78,-134,-66,-75,-81,-135,]),'RPAREN':([6,14,17,27,31,36,44,45,47,48,50,51,52,53,55,56,58,60,61,62,64,65,66,67,68,69,70,71,73,74,75,76,81,86,109,120,134,138,139,140,141,142,143,144,145,146,148,149,150,153,155,157,161,163,171,188,189,190,191,206,218,222,236,237,248,249,251,252,258,260,268,272,273,274,277,278,279,283,284,286,287,288,292,297,301,],[-68,-82,-67,-70,-71,-69,-129,-139,-92,-127,-83,-94,-128,-138,-133,-99,-96,-137,-130,-100,-140,-102,-66,-136,-132,-141,-84,-101,-23,-126,-125,-131,162,170,-72,-108,191,-98,-40,-48,-41,-44,-47,-37,-57,-38,-42,-45,-49,-43,-39,-56,-180,210,215,-95,-93,-97,-85,-55,-73,-78,-134,268,273,-181,275,-31,-54,-86,-51,-58,-50,-34,-75,-81,-87,-135,-52,-60,-65,-33,-32,300,304,]),'ARRAY':([73,77,79,84,156,178,207,250,271,294,],[-23,151,-21,151,151,151,-22,151,151,151,]),'NOTEQ':([6,14,17,27,31,36,44,45,47,48,50,51,52,53,55,56,58,60,61,62,64,65,66,67,68,69,71,73,74,75,76,109,120,138,188,189,190,191,218,222,236,242,277,278,283,],[-68,-82,-67,-70,-71,-69,-129,-139,-92,-127,124,-94,-128,-138,-133,-99,-96,-137,-130,-100,-140,-102,-66,-136,-132,-141,-101,-23,-126,-125,-131,-72,-108,-98,-95,-93,-97,-85,-73,-78,-134,-66,-75,-81,-135,]),'DIVIDE':([5,6,14,17,24,27,31,33,36,44,45,48,51,52,53,55,56,58,60,61,62,64,65,66,67,68,69,71,73,74,75,76,109,120,138,174,188,190,191,194,218,222,236,242,277,278,283,],[-23,-68,-82,-67,-66,-70,-71,107,-69,-129,-139,-127,107,-128,-138,-133,-99,-96,-137,-130,-100,-140,-102,-66,-136,-132,-141,-101,-23,-126,-125,-131,-72,-108,-98,-23,107,-97,-85,-23,-73,-78,-134,-66,-75,-81,-135,]),'PROC':([82,],[165,]),'INT':([73,77,79,84,156,178,203,207,250,270,271,294,],[-23,143,-21,143,143,143,143,-22,143,143,143,143,]),'FI':([6,14,17,27,31,36,44,45,47,48,50,51,52,53,55,56,58,60,61,62,64,65,66,67,68,69,70,71,73,74,75,76,100,109,120,138,188,189,190,191,192,193,195,216,218,222,225,229,230,231,234,236,260,261,264,265,266,277,278,279,282,283,],[-68,-82,-67,-70,-71,-69,-129,-139,-92,-127,-83,-94,-128,-138,-133,-99,-96,-137,-130,-100,-140,-102,-66,-136,-132,-141,-84,-101,-23,-126,-125,-131,-143,-72,-108,-98,-95,-93,-97,-85,-159,-188,232,-142,-73,-78,260,-188,-165,-163,-160,-134,-86,279,-89,-164,-162,-75,-81,-87,-161,-135,]),'ICONST':([3,19,41,46,54,57,63,72,81,86,96,101,103,105,107,108,110,111,112,114,117,118,119,121,122,123,124,125,126,127,128,129,130,131,132,133,137,167,181,186,196,200,201,203,204,205,209,214,217,221,223,227,228,235,262,269,270,],[67,67,67,67,67,-106,-107,67,67,67,67,-115,67,-153,-104,-114,-105,-103,-113,67,-111,67,-112,67,-121,-124,-119,-109,-117,-120,-123,-110,-116,-122,-118,67,67,67,-152,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'ABS':([0,9,12,22,35,39,43,94,95,100,135,158,164,169,180,193,197,216,229,290,296,302,305,],[34,-8,-5,34,-9,-7,-6,34,34,-143,34,-15,-28,-10,-24,34,34,-142,34,34,34,-30,-29,]),'CHARS':([73,77,79,84,156,178,207,250,271,294,],[-23,152,-21,152,152,152,-22,152,152,152,]),'$end':([9,12,21,22,25,35,39,43,92,93,94,100,158,164,169,172,180,216,302,305,],[-8,-5,-1,-188,0,-9,-7,-6,-4,-2,-188,-143,-15,-28,-10,-3,-24,-142,-30,-29,]),'SEMI':([2,6,11,13,14,15,17,19,20,23,27,31,32,36,38,40,42,44,45,47,48,50,51,52,53,55,56,58,60,61,62,64,65,66,67,68,69,70,71,73,74,75,76,78,80,83,85,87,88,89,90,91,98,99,100,109,115,120,136,138,139,140,141,142,143,144,145,146,147,148,149,150,153,155,157,162,170,173,185,188,189,190,191,192,193,202,206,208,210,212,213,215,216,218,219,220,222,229,230,231,232,236,240,253,260,265,268,272,273,275,277,278,279,283,286,287,291,298,300,303,304,],[-167,-68,-145,-150,-82,-147,-67,-188,-166,-146,-70,-71,100,-69,-149,-148,-144,-129,-139,-92,-127,-83,-94,-128,-138,-133,-99,-96,-137,-130,-100,-140,-102,-66,-136,-132,-141,-84,-101,-23,-126,-125,-131,158,-16,-11,169,-182,-183,-185,-186,-184,-25,180,-143,-72,-187,-108,-158,-98,-40,-48,-41,-44,-47,-37,-57,-38,-19,-42,-45,-49,-43,-39,-56,-179,-169,216,-151,-95,-93,-97,-85,-159,-188,-18,-55,-17,-178,-12,-14,-168,-142,-73,-27,-26,-78,-188,-165,-163,-157,-134,-20,-13,-86,-164,-51,-58,-50,290,-75,-81,-87,-135,-60,-65,296,302,-36,305,-35,]),'ASC':([0,9,12,22,35,39,43,94,95,100,135,158,164,169,180,193,197,216,229,290,296,302,305,],[30,-8,-5,30,-9,-7,-6,30,30,-143,30,-15,-28,-10,-24,30,30,-142,30,30,30,-30,-29,]),'RETURNS':([275,],[289,]),'READ':([0,9,12,22,35,39,43,94,95,100,135,158,164,169,180,193,197,216,229,290,296,302,305,],[26,-8,-5,26,-9,-7,-6,26,26,-143,26,-15,-28,-10,-24,26,26,-142,26,26,26,-30,-29,]),'GTEQUAL':([6,14,17,27,31,36,44,45,47,48,50,51,52,53,55,56,58,60,61,62,64,65,66,67,68,69,71,73,74,75,76,109,120,138,188,189,190,191,218,222,236,242,277,278,283,],[-68,-82,-67,-70,-71,-69,-129,-139,-92,-127,122,-94,-128,-138,-133,-99,-96,-137,-130,-100,-140,-102,-66,-136,-132,-141,-101,-23,-126,-125,-131,-72,-108,-98,-95,-93,-97,-85,-73,-78,-134,-66,-75,-81,-135,]),'MINUS':([3,5,6,14,17,19,24,27,31,33,36,41,44,45,46,47,48,51,52,53,54,55,56,58,60,61,62,64,65,66,67,68,69,71,73,74,75,76,81,86,96,101,103,105,107,108,109,110,111,112,114,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,137,138,167,174,181,186,188,189,190,191,194,196,200,201,203,205,209,214,217,218,221,222,223,227,228,235,236,242,262,269,270,277,278,283,],[57,-23,-68,-82,-67,57,-66,-70,-71,108,-69,57,-129,-139,57,108,-127,-94,-128,-138,57,-133,-99,-96,-137,-130,-100,-140,-102,-66,-136,-132,-141,-101,-23,-126,-125,-131,57,57,57,-115,57,-153,-104,-114,-72,-105,-103,-113,57,-111,57,-112,-108,57,-121,-124,-119,-109,-117,-120,-123,-110,-116,-122,-118,57,57,-98,57,-23,-152,57,-95,108,-97,-85,-23,57,57,57,57,57,57,57,57,-73,57,-78,57,57,57,57,-134,-66,57,57,57,-75,-81,-135,]),'LBRACKET':([5,6,14,17,24,27,31,33,36,44,45,47,48,50,51,52,53,55,56,58,60,61,62,64,65,66,67,68,69,70,71,73,74,75,76,109,120,138,151,152,174,175,177,188,189,190,191,194,218,222,236,242,260,277,278,279,283,],[-23,-68,-82,-67,96,-70,-71,103,-69,-129,-139,-92,-127,-83,-94,-128,-138,-133,-99,-96,-137,-130,103,-140,137,96,-136,-132,-141,-84,-101,-23,-126,-125,-131,-72,103,-98,203,204,-23,-74,218,-95,-93,-97,-85,-23,-73,-78,-134,96,-86,-75,-81,-87,-135,]),'OR':([6,14,17,27,31,36,44,45,47,48,50,51,52,53,55,56,58,60,61,62,64,65,66,67,68,69,71,73,74,75,76,109,120,138,188,189,190,191,218,222,236,242,277,278,283,],[-68,-82,-67,-70,-71,-69,-129,-139,-92,-127,126,-94,-128,-138,-133,-99,-96,-137,-130,-100,-140,-102,-66,-136,-132,-141,-101,-23,-126,-125,-131,-72,-108,-98,-95,-93,-97,-85,-73,-78,-134,-66,-75,-81,-135,]),'NUM':([0,9,12,22,35,39,43,94,95,100,135,158,164,169,180,193,197,216,229,290,296,302,305,],[16,-8,-5,16,-9,-7,-6,16,16,-143,16,-15,-28,-10,-24,16,16,-142,16,16,16,-30,-29,]),'LENGTH':([0,9,12,22,35,39,43,94,95,100,135,158,164,169,180,193,197,216,229,290,296,302,305,],[37,-8,-5,37,-9,-7,-6,37,37,-143,37,-15,-28,-10,-24,37,37,-142,37,37,37,-30,-29,]),'ELSE':([6,14,17,27,31,36,44,45,47,48,50,51,52,53,55,56,58,60,61,62,64,65,66,67,68,69,70,71,73,74,75,76,100,109,120,136,138,187,188,189,190,191,192,193,216,218,222,224,226,229,230,231,236,260,265,266,277,278,279,281,283,293,],[-68,-82,-67,-70,-71,-69,-129,-139,-92,-127,-83,-94,-128,-138,-133,-99,-96,-137,-130,-100,-140,-102,-66,-136,-132,-141,-84,-101,-23,-126,-125,-131,-143,-72,-108,197,-98,228,-95,-93,-97,-85,-159,-188,-142,-73,-78,-88,228,-188,-165,-163,-134,-86,-164,197,-75,-81,-87,-90,-135,-91,]),'COMMA':([6,14,17,27,31,36,44,45,47,48,50,51,52,53,55,56,58,60,61,62,64,65,66,67,68,69,70,71,73,74,75,76,79,80,83,98,109,120,138,139,140,141,142,143,144,145,146,147,148,149,150,153,155,157,161,182,188,189,190,191,198,202,206,213,218,219,222,236,240,241,243,244,252,253,256,258,260,268,272,273,274,277,278,279,283,284,286,287,288,],[-68,-82,-67,-70,-71,-69,-129,-139,-92,-127,-83,-94,-128,-138,-133,-99,-96,-137,-130,-100,-140,-102,-66,-136,-132,-141,-84,-101,-23,-126,-125,-131,159,160,166,179,-72,-108,-98,-40,-48,-41,-44,-47,-37,-57,-38,-19,-42,-45,-49,-43,-39,-56,209,221,-95,-93,-97,-85,221,-18,-55,-14,-73,-27,-78,-134,-20,-63,-64,270,276,-13,221,-54,-86,-51,-58,-50,-34,-75,-81,-87,-135,-52,-60,-65,-33,]),'LTEQUAL':([6,14,17,27,31,36,44,45,47,48,50,51,52,53,55,56,58,60,61,62,64,65,66,67,68,69,71,73,74,75,76,109,120,138,188,189,190,191,218,222,236,242,277,278,283,],[-68,-82,-67,-70,-71,-69,-129,-139,-92,-127,128,-94,-128,-138,-133,-99,-96,-137,-130,-100,-140,-102,-66,-136,-132,-141,-101,-23,-126,-125,-131,-72,-108,-98,-95,-93,-97,-85,-73,-78,-134,-66,-75,-81,-135,]),'TIMES':([5,6,14,17,24,27,31,33,36,44,45,48,51,52,53,55,56,58,60,61,62,64,65,66,67,68,69,71,73,74,75,76,109,120,138,174,188,190,191,194,218,222,236,242,277,278,283,],[-23,-68,-82,-67,-66,-70,-71,111,-69,-129,-139,-127,111,-128,-138,-133,-99,-96,-137,-130,-100,-140,-102,-66,-136,-132,-141,-101,-23,-126,-125,-131,-72,-108,-98,-23,111,-97,-85,-23,-73,-78,-134,-66,-75,-81,-135,]),'RESULT':([0,9,12,22,35,39,43,94,95,100,135,158,164,169,180,193,197,216,229,290,296,302,305,],[41,-8,-5,41,-9,-7,-6,41,41,-143,41,-15,-28,-10,-24,41,41,-142,41,41,41,-30,-29,]),'END':([9,12,35,39,43,92,94,100,158,164,169,172,180,216,290,295,296,299,302,305,],[-8,-5,-9,-7,-6,-4,-188,-143,-15,-28,-10,-3,-24,-142,-188,298,-188,303,-30,-29,]),'COLON':([5,6,14,17,24,27,31,36,44,45,47,48,50,51,52,53,55,56,58,60,61,62,64,65,66,67,68,69,70,71,73,74,75,76,109,120,138,175,176,182,184,188,189,190,191,194,198,218,222,236,238,239,242,260,277,278,279,283,],[82,-68,-82,-67,95,-70,-71,-69,-129,-139,-92,-127,-83,-94,-128,-138,-133,-99,-96,-137,-130,-100,-140,-102,-66,-136,-132,-141,-84,-101,-23,-126,-125,-131,-72,-108,-98,-76,217,-53,223,-95,-93,-97,-85,-23,235,-73,-78,-134,-53,269,-66,-86,-75,-81,-87,-135,]),'ELSIF':([6,14,17,27,31,36,44,45,47,48,50,51,52,53,55,56,58,60,61,62,64,65,66,67,68,69,70,71,73,74,75,76,100,109,120,136,138,187,188,189,190,191,192,193,216,218,222,224,226,229,230,231,236,260,265,266,277,278,279,281,283,293,],[-68,-82,-67,-70,-71,-69,-129,-139,-92,-127,-83,-94,-128,-138,-133,-99,-96,-137,-130,-100,-140,-102,-66,-136,-132,-141,-84,-101,-23,-126,-125,-131,-143,-72,-108,196,-98,227,-95,-93,-97,-85,-159,-188,-142,-73,-78,-88,262,-188,-165,-163,-134,-86,-164,196,-75,-81,-87,-90,-135,-91,]),'LESS':([6,14,17,27,31,36,44,45,47,48,50,51,52,53,55,56,58,60,61,62,64,65,66,67,68,69,71,73,74,75,76,109,120,138,188,189,190,191,218,222,236,242,277,278,283,],[-68,-82,-67,-70,-71,-69,-129,-139,-92,-127,131,-94,-128,-138,-133,-99,-96,-137,-130,-100,-140,-102,-66,-136,-132,-141,-101,-23,-126,-125,-131,-72,-108,-98,-95,-93,-97,-85,-73,-78,-134,-66,-75,-81,-135,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'integer_literal':([3,19,41,46,54,72,81,86,96,103,114,118,121,133,137,167,186,196,200,201,203,204,205,209,214,217,221,223,227,228,235,262,269,270,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,246,44,44,44,44,44,44,44,44,44,44,44,44,]),'then_expression':([116,263,280,],[187,281,293,]),'mode_name':([77,84,156,178,250,271,294,],[144,144,144,144,144,144,144,]),'string_element':([0,3,19,22,41,46,49,54,72,81,86,94,95,96,103,114,118,121,133,135,137,167,186,193,196,197,200,201,203,205,209,214,217,221,223,227,228,229,235,262,269,270,290,296,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'mode':([77,84,156,178,250,271,294,],[147,168,206,219,274,287,297,]),'string_mode':([77,84,156,178,250,271,294,],[157,157,157,157,157,157,157,]),'parenthesized_expression':([3,19,41,46,54,72,81,86,96,103,114,118,121,133,137,167,186,196,200,201,203,205,209,214,217,221,223,227,228,235,262,269,270,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'membership_operator':([50,],[129,]),'formal_parameter':([211,276,],[252,252,]),'empty':([19,22,94,193,229,290,296,],[90,92,92,230,230,92,92,]),'assignment_action':([0,22,94,95,135,193,197,229,290,296,],[11,11,11,11,11,11,11,11,11,11,]),'if_action':([0,22,94,95,135,193,197,229,290,296,],[13,13,13,13,13,13,13,13,13,13,]),'arithmetic_additive_operator':([33,47,189,],[106,117,117,]),'action_statement_nullable':([193,229,],[231,265,]),'operand4':([3,19,41,46,54,72,81,86,96,103,114,118,121,133,137,167,186,196,200,201,203,205,209,214,217,221,223,227,228,235,262,269,270,],[56,56,56,56,56,138,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'exit_action':([0,22,94,95,135,193,197,229,290,296,],[15,15,15,15,15,15,15,15,15,15,]),'action_statement_list':([135,197,],[192,234,]),'reference_mode':([77,84,156,178,250,271,294,],[155,155,155,155,155,155,155,]),'literal_range':([200,203,205,270,],[237,243,248,243,]),'conditional_expression':([3,19,41,46,54,81,86,96,103,114,137,167,186,196,200,201,203,205,209,214,217,221,223,227,228,235,262,269,270,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'array_location':([0,3,19,22,41,46,49,54,72,81,86,94,95,96,103,114,118,121,133,135,137,167,186,193,196,197,200,201,203,205,209,214,217,221,223,227,228,229,235,262,269,270,290,296,],[33,62,62,33,62,62,120,62,62,62,62,33,33,62,62,62,62,62,62,33,62,62,62,33,62,33,62,62,62,62,62,62,62,62,62,62,62,33,62,62,62,62,33,33,]),'primitive_value':([3,19,41,46,54,72,81,86,96,103,114,118,121,133,137,167,186,196,200,201,203,205,209,214,217,221,223,227,228,235,262,269,270,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'procedure_definition':([82,],[164,]),'expression_list':([103,137,221,],[183,199,257,]),'index_mode_list':([203,270,],[245,285,]),'program':([0,],[25,]),'else_clause':([136,266,],[195,282,]),'array_element':([0,3,19,22,41,46,49,54,72,81,86,94,95,96,103,114,118,121,133,135,137,167,186,193,196,197,200,201,203,205,209,214,217,221,223,227,228,229,235,262,269,270,290,296,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'result_spec':([275,],[291,]),'synonym_definition':([8,166,],[83,83,]),'upper_bound':([223,269,],[259,284,]),'else_expression':([187,226,],[225,261,]),'empty_literal':([3,19,41,46,54,72,81,86,96,103,114,118,121,133,137,167,186,196,200,201,203,205,209,214,217,221,223,227,228,235,262,269,270,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'integer_mode':([77,84,156,178,203,250,270,271,294,],[148,148,148,148,148,148,148,148,148,]),'then_clause':([59,233,],[136,266,]),'procedure_statement':([0,22,94,290,296,],[35,35,35,35,35,]),'array_slice':([0,3,19,22,41,46,49,54,72,81,86,94,95,96,103,114,118,121,133,135,137,167,186,193,196,197,200,201,203,205,209,214,217,221,223,227,228,229,235,262,269,270,290,296,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'relational_operator':([50,],[125,]),'boolean_mode':([77,84,156,178,203,250,270,271,294,],[153,153,153,153,153,153,153,153,153,]),'operator2':([47,189,],[118,118,]),'operand0':([3,19,41,46,54,81,86,96,103,114,137,167,186,196,200,201,203,205,209,214,217,221,223,227,228,235,262,269,270,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'result':([19,],[91,]),'newmode_list':([28,179,],[99,220,]),'value_array_element':([3,19,41,46,54,72,81,86,96,103,114,118,121,133,137,167,186,196,200,201,203,205,209,214,217,221,223,227,228,235,262,269,270,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'right_element':([217,],[255,]),'newmode_statement':([0,22,94,290,296,],[39,39,39,39,39,]),'result_action':([0,22,94,95,135,193,197,229,290,296,],[40,40,40,40,40,40,40,40,40,40,]),'arithmetic_multiplicative_operator':([33,51,188,],[113,133,133,]),'character_literal':([3,19,41,46,54,72,81,86,96,103,114,118,121,133,137,167,186,196,200,201,203,205,209,214,217,221,223,227,228,235,262,269,270,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'string_concatenation_operator':([33,47,189,],[104,119,119,]),'bracketed_action':([0,22,94,95,135,193,197,229,290,296,],[42,42,42,42,42,42,42,42,42,42,]),'identifier_list':([4,8,28,159,160,166,179,211,276,],[77,84,97,207,77,84,97,250,250,]),'builtin_call':([0,22,94,95,135,193,197,229,290,296,],[2,2,2,2,2,2,2,2,2,2,]),'statement_list':([0,],[21,]),'closed_dyadic_operator':([33,],[102,]),'action_statement':([0,22,94,135,193,197,229,290,296,],[9,9,9,193,229,193,229,9,9,]),'operand1':([3,19,41,46,54,81,86,96,103,114,121,137,167,186,196,200,201,203,205,209,214,217,221,223,227,228,235,262,269,270,],[47,47,47,47,47,47,47,47,47,47,189,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'value_array_slice':([3,19,41,46,54,72,81,86,96,103,114,118,121,133,137,167,186,196,200,201,203,205,209,214,217,221,223,227,228,235,262,269,270,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'array_mode':([77,84,156,178,250,271,294,],[145,145,145,145,145,145,145,]),'discrete_mode':([77,84,156,178,203,250,270,271,294,],[146,146,146,146,241,146,241,146,146,]),'index_mode':([203,270,],[244,244,]),'discrete_range_mode':([77,84,156,178,203,250,270,271,294,],[149,149,149,149,149,149,149,149,149,]),'operand2':([3,19,41,46,54,81,86,96,103,114,118,121,137,167,186,196,200,201,203,205,209,214,217,221,223,227,228,235,262,269,270,],[51,51,51,51,51,51,51,51,51,51,188,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'dereferenced_reference':([0,3,19,22,41,46,49,54,72,81,86,94,95,96,103,114,118,121,133,135,137,167,186,193,196,197,200,201,203,205,209,214,217,221,223,227,228,229,235,262,269,270,290,296,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'declaration_statement':([0,22,94,290,296,],[12,12,12,12,12,]),'character_string_literal':([3,19,41,46,54,72,81,86,96,103,114,118,121,133,137,167,186,196,200,201,203,205,209,214,217,221,223,227,228,235,262,269,270,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'location':([0,3,19,22,41,46,49,54,72,81,86,94,95,96,103,114,118,121,133,135,137,167,186,193,196,197,200,201,203,205,209,214,217,221,223,227,228,229,235,262,269,270,290,296,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'operand3':([3,19,41,46,54,81,86,96,103,114,118,121,133,137,167,186,196,200,201,203,205,209,214,217,221,223,227,228,235,262,269,270,],[58,58,58,58,58,58,58,58,58,58,58,58,190,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'expression':([3,19,41,46,54,81,86,96,103,114,137,167,186,196,200,201,203,205,209,214,217,221,223,227,228,235,262,269,270,],[59,89,115,116,134,161,161,175,182,185,198,213,224,233,238,240,238,238,161,253,254,256,258,263,264,267,280,258,238,]),'mode_definition':([28,179,],[98,98,]),'boolean_literal':([3,19,41,46,54,72,81,86,96,103,114,118,121,133,137,167,186,196,200,201,203,205,209,214,217,221,223,227,228,235,262,269,270,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'procedure_call':([0,22,94,95,135,193,197,229,290,296,],[20,20,20,20,20,20,20,20,20,20,]),'string_length':([204,],[247,]),'statement_nullable':([22,94,290,296,],[93,172,295,299,]),'composite_mode':([77,84,156,178,250,271,294,],[139,139,139,139,139,139,139,]),'statement':([0,22,94,290,296,],[22,94,94,94,94,]),'formal_parameter_list':([211,276,],[251,292,]),'call_action':([0,22,94,95,135,193,197,229,290,296,],[23,23,23,23,23,23,23,23,23,23,]),'identifier':([0,3,4,8,19,22,28,41,46,49,54,72,77,81,84,86,94,95,96,103,114,118,121,133,135,137,156,159,160,166,167,178,179,186,193,196,197,200,201,203,205,209,211,214,217,221,223,227,228,229,235,250,262,269,270,271,276,290,294,296,],[24,66,79,79,66,24,79,66,66,66,66,66,141,66,141,66,24,66,66,66,66,66,66,66,24,66,141,79,79,79,66,141,79,66,24,66,24,66,66,242,66,66,79,66,66,66,66,66,66,24,66,141,66,66,242,141,79,24,141,24,]),'operator1':([50,],[121,]),'character_mode':([77,84,156,178,203,250,270,271,294,],[142,142,142,142,142,142,142,142,142,]),'synonym_list':([8,166,],[85,212,]),'initialization':([147,],[202,]),'parameter_list':([81,86,209,],[163,171,249,]),'left_element':([96,],[176,]),'label_id':([18,],[87,]),'declaration_list':([4,160,],[78,208,]),'lower_bound':([103,200,203,205,270,],[184,239,239,239,239,]),'start_element':([96,],[177,]),'element_mode':([271,],[286,]),'action':([0,22,94,95,135,193,197,229,290,296,],[32,32,32,173,32,32,32,32,32,32,]),'referenced_location':([3,19,41,46,54,72,81,86,96,103,114,118,121,133,137,167,186,196,200,201,203,205,209,214,217,221,223,227,228,235,262,269,270,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'elsif_expression':([187,],[226,]),'declaration':([4,160,],[80,80,]),'monadic_operator':([3,19,41,46,54,81,86,96,103,114,118,121,133,137,167,186,196,200,201,203,205,209,214,217,221,223,227,228,235,262,269,270,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'string_slice':([0,3,19,22,41,46,49,54,72,81,86,94,95,96,103,114,118,121,133,135,137,167,186,193,196,197,200,201,203,205,209,214,217,221,223,227,228,229,235,262,269,270,290,296,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'discrete_mode_name':([77,84,156,178,203,250,270,271,294,],[154,154,154,154,154,154,154,154,154,]),'builtin_name':([0,22,94,95,135,193,197,229,290,296,],[10,10,10,10,10,10,10,10,10,10,]),'return_action':([0,22,94,95,135,193,197,229,290,296,],[38,38,38,38,38,38,38,38,38,38,]),'synonym_statement':([0,22,94,290,296,],[43,43,43,43,43,]),'assigning_operator':([33,],[114,]),'literal':([3,19,41,46,54,72,81,86,96,103,114,118,121,133,137,167,186,196,200,201,203,205,209,214,217,221,223,227,228,235,262,269,270,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','Parser.py',58),
  ('statement_list -> statement statement_nullable','statement_list',2,'p_statement_list','Parser.py',62),
  ('statement_nullable -> statement statement_nullable','statement_nullable',2,'p_statement_nullable','Parser.py',73),
  ('statement_nullable -> empty','statement_nullable',1,'p_statement_nullable','Parser.py',74),
  ('statement -> declaration_statement','statement',1,'p_statement','Parser.py',85),
  ('statement -> synonym_statement','statement',1,'p_statement','Parser.py',86),
  ('statement -> newmode_statement','statement',1,'p_statement','Parser.py',87),
  ('statement -> action_statement','statement',1,'p_statement','Parser.py',88),
  ('statement -> procedure_statement','statement',1,'p_statement','Parser.py',89),
  ('synonym_statement -> SYN synonym_list SEMI','synonym_statement',3,'p_synonym_statement','Parser.py',98),
  ('synonym_list -> synonym_definition','synonym_list',1,'p_synonym_list','Parser.py',102),
  ('synonym_list -> synonym_definition COMMA synonym_list','synonym_list',3,'p_synonym_list','Parser.py',103),
  ('synonym_definition -> identifier_list mode ASSIGN expression','synonym_definition',4,'p_synonym_definition','Parser.py',112),
  ('synonym_definition -> identifier_list ASSIGN expression','synonym_definition',3,'p_synonym_definition','Parser.py',113),
  ('declaration_statement -> DCL declaration_list SEMI','declaration_statement',3,'p_declaration_statement','Parser.py',127),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','Parser.py',131),
  ('declaration_list -> declaration COMMA declaration_list','declaration_list',3,'p_declaration_list','Parser.py',132),
  ('declaration -> identifier_list mode initialization','declaration',3,'p_declaration','Parser.py',140),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','Parser.py',141),
  ('initialization -> ASSIGN expression','initialization',2,'p_initialization','Parser.py',145),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','Parser.py',149),
  ('identifier_list -> identifier COMMA identifier_list','identifier_list',3,'p_identifier_list','Parser.py',150),
  ('identifier -> ID','identifier',1,'p_identifier','Parser.py',158),
  ('newmode_statement -> TYPE newmode_list SEMI','newmode_statement',3,'p_newmode_statement','Parser.py',169),
  ('newmode_list -> mode_definition','newmode_list',1,'p_newmode_list','Parser.py',173),
  ('newmode_list -> mode_definition COMMA newmode_list','newmode_list',3,'p_newmode_list','Parser.py',174),
  ('mode_definition -> identifier_list ASSIGN mode','mode_definition',3,'p_mode_definition','Parser.py',182),
  ('procedure_statement -> ID COLON procedure_definition','procedure_statement',3,'p_procedure_statement','Parser.py',193),
  ('procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI','procedure_definition',9,'p_procedure_definition','Parser.py',197),
  ('procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI','procedure_definition',8,'p_procedure_definition','Parser.py',198),
  ('formal_parameter_list -> formal_parameter','formal_parameter_list',1,'p_formal_parameter_list','Parser.py',202),
  ('formal_parameter_list -> formal_parameter COMMA formal_parameter_list','formal_parameter_list',3,'p_formal_parameter_list','Parser.py',203),
  ('formal_parameter -> identifier_list mode LOC','formal_parameter',3,'p_formal_parameter','Parser.py',211),
  ('formal_parameter -> identifier_list mode','formal_parameter',2,'p_formal_parameter','Parser.py',212),
  ('result_spec -> RETURNS LPAREN mode LOC RPAREN','result_spec',5,'p_result_spec','Parser.py',218),
  ('result_spec -> RETURNS LPAREN mode RPAREN','result_spec',4,'p_result_spec','Parser.py',219),
  ('mode -> mode_name','mode',1,'p_mode','Parser.py',224),
  ('mode -> discrete_mode','mode',1,'p_mode','Parser.py',225),
  ('mode -> reference_mode','mode',1,'p_mode','Parser.py',226),
  ('mode -> composite_mode','mode',1,'p_mode','Parser.py',227),
  ('mode_name -> identifier','mode_name',1,'p_mode_name','Parser.py',231),
  ('discrete_mode -> integer_mode','discrete_mode',1,'p_discrete_mode','Parser.py',239),
  ('discrete_mode -> boolean_mode','discrete_mode',1,'p_discrete_mode','Parser.py',240),
  ('discrete_mode -> character_mode','discrete_mode',1,'p_discrete_mode','Parser.py',241),
  ('discrete_mode -> discrete_range_mode','discrete_mode',1,'p_discrete_mode','Parser.py',242),
  ('discrete_mode_name -> identifier','discrete_mode_name',1,'p_discrete_mode_name','Parser.py',246),
  ('integer_mode -> INT','integer_mode',1,'p_integer_mode','Parser.py',250),
  ('boolean_mode -> BOOL','boolean_mode',1,'p_boolean_mode','Parser.py',254),
  ('character_mode -> CHAR','character_mode',1,'p_character_mode','Parser.py',258),
  ('discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','Parser.py',267),
  ('discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','Parser.py',268),
  ('literal_range -> lower_bound COLON upper_bound','literal_range',3,'p_literal_range','Parser.py',272),
  ('lower_bound -> expression','lower_bound',1,'p_lower_bound','Parser.py',276),
  ('upper_bound -> expression','upper_bound',1,'p_upper_bound','Parser.py',280),
  ('reference_mode -> REF mode','reference_mode',2,'p_reference_mode','Parser.py',287),
  ('composite_mode -> string_mode','composite_mode',1,'p_composite_mode','Parser.py',294),
  ('composite_mode -> array_mode','composite_mode',1,'p_composite_mode','Parser.py',295),
  ('string_mode -> CHARS LBRACKET string_length RBRACKET','string_mode',4,'p_string_mode','Parser.py',299),
  ('string_length -> integer_literal','string_length',1,'p_string_length','Parser.py',303),
  ('array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode','array_mode',5,'p_array_mode','Parser.py',307),
  ('index_mode_list -> index_mode','index_mode_list',1,'p_index_mode_list','Parser.py',311),
  ('index_mode_list -> index_mode COMMA index_mode_list','index_mode_list',3,'p_index_mode_list','Parser.py',312),
  ('index_mode -> discrete_mode','index_mode',1,'p_index_mode','Parser.py',320),
  ('index_mode -> literal_range','index_mode',1,'p_index_mode','Parser.py',321),
  ('element_mode -> mode','element_mode',1,'p_element_mode','Parser.py',325),
  ('location -> identifier','location',1,'p_location','Parser.py',336),
  ('location -> dereferenced_reference','location',1,'p_location','Parser.py',337),
  ('location -> string_element','location',1,'p_location','Parser.py',338),
  ('location -> string_slice','location',1,'p_location','Parser.py',339),
  ('location -> array_element','location',1,'p_location','Parser.py',340),
  ('location -> array_slice','location',1,'p_location','Parser.py',341),
  ('dereferenced_reference -> array_location ARROW','dereferenced_reference',2,'p_dereferenced_reference','Parser.py',345),
  ('string_element -> identifier LBRACKET start_element LBRACKET','string_element',4,'p_string_element','Parser.py',349),
  ('start_element -> expression','start_element',1,'p_start_element','Parser.py',353),
  ('string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET','string_slice',6,'p_string_slice','Parser.py',357),
  ('left_element -> expression','left_element',1,'p_left_element','Parser.py',361),
  ('right_element -> expression','right_element',1,'p_right_element','Parser.py',365),
  ('array_element -> array_location LBRACKET expression_list RBRACKET','array_element',4,'p_array_element','Parser.py',369),
  ('expression_list -> expression','expression_list',1,'p_expression_list','Parser.py',373),
  ('expression_list -> expression COMMA expression_list','expression_list',3,'p_expression_list','Parser.py',374),
  ('array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET','array_slice',6,'p_array_slice','Parser.py',381),
  ('array_location -> location','array_location',1,'p_array_location','Parser.py',385),
  ('expression -> operand0','expression',1,'p_expression','Parser.py',394),
  ('expression -> conditional_expression','expression',1,'p_expression','Parser.py',395),
  ('parenthesized_expression -> LPAREN expression RPAREN','parenthesized_expression',3,'p_parenthesized_expression','Parser.py',399),
  ('conditional_expression -> IF expression then_expression else_expression FI','conditional_expression',5,'p_conditional_expression','Parser.py',407),
  ('conditional_expression -> IF expression then_expression elsif_expression else_expression FI','conditional_expression',6,'p_conditional_expression','Parser.py',408),
  ('then_expression -> THEN expression','then_expression',2,'p_then_expression','Parser.py',412),
  ('else_expression -> ELSE expression','else_expression',2,'p_else_expression','Parser.py',416),
  ('elsif_expression -> ELSIF expression then_expression','elsif_expression',3,'p_elsif_expression','Parser.py',420),
  ('elsif_expression -> elsif_expression ELSIF expression then_expression','elsif_expression',4,'p_elsif_expression','Parser.py',421),
  ('operand0 -> operand1','operand0',1,'p_operand0','Parser.py',436),
  ('operand0 -> operand0 operator1 operand1','operand0',3,'p_operand0','Parser.py',437),
  ('operand1 -> operand2','operand1',1,'p_operand1','Parser.py',444),
  ('operand1 -> operand1 operator2 operand2','operand1',3,'p_operand1','Parser.py',445),
  ('operand2 -> operand3','operand2',1,'p_operand2','Parser.py',452),
  ('operand2 -> operand2 arithmetic_multiplicative_operator operand3','operand2',3,'p_operand2','Parser.py',453),
  ('operand3 -> monadic_operator operand4','operand3',2,'p_operand3','Parser.py',461),
  ('operand3 -> operand4','operand3',1,'p_operand3','Parser.py',462),
  ('operand4 -> array_location','operand4',1,'p_operand4','Parser.py',469),
  ('operand4 -> referenced_location','operand4',1,'p_operand4','Parser.py',470),
  ('operand4 -> primitive_value','operand4',1,'p_operand4','Parser.py',471),
  ('arithmetic_multiplicative_operator -> TIMES','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',482),
  ('arithmetic_multiplicative_operator -> DIVIDE','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',483),
  ('arithmetic_multiplicative_operator -> MODULO','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',484),
  ('monadic_operator -> MINUS','monadic_operator',1,'p_monadic_operator','Parser.py',488),
  ('monadic_operator -> NOT','monadic_operator',1,'p_monadic_operator','Parser.py',489),
  ('referenced_location -> ARROW array_location','referenced_location',2,'p_referenced_location','Parser.py',493),
  ('operator1 -> relational_operator','operator1',1,'p_operator1','Parser.py',497),
  ('operator1 -> membership_operator','operator1',1,'p_operator1','Parser.py',498),
  ('operator2 -> arithmetic_additive_operator','operator2',1,'p_operator2','Parser.py',502),
  ('operator2 -> string_concatenation_operator','operator2',1,'p_operator2','Parser.py',503),
  ('arithmetic_additive_operator -> PLUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','Parser.py',507),
  ('arithmetic_additive_operator -> MINUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','Parser.py',508),
  ('string_concatenation_operator -> CONCAT','string_concatenation_operator',1,'p_string_concatenation_operator','Parser.py',512),
  ('relational_operator -> AND','relational_operator',1,'p_relational_operator','Parser.py',516),
  ('relational_operator -> OR','relational_operator',1,'p_relational_operator','Parser.py',517),
  ('relational_operator -> EQUAL','relational_operator',1,'p_relational_operator','Parser.py',518),
  ('relational_operator -> NOTEQ','relational_operator',1,'p_relational_operator','Parser.py',519),
  ('relational_operator -> GREATER','relational_operator',1,'p_relational_operator','Parser.py',520),
  ('relational_operator -> GTEQUAL','relational_operator',1,'p_relational_operator','Parser.py',521),
  ('relational_operator -> LESS','relational_operator',1,'p_relational_operator','Parser.py',522),
  ('relational_operator -> LTEQUAL','relational_operator',1,'p_relational_operator','Parser.py',523),
  ('membership_operator -> IN','membership_operator',1,'p_membership_operator','Parser.py',527),
  ('primitive_value -> literal','primitive_value',1,'p_primitive_value','Parser.py',539),
  ('primitive_value -> value_array_element','primitive_value',1,'p_primitive_value','Parser.py',540),
  ('primitive_value -> value_array_slice','primitive_value',1,'p_primitive_value','Parser.py',541),
  ('primitive_value -> parenthesized_expression','primitive_value',1,'p_primitive_value','Parser.py',542),
  ('literal -> integer_literal','literal',1,'p_literal','Parser.py',546),
  ('literal -> boolean_literal','literal',1,'p_literal','Parser.py',547),
  ('literal -> character_literal','literal',1,'p_literal','Parser.py',548),
  ('literal -> empty_literal','literal',1,'p_literal','Parser.py',549),
  ('literal -> character_string_literal','literal',1,'p_literal','Parser.py',550),
  ('value_array_element -> primitive_value LBRACKET expression_list RBRACKET','value_array_element',4,'p_value_array_element','Parser.py',554),
  ('value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET','value_array_slice',6,'p_value_array_slice','Parser.py',558),
  ('integer_literal -> ICONST','integer_literal',1,'p_integer_literal','Parser.py',566),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','Parser.py',570),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','Parser.py',571),
  ('character_literal -> CCONST','character_literal',1,'p_character_literal','Parser.py',575),
  ('empty_literal -> NULL','empty_literal',1,'p_empty_literal','Parser.py',579),
  ('character_string_literal -> SCONST','character_string_literal',1,'p_character_string_literal','Parser.py',583),
  ('action_statement -> identifier COLON action SEMI','action_statement',4,'p_action_statement','Parser.py',594),
  ('action_statement -> action SEMI','action_statement',2,'p_action_statement','Parser.py',595),
  ('action -> bracketed_action','action',1,'p_action','Parser.py',601),
  ('action -> assignment_action','action',1,'p_action','Parser.py',602),
  ('action -> call_action','action',1,'p_action','Parser.py',603),
  ('action -> exit_action','action',1,'p_action','Parser.py',604),
  ('action -> result_action','action',1,'p_action','Parser.py',605),
  ('action -> return_action','action',1,'p_action','Parser.py',606),
  ('bracketed_action -> if_action','bracketed_action',1,'p_bracketed_action','Parser.py',611),
  ('assignment_action -> array_location assigning_operator expression','assignment_action',3,'p_assignment_action','Parser.py',615),
  ('assigning_operator -> closed_dyadic_operator ASSIGN','assigning_operator',2,'p_assigning_operator','Parser.py',619),
  ('assigning_operator -> ASSIGN','assigning_operator',1,'p_assigning_operator','Parser.py',620),
  ('closed_dyadic_operator -> arithmetic_additive_operator','closed_dyadic_operator',1,'p_closed_dyadic_operator','Parser.py',624),
  ('closed_dyadic_operator -> arithmetic_multiplicative_operator','closed_dyadic_operator',1,'p_closed_dyadic_operator','Parser.py',625),
  ('closed_dyadic_operator -> string_concatenation_operator','closed_dyadic_operator',1,'p_closed_dyadic_operator','Parser.py',626),
  ('if_action -> IF expression then_clause else_clause FI','if_action',5,'p_if_action','Parser.py',630),
  ('if_action -> IF expression then_clause','if_action',3,'p_if_action','Parser.py',631),
  ('then_clause -> THEN action_statement_list','then_clause',2,'p_then_clause','Parser.py',635),
  ('else_clause -> ELSE action_statement_list','else_clause',2,'p_else_clause','Parser.py',639),
  ('else_clause -> ELSIF expression then_clause else_clause','else_clause',4,'p_else_clause','Parser.py',640),
  ('else_clause -> ELSIF expression then_clause','else_clause',3,'p_else_clause','Parser.py',641),
  ('action_statement_list -> action_statement action_statement_nullable','action_statement_list',2,'p_action_statement_list','Parser.py',652),
  ('action_statement_nullable -> action_statement action_statement_nullable','action_statement_nullable',2,'p_action_statement_nullable','Parser.py',662),
  ('action_statement_nullable -> empty','action_statement_nullable',1,'p_action_statement_nullable','Parser.py',663),
  ('call_action -> procedure_call','call_action',1,'p_call_action','Parser.py',678),
  ('call_action -> builtin_call','call_action',1,'p_call_action','Parser.py',679),
  ('builtin_call -> builtin_name LPAREN parameter_list RPAREN','builtin_call',4,'p_builtin_call','Parser.py',683),
  ('builtin_call -> builtin_name LPAREN RPAREN','builtin_call',3,'p_builtin_call','Parser.py',684),
  ('builtin_name -> ABS','builtin_name',1,'p_builtin_name','Parser.py',689),
  ('builtin_name -> ASC','builtin_name',1,'p_builtin_name','Parser.py',690),
  ('builtin_name -> NUM','builtin_name',1,'p_builtin_name','Parser.py',691),
  ('builtin_name -> UPPER','builtin_name',1,'p_builtin_name','Parser.py',692),
  ('builtin_name -> LOWER','builtin_name',1,'p_builtin_name','Parser.py',693),
  ('builtin_name -> LENGTH','builtin_name',1,'p_builtin_name','Parser.py',694),
  ('builtin_name -> READ','builtin_name',1,'p_builtin_name','Parser.py',695),
  ('builtin_name -> PRINT','builtin_name',1,'p_builtin_name','Parser.py',696),
  ('procedure_call -> ID LPAREN parameter_list RPAREN','procedure_call',4,'p_procedure_call','Parser.py',700),
  ('procedure_call -> ID LPAREN RPAREN','procedure_call',3,'p_procedure_call','Parser.py',701),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','Parser.py',705),
  ('parameter_list -> expression COMMA parameter_list','parameter_list',3,'p_parameter_list','Parser.py',706),
  ('exit_action -> EXIT label_id','exit_action',2,'p_exit_action','Parser.py',714),
  ('label_id -> ID','label_id',1,'p_label_id','Parser.py',718),
  ('return_action -> RETURN result','return_action',2,'p_return_action','Parser.py',722),
  ('result -> expression','result',1,'p_result','Parser.py',726),
  ('result -> empty','result',1,'p_result','Parser.py',727),
  ('result_action -> RESULT expression','result_action',2,'p_result_action','Parser.py',730),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',738),
]
