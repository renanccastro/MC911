
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'A184B57412C38491018619821D913C95'
    
_lr_action_items = {'ELSE':([1,3,6,7,8,11,15,17,20,21,22,25,27,28,29,30,32,33,34,37,38,39,40,41,42,43,46,48,49,50,51,52,53,54,55,56,61,89,106,107,133,144,148,152,153,155,156,159,160,171,179,181,183,184,185,186,189,192,212,213,218,226,227,229,231,232,237,],[-58,-59,-72,-60,-133,-135,-61,-136,-57,-22,-134,-82,-130,-74,-91,-118,-119,-86,-129,-115,-73,-92,-126,-121,-117,-123,-90,-116,-84,-122,-120,-131,-128,-89,-127,-56,-62,149,-98,-88,-137,-132,-85,-145,-152,187,-83,-75,-87,-68,-63,-143,-152,-151,-149,-78,187,-124,149,-150,-76,-71,-65,-80,-77,-125,-81,]),'ELSIF':([1,3,6,7,8,11,15,17,20,21,22,25,27,28,29,30,32,33,34,37,38,39,40,41,42,43,46,48,49,50,51,52,53,54,55,56,61,89,106,107,133,144,148,152,153,155,156,159,160,171,179,181,183,184,185,186,189,192,212,213,218,226,227,229,231,232,237,],[-58,-59,-72,-60,-133,-135,-61,-136,-57,-22,-134,-82,-130,-74,-91,-118,-119,-86,-129,-115,-73,-92,-126,-121,-117,-123,-90,-116,-84,-122,-120,-131,-128,-89,-127,-56,-62,151,-98,-88,-137,-132,-85,-145,-152,188,-83,-75,-87,-68,-63,-143,-152,-151,-149,-78,216,-124,151,-150,-76,-71,-65,-80,-77,-125,-81,]),'COMMA':([1,3,6,7,15,20,21,25,27,28,29,30,32,33,34,37,38,39,40,41,42,43,46,48,49,50,51,52,53,54,55,56,57,58,61,76,78,106,107,111,112,114,115,117,119,120,122,123,124,127,128,129,130,134,142,148,156,157,159,160,165,168,171,174,176,179,192,193,197,198,200,205,207,209,218,220,224,225,226,227,231,232,233,235,236,],[-58,-59,-72,-60,-61,-57,-22,-82,-130,-74,-91,-118,-119,-86,-129,-115,-73,-92,-126,-121,-117,-123,-90,-116,-84,-122,-120,-131,-128,-89,-127,-56,109,110,-62,138,140,-98,-88,-46,-39,-29,-47,-32,-37,-27,-33,-30,-34,-35,-28,-31,-38,170,-18,-85,-83,170,-75,-87,-45,-13,-68,-26,-17,-63,-124,-12,222,-53,-54,170,-44,-19,-76,-40,-48,-41,-71,-65,-77,-125,-42,-55,-50,]),'LESS':([1,3,6,7,15,20,21,25,27,29,30,32,33,34,37,38,39,40,41,42,43,46,48,49,50,51,52,53,54,55,56,61,106,107,148,156,159,160,171,179,192,201,226,227,232,],[-58,-59,-72,-60,-61,-57,-22,-82,-130,-91,-118,-119,-86,-129,-115,93,-92,-126,-121,-117,-123,-90,-116,-84,-122,-120,-131,-128,-89,-127,-56,-62,-98,-88,-85,-83,-75,-87,-68,-63,-124,-56,-71,-65,-125,]),'OR':([1,3,6,7,15,20,21,25,27,29,30,32,33,34,37,38,39,40,41,42,43,46,48,49,50,51,52,53,54,55,56,61,106,107,148,156,159,160,171,179,192,201,226,227,232,],[-58,-59,-72,-60,-61,-57,-22,-82,-130,-91,-118,-119,-86,-129,-115,100,-92,-126,-121,-117,-123,-90,-116,-84,-122,-120,-131,-128,-89,-127,-56,-62,-98,-88,-85,-83,-75,-87,-68,-63,-124,-56,-71,-65,-125,]),'COLON':([1,3,6,7,15,20,21,24,25,27,28,29,30,32,33,34,37,38,39,40,41,42,43,46,48,49,50,51,52,53,54,55,56,61,106,107,134,136,145,146,148,156,157,159,160,171,179,192,194,196,201,218,226,227,231,232,],[-58,-59,-72,-60,-61,-57,-22,84,-82,-130,-74,-91,-118,-119,-86,-129,-115,-73,-92,-126,-121,-117,-123,-90,-116,-84,-122,-120,-131,-128,-89,-127,-56,-62,-98,-88,-43,172,-66,178,-85,-83,191,-75,-87,-68,-63,-124,-43,221,-56,-76,-71,-65,-77,-125,]),'RBRACKET':([1,3,6,7,15,20,21,25,27,28,29,30,32,33,34,37,38,39,40,41,42,43,46,48,49,50,51,52,53,54,55,56,61,106,107,112,117,119,122,124,127,130,134,135,148,156,157,158,159,160,171,179,192,197,198,199,200,202,203,205,206,207,208,210,211,218,219,220,225,226,227,231,232,233,234,],[-58,-59,-72,-60,-61,-57,-22,-82,-130,-74,-91,-118,-119,-86,-129,-115,-73,-92,-126,-121,-117,-123,-90,-116,-84,-122,-120,-131,-128,-89,-127,-56,-62,-98,-88,-39,-32,-37,-33,-34,-35,-38,-69,171,-85,-83,-69,192,-75,-87,-68,-63,-124,-51,-53,223,-54,-49,224,-69,-70,-44,226,-67,227,-76,232,-40,-41,-71,-65,-77,-125,-42,-52,]),'CHARS':([21,57,59,80,118,139,161,223,],[-22,-20,125,125,125,125,-21,125,]),'IF':([0,1,2,3,4,5,6,7,8,10,11,12,15,17,18,20,21,22,25,27,28,29,30,31,32,33,34,37,38,39,40,41,42,43,44,46,48,49,50,51,52,53,54,55,56,61,63,69,71,83,84,85,89,90,104,106,107,126,131,132,133,137,141,144,148,149,151,152,153,154,156,159,160,163,164,166,169,170,171,172,177,178,179,181,183,184,185,187,188,191,192,213,216,218,221,222,226,227,231,232,],[4,-58,-8,-59,31,-7,-72,-60,-133,-5,-135,-6,-61,-136,4,-57,-22,-134,-82,-130,-74,-91,-118,31,-119,-86,-129,-115,-73,-92,-126,-121,-117,-123,31,-90,-116,-84,-122,-120,-131,-128,-89,-127,-56,-62,-139,31,31,4,4,31,-144,4,31,-98,-88,31,-9,-138,-137,-23,-14,-132,-85,4,31,-145,4,31,-83,-75,-87,31,31,31,31,31,-68,31,31,31,-63,-143,4,-151,-149,31,31,31,-124,-150,31,-76,31,31,-71,-65,-77,-125,]),'CCONST':([4,31,35,36,44,47,63,64,68,69,70,71,72,73,74,85,86,87,88,92,93,94,95,96,97,98,99,100,101,102,103,104,108,126,132,151,154,163,164,166,169,170,172,177,178,187,188,191,216,221,222,],[34,34,-97,-96,34,34,-139,-103,-105,34,-94,34,-95,-93,-104,34,-101,-102,34,34,-112,-99,-113,-106,-109,-111,-100,-107,-114,-110,-108,34,34,34,-138,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'REF':([21,57,59,80,118,139,161,223,],[-22,-20,118,118,118,118,-21,118,]),'NOT':([4,31,44,63,64,68,69,70,71,72,73,74,85,86,87,88,92,93,94,95,96,97,98,99,100,101,102,103,104,108,126,132,151,154,163,164,166,169,170,172,177,178,187,188,191,216,221,222,],[35,35,35,-139,-103,-105,35,-94,35,-95,-93,-104,35,-101,-102,35,35,-112,-99,-113,-106,-109,-111,-100,-107,-114,-110,-108,35,35,35,-138,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'MINUS':([1,3,4,6,7,13,15,20,21,24,25,27,29,30,31,32,33,34,37,39,40,41,42,43,44,46,48,49,50,51,52,53,54,55,56,61,63,64,68,69,70,71,72,73,74,85,86,87,88,92,93,94,95,96,97,98,99,100,101,102,103,104,106,107,108,126,132,148,151,154,156,159,160,163,164,166,169,170,171,172,177,178,179,187,188,191,192,201,216,221,222,226,227,232,],[-58,-59,36,-72,-60,74,-61,-57,-22,-56,74,-130,-91,-118,36,-119,-86,-129,-115,-92,-126,-121,-117,-123,36,-90,-116,-84,-122,-120,-131,-128,-89,-127,-56,-62,-139,-103,-105,36,-94,36,-95,-93,-104,36,-101,-102,36,36,-112,-99,-113,-106,-109,-111,-100,-107,-114,-110,-108,36,-98,-88,36,36,-138,-85,36,36,74,-75,-87,36,36,36,36,36,-68,36,36,36,-63,36,36,36,-124,-56,36,36,36,-71,-65,-125,]),'EQUAL':([1,3,6,7,15,20,21,25,27,29,30,32,33,34,37,38,39,40,41,42,43,46,48,49,50,51,52,53,54,55,56,61,106,107,148,156,159,160,171,179,192,201,226,227,232,],[-58,-59,-72,-60,-61,-57,-22,-82,-130,-91,-118,-119,-86,-129,-115,103,-92,-126,-121,-117,-123,-90,-116,-84,-122,-120,-131,-128,-89,-127,-56,-62,-98,-88,-85,-83,-75,-87,-68,-63,-124,-56,-71,-65,-125,]),'LBRACKET':([1,3,6,7,13,15,20,21,24,25,27,28,29,30,32,33,34,37,38,39,40,41,42,43,46,48,49,50,51,52,53,54,55,56,61,106,107,121,125,145,147,148,156,159,160,171,179,192,201,218,226,227,231,232,],[-58,-59,-72,-60,71,-61,-57,-22,85,-82,-130,-74,-91,-118,-119,-86,-129,-115,-73,104,-126,-121,-117,-123,71,-116,-84,-122,-120,-131,-128,-89,-127,85,-62,71,-88,166,167,-64,179,-85,-83,-75,-87,-68,-63,-124,85,-76,-71,-65,-77,-125,]),'LTEQUAL':([1,3,6,7,15,20,21,25,27,29,30,32,33,34,37,38,39,40,41,42,43,46,48,49,50,51,52,53,54,55,56,61,106,107,148,156,159,160,171,179,192,201,226,227,232,],[-58,-59,-72,-60,-61,-57,-22,-82,-130,-91,-118,-119,-86,-129,-115,95,-92,-126,-121,-117,-123,-90,-116,-84,-122,-120,-131,-128,-89,-127,-56,-62,-98,-88,-85,-83,-75,-87,-68,-63,-124,-56,-71,-65,-125,]),'ASSIGN':([1,3,6,7,13,15,20,21,24,56,57,59,61,62,64,65,66,67,68,70,72,73,74,77,111,112,113,114,115,117,119,120,122,123,124,127,128,129,130,142,161,165,171,179,220,224,225,226,227,235,236,],[-58,-59,-72,-60,63,-61,-57,-22,-56,-56,-20,126,-62,-141,-103,-142,132,-140,-105,-94,-95,-93,-104,139,-46,-39,163,-29,-47,-32,-37,-27,-33,-30,-34,-35,-28,-31,-38,177,-21,-45,-68,-63,-40,-48,-41,-71,-65,-55,-50,]),'ICONST':([4,31,35,36,44,47,63,64,68,69,70,71,72,73,74,85,86,87,88,92,93,94,95,96,97,98,99,100,101,102,103,104,108,126,132,151,154,163,164,166,167,169,170,172,177,178,187,188,191,216,221,222,],[40,40,-97,-96,40,40,-139,-103,-105,40,-94,40,-95,-93,-104,40,-101,-102,40,40,-112,-99,-113,-106,-109,-111,-100,-107,-114,-110,-108,40,40,40,-138,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'NOTEQ':([1,3,6,7,15,20,21,25,27,29,30,32,33,34,37,38,39,40,41,42,43,46,48,49,50,51,52,53,54,55,56,61,106,107,148,156,159,160,171,179,192,201,226,227,232,],[-58,-59,-72,-60,-61,-57,-22,-82,-130,-91,-118,-119,-86,-129,-115,97,-92,-126,-121,-117,-123,-90,-116,-84,-122,-120,-131,-128,-89,-127,-56,-62,-98,-88,-85,-83,-75,-87,-68,-63,-124,-56,-71,-65,-125,]),'GTEQUAL':([1,3,6,7,15,20,21,25,27,29,30,32,33,34,37,38,39,40,41,42,43,46,48,49,50,51,52,53,54,55,56,61,106,107,148,156,159,160,171,179,192,201,226,227,232,],[-58,-59,-72,-60,-61,-57,-22,-82,-130,-91,-118,-119,-86,-129,-115,98,-92,-126,-121,-117,-123,-90,-116,-84,-122,-120,-131,-128,-89,-127,-56,-62,-98,-88,-85,-83,-75,-87,-68,-63,-124,-56,-71,-65,-125,]),'CONCAT':([1,3,6,7,13,15,20,21,24,25,27,29,30,32,33,34,37,39,40,41,42,43,46,48,49,50,51,52,53,54,55,56,61,106,107,148,156,159,160,171,179,192,201,226,227,232,],[-58,-59,-72,-60,68,-61,-57,-22,-56,68,-130,-91,-118,-119,-86,-129,-115,-92,-126,-121,-117,-123,-90,-116,-84,-122,-120,-131,-128,-89,-127,-56,-62,-98,-88,-85,68,-75,-87,-68,-63,-124,-56,-71,-65,-125,]),'CHAR':([21,57,59,80,118,139,161,166,222,223,],[-22,-20,112,112,112,112,-21,112,112,112,]),'SYN':([0,1,2,3,5,6,7,8,10,11,12,15,17,18,20,21,22,25,27,28,29,30,32,33,34,37,38,39,40,41,42,43,46,48,49,50,51,52,53,54,55,56,61,83,89,106,107,131,133,137,141,144,148,152,153,156,159,160,171,179,181,183,184,185,192,213,218,226,227,231,232,],[9,-58,-8,-59,-7,-72,-60,-133,-5,-135,-6,-61,-136,9,-57,-22,-134,-82,-130,-74,-91,-118,-119,-86,-129,-115,-73,-92,-126,-121,-117,-123,-90,-116,-84,-122,-120,-131,-128,-89,-127,-56,-62,9,-144,-98,-88,-9,-137,-23,-14,-132,-85,-145,-152,-83,-75,-87,-68,-63,-143,-152,-151,-149,-124,-150,-76,-71,-65,-77,-125,]),'SEMI':([1,3,6,7,15,20,21,25,27,28,29,30,32,33,34,37,38,39,40,41,42,43,46,48,49,50,51,52,53,54,55,56,58,60,61,75,76,78,79,106,107,111,112,114,115,117,119,120,122,123,124,127,128,129,130,142,148,156,159,160,162,165,168,171,173,174,175,176,179,192,193,209,218,220,224,225,226,227,231,232,235,236,],[-58,-59,-72,-60,-61,-57,-22,-82,-130,-74,-91,-118,-119,-86,-129,-115,-73,-92,-126,-121,-117,-123,-90,-116,-84,-122,-120,-131,-128,-89,-127,-56,-10,131,-62,137,-24,-15,141,-98,-88,-46,-39,-29,-47,-32,-37,-27,-33,-30,-34,-35,-28,-31,-38,-18,-85,-83,-75,-87,-11,-45,-13,-68,-25,-26,-16,-17,-63,-124,-12,-19,-76,-40,-48,-41,-71,-65,-77,-125,-55,-50,]),'TIMES':([1,3,6,7,13,15,20,21,24,27,29,30,32,33,34,37,39,40,41,42,43,46,48,49,50,51,52,53,54,55,56,61,106,107,148,159,160,171,179,192,201,226,227,232,],[-58,-59,-72,-60,73,-61,-57,-22,-56,-130,-91,-118,-119,-86,-129,-115,-92,-126,-121,-117,-123,-90,-116,73,-122,-120,-131,-128,-89,-127,-56,-62,-98,-88,73,-75,-87,-68,-63,-124,-56,-71,-65,-125,]),'LPAREN':([4,21,31,35,36,44,47,63,64,68,69,70,71,72,73,74,85,86,87,88,92,93,94,95,96,97,98,99,100,101,102,103,104,108,112,116,117,119,122,124,126,127,128,129,130,132,151,154,163,164,166,169,170,172,177,178,187,188,191,198,201,216,220,221,222,225,],[44,-22,44,-97,-96,44,44,-139,-103,-105,44,-94,44,-95,-93,-104,44,-101,-102,44,44,-112,-99,-113,-106,-109,-111,-100,-107,-114,-110,-108,44,44,-39,164,-32,-37,-33,-34,44,-35,169,-36,-38,-138,44,44,44,44,44,44,44,44,44,44,44,44,44,169,-36,44,-40,44,44,-41,]),'IN':([1,3,6,7,15,20,21,25,27,29,30,32,33,34,37,38,39,40,41,42,43,46,48,49,50,51,52,53,54,55,56,61,106,107,148,156,159,160,171,179,192,201,226,227,232,],[-58,-59,-72,-60,-61,-57,-22,-82,-130,-91,-118,-119,-86,-129,-115,101,-92,-126,-121,-117,-123,-90,-116,-84,-122,-120,-131,-128,-89,-127,-56,-62,-98,-88,-85,-83,-75,-87,-68,-63,-124,-56,-71,-65,-125,]),'BOOL':([21,57,59,80,118,139,161,166,222,223,],[-22,-20,130,130,130,130,-21,130,130,130,]),'ARROW':([1,3,4,6,7,13,15,20,21,24,31,35,36,44,46,47,56,61,63,64,68,69,70,71,72,73,74,85,86,87,88,92,93,94,95,96,97,98,99,100,101,102,103,104,106,108,126,132,151,154,163,164,166,169,170,171,172,177,178,179,187,188,191,201,216,221,222,226,227,],[-58,-59,45,-72,-60,61,-61,-57,-22,-56,45,-97,-96,45,61,45,-56,-62,-139,-103,-105,45,-94,45,-95,-93,-104,45,-101,-102,45,45,-112,-99,-113,-106,-109,-111,-100,-107,-114,-110,-108,45,61,45,45,-138,45,45,45,45,45,45,45,-68,45,45,45,-63,45,45,45,-56,45,45,45,-71,-65,]),'ARRAY':([21,57,59,80,118,139,161,223,],[-22,-20,121,121,121,121,-21,121,]),'TYPE':([0,1,2,3,5,6,7,8,10,11,12,15,17,18,20,21,22,25,27,28,29,30,32,33,34,37,38,39,40,41,42,43,46,48,49,50,51,52,53,54,55,56,61,83,89,106,107,131,133,137,141,144,148,152,153,156,159,160,171,179,181,183,184,185,192,213,218,226,227,231,232,],[14,-58,-8,-59,-7,-72,-60,-133,-5,-135,-6,-61,-136,14,-57,-22,-134,-82,-130,-74,-91,-118,-119,-86,-129,-115,-73,-92,-126,-121,-117,-123,-90,-116,-84,-122,-120,-131,-128,-89,-127,-56,-62,14,-144,-98,-88,-9,-137,-23,-14,-132,-85,-145,-152,-83,-75,-87,-68,-63,-143,-152,-151,-149,-124,-150,-76,-71,-65,-77,-125,]),'THEN':([1,3,6,7,15,20,21,25,26,27,28,29,30,32,33,34,37,38,39,40,41,42,43,46,48,49,50,51,52,53,54,55,56,61,91,106,107,148,156,159,160,171,179,182,192,215,218,226,227,230,231,232,],[-58,-59,-72,-60,-61,-57,-22,-82,90,-130,-74,-91,-118,-119,-86,-129,-115,-73,-92,-126,-121,-117,-123,-90,-116,-84,-122,-120,-131,-128,-89,-127,-56,-62,154,-98,-88,-85,-83,-75,-87,-68,-63,90,-124,154,-76,-71,-65,154,-77,-125,]),'RPAREN':([1,3,6,7,15,20,21,25,27,28,29,30,32,33,34,37,38,39,40,41,42,43,46,48,49,50,51,52,53,54,55,56,61,105,106,107,148,156,159,160,171,179,192,195,204,207,218,226,227,231,232,233,],[-58,-59,-72,-60,-61,-57,-22,-82,-130,-74,-91,-118,-119,-86,-129,-115,-73,-92,-126,-121,-117,-123,-90,-116,-84,-122,-120,-131,-128,-89,-127,-56,-62,159,-98,-88,-85,-83,-75,-87,-68,-63,-124,220,225,-44,-76,-71,-65,-77,-125,-42,]),'DIVIDE':([1,3,6,7,13,15,20,21,24,27,29,30,32,33,34,37,39,40,41,42,43,46,48,49,50,51,52,53,54,55,56,61,106,107,148,159,160,171,179,192,201,226,227,232,],[-58,-59,-72,-60,70,-61,-57,-22,-56,-130,-91,-118,-119,-86,-129,-115,-92,-126,-121,-117,-123,-90,-116,70,-122,-120,-131,-128,-89,-127,-56,-62,-98,-88,70,-75,-87,-68,-63,-124,-56,-71,-65,-125,]),'NULL':([4,31,35,36,44,47,63,64,68,69,70,71,72,73,74,85,86,87,88,92,93,94,95,96,97,98,99,100,101,102,103,104,108,126,132,151,154,163,164,166,169,170,172,177,178,187,188,191,216,221,222,],[27,27,-97,-96,27,27,-139,-103,-105,27,-94,27,-95,-93,-104,27,-101,-102,27,27,-112,-99,-113,-106,-109,-111,-100,-107,-114,-110,-108,27,27,27,-138,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'TRUE':([4,31,35,36,44,47,63,64,68,69,70,71,72,73,74,85,86,87,88,92,93,94,95,96,97,98,99,100,101,102,103,104,108,126,132,151,154,163,164,166,169,170,172,177,178,187,188,191,216,221,222,],[55,55,-97,-96,55,55,-139,-103,-105,55,-94,55,-95,-93,-104,55,-101,-102,55,55,-112,-99,-113,-106,-109,-111,-100,-107,-114,-110,-108,55,55,55,-138,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'INT':([21,57,59,80,118,139,161,166,222,223,],[-22,-20,119,119,119,119,-21,119,119,119,]),'DCL':([0,1,2,3,5,6,7,8,10,11,12,15,17,18,20,21,22,25,27,28,29,30,32,33,34,37,38,39,40,41,42,43,46,48,49,50,51,52,53,54,55,56,61,83,89,106,107,131,133,137,141,144,148,152,153,156,159,160,171,179,181,183,184,185,192,213,218,226,227,231,232,],[16,-58,-8,-59,-7,-72,-60,-133,-5,-135,-6,-61,-136,16,-57,-22,-134,-82,-130,-74,-91,-118,-119,-86,-129,-115,-73,-92,-126,-121,-117,-123,-90,-116,-84,-122,-120,-131,-128,-89,-127,-56,-62,16,-144,-98,-88,-9,-137,-23,-14,-132,-85,-145,-152,-83,-75,-87,-68,-63,-143,-152,-151,-149,-124,-150,-76,-71,-65,-77,-125,]),'SCONST':([4,31,35,36,44,47,63,64,68,69,70,71,72,73,74,85,86,87,88,92,93,94,95,96,97,98,99,100,101,102,103,104,108,126,132,151,154,163,164,166,169,170,172,177,178,187,188,191,216,221,222,],[52,52,-97,-96,52,52,-139,-103,-105,52,-94,52,-95,-93,-104,52,-101,-102,52,52,-112,-99,-113,-106,-109,-111,-100,-107,-114,-110,-108,52,52,52,-138,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'FALSE':([4,31,35,36,44,47,63,64,68,69,70,71,72,73,74,85,86,87,88,92,93,94,95,96,97,98,99,100,101,102,103,104,108,126,132,151,154,163,164,166,169,170,172,177,178,187,188,191,216,221,222,],[53,53,-97,-96,53,53,-139,-103,-105,53,-94,53,-95,-93,-104,53,-101,-102,53,53,-112,-99,-113,-106,-109,-111,-100,-107,-114,-110,-108,53,53,53,-138,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'PLUS':([1,3,6,7,13,15,20,21,24,25,27,29,30,32,33,34,37,39,40,41,42,43,46,48,49,50,51,52,53,54,55,56,61,106,107,148,156,159,160,171,179,192,201,226,227,232,],[-58,-59,-72,-60,64,-61,-57,-22,-56,64,-130,-91,-118,-119,-86,-129,-115,-92,-126,-121,-117,-123,-90,-116,-84,-122,-120,-131,-128,-89,-127,-56,-62,-98,-88,-85,64,-75,-87,-68,-63,-124,-56,-71,-65,-125,]),'AND':([1,3,6,7,15,20,21,25,27,29,30,32,33,34,37,38,39,40,41,42,43,46,48,49,50,51,52,53,54,55,56,61,106,107,148,156,159,160,171,179,192,201,226,227,232,],[-58,-59,-72,-60,-61,-57,-22,-82,-130,-91,-118,-119,-86,-129,-115,96,-92,-126,-121,-117,-123,-90,-116,-84,-122,-120,-131,-128,-89,-127,-56,-62,-98,-88,-85,-83,-75,-87,-68,-63,-124,-56,-71,-65,-125,]),'ID':([0,1,2,3,4,5,6,7,8,9,10,11,12,14,15,16,17,18,20,21,22,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,61,63,64,68,69,70,71,72,73,74,80,83,84,85,86,87,88,89,90,92,93,94,95,96,97,98,99,100,101,102,103,104,106,107,108,109,110,118,126,131,132,133,137,138,139,140,141,144,148,149,151,152,153,154,156,159,160,161,163,164,166,169,170,171,172,177,178,179,181,183,184,185,187,188,191,192,213,216,218,221,222,223,226,227,231,232,],[21,-58,-8,-59,21,-7,-72,-60,-133,21,-5,-135,-6,21,-61,21,-136,21,-57,-22,-134,-82,-130,-74,-91,-118,21,-119,-86,-129,-97,-96,-115,-73,-92,-126,-121,-117,-123,21,21,-90,21,-116,-84,-122,-120,-131,-128,-89,-127,-56,-20,21,-62,-139,-103,-105,21,-94,21,-95,-93,-104,21,21,21,21,-101,-102,21,-144,21,21,-112,-99,-113,-106,-109,-111,-100,-107,-114,-110,-108,21,-98,-88,21,21,21,21,21,-9,-138,-137,-23,21,21,21,-14,-132,-85,21,21,-145,21,21,-83,-75,-87,-21,21,21,21,21,21,-68,21,21,21,-63,-143,21,-151,-149,21,21,21,-124,-150,21,-76,21,21,21,-71,-65,-77,-125,]),'$end':([1,2,3,5,6,7,8,10,11,12,15,17,18,19,20,21,22,23,25,27,28,29,30,32,33,34,37,38,39,40,41,42,43,46,48,49,50,51,52,53,54,55,56,61,81,82,83,89,106,107,131,133,137,141,143,144,148,152,153,156,159,160,171,179,181,183,184,185,192,213,218,226,227,231,232,],[-58,-8,-59,-7,-72,-60,-133,-5,-135,-6,-61,-136,-152,0,-57,-22,-134,-1,-82,-130,-74,-91,-118,-119,-86,-129,-115,-73,-92,-126,-121,-117,-123,-90,-116,-84,-122,-120,-131,-128,-89,-127,-56,-62,-2,-4,-152,-144,-98,-88,-9,-137,-23,-14,-3,-132,-85,-145,-152,-83,-75,-87,-68,-63,-143,-152,-151,-149,-124,-150,-76,-71,-65,-77,-125,]),'FI':([1,3,6,7,8,11,15,17,20,21,22,25,27,28,29,30,32,33,34,37,38,39,40,41,42,43,46,48,49,50,51,52,53,54,55,56,61,89,106,107,133,144,148,150,152,153,156,159,160,171,179,180,181,183,184,185,190,192,212,213,214,217,218,226,227,228,231,232,],[-58,-59,-72,-60,-133,-135,-61,-136,-57,-22,-134,-82,-130,-74,-91,-118,-119,-86,-129,-115,-73,-92,-126,-121,-117,-123,-90,-116,-84,-122,-120,-131,-128,-89,-127,-56,-62,-144,-98,-88,-137,-132,-85,181,-145,-152,-83,-75,-87,-68,-63,-146,-143,-152,-151,-149,218,-124,-148,-150,-79,231,-76,-71,-65,-147,-77,-125,]),'MODULO':([1,3,6,7,13,15,20,21,24,27,29,30,32,33,34,37,39,40,41,42,43,46,48,49,50,51,52,53,54,55,56,61,106,107,148,159,160,171,179,192,201,226,227,232,],[-58,-59,-72,-60,72,-61,-57,-22,-56,-130,-91,-118,-119,-86,-129,-115,-92,-126,-121,-117,-123,-90,-116,72,-122,-120,-131,-128,-89,-127,-56,-62,-98,-88,72,-75,-87,-68,-63,-124,-56,-71,-65,-125,]),'GREATER':([1,3,6,7,15,20,21,25,27,29,30,32,33,34,37,38,39,40,41,42,43,46,48,49,50,51,52,53,54,55,56,61,106,107,148,156,159,160,171,179,192,201,226,227,232,],[-58,-59,-72,-60,-61,-57,-22,-82,-130,-91,-118,-119,-86,-129,-115,102,-92,-126,-121,-117,-123,-90,-116,-84,-122,-120,-131,-128,-89,-127,-56,-62,-98,-88,-85,-83,-75,-87,-68,-63,-124,-56,-71,-65,-125,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'action_statement_list':([90,149,],[152,180,]),'operand1':([4,31,44,69,71,85,92,104,126,151,154,163,164,166,169,170,172,177,178,187,188,191,216,221,222,],[25,25,25,25,25,25,156,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'expression':([4,31,44,69,71,85,104,126,151,154,163,164,166,169,170,172,177,178,187,188,191,216,221,222,],[26,91,105,133,134,145,157,168,182,186,193,194,194,194,205,207,209,210,214,215,219,230,207,194,]),'action':([0,18,83,84,90,149,153,183,],[8,8,8,144,8,8,8,8,]),'index_mode':([166,222,],[197,197,]),'referenced_location':([4,31,44,47,69,71,85,88,92,104,108,126,151,154,163,164,166,169,170,172,177,178,187,188,191,216,221,222,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'identifier_list':([9,14,16,109,110,138,140,],[59,77,80,161,59,77,80,]),'operator2':([25,156,],[88,88,]),'initialization':([142,],[176,]),'integer_literal':([4,31,44,47,69,71,85,88,92,104,108,126,151,154,163,164,166,167,169,170,172,177,178,187,188,191,216,221,222,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,202,32,32,32,32,32,32,32,32,32,32,32,]),'operand3':([4,31,44,69,71,85,88,92,104,108,126,151,154,163,164,166,169,170,172,177,178,187,188,191,216,221,222,],[33,33,33,33,33,33,33,33,33,160,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'statement_nullable':([18,83,],[81,143,]),'synonym_list':([9,110,],[60,162,]),'array_location':([0,4,18,31,44,45,47,69,71,83,84,85,88,90,92,104,108,126,149,151,153,154,163,164,166,169,170,172,177,178,183,187,188,191,216,221,222,],[13,46,13,46,46,106,46,46,46,13,13,46,46,13,46,46,46,46,13,46,13,46,46,46,46,46,46,46,46,46,13,46,46,46,46,46,46,]),'literal':([4,31,44,47,69,71,85,88,92,104,108,126,151,154,163,164,166,169,170,172,177,178,187,188,191,216,221,222,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'array_element':([0,4,18,31,44,45,47,69,71,83,84,85,88,90,92,104,108,126,149,151,153,154,163,164,166,169,170,172,177,178,183,187,188,191,216,221,222,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'composite_mode':([59,80,118,139,223,],[123,123,123,123,123,]),'character_literal':([4,31,44,47,69,71,85,88,92,104,108,126,151,154,163,164,166,169,170,172,177,178,187,188,191,216,221,222,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'string_length':([167,],[203,]),'value_array_slice':([4,31,44,47,69,71,85,88,92,104,108,126,151,154,163,164,166,169,170,172,177,178,187,188,191,216,221,222,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'membership_operator':([38,],[99,]),'action_statement_nullable':([153,183,],[185,213,]),'assignment_action':([0,18,83,84,90,149,153,183,],[11,11,11,11,11,11,11,11,]),'character_string_literal':([4,31,44,47,69,71,85,88,92,104,108,126,151,154,163,164,166,169,170,172,177,178,187,188,191,216,221,222,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'discrete_mode':([59,80,118,139,166,222,223,],[128,128,128,128,198,198,128,]),'monadic_operator':([4,31,44,69,71,85,88,92,104,108,126,151,154,163,164,166,169,170,172,177,178,187,188,191,216,221,222,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'string_slice':([0,4,18,31,44,45,47,69,71,83,84,85,88,90,92,104,108,126,149,151,153,154,163,164,166,169,170,172,177,178,183,187,188,191,216,221,222,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'reference_mode':([59,80,118,139,223,],[114,114,114,114,114,]),'array_mode':([59,80,118,139,223,],[115,115,115,115,115,]),'discrete_mode_name':([59,80,118,139,166,222,223,],[116,116,116,116,116,116,116,]),'expression_list':([71,104,170,],[135,158,206,]),'empty_literal':([4,31,44,47,69,71,85,88,92,104,108,126,151,154,163,164,166,169,170,172,177,178,187,188,191,216,221,222,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'else_clause':([89,212,],[150,228,]),'integer_mode':([59,80,118,139,166,222,223,],[117,117,117,117,117,117,117,]),'if_action':([0,18,83,84,90,149,153,183,],[17,17,17,17,17,17,17,17,]),'discrete_range_mode':([59,80,118,139,166,222,223,],[127,127,127,127,127,127,127,]),'parenthesized_expression':([4,31,44,47,69,71,85,88,92,104,108,126,151,154,163,164,166,169,170,172,177,178,187,188,191,216,221,222,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'closed_dyadic_operator':([13,],[66,]),'newmode_statement':([0,18,83,],[5,5,5,]),'operand4':([4,31,44,47,69,71,85,88,92,104,108,126,151,154,163,164,166,169,170,172,177,178,187,188,191,216,221,222,],[54,54,54,107,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'left_element':([85,],[146,]),'elsif_expression':([155,],[189,]),'start_element':([85,],[147,]),'arithmetic_multiplicative_operator':([13,49,148,],[62,108,108,]),'synonym_definition':([9,110,],[58,58,]),'identifier':([0,4,9,14,16,18,31,44,45,47,59,69,71,80,83,84,85,88,90,92,104,108,109,110,118,126,138,139,140,149,151,153,154,163,164,166,169,170,172,177,178,183,187,188,191,216,221,222,223,],[24,56,57,57,57,24,56,56,56,56,129,56,56,129,24,56,56,56,24,56,56,56,57,57,129,56,57,129,57,24,56,24,56,56,56,201,56,56,56,56,56,24,56,56,56,56,56,201,129,]),'string_mode':([59,80,118,139,223,],[111,111,111,111,111,]),'string_element':([0,4,18,31,44,45,47,69,71,83,84,85,88,90,92,104,108,126,149,151,153,154,163,164,166,169,170,172,177,178,183,187,188,191,216,221,222,],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,]),'action_statement':([0,18,83,90,149,153,183,],[2,2,2,153,153,183,183,]),'conditional_expression':([4,31,44,69,71,85,104,126,151,154,163,164,166,169,170,172,177,178,187,188,191,216,221,222,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'mode':([59,80,118,139,223,],[113,142,165,174,235,]),'arithmetic_additive_operator':([13,25,156,],[67,86,86,]),'newmode_list':([14,138,],[75,173,]),'declaration':([16,140,],[78,78,]),'mode_name':([59,80,118,139,223,],[120,120,120,120,120,]),'location':([0,4,18,31,44,45,47,69,71,83,84,85,88,90,92,104,108,126,149,151,153,154,163,164,166,169,170,172,177,178,183,187,188,191,216,221,222,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'literal_range':([164,166,169,222,],[195,200,204,200,]),'operand0':([4,31,44,69,71,85,104,126,151,154,163,164,166,169,170,172,177,178,187,188,191,216,221,222,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'then_expression':([91,215,230,],[155,229,237,]),'declaration_list':([16,140,],[79,175,]),'primitive_value':([4,31,44,47,69,71,85,88,92,104,108,126,151,154,163,164,166,169,170,172,177,178,187,188,191,216,221,222,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'character_mode':([59,80,118,139,166,222,223,],[124,124,124,124,124,124,124,]),'else_expression':([155,189,],[190,217,]),'mode_definition':([14,138,],[76,76,]),'declaration_statement':([0,18,83,],[10,10,10,]),'empty':([18,83,153,183,],[82,82,184,184,]),'synonym_statement':([0,18,83,],[12,12,12,]),'index_mode_list':([166,222,],[199,234,]),'value_array_element':([4,31,44,47,69,71,85,88,92,104,108,126,151,154,163,164,166,169,170,172,177,178,187,188,191,216,221,222,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'relational_operator':([38,],[94,]),'string_concatenation_operator':([13,25,156,],[65,87,87,]),'operand2':([4,31,44,69,71,85,88,92,104,126,151,154,163,164,166,169,170,172,177,178,187,188,191,216,221,222,],[49,49,49,49,49,49,148,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'array_slice':([0,4,18,31,44,45,47,69,71,83,84,85,88,90,92,104,108,126,149,151,153,154,163,164,166,169,170,172,177,178,183,187,188,191,216,221,222,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'element_mode':([223,],[236,]),'assigning_operator':([13,],[69,]),'statement_list':([0,],[23,]),'upper_bound':([172,221,],[208,233,]),'statement':([0,18,83,],[18,83,83,]),'right_element':([178,],[211,]),'boolean_literal':([4,31,44,47,69,71,85,88,92,104,108,126,151,154,163,164,166,169,170,172,177,178,187,188,191,216,221,222,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'program':([0,],[19,]),'bracketed_action':([0,18,83,84,90,149,153,183,],[22,22,22,22,22,22,22,22,]),'operator1':([38,],[92,]),'boolean_mode':([59,80,118,139,166,222,223,],[122,122,122,122,122,122,122,]),'then_clause':([26,182,],[89,212,]),'lower_bound':([71,164,166,169,222,],[136,196,196,196,196,]),'dereferenced_reference':([0,4,18,31,44,45,47,69,71,83,84,85,88,90,92,104,108,126,149,151,153,154,163,164,166,169,170,172,177,178,183,187,188,191,216,221,222,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','Parser.py',48),
  ('statement_list -> statement statement_nullable','statement_list',2,'p_statement_list','Parser.py',52),
  ('statement_nullable -> statement statement_nullable','statement_nullable',2,'p_statement_nullable','Parser.py',63),
  ('statement_nullable -> empty','statement_nullable',1,'p_statement_nullable','Parser.py',64),
  ('statement -> declaration_statement','statement',1,'p_statement','Parser.py',76),
  ('statement -> synonym_statement','statement',1,'p_statement','Parser.py',77),
  ('statement -> newmode_statement','statement',1,'p_statement','Parser.py',78),
  ('statement -> action_statement','statement',1,'p_statement','Parser.py',79),
  ('synonym_statement -> SYN synonym_list SEMI','synonym_statement',3,'p_synonym_statement','Parser.py',88),
  ('synonym_list -> synonym_definition','synonym_list',1,'p_synonym_list','Parser.py',92),
  ('synonym_list -> synonym_definition COMMA synonym_list','synonym_list',3,'p_synonym_list','Parser.py',93),
  ('synonym_definition -> identifier_list mode ASSIGN expression','synonym_definition',4,'p_synonym_definition','Parser.py',102),
  ('synonym_definition -> identifier_list ASSIGN expression','synonym_definition',3,'p_synonym_definition','Parser.py',103),
  ('declaration_statement -> DCL declaration_list SEMI','declaration_statement',3,'p_declaration_statement','Parser.py',114),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','Parser.py',118),
  ('declaration_list -> declaration COMMA declaration_list','declaration_list',3,'p_declaration_list','Parser.py',119),
  ('declaration -> identifier_list mode initialization','declaration',3,'p_declaration','Parser.py',127),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','Parser.py',128),
  ('initialization -> ASSIGN expression','initialization',2,'p_initialization','Parser.py',132),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','Parser.py',136),
  ('identifier_list -> identifier COMMA identifier_list','identifier_list',3,'p_identifier_list','Parser.py',137),
  ('identifier -> ID','identifier',1,'p_identifier','Parser.py',145),
  ('newmode_statement -> TYPE newmode_list SEMI','newmode_statement',3,'p_newmode_statement','Parser.py',153),
  ('newmode_list -> mode_definition','newmode_list',1,'p_newmode_list','Parser.py',157),
  ('newmode_list -> mode_definition COMMA newmode_list','newmode_list',3,'p_newmode_list','Parser.py',158),
  ('mode_definition -> identifier_list ASSIGN mode','mode_definition',3,'p_mode_definition','Parser.py',166),
  ('mode -> mode_name','mode',1,'p_mode','Parser.py',170),
  ('mode -> discrete_mode','mode',1,'p_mode','Parser.py',171),
  ('mode -> reference_mode','mode',1,'p_mode','Parser.py',172),
  ('mode -> composite_mode','mode',1,'p_mode','Parser.py',173),
  ('mode_name -> identifier','mode_name',1,'p_mode_name','Parser.py',177),
  ('discrete_mode -> integer_mode','discrete_mode',1,'p_discrete_mode','Parser.py',183),
  ('discrete_mode -> boolean_mode','discrete_mode',1,'p_discrete_mode','Parser.py',184),
  ('discrete_mode -> character_mode','discrete_mode',1,'p_discrete_mode','Parser.py',185),
  ('discrete_mode -> discrete_range_mode','discrete_mode',1,'p_discrete_mode','Parser.py',186),
  ('discrete_mode_name -> identifier','discrete_mode_name',1,'p_discrete_mode_name','Parser.py',190),
  ('integer_mode -> INT','integer_mode',1,'p_integer_mode','Parser.py',194),
  ('boolean_mode -> BOOL','boolean_mode',1,'p_boolean_mode','Parser.py',198),
  ('character_mode -> CHAR','character_mode',1,'p_character_mode','Parser.py',202),
  ('discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','Parser.py',208),
  ('discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','Parser.py',209),
  ('literal_range -> lower_bound COLON upper_bound','literal_range',3,'p_literal_range','Parser.py',213),
  ('lower_bound -> expression','lower_bound',1,'p_lower_bound','Parser.py',217),
  ('upper_bound -> expression','upper_bound',1,'p_upper_bound','Parser.py',220),
  ('reference_mode -> REF mode','reference_mode',2,'p_reference_mode','Parser.py',226),
  ('composite_mode -> string_mode','composite_mode',1,'p_composite_mode','Parser.py',232),
  ('composite_mode -> array_mode','composite_mode',1,'p_composite_mode','Parser.py',233),
  ('string_mode -> CHARS LBRACKET string_length RBRACKET','string_mode',4,'p_string_mode','Parser.py',237),
  ('string_length -> integer_literal','string_length',1,'p_string_length','Parser.py',241),
  ('array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode','array_mode',5,'p_array_mode','Parser.py',245),
  ('index_mode_list -> index_mode','index_mode_list',1,'p_index_mode_list','Parser.py',249),
  ('index_mode_list -> index_mode COMMA index_mode_list','index_mode_list',3,'p_index_mode_list','Parser.py',250),
  ('index_mode -> discrete_mode','index_mode',1,'p_index_mode','Parser.py',256),
  ('index_mode -> literal_range','index_mode',1,'p_index_mode','Parser.py',257),
  ('element_mode -> mode','element_mode',1,'p_element_mode','Parser.py',261),
  ('location -> identifier','location',1,'p_location','Parser.py',270),
  ('location -> dereferenced_reference','location',1,'p_location','Parser.py',271),
  ('location -> string_element','location',1,'p_location','Parser.py',272),
  ('location -> string_slice','location',1,'p_location','Parser.py',273),
  ('location -> array_element','location',1,'p_location','Parser.py',274),
  ('location -> array_slice','location',1,'p_location','Parser.py',275),
  ('dereferenced_reference -> array_location ARROW','dereferenced_reference',2,'p_dereferenced_reference','Parser.py',279),
  ('string_element -> identifier LBRACKET start_element LBRACKET','string_element',4,'p_string_element','Parser.py',283),
  ('start_element -> expression','start_element',1,'p_start_element','Parser.py',287),
  ('string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET','string_slice',6,'p_string_slice','Parser.py',291),
  ('left_element -> expression','left_element',1,'p_left_element','Parser.py',295),
  ('right_element -> expression','right_element',1,'p_right_element','Parser.py',299),
  ('array_element -> array_location LBRACKET expression_list RBRACKET','array_element',4,'p_array_element','Parser.py',303),
  ('expression_list -> expression','expression_list',1,'p_expression_list','Parser.py',307),
  ('expression_list -> expression COMMA expression_list','expression_list',3,'p_expression_list','Parser.py',308),
  ('array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET','array_slice',6,'p_array_slice','Parser.py',315),
  ('array_location -> location','array_location',1,'p_array_location','Parser.py',319),
  ('expression -> operand0','expression',1,'p_expression','Parser.py',327),
  ('expression -> conditional_expression','expression',1,'p_expression','Parser.py',328),
  ('parenthesized_expression -> LPAREN expression RPAREN','parenthesized_expression',3,'p_parenthesized_expression','Parser.py',332),
  ('conditional_expression -> IF expression then_expression else_expression FI','conditional_expression',5,'p_conditional_expression','Parser.py',340),
  ('conditional_expression -> IF expression then_expression elsif_expression else_expression FI','conditional_expression',6,'p_conditional_expression','Parser.py',341),
  ('then_expression -> THEN expression','then_expression',2,'p_then_expression','Parser.py',345),
  ('else_expression -> ELSE expression','else_expression',2,'p_else_expression','Parser.py',349),
  ('elsif_expression -> ELSIF expression then_expression','elsif_expression',3,'p_elsif_expression','Parser.py',353),
  ('elsif_expression -> elsif_expression ELSIF expression then_expression','elsif_expression',4,'p_elsif_expression','Parser.py',354),
  ('operand0 -> operand1','operand0',1,'p_operand0','Parser.py',367),
  ('operand0 -> operand0 operator1 operand1','operand0',3,'p_operand0','Parser.py',368),
  ('operand1 -> operand2','operand1',1,'p_operand1','Parser.py',375),
  ('operand1 -> operand1 operator2 operand2','operand1',3,'p_operand1','Parser.py',376),
  ('operand2 -> operand3','operand2',1,'p_operand2','Parser.py',383),
  ('operand2 -> operand2 arithmetic_multiplicative_operator operand3','operand2',3,'p_operand2','Parser.py',384),
  ('operand3 -> monadic_operator operand4','operand3',2,'p_operand3','Parser.py',392),
  ('operand3 -> operand4','operand3',1,'p_operand3','Parser.py',393),
  ('operand4 -> array_location','operand4',1,'p_operand4','Parser.py',400),
  ('operand4 -> referenced_location','operand4',1,'p_operand4','Parser.py',401),
  ('operand4 -> primitive_value','operand4',1,'p_operand4','Parser.py',402),
  ('arithmetic_multiplicative_operator -> TIMES','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',406),
  ('arithmetic_multiplicative_operator -> DIVIDE','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',407),
  ('arithmetic_multiplicative_operator -> MODULO','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',408),
  ('monadic_operator -> MINUS','monadic_operator',1,'p_monadic_operator','Parser.py',412),
  ('monadic_operator -> NOT','monadic_operator',1,'p_monadic_operator','Parser.py',413),
  ('referenced_location -> ARROW array_location','referenced_location',2,'p_referenced_location','Parser.py',417),
  ('operator1 -> relational_operator','operator1',1,'p_operator1','Parser.py',425),
  ('operator1 -> membership_operator','operator1',1,'p_operator1','Parser.py',426),
  ('operator2 -> arithmetic_additive_operator','operator2',1,'p_operator2','Parser.py',430),
  ('operator2 -> string_concatenation_operator','operator2',1,'p_operator2','Parser.py',431),
  ('arithmetic_additive_operator -> PLUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','Parser.py',435),
  ('arithmetic_additive_operator -> MINUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','Parser.py',436),
  ('string_concatenation_operator -> CONCAT','string_concatenation_operator',1,'p_string_concatenation_operator','Parser.py',440),
  ('relational_operator -> AND','relational_operator',1,'p_relational_operator','Parser.py',444),
  ('relational_operator -> OR','relational_operator',1,'p_relational_operator','Parser.py',445),
  ('relational_operator -> EQUAL','relational_operator',1,'p_relational_operator','Parser.py',446),
  ('relational_operator -> NOTEQ','relational_operator',1,'p_relational_operator','Parser.py',447),
  ('relational_operator -> GREATER','relational_operator',1,'p_relational_operator','Parser.py',448),
  ('relational_operator -> GTEQUAL','relational_operator',1,'p_relational_operator','Parser.py',449),
  ('relational_operator -> LESS','relational_operator',1,'p_relational_operator','Parser.py',450),
  ('relational_operator -> LTEQUAL','relational_operator',1,'p_relational_operator','Parser.py',451),
  ('membership_operator -> IN','membership_operator',1,'p_membership_operator','Parser.py',455),
  ('primitive_value -> literal','primitive_value',1,'p_primitive_value','Parser.py',464),
  ('primitive_value -> value_array_element','primitive_value',1,'p_primitive_value','Parser.py',465),
  ('primitive_value -> value_array_slice','primitive_value',1,'p_primitive_value','Parser.py',466),
  ('primitive_value -> parenthesized_expression','primitive_value',1,'p_primitive_value','Parser.py',467),
  ('literal -> integer_literal','literal',1,'p_literal','Parser.py',471),
  ('literal -> boolean_literal','literal',1,'p_literal','Parser.py',472),
  ('literal -> character_literal','literal',1,'p_literal','Parser.py',473),
  ('literal -> empty_literal','literal',1,'p_literal','Parser.py',474),
  ('literal -> character_string_literal','literal',1,'p_literal','Parser.py',475),
  ('value_array_element -> primitive_value LBRACKET expression_list RBRACKET','value_array_element',4,'p_value_array_element','Parser.py',479),
  ('value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET','value_array_slice',6,'p_value_array_slice','Parser.py',483),
  ('integer_literal -> ICONST','integer_literal',1,'p_integer_literal','Parser.py',491),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','Parser.py',495),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','Parser.py',496),
  ('character_literal -> CCONST','character_literal',1,'p_character_literal','Parser.py',500),
  ('empty_literal -> NULL','empty_literal',1,'p_empty_literal','Parser.py',504),
  ('character_string_literal -> SCONST','character_string_literal',1,'p_character_string_literal','Parser.py',508),
  ('action_statement -> identifier COLON action','action_statement',3,'p_action_statement','Parser.py',518),
  ('action_statement -> action','action_statement',1,'p_action_statement','Parser.py',519),
  ('action -> bracketed_action','action',1,'p_action','Parser.py',525),
  ('action -> assignment_action','action',1,'p_action','Parser.py',526),
  ('bracketed_action -> if_action','bracketed_action',1,'p_bracketed_action','Parser.py',531),
  ('assignment_action -> array_location assigning_operator expression','assignment_action',3,'p_assignment_action','Parser.py',535),
  ('assigning_operator -> closed_dyadic_operator ASSIGN','assigning_operator',2,'p_assigning_operator','Parser.py',539),
  ('assigning_operator -> ASSIGN','assigning_operator',1,'p_assigning_operator','Parser.py',540),
  ('closed_dyadic_operator -> arithmetic_additive_operator','closed_dyadic_operator',1,'p_closed_dyadic_operator','Parser.py',544),
  ('closed_dyadic_operator -> arithmetic_multiplicative_operator','closed_dyadic_operator',1,'p_closed_dyadic_operator','Parser.py',545),
  ('closed_dyadic_operator -> string_concatenation_operator','closed_dyadic_operator',1,'p_closed_dyadic_operator','Parser.py',546),
  ('if_action -> IF expression then_clause else_clause FI','if_action',5,'p_if_action','Parser.py',550),
  ('if_action -> IF expression then_clause','if_action',3,'p_if_action','Parser.py',551),
  ('then_clause -> THEN action_statement_list','then_clause',2,'p_then_clause','Parser.py',555),
  ('else_clause -> ELSE action_statement_list','else_clause',2,'p_else_clause','Parser.py',559),
  ('else_clause -> ELSIF expression then_clause else_clause','else_clause',4,'p_else_clause','Parser.py',560),
  ('else_clause -> ELSIF expression then_clause','else_clause',3,'p_else_clause','Parser.py',561),
  ('action_statement_list -> action_statement action_statement_nullable','action_statement_list',2,'p_action_statement_list','Parser.py',572),
  ('action_statement_nullable -> action_statement action_statement_nullable','action_statement_nullable',2,'p_action_statement_nullable','Parser.py',582),
  ('action_statement_nullable -> empty','action_statement_nullable',1,'p_action_statement_nullable','Parser.py',583),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',596),
]
