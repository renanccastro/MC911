
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ICONST CCONST SCONST COMMA PLUS MINUS TIMES DIVIDE COLON LPAREN RPAREN ASSIGN SEMI ARROW LTEQUAL LESS GREATER GTEQUAL EQUAL LBRACKET RBRACKET ID MODULO AND OR NOTEQ NOT CONCAT DCL LOC PROC IF DOWN ELSE DO ABS RETURN READ BY FI TYPE THEN PRINT REF BOOL TO RETURNS ARRAY WHILE OD ELSIF ASC LENGTH CHAR NUM RESULT UPPER SYN FOR CHARS END EXIT NULL IN LOWER FALSE TRUE INTprogram : statement_liststatement_list : statement statement_nullablestatement_nullable : statement statement_nullable\n                              | emptystatement : declaration_statement\n                     | synonym_statement\n                     | newmode_statementsynonym_statement : SYN synonym_list SEMIsynonym_list : synonym_definition\n                        | synonym_definition COMMA synonym_listsynonym_definition : identifier_list mode ASSIGN expression\n                              | identifier_list ASSIGN expressiondeclaration_statement : DCL declaration_list SEMIdeclaration_list : declaration\n                            | declaration COMMA declaration_listdeclaration : identifier_list mode initialization\n                       | identifier_list modeinitialization : ASSIGN expressionidentifier_list : identifier\n                           | identifier COMMA identifier_listidentifier : IDnewmode_statement : TYPE newmode_list SEMInewmode_list : mode_definition\n                        | mode_definition COMMA newmode_listmode_definition : identifier_list ASSIGN modemode : mode_name\n                | discrete_mode\n                | reference_mode\n                | composite_modemode_name : identifierdiscrete_mode : integer_mode\n                         | boolean_mode\n                         | character_mode\n                         | discrete_range_modediscrete_mode_name : identifierinteger_mode : INTboolean_mode : BOOLcharacter_mode : CHARdiscrete_range_mode : discrete_mode_name LPAREN literal_range RPAREN\n                               | discrete_mode LPAREN literal_range RPARENliteral_range : lower_bound COLON upper_boundlower_bound : expressionupper_bound : expressionreference_mode : REF modecomposite_mode : string_mode\n                          | array_modestring_mode : CHARS LBRACKET string_length RBRACKETstring_length : integer_literalarray_mode : ARRAY LBRACKET index_mode_list RBRACKET element_modeindex_mode_list : index_mode\n                           | index_mode COMMA index_mode_listindex_mode : discrete_mode\n                      | literal_rangeelement_mode : modelocation : identifier\n\t\t\t\t    | dereferenced_reference\n\t\t\t\t    | string_element\n\t\t\t\t    | string_slice\n\t\t\t\t    | array_element\n\t\t\t\t    | array_slicedereferenced_reference : array_location ARROWstring_element : identifier LBRACKET start_element LBRACKETstart_element : expressionstring_slice : identifier LBRACKET left_element COLON right_element RBRACKETleft_element : expressionright_element : expressionarray_element : array_location LBRACKET expression_list RBRACKETexpression_list : expression\n    \t\t\t\t\t   | expression COMMA expression_listarray_slice : array_location LBRACKET lower_bound COLON upper_bound RBRACKETarray_location : locationexpression : operand0\n                      | conditional_expressionconditional_expression : IF expression then_expression else_expression FI\n                                  | IF expression then_expression elsif_expression else_expression FIthen_expression : THEN expressionelse_expression : ELSE expressionelsif_expression : ELSIF expression then_expression\n                            | elsif_expression ELSIF expression then_expressionoperand0 : operand1\n                    | operand0 operator1 operand1operand1 : operand2\n                    | operand1 operator2 operand2operand2 : operand3\n                    | operand2 arithmetic_multiplicative_operator operand3operand3 : monadic_operator operand4\n                    | operand4operand4 : array_location\n                    | referenced_location\n                    | primitive_valuearithmetic_multiplicative_operator : TIMES\n                                              | DIVIDE\n                                              | MODULOmonadic_operator : MINUS\n                            | NOTreferenced_location : ARROW array_locationoperator1 : relational_operator\n                     | membership_operatoroperator2 : arithmetic_additive_operator\n                     | string_concatenation_operatorarithmetic_additive_operator : PLUS\n                                        | MINUSstring_concatenation_operator : CONCATrelational_operator : AND\n                               | OR\n                               | EQUAL\n                               | NOTEQ\n                               | GREATER\n                               | GTEQUAL\n                               | LESS\n                               | LTEQUALmembership_operator : INprimitive_value : literalliteral : integer_literal\n                   | boolean_literal\n                   | character_literal\n                   | empty_literal\n                   | character_string_literalinteger_literal : ICONSTboolean_literal : TRUE\n                           | FALSEcharacter_literal : CCONSTempty_literal : NULLcharacter_string_literal : SCONSTempty :'
    
_lr_action_items = {'FALSE':([50,57,59,62,63,65,73,89,91,96,114,115,116,117,118,119,122,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,143,146,157,165,166,167,169,171,180,],[66,66,66,66,66,66,66,-95,-94,66,-101,-100,-102,-103,66,-99,66,66,-92,66,-93,-91,-106,-112,-97,66,-98,-108,-107,-110,-109,-111,-105,-104,66,66,66,66,66,66,66,66,66,]),'EQUAL':([11,66,67,69,70,71,72,74,75,76,77,78,79,80,81,83,84,85,86,87,90,92,93,94,95,97,98,99,111,120,121,123,148,155,158,164,168,184,185,],[-21,-121,-57,-80,-113,-89,-118,-124,-117,-122,-120,-88,-87,-114,-58,-84,-123,-55,-90,-82,-71,-56,-119,-116,-60,-115,130,-59,-55,-86,-61,-96,-83,-85,-81,-67,-62,-70,-64,]),'LBRACKET':([11,35,39,66,67,69,70,71,72,74,75,76,77,78,79,80,81,83,84,85,86,87,88,90,92,93,94,95,97,98,99,111,120,121,123,148,152,154,155,158,164,168,183,184,185,187,],[-21,60,62,-121,-57,-80,-113,-89,-118,-124,-117,-122,-120,122,-87,-114,-58,-84,-123,124,-90,-82,-73,-71,-56,-119,-116,-60,-115,-72,-59,124,-86,-61,122,-83,-63,168,-85,-81,-67,-62,-74,-70,-64,-75,]),'SYN':([0,3,6,7,9,22,27,28,51,],[4,-7,4,-6,-5,4,-22,-13,-8,]),'CHARS':([11,12,16,18,24,38,55,145,],[-21,-19,35,35,35,35,-20,35,]),'INT':([11,12,16,18,24,38,55,62,145,146,],[-21,-19,36,36,36,36,-20,36,36,36,]),'$end':([3,5,6,7,8,9,21,22,23,27,28,51,53,],[-7,0,-125,-6,-1,-5,-4,-125,-2,-22,-13,-8,-3,]),'REF':([11,12,16,18,24,38,55,145,],[-21,-19,38,38,38,38,-20,38,]),'LPAREN':([11,30,31,33,34,36,37,40,42,44,46,108,111,142,147,],[-21,-35,-34,-37,59,-36,-33,-31,-38,-32,63,59,-35,-40,-39,]),'ARRAY':([11,12,16,18,24,38,55,145,],[-21,-19,39,39,39,39,-20,39,]),'ELSE':([11,66,67,69,70,71,72,74,75,76,77,78,79,80,81,83,84,85,86,87,88,90,92,93,94,95,97,98,99,120,121,123,148,155,156,158,164,168,170,173,183,184,185,187,188,189,],[-21,-121,-57,-80,-113,-89,-118,-124,-117,-122,-120,-88,-87,-114,-58,-84,-123,-55,-90,-82,-73,-71,-56,-119,-116,-60,-115,-72,-59,-86,-61,-96,-83,-85,169,-81,-67,-62,169,-76,-74,-70,-64,-75,-78,-79,]),'COMMA':([11,12,13,17,20,29,30,31,32,33,34,36,37,40,41,42,43,44,45,47,54,58,61,66,67,68,69,70,71,72,74,75,76,77,78,79,80,81,83,84,85,86,87,88,90,92,93,94,95,97,98,99,101,108,109,110,113,120,121,123,142,144,147,148,150,155,158,159,160,161,162,164,168,175,183,184,185,187,],[-21,25,26,48,52,-28,-30,-34,-17,-37,-27,-36,-33,-31,-29,-38,-26,-32,-45,-46,-25,-16,-44,-121,-57,-12,-80,-113,-89,-118,-124,-117,-122,-120,-88,-87,-114,-58,-84,-123,-55,-90,-82,-73,-71,-56,-119,-116,-60,-115,-72,-59,-18,-52,146,-53,-11,-86,-61,-96,-40,-47,-39,-83,165,-85,-81,-43,-41,-49,-54,-67,-62,165,-74,-70,-64,-75,]),'BOOL':([11,12,16,18,24,38,55,62,145,146,],[-21,-19,33,33,33,33,-20,33,33,33,]),'ELSIF':([11,66,67,69,70,71,72,74,75,76,77,78,79,80,81,83,84,85,86,87,88,90,92,93,94,95,97,98,99,120,121,123,148,155,156,158,164,168,170,173,183,184,185,187,188,189,],[-21,-121,-57,-80,-113,-89,-118,-124,-117,-122,-120,-88,-87,-114,-58,-84,-123,-55,-90,-82,-73,-71,-56,-119,-116,-60,-115,-72,-59,-86,-61,-96,-83,-85,171,-81,-67,-62,180,-76,-74,-70,-64,-75,-78,-79,]),'MINUS':([11,50,57,59,62,63,65,66,67,69,70,71,72,74,75,76,77,78,79,80,81,83,84,85,86,87,90,92,93,94,95,96,97,99,111,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,143,146,148,155,157,158,164,165,166,167,168,169,171,180,184,185,],[-21,91,91,91,91,91,91,-121,-57,116,-113,-89,-118,-124,-117,-122,-120,-88,-87,-114,-58,-84,-123,-55,-90,-82,-71,-56,-119,-116,-60,91,-115,-59,-55,-101,-100,-102,-103,91,-99,-86,-61,91,-96,91,-92,91,-93,-91,-106,-112,-97,91,-98,-108,-107,-110,-109,-111,-105,-104,91,91,-83,-85,91,116,-67,91,91,91,-62,91,91,91,-70,-64,]),'FI':([11,66,67,69,70,71,72,74,75,76,77,78,79,80,81,83,84,85,86,87,88,90,92,93,94,95,97,98,99,120,121,123,148,155,158,164,168,172,179,181,183,184,185,187,],[-21,-121,-57,-80,-113,-89,-118,-124,-117,-122,-120,-88,-87,-114,-58,-84,-123,-55,-90,-82,-73,-71,-56,-119,-116,-60,-115,-72,-59,-86,-61,-96,-83,-85,-81,-67,-62,183,-77,187,-74,-70,-64,-75,]),'ASSIGN':([10,11,12,18,29,30,31,32,33,34,36,37,40,41,42,43,44,45,47,49,55,61,142,144,147,161,162,],[24,-21,-19,50,-28,-30,-34,57,-37,-27,-36,-33,-31,-29,-38,-26,-32,-45,-46,65,-20,-44,-40,-47,-39,-49,-54,]),'NULL':([50,57,59,62,63,65,73,89,91,96,114,115,116,117,118,119,122,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,143,146,157,165,166,167,169,171,180,],[84,84,84,84,84,84,84,-95,-94,84,-101,-100,-102,-103,84,-99,84,84,-92,84,-93,-91,-106,-112,-97,84,-98,-108,-107,-110,-109,-111,-105,-104,84,84,84,84,84,84,84,84,84,]),'RPAREN':([11,66,67,69,70,71,72,74,75,76,77,78,79,80,81,83,84,85,86,87,88,90,92,93,94,95,97,98,99,103,112,120,121,123,148,155,158,159,160,164,168,183,184,185,187,],[-21,-121,-57,-80,-113,-89,-118,-124,-117,-122,-120,-88,-87,-114,-58,-84,-123,-55,-90,-82,-73,-71,-56,-119,-116,-60,-115,-72,-59,142,147,-86,-61,-96,-83,-85,-81,-43,-41,-67,-62,-74,-70,-64,-75,]),'SCONST':([50,57,59,62,63,65,73,89,91,96,114,115,116,117,118,119,122,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,143,146,157,165,166,167,169,171,180,],[74,74,74,74,74,74,74,-95,-94,74,-101,-100,-102,-103,74,-99,74,74,-92,74,-93,-91,-106,-112,-97,74,-98,-108,-107,-110,-109,-111,-105,-104,74,74,74,74,74,74,74,74,74,]),'THEN':([11,66,67,69,70,71,72,74,75,76,77,78,79,80,81,83,84,85,86,87,88,90,92,93,94,95,97,98,99,120,121,123,129,148,155,158,164,168,182,183,184,185,186,187,],[-21,-121,-57,-80,-113,-89,-118,-124,-117,-122,-120,-88,-87,-114,-58,-84,-123,-55,-90,-82,-73,-71,-56,-119,-116,-60,-115,-72,-59,-86,-61,-96,157,-83,-85,-81,-67,-62,157,-74,-70,-64,157,-75,]),'SEMI':([11,13,14,15,17,19,20,29,30,31,32,33,34,36,37,40,41,42,43,44,45,47,54,56,58,61,64,66,67,68,69,70,71,72,74,75,76,77,78,79,80,81,83,84,85,86,87,88,90,92,93,94,95,97,98,99,100,101,113,120,121,123,142,144,147,148,155,158,161,162,164,168,183,184,185,187,],[-21,-23,27,28,-14,51,-9,-28,-30,-34,-17,-37,-27,-36,-33,-31,-29,-38,-26,-32,-45,-46,-25,-24,-16,-44,-15,-121,-57,-12,-80,-113,-89,-118,-124,-117,-122,-120,-88,-87,-114,-58,-84,-123,-55,-90,-82,-73,-71,-56,-119,-116,-60,-115,-72,-59,-10,-18,-11,-86,-61,-96,-40,-47,-39,-83,-85,-81,-49,-54,-67,-62,-74,-70,-64,-75,]),'CCONST':([50,57,59,62,63,65,73,89,91,96,114,115,116,117,118,119,122,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,143,146,157,165,166,167,169,171,180,],[76,76,76,76,76,76,76,-95,-94,76,-101,-100,-102,-103,76,-99,76,76,-92,76,-93,-91,-106,-112,-97,76,-98,-108,-107,-110,-109,-111,-105,-104,76,76,76,76,76,76,76,76,76,]),'PLUS':([11,66,67,69,70,71,72,74,75,76,77,78,79,80,81,83,84,85,86,87,90,92,93,94,95,97,99,111,120,121,123,148,155,158,164,168,184,185,],[-21,-121,-57,114,-113,-89,-118,-124,-117,-122,-120,-88,-87,-114,-58,-84,-123,-55,-90,-82,-71,-56,-119,-116,-60,-115,-59,-55,-86,-61,-96,-83,-85,114,-67,-62,-70,-64,]),'AND':([11,66,67,69,70,71,72,74,75,76,77,78,79,80,81,83,84,85,86,87,90,92,93,94,95,97,98,99,111,120,121,123,148,155,158,164,168,184,185,],[-21,-121,-57,-80,-113,-89,-118,-124,-117,-122,-120,-88,-87,-114,-58,-84,-123,-55,-90,-82,-71,-56,-119,-116,-60,-115,141,-59,-55,-86,-61,-96,-83,-85,-81,-67,-62,-70,-64,]),'TRUE':([50,57,59,62,63,65,73,89,91,96,114,115,116,117,118,119,122,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,143,146,157,165,166,167,169,171,180,],[77,77,77,77,77,77,77,-95,-94,77,-101,-100,-102,-103,77,-99,77,77,-92,77,-93,-91,-106,-112,-97,77,-98,-108,-107,-110,-109,-111,-105,-104,77,77,77,77,77,77,77,77,77,]),'ARROW':([11,50,57,59,62,63,65,67,73,78,81,85,89,90,91,92,95,96,99,111,114,115,116,117,118,119,121,122,123,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,143,146,157,164,165,166,167,168,169,171,180,184,185,],[-21,82,82,82,82,82,82,-57,82,121,-58,-55,-95,-71,-94,-56,-60,82,-59,-55,-101,-100,-102,-103,82,-99,-61,82,121,82,-92,82,-93,-91,-106,-112,-97,82,-98,-108,-107,-110,-109,-111,-105,-104,82,82,82,-67,82,82,82,-62,82,82,82,-70,-64,]),'LESS':([11,66,67,69,70,71,72,74,75,76,77,78,79,80,81,83,84,85,86,87,90,92,93,94,95,97,98,99,111,120,121,123,148,155,158,164,168,184,185,],[-21,-121,-57,-80,-113,-89,-118,-124,-117,-122,-120,-88,-87,-114,-58,-84,-123,-55,-90,-82,-71,-56,-119,-116,-60,-115,137,-59,-55,-86,-61,-96,-83,-85,-81,-67,-62,-70,-64,]),'TYPE':([0,3,6,7,9,22,27,28,51,],[1,-7,1,-6,-5,1,-22,-13,-8,]),'NOT':([50,57,59,62,63,65,96,114,115,116,117,118,119,122,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,143,146,157,165,166,167,169,171,180,],[89,89,89,89,89,89,89,-101,-100,-102,-103,89,-99,89,89,-92,89,-93,-91,-106,-112,-97,89,-98,-108,-107,-110,-109,-111,-105,-104,89,89,89,89,89,89,89,89,89,]),'DCL':([0,3,6,7,9,22,27,28,51,],[2,-7,2,-6,-5,2,-22,-13,-8,]),'LTEQUAL':([11,66,67,69,70,71,72,74,75,76,77,78,79,80,81,83,84,85,86,87,90,92,93,94,95,97,98,99,111,120,121,123,148,155,158,164,168,184,185,],[-21,-121,-57,-80,-113,-89,-118,-124,-117,-122,-120,-88,-87,-114,-58,-84,-123,-55,-90,-82,-71,-56,-119,-116,-60,-115,139,-59,-55,-86,-61,-96,-83,-85,-81,-67,-62,-70,-64,]),'ID':([1,2,4,11,12,16,18,24,25,26,38,48,50,52,55,57,59,62,63,65,73,82,89,91,96,114,115,116,117,118,119,122,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,143,145,146,157,165,166,167,169,171,180,],[11,11,11,-21,-19,11,11,11,11,11,11,11,11,11,-20,11,11,11,11,11,11,11,-95,-94,11,-101,-100,-102,-103,11,-99,11,11,-92,11,-93,-91,-106,-112,-97,11,-98,-108,-107,-110,-109,-111,-105,-104,11,11,11,11,11,11,11,11,11,11,]),'CONCAT':([11,66,67,69,70,71,72,74,75,76,77,78,79,80,81,83,84,85,86,87,90,92,93,94,95,97,99,111,120,121,123,148,155,158,164,168,184,185,],[-21,-121,-57,117,-113,-89,-118,-124,-117,-122,-120,-88,-87,-114,-58,-84,-123,-55,-90,-82,-71,-56,-119,-116,-60,-115,-59,-55,-86,-61,-96,-83,-85,117,-67,-62,-70,-64,]),'CHAR':([11,12,16,18,24,38,55,62,145,146,],[-21,-19,42,42,42,42,-20,42,42,42,]),'IN':([11,66,67,69,70,71,72,74,75,76,77,78,79,80,81,83,84,85,86,87,90,92,93,94,95,97,98,99,111,120,121,123,148,155,158,164,168,184,185,],[-21,-121,-57,-80,-113,-89,-118,-124,-117,-122,-120,-88,-87,-114,-58,-84,-123,-55,-90,-82,-71,-56,-119,-116,-60,-115,131,-59,-55,-86,-61,-96,-83,-85,-81,-67,-62,-70,-64,]),'ICONST':([50,57,59,60,62,63,65,73,89,91,96,114,115,116,117,118,119,122,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,143,146,157,165,166,167,169,171,180,],[93,93,93,93,93,93,93,93,-95,-94,93,-101,-100,-102,-103,93,-99,93,93,-92,93,-93,-91,-106,-112,-97,93,-98,-108,-107,-110,-109,-111,-105,-104,93,93,93,93,93,93,93,93,93,]),'TIMES':([11,66,67,70,71,72,74,75,76,77,78,79,80,81,83,84,85,86,87,90,92,93,94,95,97,99,111,120,121,123,148,155,164,168,184,185,],[-21,-121,-57,-113,-89,-118,-124,-117,-122,-120,-88,-87,-114,-58,-84,-123,-55,-90,128,-71,-56,-119,-116,-60,-115,-59,-55,-86,-61,-96,128,-85,-67,-62,-70,-64,]),'COLON':([11,66,67,69,70,71,72,74,75,76,77,78,79,80,81,83,84,85,86,87,88,90,92,93,94,95,97,98,99,102,104,111,120,121,123,148,150,151,152,153,155,158,164,168,183,184,185,187,],[-21,-121,-57,-80,-113,-89,-118,-124,-117,-122,-120,-88,-87,-114,-58,-84,-123,-55,-90,-82,-73,-71,-56,-119,-116,-60,-115,-72,-59,-42,143,-55,-86,-61,-96,-83,-42,166,-65,167,-85,-81,-67,-62,-74,-70,-64,-75,]),'IF':([50,57,59,62,63,65,96,122,124,143,146,157,165,166,167,169,171,180,],[96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'GREATER':([11,66,67,69,70,71,72,74,75,76,77,78,79,80,81,83,84,85,86,87,90,92,93,94,95,97,98,99,111,120,121,123,148,155,158,164,168,184,185,],[-21,-121,-57,-80,-113,-89,-118,-124,-117,-122,-120,-88,-87,-114,-58,-84,-123,-55,-90,-82,-71,-56,-119,-116,-60,-115,135,-59,-55,-86,-61,-96,-83,-85,-81,-67,-62,-70,-64,]),'RBRACKET':([11,31,33,36,37,40,42,44,66,67,69,70,71,72,74,75,76,77,78,79,80,81,83,84,85,86,87,88,90,92,93,94,95,97,98,99,105,106,107,108,109,110,120,121,123,142,147,148,149,150,155,158,159,160,163,164,168,174,175,176,177,178,183,184,185,187,],[-21,-34,-37,-36,-33,-31,-38,-32,-121,-57,-80,-113,-89,-118,-124,-117,-122,-120,-88,-87,-114,-58,-84,-123,-55,-90,-82,-73,-71,-56,-119,-116,-60,-115,-72,-59,144,-48,145,-52,-50,-53,-86,-61,-96,-40,-39,-83,164,-68,-85,-81,-43,-41,-51,-67,-62,-69,-68,184,-66,185,-74,-70,-64,-75,]),'NOTEQ':([11,66,67,69,70,71,72,74,75,76,77,78,79,80,81,83,84,85,86,87,90,92,93,94,95,97,98,99,111,120,121,123,148,155,158,164,168,184,185,],[-21,-121,-57,-80,-113,-89,-118,-124,-117,-122,-120,-88,-87,-114,-58,-84,-123,-55,-90,-82,-71,-56,-119,-116,-60,-115,136,-59,-55,-86,-61,-96,-83,-85,-81,-67,-62,-70,-64,]),'DIVIDE':([11,66,67,70,71,72,74,75,76,77,78,79,80,81,83,84,85,86,87,90,92,93,94,95,97,99,111,120,121,123,148,155,164,168,184,185,],[-21,-121,-57,-113,-89,-118,-124,-117,-122,-120,-88,-87,-114,-58,-84,-123,-55,-90,125,-71,-56,-119,-116,-60,-115,-59,-55,-86,-61,-96,125,-85,-67,-62,-70,-64,]),'GTEQUAL':([11,66,67,69,70,71,72,74,75,76,77,78,79,80,81,83,84,85,86,87,90,92,93,94,95,97,98,99,111,120,121,123,148,155,158,164,168,184,185,],[-21,-121,-57,-80,-113,-89,-118,-124,-117,-122,-120,-88,-87,-114,-58,-84,-123,-55,-90,-82,-71,-56,-119,-116,-60,-115,138,-59,-55,-86,-61,-96,-83,-85,-81,-67,-62,-70,-64,]),'MODULO':([11,66,67,70,71,72,74,75,76,77,78,79,80,81,83,84,85,86,87,90,92,93,94,95,97,99,111,120,121,123,148,155,164,168,184,185,],[-21,-121,-57,-113,-89,-118,-124,-117,-122,-120,-88,-87,-114,-58,-84,-123,-55,-90,127,-71,-56,-119,-116,-60,-115,-59,-55,-86,-61,-96,127,-85,-67,-62,-70,-64,]),'OR':([11,66,67,69,70,71,72,74,75,76,77,78,79,80,81,83,84,85,86,87,90,92,93,94,95,97,98,99,111,120,121,123,148,155,158,164,168,184,185,],[-21,-121,-57,-80,-113,-89,-118,-124,-117,-122,-120,-88,-87,-114,-58,-84,-123,-55,-90,-82,-71,-56,-119,-116,-60,-115,140,-59,-55,-86,-61,-96,-83,-85,-81,-67,-62,-70,-64,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'string_element':([50,57,59,62,63,65,73,82,96,118,122,124,126,133,143,146,157,165,166,167,169,171,180,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'expression_list':([122,165,],[149,174,]),'expression':([50,57,59,62,63,65,96,122,124,143,146,157,165,166,167,169,171,180,],[68,101,102,102,102,113,129,150,152,159,102,173,175,159,177,179,182,186,]),'discrete_range_mode':([16,18,24,38,62,145,146,],[31,31,31,31,31,31,31,]),'index_mode_list':([62,146,],[107,163,]),'operand1':([50,57,59,62,63,65,96,122,124,133,143,146,157,165,166,167,169,171,180,],[69,69,69,69,69,69,69,69,69,158,69,69,69,69,69,69,69,69,69,]),'literal':([50,57,59,62,63,65,73,96,118,122,124,126,133,143,146,157,165,166,167,169,171,180,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'empty':([6,22,],[21,21,]),'statement':([0,6,22,],[6,22,22,]),'identifier_list':([1,2,4,25,26,48,52,],[10,16,18,55,10,16,18,]),'referenced_location':([50,57,59,62,63,65,73,96,118,122,124,126,133,143,146,157,165,166,167,169,171,180,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'statement_nullable':([6,22,],[23,53,]),'string_length':([60,],[105,]),'declaration':([2,48,],[17,17,]),'character_string_literal':([50,57,59,62,63,65,73,96,118,122,124,126,133,143,146,157,165,166,167,169,171,180,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'integer_mode':([16,18,24,38,62,145,146,],[40,40,40,40,40,40,40,]),'string_concatenation_operator':([69,158,],[115,115,]),'composite_mode':([16,18,24,38,145,],[41,41,41,41,41,]),'declaration_list':([2,48,],[15,64,]),'mode_name':([16,18,24,38,145,],[43,43,43,43,43,]),'newmode_statement':([0,6,22,],[3,3,3,]),'synonym_list':([4,52,],[19,100,]),'operator1':([98,],[133,]),'mode_definition':([1,26,],[13,13,]),'monadic_operator':([50,57,59,62,63,65,96,118,122,124,126,133,143,146,157,165,166,167,169,171,180,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'program':([0,],[5,]),'empty_literal':([50,57,59,62,63,65,73,96,118,122,124,126,133,143,146,157,165,166,167,169,171,180,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'discrete_mode_name':([16,18,24,38,62,145,146,],[46,46,46,46,46,46,46,]),'index_mode':([62,146,],[109,109,]),'right_element':([167,],[178,]),'literal_range':([59,62,63,146,],[103,110,112,110,]),'else_expression':([156,170,],[172,181,]),'array_location':([50,57,59,62,63,65,73,82,96,118,122,124,126,133,143,146,157,165,166,167,169,171,180,],[78,78,78,78,78,78,78,123,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'operand4':([50,57,59,62,63,65,73,96,118,122,124,126,133,143,146,157,165,166,167,169,171,180,],[79,79,79,79,79,79,120,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'integer_literal':([50,57,59,60,62,63,65,73,96,118,122,124,126,133,143,146,157,165,166,167,169,171,180,],[80,80,80,106,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'synonym_definition':([4,52,],[20,20,]),'declaration_statement':([0,6,22,],[9,9,9,]),'string_slice':([50,57,59,62,63,65,73,82,96,118,122,124,126,133,143,146,157,165,166,167,169,171,180,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'then_expression':([129,182,186,],[156,188,189,]),'operand3':([50,57,59,62,63,65,96,118,122,124,126,133,143,146,157,165,166,167,169,171,180,],[83,83,83,83,83,83,83,83,83,83,155,83,83,83,83,83,83,83,83,83,83,]),'relational_operator':([98,],[132,]),'reference_mode':([16,18,24,38,145,],[29,29,29,29,29,]),'identifier':([1,2,4,16,18,24,25,26,38,48,50,52,57,59,62,63,65,73,82,96,118,122,124,126,133,143,145,146,157,165,166,167,169,171,180,],[12,12,12,30,30,30,12,12,30,12,85,12,85,85,111,85,85,85,85,85,85,85,85,85,85,85,30,111,85,85,85,85,85,85,85,]),'boolean_literal':([50,57,59,62,63,65,73,96,118,122,124,126,133,143,146,157,165,166,167,169,171,180,],[97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,]),'primitive_value':([50,57,59,62,63,65,73,96,118,122,124,126,133,143,146,157,165,166,167,169,171,180,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'membership_operator':([98,],[134,]),'mode':([16,18,24,38,145,],[32,49,54,61,162,]),'lower_bound':([59,62,63,122,146,],[104,104,104,151,104,]),'operand2':([50,57,59,62,63,65,96,118,122,124,133,143,146,157,165,166,167,169,171,180,],[87,87,87,87,87,87,87,148,87,87,87,87,87,87,87,87,87,87,87,87,]),'conditional_expression':([50,57,59,62,63,65,96,122,124,143,146,157,165,166,167,169,171,180,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'location':([50,57,59,62,63,65,73,82,96,118,122,124,126,133,143,146,157,165,166,167,169,171,180,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'left_element':([124,],[153,]),'character_mode':([16,18,24,38,62,145,146,],[37,37,37,37,37,37,37,]),'statement_list':([0,],[8,]),'character_literal':([50,57,59,62,63,65,73,96,118,122,124,126,133,143,146,157,165,166,167,169,171,180,],[94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,]),'dereferenced_reference':([50,57,59,62,63,65,73,82,96,118,122,124,126,133,143,146,157,165,166,167,169,171,180,],[92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,]),'start_element':([124,],[154,]),'elsif_expression':([156,],[170,]),'initialization':([32,],[58,]),'upper_bound':([143,166,],[160,176,]),'element_mode':([145,],[161,]),'boolean_mode':([16,18,24,38,62,145,146,],[44,44,44,44,44,44,44,]),'newmode_list':([1,26,],[14,56,]),'string_mode':([16,18,24,38,145,],[45,45,45,45,45,]),'array_slice':([50,57,59,62,63,65,73,82,96,118,122,124,126,133,143,146,157,165,166,167,169,171,180,],[95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'discrete_mode':([16,18,24,38,62,145,146,],[34,34,34,34,108,34,108,]),'arithmetic_additive_operator':([69,158,],[119,119,]),'synonym_statement':([0,6,22,],[7,7,7,]),'operand0':([50,57,59,62,63,65,96,122,124,143,146,157,165,166,167,169,171,180,],[98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,]),'arithmetic_multiplicative_operator':([87,148,],[126,126,]),'array_element':([50,57,59,62,63,65,73,82,96,118,122,124,126,133,143,146,157,165,166,167,169,171,180,],[99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,]),'array_mode':([16,18,24,38,145,],[47,47,47,47,47,]),'operator2':([69,158,],[118,118,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','Parser.py',42),
  ('statement_list -> statement statement_nullable','statement_list',2,'p_statement_list','Parser.py',46),
  ('statement_nullable -> statement statement_nullable','statement_nullable',2,'p_statement_nullable','Parser.py',57),
  ('statement_nullable -> empty','statement_nullable',1,'p_statement_nullable','Parser.py',58),
  ('statement -> declaration_statement','statement',1,'p_statement','Parser.py',70),
  ('statement -> synonym_statement','statement',1,'p_statement','Parser.py',71),
  ('statement -> newmode_statement','statement',1,'p_statement','Parser.py',72),
  ('synonym_statement -> SYN synonym_list SEMI','synonym_statement',3,'p_synonym_statement','Parser.py',81),
  ('synonym_list -> synonym_definition','synonym_list',1,'p_synonym_list','Parser.py',85),
  ('synonym_list -> synonym_definition COMMA synonym_list','synonym_list',3,'p_synonym_list','Parser.py',86),
  ('synonym_definition -> identifier_list mode ASSIGN expression','synonym_definition',4,'p_synonym_definition','Parser.py',95),
  ('synonym_definition -> identifier_list ASSIGN expression','synonym_definition',3,'p_synonym_definition','Parser.py',96),
  ('declaration_statement -> DCL declaration_list SEMI','declaration_statement',3,'p_declaration_statement','Parser.py',107),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','Parser.py',111),
  ('declaration_list -> declaration COMMA declaration_list','declaration_list',3,'p_declaration_list','Parser.py',112),
  ('declaration -> identifier_list mode initialization','declaration',3,'p_declaration','Parser.py',120),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','Parser.py',121),
  ('initialization -> ASSIGN expression','initialization',2,'p_initialization','Parser.py',125),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','Parser.py',129),
  ('identifier_list -> identifier COMMA identifier_list','identifier_list',3,'p_identifier_list','Parser.py',130),
  ('identifier -> ID','identifier',1,'p_identifier','Parser.py',138),
  ('newmode_statement -> TYPE newmode_list SEMI','newmode_statement',3,'p_newmode_statement','Parser.py',146),
  ('newmode_list -> mode_definition','newmode_list',1,'p_newmode_list','Parser.py',150),
  ('newmode_list -> mode_definition COMMA newmode_list','newmode_list',3,'p_newmode_list','Parser.py',151),
  ('mode_definition -> identifier_list ASSIGN mode','mode_definition',3,'p_mode_definition','Parser.py',159),
  ('mode -> mode_name','mode',1,'p_mode','Parser.py',163),
  ('mode -> discrete_mode','mode',1,'p_mode','Parser.py',164),
  ('mode -> reference_mode','mode',1,'p_mode','Parser.py',165),
  ('mode -> composite_mode','mode',1,'p_mode','Parser.py',166),
  ('mode_name -> identifier','mode_name',1,'p_mode_name','Parser.py',170),
  ('discrete_mode -> integer_mode','discrete_mode',1,'p_discrete_mode','Parser.py',176),
  ('discrete_mode -> boolean_mode','discrete_mode',1,'p_discrete_mode','Parser.py',177),
  ('discrete_mode -> character_mode','discrete_mode',1,'p_discrete_mode','Parser.py',178),
  ('discrete_mode -> discrete_range_mode','discrete_mode',1,'p_discrete_mode','Parser.py',179),
  ('discrete_mode_name -> identifier','discrete_mode_name',1,'p_discrete_mode_name','Parser.py',183),
  ('integer_mode -> INT','integer_mode',1,'p_integer_mode','Parser.py',187),
  ('boolean_mode -> BOOL','boolean_mode',1,'p_boolean_mode','Parser.py',191),
  ('character_mode -> CHAR','character_mode',1,'p_character_mode','Parser.py',195),
  ('discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','Parser.py',201),
  ('discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','Parser.py',202),
  ('literal_range -> lower_bound COLON upper_bound','literal_range',3,'p_literal_range','Parser.py',206),
  ('lower_bound -> expression','lower_bound',1,'p_lower_bound','Parser.py',210),
  ('upper_bound -> expression','upper_bound',1,'p_upper_bound','Parser.py',213),
  ('reference_mode -> REF mode','reference_mode',2,'p_reference_mode','Parser.py',219),
  ('composite_mode -> string_mode','composite_mode',1,'p_composite_mode','Parser.py',225),
  ('composite_mode -> array_mode','composite_mode',1,'p_composite_mode','Parser.py',226),
  ('string_mode -> CHARS LBRACKET string_length RBRACKET','string_mode',4,'p_string_mode','Parser.py',230),
  ('string_length -> integer_literal','string_length',1,'p_string_length','Parser.py',234),
  ('array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode','array_mode',5,'p_array_mode','Parser.py',238),
  ('index_mode_list -> index_mode','index_mode_list',1,'p_index_mode_list','Parser.py',242),
  ('index_mode_list -> index_mode COMMA index_mode_list','index_mode_list',3,'p_index_mode_list','Parser.py',243),
  ('index_mode -> discrete_mode','index_mode',1,'p_index_mode','Parser.py',249),
  ('index_mode -> literal_range','index_mode',1,'p_index_mode','Parser.py',250),
  ('element_mode -> mode','element_mode',1,'p_element_mode','Parser.py',254),
  ('location -> identifier','location',1,'p_location','Parser.py',263),
  ('location -> dereferenced_reference','location',1,'p_location','Parser.py',264),
  ('location -> string_element','location',1,'p_location','Parser.py',265),
  ('location -> string_slice','location',1,'p_location','Parser.py',266),
  ('location -> array_element','location',1,'p_location','Parser.py',267),
  ('location -> array_slice','location',1,'p_location','Parser.py',268),
  ('dereferenced_reference -> array_location ARROW','dereferenced_reference',2,'p_dereferenced_reference','Parser.py',272),
  ('string_element -> identifier LBRACKET start_element LBRACKET','string_element',4,'p_string_element','Parser.py',276),
  ('start_element -> expression','start_element',1,'p_start_element','Parser.py',280),
  ('string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET','string_slice',6,'p_string_slice','Parser.py',284),
  ('left_element -> expression','left_element',1,'p_left_element','Parser.py',288),
  ('right_element -> expression','right_element',1,'p_right_element','Parser.py',292),
  ('array_element -> array_location LBRACKET expression_list RBRACKET','array_element',4,'p_array_element','Parser.py',296),
  ('expression_list -> expression','expression_list',1,'p_expression_list','Parser.py',300),
  ('expression_list -> expression COMMA expression_list','expression_list',3,'p_expression_list','Parser.py',301),
  ('array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET','array_slice',6,'p_array_slice','Parser.py',308),
  ('array_location -> location','array_location',1,'p_array_location','Parser.py',312),
  ('expression -> operand0','expression',1,'p_expression','Parser.py',320),
  ('expression -> conditional_expression','expression',1,'p_expression','Parser.py',321),
  ('conditional_expression -> IF expression then_expression else_expression FI','conditional_expression',5,'p_conditional_expression','Parser.py',328),
  ('conditional_expression -> IF expression then_expression elsif_expression else_expression FI','conditional_expression',6,'p_conditional_expression','Parser.py',329),
  ('then_expression -> THEN expression','then_expression',2,'p_then_expression','Parser.py',333),
  ('else_expression -> ELSE expression','else_expression',2,'p_else_expression','Parser.py',337),
  ('elsif_expression -> ELSIF expression then_expression','elsif_expression',3,'p_elsif_expression','Parser.py',340),
  ('elsif_expression -> elsif_expression ELSIF expression then_expression','elsif_expression',4,'p_elsif_expression','Parser.py',341),
  ('operand0 -> operand1','operand0',1,'p_operand0','Parser.py',352),
  ('operand0 -> operand0 operator1 operand1','operand0',3,'p_operand0','Parser.py',353),
  ('operand1 -> operand2','operand1',1,'p_operand1','Parser.py',360),
  ('operand1 -> operand1 operator2 operand2','operand1',3,'p_operand1','Parser.py',361),
  ('operand2 -> operand3','operand2',1,'p_operand2','Parser.py',368),
  ('operand2 -> operand2 arithmetic_multiplicative_operator operand3','operand2',3,'p_operand2','Parser.py',369),
  ('operand3 -> monadic_operator operand4','operand3',2,'p_operand3','Parser.py',377),
  ('operand3 -> operand4','operand3',1,'p_operand3','Parser.py',378),
  ('operand4 -> array_location','operand4',1,'p_operand4','Parser.py',385),
  ('operand4 -> referenced_location','operand4',1,'p_operand4','Parser.py',386),
  ('operand4 -> primitive_value','operand4',1,'p_operand4','Parser.py',387),
  ('arithmetic_multiplicative_operator -> TIMES','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',391),
  ('arithmetic_multiplicative_operator -> DIVIDE','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',392),
  ('arithmetic_multiplicative_operator -> MODULO','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',393),
  ('monadic_operator -> MINUS','monadic_operator',1,'p_monadic_operator','Parser.py',397),
  ('monadic_operator -> NOT','monadic_operator',1,'p_monadic_operator','Parser.py',398),
  ('referenced_location -> ARROW array_location','referenced_location',2,'p_referenced_location','Parser.py',402),
  ('operator1 -> relational_operator','operator1',1,'p_operator1','Parser.py',410),
  ('operator1 -> membership_operator','operator1',1,'p_operator1','Parser.py',411),
  ('operator2 -> arithmetic_additive_operator','operator2',1,'p_operator2','Parser.py',415),
  ('operator2 -> string_concatenation_operator','operator2',1,'p_operator2','Parser.py',416),
  ('arithmetic_additive_operator -> PLUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','Parser.py',420),
  ('arithmetic_additive_operator -> MINUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','Parser.py',421),
  ('string_concatenation_operator -> CONCAT','string_concatenation_operator',1,'p_string_concatenation_operator','Parser.py',425),
  ('relational_operator -> AND','relational_operator',1,'p_relational_operator','Parser.py',429),
  ('relational_operator -> OR','relational_operator',1,'p_relational_operator','Parser.py',430),
  ('relational_operator -> EQUAL','relational_operator',1,'p_relational_operator','Parser.py',431),
  ('relational_operator -> NOTEQ','relational_operator',1,'p_relational_operator','Parser.py',432),
  ('relational_operator -> GREATER','relational_operator',1,'p_relational_operator','Parser.py',433),
  ('relational_operator -> GTEQUAL','relational_operator',1,'p_relational_operator','Parser.py',434),
  ('relational_operator -> LESS','relational_operator',1,'p_relational_operator','Parser.py',435),
  ('relational_operator -> LTEQUAL','relational_operator',1,'p_relational_operator','Parser.py',436),
  ('membership_operator -> IN','membership_operator',1,'p_membership_operator','Parser.py',440),
  ('primitive_value -> literal','primitive_value',1,'p_primitive_value','Parser.py',451),
  ('literal -> integer_literal','literal',1,'p_literal','Parser.py',455),
  ('literal -> boolean_literal','literal',1,'p_literal','Parser.py',456),
  ('literal -> character_literal','literal',1,'p_literal','Parser.py',457),
  ('literal -> empty_literal','literal',1,'p_literal','Parser.py',458),
  ('literal -> character_string_literal','literal',1,'p_literal','Parser.py',459),
  ('integer_literal -> ICONST','integer_literal',1,'p_integer_literal','Parser.py',462),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','Parser.py',466),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','Parser.py',467),
  ('character_literal -> CCONST','character_literal',1,'p_character_literal','Parser.py',471),
  ('empty_literal -> NULL','empty_literal',1,'p_empty_literal','Parser.py',476),
  ('character_string_literal -> SCONST','character_string_literal',1,'p_character_string_literal','Parser.py',480),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',485),
]
