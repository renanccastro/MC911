
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftANDORleftEQUALNOTEQleftLTEQUALLESSGREATERGTEQUALleftPLUSMINUSleftTIMESDIVIDEMODULOrightUMINUSUNOTICONST CCONST SCONST COMMA PLUS MINUS TIMES DIVIDE COLON LPAREN RPAREN ASSIGN SEMI ARROW LTEQUAL LESS GREATER GTEQUAL EQUAL LBRACKET RBRACKET ID MODULO AND OR NOTEQ NOT CONCAT HAT DCL LOC BY PROC OD FALSE ABS NUM END SYN FI RETURNS CHARS TO TYPE PRINT FOR NULL ELSE ASC CHAR WHILE UPPER DOWN RESULT INT EXIT READ ARRAY ELSIF RETURN TRUE THEN LENGTH DO BOOL REF IN IF LOWERprogram : statement_liststatement_list : statement statement_nullablestatement_nullable : statement statement_nullable\n                              | emptystatement : declaration_statement\n                     | synonym_statement\n                     | newmode_statement\n                     | action_statement\n                     | procedure_statementsynonym_statement : SYN synonym_list SEMIsynonym_list : synonym_definition\n                        | synonym_definition COMMA synonym_listsynonym_definition : identifier_list mode ASSIGN expression\n                              | identifier_list ASSIGN expressiondeclaration_statement : DCL declaration_list SEMIdeclaration_list : declaration\n                            | declaration COMMA declaration_listdeclaration : identifier_list mode initialization\n                       | identifier_list modeinitialization : ASSIGN expressionidentifier_list : identifier\n                           | identifier COMMA identifier_listidentifier : IDnewmode_statement : TYPE newmode_list SEMInewmode_list : mode_definition\n                        | mode_definition COMMA newmode_listmode_definition : identifier_list ASSIGN modeprocedure_statement : ID COLON procedure_definitionprocedure_definition : PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI\n                                | PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI\n                                | PROC LPAREN  RPAREN result_spec SEMI statement_nullable END SEMI\n                                | PROC LPAREN  RPAREN SEMI statement_nullable END SEMIformal_parameter_list : formal_parameter\n                                 | formal_parameter COMMA formal_parameter_listformal_parameter : identifier_list mode LOC\n                            | identifier_list moderesult_spec : RETURNS LPAREN mode LOC RPAREN\n                       | RETURNS LPAREN mode RPARENmode : mode_name\n                | discrete_mode\n                | reference_mode\n                | composite_modemode_name : identifierdiscrete_mode : integer_mode\n                         | boolean_mode\n                         | character_mode\n                         | discrete_range_modediscrete_mode_name : identifierinteger_mode : INTboolean_mode : BOOLcharacter_mode : CHARdiscrete_range_mode : discrete_mode_name LPAREN literal_range RPAREN\n                               | discrete_mode LPAREN literal_range RPARENliteral_range : lower_bound COLON upper_boundlower_bound : expressionupper_bound : expressionreference_mode : REF modecomposite_mode : string_mode\n                          | array_modestring_mode : CHARS LBRACKET string_length RBRACKETstring_length : integer_literalarray_mode : ARRAY LBRACKET index_mode_list RBRACKET element_modeindex_mode_list : index_mode\n                           | index_mode COMMA index_mode_listindex_mode : discrete_mode\n                      | literal_rangeelement_mode : modelocation : identifier\n\t\t\t\t    | dereferenced_reference\n\t\t\t\t    | string_element\n\t\t\t\t    | string_slice\n\t\t\t\t    | array_element\n\t\t\t\t    | array_slice\n\t\t\t\t    | call_actiondereferenced_reference : array_location ARROWstring_element : identifier LBRACKET start_element RBRACKETstart_element : expressionstring_slice : identifier LBRACKET left_element COLON right_element RBRACKETleft_element : expressionright_element : expressionarray_element : array_location LBRACKET expression_list RBRACKETexpression_list : expression\n    \t\t\t\t\t   | expression COMMA expression_listarray_slice : array_location LBRACKET lower_bound COLON upper_bound RBRACKETarray_location : locationexpression : operand0\n                      | conditional_expressionparenthesized_expression : LPAREN expression RPARENconditional_expression : IF expression then_expression else_expression FI\n                                  | IF expression then_expression elsif_expression else_expression FIthen_expression : THEN expressionelse_expression : ELSE expressionelsif_expression : ELSIF expression then_expression\n                            | elsif_expression ELSIF expression then_expressionoperand0 : operand1\n                    | operand0 operator1 operand1operand1 : operand2\n                    | operand1 operator2 operand2operand2 : operand3\n                    | operand2 arithmetic_multiplicative_operator operand3operand3 : monadic_operator operand4\n                    | operand4operand4 : array_location\n                    | referenced_location\n                    | primitive_valuearithmetic_multiplicative_operator : TIMES\n                                              | DIVIDE\n                                              | MODULOmonadic_operator : MINUS %prec UMINUS\n                            | NOT %prec UNOTreferenced_location : ARROW array_locationoperator1 : membership_operator\n                     | relational_operatorrelational_operator : AND\n                               | OR\n                               | EQUAL\n                               | NOTEQ\n                               | GREATER\n                               | GTEQUAL\n                               | LESS\n                               | LTEQUALoperator2 : arithmetic_additive_operator\n                     | string_concatenation_operatorarithmetic_additive_operator : PLUS\n                                        | MINUSstring_concatenation_operator : CONCATmembership_operator : INprimitive_value : literal\n                           | value_array_element\n                           | value_array_slice\n                           | parenthesized_expressionliteral : integer_literal\n                   | boolean_literal\n                   | character_literal\n                   | empty_literal\n                   | character_string_literalvalue_array_element : primitive_value LBRACKET expression_list RBRACKETvalue_array_slice : primitive_value LBRACKET expression COLON expression RBRACKETinteger_literal : ICONSTboolean_literal : TRUE\n                           | FALSEcharacter_literal : CCONST\n                             | HAT LPAREN ICONST RPARENempty_literal : NULLcharacter_string_literal : SCONSTaction_statement : identifier COLON action SEMI\n                            | action SEMIaction : bracketed_action\n                  | assignment_action\n                  | call_action\n                  | exit_action\n                  | result_action\n                  | return_actionbracketed_action : if_action\n                            | do_actionassignment_action : array_location assigning_operator expressionassigning_operator : closed_dyadic_operator ASSIGN\n                              | ASSIGNclosed_dyadic_operator : arithmetic_additive_operator\n                                  | arithmetic_multiplicative_operator\n                                  | string_concatenation_operatorif_action : IF expression then_clause else_clause FI\n                     | IF expression then_clause FIthen_clause : THEN action_statement_listelse_clause : ELSE action_statement_list\n                       | ELSIF expression then_clause else_clause\n                       | ELSIF expression then_clauseaction_statement_list : action_statement action_statement_nullableaction_statement_nullable : action_statement action_statement_nullable\n                                     | emptycall_action : procedure_call\n                       | builtin_callbuiltin_call : builtin_name LPAREN parameter_list RPAREN\n                        | builtin_name LPAREN RPARENbuiltin_name : ABS\n                        | ASC\n                        | NUM\n                        | UPPER\n                        | LOWER\n                        | LENGTH\n                        | READ\n                        | PRINTprocedure_call : ID LPAREN parameter_list RPAREN\n                          | ID LPAREN RPARENparameter_list : expression\n                          | expression COMMA parameter_listexit_action : EXIT identifierreturn_action : RETURN resultresult : expression\n                  | emptyresult_action : RESULT expressiondo_action : DO control_part SEMI action_statement_nullable OD\n                     | DO action_statement_nullable ODcontrol_part : for_control while_control \n                        | for_control   \n                        | while_controlfor_control : FOR iterationiteration : step_enumeration\n                     | range_enumerationstep_enumeration : identifier ASSIGN expression step_value DOWN end_value\n                            | identifier ASSIGN expression step_value end_value\n                            | identifier ASSIGN expression DOWN end_value\n                            | identifier ASSIGN expression end_valuestep_value : BY expressionend_value : TO expressionrange_enumeration : identifier DOWN IN discrete_mode\n                             | identifier IN discrete_modewhile_control : WHILE expressionempty :'
    
_lr_action_items = {'OR':([3,7,13,15,22,29,33,44,53,66,67,68,69,71,72,73,74,75,76,77,81,82,84,85,86,87,88,90,92,94,95,96,97,98,100,133,147,150,206,212,213,216,223,229,230,247,250,260,266,274,292,312,323,],[-171,-70,-85,-172,-72,-71,-69,-73,-75,-135,-99,-95,-139,-134,-74,-145,-130,-144,-104,-141,-142,-103,-105,-136,-140,-128,-129,-133,-131,-102,-68,-97,-132,-23,152,-174,-111,-101,-184,-173,-81,-98,-88,-100,-96,-76,-183,-143,-137,-68,-84,-78,-138,]),'LOC':([48,164,165,166,168,169,170,172,173,175,176,178,179,181,183,234,303,304,305,317,326,327,342,],[-23,-45,-39,-47,-42,-40,-50,-51,-58,-43,-46,-49,-59,-41,-44,-57,-53,-60,-52,337,-62,-67,347,]),'OD':([25,105,106,110,113,187,194,242,246,],[-209,-209,-170,193,-147,-169,-209,284,-146,]),'GREATER':([3,7,13,15,22,29,33,44,53,66,67,68,69,71,72,73,74,75,76,77,81,82,84,85,86,87,88,90,92,94,95,96,97,98,100,133,147,150,206,212,213,216,223,229,230,247,250,260,266,274,292,312,323,],[-171,-70,-85,-172,-72,-71,-69,-73,-75,-135,-99,-95,-139,-134,-74,-145,-130,-144,-104,-141,-142,-103,-105,-136,-140,-128,-129,-133,-131,-102,-68,-97,-132,-23,154,-174,-111,-101,-184,-173,-81,-98,-88,-100,-96,-76,-183,-143,-137,-68,-84,-78,-138,]),'LENGTH':([0,5,11,12,20,25,26,32,34,35,41,51,52,56,57,58,60,62,63,64,65,78,80,83,89,91,99,105,107,113,119,120,121,123,129,135,140,141,142,144,149,151,152,153,154,155,156,157,158,159,160,161,162,163,182,185,194,197,204,211,214,215,218,219,222,226,231,232,235,236,241,244,246,248,261,262,267,297,300,301,310,311,316,335,339,345,350,354,356,357,],[18,-8,-9,-5,18,18,18,18,-7,-6,18,18,-106,-108,-125,-124,-126,18,-158,18,-107,18,18,18,18,-109,-110,18,18,-147,18,18,18,18,-24,-157,-122,-123,18,18,18,18,-115,-116,-118,18,-119,-117,-121,-127,-112,-113,-120,-114,18,-10,18,-15,-28,18,18,18,18,18,18,18,18,18,18,18,18,18,-146,18,18,18,18,18,18,18,18,18,18,18,18,18,-32,-31,-30,-29,]),'ICONST':([20,26,41,51,52,56,57,58,60,62,63,64,65,78,83,89,91,99,107,121,123,135,140,141,142,146,149,151,152,153,154,155,156,157,158,159,160,161,162,163,182,211,214,215,219,226,231,232,233,235,236,241,244,248,261,262,267,297,300,301,310,311,],[69,69,69,69,-106,-108,-125,-124,-126,69,-158,69,-107,69,69,69,-109,-110,69,69,69,-157,-122,-123,69,224,69,69,-115,-116,-118,69,-119,-117,-121,-127,-112,-113,-120,-114,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'NUM':([0,5,11,12,20,25,26,32,34,35,41,51,52,56,57,58,60,62,63,64,65,78,80,83,89,91,99,105,107,113,119,120,121,123,129,135,140,141,142,144,149,151,152,153,154,155,156,157,158,159,160,161,162,163,182,185,194,197,204,211,214,215,218,219,222,226,231,232,235,236,241,244,246,248,261,262,267,297,300,301,310,311,316,335,339,345,350,354,356,357,],[31,-8,-9,-5,31,31,31,31,-7,-6,31,31,-106,-108,-125,-124,-126,31,-158,31,-107,31,31,31,31,-109,-110,31,31,-147,31,31,31,31,-24,-157,-122,-123,31,31,31,31,-115,-116,-118,31,-119,-117,-121,-127,-112,-113,-120,-114,31,-10,31,-15,-28,31,31,31,31,31,31,31,31,31,31,31,31,31,-146,31,31,31,31,31,31,31,31,31,31,31,31,31,-32,-31,-30,-29,]),'ELSE':([3,7,13,15,22,29,33,44,53,66,67,68,69,71,72,73,74,75,76,77,81,82,84,85,86,87,88,90,92,93,94,95,96,97,98,100,105,106,113,133,143,147,150,187,206,212,213,216,221,222,223,225,229,230,246,247,250,259,260,264,265,266,292,293,296,312,320,322,323,340,],[-171,-70,-85,-172,-72,-71,-69,-73,-75,-135,-99,-95,-139,-134,-74,-145,-130,-144,-104,-141,-142,-103,-105,-136,-140,-128,-129,-133,-131,-87,-102,-68,-97,-132,-23,-86,-209,-170,-147,-174,218,-111,-101,-169,-184,-173,-81,-98,-164,-209,-88,261,-100,-96,-146,-76,-183,-168,-143,261,-91,-137,-84,218,-89,-78,-93,-90,-138,-94,]),'RETURNS':([289,318,],[314,314,]),'COMMA':([3,7,13,15,22,29,33,44,48,49,50,53,66,67,68,69,71,72,73,74,75,76,77,81,82,84,85,86,87,88,90,92,93,94,95,96,97,98,100,102,115,132,133,138,147,150,164,165,166,168,169,170,172,173,175,176,178,179,181,183,195,206,208,212,213,216,223,228,229,230,234,237,243,247,250,253,254,260,266,270,271,272,278,285,288,292,296,303,304,305,312,317,322,323,324,326,327,337,],[-171,-70,-85,-172,-72,-71,-69,-73,-23,130,131,-75,-135,-99,-95,-139,-134,-74,-145,-130,-144,-104,-141,-142,-103,-105,-136,-140,-128,-129,-133,-131,-87,-102,-68,-97,-132,-23,-86,184,196,211,-174,214,-111,-101,-45,-39,-47,-42,-40,-50,-51,-58,-43,-46,-49,-59,-41,-44,-19,-184,-27,-173,-81,-98,-88,214,-100,-96,-57,-14,-18,-76,-183,214,-56,-143,-137,301,-66,-65,-13,-20,313,-84,-89,-53,-60,-52,-78,-36,-90,-138,-54,-62,-67,-35,]),'CHAR':([48,49,101,114,128,174,209,231,239,282,290,301,302,334,],[-23,-21,172,172,172,172,-22,172,172,172,172,172,172,172,]),'LESS':([3,7,13,15,22,29,33,44,53,66,67,68,69,71,72,73,74,75,76,77,81,82,84,85,86,87,88,90,92,94,95,96,97,98,100,133,147,150,206,212,213,216,223,229,230,247,250,260,266,274,292,312,323,],[-171,-70,-85,-172,-72,-71,-69,-73,-75,-135,-99,-95,-139,-134,-74,-145,-130,-144,-104,-141,-142,-103,-105,-136,-140,-128,-129,-133,-131,-102,-68,-97,-132,-23,162,-174,-111,-101,-184,-173,-81,-98,-88,-100,-96,-76,-183,-143,-137,-68,-84,-78,-138,]),'END':([5,11,12,34,35,113,117,119,129,185,197,198,204,246,316,335,336,339,343,345,346,350,351,354,356,357,],[-8,-9,-5,-7,-6,-147,-4,-209,-24,-10,-15,-3,-28,-146,-209,-209,344,-209,349,-209,352,-32,355,-31,-30,-29,]),'NULL':([20,26,41,51,52,56,57,58,60,62,63,64,65,78,83,89,91,99,107,121,123,135,140,141,142,149,151,152,153,154,155,156,157,158,159,160,161,162,163,182,211,214,215,219,226,231,232,235,236,241,244,248,261,262,267,297,300,301,310,311,],[75,75,75,75,-106,-108,-125,-124,-126,75,-158,75,-107,75,75,75,-109,-110,75,75,75,-157,-122,-123,75,75,75,-115,-116,-118,75,-119,-117,-121,-127,-112,-113,-120,-114,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'ABS':([0,5,11,12,20,25,26,32,34,35,41,51,52,56,57,58,60,62,63,64,65,78,80,83,89,91,99,105,107,113,119,120,121,123,129,135,140,141,142,144,149,151,152,153,154,155,156,157,158,159,160,161,162,163,182,185,194,197,204,211,214,215,218,219,222,226,231,232,235,236,241,244,246,248,261,262,267,297,300,301,310,311,316,335,339,345,350,354,356,357,],[14,-8,-9,-5,14,14,14,14,-7,-6,14,14,-106,-108,-125,-124,-126,14,-158,14,-107,14,14,14,14,-109,-110,14,14,-147,14,14,14,14,-24,-157,-122,-123,14,14,14,14,-115,-116,-118,14,-119,-117,-121,-127,-112,-113,-120,-114,14,-10,14,-15,-28,14,14,14,14,14,14,14,14,14,14,14,14,14,-146,14,14,14,14,14,14,14,14,14,14,14,14,14,-32,-31,-30,-29,]),'BOOL':([48,49,101,114,128,174,209,231,239,282,290,301,302,334,],[-23,-21,170,170,170,170,-22,170,170,170,170,170,170,170,]),'TYPE':([0,5,11,12,32,34,35,113,119,129,185,197,204,246,316,335,339,345,350,354,356,357,],[1,-8,-9,-5,1,-7,-6,-147,1,-24,-10,-15,-28,-146,1,1,1,1,-32,-31,-30,-29,]),'EQUAL':([3,7,13,15,22,29,33,44,53,66,67,68,69,71,72,73,74,75,76,77,81,82,84,85,86,87,88,90,92,94,95,96,97,98,100,133,147,150,206,212,213,216,223,229,230,247,250,260,266,274,292,312,323,],[-171,-70,-85,-172,-72,-71,-69,-73,-75,-135,-99,-95,-139,-134,-74,-145,-130,-144,-104,-141,-142,-103,-105,-136,-140,-128,-129,-133,-131,-102,-68,-97,-132,-23,153,-174,-111,-101,-184,-173,-81,-98,-88,-100,-96,-76,-183,-143,-137,-68,-84,-78,-138,]),'GTEQUAL':([3,7,13,15,22,29,33,44,53,66,67,68,69,71,72,73,74,75,76,77,81,82,84,85,86,87,88,90,92,94,95,96,97,98,100,133,147,150,206,212,213,216,223,229,230,247,250,260,266,274,292,312,323,],[-171,-70,-85,-172,-72,-71,-69,-73,-75,-135,-99,-95,-139,-134,-74,-145,-130,-144,-104,-141,-142,-103,-105,-136,-140,-128,-129,-133,-131,-102,-68,-97,-132,-23,156,-174,-111,-101,-184,-173,-81,-98,-88,-100,-96,-76,-183,-143,-137,-68,-84,-78,-138,]),'DOWN':([3,7,13,15,22,29,33,44,48,53,66,67,68,69,71,72,73,74,75,76,77,81,82,84,85,86,87,88,90,92,93,94,95,96,97,98,100,133,147,150,191,206,212,213,216,223,229,230,247,250,260,266,283,292,296,309,312,322,323,332,],[-171,-70,-85,-172,-72,-71,-69,-73,-23,-75,-135,-99,-95,-139,-134,-74,-145,-130,-144,-104,-141,-142,-103,-105,-136,-140,-128,-129,-133,-131,-87,-102,-68,-97,-132,-23,-86,-174,-111,-101,240,-184,-173,-81,-98,-88,-100,-96,-76,-183,-143,-137,308,-84,-89,330,-78,-90,-138,-204,]),'ID':([0,1,5,11,12,20,23,25,26,30,32,34,35,41,43,48,49,51,52,56,57,58,60,62,63,64,65,78,80,83,89,91,99,101,105,107,108,113,114,119,120,121,123,128,129,130,131,135,140,141,142,144,149,151,152,153,154,155,156,157,158,159,160,161,162,163,174,182,184,185,194,196,197,204,209,211,214,215,218,219,222,226,231,232,235,236,239,241,244,246,248,249,261,262,267,282,290,297,300,301,302,310,311,313,316,334,335,339,345,350,354,356,357,],[40,48,-8,-9,-5,98,48,98,98,48,40,-7,-6,98,48,-23,-21,98,-106,-108,-125,-124,-126,98,-158,98,-107,98,98,98,98,-109,-110,48,98,98,48,-147,48,40,199,98,98,48,-24,48,48,-157,-122,-123,98,98,98,98,-115,-116,-118,98,-119,-117,-121,-127,-112,-113,-120,-114,48,98,48,-10,98,48,-15,-28,-22,98,98,98,98,98,98,98,98,98,98,98,48,98,98,-146,98,48,98,98,98,48,48,98,98,98,48,98,98,48,40,48,40,40,40,-32,-31,-30,-29,]),'WHILE':([3,7,13,15,22,25,29,33,44,53,66,67,68,69,71,72,73,74,75,76,77,81,82,84,85,86,87,88,90,92,93,94,95,96,97,98,100,104,133,147,150,164,166,170,172,176,178,183,189,190,192,206,212,213,216,223,229,230,247,250,260,266,281,292,296,303,305,306,307,312,322,323,328,329,331,341,],[-171,-70,-85,-172,-72,107,-71,-69,-73,-75,-135,-99,-95,-139,-134,-74,-145,-130,-144,-104,-141,-142,-103,-105,-136,-140,-128,-129,-133,-131,-87,-102,-68,-97,-132,-23,-86,107,-174,-111,-101,-45,-47,-50,-51,-46,-49,-44,-197,-199,-198,-184,-173,-81,-98,-88,-100,-96,-76,-183,-143,-137,-207,-84,-89,-53,-52,-206,-203,-78,-90,-138,-202,-201,-205,-200,]),'RPAREN':([3,7,13,15,22,29,33,44,48,51,53,66,67,68,69,71,72,73,74,75,76,77,81,82,84,85,86,87,88,90,92,93,94,95,96,97,98,100,123,132,133,134,145,147,150,164,165,166,168,169,170,172,173,175,176,178,179,181,183,206,207,212,213,216,223,224,229,230,234,247,249,250,251,254,260,266,275,279,288,291,292,296,303,304,305,312,317,322,323,324,326,327,333,337,342,347,],[-171,-70,-85,-172,-72,-71,-69,-73,-23,133,-75,-135,-99,-95,-139,-134,-74,-145,-130,-144,-104,-141,-142,-103,-105,-136,-140,-128,-129,-133,-131,-87,-102,-68,-97,-132,-23,-86,206,-185,-174,212,223,-111,-101,-45,-39,-47,-42,-40,-50,-51,-58,-43,-46,-49,-59,-41,-44,-184,250,-173,-81,-98,-88,260,-100,-96,-57,-76,289,-183,-186,-56,-143,-137,303,305,-33,318,-84,-89,-53,-60,-52,-78,-36,-90,-138,-54,-62,-67,-34,-35,348,353,]),'SCONST':([20,26,41,51,52,56,57,58,60,62,63,64,65,78,83,89,91,99,107,121,123,135,140,141,142,149,151,152,153,154,155,156,157,158,159,160,161,162,163,182,211,214,215,219,226,231,232,235,236,241,244,248,261,262,267,297,300,301,310,311,],[73,73,73,73,-106,-108,-125,-124,-126,73,-158,73,-107,73,73,73,-109,-110,73,73,73,-157,-122,-123,73,73,73,-115,-116,-118,73,-119,-117,-121,-127,-112,-113,-120,-114,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'LPAREN':([10,14,18,20,21,26,28,31,37,39,40,41,45,48,51,52,56,57,58,60,62,63,64,65,78,79,83,89,91,98,99,107,121,123,135,140,141,142,149,151,152,153,154,155,156,157,158,159,160,161,162,163,164,166,169,170,172,175,176,178,180,182,183,199,205,211,214,215,219,226,231,232,235,236,241,244,248,261,262,267,272,274,280,281,297,300,301,303,305,306,310,311,314,],[51,-175,-180,78,-179,78,-178,-177,-176,-182,123,78,-181,-23,78,-106,-108,-125,-124,-126,78,-158,78,-107,78,146,78,78,-109,123,-110,78,78,78,-157,-122,-123,78,78,78,-115,-116,-118,78,-119,-117,-121,-127,-112,-113,-120,-114,-45,-47,232,-50,-51,-48,-46,-49,236,78,-44,123,249,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,232,-48,-48,232,78,78,78,-53,-52,232,78,78,334,]),'HAT':([20,26,41,51,52,56,57,58,60,62,63,64,65,78,83,89,91,99,107,121,123,135,140,141,142,149,151,152,153,154,155,156,157,158,159,160,161,162,163,182,211,214,215,219,226,231,232,235,236,241,244,248,261,262,267,297,300,301,310,311,],[79,79,79,79,-106,-108,-125,-124,-126,79,-158,79,-107,79,79,79,-109,-110,79,79,79,-157,-122,-123,79,79,79,-115,-116,-118,79,-119,-117,-121,-127,-112,-113,-120,-114,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'FALSE':([20,26,41,51,52,56,57,58,60,62,63,64,65,78,83,89,91,99,107,121,123,135,140,141,142,149,151,152,153,154,155,156,157,158,159,160,161,162,163,182,211,214,215,219,226,231,232,235,236,241,244,248,261,262,267,297,300,301,310,311,],[77,77,77,77,-106,-108,-125,-124,-126,77,-158,77,-107,77,77,77,-109,-110,77,77,77,-157,-122,-123,77,77,77,-115,-116,-118,77,-119,-117,-121,-127,-112,-113,-120,-114,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'CHARS':([48,49,101,114,128,174,209,290,302,334,],[-23,-21,171,171,171,171,-22,171,171,171,]),'CCONST':([20,26,41,51,52,56,57,58,60,62,63,64,65,78,83,89,91,99,107,121,123,135,140,141,142,149,151,152,153,154,155,156,157,158,159,160,161,162,163,182,211,214,215,219,226,231,232,235,236,241,244,248,261,262,267,297,300,301,310,311,],[81,81,81,81,-106,-108,-125,-124,-126,81,-158,81,-107,81,81,81,-109,-110,81,81,81,-157,-122,-123,81,81,81,-115,-116,-118,81,-119,-117,-121,-127,-112,-113,-120,-114,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'LOWER':([0,5,11,12,20,25,26,32,34,35,41,51,52,56,57,58,60,62,63,64,65,78,80,83,89,91,99,105,107,113,119,120,121,123,129,135,140,141,142,144,149,151,152,153,154,155,156,157,158,159,160,161,162,163,182,185,194,197,204,211,214,215,218,219,222,226,231,232,235,236,241,244,246,248,261,262,267,297,300,301,310,311,316,335,339,345,350,354,356,357,],[21,-8,-9,-5,21,21,21,21,-7,-6,21,21,-106,-108,-125,-124,-126,21,-158,21,-107,21,21,21,21,-109,-110,21,21,-147,21,21,21,21,-24,-157,-122,-123,21,21,21,21,-115,-116,-118,21,-119,-117,-121,-127,-112,-113,-120,-114,21,-10,21,-15,-28,21,21,21,21,21,21,21,21,21,21,21,21,21,-146,21,21,21,21,21,21,21,21,21,21,21,21,21,-32,-31,-30,-29,]),'IF':([0,5,11,12,20,25,26,32,34,35,41,51,62,63,64,78,83,105,107,113,119,120,121,123,129,135,144,149,182,185,194,197,204,211,214,215,218,219,222,226,231,232,235,236,241,244,246,248,261,262,267,297,300,301,310,311,316,335,339,345,350,354,356,357,],[20,-8,-9,-5,83,20,83,20,-7,-6,83,83,83,-158,83,83,83,20,83,-147,20,20,83,83,-24,-157,20,83,83,-10,20,-15,-28,83,83,83,20,83,20,83,83,83,83,83,83,83,-146,83,83,83,83,83,83,83,83,83,20,20,20,20,-32,-31,-30,-29,]),'FOR':([25,],[108,]),'CONCAT':([3,6,7,13,15,19,22,29,33,38,40,44,53,66,67,68,69,71,72,73,74,75,76,77,81,82,84,85,86,87,88,90,92,94,95,96,97,98,133,147,150,199,206,212,213,216,223,229,230,247,250,260,266,274,292,312,323,],[-171,-74,-70,-85,-172,60,-72,-71,-69,-68,-23,-73,-75,-135,-99,60,-139,-134,-74,-145,-130,-144,-104,-141,-142,-103,-105,-136,-140,-128,-129,-133,-131,-102,-68,-97,-132,-23,-174,-111,-101,-23,-184,-173,-81,-98,-88,-100,60,-76,-183,-143,-137,-68,-84,-78,-138,]),'PROC':([122,],[205,]),'LBRACKET':([3,6,7,13,15,19,22,29,33,38,40,44,53,66,69,71,72,73,74,75,77,81,82,84,85,86,87,88,90,92,95,97,98,133,147,167,171,199,206,212,213,223,247,250,260,266,274,292,312,323,],[-171,-74,-70,-85,-172,64,-72,-71,-69,121,-23,-73,-75,-135,-139,-134,-74,-145,-130,-144,-141,-142,64,149,-136,-140,-128,-129,-133,-131,121,-132,-23,-174,64,231,233,-23,-184,-173,-81,-88,-76,-183,-143,-137,121,-84,-78,-138,]),'DIVIDE':([3,6,7,13,15,19,22,29,33,38,40,44,53,66,67,69,71,72,73,74,75,76,77,81,82,84,85,86,87,88,90,92,94,95,96,97,98,133,147,150,199,206,212,213,216,223,229,247,250,260,266,274,292,312,323,],[-171,-74,-70,-85,-172,65,-72,-71,-69,-68,-23,-73,-75,-135,-99,-139,-134,-74,-145,-130,-144,-104,-141,-142,-103,-105,-136,-140,-128,-129,-133,-131,-102,-68,65,-132,-23,-174,-111,-101,-23,-184,-173,-81,65,-88,-100,-76,-183,-143,-137,-68,-84,-78,-138,]),'MINUS':([3,6,7,13,15,19,20,22,26,29,33,38,40,41,44,51,52,53,56,57,58,60,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,81,82,83,84,85,86,87,88,90,92,94,95,96,97,98,107,121,123,133,135,140,141,142,147,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,182,199,206,211,212,213,214,215,216,219,223,226,229,230,231,232,235,236,241,244,247,248,250,260,261,262,266,267,274,292,297,300,301,310,311,312,323,],[-171,-74,-70,-85,-172,57,91,-72,91,-71,-69,-68,-23,91,-73,91,-106,-75,-108,-125,-124,-126,91,-158,91,-107,-135,-99,57,-139,-134,-74,-145,-130,-144,-104,-141,91,-142,-103,91,-105,-136,-140,-128,-129,-133,-131,-102,-68,-97,-132,-23,91,91,91,-174,-157,-122,-123,91,-111,91,-101,91,-115,-116,-118,91,-119,-117,-121,-127,-112,-113,-120,-114,91,-23,-184,91,-173,-81,91,91,-98,91,-88,91,-100,57,91,91,91,91,91,91,-76,91,-183,-143,91,91,-137,91,-68,-84,91,91,91,91,91,-78,-138,]),'TRUE':([20,26,41,51,52,56,57,58,60,62,63,64,65,78,83,89,91,99,107,121,123,135,140,141,142,149,151,152,153,154,155,156,157,158,159,160,161,162,163,182,211,214,215,219,226,231,232,235,236,241,244,248,261,262,267,297,300,301,310,311,],[86,86,86,86,-106,-108,-125,-124,-126,86,-158,86,-107,86,86,86,-109,-110,86,86,86,-157,-122,-123,86,86,86,-115,-116,-118,86,-119,-117,-121,-127,-112,-113,-120,-114,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'SYN':([0,5,11,12,32,34,35,113,119,129,185,197,204,246,316,335,339,345,350,354,356,357,],[23,-8,-9,-5,23,-7,-6,-147,23,-24,-10,-15,-28,-146,23,23,23,23,-32,-31,-30,-29,]),'MODULO':([3,6,7,13,15,19,22,29,33,38,40,44,53,66,67,69,71,72,73,74,75,76,77,81,82,84,85,86,87,88,90,92,94,95,96,97,98,133,147,150,199,206,212,213,216,223,229,247,250,260,266,274,292,312,323,],[-171,-74,-70,-85,-172,56,-72,-71,-69,-68,-23,-73,-75,-135,-99,-139,-134,-74,-145,-130,-144,-104,-141,-142,-103,-105,-136,-140,-128,-129,-133,-131,-102,-68,56,-132,-23,-174,-111,-101,-23,-184,-173,-81,56,-88,-100,-76,-183,-143,-137,-68,-84,-78,-138,]),'SEMI':([3,4,6,7,8,9,13,15,16,17,22,27,29,33,36,41,42,44,47,48,50,53,66,67,68,69,71,72,73,74,75,76,77,81,82,84,85,86,87,88,90,92,93,94,95,96,97,98,100,102,103,104,109,111,112,115,116,124,125,126,127,133,136,147,150,164,165,166,168,169,170,172,173,175,176,178,179,181,183,186,188,189,190,192,193,195,200,206,208,210,212,213,216,220,223,229,230,234,237,238,243,245,247,250,256,260,266,278,281,284,285,289,292,296,303,304,305,306,307,312,315,318,322,323,326,327,328,329,331,338,341,344,348,349,352,353,355,],[-171,-153,-150,-70,-154,-152,-85,-172,-151,-148,-72,113,-71,-69,-155,-209,-149,-73,129,-23,-25,-75,-135,-99,-95,-139,-134,-74,-145,-130,-144,-104,-141,-142,-103,-105,-136,-140,-128,-129,-133,-131,-87,-102,-68,-97,-132,-23,-86,-11,185,-195,-196,194,-191,-16,197,-189,-190,-188,-187,-174,-156,-111,-101,-45,-39,-47,-42,-40,-50,-51,-58,-43,-46,-49,-59,-41,-44,-194,-208,-197,-199,-198,-193,-19,246,-184,-27,-26,-173,-81,-98,-163,-88,-100,-96,-57,-14,-12,-18,-17,-76,-183,-162,-143,-137,-13,-207,-192,-20,316,-84,-89,-53,-60,-52,-206,-203,-78,335,339,-90,-138,-62,-67,-202,-201,-205,345,-200,350,-38,354,356,-37,357,]),'DO':([0,5,11,12,25,32,34,35,105,113,119,120,129,144,185,194,197,204,218,222,246,316,335,339,345,350,354,356,357,],[25,-8,-9,-5,25,25,-7,-6,25,-147,25,25,-24,25,-10,25,-15,-28,25,25,-146,25,25,25,25,-32,-31,-30,-29,]),'BY':([3,7,13,15,22,29,33,44,53,66,67,68,69,71,72,73,74,75,76,77,81,82,84,85,86,87,88,90,92,93,94,95,96,97,98,100,133,147,150,206,212,213,216,223,229,230,247,250,260,266,283,292,296,312,322,323,],[-171,-70,-85,-172,-72,-71,-69,-73,-75,-135,-99,-95,-139,-134,-74,-145,-130,-144,-104,-141,-142,-103,-105,-136,-140,-128,-129,-133,-131,-87,-102,-68,-97,-132,-23,-86,-174,-111,-101,-184,-173,-81,-98,-88,-100,-96,-76,-183,-143,-137,311,-84,-89,-78,-90,-138,]),'PLUS':([3,6,7,13,15,19,22,29,33,38,40,44,53,66,67,68,69,71,72,73,74,75,76,77,81,82,84,85,86,87,88,90,92,94,95,96,97,98,133,147,150,199,206,212,213,216,223,229,230,247,250,260,266,274,292,312,323,],[-171,-74,-70,-85,-172,58,-72,-71,-69,-68,-23,-73,-75,-135,-99,58,-139,-134,-74,-145,-130,-144,-104,-141,-142,-103,-105,-136,-140,-128,-129,-133,-131,-102,-68,-97,-132,-23,-174,-111,-101,-23,-184,-173,-81,-98,-88,-100,58,-76,-183,-143,-137,-68,-84,-78,-138,]),'RESULT':([0,5,11,12,25,32,34,35,105,113,119,120,129,144,185,194,197,204,218,222,246,316,335,339,345,350,354,356,357,],[26,-8,-9,-5,26,26,-7,-6,26,-147,26,26,-24,26,-10,26,-15,-28,26,26,-146,26,26,26,26,-32,-31,-30,-29,]),'PRINT':([0,5,11,12,20,25,26,32,34,35,41,51,52,56,57,58,60,62,63,64,65,78,80,83,89,91,99,105,107,113,119,120,121,123,129,135,140,141,142,144,149,151,152,153,154,155,156,157,158,159,160,161,162,163,182,185,194,197,204,211,214,215,218,219,222,226,231,232,235,236,241,244,246,248,261,262,267,297,300,301,310,311,316,335,339,345,350,354,356,357,],[39,-8,-9,-5,39,39,39,39,-7,-6,39,39,-106,-108,-125,-124,-126,39,-158,39,-107,39,39,39,39,-109,-110,39,39,-147,39,39,39,39,-24,-157,-122,-123,39,39,39,39,-115,-116,-118,39,-119,-117,-121,-127,-112,-113,-120,-114,39,-10,39,-15,-28,39,39,39,39,39,39,39,39,39,39,39,39,39,-146,39,39,39,39,39,39,39,39,39,39,39,39,39,-32,-31,-30,-29,]),'ARRAY':([48,49,101,114,128,174,209,290,302,334,],[-23,-21,167,167,167,167,-22,167,167,167,]),'UPPER':([0,5,11,12,20,25,26,32,34,35,41,51,52,56,57,58,60,62,63,64,65,78,80,83,89,91,99,105,107,113,119,120,121,123,129,135,140,141,142,144,149,151,152,153,154,155,156,157,158,159,160,161,162,163,182,185,194,197,204,211,214,215,218,219,222,226,231,232,235,236,241,244,246,248,261,262,267,297,300,301,310,311,316,335,339,345,350,354,356,357,],[28,-8,-9,-5,28,28,28,28,-7,-6,28,28,-106,-108,-125,-124,-126,28,-158,28,-107,28,28,28,28,-109,-110,28,28,-147,28,28,28,28,-24,-157,-122,-123,28,28,28,28,-115,-116,-118,28,-119,-117,-121,-127,-112,-113,-120,-114,28,-10,28,-15,-28,28,28,28,28,28,28,28,28,28,28,28,28,28,-146,28,28,28,28,28,28,28,28,28,28,28,28,28,-32,-31,-30,-29,]),'ELSIF':([3,7,13,15,22,29,33,44,53,66,67,68,69,71,72,73,74,75,76,77,81,82,84,85,86,87,88,90,92,93,94,95,96,97,98,100,105,106,113,133,143,147,150,187,206,212,213,216,221,222,223,225,229,230,246,247,250,259,260,264,265,266,292,293,296,312,320,322,323,340,],[-171,-70,-85,-172,-72,-71,-69,-73,-75,-135,-99,-95,-139,-134,-74,-145,-130,-144,-104,-141,-142,-103,-105,-136,-140,-128,-129,-133,-131,-87,-102,-68,-97,-132,-23,-86,-209,-170,-147,-174,219,-111,-101,-169,-184,-173,-81,-98,-164,-209,-88,262,-100,-96,-146,-76,-183,-168,-143,297,-91,-137,-84,219,-89,-78,-93,-90,-138,-94,]),'COLON':([3,7,13,15,22,29,33,38,40,44,53,66,67,68,69,71,72,73,74,75,76,77,81,82,84,85,86,87,88,90,92,93,94,95,96,97,98,100,133,138,139,147,150,201,203,206,212,213,216,223,228,229,230,247,250,260,266,268,269,274,292,296,312,322,323,],[-171,-70,-85,-172,-72,-71,-69,120,122,-73,-75,-135,-99,-95,-139,-134,-74,-145,-130,-144,-104,-141,-142,-103,-105,-136,-140,-128,-129,-133,-131,-87,-102,-68,-97,-132,-23,-86,-174,-55,215,-111,-101,-79,248,-184,-173,-81,-98,-88,267,-100,-96,-76,-183,-143,-137,-55,300,-68,-84,-89,-78,-90,-138,]),'DCL':([0,5,11,12,32,34,35,113,119,129,185,197,204,246,316,335,339,345,350,354,356,357,],[30,-8,-9,-5,30,-7,-6,-147,30,-24,-10,-15,-28,-146,30,30,30,30,-32,-31,-30,-29,]),'NOT':([20,26,41,51,52,56,57,58,60,62,63,64,65,78,83,107,121,123,135,140,141,142,149,151,152,153,154,155,156,157,158,159,160,161,162,163,182,211,214,215,219,226,231,232,235,236,241,244,248,261,262,267,297,300,301,310,311,],[99,99,99,99,-106,-108,-125,-124,-126,99,-158,99,-107,99,99,99,99,99,-157,-122,-123,99,99,99,-115,-116,-118,99,-119,-117,-121,-127,-112,-113,-120,-114,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,]),'AND':([3,7,13,15,22,29,33,44,53,66,67,68,69,71,72,73,74,75,76,77,81,82,84,85,86,87,88,90,92,94,95,96,97,98,100,133,147,150,206,212,213,216,223,229,230,247,250,260,266,274,292,312,323,],[-171,-70,-85,-172,-72,-71,-69,-73,-75,-135,-99,-95,-139,-134,-74,-145,-130,-144,-104,-141,-142,-103,-105,-136,-140,-128,-129,-133,-131,-102,-68,-97,-132,-23,163,-174,-111,-101,-184,-173,-81,-98,-88,-100,-96,-76,-183,-143,-137,-68,-84,-78,-138,]),'RBRACKET':([3,7,13,15,22,29,33,44,53,66,67,68,69,71,72,73,74,75,76,77,81,82,84,85,86,87,88,90,92,93,94,95,96,97,98,100,133,137,138,147,150,164,166,170,172,176,178,183,201,202,206,212,213,216,223,227,228,229,230,247,250,252,253,254,255,260,266,270,271,272,273,276,277,286,287,292,296,299,303,305,312,322,323,324,325,],[-171,-70,-85,-172,-72,-71,-69,-73,-75,-135,-99,-95,-139,-134,-74,-145,-130,-144,-104,-141,-142,-103,-105,-136,-140,-128,-129,-133,-131,-87,-102,-68,-97,-132,-23,-86,-174,213,-82,-111,-101,-45,-47,-50,-51,-46,-49,-44,-77,247,-184,-173,-81,-98,-88,266,-82,-100,-96,-76,-183,-83,-82,-56,292,-143,-137,-63,-66,-65,302,304,-61,-80,312,-84,-89,323,-53,-52,-78,-90,-138,-54,-64,]),'LTEQUAL':([3,7,13,15,22,29,33,44,53,66,67,68,69,71,72,73,74,75,76,77,81,82,84,85,86,87,88,90,92,94,95,96,97,98,100,133,147,150,206,212,213,216,223,229,230,247,250,260,266,274,292,312,323,],[-171,-70,-85,-172,-72,-71,-69,-73,-75,-135,-99,-95,-139,-134,-74,-145,-130,-144,-104,-141,-142,-103,-105,-136,-140,-128,-129,-133,-131,-102,-68,-97,-132,-23,158,-174,-111,-101,-184,-173,-81,-98,-88,-100,-96,-76,-183,-143,-137,-68,-84,-78,-138,]),'TIMES':([3,6,7,13,15,19,22,29,33,38,40,44,53,66,67,69,71,72,73,74,75,76,77,81,82,84,85,86,87,88,90,92,94,95,96,97,98,133,147,150,199,206,212,213,216,223,229,247,250,260,266,274,292,312,323,],[-171,-74,-70,-85,-172,52,-72,-71,-69,-68,-23,-73,-75,-135,-99,-139,-134,-74,-145,-130,-144,-104,-141,-142,-103,-105,-136,-140,-128,-129,-133,-131,-102,-68,52,-132,-23,-174,-111,-101,-23,-184,-173,-81,52,-88,-100,-76,-183,-143,-137,-68,-84,-78,-138,]),'THEN':([3,7,13,15,22,29,33,44,53,66,67,68,69,70,71,72,73,74,75,76,77,81,82,84,85,86,87,88,90,92,93,94,95,96,97,98,100,133,147,148,150,206,212,213,216,223,229,230,247,250,258,260,266,292,295,296,312,321,322,323,],[-171,-70,-85,-172,-72,-71,-69,-73,-75,-135,-99,-95,-139,144,-134,-74,-145,-130,-144,-104,-141,-142,-103,-105,-136,-140,-128,-129,-133,-131,-87,-102,-68,-97,-132,-23,-86,-174,-111,226,-101,-184,-173,-81,-98,-88,-100,-96,-76,-183,144,-143,-137,-84,226,-89,-78,226,-90,-138,]),'ARROW':([3,6,7,13,15,19,20,22,26,29,33,38,40,41,44,51,52,53,56,57,58,60,62,63,64,65,72,78,82,83,89,91,95,98,99,107,121,123,133,135,140,141,142,147,149,151,152,153,154,155,156,157,158,159,160,161,162,163,182,199,206,211,212,213,214,215,219,226,231,232,235,236,241,244,247,248,250,261,262,267,274,292,297,300,301,310,311,312,],[-171,-74,-70,-85,-172,53,80,-72,80,-71,-69,-68,-23,80,-73,80,-106,-75,-108,-125,-124,-126,80,-158,80,-107,-74,80,53,80,80,-109,-68,-23,-110,80,80,80,-174,-157,-122,-123,80,53,80,80,-115,-116,-118,80,-119,-117,-121,-127,-112,-113,-120,-114,80,-23,-184,80,-173,-81,80,80,80,80,80,80,80,80,80,80,-76,80,-183,80,80,80,-68,-84,80,80,80,80,80,-78,]),'TO':([3,7,13,15,22,29,33,44,53,66,67,68,69,71,72,73,74,75,76,77,81,82,84,85,86,87,88,90,92,93,94,95,96,97,98,100,133,147,150,206,212,213,216,223,229,230,247,250,260,266,283,292,296,308,309,312,322,323,330,332,],[-171,-70,-85,-172,-72,-71,-69,-73,-75,-135,-99,-95,-139,-134,-74,-145,-130,-144,-104,-141,-142,-103,-105,-136,-140,-128,-129,-133,-131,-87,-102,-68,-97,-132,-23,-86,-174,-111,-101,-184,-173,-81,-98,-88,-100,-96,-76,-183,-143,-137,310,-84,-89,310,310,-78,-90,-138,310,-204,]),'NOTEQ':([3,7,13,15,22,29,33,44,53,66,67,68,69,71,72,73,74,75,76,77,81,82,84,85,86,87,88,90,92,94,95,96,97,98,100,133,147,150,206,212,213,216,223,229,230,247,250,260,266,274,292,312,323,],[-171,-70,-85,-172,-72,-71,-69,-73,-75,-135,-99,-95,-139,-134,-74,-145,-130,-144,-104,-141,-142,-103,-105,-136,-140,-128,-129,-133,-131,-102,-68,-97,-132,-23,157,-174,-111,-101,-184,-173,-81,-98,-88,-100,-96,-76,-183,-143,-137,-68,-84,-78,-138,]),'ASC':([0,5,11,12,20,25,26,32,34,35,41,51,52,56,57,58,60,62,63,64,65,78,80,83,89,91,99,105,107,113,119,120,121,123,129,135,140,141,142,144,149,151,152,153,154,155,156,157,158,159,160,161,162,163,182,185,194,197,204,211,214,215,218,219,222,226,231,232,235,236,241,244,246,248,261,262,267,297,300,301,310,311,316,335,339,345,350,354,356,357,],[37,-8,-9,-5,37,37,37,37,-7,-6,37,37,-106,-108,-125,-124,-126,37,-158,37,-107,37,37,37,37,-109,-110,37,37,-147,37,37,37,37,-24,-157,-122,-123,37,37,37,37,-115,-116,-118,37,-119,-117,-121,-127,-112,-113,-120,-114,37,-10,37,-15,-28,37,37,37,37,37,37,37,37,37,37,37,37,37,-146,37,37,37,37,37,37,37,37,37,37,37,37,37,-32,-31,-30,-29,]),'IN':([3,7,13,15,22,29,33,44,48,53,66,67,68,69,71,72,73,74,75,76,77,81,82,84,85,86,87,88,90,92,94,95,96,97,98,100,133,147,150,191,206,212,213,216,223,229,230,240,247,250,260,266,274,292,312,323,],[-171,-70,-85,-172,-72,-71,-69,-73,-23,-75,-135,-99,-95,-139,-134,-74,-145,-130,-144,-104,-141,-142,-103,-105,-136,-140,-128,-129,-133,-131,-102,-68,-97,-132,-23,159,-174,-111,-101,239,-184,-173,-81,-98,-88,-100,-96,282,-76,-183,-143,-137,-68,-84,-78,-138,]),'REF':([48,49,101,114,128,174,209,290,302,334,],[-23,-21,174,174,174,174,-22,174,174,174,]),'INT':([48,49,101,114,128,174,209,231,239,282,290,301,302,334,],[-23,-21,178,178,178,178,-22,178,178,178,178,178,178,178,]),'RETURN':([0,5,11,12,25,32,34,35,105,113,119,120,129,144,185,194,197,204,218,222,246,316,335,339,345,350,354,356,357,],[41,-8,-9,-5,41,41,-7,-6,41,-147,41,41,-24,41,-10,41,-15,-28,41,41,-146,41,41,41,41,-32,-31,-30,-29,]),'$end':([2,5,11,12,24,32,34,35,113,117,118,119,129,185,197,198,204,246,350,354,356,357,],[0,-8,-9,-5,-1,-209,-7,-6,-147,-4,-2,-209,-24,-10,-15,-3,-28,-146,-32,-31,-30,-29,]),'FI':([3,7,13,15,22,29,33,44,53,66,67,68,69,71,72,73,74,75,76,77,81,82,84,85,86,87,88,90,92,93,94,95,96,97,98,100,105,106,113,133,143,147,150,187,206,212,213,216,217,221,222,223,229,230,246,247,250,257,259,260,263,266,292,293,294,296,298,312,319,322,323,],[-171,-70,-85,-172,-72,-71,-69,-73,-75,-135,-99,-95,-139,-134,-74,-145,-130,-144,-104,-141,-142,-103,-105,-136,-140,-128,-129,-133,-131,-87,-102,-68,-97,-132,-23,-86,-209,-170,-147,-174,220,-111,-101,-169,-184,-173,-81,-98,256,-164,-209,-88,-100,-96,-146,-76,-183,-165,-168,-143,296,-137,-84,-167,-92,-89,322,-78,-166,-90,-138,]),'EXIT':([0,5,11,12,25,32,34,35,105,113,119,120,129,144,185,194,197,204,218,222,246,316,335,339,345,350,354,356,357,],[43,-8,-9,-5,43,43,-7,-6,43,-147,43,43,-24,43,-10,43,-15,-28,43,43,-146,43,43,43,43,-32,-31,-30,-29,]),'ASSIGN':([3,6,7,13,15,19,22,29,33,38,40,44,46,48,49,52,53,54,55,56,57,58,59,60,61,65,95,98,101,133,164,165,166,168,169,170,172,173,175,176,177,178,179,181,183,191,195,199,206,209,212,213,234,247,250,292,303,304,305,312,326,327,],[-171,-74,-70,-85,-172,63,-72,-71,-69,-68,-23,-73,128,-23,-21,-106,-75,-160,-159,-108,-125,-124,-161,-126,135,-107,-68,-23,182,-174,-45,-39,-47,-42,-40,-50,-51,-58,-43,-46,235,-49,-59,-41,-44,241,244,-23,-184,-22,-173,-81,-57,-76,-183,-84,-53,-60,-52,-78,-62,-67,]),'READ':([0,5,11,12,20,25,26,32,34,35,41,51,52,56,57,58,60,62,63,64,65,78,80,83,89,91,99,105,107,113,119,120,121,123,129,135,140,141,142,144,149,151,152,153,154,155,156,157,158,159,160,161,162,163,182,185,194,197,204,211,214,215,218,219,222,226,231,232,235,236,241,244,246,248,261,262,267,297,300,301,310,311,316,335,339,345,350,354,356,357,],[45,-8,-9,-5,45,45,45,45,-7,-6,45,45,-106,-108,-125,-124,-126,45,-158,45,-107,45,45,45,45,-109,-110,45,45,-147,45,45,45,45,-24,-157,-122,-123,45,45,45,45,-115,-116,-118,45,-119,-117,-121,-127,-112,-113,-120,-114,45,-10,45,-15,-28,45,45,45,45,45,45,45,45,45,45,45,45,45,-146,45,45,45,45,45,45,45,45,45,45,45,45,45,-32,-31,-30,-29,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'operand3':([20,26,41,51,62,64,78,83,107,121,123,142,149,151,155,182,211,214,215,219,226,231,232,235,236,241,244,248,261,262,267,297,300,301,310,311,],[67,67,67,67,67,67,67,67,67,67,67,67,67,229,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'procedure_call':([0,20,25,26,32,41,51,62,64,78,80,83,89,105,107,119,120,121,123,142,144,149,151,155,182,194,211,214,215,218,219,222,226,231,232,235,236,241,244,248,261,262,267,297,300,301,310,311,316,335,339,345,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'for_control':([25,],[104,]),'return_action':([0,25,32,105,119,120,144,194,218,222,316,335,339,345,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'action_statement':([0,25,32,105,119,144,194,218,222,316,335,339,345,],[5,105,5,105,5,222,105,222,105,5,5,5,5,]),'boolean_literal':([20,26,41,51,62,64,78,83,89,107,121,123,142,149,151,155,182,211,214,215,219,226,231,232,235,236,241,244,248,261,262,267,297,300,301,310,311,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'synonym_list':([23,184,],[103,238,]),'string_mode':([101,114,128,174,290,302,334,],[173,173,173,173,173,173,173,]),'composite_mode':([101,114,128,174,290,302,334,],[168,168,168,168,168,168,168,]),'if_action':([0,25,32,105,119,120,144,194,218,222,316,335,339,345,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'membership_operator':([100,],[160,]),'result_action':([0,25,32,105,119,120,144,194,218,222,316,335,339,345,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'value_array_slice':([20,26,41,51,62,64,78,83,89,107,121,123,142,149,151,155,182,211,214,215,219,226,231,232,235,236,241,244,248,261,262,267,297,300,301,310,311,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'builtin_name':([0,20,25,26,32,41,51,62,64,78,80,83,89,105,107,119,120,121,123,142,144,149,151,155,182,194,211,214,215,218,219,222,226,231,232,235,236,241,244,248,261,262,267,297,300,301,310,311,316,335,339,345,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'formal_parameter_list':([249,313,],[291,333,]),'declaration_statement':([0,32,119,316,335,339,345,],[12,12,12,12,12,12,12,]),'location':([0,20,25,26,32,41,51,62,64,78,80,83,89,105,107,119,120,121,123,142,144,149,151,155,182,194,211,214,215,218,219,222,226,231,232,235,236,241,244,248,261,262,267,297,300,301,310,311,316,335,339,345,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'iteration':([108,],[189,]),'builtin_call':([0,20,25,26,32,41,51,62,64,78,80,83,89,105,107,119,120,121,123,142,144,149,151,155,182,194,211,214,215,218,219,222,226,231,232,235,236,241,244,248,261,262,267,297,300,301,310,311,316,335,339,345,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'else_clause':([143,293,],[217,319,]),'element_mode':([302,],[326,]),'procedure_definition':([122,],[204,]),'statement_nullable':([32,119,316,335,339,345,],[118,198,336,343,346,351,]),'bracketed_action':([0,25,32,105,119,120,144,194,218,222,316,335,339,345,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'array_location':([0,20,25,26,32,41,51,62,64,78,80,83,89,105,107,119,120,121,123,142,144,149,151,155,182,194,211,214,215,218,219,222,226,231,232,235,236,241,244,248,261,262,267,297,300,301,310,311,316,335,339,345,],[19,82,19,82,19,82,82,82,82,82,147,82,82,19,82,19,19,82,82,82,19,82,82,82,82,19,82,82,82,19,82,19,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,19,19,19,19,]),'relational_operator':([100,],[161,]),'parameter_list':([51,123,211,],[134,207,251,]),'closed_dyadic_operator':([19,],[61,]),'declaration_list':([30,196,],[116,245,]),'index_mode':([231,301,],[270,270,]),'boolean_mode':([101,114,128,174,231,239,282,290,301,302,334,],[164,164,164,164,164,164,164,164,164,164,164,]),'range_enumeration':([108,],[190,]),'discrete_range_mode':([101,114,128,174,231,239,282,290,301,302,334,],[166,166,166,166,166,166,166,166,166,166,166,]),'else_expression':([225,264,],[263,298,]),'value_array_element':([20,26,41,51,62,64,78,83,89,107,121,123,142,149,151,155,182,211,214,215,219,226,231,232,235,236,241,244,248,261,262,267,297,300,301,310,311,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'newmode_statement':([0,32,119,316,335,339,345,],[34,34,34,34,34,34,34,]),'identifier_list':([1,23,30,130,131,184,196,249,313,],[46,101,114,209,46,101,114,290,290,]),'discrete_mode_name':([101,114,128,174,231,239,282,290,301,302,334,],[180,180,180,180,180,180,180,180,180,180,180,]),'action':([0,25,32,105,119,120,144,194,218,222,316,335,339,345,],[27,27,27,27,27,200,27,27,27,27,27,27,27,27,]),'right_element':([248,],[287,]),'declaration':([30,196,],[115,115,]),'assigning_operator':([19,],[62,]),'discrete_mode':([101,114,128,174,231,239,282,290,301,302,334,],[169,169,169,169,272,281,306,169,272,169,169,]),'character_mode':([101,114,128,174,231,239,282,290,301,302,334,],[176,176,176,176,176,176,176,176,176,176,176,]),'action_statement_nullable':([25,105,194,222,],[110,187,242,259,]),'string_concatenation_operator':([19,68,230,],[59,141,141,]),'operator1':([100,],[155,]),'synonym_statement':([0,32,119,316,335,339,345,],[35,35,35,35,35,35,35,]),'do_action':([0,25,32,105,119,120,144,194,218,222,316,335,339,345,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'operand4':([20,26,41,51,62,64,78,83,89,107,121,123,142,149,151,155,182,211,214,215,219,226,231,232,235,236,241,244,248,261,262,267,297,300,301,310,311,],[94,94,94,94,94,94,94,94,150,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,]),'index_mode_list':([231,301,],[273,325,]),'mode':([101,114,128,174,290,302,334,],[177,195,208,234,317,327,342,]),'operand0':([20,26,41,51,62,64,78,83,107,121,123,149,182,211,214,215,219,226,231,232,235,236,241,244,248,261,262,267,297,300,301,310,311,],[100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,]),'array_slice':([0,20,25,26,32,41,51,62,64,78,80,83,89,105,107,119,120,121,123,142,144,149,151,155,182,194,211,214,215,218,219,222,226,231,232,235,236,241,244,248,261,262,267,297,300,301,310,311,316,335,339,345,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'integer_mode':([101,114,128,174,231,239,282,290,301,302,334,],[183,183,183,183,183,183,183,183,183,183,183,]),'arithmetic_multiplicative_operator':([19,96,216,],[54,151,151,]),'empty_literal':([20,26,41,51,62,64,78,83,89,107,121,123,142,149,151,155,182,211,214,215,219,226,231,232,235,236,241,244,248,261,262,267,297,300,301,310,311,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'expression_list':([64,149,214,],[137,227,252,]),'program':([0,],[2,]),'operand1':([20,26,41,51,62,64,78,83,107,121,123,149,155,182,211,214,215,219,226,231,232,235,236,241,244,248,261,262,267,297,300,301,310,311,],[68,68,68,68,68,68,68,68,68,68,68,68,230,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'expression':([20,26,41,51,62,64,78,83,107,121,123,149,182,211,214,215,219,226,231,232,235,236,241,244,248,261,262,267,297,300,301,310,311,],[70,112,124,132,136,138,145,148,188,201,132,228,237,132,253,254,258,265,268,268,278,268,283,285,286,294,295,299,321,254,268,331,332,]),'character_literal':([20,26,41,51,62,64,78,83,89,107,121,123,142,149,151,155,182,211,214,215,219,226,231,232,235,236,241,244,248,261,262,267,297,300,301,310,311,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'call_action':([0,20,25,26,32,41,51,62,64,78,80,83,89,105,107,119,120,121,123,142,144,149,151,155,182,194,211,214,215,218,219,222,226,231,232,235,236,241,244,248,261,262,267,297,300,301,310,311,316,335,339,345,],[6,72,6,72,6,72,72,72,72,72,72,72,72,6,72,6,6,72,72,72,6,72,72,72,72,6,72,72,72,6,72,6,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,6,6,6,6,]),'string_element':([0,20,25,26,32,41,51,62,64,78,80,83,89,105,107,119,120,121,123,142,144,149,151,155,182,194,211,214,215,218,219,222,226,231,232,235,236,241,244,248,261,262,267,297,300,301,310,311,316,335,339,345,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'newmode_list':([1,131,],[47,210,]),'end_value':([283,308,309,330,],[307,328,329,341,]),'operator2':([68,230,],[142,142,]),'literal':([20,26,41,51,62,64,78,83,89,107,121,123,142,149,151,155,182,211,214,215,219,226,231,232,235,236,241,244,248,261,262,267,297,300,301,310,311,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'formal_parameter':([249,313,],[288,288,]),'lower_bound':([64,231,232,236,301,],[139,269,269,269,269,]),'empty':([25,32,41,105,119,194,222,316,335,339,345,],[106,117,125,106,117,106,106,117,117,117,117,]),'step_value':([283,],[309,]),'result':([41,],[126,]),'referenced_location':([20,26,41,51,62,64,78,83,89,107,121,123,142,149,151,155,182,211,214,215,219,226,231,232,235,236,241,244,248,261,262,267,297,300,301,310,311,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'then_clause':([70,258,],[143,293,]),'procedure_statement':([0,32,119,316,335,339,345,],[11,11,11,11,11,11,11,]),'statement_list':([0,],[24,]),'monadic_operator':([20,26,41,51,62,64,78,83,107,121,123,142,149,151,155,182,211,214,215,219,226,231,232,235,236,241,244,248,261,262,267,297,300,301,310,311,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'synonym_definition':([23,184,],[102,102,]),'primitive_value':([20,26,41,51,62,64,78,83,89,107,121,123,142,149,151,155,182,211,214,215,219,226,231,232,235,236,241,244,248,261,262,267,297,300,301,310,311,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'character_string_literal':([20,26,41,51,62,64,78,83,89,107,121,123,142,149,151,155,182,211,214,215,219,226,231,232,235,236,241,244,248,261,262,267,297,300,301,310,311,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'string_length':([233,],[276,]),'mode_name':([101,114,128,174,290,302,334,],[165,165,165,165,165,165,165,]),'while_control':([25,104,],[109,186,]),'then_expression':([148,295,321,],[225,320,340,]),'arithmetic_additive_operator':([19,68,230,],[55,140,140,]),'initialization':([195,],[243,]),'upper_bound':([215,300,],[255,324,]),'start_element':([121,],[202,]),'left_element':([121,],[203,]),'step_enumeration':([108,],[192,]),'string_slice':([0,20,25,26,32,41,51,62,64,78,80,83,89,105,107,119,120,121,123,142,144,149,151,155,182,194,211,214,215,218,219,222,226,231,232,235,236,241,244,248,261,262,267,297,300,301,310,311,316,335,339,345,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'literal_range':([231,232,236,301,],[271,275,279,271,]),'exit_action':([0,25,32,105,119,120,144,194,218,222,316,335,339,345,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'statement':([0,32,119,316,335,339,345,],[32,119,119,119,119,119,119,]),'dereferenced_reference':([0,20,25,26,32,41,51,62,64,78,80,83,89,105,107,119,120,121,123,142,144,149,151,155,182,194,211,214,215,218,219,222,226,231,232,235,236,241,244,248,261,262,267,297,300,301,310,311,316,335,339,345,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'result_spec':([289,318,],[315,338,]),'array_element':([0,20,25,26,32,41,51,62,64,78,80,83,89,105,107,119,120,121,123,142,144,149,151,155,182,194,211,214,215,218,219,222,226,231,232,235,236,241,244,248,261,262,267,297,300,301,310,311,316,335,339,345,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'parenthesized_expression':([20,26,41,51,62,64,78,83,89,107,121,123,142,149,151,155,182,211,214,215,219,226,231,232,235,236,241,244,248,261,262,267,297,300,301,310,311,],[92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,]),'conditional_expression':([20,26,41,51,62,64,78,83,107,121,123,149,182,211,214,215,219,226,231,232,235,236,241,244,248,261,262,267,297,300,301,310,311,],[93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,]),'elsif_expression':([225,],[264,]),'identifier':([0,1,20,23,25,26,30,32,41,43,51,62,64,78,80,83,89,101,105,107,108,114,119,120,121,123,128,130,131,142,144,149,151,155,174,182,184,194,196,211,214,215,218,219,222,226,231,232,235,236,239,241,244,248,249,261,262,267,282,290,297,300,301,302,310,311,313,316,334,335,339,345,],[38,49,95,49,38,95,49,38,95,127,95,95,95,95,95,95,95,175,38,95,191,175,38,95,95,95,175,49,49,95,38,95,95,95,175,95,49,38,49,95,95,95,38,95,38,95,274,95,95,95,280,95,95,95,49,95,95,95,280,175,95,95,274,175,95,95,49,38,175,38,38,38,]),'operand2':([20,26,41,51,62,64,78,83,107,121,123,142,149,155,182,211,214,215,219,226,231,232,235,236,241,244,248,261,262,267,297,300,301,310,311,],[96,96,96,96,96,96,96,96,96,96,96,216,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'integer_literal':([20,26,41,51,62,64,78,83,89,107,121,123,142,149,151,155,182,211,214,215,219,226,231,232,233,235,236,241,244,248,261,262,267,297,300,301,310,311,],[97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,277,97,97,97,97,97,97,97,97,97,97,97,97,97,]),'mode_definition':([1,131,],[50,50,]),'control_part':([25,],[111,]),'array_mode':([101,114,128,174,290,302,334,],[179,179,179,179,179,179,179,]),'assignment_action':([0,25,32,105,119,120,144,194,218,222,316,335,339,345,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'reference_mode':([101,114,128,174,290,302,334,],[181,181,181,181,181,181,181,]),'action_statement_list':([144,218,],[221,257,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','Parser.py',72),
  ('statement_list -> statement statement_nullable','statement_list',2,'p_statement_list','Parser.py',76),
  ('statement_nullable -> statement statement_nullable','statement_nullable',2,'p_statement_nullable','Parser.py',88),
  ('statement_nullable -> empty','statement_nullable',1,'p_statement_nullable','Parser.py',89),
  ('statement -> declaration_statement','statement',1,'p_statement','Parser.py',101),
  ('statement -> synonym_statement','statement',1,'p_statement','Parser.py',102),
  ('statement -> newmode_statement','statement',1,'p_statement','Parser.py',103),
  ('statement -> action_statement','statement',1,'p_statement','Parser.py',104),
  ('statement -> procedure_statement','statement',1,'p_statement','Parser.py',105),
  ('synonym_statement -> SYN synonym_list SEMI','synonym_statement',3,'p_synonym_statement','Parser.py',114),
  ('synonym_list -> synonym_definition','synonym_list',1,'p_synonym_list','Parser.py',118),
  ('synonym_list -> synonym_definition COMMA synonym_list','synonym_list',3,'p_synonym_list','Parser.py',119),
  ('synonym_definition -> identifier_list mode ASSIGN expression','synonym_definition',4,'p_synonym_definition','Parser.py',128),
  ('synonym_definition -> identifier_list ASSIGN expression','synonym_definition',3,'p_synonym_definition','Parser.py',129),
  ('declaration_statement -> DCL declaration_list SEMI','declaration_statement',3,'p_declaration_statement','Parser.py',143),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','Parser.py',147),
  ('declaration_list -> declaration COMMA declaration_list','declaration_list',3,'p_declaration_list','Parser.py',148),
  ('declaration -> identifier_list mode initialization','declaration',3,'p_declaration','Parser.py',157),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','Parser.py',158),
  ('initialization -> ASSIGN expression','initialization',2,'p_initialization','Parser.py',162),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','Parser.py',166),
  ('identifier_list -> identifier COMMA identifier_list','identifier_list',3,'p_identifier_list','Parser.py',167),
  ('identifier -> ID','identifier',1,'p_identifier','Parser.py',176),
  ('newmode_statement -> TYPE newmode_list SEMI','newmode_statement',3,'p_newmode_statement','Parser.py',186),
  ('newmode_list -> mode_definition','newmode_list',1,'p_newmode_list','Parser.py',190),
  ('newmode_list -> mode_definition COMMA newmode_list','newmode_list',3,'p_newmode_list','Parser.py',191),
  ('mode_definition -> identifier_list ASSIGN mode','mode_definition',3,'p_mode_definition','Parser.py',200),
  ('procedure_statement -> ID COLON procedure_definition','procedure_statement',3,'p_procedure_statement','Parser.py',211),
  ('procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI','procedure_definition',9,'p_procedure_definition','Parser.py',215),
  ('procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI','procedure_definition',8,'p_procedure_definition','Parser.py',216),
  ('procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI','procedure_definition',8,'p_procedure_definition','Parser.py',217),
  ('procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI','procedure_definition',7,'p_procedure_definition','Parser.py',218),
  ('formal_parameter_list -> formal_parameter','formal_parameter_list',1,'p_formal_parameter_list','Parser.py',231),
  ('formal_parameter_list -> formal_parameter COMMA formal_parameter_list','formal_parameter_list',3,'p_formal_parameter_list','Parser.py',232),
  ('formal_parameter -> identifier_list mode LOC','formal_parameter',3,'p_formal_parameter','Parser.py',241),
  ('formal_parameter -> identifier_list mode','formal_parameter',2,'p_formal_parameter','Parser.py',242),
  ('result_spec -> RETURNS LPAREN mode LOC RPAREN','result_spec',5,'p_result_spec','Parser.py',248),
  ('result_spec -> RETURNS LPAREN mode RPAREN','result_spec',4,'p_result_spec','Parser.py',249),
  ('mode -> mode_name','mode',1,'p_mode','Parser.py',254),
  ('mode -> discrete_mode','mode',1,'p_mode','Parser.py',255),
  ('mode -> reference_mode','mode',1,'p_mode','Parser.py',256),
  ('mode -> composite_mode','mode',1,'p_mode','Parser.py',257),
  ('mode_name -> identifier','mode_name',1,'p_mode_name','Parser.py',261),
  ('discrete_mode -> integer_mode','discrete_mode',1,'p_discrete_mode','Parser.py',269),
  ('discrete_mode -> boolean_mode','discrete_mode',1,'p_discrete_mode','Parser.py',270),
  ('discrete_mode -> character_mode','discrete_mode',1,'p_discrete_mode','Parser.py',271),
  ('discrete_mode -> discrete_range_mode','discrete_mode',1,'p_discrete_mode','Parser.py',272),
  ('discrete_mode_name -> identifier','discrete_mode_name',1,'p_discrete_mode_name','Parser.py',276),
  ('integer_mode -> INT','integer_mode',1,'p_integer_mode','Parser.py',280),
  ('boolean_mode -> BOOL','boolean_mode',1,'p_boolean_mode','Parser.py',284),
  ('character_mode -> CHAR','character_mode',1,'p_character_mode','Parser.py',288),
  ('discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','Parser.py',297),
  ('discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','Parser.py',298),
  ('literal_range -> lower_bound COLON upper_bound','literal_range',3,'p_literal_range','Parser.py',302),
  ('lower_bound -> expression','lower_bound',1,'p_lower_bound','Parser.py',306),
  ('upper_bound -> expression','upper_bound',1,'p_upper_bound','Parser.py',310),
  ('reference_mode -> REF mode','reference_mode',2,'p_reference_mode','Parser.py',317),
  ('composite_mode -> string_mode','composite_mode',1,'p_composite_mode','Parser.py',324),
  ('composite_mode -> array_mode','composite_mode',1,'p_composite_mode','Parser.py',325),
  ('string_mode -> CHARS LBRACKET string_length RBRACKET','string_mode',4,'p_string_mode','Parser.py',329),
  ('string_length -> integer_literal','string_length',1,'p_string_length','Parser.py',333),
  ('array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode','array_mode',5,'p_array_mode','Parser.py',337),
  ('index_mode_list -> index_mode','index_mode_list',1,'p_index_mode_list','Parser.py',341),
  ('index_mode_list -> index_mode COMMA index_mode_list','index_mode_list',3,'p_index_mode_list','Parser.py',342),
  ('index_mode -> discrete_mode','index_mode',1,'p_index_mode','Parser.py',351),
  ('index_mode -> literal_range','index_mode',1,'p_index_mode','Parser.py',352),
  ('element_mode -> mode','element_mode',1,'p_element_mode','Parser.py',356),
  ('location -> identifier','location',1,'p_location','Parser.py',367),
  ('location -> dereferenced_reference','location',1,'p_location','Parser.py',368),
  ('location -> string_element','location',1,'p_location','Parser.py',369),
  ('location -> string_slice','location',1,'p_location','Parser.py',370),
  ('location -> array_element','location',1,'p_location','Parser.py',371),
  ('location -> array_slice','location',1,'p_location','Parser.py',372),
  ('location -> call_action','location',1,'p_location','Parser.py',373),
  ('dereferenced_reference -> array_location ARROW','dereferenced_reference',2,'p_dereferenced_reference','Parser.py',377),
  ('string_element -> identifier LBRACKET start_element RBRACKET','string_element',4,'p_string_element','Parser.py',381),
  ('start_element -> expression','start_element',1,'p_start_element','Parser.py',385),
  ('string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET','string_slice',6,'p_string_slice','Parser.py',389),
  ('left_element -> expression','left_element',1,'p_left_element','Parser.py',393),
  ('right_element -> expression','right_element',1,'p_right_element','Parser.py',397),
  ('array_element -> array_location LBRACKET expression_list RBRACKET','array_element',4,'p_array_element','Parser.py',401),
  ('expression_list -> expression','expression_list',1,'p_expression_list','Parser.py',405),
  ('expression_list -> expression COMMA expression_list','expression_list',3,'p_expression_list','Parser.py',406),
  ('array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET','array_slice',6,'p_array_slice','Parser.py',413),
  ('array_location -> location','array_location',1,'p_array_location','Parser.py',417),
  ('expression -> operand0','expression',1,'p_expression','Parser.py',427),
  ('expression -> conditional_expression','expression',1,'p_expression','Parser.py',428),
  ('parenthesized_expression -> LPAREN expression RPAREN','parenthesized_expression',3,'p_parenthesized_expression','Parser.py',432),
  ('conditional_expression -> IF expression then_expression else_expression FI','conditional_expression',5,'p_conditional_expression','Parser.py',440),
  ('conditional_expression -> IF expression then_expression elsif_expression else_expression FI','conditional_expression',6,'p_conditional_expression','Parser.py',441),
  ('then_expression -> THEN expression','then_expression',2,'p_then_expression','Parser.py',445),
  ('else_expression -> ELSE expression','else_expression',2,'p_else_expression','Parser.py',449),
  ('elsif_expression -> ELSIF expression then_expression','elsif_expression',3,'p_elsif_expression','Parser.py',453),
  ('elsif_expression -> elsif_expression ELSIF expression then_expression','elsif_expression',4,'p_elsif_expression','Parser.py',454),
  ('operand0 -> operand1','operand0',1,'p_operand0','Parser.py',469),
  ('operand0 -> operand0 operator1 operand1','operand0',3,'p_operand0','Parser.py',470),
  ('operand1 -> operand2','operand1',1,'p_operand1','Parser.py',477),
  ('operand1 -> operand1 operator2 operand2','operand1',3,'p_operand1','Parser.py',478),
  ('operand2 -> operand3','operand2',1,'p_operand2','Parser.py',485),
  ('operand2 -> operand2 arithmetic_multiplicative_operator operand3','operand2',3,'p_operand2','Parser.py',486),
  ('operand3 -> monadic_operator operand4','operand3',2,'p_operand3','Parser.py',494),
  ('operand3 -> operand4','operand3',1,'p_operand3','Parser.py',495),
  ('operand4 -> array_location','operand4',1,'p_operand4','Parser.py',502),
  ('operand4 -> referenced_location','operand4',1,'p_operand4','Parser.py',503),
  ('operand4 -> primitive_value','operand4',1,'p_operand4','Parser.py',504),
  ('arithmetic_multiplicative_operator -> TIMES','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',515),
  ('arithmetic_multiplicative_operator -> DIVIDE','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',516),
  ('arithmetic_multiplicative_operator -> MODULO','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',517),
  ('monadic_operator -> MINUS','monadic_operator',1,'p_monadic_operator','Parser.py',521),
  ('monadic_operator -> NOT','monadic_operator',1,'p_monadic_operator','Parser.py',522),
  ('referenced_location -> ARROW array_location','referenced_location',2,'p_referenced_location','Parser.py',526),
  ('operator1 -> membership_operator','operator1',1,'p_operator1','Parser.py',530),
  ('operator1 -> relational_operator','operator1',1,'p_operator1','Parser.py',531),
  ('relational_operator -> AND','relational_operator',1,'p_relational_operator','Parser.py',534),
  ('relational_operator -> OR','relational_operator',1,'p_relational_operator','Parser.py',535),
  ('relational_operator -> EQUAL','relational_operator',1,'p_relational_operator','Parser.py',536),
  ('relational_operator -> NOTEQ','relational_operator',1,'p_relational_operator','Parser.py',537),
  ('relational_operator -> GREATER','relational_operator',1,'p_relational_operator','Parser.py',538),
  ('relational_operator -> GTEQUAL','relational_operator',1,'p_relational_operator','Parser.py',539),
  ('relational_operator -> LESS','relational_operator',1,'p_relational_operator','Parser.py',540),
  ('relational_operator -> LTEQUAL','relational_operator',1,'p_relational_operator','Parser.py',541),
  ('operator2 -> arithmetic_additive_operator','operator2',1,'p_operator2','Parser.py',545),
  ('operator2 -> string_concatenation_operator','operator2',1,'p_operator2','Parser.py',546),
  ('arithmetic_additive_operator -> PLUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','Parser.py',550),
  ('arithmetic_additive_operator -> MINUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','Parser.py',551),
  ('string_concatenation_operator -> CONCAT','string_concatenation_operator',1,'p_string_concatenation_operator','Parser.py',555),
  ('membership_operator -> IN','membership_operator',1,'p_membership_operator','Parser.py',560),
  ('primitive_value -> literal','primitive_value',1,'p_primitive_value','Parser.py',572),
  ('primitive_value -> value_array_element','primitive_value',1,'p_primitive_value','Parser.py',573),
  ('primitive_value -> value_array_slice','primitive_value',1,'p_primitive_value','Parser.py',574),
  ('primitive_value -> parenthesized_expression','primitive_value',1,'p_primitive_value','Parser.py',575),
  ('literal -> integer_literal','literal',1,'p_literal','Parser.py',579),
  ('literal -> boolean_literal','literal',1,'p_literal','Parser.py',580),
  ('literal -> character_literal','literal',1,'p_literal','Parser.py',581),
  ('literal -> empty_literal','literal',1,'p_literal','Parser.py',582),
  ('literal -> character_string_literal','literal',1,'p_literal','Parser.py',583),
  ('value_array_element -> primitive_value LBRACKET expression_list RBRACKET','value_array_element',4,'p_value_array_element','Parser.py',587),
  ('value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET','value_array_slice',6,'p_value_array_slice','Parser.py',591),
  ('integer_literal -> ICONST','integer_literal',1,'p_integer_literal','Parser.py',599),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','Parser.py',603),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','Parser.py',604),
  ('character_literal -> CCONST','character_literal',1,'p_character_literal','Parser.py',608),
  ('character_literal -> HAT LPAREN ICONST RPAREN','character_literal',4,'p_character_literal','Parser.py',609),
  ('empty_literal -> NULL','empty_literal',1,'p_empty_literal','Parser.py',618),
  ('character_string_literal -> SCONST','character_string_literal',1,'p_character_string_literal','Parser.py',622),
  ('action_statement -> identifier COLON action SEMI','action_statement',4,'p_action_statement','Parser.py',633),
  ('action_statement -> action SEMI','action_statement',2,'p_action_statement','Parser.py',634),
  ('action -> bracketed_action','action',1,'p_action','Parser.py',639),
  ('action -> assignment_action','action',1,'p_action','Parser.py',640),
  ('action -> call_action','action',1,'p_action','Parser.py',641),
  ('action -> exit_action','action',1,'p_action','Parser.py',642),
  ('action -> result_action','action',1,'p_action','Parser.py',643),
  ('action -> return_action','action',1,'p_action','Parser.py',644),
  ('bracketed_action -> if_action','bracketed_action',1,'p_bracketed_action','Parser.py',648),
  ('bracketed_action -> do_action','bracketed_action',1,'p_bracketed_action','Parser.py',649),
  ('assignment_action -> array_location assigning_operator expression','assignment_action',3,'p_assignment_action','Parser.py',653),
  ('assigning_operator -> closed_dyadic_operator ASSIGN','assigning_operator',2,'p_assigning_operator','Parser.py',657),
  ('assigning_operator -> ASSIGN','assigning_operator',1,'p_assigning_operator','Parser.py',658),
  ('closed_dyadic_operator -> arithmetic_additive_operator','closed_dyadic_operator',1,'p_closed_dyadic_operator','Parser.py',662),
  ('closed_dyadic_operator -> arithmetic_multiplicative_operator','closed_dyadic_operator',1,'p_closed_dyadic_operator','Parser.py',663),
  ('closed_dyadic_operator -> string_concatenation_operator','closed_dyadic_operator',1,'p_closed_dyadic_operator','Parser.py',664),
  ('if_action -> IF expression then_clause else_clause FI','if_action',5,'p_if_action','Parser.py',668),
  ('if_action -> IF expression then_clause FI','if_action',4,'p_if_action','Parser.py',669),
  ('then_clause -> THEN action_statement_list','then_clause',2,'p_then_clause','Parser.py',673),
  ('else_clause -> ELSE action_statement_list','else_clause',2,'p_else_clause','Parser.py',677),
  ('else_clause -> ELSIF expression then_clause else_clause','else_clause',4,'p_else_clause','Parser.py',678),
  ('else_clause -> ELSIF expression then_clause','else_clause',3,'p_else_clause','Parser.py',679),
  ('action_statement_list -> action_statement action_statement_nullable','action_statement_list',2,'p_action_statement_list','Parser.py',690),
  ('action_statement_nullable -> action_statement action_statement_nullable','action_statement_nullable',2,'p_action_statement_nullable','Parser.py',702),
  ('action_statement_nullable -> empty','action_statement_nullable',1,'p_action_statement_nullable','Parser.py',703),
  ('call_action -> procedure_call','call_action',1,'p_call_action','Parser.py',720),
  ('call_action -> builtin_call','call_action',1,'p_call_action','Parser.py',721),
  ('builtin_call -> builtin_name LPAREN parameter_list RPAREN','builtin_call',4,'p_builtin_call','Parser.py',725),
  ('builtin_call -> builtin_name LPAREN RPAREN','builtin_call',3,'p_builtin_call','Parser.py',726),
  ('builtin_name -> ABS','builtin_name',1,'p_builtin_name','Parser.py',731),
  ('builtin_name -> ASC','builtin_name',1,'p_builtin_name','Parser.py',732),
  ('builtin_name -> NUM','builtin_name',1,'p_builtin_name','Parser.py',733),
  ('builtin_name -> UPPER','builtin_name',1,'p_builtin_name','Parser.py',734),
  ('builtin_name -> LOWER','builtin_name',1,'p_builtin_name','Parser.py',735),
  ('builtin_name -> LENGTH','builtin_name',1,'p_builtin_name','Parser.py',736),
  ('builtin_name -> READ','builtin_name',1,'p_builtin_name','Parser.py',737),
  ('builtin_name -> PRINT','builtin_name',1,'p_builtin_name','Parser.py',738),
  ('procedure_call -> ID LPAREN parameter_list RPAREN','procedure_call',4,'p_procedure_call','Parser.py',742),
  ('procedure_call -> ID LPAREN RPAREN','procedure_call',3,'p_procedure_call','Parser.py',743),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','Parser.py',747),
  ('parameter_list -> expression COMMA parameter_list','parameter_list',3,'p_parameter_list','Parser.py',748),
  ('exit_action -> EXIT identifier','exit_action',2,'p_exit_action','Parser.py',757),
  ('return_action -> RETURN result','return_action',2,'p_return_action','Parser.py',765),
  ('result -> expression','result',1,'p_result','Parser.py',769),
  ('result -> empty','result',1,'p_result','Parser.py',770),
  ('result_action -> RESULT expression','result_action',2,'p_result_action','Parser.py',773),
  ('do_action -> DO control_part SEMI action_statement_nullable OD','do_action',5,'p_do_action','Parser.py',781),
  ('do_action -> DO action_statement_nullable OD','do_action',3,'p_do_action','Parser.py',782),
  ('control_part -> for_control while_control','control_part',2,'p_control_part','Parser.py',789),
  ('control_part -> for_control','control_part',1,'p_control_part','Parser.py',790),
  ('control_part -> while_control','control_part',1,'p_control_part','Parser.py',791),
  ('for_control -> FOR iteration','for_control',2,'p_for_control','Parser.py',795),
  ('iteration -> step_enumeration','iteration',1,'p_iteration','Parser.py',799),
  ('iteration -> range_enumeration','iteration',1,'p_iteration','Parser.py',800),
  ('step_enumeration -> identifier ASSIGN expression step_value DOWN end_value','step_enumeration',6,'p_step_enumeration','Parser.py',804),
  ('step_enumeration -> identifier ASSIGN expression step_value end_value','step_enumeration',5,'p_step_enumeration','Parser.py',805),
  ('step_enumeration -> identifier ASSIGN expression DOWN end_value','step_enumeration',5,'p_step_enumeration','Parser.py',806),
  ('step_enumeration -> identifier ASSIGN expression end_value','step_enumeration',4,'p_step_enumeration','Parser.py',807),
  ('step_value -> BY expression','step_value',2,'p_step_value','Parser.py',819),
  ('end_value -> TO expression','end_value',2,'p_end_value','Parser.py',823),
  ('range_enumeration -> identifier DOWN IN discrete_mode','range_enumeration',4,'p_range_enumeration','Parser.py',827),
  ('range_enumeration -> identifier IN discrete_mode','range_enumeration',3,'p_range_enumeration','Parser.py',828),
  ('while_control -> WHILE expression','while_control',2,'p_while_control','Parser.py',835),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',841),
]
