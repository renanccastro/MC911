
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ICONST CCONST SCONST COMMA PLUS MINUS TIMES DIVIDE COLON LPAREN RPAREN ASSIGN SEMI ARROW LTEQUAL LESS GREATER GTEQUAL EQUAL LBRACKET RBRACKET ID MODULO AND OR NOTEQ NOT CONCAT ARRAY CHARS OD ABS CHAR FI LOWER UPPER DOWN IF DCL LOC ELSE REF ELSIF READ RETURNS LENGTH THEN RESULT WHILE DO FOR TYPE BY INT ASC SYN EXIT FALSE BOOL NUM NULL TO IN PRINT PROC RETURN END TRUEprogram : statement_liststatement_list : statement statement_nullablestatement_nullable : statement statement_nullable\n                              | emptystatement : declaration_statement\n                     | synonym_statement\n                     | newmode_statement\n                     | action_statement\n                     | procedure_statementsynonym_statement : SYN synonym_list SEMIsynonym_list : synonym_definition\n                        | synonym_definition COMMA synonym_listsynonym_definition : identifier_list mode ASSIGN expression\n                              | identifier_list ASSIGN expressiondeclaration_statement : DCL declaration_list SEMIdeclaration_list : declaration\n                            | declaration COMMA declaration_listdeclaration : identifier_list mode initialization\n                       | identifier_list modeinitialization : ASSIGN expressionidentifier_list : identifier\n                           | identifier COMMA identifier_listidentifier : IDnewmode_statement : TYPE newmode_list SEMInewmode_list : mode_definition\n                        | mode_definition COMMA newmode_listmode_definition : identifier_list ASSIGN modeprocedure_statement : ID COLON procedure_definitionprocedure_definition : PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI\n                                | PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMIformal_parameter_list : formal_parameter\n                                 | formal_parameter COMMA formal_parameter_listformal_parameter : identifier_list mode LOC\n                            | identifier_list moderesult_spec : RETURNS LPAREN mode LOC RPAREN\n                       | RETURNS LPAREN mode RPARENmode : mode_name\n                | discrete_mode\n                | reference_mode\n                | composite_modemode_name : identifierdiscrete_mode : integer_mode\n                         | boolean_mode\n                         | character_mode\n                         | discrete_range_modediscrete_mode_name : identifierinteger_mode : INTboolean_mode : BOOLcharacter_mode : CHARdiscrete_range_mode : discrete_mode_name LPAREN literal_range RPAREN\n                               | discrete_mode LPAREN literal_range RPARENliteral_range : lower_bound COLON upper_boundlower_bound : expressionupper_bound : expressionreference_mode : REF modecomposite_mode : string_mode\n                          | array_modestring_mode : CHARS LBRACKET string_length RBRACKETstring_length : integer_literalarray_mode : ARRAY LBRACKET index_mode_list RBRACKET element_modeindex_mode_list : index_mode\n                           | index_mode COMMA index_mode_listindex_mode : discrete_mode\n                      | literal_rangeelement_mode : modelocation : identifier\n\t\t\t\t    | dereferenced_reference\n\t\t\t\t    | string_element\n\t\t\t\t    | string_slice\n\t\t\t\t    | array_element\n\t\t\t\t    | array_slice\n\t\t\t\t    | call_actiondereferenced_reference : array_location ARROWstring_element : identifier LBRACKET start_element RBRACKETstart_element : expressionstring_slice : identifier LBRACKET left_element COLON right_element RBRACKETleft_element : expressionright_element : expressionarray_element : array_location LBRACKET expression_list RBRACKETexpression_list : expression\n    \t\t\t\t\t   | expression COMMA expression_listarray_slice : array_location LBRACKET lower_bound COLON upper_bound RBRACKETarray_location : locationexpression : operand0\n                      | conditional_expressionparenthesized_expression : LPAREN expression RPARENconditional_expression : IF expression then_expression else_expression FI\n                                  | IF expression then_expression elsif_expression else_expression FIthen_expression : THEN expressionelse_expression : ELSE expressionelsif_expression : ELSIF expression then_expression\n                            | elsif_expression ELSIF expression then_expressionoperand0 : operand1\n                    | operand0 operator1 operand1operand1 : operand2\n                    | operand1 operator2 operand2operand2 : operand3\n                    | operand2 arithmetic_multiplicative_operator operand3operand3 : monadic_operator operand4\n                    | operand4operand4 : array_location\n                    | referenced_location\n                    | primitive_valuearithmetic_multiplicative_operator : TIMES\n                                              | DIVIDE\n                                              | MODULOmonadic_operator : MINUS\n                            | NOTreferenced_location : ARROW array_locationoperator1 : relational_operator\n                     | membership_operatoroperator2 : arithmetic_additive_operator\n                     | string_concatenation_operatorarithmetic_additive_operator : PLUS\n                                        | MINUSstring_concatenation_operator : CONCATrelational_operator : AND\n                               | OR\n                               | EQUAL\n                               | NOTEQ\n                               | GREATER\n                               | GTEQUAL\n                               | LESS\n                               | LTEQUALmembership_operator : INprimitive_value : literal\n                           | value_array_element\n                           | value_array_slice\n                           | parenthesized_expressionliteral : integer_literal\n                   | boolean_literal\n                   | character_literal\n                   | empty_literal\n                   | character_string_literalvalue_array_element : primitive_value LBRACKET expression_list RBRACKETvalue_array_slice : primitive_value LBRACKET expression COLON expression RBRACKETinteger_literal : ICONSTboolean_literal : TRUE\n                           | FALSEcharacter_literal : CCONSTempty_literal : NULLcharacter_string_literal : SCONSTaction_statement : identifier COLON action SEMI\n                            | action SEMIaction : bracketed_action\n                  | assignment_action\n                  | call_action\n                  | exit_action\n                  | result_action\n                  | return_actionbracketed_action : if_action\n                            | do_actionassignment_action : array_location assigning_operator expressionassigning_operator : closed_dyadic_operator ASSIGN\n                              | ASSIGNclosed_dyadic_operator : arithmetic_additive_operator\n                                  | arithmetic_multiplicative_operator\n                                  | string_concatenation_operatorif_action : IF expression then_clause else_clause FI\n                     | IF expression then_clause FIthen_clause : THEN action_statement_listelse_clause : ELSE action_statement_list\n                       | ELSIF expression then_clause else_clause\n                       | ELSIF expression then_clauseaction_statement_list : action_statement action_statement_nullableaction_statement_nullable : action_statement action_statement_nullable\n                                     | emptycall_action : procedure_call\n                       | builtin_callbuiltin_call : builtin_name LPAREN parameter_list RPAREN\n                        | builtin_name LPAREN RPARENbuiltin_name : ABS\n                        | ASC\n                        | NUM\n                        | UPPER\n                        | LOWER\n                        | LENGTH\n                        | READ\n                        | PRINTprocedure_call : ID LPAREN parameter_list RPAREN\n                          | ID LPAREN RPARENparameter_list : expression\n                          | expression COMMA parameter_listexit_action : EXIT label_idlabel_id : IDreturn_action : RETURN resultresult : expression\n                  | emptyresult_action : RESULT expressiondo_action : DO control_part SEMI action_statement_nullable OD\n                     | DO action_statement_nullable ODcontrol_part : for_control while_control \n                        | for_control   \n                        | while_controlfor_control : FOR iterationiteration : step_enumeration\n                     | range_enumerationstep_enumeration : identifier ASSIGN expression step_value DOWN end_value\n                            | identifier ASSIGN expression step_value end_value\n                            | identifier ASSIGN expression DOWN end_value\n                            | identifier ASSIGN expression end_valuestep_value : BY expressionend_value : TO expressionrange_enumeration : identifier DOWN IN discrete_mode\n                             | identifier IN discrete_modewhile_control : WHILE expressionempty :'
    
_lr_action_items = {'GTEQUAL':([8,10,16,18,19,37,41,44,54,55,56,57,58,59,60,63,65,66,68,70,71,72,73,74,75,76,78,79,80,81,82,83,84,85,117,130,149,153,184,207,210,211,212,217,235,240,246,253,269,304,311,317,],[-71,-83,-70,-69,-67,-168,-68,-169,-23,-100,-93,148,-127,-142,-137,-131,-103,-140,-129,-133,-130,-141,-138,-66,-126,-132,-139,-97,-128,-102,-95,-134,-101,-72,-73,-181,-109,-99,-171,-180,-96,-94,-86,-98,-170,-74,-79,-135,-66,-76,-82,-136,]),'NUM':([0,2,4,5,6,13,17,21,22,36,40,46,49,51,53,61,64,67,69,77,98,102,103,107,108,116,118,119,120,121,122,123,124,126,132,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,151,154,155,167,179,180,186,201,202,208,216,218,220,223,225,227,228,230,238,239,241,244,247,248,254,255,258,293,298,301,306,310,315,331,342,343,],[1,-6,1,-9,-5,1,-8,1,1,-7,1,1,1,-144,-108,1,1,1,1,-107,1,1,1,1,1,1,-115,-116,-155,-114,-104,-105,1,-106,-28,-113,-112,1,-118,-111,1,-120,-117,-119,-124,-125,-110,-123,-121,-122,1,1,1,1,-10,-24,-15,1,-154,1,1,1,1,1,1,1,1,1,1,1,-143,1,1,1,1,1,1,1,1,1,1,1,1,1,-30,-29,]),'DOWN':([8,10,16,18,19,37,41,44,52,54,55,56,57,58,59,60,63,65,66,68,70,71,72,73,74,75,76,78,79,80,81,82,83,84,85,93,117,130,149,153,184,200,207,210,211,212,217,235,240,246,253,282,295,304,309,311,317,320,326,],[-71,-83,-70,-69,-67,-168,-68,-169,-85,-23,-100,-93,-84,-127,-142,-137,-131,-103,-140,-129,-133,-130,-141,-138,-66,-126,-132,-139,-97,-128,-102,-95,-134,-101,-72,-23,-73,-181,-109,-99,-171,242,-180,-96,-94,-86,-98,-170,-74,-79,-135,307,-87,-76,328,-82,-136,-88,-202,]),'NOT':([13,21,22,46,64,67,98,102,107,116,118,119,120,121,122,123,124,126,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,151,154,167,202,208,216,220,225,227,228,230,238,239,244,247,248,254,255,258,293,298,301,306,310,],[53,53,53,53,53,53,53,53,53,53,-115,-116,-155,-114,-104,-105,53,-106,-113,-112,53,-118,-111,53,-120,-117,-119,-124,-125,-110,-123,-121,-122,53,53,53,-154,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'COMMA':([8,10,16,18,19,37,41,44,52,54,55,56,57,58,59,60,63,65,66,68,70,71,72,73,74,75,76,78,79,80,81,82,83,84,85,90,92,93,97,99,117,129,130,149,153,162,163,164,165,166,168,169,170,171,172,174,175,176,177,184,187,205,207,210,211,212,214,217,226,229,233,235,237,240,246,252,253,267,268,270,272,276,284,287,288,295,299,302,303,304,311,312,317,320,322,323,324,],[-71,-83,-70,-69,-67,-168,-68,-169,-85,-23,-100,-93,-84,-127,-142,-137,-131,-103,-140,-129,-133,-130,-141,-138,-66,-126,-132,-139,-97,-128,-102,-95,-134,-101,-72,157,178,-23,182,185,-73,208,-181,-109,-99,-48,-44,-41,-57,-42,-40,-43,-45,-37,-38,-47,-39,-49,-56,-171,-19,247,-180,-96,-94,-86,247,-98,-55,-14,-27,-170,-18,-74,-79,290,-135,-13,-63,-64,301,-20,247,-54,-34,-87,-50,-51,-58,-76,-82,-33,-136,-88,-52,-65,-60,]),'ID':([0,2,4,5,6,13,17,21,22,24,25,28,34,36,40,46,49,51,53,61,64,67,69,77,91,92,93,98,101,102,103,107,108,112,116,118,119,120,121,122,123,124,126,132,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,151,154,155,157,159,167,178,179,180,181,182,185,186,201,202,208,209,216,218,220,223,225,227,228,230,232,238,239,241,243,244,247,248,250,254,255,258,279,290,293,298,300,301,306,310,315,331,332,342,343,],[3,-6,3,-9,-5,54,-8,54,54,93,93,93,105,-7,54,54,3,-144,-108,54,54,54,54,-107,93,-21,-23,54,93,54,191,54,54,93,54,-115,-116,-155,-114,-104,-105,54,-106,-28,-113,-112,54,-118,-111,54,-120,-117,-119,-124,-125,-110,-123,-121,-122,54,54,54,93,93,54,93,-10,-24,93,93,93,-15,54,-154,54,93,54,54,54,54,54,54,54,54,-22,54,54,-143,93,54,54,54,93,54,54,54,93,93,54,54,93,54,54,54,3,3,93,-30,-29,]),'TYPE':([0,2,4,5,6,17,36,49,51,132,179,180,186,241,315,331,342,343,],[25,-6,25,-9,-5,-8,-7,25,-144,-28,-10,-24,-15,-143,25,25,-30,-29,]),'EQUAL':([8,10,16,18,19,37,41,44,54,55,56,57,58,59,60,63,65,66,68,70,71,72,73,74,75,76,78,79,80,81,82,83,84,85,117,130,149,153,184,207,210,211,212,217,235,240,246,253,269,304,311,317,],[-71,-83,-70,-69,-67,-168,-68,-169,-23,-100,-93,142,-127,-142,-137,-131,-103,-140,-129,-133,-130,-141,-138,-66,-126,-132,-139,-97,-128,-102,-95,-134,-101,-72,-73,-181,-109,-99,-171,-180,-96,-94,-86,-98,-170,-74,-79,-135,-66,-76,-82,-136,]),'CONCAT':([3,8,10,16,18,19,29,37,41,42,43,44,54,55,56,58,59,60,63,65,66,68,70,71,72,73,74,75,76,78,79,80,81,82,83,84,85,117,130,149,153,184,191,207,210,211,212,217,235,240,246,253,269,304,311,317,],[-23,-71,-83,-70,-69,-67,-66,-168,-68,119,-72,-169,-23,-100,119,-127,-142,-137,-131,-103,-140,-129,-133,-130,-141,-138,-66,-126,-132,-139,-97,-128,-102,-95,-134,-101,-72,-73,-181,-109,-99,-171,-23,-180,-96,119,-86,-98,-170,-74,-79,-135,-66,-76,-82,-136,]),'OD':([40,51,106,108,110,194,201,241,245,],[-207,-144,-167,-207,195,-166,-207,-143,283,]),'REF':([91,92,93,101,159,181,232,250,300,332,],[159,-21,-23,159,159,159,-22,159,159,159,]),'UPPER':([0,2,4,5,6,13,17,21,22,36,40,46,49,51,53,61,64,67,69,77,98,102,103,107,108,116,118,119,120,121,122,123,124,126,132,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,151,154,155,167,179,180,186,201,202,208,216,218,220,223,225,227,228,230,238,239,241,244,247,248,254,255,258,293,298,301,306,310,315,331,342,343,],[7,-6,7,-9,-5,7,-8,7,7,-7,7,7,7,-144,-108,7,7,7,7,-107,7,7,7,7,7,7,-115,-116,-155,-114,-104,-105,7,-106,-28,-113,-112,7,-118,-111,7,-120,-117,-119,-124,-125,-110,-123,-121,-122,7,7,7,7,-10,-24,-15,7,-154,7,7,7,7,7,7,7,7,7,7,7,-143,7,7,7,7,7,7,7,7,7,7,7,7,7,-30,-29,]),'RETURNS':([289,],[314,]),'GREATER':([8,10,16,18,19,37,41,44,54,55,56,57,58,59,60,63,65,66,68,70,71,72,73,74,75,76,78,79,80,81,82,83,84,85,117,130,149,153,184,207,210,211,212,217,235,240,246,253,269,304,311,317,],[-71,-83,-70,-69,-67,-168,-68,-169,-23,-100,-93,147,-127,-142,-137,-131,-103,-140,-129,-133,-130,-141,-138,-66,-126,-132,-139,-97,-128,-102,-95,-134,-101,-72,-73,-181,-109,-99,-171,-180,-96,-94,-86,-98,-170,-74,-79,-135,-66,-76,-82,-136,]),'LBRACKET':([3,8,10,16,18,19,29,37,41,42,43,44,54,58,59,60,63,65,66,68,70,71,72,73,74,75,76,78,80,83,84,85,117,130,149,161,173,184,191,207,212,235,240,246,253,269,304,311,317,],[-23,-71,-83,-70,-69,-67,102,-168,-68,124,-72,-169,-23,-127,-142,-137,-131,151,-140,-129,-133,-130,-141,-138,102,-126,-132,-139,-128,-134,124,-72,-73,-181,124,228,231,-171,-23,-180,-86,-170,-74,-79,-135,102,-76,-82,-136,]),'END':([2,5,6,17,36,48,49,51,132,133,179,180,186,241,315,331,333,336,342,343,],[-6,-9,-5,-8,-7,-4,-207,-144,-28,-3,-10,-24,-15,-143,-207,-207,338,339,-30,-29,]),'COLON':([3,8,10,16,18,19,29,37,41,44,52,54,55,56,57,58,59,60,63,65,66,68,70,71,72,73,74,75,76,78,79,80,81,82,83,84,85,117,130,149,153,184,188,190,205,206,207,210,211,212,214,217,235,240,246,253,264,265,269,295,304,311,317,320,],[47,-71,-83,-70,-69,-67,103,-168,-68,-169,-85,-23,-100,-93,-84,-127,-142,-137,-131,-103,-140,-129,-133,-130,-141,-138,-66,-126,-132,-139,-97,-128,-102,-95,-134,-101,-72,-73,-181,-109,-99,-171,239,-77,-53,248,-180,-96,-94,-86,254,-98,-170,-74,-79,-135,-53,298,-66,-87,-76,-82,-136,-88,]),'SCONST':([13,21,22,46,53,64,67,69,77,98,102,107,116,118,119,120,121,122,123,124,126,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,151,154,167,202,208,216,220,225,227,228,230,238,239,244,247,248,254,255,258,293,298,301,306,310,],[59,59,59,59,-108,59,59,59,-107,59,59,59,59,-115,-116,-155,-114,-104,-105,59,-106,-113,-112,59,-118,-111,59,-120,-117,-119,-124,-125,-110,-123,-121,-122,59,59,59,-154,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'RESULT':([0,2,4,5,6,17,36,40,49,51,103,108,132,155,179,180,186,201,218,223,241,315,331,342,343,],[13,-6,13,-9,-5,-8,-7,13,13,-144,13,13,-28,13,-10,-24,-15,13,13,13,-143,13,13,-30,-29,]),'ABS':([0,2,4,5,6,13,17,21,22,36,40,46,49,51,53,61,64,67,69,77,98,102,103,107,108,116,118,119,120,121,122,123,124,126,132,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,151,154,155,167,179,180,186,201,202,208,216,218,220,223,225,227,228,230,238,239,241,244,247,248,254,255,258,293,298,301,306,310,315,331,342,343,],[14,-6,14,-9,-5,14,-8,14,14,-7,14,14,14,-144,-108,14,14,14,14,-107,14,14,14,14,14,14,-115,-116,-155,-114,-104,-105,14,-106,-28,-113,-112,14,-118,-111,14,-120,-117,-119,-124,-125,-110,-123,-121,-122,14,14,14,14,-10,-24,-15,14,-154,14,14,14,14,14,14,14,14,14,14,14,-143,14,14,14,14,14,14,14,14,14,14,14,14,14,-30,-29,]),'FI':([8,10,16,18,19,37,41,44,51,52,54,55,56,57,58,59,60,63,65,66,68,70,71,72,73,74,75,76,78,79,80,81,82,83,84,85,106,108,117,130,149,153,156,184,194,207,210,211,212,217,218,219,222,235,240,241,246,253,257,260,263,294,295,296,297,304,311,317,320,321,],[-71,-83,-70,-69,-67,-168,-68,-169,-144,-85,-23,-100,-93,-84,-127,-142,-137,-131,-103,-140,-129,-133,-130,-141,-138,-66,-126,-132,-139,-97,-128,-102,-95,-134,-101,-72,-167,-207,-73,-181,-109,-99,221,-171,-166,-180,-96,-94,-86,-98,-207,-161,262,-170,-74,-143,-79,-135,295,-165,-162,320,-87,-90,-164,-76,-82,-136,-88,-163,]),'ASC':([0,2,4,5,6,13,17,21,22,36,40,46,49,51,53,61,64,67,69,77,98,102,103,107,108,116,118,119,120,121,122,123,124,126,132,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,151,154,155,167,179,180,186,201,202,208,216,218,220,223,225,227,228,230,238,239,241,244,247,248,254,255,258,293,298,301,306,310,315,331,342,343,],[15,-6,15,-9,-5,15,-8,15,15,-7,15,15,15,-144,-108,15,15,15,15,-107,15,15,15,15,15,15,-115,-116,-155,-114,-104,-105,15,-106,-28,-113,-112,15,-118,-111,15,-120,-117,-119,-124,-125,-110,-123,-121,-122,15,15,15,15,-10,-24,-15,15,-154,15,15,15,15,15,15,15,15,15,15,15,-143,15,15,15,15,15,15,15,15,15,15,15,15,15,-30,-29,]),'ARROW':([3,8,10,13,16,18,19,21,22,29,37,41,42,43,44,46,53,54,64,67,69,74,77,84,85,98,102,107,116,117,118,119,120,121,122,123,124,126,130,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,154,167,184,191,202,207,208,216,220,225,227,228,230,235,238,239,240,244,246,247,248,254,255,258,269,293,298,301,304,306,310,311,],[-23,-71,-83,61,-70,-69,-67,61,61,-66,-168,-68,117,-72,-169,61,-108,-23,61,61,61,-66,-107,117,-72,61,61,61,61,-73,-115,-116,-155,-114,-104,-105,61,-106,-181,-113,-112,61,-118,-111,61,-120,-117,-119,-124,-125,-110,-123,-121,-122,117,61,61,61,-171,-23,-154,-180,61,61,61,61,61,61,61,-170,61,61,-74,61,-79,61,61,61,61,61,-66,61,61,61,-76,61,61,-82,]),'INT':([91,92,93,101,159,181,228,232,243,250,279,300,301,332,],[174,-21,-23,174,174,174,174,-22,174,174,174,174,174,174,]),'RPAREN':([8,10,16,18,19,37,41,44,46,52,54,55,56,57,58,59,60,63,65,66,68,70,71,72,73,74,75,76,78,79,80,81,82,83,84,85,93,98,117,128,129,130,149,150,153,162,163,164,165,166,168,169,170,171,172,174,175,176,177,183,184,207,210,211,212,217,226,235,240,246,249,251,252,253,266,273,287,288,295,299,302,303,304,311,312,316,317,320,322,323,324,337,340,],[-71,-83,-70,-69,-67,-168,-68,-169,130,-85,-23,-100,-93,-84,-127,-142,-137,-131,-103,-140,-129,-133,-130,-141,-138,-66,-126,-132,-139,-97,-128,-102,-95,-134,-101,-72,-23,184,-73,207,-182,-181,-109,212,-99,-48,-44,-41,-57,-42,-40,-43,-45,-37,-38,-47,-39,-49,-56,235,-171,-180,-96,-94,-86,-98,-55,-170,-74,-79,-183,289,-31,-135,299,302,-54,-34,-87,-50,-51,-58,-76,-82,-33,-32,-136,-88,-52,-65,-60,341,344,]),'WHILE':([8,10,16,18,19,37,40,41,44,52,54,55,56,57,58,59,60,63,65,66,68,70,71,72,73,74,75,76,78,79,80,81,82,83,84,85,111,117,130,149,153,162,163,166,169,170,174,176,184,197,198,199,207,210,211,212,217,235,240,246,253,281,295,299,302,304,305,308,311,317,320,327,329,330,335,],[-71,-83,-70,-69,-67,-168,107,-68,-169,-85,-23,-100,-93,-84,-127,-142,-137,-131,-103,-140,-129,-133,-130,-141,-138,-66,-126,-132,-139,-97,-128,-102,-95,-134,-101,-72,107,-73,-181,-109,-99,-48,-44,-42,-43,-45,-47,-49,-171,-196,-195,-197,-180,-96,-94,-86,-98,-170,-74,-79,-135,-205,-87,-50,-51,-76,-204,-201,-82,-136,-88,-200,-199,-203,-198,]),'ELSE':([8,10,16,18,19,37,41,44,51,52,54,55,56,57,58,59,60,63,65,66,68,70,71,72,73,74,75,76,78,79,80,81,82,83,84,85,106,108,117,130,149,153,156,184,194,207,210,211,212,215,217,218,219,235,240,241,246,253,256,259,260,295,297,304,311,317,318,320,334,],[-71,-83,-70,-69,-67,-168,-68,-169,-144,-85,-23,-100,-93,-84,-127,-142,-137,-131,-103,-140,-129,-133,-130,-141,-138,-66,-126,-132,-139,-97,-128,-102,-95,-134,-101,-72,-167,-207,-73,-181,-109,-99,223,-171,-166,-180,-96,-94,-86,258,-98,-207,-161,-170,-74,-143,-79,-135,258,-89,-165,-87,223,-76,-82,-136,-91,-88,-92,]),'ICONST':([13,21,22,46,53,64,67,69,77,98,102,107,116,118,119,120,121,122,123,124,126,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,151,154,167,202,208,216,220,225,227,228,230,231,238,239,244,247,248,254,255,258,293,298,301,306,310,],[60,60,60,60,-108,60,60,60,-107,60,60,60,60,-115,-116,-155,-114,-104,-105,60,-106,-113,-112,60,-118,-111,60,-120,-117,-119,-124,-125,-110,-123,-121,-122,60,60,60,-154,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'TIMES':([3,8,10,16,18,19,29,37,41,42,43,44,54,55,58,59,60,63,65,66,68,70,71,72,73,74,75,76,78,79,80,81,82,83,84,85,117,130,149,153,184,191,207,210,212,217,235,240,246,253,269,304,311,317,],[-23,-71,-83,-70,-69,-67,-66,-168,-68,122,-72,-169,-23,-100,-127,-142,-137,-131,-103,-140,-129,-133,-130,-141,-138,-66,-126,-132,-139,-97,-128,-102,122,-134,-101,-72,-73,-181,-109,-99,-171,-23,-180,122,-86,-98,-170,-74,-79,-135,-66,-76,-82,-136,]),'SEMI':([8,9,10,11,12,16,18,19,20,21,23,31,33,37,39,41,43,44,52,54,55,56,57,58,59,60,62,63,65,66,68,70,71,72,73,74,75,76,78,79,80,81,82,83,84,85,86,87,88,90,93,94,95,97,99,100,104,105,109,111,113,117,130,149,153,162,163,164,165,166,168,169,170,171,172,174,175,176,177,184,187,192,193,195,196,197,198,199,203,207,210,211,212,217,221,224,226,229,233,234,235,236,237,240,246,253,262,267,276,281,283,289,295,299,302,303,304,305,308,311,313,317,320,323,324,327,329,330,335,338,339,341,344,],[-71,-152,-83,-145,51,-70,-69,-67,-148,-207,-149,-146,-151,-168,-150,-68,-147,-169,-85,-23,-100,-93,-84,-127,-142,-137,-189,-131,-103,-140,-129,-133,-130,-141,-138,-66,-126,-132,-139,-97,-128,-102,-95,-134,-101,-72,-188,-186,-187,-11,-23,179,180,-25,-16,186,-184,-185,-194,-193,201,-73,-181,-109,-99,-48,-44,-41,-57,-42,-40,-43,-45,-37,-38,-47,-39,-49,-56,-171,-19,241,-206,-191,-192,-196,-195,-197,-153,-180,-96,-94,-86,-98,-160,-12,-55,-14,-27,-26,-170,-17,-18,-74,-79,-135,-159,-13,-20,-205,-190,315,-87,-50,-51,-58,-76,-204,-201,-82,331,-136,-88,-65,-60,-200,-199,-203,-198,342,343,-36,-35,]),'DIVIDE':([3,8,10,16,18,19,29,37,41,42,43,44,54,55,58,59,60,63,65,66,68,70,71,72,73,74,75,76,78,79,80,81,82,83,84,85,117,130,149,153,184,191,207,210,212,217,235,240,246,253,269,304,311,317,],[-23,-71,-83,-70,-69,-67,-66,-168,-68,123,-72,-169,-23,-100,-127,-142,-137,-131,-103,-140,-129,-133,-130,-141,-138,-66,-126,-132,-139,-97,-128,-102,123,-134,-101,-72,-73,-181,-109,-99,-171,-23,-180,123,-86,-98,-170,-74,-79,-135,-66,-76,-82,-136,]),'PROC':([47,],[131,]),'RETURN':([0,2,4,5,6,17,36,40,49,51,103,108,132,155,179,180,186,201,218,223,241,315,331,342,343,],[21,-6,21,-9,-5,-8,-7,21,21,-144,21,21,-28,21,-10,-24,-15,21,21,21,-143,21,21,-30,-29,]),'RBRACKET':([8,10,16,18,19,37,41,44,52,54,55,56,57,58,59,60,63,65,66,68,70,71,72,73,74,75,76,78,79,80,81,82,83,84,85,117,130,149,153,162,163,166,169,170,174,176,184,189,190,204,205,207,210,211,212,213,214,217,235,240,246,253,268,270,271,272,274,275,277,278,284,285,286,287,291,295,299,302,304,311,317,320,322,325,],[-71,-83,-70,-69,-67,-168,-68,-169,-85,-23,-100,-93,-84,-127,-142,-137,-131,-103,-140,-129,-133,-130,-141,-138,-66,-126,-132,-139,-97,-128,-102,-95,-134,-101,-72,-73,-181,-109,-99,-48,-44,-42,-43,-45,-47,-49,-171,240,-75,246,-80,-180,-96,-94,-86,253,-80,-98,-170,-74,-79,-135,-63,-64,300,-61,303,-59,304,-78,-80,-81,311,-54,317,-87,-50,-51,-76,-82,-136,-88,-52,-62,]),'OR':([8,10,16,18,19,37,41,44,54,55,56,57,58,59,60,63,65,66,68,70,71,72,73,74,75,76,78,79,80,81,82,83,84,85,117,130,149,153,184,207,210,211,212,217,235,240,246,253,269,304,311,317,],[-71,-83,-70,-69,-67,-168,-68,-169,-23,-100,-93,137,-127,-142,-137,-131,-103,-140,-129,-133,-130,-141,-138,-66,-126,-132,-139,-97,-128,-102,-95,-134,-101,-72,-73,-181,-109,-99,-171,-180,-96,-94,-86,-98,-170,-74,-79,-135,-66,-76,-82,-136,]),'CCONST':([13,21,22,46,53,64,67,69,77,98,102,107,116,118,119,120,121,122,123,124,126,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,151,154,167,202,208,216,220,225,227,228,230,238,239,244,247,248,254,255,258,293,298,301,306,310,],[66,66,66,66,-108,66,66,66,-107,66,66,66,66,-115,-116,-155,-114,-104,-105,66,-106,-113,-112,66,-118,-111,66,-120,-117,-119,-124,-125,-110,-123,-121,-122,66,66,66,-154,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'IF':([0,2,4,5,6,13,17,21,22,36,40,46,49,51,64,67,98,102,103,107,108,116,120,124,132,151,155,167,179,180,186,201,202,208,216,218,220,223,225,227,228,230,238,239,241,244,247,248,254,255,258,293,298,301,306,310,315,331,342,343,],[22,-6,22,-9,-5,67,-8,67,67,-7,22,67,22,-144,67,67,67,67,22,67,22,67,-155,67,-28,67,22,67,-10,-24,-15,22,-154,67,67,22,67,22,67,67,67,67,67,67,-143,67,67,67,67,67,67,67,67,67,67,67,22,22,-30,-29,]),'LOC':([93,162,163,164,165,166,168,169,170,171,172,174,175,176,177,226,288,299,302,303,323,324,337,],[-23,-48,-44,-41,-57,-42,-40,-43,-45,-37,-38,-47,-39,-49,-56,-55,312,-50,-51,-58,-65,-60,340,]),'SYN':([0,2,4,5,6,17,36,49,51,132,179,180,186,241,315,331,342,343,],[24,-6,24,-9,-5,-8,-7,24,-144,-28,-10,-24,-15,-143,24,24,-30,-29,]),'$end':([2,4,5,6,17,32,35,36,48,49,50,51,132,133,179,180,186,241,342,343,],[-6,-207,-9,-5,-8,-1,0,-7,-4,-207,-2,-144,-28,-3,-10,-24,-15,-143,-30,-29,]),'BOOL':([91,92,93,101,159,181,228,232,243,250,279,300,301,332,],[162,-21,-23,162,162,162,162,-22,162,162,162,162,162,162,]),'LENGTH':([0,2,4,5,6,13,17,21,22,36,40,46,49,51,53,61,64,67,69,77,98,102,103,107,108,116,118,119,120,121,122,123,124,126,132,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,151,154,155,167,179,180,186,201,202,208,216,218,220,223,225,227,228,230,238,239,241,244,247,248,254,255,258,293,298,301,306,310,315,331,342,343,],[27,-6,27,-9,-5,27,-8,27,27,-7,27,27,27,-144,-108,27,27,27,27,-107,27,27,27,27,27,27,-115,-116,-155,-114,-104,-105,27,-106,-28,-113,-112,27,-118,-111,27,-120,-117,-119,-124,-125,-110,-123,-121,-122,27,27,27,27,-10,-24,-15,27,-154,27,27,27,27,27,27,27,27,27,27,27,-143,27,27,27,27,27,27,27,27,27,27,27,27,27,-30,-29,]),'FOR':([40,],[112,]),'PLUS':([3,8,10,16,18,19,29,37,41,42,43,44,54,55,56,58,59,60,63,65,66,68,70,71,72,73,74,75,76,78,79,80,81,82,83,84,85,117,130,149,153,184,191,207,210,211,212,217,235,240,246,253,269,304,311,317,],[-23,-71,-83,-70,-69,-67,-66,-168,-68,121,-72,-169,-23,-100,121,-127,-142,-137,-131,-103,-140,-129,-133,-130,-141,-138,-66,-126,-132,-139,-97,-128,-102,-95,-134,-101,-72,-73,-181,-109,-99,-171,-23,-180,-96,121,-86,-98,-170,-74,-79,-135,-66,-76,-82,-136,]),'TO':([8,10,16,18,19,37,41,44,52,54,55,56,57,58,59,60,63,65,66,68,70,71,72,73,74,75,76,78,79,80,81,82,83,84,85,117,130,149,153,184,207,210,211,212,217,235,240,246,253,282,295,304,307,309,311,317,320,326,328,],[-71,-83,-70,-69,-67,-168,-68,-169,-85,-23,-100,-93,-84,-127,-142,-137,-131,-103,-140,-129,-133,-130,-141,-138,-66,-126,-132,-139,-97,-128,-102,-95,-134,-101,-72,-73,-181,-109,-99,-171,-180,-96,-94,-86,-98,-170,-74,-79,-135,310,-87,-76,310,310,-82,-136,-88,-202,310,]),'NULL':([13,21,22,46,53,64,67,69,77,98,102,107,116,118,119,120,121,122,123,124,126,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,151,154,167,202,208,216,220,225,227,228,230,238,239,244,247,248,254,255,258,293,298,301,306,310,],[72,72,72,72,-108,72,72,72,-107,72,72,72,72,-115,-116,-155,-114,-104,-105,72,-106,-113,-112,72,-118,-111,72,-120,-117,-119,-124,-125,-110,-123,-121,-122,72,72,72,-154,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'TRUE':([13,21,22,46,53,64,67,69,77,98,102,107,116,118,119,120,121,122,123,124,126,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,151,154,167,202,208,216,220,225,227,228,230,238,239,244,247,248,254,255,258,293,298,301,306,310,],[73,73,73,73,-108,73,73,73,-107,73,73,73,73,-115,-116,-155,-114,-104,-105,73,-106,-113,-112,73,-118,-111,73,-120,-117,-119,-124,-125,-110,-123,-121,-122,73,73,73,-154,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'DCL':([0,2,4,5,6,17,36,49,51,132,179,180,186,241,315,331,342,343,],[28,-6,28,-9,-5,-8,-7,28,-144,-28,-10,-24,-15,-143,28,28,-30,-29,]),'ARRAY':([91,92,93,101,159,181,232,250,300,332,],[161,-21,-23,161,161,161,-22,161,161,161,]),'PRINT':([0,2,4,5,6,13,17,21,22,36,40,46,49,51,53,61,64,67,69,77,98,102,103,107,108,116,118,119,120,121,122,123,124,126,132,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,151,154,155,167,179,180,186,201,202,208,216,218,220,223,225,227,228,230,238,239,241,244,247,248,254,255,258,293,298,301,306,310,315,331,342,343,],[30,-6,30,-9,-5,30,-8,30,30,-7,30,30,30,-144,-108,30,30,30,30,-107,30,30,30,30,30,30,-115,-116,-155,-114,-104,-105,30,-106,-28,-113,-112,30,-118,-111,30,-120,-117,-119,-124,-125,-110,-123,-121,-122,30,30,30,30,-10,-24,-15,30,-154,30,30,30,30,30,30,30,30,30,30,30,-143,30,30,30,30,30,30,30,30,30,30,30,30,30,-30,-29,]),'CHAR':([91,92,93,101,159,181,228,232,243,250,279,300,301,332,],[176,-21,-23,176,176,176,176,-22,176,176,176,176,176,176,]),'LPAREN':([1,3,7,13,14,15,21,22,26,27,30,38,45,46,53,54,64,67,69,77,93,98,102,107,116,118,119,120,121,122,123,124,126,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,151,154,158,162,163,164,166,167,169,170,172,174,176,191,202,208,216,220,225,227,228,230,238,239,244,247,248,254,255,258,268,269,280,281,293,298,299,301,302,305,306,310,314,],[-174,46,-175,64,-172,-173,64,64,98,-177,-179,-176,-178,64,-108,46,64,64,64,-107,-23,64,64,64,64,-115,-116,-155,-114,-104,-105,64,-106,209,-113,-112,64,-118,-111,64,-120,-117,-119,-124,-125,-110,-123,-121,-122,64,64,225,-48,-44,-46,-42,64,-43,-45,230,-47,-49,46,-154,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,230,-46,-46,230,64,64,-50,64,-51,230,64,64,332,]),'MINUS':([3,8,10,13,16,18,19,21,22,29,37,41,42,43,44,46,54,55,56,58,59,60,63,64,65,66,67,68,70,71,72,73,74,75,76,78,79,80,81,82,83,84,85,98,102,107,116,117,118,119,120,121,122,123,124,126,130,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,153,154,167,184,191,202,207,208,210,211,212,216,217,220,225,227,228,230,235,238,239,240,244,246,247,248,253,254,255,258,269,293,298,301,304,306,310,311,317,],[-23,-71,-83,77,-70,-69,-67,77,77,-66,-168,-68,118,-72,-169,77,-23,-100,118,-127,-142,-137,-131,77,-103,-140,77,-129,-133,-130,-141,-138,-66,-126,-132,-139,-97,-128,-102,-95,-134,-101,-72,77,77,77,77,-73,-115,-116,-155,-114,-104,-105,77,-106,-181,-113,-112,77,-118,-111,77,-120,-117,-119,-124,-125,-110,-123,-121,-122,-109,77,-99,77,77,-171,-23,-154,-180,77,-96,118,-86,77,-98,77,77,77,77,77,-170,77,77,-74,77,-79,77,77,-135,77,77,77,-66,77,77,77,-76,77,77,-82,-136,]),'FALSE':([13,21,22,46,53,64,67,69,77,98,102,107,116,118,119,120,121,122,123,124,126,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,151,154,167,202,208,216,220,225,227,228,230,238,239,244,247,248,254,255,258,293,298,301,306,310,],[78,78,78,78,-108,78,78,78,-107,78,78,78,78,-115,-116,-155,-114,-104,-105,78,-106,-113,-112,78,-118,-111,78,-120,-117,-119,-124,-125,-110,-123,-121,-122,78,78,78,-154,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'ELSIF':([8,10,16,18,19,37,41,44,51,52,54,55,56,57,58,59,60,63,65,66,68,70,71,72,73,74,75,76,78,79,80,81,82,83,84,85,106,108,117,130,149,153,156,184,194,207,210,211,212,215,217,218,219,235,240,241,246,253,256,259,260,295,297,304,311,317,318,320,334,],[-71,-83,-70,-69,-67,-168,-68,-169,-144,-85,-23,-100,-93,-84,-127,-142,-137,-131,-103,-140,-129,-133,-130,-141,-138,-66,-126,-132,-139,-97,-128,-102,-95,-134,-101,-72,-167,-207,-73,-181,-109,-99,220,-171,-166,-180,-96,-94,-86,255,-98,-207,-161,-170,-74,-143,-79,-135,293,-89,-165,-87,220,-76,-82,-136,-91,-88,-92,]),'EXIT':([0,2,4,5,6,17,36,40,49,51,103,108,132,155,179,180,186,201,218,223,241,315,331,342,343,],[34,-6,34,-9,-5,-8,-7,34,34,-144,34,34,-28,34,-10,-24,-15,34,34,34,-143,34,34,-30,-29,]),'NOTEQ':([8,10,16,18,19,37,41,44,54,55,56,57,58,59,60,63,65,66,68,70,71,72,73,74,75,76,78,79,80,81,82,83,84,85,117,130,149,153,184,207,210,211,212,217,235,240,246,253,269,304,311,317,],[-71,-83,-70,-69,-67,-168,-68,-169,-23,-100,-93,140,-127,-142,-137,-131,-103,-140,-129,-133,-130,-141,-138,-66,-126,-132,-139,-97,-128,-102,-95,-134,-101,-72,-73,-181,-109,-99,-171,-180,-96,-94,-86,-98,-170,-74,-79,-135,-66,-76,-82,-136,]),'MODULO':([3,8,10,16,18,19,29,37,41,42,43,44,54,55,58,59,60,63,65,66,68,70,71,72,73,74,75,76,78,79,80,81,82,83,84,85,117,130,149,153,184,191,207,210,212,217,235,240,246,253,269,304,311,317,],[-23,-71,-83,-70,-69,-67,-66,-168,-68,126,-72,-169,-23,-100,-127,-142,-137,-131,-103,-140,-129,-133,-130,-141,-138,-66,-126,-132,-139,-97,-128,-102,126,-134,-101,-72,-73,-181,-109,-99,-171,-23,-180,126,-86,-98,-170,-74,-79,-135,-66,-76,-82,-136,]),'LOWER':([0,2,4,5,6,13,17,21,22,36,40,46,49,51,53,61,64,67,69,77,98,102,103,107,108,116,118,119,120,121,122,123,124,126,132,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,151,154,155,167,179,180,186,201,202,208,216,218,220,223,225,227,228,230,238,239,241,244,247,248,254,255,258,293,298,301,306,310,315,331,342,343,],[38,-6,38,-9,-5,38,-8,38,38,-7,38,38,38,-144,-108,38,38,38,38,-107,38,38,38,38,38,38,-115,-116,-155,-114,-104,-105,38,-106,-28,-113,-112,38,-118,-111,38,-120,-117,-119,-124,-125,-110,-123,-121,-122,38,38,38,38,-10,-24,-15,38,-154,38,38,38,38,38,38,38,38,38,38,38,-143,38,38,38,38,38,38,38,38,38,38,38,38,38,-30,-29,]),'ASSIGN':([3,8,10,16,18,19,29,37,41,42,43,44,54,74,91,92,93,96,114,115,117,118,119,121,122,123,125,126,127,130,160,162,163,164,165,166,168,169,170,171,172,174,175,176,177,184,187,191,200,207,226,232,235,240,246,299,302,303,304,311,323,324,],[-23,-71,-83,-70,-69,-67,-66,-168,-68,120,-72,-169,-23,-66,167,-21,-23,181,-158,202,-73,-115,-116,-114,-104,-105,-156,-106,-157,-181,227,-48,-44,-41,-57,-42,-40,-43,-45,-37,-38,-47,-39,-49,-56,-171,238,-23,244,-180,-55,-22,-170,-74,-79,-50,-51,-58,-76,-82,-65,-60,]),'LTEQUAL':([8,10,16,18,19,37,41,44,54,55,56,57,58,59,60,63,65,66,68,70,71,72,73,74,75,76,78,79,80,81,82,83,84,85,117,130,149,153,184,207,210,211,212,217,235,240,246,253,269,304,311,317,],[-71,-83,-70,-69,-67,-168,-68,-169,-23,-100,-93,143,-127,-142,-137,-131,-103,-140,-129,-133,-130,-141,-138,-66,-126,-132,-139,-97,-128,-102,-95,-134,-101,-72,-73,-181,-109,-99,-171,-180,-96,-94,-86,-98,-170,-74,-79,-135,-66,-76,-82,-136,]),'IN':([8,10,16,18,19,37,41,44,54,55,56,57,58,59,60,63,65,66,68,70,71,72,73,74,75,76,78,79,80,81,82,83,84,85,93,117,130,149,153,184,200,207,210,211,212,217,235,240,242,246,253,269,304,311,317,],[-71,-83,-70,-69,-67,-168,-68,-169,-23,-100,-93,144,-127,-142,-137,-131,-103,-140,-129,-133,-130,-141,-138,-66,-126,-132,-139,-97,-128,-102,-95,-134,-101,-72,-23,-73,-181,-109,-99,-171,243,-180,-96,-94,-86,-98,-170,-74,279,-79,-135,-66,-76,-82,-136,]),'DO':([0,2,4,5,6,17,36,40,49,51,103,108,132,155,179,180,186,201,218,223,241,315,331,342,343,],[40,-6,40,-9,-5,-8,-7,40,40,-144,40,40,-28,40,-10,-24,-15,40,40,40,-143,40,40,-30,-29,]),'LESS':([8,10,16,18,19,37,41,44,54,55,56,57,58,59,60,63,65,66,68,70,71,72,73,74,75,76,78,79,80,81,82,83,84,85,117,130,149,153,184,207,210,211,212,217,235,240,246,253,269,304,311,317,],[-71,-83,-70,-69,-67,-168,-68,-169,-23,-100,-93,146,-127,-142,-137,-131,-103,-140,-129,-133,-130,-141,-138,-66,-126,-132,-139,-97,-128,-102,-95,-134,-101,-72,-73,-181,-109,-99,-171,-180,-96,-94,-86,-98,-170,-74,-79,-135,-66,-76,-82,-136,]),'AND':([8,10,16,18,19,37,41,44,54,55,56,57,58,59,60,63,65,66,68,70,71,72,73,74,75,76,78,79,80,81,82,83,84,85,117,130,149,153,184,207,210,211,212,217,235,240,246,253,269,304,311,317,],[-71,-83,-70,-69,-67,-168,-68,-169,-23,-100,-93,141,-127,-142,-137,-131,-103,-140,-129,-133,-130,-141,-138,-66,-126,-132,-139,-97,-128,-102,-95,-134,-101,-72,-73,-181,-109,-99,-171,-180,-96,-94,-86,-98,-170,-74,-79,-135,-66,-76,-82,-136,]),'THEN':([8,10,16,18,19,37,41,44,52,54,55,56,57,58,59,60,63,65,66,68,70,71,72,73,74,75,76,78,79,80,81,82,83,84,85,89,117,130,149,152,153,184,207,210,211,212,217,235,240,246,253,261,292,295,304,311,317,319,320,],[-71,-83,-70,-69,-67,-168,-68,-169,-85,-23,-100,-93,-84,-127,-142,-137,-131,-103,-140,-129,-133,-130,-141,-138,-66,-126,-132,-139,-97,-128,-102,-95,-134,-101,-72,155,-73,-181,-109,216,-99,-171,-180,-96,-94,-86,-98,-170,-74,-79,-135,155,216,-87,-76,-82,-136,216,-88,]),'BY':([8,10,16,18,19,37,41,44,52,54,55,56,57,58,59,60,63,65,66,68,70,71,72,73,74,75,76,78,79,80,81,82,83,84,85,117,130,149,153,184,207,210,211,212,217,235,240,246,253,282,295,304,311,317,320,],[-71,-83,-70,-69,-67,-168,-68,-169,-85,-23,-100,-93,-84,-127,-142,-137,-131,-103,-140,-129,-133,-130,-141,-138,-66,-126,-132,-139,-97,-128,-102,-95,-134,-101,-72,-73,-181,-109,-99,-171,-180,-96,-94,-86,-98,-170,-74,-79,-135,306,-87,-76,-82,-136,-88,]),'CHARS':([91,92,93,101,159,181,232,250,300,332,],[173,-21,-23,173,173,173,-22,173,173,173,]),'READ':([0,2,4,5,6,13,17,21,22,36,40,46,49,51,53,61,64,67,69,77,98,102,103,107,108,116,118,119,120,121,122,123,124,126,132,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,151,154,155,167,179,180,186,201,202,208,216,218,220,223,225,227,228,230,238,239,241,244,247,248,254,255,258,293,298,301,306,310,315,331,342,343,],[45,-6,45,-9,-5,45,-8,45,45,-7,45,45,45,-144,-108,45,45,45,45,-107,45,45,45,45,45,45,-115,-116,-155,-114,-104,-105,45,-106,-28,-113,-112,45,-118,-111,45,-120,-117,-119,-124,-125,-110,-123,-121,-122,45,45,45,45,-10,-24,-15,45,-154,45,45,45,45,45,45,45,45,45,45,45,-143,45,45,45,45,45,45,45,45,45,45,45,45,45,-30,-29,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'declaration':([28,185,],[99,99,]),'then_expression':([152,292,319,],[215,318,334,]),'upper_bound':([248,298,],[286,322,]),'empty':([4,21,40,49,108,201,218,315,331,],[48,86,106,48,106,106,106,48,48,]),'expression_list':([124,151,247,],[204,213,285,]),'mode':([91,101,159,181,250,300,332,],[160,187,226,233,288,323,337,]),'statement':([0,4,49,315,331,],[4,49,49,49,49,]),'parameter_list':([46,98,208,],[128,183,249,]),'if_action':([0,4,40,49,103,108,155,201,218,223,315,331,],[33,33,33,33,33,33,33,33,33,33,33,33,]),'newmode_list':([25,182,],[95,234,]),'declaration_statement':([0,4,49,315,331,],[6,6,6,6,6,]),'array_slice':([0,4,13,21,22,40,46,49,61,64,67,69,98,102,103,107,108,116,124,136,139,151,154,155,167,201,208,216,218,220,223,225,227,228,230,238,239,244,247,248,254,255,258,293,298,301,306,310,315,331,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'action_statement':([0,4,40,49,108,155,201,218,223,315,331,],[17,17,108,17,108,218,108,108,218,17,17,]),'statement_list':([0,],[32,]),'bracketed_action':([0,4,40,49,103,108,155,201,218,223,315,331,],[11,11,11,11,11,11,11,11,11,11,11,11,]),'action':([0,4,40,49,103,108,155,201,218,223,315,331,],[12,12,12,12,192,12,12,12,12,12,12,12,]),'iteration':([112,],[198,]),'elsif_expression':([215,],[256,]),'result':([21,],[87,]),'dereferenced_reference':([0,4,13,21,22,40,46,49,61,64,67,69,98,102,103,107,108,116,124,136,139,151,154,155,167,201,208,216,218,220,223,225,227,228,230,238,239,244,247,248,254,255,258,293,298,301,306,310,315,331,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'while_control':([40,111,],[109,196,]),'string_slice':([0,4,13,21,22,40,46,49,61,64,67,69,98,102,103,107,108,116,124,136,139,151,154,155,167,201,208,216,218,220,223,225,227,228,230,238,239,244,247,248,254,255,258,293,298,301,306,310,315,331,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'boolean_literal':([13,21,22,46,64,67,69,98,102,107,116,124,136,139,151,154,167,208,216,220,225,227,228,230,238,239,244,247,248,254,255,258,293,298,301,306,310,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'initialization':([187,],[237,]),'else_clause':([156,297,],[222,321,]),'string_length':([231,],[274,]),'string_mode':([91,101,159,181,250,300,332,],[177,177,177,177,177,177,177,]),'step_value':([282,],[309,]),'parenthesized_expression':([13,21,22,46,64,67,69,98,102,107,116,124,136,139,151,154,167,208,216,220,225,227,228,230,238,239,244,247,248,254,255,258,293,298,301,306,310,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'step_enumeration':([112,],[197,]),'empty_literal':([13,21,22,46,64,67,69,98,102,107,116,124,136,139,151,154,167,208,216,220,225,227,228,230,238,239,244,247,248,254,255,258,293,298,301,306,310,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'builtin_name':([0,4,13,21,22,40,46,49,61,64,67,69,98,102,103,107,108,116,124,136,139,151,154,155,167,201,208,216,218,220,223,225,227,228,230,238,239,244,247,248,254,255,258,293,298,301,306,310,315,331,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'action_statement_nullable':([40,108,201,218,],[110,194,245,260,]),'integer_literal':([13,21,22,46,64,67,69,98,102,107,116,124,136,139,151,154,167,208,216,220,225,227,228,230,231,238,239,244,247,248,254,255,258,293,298,301,306,310,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,275,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'character_mode':([91,101,159,181,228,243,250,279,300,301,332,],[163,163,163,163,163,163,163,163,163,163,163,]),'identifier':([0,4,13,21,22,24,25,28,40,46,49,61,64,67,69,91,98,101,102,103,107,108,112,116,124,136,139,151,154,155,157,159,167,178,181,182,185,201,208,209,216,218,220,223,225,227,228,230,238,239,243,244,247,248,250,254,255,258,279,290,293,298,300,301,306,310,315,331,332,],[29,29,74,74,74,92,92,92,29,74,29,74,74,74,74,164,74,164,74,74,74,29,200,74,74,74,74,74,74,29,92,164,74,92,164,92,92,29,74,92,74,29,74,29,74,74,269,74,74,74,280,74,74,74,164,74,74,74,280,92,74,74,164,269,74,74,29,29,164,]),'array_mode':([91,101,159,181,250,300,332,],[165,165,165,165,165,165,165,]),'assignment_action':([0,4,40,49,103,108,155,201,218,223,315,331,],[31,31,31,31,31,31,31,31,31,31,31,31,]),'integer_mode':([91,101,159,181,228,243,250,279,300,301,332,],[166,166,166,166,166,166,166,166,166,166,166,]),'identifier_list':([24,25,28,157,178,182,185,209,290,],[91,96,101,91,232,96,101,250,250,]),'character_literal':([13,21,22,46,64,67,69,98,102,107,116,124,136,139,151,154,167,208,216,220,225,227,228,230,238,239,244,247,248,254,255,258,293,298,301,306,310,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'assigning_operator':([42,],[116,]),'arithmetic_multiplicative_operator':([42,82,210,],[127,154,154,]),'program':([0,],[35,]),'discrete_range_mode':([91,101,159,181,228,243,250,279,300,301,332,],[170,170,170,170,170,170,170,170,170,170,170,]),'start_element':([102,],[189,]),'element_mode':([300,],[324,]),'value_array_slice':([13,21,22,46,64,67,69,98,102,107,116,124,136,139,151,154,167,208,216,220,225,227,228,230,238,239,244,247,248,254,255,258,293,298,301,306,310,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'operand3':([13,21,22,46,64,67,98,102,107,116,124,136,139,151,154,167,208,216,220,225,227,228,230,238,239,244,247,248,254,255,258,293,298,301,306,310,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,217,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'relational_operator':([57,],[145,]),'lower_bound':([124,225,228,230,301,],[206,265,265,265,265,]),'control_part':([40,],[113,]),'array_location':([0,4,13,21,22,40,46,49,61,64,67,69,98,102,103,107,108,116,124,136,139,151,154,155,167,201,208,216,218,220,223,225,227,228,230,238,239,244,247,248,254,255,258,293,298,301,306,310,315,331,],[42,42,84,84,84,42,84,42,149,84,84,84,84,84,42,84,42,84,84,84,84,84,84,42,84,42,84,84,42,84,42,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,42,42,]),'call_action':([0,4,13,21,22,40,46,49,61,64,67,69,98,102,103,107,108,116,124,136,139,151,154,155,167,201,208,216,218,220,223,225,227,228,230,238,239,244,247,248,254,255,258,293,298,301,306,310,315,331,],[43,43,85,85,85,43,85,43,85,85,85,85,85,85,43,85,43,85,85,85,85,85,85,43,85,43,85,85,43,85,43,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,43,43,]),'range_enumeration':([112,],[199,]),'conditional_expression':([13,21,22,46,64,67,98,102,107,116,124,151,167,208,216,220,225,227,228,230,238,239,244,247,248,254,255,258,293,298,301,306,310,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'synonym_statement':([0,4,49,315,331,],[2,2,2,2,2,]),'newmode_statement':([0,4,49,315,331,],[36,36,36,36,36,]),'operand4':([13,21,22,46,64,67,69,98,102,107,116,124,136,139,151,154,167,208,216,220,225,227,228,230,238,239,244,247,248,254,255,258,293,298,301,306,310,],[55,55,55,55,55,55,153,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'operand1':([13,21,22,46,64,67,98,102,107,116,124,139,151,167,208,216,220,225,227,228,230,238,239,244,247,248,254,255,258,293,298,301,306,310,],[56,56,56,56,56,56,56,56,56,56,56,211,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'operator2':([56,211,],[136,136,]),'procedure_statement':([0,4,49,315,331,],[5,5,5,5,5,]),'operand0':([13,21,22,46,64,67,98,102,107,116,124,151,167,208,216,220,225,227,228,230,238,239,244,247,248,254,255,258,293,298,301,306,310,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'do_action':([0,4,40,49,103,108,155,201,218,223,315,331,],[9,9,9,9,9,9,9,9,9,9,9,9,]),'location':([0,4,13,21,22,40,46,49,61,64,67,69,98,102,103,107,108,116,124,136,139,151,154,155,167,201,208,216,218,220,223,225,227,228,230,238,239,244,247,248,254,255,258,293,298,301,306,310,315,331,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'value_array_element':([13,21,22,46,64,67,69,98,102,107,116,124,136,139,151,154,167,208,216,220,225,227,228,230,238,239,244,247,248,254,255,258,293,298,301,306,310,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'then_clause':([89,261,],[156,297,]),'composite_mode':([91,101,159,181,250,300,332,],[168,168,168,168,168,168,168,]),'right_element':([239,],[277,]),'synonym_definition':([24,157,],[90,90,]),'mode_definition':([25,182,],[97,97,]),'expression':([13,21,22,46,64,67,98,102,107,116,124,151,167,208,216,220,225,227,228,230,238,239,244,247,248,254,255,258,293,298,301,306,310,],[62,88,89,129,150,152,129,190,193,203,205,214,229,129,259,261,264,267,264,264,276,278,282,284,287,291,292,296,319,287,264,326,330,]),'array_element':([0,4,13,21,22,40,46,49,61,64,67,69,98,102,103,107,108,116,124,136,139,151,154,155,167,201,208,216,218,220,223,225,227,228,230,238,239,244,247,248,254,255,258,293,298,301,306,310,315,331,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'return_action':([0,4,40,49,103,108,155,201,218,223,315,331,],[39,39,39,39,39,39,39,39,39,39,39,39,]),'discrete_mode':([91,101,159,181,228,243,250,279,300,301,332,],[172,172,172,172,268,281,172,305,172,268,172,]),'exit_action':([0,4,40,49,103,108,155,201,218,223,315,331,],[20,20,20,20,20,20,20,20,20,20,20,20,]),'reference_mode':([91,101,159,181,250,300,332,],[175,175,175,175,175,175,175,]),'statement_nullable':([4,49,315,331,],[50,133,333,336,]),'label_id':([34,],[104,]),'else_expression':([215,256,],[257,294,]),'primitive_value':([13,21,22,46,64,67,69,98,102,107,116,124,136,139,151,154,167,208,216,220,225,227,228,230,238,239,244,247,248,254,255,258,293,298,301,306,310,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'discrete_mode_name':([91,101,159,181,228,243,250,279,300,301,332,],[158,158,158,158,158,158,158,158,158,158,158,]),'operand2':([13,21,22,46,64,67,98,102,107,116,124,136,139,151,167,208,216,220,225,227,228,230,238,239,244,247,248,254,255,258,293,298,301,306,310,],[82,82,82,82,82,82,82,82,82,82,82,210,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'result_action':([0,4,40,49,103,108,155,201,218,223,315,331,],[23,23,23,23,23,23,23,23,23,23,23,23,]),'monadic_operator':([13,21,22,46,64,67,98,102,107,116,124,136,139,151,154,167,208,216,220,225,227,228,230,238,239,244,247,248,254,255,258,293,298,301,306,310,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'end_value':([282,307,309,328,],[308,327,329,335,]),'for_control':([40,],[111,]),'formal_parameter_list':([209,290,],[251,316,]),'arithmetic_additive_operator':([42,56,211,],[125,135,135,]),'declaration_list':([28,185,],[100,236,]),'procedure_definition':([47,],[132,]),'literal':([13,21,22,46,64,67,69,98,102,107,116,124,136,139,151,154,167,208,216,220,225,227,228,230,238,239,244,247,248,254,255,258,293,298,301,306,310,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'synonym_list':([24,157,],[94,224,]),'string_concatenation_operator':([42,56,211,],[114,134,134,]),'closed_dyadic_operator':([42,],[115,]),'membership_operator':([57,],[138,]),'operator1':([57,],[139,]),'boolean_mode':([91,101,159,181,228,243,250,279,300,301,332,],[169,169,169,169,169,169,169,169,169,169,169,]),'mode_name':([91,101,159,181,250,300,332,],[171,171,171,171,171,171,171,]),'procedure_call':([0,4,13,21,22,40,46,49,61,64,67,69,98,102,103,107,108,116,124,136,139,151,154,155,167,201,208,216,218,220,223,225,227,228,230,238,239,244,247,248,254,255,258,293,298,301,306,310,315,331,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'literal_range':([225,228,230,301,],[266,270,273,270,]),'referenced_location':([13,21,22,46,64,67,69,98,102,107,116,124,136,139,151,154,167,208,216,220,225,227,228,230,238,239,244,247,248,254,255,258,293,298,301,306,310,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'action_statement_list':([155,223,],[219,263,]),'string_element':([0,4,13,21,22,40,46,49,61,64,67,69,98,102,103,107,108,116,124,136,139,151,154,155,167,201,208,216,218,220,223,225,227,228,230,238,239,244,247,248,254,255,258,293,298,301,306,310,315,331,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'result_spec':([289,],[313,]),'character_string_literal':([13,21,22,46,64,67,69,98,102,107,116,124,136,139,151,154,167,208,216,220,225,227,228,230,238,239,244,247,248,254,255,258,293,298,301,306,310,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'index_mode_list':([228,301,],[271,325,]),'formal_parameter':([209,290,],[252,252,]),'index_mode':([228,301,],[272,272,]),'left_element':([102,],[188,]),'builtin_call':([0,4,13,21,22,40,46,49,61,64,67,69,98,102,103,107,108,116,124,136,139,151,154,155,167,201,208,216,218,220,223,225,227,228,230,238,239,244,247,248,254,255,258,293,298,301,306,310,315,331,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','Parser.py',63),
  ('statement_list -> statement statement_nullable','statement_list',2,'p_statement_list','Parser.py',67),
  ('statement_nullable -> statement statement_nullable','statement_nullable',2,'p_statement_nullable','Parser.py',79),
  ('statement_nullable -> empty','statement_nullable',1,'p_statement_nullable','Parser.py',80),
  ('statement -> declaration_statement','statement',1,'p_statement','Parser.py',92),
  ('statement -> synonym_statement','statement',1,'p_statement','Parser.py',93),
  ('statement -> newmode_statement','statement',1,'p_statement','Parser.py',94),
  ('statement -> action_statement','statement',1,'p_statement','Parser.py',95),
  ('statement -> procedure_statement','statement',1,'p_statement','Parser.py',96),
  ('synonym_statement -> SYN synonym_list SEMI','synonym_statement',3,'p_synonym_statement','Parser.py',105),
  ('synonym_list -> synonym_definition','synonym_list',1,'p_synonym_list','Parser.py',109),
  ('synonym_list -> synonym_definition COMMA synonym_list','synonym_list',3,'p_synonym_list','Parser.py',110),
  ('synonym_definition -> identifier_list mode ASSIGN expression','synonym_definition',4,'p_synonym_definition','Parser.py',119),
  ('synonym_definition -> identifier_list ASSIGN expression','synonym_definition',3,'p_synonym_definition','Parser.py',120),
  ('declaration_statement -> DCL declaration_list SEMI','declaration_statement',3,'p_declaration_statement','Parser.py',134),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','Parser.py',138),
  ('declaration_list -> declaration COMMA declaration_list','declaration_list',3,'p_declaration_list','Parser.py',139),
  ('declaration -> identifier_list mode initialization','declaration',3,'p_declaration','Parser.py',147),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','Parser.py',148),
  ('initialization -> ASSIGN expression','initialization',2,'p_initialization','Parser.py',152),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','Parser.py',156),
  ('identifier_list -> identifier COMMA identifier_list','identifier_list',3,'p_identifier_list','Parser.py',157),
  ('identifier -> ID','identifier',1,'p_identifier','Parser.py',166),
  ('newmode_statement -> TYPE newmode_list SEMI','newmode_statement',3,'p_newmode_statement','Parser.py',176),
  ('newmode_list -> mode_definition','newmode_list',1,'p_newmode_list','Parser.py',180),
  ('newmode_list -> mode_definition COMMA newmode_list','newmode_list',3,'p_newmode_list','Parser.py',181),
  ('mode_definition -> identifier_list ASSIGN mode','mode_definition',3,'p_mode_definition','Parser.py',190),
  ('procedure_statement -> ID COLON procedure_definition','procedure_statement',3,'p_procedure_statement','Parser.py',201),
  ('procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI','procedure_definition',9,'p_procedure_definition','Parser.py',205),
  ('procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI','procedure_definition',8,'p_procedure_definition','Parser.py',206),
  ('formal_parameter_list -> formal_parameter','formal_parameter_list',1,'p_formal_parameter_list','Parser.py',210),
  ('formal_parameter_list -> formal_parameter COMMA formal_parameter_list','formal_parameter_list',3,'p_formal_parameter_list','Parser.py',211),
  ('formal_parameter -> identifier_list mode LOC','formal_parameter',3,'p_formal_parameter','Parser.py',220),
  ('formal_parameter -> identifier_list mode','formal_parameter',2,'p_formal_parameter','Parser.py',221),
  ('result_spec -> RETURNS LPAREN mode LOC RPAREN','result_spec',5,'p_result_spec','Parser.py',227),
  ('result_spec -> RETURNS LPAREN mode RPAREN','result_spec',4,'p_result_spec','Parser.py',228),
  ('mode -> mode_name','mode',1,'p_mode','Parser.py',233),
  ('mode -> discrete_mode','mode',1,'p_mode','Parser.py',234),
  ('mode -> reference_mode','mode',1,'p_mode','Parser.py',235),
  ('mode -> composite_mode','mode',1,'p_mode','Parser.py',236),
  ('mode_name -> identifier','mode_name',1,'p_mode_name','Parser.py',240),
  ('discrete_mode -> integer_mode','discrete_mode',1,'p_discrete_mode','Parser.py',248),
  ('discrete_mode -> boolean_mode','discrete_mode',1,'p_discrete_mode','Parser.py',249),
  ('discrete_mode -> character_mode','discrete_mode',1,'p_discrete_mode','Parser.py',250),
  ('discrete_mode -> discrete_range_mode','discrete_mode',1,'p_discrete_mode','Parser.py',251),
  ('discrete_mode_name -> identifier','discrete_mode_name',1,'p_discrete_mode_name','Parser.py',255),
  ('integer_mode -> INT','integer_mode',1,'p_integer_mode','Parser.py',259),
  ('boolean_mode -> BOOL','boolean_mode',1,'p_boolean_mode','Parser.py',263),
  ('character_mode -> CHAR','character_mode',1,'p_character_mode','Parser.py',267),
  ('discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','Parser.py',276),
  ('discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','Parser.py',277),
  ('literal_range -> lower_bound COLON upper_bound','literal_range',3,'p_literal_range','Parser.py',281),
  ('lower_bound -> expression','lower_bound',1,'p_lower_bound','Parser.py',285),
  ('upper_bound -> expression','upper_bound',1,'p_upper_bound','Parser.py',289),
  ('reference_mode -> REF mode','reference_mode',2,'p_reference_mode','Parser.py',296),
  ('composite_mode -> string_mode','composite_mode',1,'p_composite_mode','Parser.py',303),
  ('composite_mode -> array_mode','composite_mode',1,'p_composite_mode','Parser.py',304),
  ('string_mode -> CHARS LBRACKET string_length RBRACKET','string_mode',4,'p_string_mode','Parser.py',308),
  ('string_length -> integer_literal','string_length',1,'p_string_length','Parser.py',312),
  ('array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode','array_mode',5,'p_array_mode','Parser.py',316),
  ('index_mode_list -> index_mode','index_mode_list',1,'p_index_mode_list','Parser.py',320),
  ('index_mode_list -> index_mode COMMA index_mode_list','index_mode_list',3,'p_index_mode_list','Parser.py',321),
  ('index_mode -> discrete_mode','index_mode',1,'p_index_mode','Parser.py',330),
  ('index_mode -> literal_range','index_mode',1,'p_index_mode','Parser.py',331),
  ('element_mode -> mode','element_mode',1,'p_element_mode','Parser.py',335),
  ('location -> identifier','location',1,'p_location','Parser.py',346),
  ('location -> dereferenced_reference','location',1,'p_location','Parser.py',347),
  ('location -> string_element','location',1,'p_location','Parser.py',348),
  ('location -> string_slice','location',1,'p_location','Parser.py',349),
  ('location -> array_element','location',1,'p_location','Parser.py',350),
  ('location -> array_slice','location',1,'p_location','Parser.py',351),
  ('location -> call_action','location',1,'p_location','Parser.py',352),
  ('dereferenced_reference -> array_location ARROW','dereferenced_reference',2,'p_dereferenced_reference','Parser.py',356),
  ('string_element -> identifier LBRACKET start_element RBRACKET','string_element',4,'p_string_element','Parser.py',360),
  ('start_element -> expression','start_element',1,'p_start_element','Parser.py',364),
  ('string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET','string_slice',6,'p_string_slice','Parser.py',368),
  ('left_element -> expression','left_element',1,'p_left_element','Parser.py',372),
  ('right_element -> expression','right_element',1,'p_right_element','Parser.py',376),
  ('array_element -> array_location LBRACKET expression_list RBRACKET','array_element',4,'p_array_element','Parser.py',380),
  ('expression_list -> expression','expression_list',1,'p_expression_list','Parser.py',384),
  ('expression_list -> expression COMMA expression_list','expression_list',3,'p_expression_list','Parser.py',385),
  ('array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET','array_slice',6,'p_array_slice','Parser.py',392),
  ('array_location -> location','array_location',1,'p_array_location','Parser.py',396),
  ('expression -> operand0','expression',1,'p_expression','Parser.py',406),
  ('expression -> conditional_expression','expression',1,'p_expression','Parser.py',407),
  ('parenthesized_expression -> LPAREN expression RPAREN','parenthesized_expression',3,'p_parenthesized_expression','Parser.py',411),
  ('conditional_expression -> IF expression then_expression else_expression FI','conditional_expression',5,'p_conditional_expression','Parser.py',419),
  ('conditional_expression -> IF expression then_expression elsif_expression else_expression FI','conditional_expression',6,'p_conditional_expression','Parser.py',420),
  ('then_expression -> THEN expression','then_expression',2,'p_then_expression','Parser.py',424),
  ('else_expression -> ELSE expression','else_expression',2,'p_else_expression','Parser.py',428),
  ('elsif_expression -> ELSIF expression then_expression','elsif_expression',3,'p_elsif_expression','Parser.py',432),
  ('elsif_expression -> elsif_expression ELSIF expression then_expression','elsif_expression',4,'p_elsif_expression','Parser.py',433),
  ('operand0 -> operand1','operand0',1,'p_operand0','Parser.py',448),
  ('operand0 -> operand0 operator1 operand1','operand0',3,'p_operand0','Parser.py',449),
  ('operand1 -> operand2','operand1',1,'p_operand1','Parser.py',456),
  ('operand1 -> operand1 operator2 operand2','operand1',3,'p_operand1','Parser.py',457),
  ('operand2 -> operand3','operand2',1,'p_operand2','Parser.py',464),
  ('operand2 -> operand2 arithmetic_multiplicative_operator operand3','operand2',3,'p_operand2','Parser.py',465),
  ('operand3 -> monadic_operator operand4','operand3',2,'p_operand3','Parser.py',473),
  ('operand3 -> operand4','operand3',1,'p_operand3','Parser.py',474),
  ('operand4 -> array_location','operand4',1,'p_operand4','Parser.py',481),
  ('operand4 -> referenced_location','operand4',1,'p_operand4','Parser.py',482),
  ('operand4 -> primitive_value','operand4',1,'p_operand4','Parser.py',483),
  ('arithmetic_multiplicative_operator -> TIMES','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',494),
  ('arithmetic_multiplicative_operator -> DIVIDE','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',495),
  ('arithmetic_multiplicative_operator -> MODULO','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',496),
  ('monadic_operator -> MINUS','monadic_operator',1,'p_monadic_operator','Parser.py',500),
  ('monadic_operator -> NOT','monadic_operator',1,'p_monadic_operator','Parser.py',501),
  ('referenced_location -> ARROW array_location','referenced_location',2,'p_referenced_location','Parser.py',505),
  ('operator1 -> relational_operator','operator1',1,'p_operator1','Parser.py',509),
  ('operator1 -> membership_operator','operator1',1,'p_operator1','Parser.py',510),
  ('operator2 -> arithmetic_additive_operator','operator2',1,'p_operator2','Parser.py',514),
  ('operator2 -> string_concatenation_operator','operator2',1,'p_operator2','Parser.py',515),
  ('arithmetic_additive_operator -> PLUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','Parser.py',519),
  ('arithmetic_additive_operator -> MINUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','Parser.py',520),
  ('string_concatenation_operator -> CONCAT','string_concatenation_operator',1,'p_string_concatenation_operator','Parser.py',524),
  ('relational_operator -> AND','relational_operator',1,'p_relational_operator','Parser.py',528),
  ('relational_operator -> OR','relational_operator',1,'p_relational_operator','Parser.py',529),
  ('relational_operator -> EQUAL','relational_operator',1,'p_relational_operator','Parser.py',530),
  ('relational_operator -> NOTEQ','relational_operator',1,'p_relational_operator','Parser.py',531),
  ('relational_operator -> GREATER','relational_operator',1,'p_relational_operator','Parser.py',532),
  ('relational_operator -> GTEQUAL','relational_operator',1,'p_relational_operator','Parser.py',533),
  ('relational_operator -> LESS','relational_operator',1,'p_relational_operator','Parser.py',534),
  ('relational_operator -> LTEQUAL','relational_operator',1,'p_relational_operator','Parser.py',535),
  ('membership_operator -> IN','membership_operator',1,'p_membership_operator','Parser.py',539),
  ('primitive_value -> literal','primitive_value',1,'p_primitive_value','Parser.py',551),
  ('primitive_value -> value_array_element','primitive_value',1,'p_primitive_value','Parser.py',552),
  ('primitive_value -> value_array_slice','primitive_value',1,'p_primitive_value','Parser.py',553),
  ('primitive_value -> parenthesized_expression','primitive_value',1,'p_primitive_value','Parser.py',554),
  ('literal -> integer_literal','literal',1,'p_literal','Parser.py',558),
  ('literal -> boolean_literal','literal',1,'p_literal','Parser.py',559),
  ('literal -> character_literal','literal',1,'p_literal','Parser.py',560),
  ('literal -> empty_literal','literal',1,'p_literal','Parser.py',561),
  ('literal -> character_string_literal','literal',1,'p_literal','Parser.py',562),
  ('value_array_element -> primitive_value LBRACKET expression_list RBRACKET','value_array_element',4,'p_value_array_element','Parser.py',566),
  ('value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET','value_array_slice',6,'p_value_array_slice','Parser.py',570),
  ('integer_literal -> ICONST','integer_literal',1,'p_integer_literal','Parser.py',578),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','Parser.py',582),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','Parser.py',583),
  ('character_literal -> CCONST','character_literal',1,'p_character_literal','Parser.py',587),
  ('empty_literal -> NULL','empty_literal',1,'p_empty_literal','Parser.py',591),
  ('character_string_literal -> SCONST','character_string_literal',1,'p_character_string_literal','Parser.py',595),
  ('action_statement -> identifier COLON action SEMI','action_statement',4,'p_action_statement','Parser.py',606),
  ('action_statement -> action SEMI','action_statement',2,'p_action_statement','Parser.py',607),
  ('action -> bracketed_action','action',1,'p_action','Parser.py',612),
  ('action -> assignment_action','action',1,'p_action','Parser.py',613),
  ('action -> call_action','action',1,'p_action','Parser.py',614),
  ('action -> exit_action','action',1,'p_action','Parser.py',615),
  ('action -> result_action','action',1,'p_action','Parser.py',616),
  ('action -> return_action','action',1,'p_action','Parser.py',617),
  ('bracketed_action -> if_action','bracketed_action',1,'p_bracketed_action','Parser.py',621),
  ('bracketed_action -> do_action','bracketed_action',1,'p_bracketed_action','Parser.py',622),
  ('assignment_action -> array_location assigning_operator expression','assignment_action',3,'p_assignment_action','Parser.py',626),
  ('assigning_operator -> closed_dyadic_operator ASSIGN','assigning_operator',2,'p_assigning_operator','Parser.py',630),
  ('assigning_operator -> ASSIGN','assigning_operator',1,'p_assigning_operator','Parser.py',631),
  ('closed_dyadic_operator -> arithmetic_additive_operator','closed_dyadic_operator',1,'p_closed_dyadic_operator','Parser.py',635),
  ('closed_dyadic_operator -> arithmetic_multiplicative_operator','closed_dyadic_operator',1,'p_closed_dyadic_operator','Parser.py',636),
  ('closed_dyadic_operator -> string_concatenation_operator','closed_dyadic_operator',1,'p_closed_dyadic_operator','Parser.py',637),
  ('if_action -> IF expression then_clause else_clause FI','if_action',5,'p_if_action','Parser.py',641),
  ('if_action -> IF expression then_clause FI','if_action',4,'p_if_action','Parser.py',642),
  ('then_clause -> THEN action_statement_list','then_clause',2,'p_then_clause','Parser.py',646),
  ('else_clause -> ELSE action_statement_list','else_clause',2,'p_else_clause','Parser.py',650),
  ('else_clause -> ELSIF expression then_clause else_clause','else_clause',4,'p_else_clause','Parser.py',651),
  ('else_clause -> ELSIF expression then_clause','else_clause',3,'p_else_clause','Parser.py',652),
  ('action_statement_list -> action_statement action_statement_nullable','action_statement_list',2,'p_action_statement_list','Parser.py',663),
  ('action_statement_nullable -> action_statement action_statement_nullable','action_statement_nullable',2,'p_action_statement_nullable','Parser.py',675),
  ('action_statement_nullable -> empty','action_statement_nullable',1,'p_action_statement_nullable','Parser.py',676),
  ('call_action -> procedure_call','call_action',1,'p_call_action','Parser.py',693),
  ('call_action -> builtin_call','call_action',1,'p_call_action','Parser.py',694),
  ('builtin_call -> builtin_name LPAREN parameter_list RPAREN','builtin_call',4,'p_builtin_call','Parser.py',698),
  ('builtin_call -> builtin_name LPAREN RPAREN','builtin_call',3,'p_builtin_call','Parser.py',699),
  ('builtin_name -> ABS','builtin_name',1,'p_builtin_name','Parser.py',704),
  ('builtin_name -> ASC','builtin_name',1,'p_builtin_name','Parser.py',705),
  ('builtin_name -> NUM','builtin_name',1,'p_builtin_name','Parser.py',706),
  ('builtin_name -> UPPER','builtin_name',1,'p_builtin_name','Parser.py',707),
  ('builtin_name -> LOWER','builtin_name',1,'p_builtin_name','Parser.py',708),
  ('builtin_name -> LENGTH','builtin_name',1,'p_builtin_name','Parser.py',709),
  ('builtin_name -> READ','builtin_name',1,'p_builtin_name','Parser.py',710),
  ('builtin_name -> PRINT','builtin_name',1,'p_builtin_name','Parser.py',711),
  ('procedure_call -> ID LPAREN parameter_list RPAREN','procedure_call',4,'p_procedure_call','Parser.py',715),
  ('procedure_call -> ID LPAREN RPAREN','procedure_call',3,'p_procedure_call','Parser.py',716),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','Parser.py',720),
  ('parameter_list -> expression COMMA parameter_list','parameter_list',3,'p_parameter_list','Parser.py',721),
  ('exit_action -> EXIT label_id','exit_action',2,'p_exit_action','Parser.py',730),
  ('label_id -> ID','label_id',1,'p_label_id','Parser.py',734),
  ('return_action -> RETURN result','return_action',2,'p_return_action','Parser.py',738),
  ('result -> expression','result',1,'p_result','Parser.py',742),
  ('result -> empty','result',1,'p_result','Parser.py',743),
  ('result_action -> RESULT expression','result_action',2,'p_result_action','Parser.py',746),
  ('do_action -> DO control_part SEMI action_statement_nullable OD','do_action',5,'p_do_action','Parser.py',754),
  ('do_action -> DO action_statement_nullable OD','do_action',3,'p_do_action','Parser.py',755),
  ('control_part -> for_control while_control','control_part',2,'p_control_part','Parser.py',762),
  ('control_part -> for_control','control_part',1,'p_control_part','Parser.py',763),
  ('control_part -> while_control','control_part',1,'p_control_part','Parser.py',764),
  ('for_control -> FOR iteration','for_control',2,'p_for_control','Parser.py',768),
  ('iteration -> step_enumeration','iteration',1,'p_iteration','Parser.py',772),
  ('iteration -> range_enumeration','iteration',1,'p_iteration','Parser.py',773),
  ('step_enumeration -> identifier ASSIGN expression step_value DOWN end_value','step_enumeration',6,'p_step_enumeration','Parser.py',777),
  ('step_enumeration -> identifier ASSIGN expression step_value end_value','step_enumeration',5,'p_step_enumeration','Parser.py',778),
  ('step_enumeration -> identifier ASSIGN expression DOWN end_value','step_enumeration',5,'p_step_enumeration','Parser.py',779),
  ('step_enumeration -> identifier ASSIGN expression end_value','step_enumeration',4,'p_step_enumeration','Parser.py',780),
  ('step_value -> BY expression','step_value',2,'p_step_value','Parser.py',792),
  ('end_value -> TO expression','end_value',2,'p_end_value','Parser.py',796),
  ('range_enumeration -> identifier DOWN IN discrete_mode','range_enumeration',4,'p_range_enumeration','Parser.py',800),
  ('range_enumeration -> identifier IN discrete_mode','range_enumeration',3,'p_range_enumeration','Parser.py',801),
  ('while_control -> WHILE expression','while_control',2,'p_while_control','Parser.py',808),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',814),
]
