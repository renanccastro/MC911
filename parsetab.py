
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ICONST CCONST SCONST COMMA PLUS MINUS TIMES DIVIDE COLON LPAREN RPAREN ASSIGN SEMI ARROW LTEQUAL LESS GREATER GTEQUAL EQUAL LBRACKET RBRACKET ID MODULO AND OR NOTEQ NOT CONCAT DO DCL RETURN THEN INT FALSE CHARS SYN ELSE DOWN NUM RESULT IN FI ARRAY NULL LENGTH BY LOWER IF LOC CHAR REF END FOR READ PROC OD WHILE UPPER ASC TO RETURNS ABS EXIT ELSIF PRINT BOOL TYPE TRUEprogram : statement_liststatement_list : statement statement_nullablestatement_nullable : statement statement_nullable\n                              | emptystatement : declaration_statement\n                     | synonym_statement\n                     | newmode_statementsynonym_statement : SYN synonym_list SEMIsynonym_list : synonym_definition\n                        | synonym_definition COMMA synonym_listsynonym_definition : identifier_list mode ASSIGN expression\n                              | identifier_list ASSIGN expressionnewmode_statement : TYPE newmode_list SEMInewmode_list : mode_definition\n                        | mode_definition COMMA newmode_listmode_definition : identifier_list ASSIGN modedeclaration_statement : DCL declaration_list SEMIdeclaration_list : declaration\n                            | declaration COMMA declaration_listdeclaration : identifier_list mode initialization\n                       | identifier_list modeinitialization : ASSIGN expressionidentifier_list : ID\n                           | ID COMMA identifier_listmode : mode_name\n                | discrete_mode\n                | reference_mode\n                | composite_modemode_name : IDdiscrete_mode : integer_mode\n                         | boolean_mode\n                         | character_mode\n                         | discrete_range_modeinteger_mode : INTboolean_mode : BOOLcharacter_mode : CHARdiscrete_range_mode : discrete_mode_name  LPAREN literal_range RPAREN\n                               | discrete_mode LPAREN literal_range RPARENliteral_range : lower_bound COLON upper_boundlower_bound : expressionupper_bound : expressiondiscrete_mode_name : IDreference_mode : REF modecomposite_mode : string_mode\n                          | array_modestring_mode : CHARS LBRACKET string_length RBRACKETstring_length : integer_literalarray_mode : ARRAY LBRACKET index_mode_list RBRACKET element_modeindex_mode_list : index_mode\n                           | index_mode COMMA index_mode_listindex_mode : discrete_mode\n                      | literal_rangeelement_mode : modeexpression : operand0operand0 : operand1\n                    | operand0 operator1 operand1operand1 : operand2\n                    | operand1 operator2 operand2operand2 : operand3\n                    | operand2 arithmetic_multiplicative_operator operand3operand3 : monadic_operator operand4\n                    | operand4operand4 : primitive_valuearithmetic_multiplicative_operator : TIMES\n                                              | DIVIDE\n                                              | MODULOmonadic_operator : MINUS\n                            | NOToperator1 : relational_operator\n                    | membership_operatoroperator2 : arithmetic_additive_operator\n                     | string_concatenation_operatorarithmetic_additive_operator : PLUS\n                                        | MINUSstring_concatenation_operator : CONCATrelational_operator : AND\n                               | OR\n                               | EQUAL\n                               | NOTEQ\n                               | GREATER\n                               | GTEQUAL\n                               | LESS\n                               | LTEQUALmembership_operator : INprimitive_value : literalliteral : integer_literal\n                   | boolean_literal\n                   | character_literal\n                   | empty_literal\n                   | character_string_literalinteger_literal : ICONSTboolean_literal : TRUE\n                           | FALSEcharacter_literal : CCONSTempty_literal : NULLcharacter_string_literal : SCONSTempty :'
    
_lr_action_items = {'LESS':([66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,84,86,100,130,131,132,],[-89,-87,-95,-92,-62,-55,108,-59,-57,-96,-85,-94,-91,-86,-90,-93,-88,-63,-61,-58,-56,-60,]),'NOTEQ':([66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,84,86,100,130,131,132,],[-89,-87,-95,-92,-62,-55,113,-59,-57,-96,-85,-94,-91,-86,-90,-93,-88,-63,-61,-58,-56,-60,]),'EQUAL':([66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,84,86,100,130,131,132,],[-89,-87,-95,-92,-62,-55,112,-59,-57,-96,-85,-94,-91,-86,-90,-93,-88,-63,-61,-58,-56,-60,]),'CHAR':([12,13,19,30,47,57,61,127,128,],[26,-23,26,26,26,26,-24,26,26,]),'NULL':([50,54,55,57,60,65,70,83,87,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,124,127,],[68,68,68,68,68,68,-67,-68,68,-71,-72,68,-73,-74,-75,-76,-82,68,-84,-70,-78,-79,-81,-80,-83,-77,-69,-66,-65,68,-64,68,68,]),'REF':([12,13,19,30,47,61,128,],[30,-23,30,30,30,-24,30,]),'MINUS':([50,54,55,57,60,66,67,68,69,71,72,74,75,76,77,78,79,80,81,82,84,86,87,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,124,127,130,131,132,],[70,70,70,70,70,-89,-87,-95,-92,-62,105,-59,-57,-96,-85,-94,-91,-86,-90,-93,-88,-63,70,-61,-71,-72,70,-73,-74,-75,-76,-82,70,-84,-70,-78,-79,-81,-80,-83,-77,-69,-66,-65,70,-64,70,70,-58,105,-60,]),'CONCAT':([66,67,68,69,71,72,74,75,76,77,78,79,80,81,82,84,86,100,130,131,132,],[-89,-87,-95,-92,-62,106,-59,-57,-96,-85,-94,-91,-86,-90,-93,-88,-63,-61,-58,106,-60,]),'DCL':([0,2,6,7,9,21,23,46,49,],[1,-6,1,-5,-7,1,-17,-13,-8,]),'RPAREN':([66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,84,86,89,91,100,130,131,132,133,134,],[-89,-87,-95,-92,-62,-55,-54,-59,-57,-96,-85,-94,-91,-86,-90,-93,-88,-63,125,126,-61,-58,-56,-60,-39,-41,]),'SEMI':([10,11,14,15,17,18,25,26,27,29,31,32,33,35,36,37,39,40,41,42,43,53,56,59,62,63,64,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,84,85,86,99,100,123,125,126,129,130,131,132,136,137,],[23,-18,-14,46,-9,49,-31,-36,-27,-26,-45,-44,-25,-30,-29,-33,-32,-34,-28,-35,-21,-19,-43,-20,-15,-16,-10,-89,-87,-95,-92,-62,-55,-54,-59,-57,-96,-85,-94,-91,-86,-90,-93,-88,-12,-63,-22,-61,-11,-37,-38,-46,-58,-56,-60,-48,-53,]),'TRUE':([50,54,55,57,60,65,70,83,87,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,124,127,],[69,69,69,69,69,69,-67,-68,69,-71,-72,69,-73,-74,-75,-76,-82,69,-84,-70,-78,-79,-81,-80,-83,-77,-69,-66,-65,69,-64,69,69,]),'SCONST':([50,54,55,57,60,65,70,83,87,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,124,127,],[76,76,76,76,76,76,-67,-68,76,-71,-72,76,-73,-74,-75,-76,-82,76,-84,-70,-78,-79,-81,-80,-83,-77,-69,-66,-65,76,-64,76,76,]),'PLUS':([66,67,68,69,71,72,74,75,76,77,78,79,80,81,82,84,86,100,130,131,132,],[-89,-87,-95,-92,-62,104,-59,-57,-96,-85,-94,-91,-86,-90,-93,-88,-63,-61,-58,104,-60,]),'COMMA':([11,13,14,17,25,26,27,29,31,32,33,35,36,37,39,40,41,42,43,56,59,63,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,84,85,86,92,94,95,99,100,123,125,126,129,130,131,132,133,134,136,137,],[24,44,45,48,-31,-36,-27,-26,-45,-44,-25,-30,-29,-33,-32,-34,-28,-35,-21,-43,-20,-16,-89,-87,-95,-92,-62,-55,-54,-59,-57,-96,-85,-94,-91,-86,-90,-93,-88,-12,-63,-51,127,-52,-22,-61,-11,-37,-38,-46,-58,-56,-60,-39,-41,-48,-53,]),'COLON':([66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,84,86,88,90,100,130,131,132,],[-89,-87,-95,-92,-62,-55,-54,-59,-57,-96,-85,-94,-91,-86,-90,-93,-88,-63,124,-40,-61,-58,-56,-60,]),'ARRAY':([12,13,19,30,47,61,128,],[34,-23,34,34,34,-24,34,]),'GTEQUAL':([66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,84,86,100,130,131,132,],[-89,-87,-95,-92,-62,-55,114,-59,-57,-96,-85,-94,-91,-86,-90,-93,-88,-63,-61,-58,-56,-60,]),'ASSIGN':([13,16,19,25,26,27,29,31,32,33,35,36,37,39,40,41,42,43,51,56,61,125,126,129,136,137,],[-23,47,50,-31,-36,-27,-26,-45,-44,-25,-30,-29,-33,-32,-34,-28,-35,60,87,-43,-24,-37,-38,-46,-48,-53,]),'CCONST':([50,54,55,57,60,65,70,83,87,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,124,127,],[78,78,78,78,78,78,-67,-68,78,-71,-72,78,-73,-74,-75,-76,-82,78,-84,-70,-78,-79,-81,-80,-83,-77,-69,-66,-65,78,-64,78,78,]),'$end':([2,5,6,7,8,9,20,21,22,23,46,49,52,],[-6,0,-97,-5,-1,-7,-2,-97,-4,-17,-13,-8,-3,]),'MODULO':([66,67,68,69,71,74,75,76,77,78,79,80,81,82,84,86,100,130,132,],[-89,-87,-95,-92,-62,-59,119,-96,-85,-94,-91,-86,-90,-93,-88,-63,-61,119,-60,]),'DIVIDE':([66,67,68,69,71,74,75,76,77,78,79,80,81,82,84,86,100,130,132,],[-89,-87,-95,-92,-62,-59,120,-96,-85,-94,-91,-86,-90,-93,-88,-63,-61,120,-60,]),'TIMES':([66,67,68,69,71,74,75,76,77,78,79,80,81,82,84,86,100,130,132,],[-89,-87,-95,-92,-62,-59,122,-96,-85,-94,-91,-86,-90,-93,-88,-63,-61,122,-60,]),'ICONST':([50,54,55,57,58,60,65,70,83,87,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,124,127,],[79,79,79,79,79,79,79,-67,-68,79,-71,-72,79,-73,-74,-75,-76,-82,79,-84,-70,-78,-79,-81,-80,-83,-77,-69,-66,-65,79,-64,79,79,]),'LPAREN':([25,26,28,29,35,36,37,39,40,42,92,93,125,126,],[-31,-36,54,55,-30,-42,-33,-32,-34,-35,55,-42,-37,-38,]),'IN':([66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,84,86,100,130,131,132,],[-89,-87,-95,-92,-62,-55,110,-59,-57,-96,-85,-94,-91,-86,-90,-93,-88,-63,-61,-58,-56,-60,]),'ID':([1,3,4,12,13,19,24,30,44,45,47,48,57,61,127,128,],[13,13,13,36,-23,36,13,36,13,13,36,13,93,-24,93,36,]),'LTEQUAL':([66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,84,86,100,130,131,132,],[-89,-87,-95,-92,-62,-55,116,-59,-57,-96,-85,-94,-91,-86,-90,-93,-88,-63,-61,-58,-56,-60,]),'AND':([66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,84,86,100,130,131,132,],[-89,-87,-95,-92,-62,-55,107,-59,-57,-96,-85,-94,-91,-86,-90,-93,-88,-63,-61,-58,-56,-60,]),'LBRACKET':([34,38,],[57,58,]),'FALSE':([50,54,55,57,60,65,70,83,87,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,124,127,],[82,82,82,82,82,82,-67,-68,82,-71,-72,82,-73,-74,-75,-76,-82,82,-84,-70,-78,-79,-81,-80,-83,-77,-69,-66,-65,82,-64,82,82,]),'GREATER':([66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,84,86,100,130,131,132,],[-89,-87,-95,-92,-62,-55,115,-59,-57,-96,-85,-94,-91,-86,-90,-93,-88,-63,-61,-58,-56,-60,]),'INT':([12,13,19,30,47,57,61,127,128,],[40,-23,40,40,40,40,-24,40,40,]),'CHARS':([12,13,19,30,47,61,128,],[38,-23,38,38,38,-24,38,]),'SYN':([0,2,6,7,9,21,23,46,49,],[4,-6,4,-5,-7,4,-17,-13,-8,]),'BOOL':([12,13,19,30,47,57,61,127,128,],[42,-23,42,42,42,42,-24,42,42,]),'NOT':([50,54,55,57,60,87,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,124,127,],[83,83,83,83,83,83,-71,-72,83,-73,-74,-75,-76,-82,83,-84,-70,-78,-79,-81,-80,-83,-77,-69,-66,-65,83,-64,83,83,]),'RBRACKET':([25,26,35,37,39,40,42,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,84,86,92,94,95,96,97,98,100,125,126,130,131,132,133,134,135,],[-31,-36,-30,-33,-32,-34,-35,-89,-87,-95,-92,-62,-55,-54,-59,-57,-96,-85,-94,-91,-86,-90,-93,-88,-63,-51,-49,-52,128,-47,129,-61,-37,-38,-58,-56,-60,-39,-41,-50,]),'TYPE':([0,2,6,7,9,21,23,46,49,],[3,-6,3,-5,-7,3,-17,-13,-8,]),'OR':([66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,84,86,100,130,131,132,],[-89,-87,-95,-92,-62,-55,117,-59,-57,-96,-85,-94,-91,-86,-90,-93,-88,-63,-61,-58,-56,-60,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'arithmetic_additive_operator':([72,131,],[101,101,]),'monadic_operator':([50,54,55,57,60,87,103,109,121,124,127,],[65,65,65,65,65,65,65,65,65,65,65,]),'relational_operator':([73,],[118,]),'synonym_statement':([0,6,21,],[2,2,2,]),'membership_operator':([73,],[111,]),'arithmetic_multiplicative_operator':([75,130,],[121,121,]),'operator2':([72,131,],[103,103,]),'boolean_mode':([12,19,30,47,57,127,128,],[25,25,25,25,25,25,25,]),'boolean_literal':([50,54,55,57,60,65,87,103,109,121,124,127,],[67,67,67,67,67,67,67,67,67,67,67,67,]),'reference_mode':([12,19,30,47,128,],[27,27,27,27,27,]),'composite_mode':([12,19,30,47,128,],[41,41,41,41,41,]),'discrete_mode':([12,19,30,47,57,127,128,],[29,29,29,29,92,92,29,]),'declaration_list':([1,24,],[10,53,]),'mode_name':([12,19,30,47,128,],[33,33,33,33,33,]),'operand4':([50,54,55,57,60,65,87,103,109,121,124,127,],[71,71,71,71,71,100,71,71,71,71,71,71,]),'statement_nullable':([6,21,],[20,52,]),'operand1':([50,54,55,57,60,87,109,124,127,],[72,72,72,72,72,72,131,72,72,]),'array_mode':([12,19,30,47,128,],[31,31,31,31,31,]),'operand3':([50,54,55,57,60,87,103,109,121,124,127,],[74,74,74,74,74,74,74,74,132,74,74,]),'operand2':([50,54,55,57,60,87,103,109,124,127,],[75,75,75,75,75,75,130,75,75,75,]),'string_mode':([12,19,30,47,128,],[32,32,32,32,32,]),'discrete_mode_name':([12,19,30,47,57,127,128,],[28,28,28,28,28,28,28,]),'operator1':([73,],[109,]),'literal':([50,54,55,57,60,65,87,103,109,121,124,127,],[77,77,77,77,77,77,77,77,77,77,77,77,]),'program':([0,],[5,]),'statement':([0,6,21,],[6,21,21,]),'empty':([6,21,],[22,22,]),'string_length':([58,],[98,]),'mode_definition':([3,45,],[14,14,]),'lower_bound':([54,55,57,127,],[88,88,88,88,]),'initialization':([43,],[59,]),'character_string_literal':([50,54,55,57,60,65,87,103,109,121,124,127,],[81,81,81,81,81,81,81,81,81,81,81,81,]),'integer_mode':([12,19,30,47,57,127,128,],[35,35,35,35,35,35,35,]),'empty_literal':([50,54,55,57,60,65,87,103,109,121,124,127,],[66,66,66,66,66,66,66,66,66,66,66,66,]),'synonym_list':([4,48,],[18,64,]),'declaration':([1,24,],[11,11,]),'index_mode':([57,127,],[94,94,]),'element_mode':([128,],[136,]),'identifier_list':([1,3,4,24,44,45,48,],[12,16,19,12,61,16,19,]),'newmode_statement':([0,6,21,],[9,9,9,]),'integer_literal':([50,54,55,57,58,60,65,87,103,109,121,124,127,],[80,80,80,80,97,80,80,80,80,80,80,80,80,]),'index_mode_list':([57,127,],[96,135,]),'operand0':([50,54,55,57,60,87,124,127,],[73,73,73,73,73,73,73,73,]),'synonym_definition':([4,48,],[17,17,]),'upper_bound':([124,],[133,]),'discrete_range_mode':([12,19,30,47,57,127,128,],[37,37,37,37,37,37,37,]),'character_mode':([12,19,30,47,57,127,128,],[39,39,39,39,39,39,39,]),'string_concatenation_operator':([72,131,],[102,102,]),'newmode_list':([3,45,],[15,62,]),'declaration_statement':([0,6,21,],[7,7,7,]),'mode':([12,19,30,47,128,],[43,51,56,63,137,]),'statement_list':([0,],[8,]),'character_literal':([50,54,55,57,60,65,87,103,109,121,124,127,],[84,84,84,84,84,84,84,84,84,84,84,84,]),'literal_range':([54,55,57,127,],[89,91,95,95,]),'expression':([50,54,55,57,60,87,124,127,],[85,90,90,90,99,123,134,90,]),'primitive_value':([50,54,55,57,60,65,87,103,109,121,124,127,],[86,86,86,86,86,86,86,86,86,86,86,86,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','Parser.py',31),
  ('statement_list -> statement statement_nullable','statement_list',2,'p_statement_list','Parser.py',35),
  ('statement_nullable -> statement statement_nullable','statement_nullable',2,'p_statement_nullable','Parser.py',46),
  ('statement_nullable -> empty','statement_nullable',1,'p_statement_nullable','Parser.py',47),
  ('statement -> declaration_statement','statement',1,'p_statement','Parser.py',58),
  ('statement -> synonym_statement','statement',1,'p_statement','Parser.py',59),
  ('statement -> newmode_statement','statement',1,'p_statement','Parser.py',60),
  ('synonym_statement -> SYN synonym_list SEMI','synonym_statement',3,'p_synonym_statement','Parser.py',70),
  ('synonym_list -> synonym_definition','synonym_list',1,'p_synonym_list','Parser.py',74),
  ('synonym_list -> synonym_definition COMMA synonym_list','synonym_list',3,'p_synonym_list','Parser.py',75),
  ('synonym_definition -> identifier_list mode ASSIGN expression','synonym_definition',4,'p_synonym_definition','Parser.py',85),
  ('synonym_definition -> identifier_list ASSIGN expression','synonym_definition',3,'p_synonym_definition','Parser.py',86),
  ('newmode_statement -> TYPE newmode_list SEMI','newmode_statement',3,'p_newmode_statement','Parser.py',95),
  ('newmode_list -> mode_definition','newmode_list',1,'p_newmode_list','Parser.py',99),
  ('newmode_list -> mode_definition COMMA newmode_list','newmode_list',3,'p_newmode_list','Parser.py',100),
  ('mode_definition -> identifier_list ASSIGN mode','mode_definition',3,'p_mode_definition','Parser.py',108),
  ('declaration_statement -> DCL declaration_list SEMI','declaration_statement',3,'p_declaration_statement','Parser.py',117),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','Parser.py',121),
  ('declaration_list -> declaration COMMA declaration_list','declaration_list',3,'p_declaration_list','Parser.py',122),
  ('declaration -> identifier_list mode initialization','declaration',3,'p_declaration','Parser.py',132),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','Parser.py',133),
  ('initialization -> ASSIGN expression','initialization',2,'p_initialization','Parser.py',137),
  ('identifier_list -> ID','identifier_list',1,'p_identifier_list','Parser.py',141),
  ('identifier_list -> ID COMMA identifier_list','identifier_list',3,'p_identifier_list','Parser.py',142),
  ('mode -> mode_name','mode',1,'p_mode','Parser.py',155),
  ('mode -> discrete_mode','mode',1,'p_mode','Parser.py',156),
  ('mode -> reference_mode','mode',1,'p_mode','Parser.py',157),
  ('mode -> composite_mode','mode',1,'p_mode','Parser.py',158),
  ('mode_name -> ID','mode_name',1,'p_mode_name','Parser.py',165),
  ('discrete_mode -> integer_mode','discrete_mode',1,'p_discrete_mode','Parser.py',173),
  ('discrete_mode -> boolean_mode','discrete_mode',1,'p_discrete_mode','Parser.py',174),
  ('discrete_mode -> character_mode','discrete_mode',1,'p_discrete_mode','Parser.py',175),
  ('discrete_mode -> discrete_range_mode','discrete_mode',1,'p_discrete_mode','Parser.py',176),
  ('integer_mode -> INT','integer_mode',1,'p_integer_mode','Parser.py',180),
  ('boolean_mode -> BOOL','boolean_mode',1,'p_boolean_mode','Parser.py',183),
  ('character_mode -> CHAR','character_mode',1,'p_character_mode','Parser.py',186),
  ('discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','Parser.py',193),
  ('discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','Parser.py',194),
  ('literal_range -> lower_bound COLON upper_bound','literal_range',3,'p_literal_range','Parser.py',198),
  ('lower_bound -> expression','lower_bound',1,'p_lower_bound','Parser.py',202),
  ('upper_bound -> expression','upper_bound',1,'p_upper_bound','Parser.py',205),
  ('discrete_mode_name -> ID','discrete_mode_name',1,'p_discrete_mode_name','Parser.py',209),
  ('reference_mode -> REF mode','reference_mode',2,'p_reference_mode','Parser.py',216),
  ('composite_mode -> string_mode','composite_mode',1,'p_composite_mode','Parser.py',224),
  ('composite_mode -> array_mode','composite_mode',1,'p_composite_mode','Parser.py',225),
  ('string_mode -> CHARS LBRACKET string_length RBRACKET','string_mode',4,'p_string_mode','Parser.py',228),
  ('string_length -> integer_literal','string_length',1,'p_string_length','Parser.py',231),
  ('array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode','array_mode',5,'p_array_mode','Parser.py',234),
  ('index_mode_list -> index_mode','index_mode_list',1,'p_index_mode_list','Parser.py',238),
  ('index_mode_list -> index_mode COMMA index_mode_list','index_mode_list',3,'p_index_mode_list','Parser.py',239),
  ('index_mode -> discrete_mode','index_mode',1,'p_index_mode','Parser.py',247),
  ('index_mode -> literal_range','index_mode',1,'p_index_mode','Parser.py',248),
  ('element_mode -> mode','element_mode',1,'p_element_mode','Parser.py',252),
  ('expression -> operand0','expression',1,'p_expression','Parser.py',262),
  ('operand0 -> operand1','operand0',1,'p_operand0','Parser.py',267),
  ('operand0 -> operand0 operator1 operand1','operand0',3,'p_operand0','Parser.py',268),
  ('operand1 -> operand2','operand1',1,'p_operand1','Parser.py',274),
  ('operand1 -> operand1 operator2 operand2','operand1',3,'p_operand1','Parser.py',275),
  ('operand2 -> operand3','operand2',1,'p_operand2','Parser.py',282),
  ('operand2 -> operand2 arithmetic_multiplicative_operator operand3','operand2',3,'p_operand2','Parser.py',283),
  ('operand3 -> monadic_operator operand4','operand3',2,'p_operand3','Parser.py',292),
  ('operand3 -> operand4','operand3',1,'p_operand3','Parser.py',293),
  ('operand4 -> primitive_value','operand4',1,'p_operand4','Parser.py',302),
  ('arithmetic_multiplicative_operator -> TIMES','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',309),
  ('arithmetic_multiplicative_operator -> DIVIDE','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',310),
  ('arithmetic_multiplicative_operator -> MODULO','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',311),
  ('monadic_operator -> MINUS','monadic_operator',1,'p_monadic_operator','Parser.py',315),
  ('monadic_operator -> NOT','monadic_operator',1,'p_monadic_operator','Parser.py',316),
  ('operator1 -> relational_operator','operator1',1,'p_operator1','Parser.py',321),
  ('operator1 -> membership_operator','operator1',1,'p_operator1','Parser.py',322),
  ('operator2 -> arithmetic_additive_operator','operator2',1,'p_operator2','Parser.py',326),
  ('operator2 -> string_concatenation_operator','operator2',1,'p_operator2','Parser.py',327),
  ('arithmetic_additive_operator -> PLUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','Parser.py',331),
  ('arithmetic_additive_operator -> MINUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','Parser.py',332),
  ('string_concatenation_operator -> CONCAT','string_concatenation_operator',1,'p_string_concatenation_operator','Parser.py',336),
  ('relational_operator -> AND','relational_operator',1,'p_relational_operator','Parser.py',340),
  ('relational_operator -> OR','relational_operator',1,'p_relational_operator','Parser.py',341),
  ('relational_operator -> EQUAL','relational_operator',1,'p_relational_operator','Parser.py',342),
  ('relational_operator -> NOTEQ','relational_operator',1,'p_relational_operator','Parser.py',343),
  ('relational_operator -> GREATER','relational_operator',1,'p_relational_operator','Parser.py',344),
  ('relational_operator -> GTEQUAL','relational_operator',1,'p_relational_operator','Parser.py',345),
  ('relational_operator -> LESS','relational_operator',1,'p_relational_operator','Parser.py',346),
  ('relational_operator -> LTEQUAL','relational_operator',1,'p_relational_operator','Parser.py',347),
  ('membership_operator -> IN','membership_operator',1,'p_membership_operator','Parser.py',351),
  ('primitive_value -> literal','primitive_value',1,'p_primitive_value','Parser.py',362),
  ('literal -> integer_literal','literal',1,'p_literal','Parser.py',366),
  ('literal -> boolean_literal','literal',1,'p_literal','Parser.py',367),
  ('literal -> character_literal','literal',1,'p_literal','Parser.py',368),
  ('literal -> empty_literal','literal',1,'p_literal','Parser.py',369),
  ('literal -> character_string_literal','literal',1,'p_literal','Parser.py',370),
  ('integer_literal -> ICONST','integer_literal',1,'p_integer_literal','Parser.py',373),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','Parser.py',377),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','Parser.py',378),
  ('character_literal -> CCONST','character_literal',1,'p_character_literal','Parser.py',382),
  ('empty_literal -> NULL','empty_literal',1,'p_empty_literal','Parser.py',387),
  ('character_string_literal -> SCONST','character_string_literal',1,'p_character_string_literal','Parser.py',391),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',396),
]
