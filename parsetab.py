
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ICONST CCONST SCONST COMMA PLUS MINUS TIMES DIVIDE COLON LPAREN RPAREN ASSIGN SEMI ARROW LTEQUAL LESS GREATER GTEQUAL EQUAL LBRACKET RBRACKET ID MODULO AND OR NOTEQ NOT CONCAT CHAR DOWN READ IF END REF ARRAY CHARS DO TYPE LOC NUM OD THEN IN TRUE ABS DCL FOR SYN LENGTH WHILE PROC ELSE FALSE RETURNS INT NULL UPPER TO BY BOOL ASC ELSIF EXIT PRINT RESULT FI LOWER RETURNprogram : statement_liststatement_list : statement statement_nullablestatement_nullable : statement statement_nullable\n                              | emptystatement : declaration_statement\n                     | synonym_statement\n                     | newmode_statement\n                     | action_statement\n                     | procedure_statementsynonym_statement : SYN synonym_list SEMIsynonym_list : synonym_definition\n                        | synonym_definition COMMA synonym_listsynonym_definition : identifier_list mode ASSIGN expression\n                              | identifier_list ASSIGN expressiondeclaration_statement : DCL declaration_list SEMIdeclaration_list : declaration\n                            | declaration COMMA declaration_listdeclaration : identifier_list mode initialization\n                       | identifier_list modeinitialization : ASSIGN expressionidentifier_list : identifier\n                           | identifier COMMA identifier_listidentifier : IDnewmode_statement : TYPE newmode_list SEMInewmode_list : mode_definition\n                        | mode_definition COMMA newmode_listmode_definition : identifier_list ASSIGN modeprocedure_statement : ID COLON procedure_definitionprocedure_definition : PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI\n                                | PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMIformal_parameter_list : formal_parameter\n                                 | formal_parameter COMMA formal_parameter_listformal_parameter : identifier_list mode LOC\n                            | identifier_list moderesult_spec : RETURNS LPAREN mode LOC RPAREN\n                       | RETURNS LPAREN mode RPARENmode : mode_name\n                | discrete_mode\n                | reference_mode\n                | composite_modemode_name : identifierdiscrete_mode : integer_mode\n                         | boolean_mode\n                         | character_mode\n                         | discrete_range_modediscrete_mode_name : identifierinteger_mode : INTboolean_mode : BOOLcharacter_mode : CHARdiscrete_range_mode : discrete_mode_name LPAREN literal_range RPAREN\n                               | discrete_mode LPAREN literal_range RPARENliteral_range : lower_bound COLON upper_boundlower_bound : expressionupper_bound : expressionreference_mode : REF modecomposite_mode : string_mode\n                          | array_modestring_mode : CHARS LBRACKET string_length RBRACKETstring_length : integer_literalarray_mode : ARRAY LBRACKET index_mode_list RBRACKET element_modeindex_mode_list : index_mode\n                           | index_mode COMMA index_mode_listindex_mode : discrete_mode\n                      | literal_rangeelement_mode : modelocation : identifier\n\t\t\t\t    | dereferenced_reference\n\t\t\t\t    | string_element\n\t\t\t\t    | string_slice\n\t\t\t\t    | array_element\n\t\t\t\t    | array_slice\n\t\t\t\t    | call_actiondereferenced_reference : array_location ARROWstring_element : identifier LBRACKET start_element RBRACKETstart_element : expressionstring_slice : identifier LBRACKET left_element COLON right_element RBRACKETleft_element : expressionright_element : expressionarray_element : array_location LBRACKET expression_list RBRACKETexpression_list : expression\n    \t\t\t\t\t   | expression COMMA expression_listarray_slice : array_location LBRACKET lower_bound COLON upper_bound RBRACKETarray_location : locationexpression : operand0\n                      | conditional_expressionparenthesized_expression : LPAREN expression RPARENconditional_expression : IF expression then_expression else_expression FI\n                                  | IF expression then_expression elsif_expression else_expression FIthen_expression : THEN expressionelse_expression : ELSE expressionelsif_expression : ELSIF expression then_expression\n                            | elsif_expression ELSIF expression then_expressionoperand0 : operand1\n                    | operand0 operator1 operand1operand1 : operand2\n                    | operand1 operator2 operand2operand2 : operand3\n                    | operand2 arithmetic_multiplicative_operator operand3operand3 : monadic_operator operand4\n                    | operand4operand4 : array_location\n                    | referenced_location\n                    | primitive_valuearithmetic_multiplicative_operator : TIMES\n                                              | DIVIDE\n                                              | MODULOmonadic_operator : MINUS\n                            | NOTreferenced_location : ARROW array_locationoperator1 : relational_operator\n                     | membership_operatoroperator2 : arithmetic_additive_operator\n                     | string_concatenation_operatorarithmetic_additive_operator : PLUS\n                                        | MINUSstring_concatenation_operator : CONCATrelational_operator : AND\n                               | OR\n                               | EQUAL\n                               | NOTEQ\n                               | GREATER\n                               | GTEQUAL\n                               | LESS\n                               | LTEQUALmembership_operator : INprimitive_value : literal\n                           | value_array_element\n                           | value_array_slice\n                           | parenthesized_expressionliteral : integer_literal\n                   | boolean_literal\n                   | character_literal\n                   | empty_literal\n                   | character_string_literalvalue_array_element : primitive_value LBRACKET expression_list RBRACKETvalue_array_slice : primitive_value LBRACKET expression COLON expression RBRACKETinteger_literal : ICONSTboolean_literal : TRUE\n                           | FALSEcharacter_literal : CCONSTempty_literal : NULLcharacter_string_literal : SCONSTaction_statement : identifier COLON action SEMI\n                            | action SEMIaction : bracketed_action\n                  | assignment_action\n                  | call_action\n                  | exit_action\n                  | result_action\n                  | return_actionbracketed_action : if_action\n                            | do_actionassignment_action : array_location assigning_operator expressionassigning_operator : closed_dyadic_operator ASSIGN\n                              | ASSIGNclosed_dyadic_operator : arithmetic_additive_operator\n                                  | arithmetic_multiplicative_operator\n                                  | string_concatenation_operatorif_action : IF expression then_clause else_clause FI\n                     | IF expression then_clause FIthen_clause : THEN action_statement_listelse_clause : ELSE action_statement_list\n                       | ELSIF expression then_clause else_clause\n                       | ELSIF expression then_clauseaction_statement_list : action_statement action_statement_nullableaction_statement_nullable : action_statement action_statement_nullable\n                                     | emptycall_action : procedure_call\n                       | builtin_callbuiltin_call : builtin_name LPAREN parameter_list RPAREN\n                        | builtin_name LPAREN RPARENbuiltin_name : ABS\n                        | ASC\n                        | NUM\n                        | UPPER\n                        | LOWER\n                        | LENGTH\n                        | READ\n                        | PRINTprocedure_call : ID LPAREN parameter_list RPAREN\n                          | ID LPAREN RPARENparameter_list : expression\n                          | expression COMMA parameter_listexit_action : EXIT label_idlabel_id : IDreturn_action : RETURN resultresult : expression\n                  | emptyresult_action : RESULT expressiondo_action : DO control_part SEMI action_statement_nullable OD\n                     | DO action_statement_nullable ODcontrol_part : for_control while_control \n                        | for_control   \n                        | while_controlfor_control : FOR iterationiteration : step_enumeration\n                     | range_enumerationstep_enumeration : identifier ASSIGN expression step_value DOWN end_value\n                            | identifier ASSIGN expression step_value end_value\n                            | identifier ASSIGN expression DOWN end_value\n                            | identifier ASSIGN expression end_valuestep_value : BY expressionend_value : TO expressionrange_enumeration : identifier DOWN IN discrete_mode\n                             | identifier IN discrete_modewhile_control : WHILE expressionempty :'
    
_lr_action_items = {'NOT':([12,14,45,51,63,75,93,101,109,112,114,117,118,119,120,121,122,124,132,134,135,136,137,138,139,140,141,142,143,144,145,146,150,151,152,177,203,208,212,218,230,234,235,237,239,241,244,246,247,251,253,254,289,299,303,304,305,],[53,53,53,53,53,53,53,53,53,53,-104,-106,-105,53,-114,-115,-155,-116,53,53,-111,53,-122,-110,-118,-117,-119,-123,-124,-121,-120,-125,53,-113,-112,53,-154,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'NUM':([0,3,8,12,14,23,25,36,42,43,45,46,51,53,63,73,75,76,83,93,95,101,102,109,110,112,114,117,118,119,120,121,122,124,132,134,135,136,137,138,139,140,141,142,143,144,145,146,150,151,152,154,157,160,169,173,177,195,203,208,212,217,218,221,230,234,235,237,239,241,244,245,246,247,251,253,254,289,299,303,304,305,320,334,341,344,],[2,2,-8,2,2,-7,2,-5,-9,-6,2,2,2,-108,2,2,2,2,-107,2,2,2,-144,2,2,2,-104,-106,-105,2,-114,-115,-155,-116,2,2,-111,2,-122,-110,-118,-117,-119,-123,-124,-121,-120,-125,2,-113,-112,2,-24,-28,2,-10,2,-15,-154,2,2,2,2,2,2,2,2,2,2,2,2,-143,2,2,2,2,2,2,2,2,2,2,2,2,-30,-29,]),'AND':([1,5,11,18,19,20,22,28,52,54,55,56,57,58,59,60,61,62,64,65,66,68,69,70,71,72,74,77,78,79,80,81,84,85,111,129,147,149,161,207,213,214,215,216,227,243,248,250,275,310,311,312,],[-83,-68,-71,-69,-169,-168,-67,-70,-103,-131,-97,-128,-138,-126,-132,-100,-142,-72,-129,-23,-137,-141,-95,-139,-140,140,-130,-101,-127,-134,-93,-133,-66,-102,-73,-171,-109,-99,-181,-170,-98,-94,-86,-96,-180,-74,-79,-135,-66,-76,-82,-136,]),'SEMI':([1,5,7,10,11,13,18,19,20,22,26,28,32,34,39,40,44,45,49,50,52,54,55,56,57,58,59,60,61,62,64,65,66,67,68,69,70,71,72,74,77,78,79,80,81,82,84,85,87,88,90,97,99,100,103,104,106,107,111,125,126,127,129,147,149,161,163,165,166,167,170,171,174,175,176,180,182,183,184,185,187,189,190,191,192,193,196,201,202,207,213,214,215,216,219,223,225,227,232,233,236,240,242,243,248,250,259,264,268,276,281,293,297,298,302,307,308,309,310,311,312,314,321,324,325,326,329,330,335,337,339,342,343,],[-83,-68,-148,-151,-71,-147,-69,-169,-168,-67,102,-70,-149,-150,-152,-145,-146,-207,-184,-185,-103,-131,-97,-128,-138,-126,-132,-100,-142,-72,-129,-23,-137,-189,-141,-95,-139,-140,-84,-130,-101,-127,-134,-93,-133,-85,-66,-102,-25,-23,157,-194,169,-193,-11,173,-16,195,-73,-187,-188,-186,-171,-109,-99,-181,-191,-196,-197,-195,-192,-206,-40,-47,-44,-56,-37,-45,-49,-38,-39,-43,-41,-48,-57,-42,-19,245,-153,-170,-98,-94,-86,-96,-160,-26,-27,-180,-12,-14,-55,-17,-18,-74,-79,-135,-159,-205,-190,-13,-20,-87,320,-204,-201,-51,-58,-50,-76,-82,-136,-88,334,-199,-200,-203,-65,-60,-198,341,-36,344,-35,]),'EXIT':([0,3,8,23,25,36,42,43,46,95,102,110,154,157,160,169,173,195,217,221,245,320,334,341,344,],[4,4,-8,-7,4,-5,-9,-6,4,4,-144,4,4,-24,-28,4,-10,-15,4,4,-143,4,4,-30,-29,]),'COLON':([1,5,11,16,18,19,20,22,28,31,52,54,55,56,57,58,59,60,61,62,64,65,66,68,69,70,71,72,74,77,78,79,80,81,82,84,85,111,129,147,149,161,197,199,204,205,207,210,213,214,215,216,227,243,248,250,269,272,275,293,310,311,312,314,],[-83,-68,-71,92,-69,-169,-168,-67,-70,110,-103,-131,-97,-128,-138,-126,-132,-100,-142,-72,-129,-23,-137,-141,-95,-139,-140,-84,-130,-101,-127,-134,-93,-133,-85,-66,-102,-73,-171,-109,-99,-181,-77,244,246,-53,-170,251,-98,-94,-86,-96,-180,-74,-79,-135,304,-53,-66,-87,-76,-82,-136,-88,]),'DIVIDE':([1,5,11,13,16,18,19,20,22,28,31,33,52,54,55,56,57,58,59,60,61,62,64,65,66,68,69,70,71,74,77,78,79,81,84,85,111,129,147,149,161,200,207,213,215,216,227,243,248,250,275,310,311,312,],[-83,-68,-71,-72,-23,-69,-169,-168,-67,-70,-66,118,-103,-131,-97,-128,-138,-126,-132,-100,-142,-72,-129,-23,-137,-141,118,-139,-140,-130,-101,-127,-134,-133,-66,-102,-73,-171,-109,-99,-181,-23,-170,-98,-86,118,-180,-74,-79,-135,-66,-76,-82,-136,]),'UPPER':([0,3,8,12,14,23,25,36,42,43,45,46,51,53,63,73,75,76,83,93,95,101,102,109,110,112,114,117,118,119,120,121,122,124,132,134,135,136,137,138,139,140,141,142,143,144,145,146,150,151,152,154,157,160,169,173,177,195,203,208,212,217,218,221,230,234,235,237,239,241,244,245,246,247,251,253,254,289,299,303,304,305,320,334,341,344,],[41,41,-8,41,41,-7,41,-5,-9,-6,41,41,41,-108,41,41,41,41,-107,41,41,41,-144,41,41,41,-104,-106,-105,41,-114,-115,-155,-116,41,41,-111,41,-122,-110,-118,-117,-119,-123,-124,-121,-120,-125,41,-113,-112,41,-24,-28,41,-10,41,-15,-154,41,41,41,41,41,41,41,41,41,41,41,41,-143,41,41,41,41,41,41,41,41,41,41,41,41,-30,-29,]),'ELSE':([1,5,11,18,19,20,22,28,52,54,55,56,57,58,59,60,61,62,64,65,66,68,69,70,71,72,74,77,78,79,80,81,82,84,85,95,96,102,111,129,147,149,153,161,164,207,211,213,214,215,216,221,222,227,243,245,248,250,252,256,260,293,294,310,311,312,314,315,331,],[-83,-68,-71,-69,-169,-168,-67,-70,-103,-131,-97,-128,-138,-126,-132,-100,-142,-72,-129,-23,-137,-141,-95,-139,-140,-84,-130,-101,-127,-134,-93,-133,-85,-66,-102,-207,-167,-144,-73,-171,-109,-99,217,-181,-166,-170,253,-98,-94,-86,-96,-207,-161,-180,-74,-143,-79,-135,253,-89,-165,-87,217,-76,-82,-136,-88,-91,-92,]),'PLUS':([1,5,11,13,16,18,19,20,22,28,31,33,52,54,55,56,57,58,59,60,61,62,64,65,66,68,69,70,71,74,77,78,79,80,81,84,85,111,129,147,149,161,200,207,213,214,215,216,227,243,248,250,275,310,311,312,],[-83,-68,-71,-72,-23,-69,-169,-168,-67,-70,-66,120,-103,-131,-97,-128,-138,-126,-132,-100,-142,-72,-129,-23,-137,-141,-95,-139,-140,-130,-101,-127,-134,120,-133,-66,-102,-73,-171,-109,-99,-181,-23,-170,-98,120,-86,-96,-180,-74,-79,-135,-66,-76,-82,-136,]),'CHAR':([88,89,105,108,158,181,224,228,234,262,266,305,306,332,],[-23,-21,184,184,184,184,-22,184,184,184,184,184,184,184,]),'RBRACKET':([1,5,11,18,19,20,22,28,52,54,55,56,57,58,59,60,61,62,64,65,66,68,69,70,71,72,74,77,78,79,80,81,82,84,85,111,129,147,149,161,175,176,183,184,189,191,193,197,198,205,206,207,209,210,213,214,215,216,227,243,248,250,270,271,273,274,278,279,282,283,284,285,286,287,288,293,307,309,310,311,312,314,327,328,],[-83,-68,-71,-69,-169,-168,-67,-70,-103,-131,-97,-128,-138,-126,-132,-100,-142,-72,-129,-23,-137,-141,-95,-139,-140,-84,-130,-101,-127,-134,-93,-133,-85,-66,-102,-73,-171,-109,-99,-181,-47,-44,-45,-49,-43,-48,-42,-75,243,-80,248,-170,250,-80,-98,-94,-86,-96,-180,-74,-79,-135,-63,-61,-64,306,-59,308,-78,310,-54,311,-81,-80,312,-87,-51,-50,-76,-82,-136,-88,-52,-62,]),'INT':([88,89,105,108,158,181,224,228,234,262,266,305,306,332,],[-23,-21,175,175,175,175,-22,175,175,175,175,175,175,175,]),'SCONST':([12,14,45,51,53,63,75,76,83,93,101,109,112,114,117,118,119,120,121,122,124,132,134,135,136,137,138,139,140,141,142,143,144,145,146,150,151,152,177,203,208,212,218,230,234,235,237,239,241,244,246,247,251,253,254,289,299,303,304,305,],[61,61,61,61,-108,61,61,61,-107,61,61,61,61,-104,-106,-105,61,-114,-115,-155,-116,61,61,-111,61,-122,-110,-118,-117,-119,-123,-124,-121,-120,-125,61,-113,-112,61,-154,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'FI':([1,5,11,18,19,20,22,28,52,54,55,56,57,58,59,60,61,62,64,65,66,68,69,70,71,72,74,77,78,79,80,81,82,84,85,95,96,102,111,129,147,149,153,161,164,207,213,214,215,216,220,221,222,227,243,245,248,250,255,257,260,290,291,293,294,310,311,312,314,316,],[-83,-68,-71,-69,-169,-168,-67,-70,-103,-131,-97,-128,-138,-126,-132,-100,-142,-72,-129,-23,-137,-141,-95,-139,-140,-84,-130,-101,-127,-134,-93,-133,-85,-66,-102,-207,-167,-144,-73,-171,-109,-99,219,-181,-166,-170,-98,-94,-86,-96,259,-207,-161,-180,-74,-143,-79,-135,293,-162,-165,314,-90,-87,-164,-76,-82,-136,-88,-163,]),'RESULT':([0,3,8,23,25,36,42,43,46,95,102,110,154,157,160,169,173,195,217,221,245,320,334,341,344,],[12,12,-8,-7,12,-5,-9,-6,12,12,-144,12,12,-24,-28,12,-10,-15,12,12,-143,12,12,-30,-29,]),'IF':([0,3,8,12,14,23,25,36,42,43,45,46,51,63,75,93,95,101,102,109,110,112,119,122,132,154,157,160,169,173,177,195,203,208,212,217,218,221,230,234,235,237,239,241,244,245,246,247,251,253,254,289,299,303,304,305,320,334,341,344,],[14,14,-8,63,63,-7,14,-5,-9,-6,63,14,63,63,63,63,14,63,-144,63,14,63,63,-155,63,14,-24,-28,14,-10,63,-15,-154,63,63,14,63,14,63,63,63,63,63,63,63,-143,63,63,63,63,63,63,63,63,63,63,14,14,-30,-29,]),'TYPE':([0,3,8,23,36,42,43,46,102,157,160,173,195,245,320,334,341,344,],[15,15,-8,-7,-5,-9,-6,15,-144,-24,-28,-10,-15,-143,15,15,-30,-29,]),'$end':([3,6,8,17,23,36,42,43,46,47,48,102,128,157,160,173,195,245,341,344,],[-207,-1,-8,0,-7,-5,-9,-6,-207,-4,-2,-144,-3,-24,-28,-10,-15,-143,-30,-29,]),'LOC':([88,174,175,176,180,182,183,184,185,187,189,190,191,192,193,236,296,307,308,309,329,330,336,],[-23,-40,-47,-44,-56,-37,-45,-49,-38,-39,-43,-41,-48,-57,-42,-55,318,-51,-58,-50,-65,-60,340,]),'ID':([0,3,4,8,12,14,15,23,25,29,30,36,42,43,45,46,51,53,63,73,75,76,83,88,89,93,95,98,101,102,105,108,109,110,112,114,117,118,119,120,121,122,124,132,134,135,136,137,138,139,140,141,142,143,144,145,146,150,151,152,154,155,156,157,158,160,169,172,173,177,181,194,195,203,208,212,217,218,221,224,226,228,230,234,235,237,239,241,244,245,246,247,251,253,254,262,266,289,295,299,303,304,305,306,320,332,334,341,344,],[16,16,50,-8,65,65,88,-7,65,88,88,-5,-9,-6,65,16,65,-108,65,65,65,65,-107,-23,-21,65,65,88,65,-144,88,88,65,200,65,-104,-106,-105,65,-114,-115,-155,-116,65,65,-111,65,-122,-110,-118,-117,-119,-123,-124,-121,-120,-125,65,-113,-112,65,88,88,-24,88,-28,65,88,-10,65,88,88,-15,-154,65,65,65,65,65,-22,88,88,65,65,65,65,65,65,65,-143,65,65,65,65,65,88,88,65,88,65,65,65,65,88,16,88,16,-30,-29,]),'CONCAT':([1,5,11,13,16,18,19,20,22,28,31,33,52,54,55,56,57,58,59,60,61,62,64,65,66,68,69,70,71,74,77,78,79,80,81,84,85,111,129,147,149,161,200,207,213,214,215,216,227,243,248,250,275,310,311,312,],[-83,-68,-71,-72,-23,-69,-169,-168,-67,-70,-66,124,-103,-131,-97,-128,-138,-126,-132,-100,-142,-72,-129,-23,-137,-141,-95,-139,-140,-130,-101,-127,-134,124,-133,-66,-102,-73,-171,-109,-99,-181,-23,-170,-98,124,-86,-96,-180,-74,-79,-135,-66,-76,-82,-136,]),'COMMA':([1,5,11,18,19,20,22,28,52,54,55,56,57,58,59,60,61,62,64,65,66,68,69,70,71,72,74,77,78,79,80,81,82,84,85,87,88,89,103,106,111,129,131,147,149,161,174,175,176,180,182,183,184,185,187,189,190,191,192,193,196,205,207,210,213,214,215,216,225,227,233,236,242,243,248,250,261,270,271,273,276,281,284,287,293,296,307,308,309,310,311,312,314,318,327,329,330,],[-83,-68,-71,-69,-169,-168,-67,-70,-103,-131,-97,-128,-138,-126,-132,-100,-142,-72,-129,-23,-137,-141,-95,-139,-140,-84,-130,-101,-127,-134,-93,-133,-85,-66,-102,155,-23,156,172,194,-73,-171,208,-109,-99,-181,-40,-47,-44,-56,-37,-45,-49,-38,-39,-43,-41,-48,-57,-42,-19,247,-170,247,-98,-94,-86,-96,-27,-180,-14,-55,-18,-74,-79,-135,295,-63,305,-64,-13,-20,-54,247,-87,-34,-51,-58,-50,-76,-82,-136,-88,-33,-52,-65,-60,]),'LENGTH':([0,3,8,12,14,23,25,36,42,43,45,46,51,53,63,73,75,76,83,93,95,101,102,109,110,112,114,117,118,119,120,121,122,124,132,134,135,136,137,138,139,140,141,142,143,144,145,146,150,151,152,154,157,160,169,173,177,195,203,208,212,217,218,221,230,234,235,237,239,241,244,245,246,247,251,253,254,289,299,303,304,305,320,334,341,344,],[24,24,-8,24,24,-7,24,-5,-9,-6,24,24,24,-108,24,24,24,24,-107,24,24,24,-144,24,24,24,-104,-106,-105,24,-114,-115,-155,-116,24,24,-111,24,-122,-110,-118,-117,-119,-123,-124,-121,-120,-125,24,-113,-112,24,-24,-28,24,-10,24,-15,-154,24,24,24,24,24,24,24,24,24,24,24,24,-143,24,24,24,24,24,24,24,24,24,24,24,24,-30,-29,]),'OR':([1,5,11,18,19,20,22,28,52,54,55,56,57,58,59,60,61,62,64,65,66,68,69,70,71,72,74,77,78,79,80,81,84,85,111,129,147,149,161,207,213,214,215,216,227,243,248,250,275,310,311,312,],[-83,-68,-71,-69,-169,-168,-67,-70,-103,-131,-97,-128,-138,-126,-132,-100,-142,-72,-129,-23,-137,-141,-95,-139,-140,139,-130,-101,-127,-134,-93,-133,-66,-102,-73,-171,-109,-99,-181,-170,-98,-94,-86,-96,-180,-74,-79,-135,-66,-76,-82,-136,]),'RPAREN':([1,5,11,18,19,20,22,28,51,52,54,55,56,57,58,59,60,61,62,64,65,66,68,69,70,71,72,74,77,78,79,80,81,82,84,85,88,93,111,129,130,131,147,148,149,161,162,174,175,176,180,182,183,184,185,187,189,190,191,192,193,207,213,214,215,216,227,236,243,248,249,250,261,263,277,280,284,293,296,307,308,309,310,311,312,314,317,318,327,329,330,336,340,],[-83,-68,-71,-69,-169,-168,-67,-70,129,-103,-131,-97,-128,-138,-126,-132,-100,-142,-72,-129,-23,-137,-141,-95,-139,-140,-84,-130,-101,-127,-134,-93,-133,-85,-66,-102,-23,161,-73,-171,207,-182,-109,215,-99,-181,227,-40,-47,-44,-56,-37,-45,-49,-38,-39,-43,-41,-48,-57,-42,-170,-98,-94,-86,-96,-180,-55,-74,-79,-183,-135,-31,297,307,309,-54,-87,-34,-51,-58,-50,-76,-82,-136,-88,-32,-33,-52,-65,-60,339,343,]),'TIMES':([1,5,11,13,16,18,19,20,22,28,31,33,52,54,55,56,57,58,59,60,61,62,64,65,66,68,69,70,71,74,77,78,79,81,84,85,111,129,147,149,161,200,207,213,215,216,227,243,248,250,275,310,311,312,],[-83,-68,-71,-72,-23,-69,-169,-168,-67,-70,-66,114,-103,-131,-97,-128,-138,-126,-132,-100,-142,-72,-129,-23,-137,-141,114,-139,-140,-130,-101,-127,-134,-133,-66,-102,-73,-171,-109,-99,-181,-23,-170,-98,-86,114,-180,-74,-79,-135,-66,-76,-82,-136,]),'BY':([1,5,11,18,19,20,22,28,52,54,55,56,57,58,59,60,61,62,64,65,66,68,69,70,71,72,74,77,78,79,80,81,82,84,85,111,129,147,149,161,207,213,214,215,216,227,243,248,250,267,293,310,311,312,314,],[-83,-68,-71,-69,-169,-168,-67,-70,-103,-131,-97,-128,-138,-126,-132,-100,-142,-72,-129,-23,-137,-141,-95,-139,-140,-84,-130,-101,-127,-134,-93,-133,-85,-66,-102,-73,-171,-109,-99,-181,-170,-98,-94,-86,-96,-180,-74,-79,-135,299,-87,-76,-82,-136,-88,]),'NULL':([12,14,45,51,53,63,75,76,83,93,101,109,112,114,117,118,119,120,121,122,124,132,134,135,136,137,138,139,140,141,142,143,144,145,146,150,151,152,177,203,208,212,218,230,234,235,237,239,241,244,246,247,251,253,254,289,299,303,304,305,],[68,68,68,68,-108,68,68,68,-107,68,68,68,68,-104,-106,-105,68,-114,-115,-155,-116,68,68,-111,68,-122,-110,-118,-117,-119,-123,-124,-121,-120,-125,68,-113,-112,68,-154,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'LBRACKET':([1,5,11,13,16,18,19,20,22,28,31,33,52,54,56,57,58,59,61,62,64,65,66,68,70,71,74,77,78,79,81,84,111,129,147,161,178,186,200,207,215,227,243,248,250,275,310,311,312,],[-83,-68,-71,-72,-23,-69,-169,-168,-67,-70,109,119,132,-131,-128,-138,-126,-132,-142,-72,-129,-23,-137,-141,-139,-140,-130,119,-127,-134,-133,109,-73,-171,119,-181,234,238,-23,-170,-86,-180,-74,-79,-135,109,-76,-82,-136,]),'ELSIF':([1,5,11,18,19,20,22,28,52,54,55,56,57,58,59,60,61,62,64,65,66,68,69,70,71,72,74,77,78,79,80,81,82,84,85,95,96,102,111,129,147,149,153,161,164,207,211,213,214,215,216,221,222,227,243,245,248,250,252,256,260,293,294,310,311,312,314,315,331,],[-83,-68,-71,-69,-169,-168,-67,-70,-103,-131,-97,-128,-138,-126,-132,-100,-142,-72,-129,-23,-137,-141,-95,-139,-140,-84,-130,-101,-127,-134,-93,-133,-85,-66,-102,-207,-167,-144,-73,-171,-109,-99,218,-181,-166,-170,254,-98,-94,-86,-96,-207,-161,-180,-74,-143,-79,-135,289,-89,-165,-87,218,-76,-82,-136,-88,-91,-92,]),'ASSIGN':([1,5,11,13,16,18,19,20,22,28,31,33,65,84,88,89,91,105,111,113,114,115,116,117,118,120,121,123,124,129,161,168,174,175,176,179,180,182,183,184,185,187,189,190,191,192,193,196,200,207,224,227,236,243,248,307,308,309,310,311,329,330,],[-83,-68,-71,-72,-23,-69,-169,-168,-67,-70,-66,122,-23,-66,-23,-21,158,177,-73,-158,-104,203,-156,-106,-105,-114,-115,-157,-116,-171,-181,230,-40,-47,-44,235,-56,-37,-45,-49,-38,-39,-43,-41,-48,-57,-42,241,-23,-170,-22,-180,-55,-74,-79,-51,-58,-50,-76,-82,-65,-60,]),'FALSE':([12,14,45,51,53,63,75,76,83,93,101,109,112,114,117,118,119,120,121,122,124,132,134,135,136,137,138,139,140,141,142,143,144,145,146,150,151,152,177,203,208,212,218,230,234,235,237,239,241,244,246,247,251,253,254,289,299,303,304,305,],[70,70,70,70,-108,70,70,70,-107,70,70,70,70,-104,-106,-105,70,-114,-115,-155,-116,70,70,-111,70,-122,-110,-118,-117,-119,-123,-124,-121,-120,-125,70,-113,-112,70,-154,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'GREATER':([1,5,11,18,19,20,22,28,52,54,55,56,57,58,59,60,61,62,64,65,66,68,69,70,71,72,74,77,78,79,80,81,84,85,111,129,147,149,161,207,213,214,215,216,227,243,248,250,275,310,311,312,],[-83,-68,-71,-69,-169,-168,-67,-70,-103,-131,-97,-128,-138,-126,-132,-100,-142,-72,-129,-23,-137,-141,-95,-139,-140,144,-130,-101,-127,-134,-93,-133,-66,-102,-73,-171,-109,-99,-181,-170,-98,-94,-86,-96,-180,-74,-79,-135,-66,-76,-82,-136,]),'CCONST':([12,14,45,51,53,63,75,76,83,93,101,109,112,114,117,118,119,120,121,122,124,132,134,135,136,137,138,139,140,141,142,143,144,145,146,150,151,152,177,203,208,212,218,230,234,235,237,239,241,244,246,247,251,253,254,289,299,303,304,305,],[71,71,71,71,-108,71,71,71,-107,71,71,71,71,-104,-106,-105,71,-114,-115,-155,-116,71,71,-111,71,-122,-110,-118,-117,-119,-123,-124,-121,-120,-125,71,-113,-112,71,-154,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'FOR':([25,],[98,]),'ARROW':([1,5,11,12,13,14,16,18,19,20,22,28,31,33,45,51,53,62,63,65,75,76,77,83,84,93,101,109,111,112,114,117,118,119,120,121,122,124,129,132,134,135,136,137,138,139,140,141,142,143,144,145,146,147,150,151,152,161,177,200,203,207,208,212,218,227,230,234,235,237,239,241,243,244,246,247,248,251,253,254,275,289,299,303,304,305,310,311,],[-83,-68,-71,73,-72,73,-23,-69,-169,-168,-67,-70,-66,111,73,73,-108,-72,73,-23,73,73,111,-107,-66,73,73,73,-73,73,-104,-106,-105,73,-114,-115,-155,-116,-171,73,73,-111,73,-122,-110,-118,-117,-119,-123,-124,-121,-120,-125,111,73,-113,-112,-181,73,-23,-154,-170,73,73,73,-180,73,73,73,73,73,73,-74,73,73,73,-79,73,73,73,-66,73,73,73,73,73,-76,-82,]),'REF':([88,89,105,108,158,181,224,262,306,332,],[-23,-21,181,181,181,181,-22,181,181,181,]),'DO':([0,3,8,23,25,36,42,43,46,95,102,110,154,157,160,169,173,195,217,221,245,320,334,341,344,],[25,25,-8,-7,25,-5,-9,-6,25,25,-144,25,25,-24,-28,25,-10,-15,25,25,-143,25,25,-30,-29,]),'IN':([1,5,11,18,19,20,22,28,52,54,55,56,57,58,59,60,61,62,64,65,66,68,69,70,71,72,74,77,78,79,80,81,84,85,88,111,129,147,149,161,168,207,213,214,215,216,227,229,243,248,250,275,310,311,312,],[-83,-68,-71,-69,-169,-168,-67,-70,-103,-131,-97,-128,-138,-126,-132,-100,-142,-72,-129,-23,-137,-141,-95,-139,-140,146,-130,-101,-127,-134,-93,-133,-66,-102,-23,-73,-171,-109,-99,-181,228,-170,-98,-94,-86,-96,-180,266,-74,-79,-135,-66,-76,-82,-136,]),'THEN':([1,5,11,18,19,20,22,28,52,54,55,56,57,58,59,60,61,62,64,65,66,68,69,70,71,72,74,77,78,79,80,81,82,84,85,86,111,129,133,147,149,161,207,213,214,215,216,227,243,248,250,258,292,293,310,311,312,313,314,],[-83,-68,-71,-69,-169,-168,-67,-70,-103,-131,-97,-128,-138,-126,-132,-100,-142,-72,-129,-23,-137,-141,-95,-139,-140,-84,-130,-101,-127,-134,-93,-133,-85,-66,-102,154,-73,-171,212,-109,-99,-181,-170,-98,-94,-86,-96,-180,-74,-79,-135,154,212,-87,-76,-82,-136,212,-88,]),'ICONST':([12,14,45,51,53,63,75,76,83,93,101,109,112,114,117,118,119,120,121,122,124,132,134,135,136,137,138,139,140,141,142,143,144,145,146,150,151,152,177,203,208,212,218,230,234,235,237,238,239,241,244,246,247,251,253,254,289,299,303,304,305,],[66,66,66,66,-108,66,66,66,-107,66,66,66,66,-104,-106,-105,66,-114,-115,-155,-116,66,66,-111,66,-122,-110,-118,-117,-119,-123,-124,-121,-120,-125,66,-113,-112,66,-154,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'ARRAY':([88,89,105,108,158,181,224,262,306,332,],[-23,-21,178,178,178,178,-22,178,178,178,]),'LPAREN':([2,9,12,14,16,21,24,27,35,37,38,41,45,51,53,63,65,75,76,83,88,93,101,109,112,114,117,118,119,120,121,122,124,132,134,135,136,137,138,139,140,141,142,143,144,145,146,150,151,152,159,175,176,177,183,184,185,188,189,190,191,193,200,203,208,212,218,230,234,235,237,239,241,244,246,247,251,253,254,264,265,270,275,289,298,299,303,304,305,307,309,319,],[-174,51,75,75,93,-172,-177,-179,-176,-173,-178,-175,75,75,-108,75,93,75,75,-107,-23,75,75,75,75,-104,-106,-105,75,-114,-115,-155,-116,75,75,-111,75,-122,-110,-118,-117,-119,-123,-124,-121,-120,-125,75,-113,-112,226,-47,-44,75,-45,-49,237,239,-43,-46,-48,-42,93,-154,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,237,-46,237,-46,75,237,75,75,75,75,-51,-50,332,]),'CHARS':([88,89,105,108,158,181,224,262,306,332,],[-23,-21,186,186,186,186,-22,186,186,186,]),'DCL':([0,3,8,23,36,42,43,46,102,157,160,173,195,245,320,334,341,344,],[30,30,-8,-7,-5,-9,-6,30,-144,-24,-28,-10,-15,-143,30,30,-30,-29,]),'END':([8,23,36,42,43,46,47,102,128,157,160,173,195,245,320,333,334,338,341,344,],[-8,-7,-5,-9,-6,-207,-4,-144,-3,-24,-28,-10,-15,-143,-207,337,-207,342,-30,-29,]),'NOTEQ':([1,5,11,18,19,20,22,28,52,54,55,56,57,58,59,60,61,62,64,65,66,68,69,70,71,72,74,77,78,79,80,81,84,85,111,129,147,149,161,207,213,214,215,216,227,243,248,250,275,310,311,312,],[-83,-68,-71,-69,-169,-168,-67,-70,-103,-131,-97,-128,-138,-126,-132,-100,-142,-72,-129,-23,-137,-141,-95,-139,-140,145,-130,-101,-127,-134,-93,-133,-66,-102,-73,-171,-109,-99,-181,-170,-98,-94,-86,-96,-180,-74,-79,-135,-66,-76,-82,-136,]),'WHILE':([1,5,11,18,19,20,22,25,28,52,54,55,56,57,58,59,60,61,62,64,65,66,68,69,70,71,72,74,77,78,79,80,81,82,84,85,100,111,129,147,149,161,165,166,167,175,176,183,184,189,191,193,207,213,214,215,216,227,243,248,250,264,293,298,302,307,309,310,311,312,314,324,325,326,335,],[-83,-68,-71,-69,-169,-168,-67,101,-70,-103,-131,-97,-128,-138,-126,-132,-100,-142,-72,-129,-23,-137,-141,-95,-139,-140,-84,-130,-101,-127,-134,-93,-133,-85,-66,-102,101,-73,-171,-109,-99,-181,-196,-197,-195,-47,-44,-45,-49,-43,-48,-42,-170,-98,-94,-86,-96,-180,-74,-79,-135,-205,-87,-204,-201,-51,-50,-76,-82,-136,-88,-199,-200,-203,-198,]),'LOWER':([0,3,8,12,14,23,25,36,42,43,45,46,51,53,63,73,75,76,83,93,95,101,102,109,110,112,114,117,118,119,120,121,122,124,132,134,135,136,137,138,139,140,141,142,143,144,145,146,150,151,152,154,157,160,169,173,177,195,203,208,212,217,218,221,230,234,235,237,239,241,244,245,246,247,251,253,254,289,299,303,304,305,320,334,341,344,],[35,35,-8,35,35,-7,35,-5,-9,-6,35,35,35,-108,35,35,35,35,-107,35,35,35,-144,35,35,35,-104,-106,-105,35,-114,-115,-155,-116,35,35,-111,35,-122,-110,-118,-117,-119,-123,-124,-121,-120,-125,35,-113,-112,35,-24,-28,35,-10,35,-15,-154,35,35,35,35,35,35,35,35,35,35,35,35,-143,35,35,35,35,35,35,35,35,35,35,35,35,-30,-29,]),'GTEQUAL':([1,5,11,18,19,20,22,28,52,54,55,56,57,58,59,60,61,62,64,65,66,68,69,70,71,72,74,77,78,79,80,81,84,85,111,129,147,149,161,207,213,214,215,216,227,243,248,250,275,310,311,312,],[-83,-68,-71,-69,-169,-168,-67,-70,-103,-131,-97,-128,-138,-126,-132,-100,-142,-72,-129,-23,-137,-141,-95,-139,-140,137,-130,-101,-127,-134,-93,-133,-66,-102,-73,-171,-109,-99,-181,-170,-98,-94,-86,-96,-180,-74,-79,-135,-66,-76,-82,-136,]),'MODULO':([1,5,11,13,16,18,19,20,22,28,31,33,52,54,55,56,57,58,59,60,61,62,64,65,66,68,69,70,71,74,77,78,79,81,84,85,111,129,147,149,161,200,207,213,215,216,227,243,248,250,275,310,311,312,],[-83,-68,-71,-72,-23,-69,-169,-168,-67,-70,-66,117,-103,-131,-97,-128,-138,-126,-132,-100,-142,-72,-129,-23,-137,-141,117,-139,-140,-130,-101,-127,-134,-133,-66,-102,-73,-171,-109,-99,-181,-23,-170,-98,-86,117,-180,-74,-79,-135,-66,-76,-82,-136,]),'PRINT':([0,3,8,12,14,23,25,36,42,43,45,46,51,53,63,73,75,76,83,93,95,101,102,109,110,112,114,117,118,119,120,121,122,124,132,134,135,136,137,138,139,140,141,142,143,144,145,146,150,151,152,154,157,160,169,173,177,195,203,208,212,217,218,221,230,234,235,237,239,241,244,245,246,247,251,253,254,289,299,303,304,305,320,334,341,344,],[27,27,-8,27,27,-7,27,-5,-9,-6,27,27,27,-108,27,27,27,27,-107,27,27,27,-144,27,27,27,-104,-106,-105,27,-114,-115,-155,-116,27,27,-111,27,-122,-110,-118,-117,-119,-123,-124,-121,-120,-125,27,-113,-112,27,-24,-28,27,-10,27,-15,-154,27,27,27,27,27,27,27,27,27,27,27,27,-143,27,27,27,27,27,27,27,27,27,27,27,27,-30,-29,]),'ASC':([0,3,8,12,14,23,25,36,42,43,45,46,51,53,63,73,75,76,83,93,95,101,102,109,110,112,114,117,118,119,120,121,122,124,132,134,135,136,137,138,139,140,141,142,143,144,145,146,150,151,152,154,157,160,169,173,177,195,203,208,212,217,218,221,230,234,235,237,239,241,244,245,246,247,251,253,254,289,299,303,304,305,320,334,341,344,],[37,37,-8,37,37,-7,37,-5,-9,-6,37,37,37,-108,37,37,37,37,-107,37,37,37,-144,37,37,37,-104,-106,-105,37,-114,-115,-155,-116,37,37,-111,37,-122,-110,-118,-117,-119,-123,-124,-121,-120,-125,37,-113,-112,37,-24,-28,37,-10,37,-15,-154,37,37,37,37,37,37,37,37,37,37,37,37,-143,37,37,37,37,37,37,37,37,37,37,37,37,-30,-29,]),'READ':([0,3,8,12,14,23,25,36,42,43,45,46,51,53,63,73,75,76,83,93,95,101,102,109,110,112,114,117,118,119,120,121,122,124,132,134,135,136,137,138,139,140,141,142,143,144,145,146,150,151,152,154,157,160,169,173,177,195,203,208,212,217,218,221,230,234,235,237,239,241,244,245,246,247,251,253,254,289,299,303,304,305,320,334,341,344,],[38,38,-8,38,38,-7,38,-5,-9,-6,38,38,38,-108,38,38,38,38,-107,38,38,38,-144,38,38,38,-104,-106,-105,38,-114,-115,-155,-116,38,38,-111,38,-122,-110,-118,-117,-119,-123,-124,-121,-120,-125,38,-113,-112,38,-24,-28,38,-10,38,-15,-154,38,38,38,38,38,38,38,38,38,38,38,38,-143,38,38,38,38,38,38,38,38,38,38,38,38,-30,-29,]),'EQUAL':([1,5,11,18,19,20,22,28,52,54,55,56,57,58,59,60,61,62,64,65,66,68,69,70,71,72,74,77,78,79,80,81,84,85,111,129,147,149,161,207,213,214,215,216,227,243,248,250,275,310,311,312,],[-83,-68,-71,-69,-169,-168,-67,-70,-103,-131,-97,-128,-138,-126,-132,-100,-142,-72,-129,-23,-137,-141,-95,-139,-140,141,-130,-101,-127,-134,-93,-133,-66,-102,-73,-171,-109,-99,-181,-170,-98,-94,-86,-96,-180,-74,-79,-135,-66,-76,-82,-136,]),'OD':([25,94,95,96,102,164,169,231,245,],[-207,163,-207,-167,-144,-166,-207,268,-143,]),'LESS':([1,5,11,18,19,20,22,28,52,54,55,56,57,58,59,60,61,62,64,65,66,68,69,70,71,72,74,77,78,79,80,81,84,85,111,129,147,149,161,207,213,214,215,216,227,243,248,250,275,310,311,312,],[-83,-68,-71,-69,-169,-168,-67,-70,-103,-131,-97,-128,-138,-126,-132,-100,-142,-72,-129,-23,-137,-141,-95,-139,-140,142,-130,-101,-127,-134,-93,-133,-66,-102,-73,-171,-109,-99,-181,-170,-98,-94,-86,-96,-180,-74,-79,-135,-66,-76,-82,-136,]),'ABS':([0,3,8,12,14,23,25,36,42,43,45,46,51,53,63,73,75,76,83,93,95,101,102,109,110,112,114,117,118,119,120,121,122,124,132,134,135,136,137,138,139,140,141,142,143,144,145,146,150,151,152,154,157,160,169,173,177,195,203,208,212,217,218,221,230,234,235,237,239,241,244,245,246,247,251,253,254,289,299,303,304,305,320,334,341,344,],[21,21,-8,21,21,-7,21,-5,-9,-6,21,21,21,-108,21,21,21,21,-107,21,21,21,-144,21,21,21,-104,-106,-105,21,-114,-115,-155,-116,21,21,-111,21,-122,-110,-118,-117,-119,-123,-124,-121,-120,-125,21,-113,-112,21,-24,-28,21,-10,21,-15,-154,21,21,21,21,21,21,21,21,21,21,21,21,-143,21,21,21,21,21,21,21,21,21,21,21,21,-30,-29,]),'LTEQUAL':([1,5,11,18,19,20,22,28,52,54,55,56,57,58,59,60,61,62,64,65,66,68,69,70,71,72,74,77,78,79,80,81,84,85,111,129,147,149,161,207,213,214,215,216,227,243,248,250,275,310,311,312,],[-83,-68,-71,-69,-169,-168,-67,-70,-103,-131,-97,-128,-138,-126,-132,-100,-142,-72,-129,-23,-137,-141,-95,-139,-140,143,-130,-101,-127,-134,-93,-133,-66,-102,-73,-171,-109,-99,-181,-170,-98,-94,-86,-96,-180,-74,-79,-135,-66,-76,-82,-136,]),'TRUE':([12,14,45,51,53,63,75,76,83,93,101,109,112,114,117,118,119,120,121,122,124,132,134,135,136,137,138,139,140,141,142,143,144,145,146,150,151,152,177,203,208,212,218,230,234,235,237,239,241,244,246,247,251,253,254,289,299,303,304,305,],[57,57,57,57,-108,57,57,57,-107,57,57,57,57,-104,-106,-105,57,-114,-115,-155,-116,57,57,-111,57,-122,-110,-118,-117,-119,-123,-124,-121,-120,-125,57,-113,-112,57,-154,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'MINUS':([1,5,11,12,13,14,16,18,19,20,22,28,31,33,45,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,70,71,74,75,77,78,79,80,81,84,85,93,101,109,111,112,114,117,118,119,120,121,122,124,129,132,134,135,136,137,138,139,140,141,142,143,144,145,146,147,149,150,151,152,161,177,200,203,207,208,212,213,214,215,216,218,227,230,234,235,237,239,241,243,244,246,247,248,250,251,253,254,275,289,299,303,304,305,310,311,312,],[-83,-68,-71,83,-72,83,-23,-69,-169,-168,-67,-70,-66,121,83,83,-103,-131,-97,-128,-138,-126,-132,-100,-142,-72,83,-129,-23,-137,-141,-95,-139,-140,-130,83,-101,-127,-134,121,-133,-66,-102,83,83,83,-73,83,-104,-106,-105,83,-114,-115,-155,-116,-171,83,83,-111,83,-122,-110,-118,-117,-119,-123,-124,-121,-120,-125,-109,-99,83,-113,-112,-181,83,-23,-154,-170,83,83,-98,121,-86,-96,83,-180,83,83,83,83,83,83,-74,83,83,83,-79,-135,83,83,83,-66,83,83,83,83,83,-76,-82,-136,]),'SYN':([0,3,8,23,36,42,43,46,102,157,160,173,195,245,320,334,341,344,],[29,29,-8,-7,-5,-9,-6,29,-144,-24,-28,-10,-15,-143,29,29,-30,-29,]),'DOWN':([1,5,11,18,19,20,22,28,52,54,55,56,57,58,59,60,61,62,64,65,66,68,69,70,71,72,74,77,78,79,80,81,82,84,85,88,111,129,147,149,161,168,207,213,214,215,216,227,243,248,250,267,293,300,310,311,312,314,322,],[-83,-68,-71,-69,-169,-168,-67,-70,-103,-131,-97,-128,-138,-126,-132,-100,-142,-72,-129,-23,-137,-141,-95,-139,-140,-84,-130,-101,-127,-134,-93,-133,-85,-66,-102,-23,-73,-171,-109,-99,-181,229,-170,-98,-94,-86,-96,-180,-74,-79,-135,301,-87,323,-76,-82,-136,-88,-202,]),'RETURNS':([297,],[319,]),'BOOL':([88,89,105,108,158,181,224,228,234,262,266,305,306,332,],[-23,-21,191,191,191,191,-22,191,191,191,191,191,191,191,]),'RETURN':([0,3,8,23,25,36,42,43,46,95,102,110,154,157,160,169,173,195,217,221,245,320,334,341,344,],[45,45,-8,-7,45,-5,-9,-6,45,45,-144,45,45,-24,-28,45,-10,-15,45,45,-143,45,45,-30,-29,]),'PROC':([92,],[159,]),'TO':([1,5,11,18,19,20,22,28,52,54,55,56,57,58,59,60,61,62,64,65,66,68,69,70,71,72,74,77,78,79,80,81,82,84,85,111,129,147,149,161,207,213,214,215,216,227,243,248,250,267,293,300,301,310,311,312,314,322,323,],[-83,-68,-71,-69,-169,-168,-67,-70,-103,-131,-97,-128,-138,-126,-132,-100,-142,-72,-129,-23,-137,-141,-95,-139,-140,-84,-130,-101,-127,-134,-93,-133,-85,-66,-102,-73,-171,-109,-99,-181,-170,-98,-94,-86,-96,-180,-74,-79,-135,303,-87,303,303,-76,-82,-136,-88,-202,303,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'boolean_literal':([12,14,45,51,63,75,76,93,101,109,112,119,132,134,136,150,177,208,212,218,230,234,235,237,239,241,244,246,247,251,253,254,289,299,303,304,305,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'formal_parameter':([226,295,],[261,261,]),'declaration':([30,194,],[106,106,]),'arithmetic_additive_operator':([33,80,214,],[116,152,152,]),'step_enumeration':([98,],[165,]),'literal':([12,14,45,51,63,75,76,93,101,109,112,119,132,134,136,150,177,208,212,218,230,234,235,237,239,241,244,246,247,251,253,254,289,299,303,304,305,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'parameter_list':([51,93,208,],[130,162,249,]),'action_statement_nullable':([25,95,169,221,],[94,164,231,260,]),'index_mode':([234,305,],[271,271,]),'operand1':([12,14,45,51,63,75,93,101,109,112,119,132,136,177,208,212,218,230,234,235,237,239,241,244,246,247,251,253,254,289,299,303,304,305,],[80,80,80,80,80,80,80,80,80,80,80,80,214,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'statement_list':([0,],[6,]),'expression_list':([119,132,247,],[206,209,286,]),'elsif_expression':([211,],[252,]),'else_expression':([211,252,],[255,290,]),'discrete_mode':([105,108,158,181,228,234,262,266,305,306,332,],[185,185,185,185,264,270,185,298,270,185,185,]),'operand4':([12,14,45,51,63,75,76,93,101,109,112,119,132,134,136,150,177,208,212,218,230,234,235,237,239,241,244,246,247,251,253,254,289,299,303,304,305,],[60,60,60,60,60,60,149,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'string_length':([238,],[279,]),'if_action':([0,3,25,46,95,110,154,169,217,221,320,334,],[10,10,10,10,10,10,10,10,10,10,10,10,]),'character_mode':([105,108,158,181,228,234,262,266,305,306,332,],[176,176,176,176,176,176,176,176,176,176,176,]),'else_clause':([153,294,],[220,316,]),'membership_operator':([72,],[135,]),'array_location':([0,3,12,14,25,45,46,51,63,73,75,76,93,95,101,109,110,112,119,132,134,136,150,154,169,177,208,212,217,218,221,230,234,235,237,239,241,244,246,247,251,253,254,289,299,303,304,305,320,334,],[33,33,77,77,33,77,33,77,77,147,77,77,77,33,77,77,33,77,77,77,77,77,77,33,33,77,77,77,33,77,33,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,33,33,]),'result_action':([0,3,25,46,95,110,154,169,217,221,320,334,],[32,32,32,32,32,32,32,32,32,32,32,32,]),'empty_literal':([12,14,45,51,63,75,76,93,101,109,112,119,132,134,136,150,177,208,212,218,230,234,235,237,239,241,244,246,247,251,253,254,289,299,303,304,305,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'builtin_call':([0,3,12,14,25,45,46,51,63,73,75,76,93,95,101,109,110,112,119,132,134,136,150,154,169,177,208,212,217,218,221,230,234,235,237,239,241,244,246,247,251,253,254,289,299,303,304,305,320,334,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'statement_nullable':([3,46,320,334,],[48,128,333,338,]),'identifier_list':([15,29,30,155,156,172,194,226,295,],[91,105,108,91,224,105,108,262,262,]),'reference_mode':([105,108,158,181,262,306,332,],[187,187,187,187,187,187,187,]),'operand2':([12,14,45,51,63,75,93,101,109,112,119,132,136,150,177,208,212,218,230,234,235,237,239,241,244,246,247,251,253,254,289,299,303,304,305,],[69,69,69,69,69,69,69,69,69,69,69,69,69,216,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'return_action':([0,3,25,46,95,110,154,169,217,221,320,334,],[34,34,34,34,34,34,34,34,34,34,34,34,]),'operand3':([12,14,45,51,63,75,93,101,109,112,119,132,134,136,150,177,208,212,218,230,234,235,237,239,241,244,246,247,251,253,254,289,299,303,304,305,],[55,55,55,55,55,55,55,55,55,55,55,55,213,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'step_value':([267,],[300,]),'empty':([3,25,45,46,95,169,221,320,334,],[47,96,126,47,96,96,96,47,47,]),'while_control':([25,100,],[97,170,]),'assignment_action':([0,3,25,46,95,110,154,169,217,221,320,334,],[44,44,44,44,44,44,44,44,44,44,44,44,]),'mode':([105,108,158,181,262,306,332,],[179,196,225,236,296,329,336,]),'do_action':([0,3,25,46,95,110,154,169,217,221,320,334,],[39,39,39,39,39,39,39,39,39,39,39,39,]),'integer_literal':([12,14,45,51,63,75,76,93,101,109,112,119,132,134,136,150,177,208,212,218,230,234,235,237,238,239,241,244,246,247,251,253,254,289,299,303,304,305,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,278,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'action':([0,3,25,46,95,110,154,169,217,221,320,334,],[26,26,26,26,26,201,26,26,26,26,26,26,]),'left_element':([109,],[199,]),'closed_dyadic_operator':([33,],[115,]),'declaration_list':([30,194,],[107,240,]),'character_literal':([12,14,45,51,63,75,76,93,101,109,112,119,132,134,136,150,177,208,212,218,230,234,235,237,239,241,244,246,247,251,253,254,289,299,303,304,305,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'for_control':([25,],[100,]),'mode_name':([105,108,158,181,262,306,332,],[182,182,182,182,182,182,182,]),'then_clause':([86,258,],[153,294,]),'location':([0,3,12,14,25,45,46,51,63,73,75,76,93,95,101,109,110,112,119,132,134,136,150,154,169,177,208,212,217,218,221,230,234,235,237,239,241,244,246,247,251,253,254,289,299,303,304,305,320,334,],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,]),'start_element':([109,],[198,]),'composite_mode':([105,108,158,181,262,306,332,],[174,174,174,174,174,174,174,]),'result_spec':([297,],[321,]),'range_enumeration':([98,],[166,]),'formal_parameter_list':([226,295,],[263,317,]),'string_concatenation_operator':([33,80,214,],[113,151,151,]),'string_element':([0,3,12,14,25,45,46,51,63,73,75,76,93,95,101,109,110,112,119,132,134,136,150,154,169,177,208,212,217,218,221,230,234,235,237,239,241,244,246,247,251,253,254,289,299,303,304,305,320,334,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'operator1':([72,],[136,]),'relational_operator':([72,],[138,]),'action_statement_list':([154,217,],[222,257,]),'declaration_statement':([0,3,46,320,334,],[36,36,36,36,36,]),'conditional_expression':([12,14,45,51,63,75,93,101,109,112,119,132,177,208,212,218,230,234,235,237,239,241,244,246,247,251,253,254,289,299,303,304,305,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'upper_bound':([246,304,],[285,327,]),'label_id':([4,],[49,]),'procedure_statement':([0,3,46,320,334,],[42,42,42,42,42,]),'procedure_definition':([92,],[160,]),'value_array_element':([12,14,45,51,63,75,76,93,101,109,112,119,132,134,136,150,177,208,212,218,230,234,235,237,239,241,244,246,247,251,253,254,289,299,303,304,305,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'referenced_location':([12,14,45,51,63,75,76,93,101,109,112,119,132,134,136,150,177,208,212,218,230,234,235,237,239,241,244,246,247,251,253,254,289,299,303,304,305,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'end_value':([267,300,301,323,],[302,324,325,335,]),'primitive_value':([12,14,45,51,63,75,76,93,101,109,112,119,132,134,136,150,177,208,212,218,230,234,235,237,239,241,244,246,247,251,253,254,289,299,303,304,305,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'lower_bound':([119,234,237,239,305,],[204,269,269,269,269,]),'control_part':([25,],[99,]),'operand0':([12,14,45,51,63,75,93,101,109,112,119,132,177,208,212,218,230,234,235,237,239,241,244,246,247,251,253,254,289,299,303,304,305,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'exit_action':([0,3,25,46,95,110,154,169,217,221,320,334,],[7,7,7,7,7,7,7,7,7,7,7,7,]),'action_statement':([0,3,25,46,95,154,169,217,221,320,334,],[8,8,95,8,95,221,95,221,95,8,8,]),'iteration':([98,],[167,]),'builtin_name':([0,3,12,14,25,45,46,51,63,73,75,76,93,95,101,109,110,112,119,132,134,136,150,154,169,177,208,212,217,218,221,230,234,235,237,239,241,244,246,247,251,253,254,289,299,303,304,305,320,334,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'array_slice':([0,3,12,14,25,45,46,51,63,73,75,76,93,95,101,109,110,112,119,132,134,136,150,154,169,177,208,212,217,218,221,230,234,235,237,239,241,244,246,247,251,253,254,289,299,303,304,305,320,334,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'call_action':([0,3,12,14,25,45,46,51,63,73,75,76,93,95,101,109,110,112,119,132,134,136,150,154,169,177,208,212,217,218,221,230,234,235,237,239,241,244,246,247,251,253,254,289,299,303,304,305,320,334,],[13,13,62,62,13,62,13,62,62,62,62,62,62,13,62,62,13,62,62,62,62,62,62,13,13,62,62,62,13,62,13,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,13,13,]),'operator2':([80,214,],[150,150,]),'bracketed_action':([0,3,25,46,95,110,154,169,217,221,320,334,],[40,40,40,40,40,40,40,40,40,40,40,40,]),'expression':([12,14,45,51,63,75,93,101,109,112,119,132,177,208,212,218,230,234,235,237,239,241,244,246,247,251,253,254,289,299,303,304,305,],[67,86,125,131,133,148,131,171,197,202,205,210,233,131,256,258,267,272,276,272,272,281,282,284,287,288,291,292,313,322,326,284,272,]),'string_slice':([0,3,12,14,25,45,46,51,63,73,75,76,93,95,101,109,110,112,119,132,134,136,150,154,169,177,208,212,217,218,221,230,234,235,237,239,241,244,246,247,251,253,254,289,299,303,304,305,320,334,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'statement':([0,3,46,320,334,],[3,46,46,46,46,]),'procedure_call':([0,3,12,14,25,45,46,51,63,73,75,76,93,95,101,109,110,112,119,132,134,136,150,154,169,177,208,212,217,218,221,230,234,235,237,239,241,244,246,247,251,253,254,289,299,303,304,305,320,334,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'discrete_mode_name':([105,108,158,181,228,234,262,266,305,306,332,],[188,188,188,188,188,188,188,188,188,188,188,]),'initialization':([196,],[242,]),'literal_range':([234,237,239,305,],[273,277,280,273,]),'newmode_statement':([0,3,46,320,334,],[23,23,23,23,23,]),'array_mode':([105,108,158,181,262,306,332,],[192,192,192,192,192,192,192,]),'integer_mode':([105,108,158,181,228,234,262,266,305,306,332,],[193,193,193,193,193,193,193,193,193,193,193,]),'index_mode_list':([234,305,],[274,328,]),'assigning_operator':([33,],[112,]),'identifier':([0,3,12,14,15,25,29,30,45,46,51,63,73,75,76,93,95,98,101,105,108,109,110,112,119,132,134,136,150,154,155,156,158,169,172,177,181,194,208,212,217,218,221,226,228,230,234,235,237,239,241,244,246,247,251,253,254,262,266,289,295,299,303,304,305,306,320,332,334,],[31,31,84,84,89,31,89,89,84,31,84,84,84,84,84,84,31,168,84,190,190,84,84,84,84,84,84,84,84,31,89,89,190,31,89,84,190,89,84,84,31,84,31,89,265,84,275,84,84,84,84,84,84,84,84,84,84,190,265,84,89,84,84,84,275,190,31,190,31,]),'array_element':([0,3,12,14,25,45,46,51,63,73,75,76,93,95,101,109,110,112,119,132,134,136,150,154,169,177,208,212,217,218,221,230,234,235,237,239,241,244,246,247,251,253,254,289,299,303,304,305,320,334,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'value_array_slice':([12,14,45,51,63,75,76,93,101,109,112,119,132,134,136,150,177,208,212,218,230,234,235,237,239,241,244,246,247,251,253,254,289,299,303,304,305,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'arithmetic_multiplicative_operator':([33,69,216,],[123,134,134,]),'parenthesized_expression':([12,14,45,51,63,75,76,93,101,109,112,119,132,134,136,150,177,208,212,218,230,234,235,237,239,241,244,246,247,251,253,254,289,299,303,304,305,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'newmode_list':([15,155,],[90,223,]),'character_string_literal':([12,14,45,51,63,75,76,93,101,109,112,119,132,134,136,150,177,208,212,218,230,234,235,237,239,241,244,246,247,251,253,254,289,299,303,304,305,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'synonym_definition':([29,172,],[103,103,]),'mode_definition':([15,155,],[87,87,]),'element_mode':([306,],[330,]),'then_expression':([133,292,313,],[211,315,331,]),'dereferenced_reference':([0,3,12,14,25,45,46,51,63,73,75,76,93,95,101,109,110,112,119,132,134,136,150,154,169,177,208,212,217,218,221,230,234,235,237,239,241,244,246,247,251,253,254,289,299,303,304,305,320,334,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'program':([0,],[17,]),'boolean_mode':([105,108,158,181,228,234,262,266,305,306,332,],[189,189,189,189,189,189,189,189,189,189,189,]),'right_element':([244,],[283,]),'synonym_list':([29,172,],[104,232,]),'synonym_statement':([0,3,46,320,334,],[43,43,43,43,43,]),'result':([45,],[127,]),'string_mode':([105,108,158,181,262,306,332,],[180,180,180,180,180,180,180,]),'monadic_operator':([12,14,45,51,63,75,93,101,109,112,119,132,134,136,150,177,208,212,218,230,234,235,237,239,241,244,246,247,251,253,254,289,299,303,304,305,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'discrete_range_mode':([105,108,158,181,228,234,262,266,305,306,332,],[183,183,183,183,183,183,183,183,183,183,183,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','Parser.py',63),
  ('statement_list -> statement statement_nullable','statement_list',2,'p_statement_list','Parser.py',67),
  ('statement_nullable -> statement statement_nullable','statement_nullable',2,'p_statement_nullable','Parser.py',79),
  ('statement_nullable -> empty','statement_nullable',1,'p_statement_nullable','Parser.py',80),
  ('statement -> declaration_statement','statement',1,'p_statement','Parser.py',92),
  ('statement -> synonym_statement','statement',1,'p_statement','Parser.py',93),
  ('statement -> newmode_statement','statement',1,'p_statement','Parser.py',94),
  ('statement -> action_statement','statement',1,'p_statement','Parser.py',95),
  ('statement -> procedure_statement','statement',1,'p_statement','Parser.py',96),
  ('synonym_statement -> SYN synonym_list SEMI','synonym_statement',3,'p_synonym_statement','Parser.py',105),
  ('synonym_list -> synonym_definition','synonym_list',1,'p_synonym_list','Parser.py',109),
  ('synonym_list -> synonym_definition COMMA synonym_list','synonym_list',3,'p_synonym_list','Parser.py',110),
  ('synonym_definition -> identifier_list mode ASSIGN expression','synonym_definition',4,'p_synonym_definition','Parser.py',119),
  ('synonym_definition -> identifier_list ASSIGN expression','synonym_definition',3,'p_synonym_definition','Parser.py',120),
  ('declaration_statement -> DCL declaration_list SEMI','declaration_statement',3,'p_declaration_statement','Parser.py',134),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','Parser.py',138),
  ('declaration_list -> declaration COMMA declaration_list','declaration_list',3,'p_declaration_list','Parser.py',139),
  ('declaration -> identifier_list mode initialization','declaration',3,'p_declaration','Parser.py',147),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','Parser.py',148),
  ('initialization -> ASSIGN expression','initialization',2,'p_initialization','Parser.py',152),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','Parser.py',156),
  ('identifier_list -> identifier COMMA identifier_list','identifier_list',3,'p_identifier_list','Parser.py',157),
  ('identifier -> ID','identifier',1,'p_identifier','Parser.py',166),
  ('newmode_statement -> TYPE newmode_list SEMI','newmode_statement',3,'p_newmode_statement','Parser.py',177),
  ('newmode_list -> mode_definition','newmode_list',1,'p_newmode_list','Parser.py',181),
  ('newmode_list -> mode_definition COMMA newmode_list','newmode_list',3,'p_newmode_list','Parser.py',182),
  ('mode_definition -> identifier_list ASSIGN mode','mode_definition',3,'p_mode_definition','Parser.py',191),
  ('procedure_statement -> ID COLON procedure_definition','procedure_statement',3,'p_procedure_statement','Parser.py',202),
  ('procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI','procedure_definition',9,'p_procedure_definition','Parser.py',206),
  ('procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI','procedure_definition',8,'p_procedure_definition','Parser.py',207),
  ('formal_parameter_list -> formal_parameter','formal_parameter_list',1,'p_formal_parameter_list','Parser.py',211),
  ('formal_parameter_list -> formal_parameter COMMA formal_parameter_list','formal_parameter_list',3,'p_formal_parameter_list','Parser.py',212),
  ('formal_parameter -> identifier_list mode LOC','formal_parameter',3,'p_formal_parameter','Parser.py',221),
  ('formal_parameter -> identifier_list mode','formal_parameter',2,'p_formal_parameter','Parser.py',222),
  ('result_spec -> RETURNS LPAREN mode LOC RPAREN','result_spec',5,'p_result_spec','Parser.py',228),
  ('result_spec -> RETURNS LPAREN mode RPAREN','result_spec',4,'p_result_spec','Parser.py',229),
  ('mode -> mode_name','mode',1,'p_mode','Parser.py',234),
  ('mode -> discrete_mode','mode',1,'p_mode','Parser.py',235),
  ('mode -> reference_mode','mode',1,'p_mode','Parser.py',236),
  ('mode -> composite_mode','mode',1,'p_mode','Parser.py',237),
  ('mode_name -> identifier','mode_name',1,'p_mode_name','Parser.py',241),
  ('discrete_mode -> integer_mode','discrete_mode',1,'p_discrete_mode','Parser.py',249),
  ('discrete_mode -> boolean_mode','discrete_mode',1,'p_discrete_mode','Parser.py',250),
  ('discrete_mode -> character_mode','discrete_mode',1,'p_discrete_mode','Parser.py',251),
  ('discrete_mode -> discrete_range_mode','discrete_mode',1,'p_discrete_mode','Parser.py',252),
  ('discrete_mode_name -> identifier','discrete_mode_name',1,'p_discrete_mode_name','Parser.py',256),
  ('integer_mode -> INT','integer_mode',1,'p_integer_mode','Parser.py',260),
  ('boolean_mode -> BOOL','boolean_mode',1,'p_boolean_mode','Parser.py',264),
  ('character_mode -> CHAR','character_mode',1,'p_character_mode','Parser.py',268),
  ('discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','Parser.py',277),
  ('discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','Parser.py',278),
  ('literal_range -> lower_bound COLON upper_bound','literal_range',3,'p_literal_range','Parser.py',282),
  ('lower_bound -> expression','lower_bound',1,'p_lower_bound','Parser.py',286),
  ('upper_bound -> expression','upper_bound',1,'p_upper_bound','Parser.py',290),
  ('reference_mode -> REF mode','reference_mode',2,'p_reference_mode','Parser.py',297),
  ('composite_mode -> string_mode','composite_mode',1,'p_composite_mode','Parser.py',304),
  ('composite_mode -> array_mode','composite_mode',1,'p_composite_mode','Parser.py',305),
  ('string_mode -> CHARS LBRACKET string_length RBRACKET','string_mode',4,'p_string_mode','Parser.py',309),
  ('string_length -> integer_literal','string_length',1,'p_string_length','Parser.py',313),
  ('array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode','array_mode',5,'p_array_mode','Parser.py',317),
  ('index_mode_list -> index_mode','index_mode_list',1,'p_index_mode_list','Parser.py',321),
  ('index_mode_list -> index_mode COMMA index_mode_list','index_mode_list',3,'p_index_mode_list','Parser.py',322),
  ('index_mode -> discrete_mode','index_mode',1,'p_index_mode','Parser.py',331),
  ('index_mode -> literal_range','index_mode',1,'p_index_mode','Parser.py',332),
  ('element_mode -> mode','element_mode',1,'p_element_mode','Parser.py',336),
  ('location -> identifier','location',1,'p_location','Parser.py',347),
  ('location -> dereferenced_reference','location',1,'p_location','Parser.py',348),
  ('location -> string_element','location',1,'p_location','Parser.py',349),
  ('location -> string_slice','location',1,'p_location','Parser.py',350),
  ('location -> array_element','location',1,'p_location','Parser.py',351),
  ('location -> array_slice','location',1,'p_location','Parser.py',352),
  ('location -> call_action','location',1,'p_location','Parser.py',353),
  ('dereferenced_reference -> array_location ARROW','dereferenced_reference',2,'p_dereferenced_reference','Parser.py',357),
  ('string_element -> identifier LBRACKET start_element RBRACKET','string_element',4,'p_string_element','Parser.py',361),
  ('start_element -> expression','start_element',1,'p_start_element','Parser.py',365),
  ('string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET','string_slice',6,'p_string_slice','Parser.py',369),
  ('left_element -> expression','left_element',1,'p_left_element','Parser.py',373),
  ('right_element -> expression','right_element',1,'p_right_element','Parser.py',377),
  ('array_element -> array_location LBRACKET expression_list RBRACKET','array_element',4,'p_array_element','Parser.py',381),
  ('expression_list -> expression','expression_list',1,'p_expression_list','Parser.py',385),
  ('expression_list -> expression COMMA expression_list','expression_list',3,'p_expression_list','Parser.py',386),
  ('array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET','array_slice',6,'p_array_slice','Parser.py',393),
  ('array_location -> location','array_location',1,'p_array_location','Parser.py',397),
  ('expression -> operand0','expression',1,'p_expression','Parser.py',407),
  ('expression -> conditional_expression','expression',1,'p_expression','Parser.py',408),
  ('parenthesized_expression -> LPAREN expression RPAREN','parenthesized_expression',3,'p_parenthesized_expression','Parser.py',412),
  ('conditional_expression -> IF expression then_expression else_expression FI','conditional_expression',5,'p_conditional_expression','Parser.py',420),
  ('conditional_expression -> IF expression then_expression elsif_expression else_expression FI','conditional_expression',6,'p_conditional_expression','Parser.py',421),
  ('then_expression -> THEN expression','then_expression',2,'p_then_expression','Parser.py',425),
  ('else_expression -> ELSE expression','else_expression',2,'p_else_expression','Parser.py',429),
  ('elsif_expression -> ELSIF expression then_expression','elsif_expression',3,'p_elsif_expression','Parser.py',433),
  ('elsif_expression -> elsif_expression ELSIF expression then_expression','elsif_expression',4,'p_elsif_expression','Parser.py',434),
  ('operand0 -> operand1','operand0',1,'p_operand0','Parser.py',449),
  ('operand0 -> operand0 operator1 operand1','operand0',3,'p_operand0','Parser.py',450),
  ('operand1 -> operand2','operand1',1,'p_operand1','Parser.py',457),
  ('operand1 -> operand1 operator2 operand2','operand1',3,'p_operand1','Parser.py',458),
  ('operand2 -> operand3','operand2',1,'p_operand2','Parser.py',465),
  ('operand2 -> operand2 arithmetic_multiplicative_operator operand3','operand2',3,'p_operand2','Parser.py',466),
  ('operand3 -> monadic_operator operand4','operand3',2,'p_operand3','Parser.py',474),
  ('operand3 -> operand4','operand3',1,'p_operand3','Parser.py',475),
  ('operand4 -> array_location','operand4',1,'p_operand4','Parser.py',482),
  ('operand4 -> referenced_location','operand4',1,'p_operand4','Parser.py',483),
  ('operand4 -> primitive_value','operand4',1,'p_operand4','Parser.py',484),
  ('arithmetic_multiplicative_operator -> TIMES','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',495),
  ('arithmetic_multiplicative_operator -> DIVIDE','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',496),
  ('arithmetic_multiplicative_operator -> MODULO','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',497),
  ('monadic_operator -> MINUS','monadic_operator',1,'p_monadic_operator','Parser.py',501),
  ('monadic_operator -> NOT','monadic_operator',1,'p_monadic_operator','Parser.py',502),
  ('referenced_location -> ARROW array_location','referenced_location',2,'p_referenced_location','Parser.py',506),
  ('operator1 -> relational_operator','operator1',1,'p_operator1','Parser.py',510),
  ('operator1 -> membership_operator','operator1',1,'p_operator1','Parser.py',511),
  ('operator2 -> arithmetic_additive_operator','operator2',1,'p_operator2','Parser.py',515),
  ('operator2 -> string_concatenation_operator','operator2',1,'p_operator2','Parser.py',516),
  ('arithmetic_additive_operator -> PLUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','Parser.py',520),
  ('arithmetic_additive_operator -> MINUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','Parser.py',521),
  ('string_concatenation_operator -> CONCAT','string_concatenation_operator',1,'p_string_concatenation_operator','Parser.py',525),
  ('relational_operator -> AND','relational_operator',1,'p_relational_operator','Parser.py',529),
  ('relational_operator -> OR','relational_operator',1,'p_relational_operator','Parser.py',530),
  ('relational_operator -> EQUAL','relational_operator',1,'p_relational_operator','Parser.py',531),
  ('relational_operator -> NOTEQ','relational_operator',1,'p_relational_operator','Parser.py',532),
  ('relational_operator -> GREATER','relational_operator',1,'p_relational_operator','Parser.py',533),
  ('relational_operator -> GTEQUAL','relational_operator',1,'p_relational_operator','Parser.py',534),
  ('relational_operator -> LESS','relational_operator',1,'p_relational_operator','Parser.py',535),
  ('relational_operator -> LTEQUAL','relational_operator',1,'p_relational_operator','Parser.py',536),
  ('membership_operator -> IN','membership_operator',1,'p_membership_operator','Parser.py',540),
  ('primitive_value -> literal','primitive_value',1,'p_primitive_value','Parser.py',552),
  ('primitive_value -> value_array_element','primitive_value',1,'p_primitive_value','Parser.py',553),
  ('primitive_value -> value_array_slice','primitive_value',1,'p_primitive_value','Parser.py',554),
  ('primitive_value -> parenthesized_expression','primitive_value',1,'p_primitive_value','Parser.py',555),
  ('literal -> integer_literal','literal',1,'p_literal','Parser.py',559),
  ('literal -> boolean_literal','literal',1,'p_literal','Parser.py',560),
  ('literal -> character_literal','literal',1,'p_literal','Parser.py',561),
  ('literal -> empty_literal','literal',1,'p_literal','Parser.py',562),
  ('literal -> character_string_literal','literal',1,'p_literal','Parser.py',563),
  ('value_array_element -> primitive_value LBRACKET expression_list RBRACKET','value_array_element',4,'p_value_array_element','Parser.py',567),
  ('value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET','value_array_slice',6,'p_value_array_slice','Parser.py',571),
  ('integer_literal -> ICONST','integer_literal',1,'p_integer_literal','Parser.py',579),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','Parser.py',583),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','Parser.py',584),
  ('character_literal -> CCONST','character_literal',1,'p_character_literal','Parser.py',588),
  ('empty_literal -> NULL','empty_literal',1,'p_empty_literal','Parser.py',592),
  ('character_string_literal -> SCONST','character_string_literal',1,'p_character_string_literal','Parser.py',596),
  ('action_statement -> identifier COLON action SEMI','action_statement',4,'p_action_statement','Parser.py',607),
  ('action_statement -> action SEMI','action_statement',2,'p_action_statement','Parser.py',608),
  ('action -> bracketed_action','action',1,'p_action','Parser.py',613),
  ('action -> assignment_action','action',1,'p_action','Parser.py',614),
  ('action -> call_action','action',1,'p_action','Parser.py',615),
  ('action -> exit_action','action',1,'p_action','Parser.py',616),
  ('action -> result_action','action',1,'p_action','Parser.py',617),
  ('action -> return_action','action',1,'p_action','Parser.py',618),
  ('bracketed_action -> if_action','bracketed_action',1,'p_bracketed_action','Parser.py',622),
  ('bracketed_action -> do_action','bracketed_action',1,'p_bracketed_action','Parser.py',623),
  ('assignment_action -> array_location assigning_operator expression','assignment_action',3,'p_assignment_action','Parser.py',627),
  ('assigning_operator -> closed_dyadic_operator ASSIGN','assigning_operator',2,'p_assigning_operator','Parser.py',631),
  ('assigning_operator -> ASSIGN','assigning_operator',1,'p_assigning_operator','Parser.py',632),
  ('closed_dyadic_operator -> arithmetic_additive_operator','closed_dyadic_operator',1,'p_closed_dyadic_operator','Parser.py',636),
  ('closed_dyadic_operator -> arithmetic_multiplicative_operator','closed_dyadic_operator',1,'p_closed_dyadic_operator','Parser.py',637),
  ('closed_dyadic_operator -> string_concatenation_operator','closed_dyadic_operator',1,'p_closed_dyadic_operator','Parser.py',638),
  ('if_action -> IF expression then_clause else_clause FI','if_action',5,'p_if_action','Parser.py',642),
  ('if_action -> IF expression then_clause FI','if_action',4,'p_if_action','Parser.py',643),
  ('then_clause -> THEN action_statement_list','then_clause',2,'p_then_clause','Parser.py',647),
  ('else_clause -> ELSE action_statement_list','else_clause',2,'p_else_clause','Parser.py',651),
  ('else_clause -> ELSIF expression then_clause else_clause','else_clause',4,'p_else_clause','Parser.py',652),
  ('else_clause -> ELSIF expression then_clause','else_clause',3,'p_else_clause','Parser.py',653),
  ('action_statement_list -> action_statement action_statement_nullable','action_statement_list',2,'p_action_statement_list','Parser.py',664),
  ('action_statement_nullable -> action_statement action_statement_nullable','action_statement_nullable',2,'p_action_statement_nullable','Parser.py',676),
  ('action_statement_nullable -> empty','action_statement_nullable',1,'p_action_statement_nullable','Parser.py',677),
  ('call_action -> procedure_call','call_action',1,'p_call_action','Parser.py',694),
  ('call_action -> builtin_call','call_action',1,'p_call_action','Parser.py',695),
  ('builtin_call -> builtin_name LPAREN parameter_list RPAREN','builtin_call',4,'p_builtin_call','Parser.py',699),
  ('builtin_call -> builtin_name LPAREN RPAREN','builtin_call',3,'p_builtin_call','Parser.py',700),
  ('builtin_name -> ABS','builtin_name',1,'p_builtin_name','Parser.py',705),
  ('builtin_name -> ASC','builtin_name',1,'p_builtin_name','Parser.py',706),
  ('builtin_name -> NUM','builtin_name',1,'p_builtin_name','Parser.py',707),
  ('builtin_name -> UPPER','builtin_name',1,'p_builtin_name','Parser.py',708),
  ('builtin_name -> LOWER','builtin_name',1,'p_builtin_name','Parser.py',709),
  ('builtin_name -> LENGTH','builtin_name',1,'p_builtin_name','Parser.py',710),
  ('builtin_name -> READ','builtin_name',1,'p_builtin_name','Parser.py',711),
  ('builtin_name -> PRINT','builtin_name',1,'p_builtin_name','Parser.py',712),
  ('procedure_call -> ID LPAREN parameter_list RPAREN','procedure_call',4,'p_procedure_call','Parser.py',716),
  ('procedure_call -> ID LPAREN RPAREN','procedure_call',3,'p_procedure_call','Parser.py',717),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','Parser.py',721),
  ('parameter_list -> expression COMMA parameter_list','parameter_list',3,'p_parameter_list','Parser.py',722),
  ('exit_action -> EXIT label_id','exit_action',2,'p_exit_action','Parser.py',731),
  ('label_id -> ID','label_id',1,'p_label_id','Parser.py',735),
  ('return_action -> RETURN result','return_action',2,'p_return_action','Parser.py',739),
  ('result -> expression','result',1,'p_result','Parser.py',743),
  ('result -> empty','result',1,'p_result','Parser.py',744),
  ('result_action -> RESULT expression','result_action',2,'p_result_action','Parser.py',747),
  ('do_action -> DO control_part SEMI action_statement_nullable OD','do_action',5,'p_do_action','Parser.py',755),
  ('do_action -> DO action_statement_nullable OD','do_action',3,'p_do_action','Parser.py',756),
  ('control_part -> for_control while_control','control_part',2,'p_control_part','Parser.py',763),
  ('control_part -> for_control','control_part',1,'p_control_part','Parser.py',764),
  ('control_part -> while_control','control_part',1,'p_control_part','Parser.py',765),
  ('for_control -> FOR iteration','for_control',2,'p_for_control','Parser.py',769),
  ('iteration -> step_enumeration','iteration',1,'p_iteration','Parser.py',773),
  ('iteration -> range_enumeration','iteration',1,'p_iteration','Parser.py',774),
  ('step_enumeration -> identifier ASSIGN expression step_value DOWN end_value','step_enumeration',6,'p_step_enumeration','Parser.py',778),
  ('step_enumeration -> identifier ASSIGN expression step_value end_value','step_enumeration',5,'p_step_enumeration','Parser.py',779),
  ('step_enumeration -> identifier ASSIGN expression DOWN end_value','step_enumeration',5,'p_step_enumeration','Parser.py',780),
  ('step_enumeration -> identifier ASSIGN expression end_value','step_enumeration',4,'p_step_enumeration','Parser.py',781),
  ('step_value -> BY expression','step_value',2,'p_step_value','Parser.py',793),
  ('end_value -> TO expression','end_value',2,'p_end_value','Parser.py',797),
  ('range_enumeration -> identifier DOWN IN discrete_mode','range_enumeration',4,'p_range_enumeration','Parser.py',801),
  ('range_enumeration -> identifier IN discrete_mode','range_enumeration',3,'p_range_enumeration','Parser.py',802),
  ('while_control -> WHILE expression','while_control',2,'p_while_control','Parser.py',809),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',815),
]
