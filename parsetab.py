
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ICONST CCONST SCONST COMMA PLUS MINUS TIMES DIVIDE COLON LPAREN RPAREN ASSIGN SEMI ARROW LTEQUAL LESS GREATER GTEQUAL EQUAL LBRACKET RBRACKET ID MODULO AND OR NOTEQ NOT CONCAT UPPER FI CHARS NULL BY WHILE ELSE RETURNS ASC SYN RESULT CHAR INT TO DOWN PROC FALSE TYPE RETURN DO LOC READ BOOL END EXIT IN DCL FOR OD IF ARRAY REF THEN NUM LENGTH LOWER ELSIF TRUE ABS PRINTprogram : statement_liststatement_list : statement statement_nullablestatement_nullable : statement statement_nullable\n                              | emptystatement : declaration_statement\n                     | synonym_statement\n                     | newmode_statement\n                     | action_statement\n                     | procedure_statementsynonym_statement : SYN synonym_list SEMIsynonym_list : synonym_definition\n                        | synonym_definition COMMA synonym_listsynonym_definition : identifier_list mode ASSIGN expression\n                              | identifier_list ASSIGN expressiondeclaration_statement : DCL declaration_list SEMIdeclaration_list : declaration\n                            | declaration COMMA declaration_listdeclaration : identifier_list mode initialization\n                       | identifier_list modeinitialization : ASSIGN expressionidentifier_list : identifier\n                           | identifier COMMA identifier_listidentifier : IDnewmode_statement : TYPE newmode_list SEMInewmode_list : mode_definition\n                        | mode_definition COMMA newmode_listmode_definition : identifier_list ASSIGN modeprocedure_statement : ID COLON procedure_definitionprocedure_definition : PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI\n                                | PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMIformal_parameter_list : formal_parameter\n                                 | formal_parameter COMMA formal_parameter_listformal_parameter : identifier_list mode LOC\n                            | identifier_list moderesult_spec : RETURNS LPAREN mode LOC RPAREN\n                       | RETURNS LPAREN mode RPARENmode : mode_name\n                | discrete_mode\n                | reference_mode\n                | composite_modemode_name : identifierdiscrete_mode : integer_mode\n                         | boolean_mode\n                         | character_mode\n                         | discrete_range_modediscrete_mode_name : identifierinteger_mode : INTboolean_mode : BOOLcharacter_mode : CHARdiscrete_range_mode : discrete_mode_name LPAREN literal_range RPAREN\n                               | discrete_mode LPAREN literal_range RPARENliteral_range : lower_bound COLON upper_boundlower_bound : expressionupper_bound : expressionreference_mode : REF modecomposite_mode : string_mode\n                          | array_modestring_mode : CHARS LBRACKET string_length RBRACKETstring_length : integer_literalarray_mode : ARRAY LBRACKET index_mode_list RBRACKET element_modeindex_mode_list : index_mode\n                           | index_mode COMMA index_mode_listindex_mode : discrete_mode\n                      | literal_rangeelement_mode : modelocation : identifier\n\t\t\t\t    | dereferenced_reference\n\t\t\t\t    | string_element\n\t\t\t\t    | string_slice\n\t\t\t\t    | array_element\n\t\t\t\t    | array_slice\n\t\t\t\t    | call_actiondereferenced_reference : array_location ARROWstring_element : identifier LBRACKET start_element RBRACKETstart_element : expressionstring_slice : identifier LBRACKET left_element COLON right_element RBRACKETleft_element : expressionright_element : expressionarray_element : array_location LBRACKET expression_list RBRACKETexpression_list : expression\n    \t\t\t\t\t   | expression COMMA expression_listarray_slice : array_location LBRACKET lower_bound COLON upper_bound RBRACKETarray_location : locationexpression : operand0\n                      | conditional_expressionparenthesized_expression : LPAREN expression RPARENconditional_expression : IF expression then_expression else_expression FI\n                                  | IF expression then_expression elsif_expression else_expression FIthen_expression : THEN expressionelse_expression : ELSE expressionelsif_expression : ELSIF expression then_expression\n                            | elsif_expression ELSIF expression then_expressionoperand0 : operand1\n                    | operand0 operator1 operand1operand1 : operand2\n                    | operand1 operator2 operand2operand2 : operand3\n                    | operand2 arithmetic_multiplicative_operator operand3operand3 : monadic_operator operand4\n                    | operand4operand4 : array_location\n                    | referenced_location\n                    | primitive_valuearithmetic_multiplicative_operator : TIMES\n                                              | DIVIDE\n                                              | MODULOmonadic_operator : MINUS\n                            | NOTreferenced_location : ARROW array_locationoperator1 : relational_operator\n                     | membership_operatoroperator2 : arithmetic_additive_operator\n                     | string_concatenation_operatorarithmetic_additive_operator : PLUS\n                                        | MINUSstring_concatenation_operator : CONCATrelational_operator : AND\n                               | OR\n                               | EQUAL\n                               | NOTEQ\n                               | GREATER\n                               | GTEQUAL\n                               | LESS\n                               | LTEQUALmembership_operator : INprimitive_value : literal\n                           | value_array_element\n                           | value_array_slice\n                           | parenthesized_expressionliteral : integer_literal\n                   | boolean_literal\n                   | character_literal\n                   | empty_literal\n                   | character_string_literalvalue_array_element : primitive_value LBRACKET expression_list RBRACKETvalue_array_slice : primitive_value LBRACKET expression COLON expression RBRACKETinteger_literal : ICONSTboolean_literal : TRUE\n                           | FALSEcharacter_literal : CCONSTempty_literal : NULLcharacter_string_literal : SCONSTaction_statement : identifier COLON action SEMI\n                            | action SEMIaction : bracketed_action\n                  | assignment_action\n                  | call_action\n                  | exit_action\n                  | result_action\n                  | return_actionbracketed_action : if_action\n                            | do_actionassignment_action : array_location assigning_operator expressionassigning_operator : closed_dyadic_operator ASSIGN\n                              | ASSIGNclosed_dyadic_operator : arithmetic_additive_operator\n                                  | arithmetic_multiplicative_operator\n                                  | string_concatenation_operatorif_action : IF expression then_clause else_clause FI\n                     | IF expression then_clause FIthen_clause : THEN action_statement_listelse_clause : ELSE action_statement_list\n                       | ELSIF expression then_clause else_clause\n                       | ELSIF expression then_clauseaction_statement_list : action_statement action_statement_nullableaction_statement_nullable : action_statement action_statement_nullable\n                                     | emptycall_action : procedure_call\n                       | builtin_callbuiltin_call : builtin_name LPAREN parameter_list RPAREN\n                        | builtin_name LPAREN RPARENbuiltin_name : ABS\n                        | ASC\n                        | NUM\n                        | UPPER\n                        | LOWER\n                        | LENGTH\n                        | READ\n                        | PRINTprocedure_call : ID LPAREN parameter_list RPAREN\n                          | ID LPAREN RPARENparameter_list : expression\n                          | expression COMMA parameter_listexit_action : EXIT label_idlabel_id : IDreturn_action : RETURN resultresult : expression\n                  | emptyresult_action : RESULT expressiondo_action : DO control_part SEMI action_statement_nullable OD\n                     | DO action_statement_nullable ODcontrol_part : for_control while_control \n                        | for_control   \n                        | while_controlfor_control : FOR iterationiteration : step_enumeration\n                     | range_enumerationstep_enumeration : identifier ASSIGN expression step_value DOWN end_value\n                            | identifier ASSIGN expression step_value end_value\n                            | identifier ASSIGN expression DOWN end_value\n                            | identifier ASSIGN expression end_valuestep_value : BY expressionend_value : TO expressionrange_enumeration : identifier DOWN IN discrete_mode\n                             | identifier IN discrete_modewhile_control : WHILE expressionempty :'
    
_lr_action_items = {'RPAREN':([3,5,10,14,33,41,43,45,48,51,53,54,55,56,58,59,61,62,64,66,67,68,69,71,73,74,75,76,77,78,79,80,81,82,83,84,97,107,118,129,130,132,133,134,135,136,138,140,141,143,144,145,146,152,156,159,185,186,187,196,197,208,218,219,226,227,235,238,241,244,251,258,271,273,277,281,282,289,292,293,294,301,302,303,312,314,315,316,320,321,322,336,340,],[-68,-70,-71,-69,-168,-169,-67,-83,-23,-140,-137,-131,-100,-126,-141,-142,-93,-139,-101,-85,-134,-133,-66,-97,-132,-95,-84,-103,-138,-23,-128,-130,-72,-102,-129,-127,-73,187,197,-44,-43,-49,-56,-42,-41,-48,-47,-57,-39,-37,-45,-40,-38,-99,219,-109,238,-182,-171,244,-181,-55,-96,-86,-98,-94,-79,-170,-74,-180,289,292,-135,-54,-183,-31,305,-50,-51,-58,-87,-82,-76,-34,-52,-60,-65,-88,-136,-33,-32,339,343,]),'PLUS':([3,5,10,14,17,31,33,39,40,41,43,45,51,53,54,55,56,58,59,61,62,64,67,68,69,71,73,74,76,77,78,79,80,81,82,83,84,97,152,159,187,188,197,218,219,226,227,235,238,241,244,254,271,301,302,320,],[-68,-70,-71,-69,88,-66,-168,-72,-23,-169,-67,-83,-140,-137,-131,-100,-126,-141,-142,88,-139,-101,-134,-133,-66,-97,-132,-95,-103,-138,-23,-128,-130,-72,-102,-129,-127,-73,-99,-109,-171,-23,-181,-96,-86,-98,88,-79,-170,-74,-180,-66,-135,-82,-76,-136,]),'SYN':([0,1,12,21,22,36,37,113,127,150,175,183,195,240,325,333,342,344,],[2,-6,-9,-5,-7,-8,2,2,-144,-10,-15,-24,-28,-143,2,2,-30,-29,]),'PRINT':([0,1,6,12,21,22,26,36,37,38,42,52,57,60,63,70,72,88,89,90,92,94,95,98,99,100,107,109,110,113,118,122,126,127,142,150,153,154,155,157,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,180,183,195,205,207,209,210,212,216,221,223,225,230,233,234,239,240,242,245,264,265,270,288,290,296,307,309,325,333,342,344,],[30,-6,30,-9,-5,-7,30,-8,30,30,30,30,30,-107,30,30,-108,-114,30,-105,-116,-155,-106,-104,-115,30,30,30,30,30,30,30,30,-144,30,-10,30,-112,-113,30,30,-125,-124,-123,30,-110,-122,-117,-120,-111,-121,-119,-118,30,-15,-154,-24,-28,30,30,30,30,30,30,30,30,30,30,30,30,30,-143,30,30,30,30,30,30,30,30,30,30,30,30,-30,-29,]),'CCONST':([6,26,38,52,57,60,63,72,88,89,90,92,94,95,98,99,100,107,110,118,122,142,153,154,155,160,161,162,163,164,165,166,167,168,169,170,171,172,173,180,207,209,210,212,216,225,230,233,234,239,242,245,264,265,270,288,290,296,307,309,],[51,51,51,51,51,-107,51,-108,-114,51,-105,-116,-155,-106,-104,-115,51,51,51,51,51,51,51,-112,-113,51,-125,-124,-123,51,-110,-122,-117,-120,-111,-121,-119,-118,51,-154,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'WHILE':([3,5,10,14,33,41,42,43,45,51,53,54,55,56,58,59,61,62,64,66,67,68,69,71,73,74,75,76,77,78,79,80,81,82,83,84,97,120,129,130,132,134,136,138,144,152,159,187,197,198,199,200,218,219,226,227,235,238,241,244,271,286,289,292,294,301,302,306,311,316,320,327,329,330,335,],[-68,-70,-71,-69,-168,-169,122,-67,-83,-140,-137,-131,-100,-126,-141,-142,-93,-139,-101,-85,-134,-133,-66,-97,-132,-95,-84,-103,-138,-23,-128,-130,-72,-102,-129,-127,-73,122,-44,-43,-49,-42,-48,-47,-45,-99,-109,-171,-181,-197,-196,-195,-96,-86,-98,-94,-79,-170,-74,-180,-135,-205,-50,-51,-87,-82,-76,-201,-204,-88,-136,-199,-203,-200,-198,]),'OD':([42,123,124,126,127,205,206,240,248,],[-207,204,-167,-207,-144,-207,-166,-143,287,]),'IF':([0,1,6,12,21,22,26,36,37,38,42,52,63,89,94,100,107,109,110,113,118,122,126,127,142,150,157,173,175,180,183,195,205,207,209,210,212,216,221,223,225,230,233,234,239,240,242,245,264,265,270,288,290,296,307,309,325,333,342,344,],[6,-6,52,-9,-5,-7,52,-8,6,52,6,52,52,52,-155,52,52,6,52,6,52,52,6,-144,52,-10,6,52,-15,-154,-24,-28,6,52,52,52,52,52,6,6,52,52,52,52,52,-143,52,52,52,52,52,52,52,52,52,52,6,6,-30,-29,]),'SEMI':([3,4,5,7,10,11,14,20,28,29,32,33,38,39,41,43,44,45,47,48,50,51,53,54,55,56,58,59,61,62,64,66,67,68,69,71,73,74,75,76,77,78,79,80,81,82,83,84,86,87,97,103,104,105,106,108,114,115,116,120,121,125,129,130,132,133,134,135,136,138,140,141,143,144,145,146,152,159,174,181,187,189,197,198,199,200,202,203,204,208,211,214,218,219,222,226,227,231,232,235,236,237,238,241,244,252,268,271,272,286,287,289,292,293,294,301,302,305,306,311,314,315,316,320,324,327,329,330,335,338,339,341,343,],[-68,-145,-70,-148,-71,-152,-69,-146,-150,-151,-149,-168,-207,-147,-169,-67,127,-83,-11,-23,150,-140,-137,-131,-100,-126,-141,-142,-93,-139,-101,-85,-134,-133,-66,-97,-132,-95,-84,-103,-138,-23,-128,-130,-72,-102,-129,-127,175,-16,-73,183,-25,-184,-185,-189,-188,-186,-187,-193,-194,205,-44,-43,-49,-56,-42,-41,-48,-47,-57,-39,-37,-45,-40,-38,-99,-109,-19,-153,-171,240,-181,-197,-196,-195,-192,-206,-191,-55,-14,-12,-96,-86,-160,-98,-94,-18,-17,-79,-27,-26,-170,-74,-180,-13,-159,-135,-20,-205,-190,-50,-51,-58,-87,-82,-76,325,-201,-204,-60,-65,-88,-136,333,-199,-203,-200,-198,342,-36,344,-35,]),'DCL':([0,1,12,21,22,36,37,113,127,150,175,183,195,240,325,333,342,344,],[8,-6,-9,-5,-7,-8,8,8,-144,-10,-15,-24,-28,-143,8,8,-30,-29,]),'LTEQUAL':([3,5,10,14,33,41,43,45,51,53,54,55,56,58,59,61,62,64,67,68,69,71,73,74,75,76,77,78,79,80,81,82,83,84,97,152,159,187,197,218,219,226,227,235,238,241,244,254,271,301,302,320,],[-68,-70,-71,-69,-168,-169,-67,-83,-140,-137,-131,-100,-126,-141,-142,-93,-139,-101,-134,-133,-66,-97,-132,-95,162,-103,-138,-23,-128,-130,-72,-102,-129,-127,-73,-99,-109,-171,-181,-96,-86,-98,-94,-79,-170,-74,-180,-66,-135,-82,-76,-136,]),'READ':([0,1,6,12,21,22,26,36,37,38,42,52,57,60,63,70,72,88,89,90,92,94,95,98,99,100,107,109,110,113,118,122,126,127,142,150,153,154,155,157,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,180,183,195,205,207,209,210,212,216,221,223,225,230,233,234,239,240,242,245,264,265,270,288,290,296,307,309,325,333,342,344,],[9,-6,9,-9,-5,-7,9,-8,9,9,9,9,9,-107,9,9,-108,-114,9,-105,-116,-155,-106,-104,-115,9,9,9,9,9,9,9,9,-144,9,-10,9,-112,-113,9,9,-125,-124,-123,9,-110,-122,-117,-120,-111,-121,-119,-118,9,-15,-154,-24,-28,9,9,9,9,9,9,9,9,9,9,9,9,9,-143,9,9,9,9,9,9,9,9,9,9,9,9,-30,-29,]),'RETURN':([0,1,12,21,22,36,37,42,109,113,126,127,150,157,175,183,195,205,221,223,240,325,333,342,344,],[38,-6,-9,-5,-7,-8,38,38,38,38,38,-144,-10,38,-15,-24,-28,38,38,38,-143,38,38,-30,-29,]),'ASC':([0,1,6,12,21,22,26,36,37,38,42,52,57,60,63,70,72,88,89,90,92,94,95,98,99,100,107,109,110,113,118,122,126,127,142,150,153,154,155,157,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,180,183,195,205,207,209,210,212,216,221,223,225,230,233,234,239,240,242,245,264,265,270,288,290,296,307,309,325,333,342,344,],[15,-6,15,-9,-5,-7,15,-8,15,15,15,15,15,-107,15,15,-108,-114,15,-105,-116,-155,-106,-104,-115,15,15,15,15,15,15,15,15,-144,15,-10,15,-112,-113,15,15,-125,-124,-123,15,-110,-122,-117,-120,-111,-121,-119,-118,15,-15,-154,-24,-28,15,15,15,15,15,15,15,15,15,15,15,15,15,-143,15,15,15,15,15,15,15,15,15,15,15,15,-30,-29,]),'PROC':([117,],[194,]),'FOR':([42,],[119,]),'NOTEQ':([3,5,10,14,33,41,43,45,51,53,54,55,56,58,59,61,62,64,67,68,69,71,73,74,75,76,77,78,79,80,81,82,83,84,97,152,159,187,197,218,219,226,227,235,238,241,244,254,271,301,302,320,],[-68,-70,-71,-69,-168,-169,-67,-83,-140,-137,-131,-100,-126,-141,-142,-93,-139,-101,-134,-133,-66,-97,-132,-95,168,-103,-138,-23,-128,-130,-72,-102,-129,-127,-73,-99,-109,-171,-181,-96,-86,-98,-94,-79,-170,-74,-180,-66,-135,-82,-76,-136,]),'BOOL':([46,48,49,85,131,182,210,215,247,280,284,290,291,332,],[136,-23,-21,136,136,136,136,-22,136,136,136,136,136,136,]),'SCONST':([6,26,38,52,57,60,63,72,88,89,90,92,94,95,98,99,100,107,110,118,122,142,153,154,155,160,161,162,163,164,165,166,167,168,169,170,171,172,173,180,207,209,210,212,216,225,230,233,234,239,242,245,264,265,270,288,290,296,307,309,],[59,59,59,59,59,-107,59,-108,-114,59,-105,-116,-155,-106,-104,-115,59,59,59,59,59,59,59,-112,-113,59,-125,-124,-123,59,-110,-122,-117,-120,-111,-121,-119,-118,59,-154,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'MINUS':([3,5,6,10,14,17,26,31,33,38,39,40,41,43,45,51,52,53,54,55,56,58,59,61,62,63,64,67,68,69,71,73,74,76,77,78,79,80,81,82,83,84,88,89,90,92,94,95,97,98,99,100,107,110,118,122,142,152,153,154,155,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,180,187,188,197,207,209,210,212,216,218,219,225,226,227,230,233,234,235,238,239,241,242,244,245,254,264,265,270,271,288,290,296,301,302,307,309,320,],[-68,-70,60,-71,-69,99,60,-66,-168,60,-72,-23,-169,-67,-83,-140,60,-137,-131,-100,-126,-141,-142,99,-139,60,-101,-134,-133,-66,-97,-132,-95,-103,-138,-23,-128,-130,-72,-102,-129,-127,-114,60,-105,-116,-155,-106,-73,-104,-115,60,60,60,60,60,60,-99,60,-112,-113,-109,60,-125,-124,-123,60,-110,-122,-117,-120,-111,-121,-119,-118,60,-154,-171,-23,-181,60,60,60,60,60,-96,-86,60,-98,99,60,60,60,-79,-170,60,-74,60,-180,60,-66,60,60,60,-135,60,60,60,-82,-76,60,60,-136,]),'FI':([3,5,10,14,33,41,43,45,51,53,54,55,56,58,59,61,62,64,66,67,68,69,71,73,74,75,76,77,78,79,80,81,82,83,84,97,124,126,127,152,158,159,187,197,206,218,219,220,221,224,226,227,235,238,240,241,244,262,266,267,271,294,295,298,299,301,302,316,319,320,],[-68,-70,-71,-69,-168,-169,-67,-83,-140,-137,-131,-100,-126,-141,-142,-93,-139,-101,-85,-134,-133,-66,-97,-132,-95,-84,-103,-138,-23,-128,-130,-72,-102,-129,-127,-73,-167,-207,-144,-99,222,-109,-171,-181,-166,-96,-86,-161,-207,268,-98,-94,-79,-170,-143,-74,-180,294,-165,-162,-135,-87,316,-90,-164,-82,-76,-88,-163,-136,]),'ABS':([0,1,6,12,21,22,26,36,37,38,42,52,57,60,63,70,72,88,89,90,92,94,95,98,99,100,107,109,110,113,118,122,126,127,142,150,153,154,155,157,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,180,183,195,205,207,209,210,212,216,221,223,225,230,233,234,239,240,242,245,264,265,270,288,290,296,307,309,325,333,342,344,],[16,-6,16,-9,-5,-7,16,-8,16,16,16,16,16,-107,16,16,-108,-114,16,-105,-116,-155,-106,-104,-115,16,16,16,16,16,16,16,16,-144,16,-10,16,-112,-113,16,16,-125,-124,-123,16,-110,-122,-117,-120,-111,-121,-119,-118,16,-15,-154,-24,-28,16,16,16,16,16,16,16,16,16,16,16,16,16,-143,16,16,16,16,16,16,16,16,16,16,16,16,-30,-29,]),'DIVIDE':([3,5,10,14,17,31,33,39,40,41,43,45,51,53,54,55,56,58,59,62,64,67,68,69,71,73,74,76,77,78,79,80,81,82,83,84,97,152,159,187,188,197,218,219,226,235,238,241,244,254,271,301,302,320,],[-68,-70,-71,-69,90,-66,-168,-72,-23,-169,-67,-83,-140,-137,-131,-100,-126,-141,-142,-139,-101,-134,-133,-66,-97,-132,90,-103,-138,-23,-128,-130,-72,-102,-129,-127,-73,-99,-109,-171,-23,-181,90,-86,-98,-79,-170,-74,-180,-66,-135,-82,-76,-136,]),'COLON':([3,5,10,14,31,33,40,41,43,45,51,53,54,55,56,58,59,61,62,64,66,67,68,69,71,73,74,75,76,77,78,79,80,81,82,83,84,97,152,159,177,178,187,190,192,197,218,219,226,227,228,235,238,241,244,249,250,254,271,294,301,302,316,320,],[-68,-70,-71,-69,109,-168,117,-169,-67,-83,-140,-137,-131,-100,-126,-141,-142,-93,-139,-101,-85,-134,-133,-66,-97,-132,-95,-84,-103,-138,-23,-128,-130,-72,-102,-129,-127,-73,-99,-109,233,-53,-171,-77,242,-181,-96,-86,-98,-94,270,-79,-170,-74,-180,288,-53,-66,-135,-87,-82,-76,-88,-136,]),'BY':([3,5,10,14,33,41,43,45,51,53,54,55,56,58,59,61,62,64,66,67,68,69,71,73,74,75,76,77,78,79,80,81,82,83,84,97,152,159,187,197,218,219,226,227,235,238,241,244,271,283,294,301,302,316,320,],[-68,-70,-71,-69,-168,-169,-67,-83,-140,-137,-131,-100,-126,-141,-142,-93,-139,-101,-85,-134,-133,-66,-97,-132,-95,-84,-103,-138,-23,-128,-130,-72,-102,-129,-127,-73,-99,-109,-171,-181,-96,-86,-98,-94,-79,-170,-74,-180,-135,307,-87,-82,-76,-88,-136,]),'RBRACKET':([3,5,10,14,33,41,43,45,51,53,54,55,56,58,59,61,62,64,66,67,68,69,71,73,74,75,76,77,78,79,80,81,82,83,84,97,129,130,132,134,136,138,144,152,159,178,179,187,190,191,197,218,219,226,227,228,229,235,238,241,244,253,255,256,257,259,260,271,273,274,275,276,278,279,289,292,294,300,301,302,312,313,316,320,],[-68,-70,-71,-69,-168,-169,-67,-83,-140,-137,-131,-100,-126,-141,-142,-93,-139,-101,-85,-134,-133,-66,-97,-132,-95,-84,-103,-138,-23,-128,-130,-72,-102,-129,-127,-73,-44,-43,-49,-42,-48,-47,-45,-99,-109,-80,235,-171,-75,241,-181,-96,-86,-98,-94,-80,271,-79,-170,-74,-180,-61,-64,291,-63,293,-59,-135,-54,301,-80,-81,-78,302,-50,-51,-87,320,-82,-76,-52,-62,-88,-136,]),'ASSIGN':([3,5,10,14,17,31,33,39,40,41,43,45,46,48,49,69,78,88,90,91,92,93,95,96,97,98,99,101,102,129,130,132,133,134,135,136,137,138,140,141,143,144,145,146,174,187,188,197,201,208,215,235,238,241,244,289,292,293,301,302,314,315,],[-68,-70,-71,-69,94,-66,-168,-72,-23,-169,-67,-83,142,-23,-21,-66,-23,-114,-105,-157,-116,180,-106,-156,-73,-104,-115,-158,182,-44,-43,-49,-56,-42,-41,-48,209,-47,-57,-39,-37,-45,-40,-38,230,-171,-23,-181,245,-55,-22,-79,-170,-74,-180,-50,-51,-58,-82,-76,-60,-65,]),'ELSE':([3,5,10,14,33,41,43,45,51,53,54,55,56,58,59,61,62,64,66,67,68,69,71,73,74,75,76,77,78,79,80,81,82,83,84,97,124,126,127,152,158,159,187,197,206,217,218,219,220,221,226,227,235,238,240,241,244,261,263,266,271,294,299,301,302,316,318,320,331,],[-68,-70,-71,-69,-168,-169,-67,-83,-140,-137,-131,-100,-126,-141,-142,-93,-139,-101,-85,-134,-133,-66,-97,-132,-95,-84,-103,-138,-23,-128,-130,-72,-102,-129,-127,-73,-167,-207,-144,-99,223,-109,-171,-181,-166,265,-96,-86,-161,-207,-98,-94,-79,-170,-143,-74,-180,-89,265,-165,-135,-87,223,-82,-76,-88,-91,-136,-92,]),'DOWN':([3,5,10,14,33,41,43,45,48,51,53,54,55,56,58,59,61,62,64,66,67,68,69,71,73,74,75,76,77,78,79,80,81,82,83,84,97,152,159,187,197,201,218,219,226,227,235,238,241,244,271,283,294,301,302,308,316,320,326,],[-68,-70,-71,-69,-168,-169,-67,-83,-23,-140,-137,-131,-100,-126,-141,-142,-93,-139,-101,-85,-134,-133,-66,-97,-132,-95,-84,-103,-138,-23,-128,-130,-72,-102,-129,-127,-73,-99,-109,-171,-181,246,-96,-86,-98,-94,-79,-170,-74,-180,-135,310,-87,-82,-76,328,-88,-136,-202,]),'LOWER':([0,1,6,12,21,22,26,36,37,38,42,52,57,60,63,70,72,88,89,90,92,94,95,98,99,100,107,109,110,113,118,122,126,127,142,150,153,154,155,157,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,180,183,195,205,207,209,210,212,216,221,223,225,230,233,234,239,240,242,245,264,265,270,288,290,296,307,309,325,333,342,344,],[25,-6,25,-9,-5,-7,25,-8,25,25,25,25,25,-107,25,25,-108,-114,25,-105,-116,-155,-106,-104,-115,25,25,25,25,25,25,25,25,-144,25,-10,25,-112,-113,25,25,-125,-124,-123,25,-110,-122,-117,-120,-111,-121,-119,-118,25,-15,-154,-24,-28,25,25,25,25,25,25,25,25,25,25,25,25,25,-143,25,25,25,25,25,25,25,25,25,25,25,25,-30,-29,]),'LPAREN':([6,9,15,16,19,24,25,26,30,34,35,38,40,48,52,57,60,63,72,78,88,89,90,92,94,95,98,99,100,107,110,118,122,128,129,130,132,134,135,136,138,142,144,146,153,154,155,160,161,162,163,164,165,166,167,168,169,170,171,172,173,180,188,194,207,209,210,212,216,225,230,233,234,239,242,245,254,257,264,265,270,285,286,288,289,290,292,296,307,309,311,323,],[63,-178,-173,-172,-175,107,-176,63,-179,-174,-177,63,118,-23,63,63,-107,63,-108,118,-114,63,-105,-116,-155,-106,-104,-115,63,63,63,63,63,207,-44,-43,-49,-42,-46,-48,-47,63,-45,212,63,-112,-113,63,-125,-124,-123,63,-110,-122,-117,-120,-111,-121,-119,-118,63,-154,118,243,63,63,63,63,63,63,63,63,63,63,63,63,-46,212,63,63,63,-46,212,63,-50,63,-51,63,63,63,212,332,]),'EQUAL':([3,5,10,14,33,41,43,45,51,53,54,55,56,58,59,61,62,64,67,68,69,71,73,74,75,76,77,78,79,80,81,82,83,84,97,152,159,187,197,218,219,226,227,235,238,241,244,254,271,301,302,320,],[-68,-70,-71,-69,-168,-169,-67,-83,-140,-137,-131,-100,-126,-141,-142,-93,-139,-101,-134,-133,-66,-97,-132,-95,171,-103,-138,-23,-128,-130,-72,-102,-129,-127,-73,-99,-109,-171,-181,-96,-86,-98,-94,-79,-170,-74,-180,-66,-135,-82,-76,-136,]),'RETURNS':([305,],[323,]),'IN':([3,5,10,14,33,41,43,45,48,51,53,54,55,56,58,59,61,62,64,67,68,69,71,73,74,75,76,77,78,79,80,81,82,83,84,97,152,159,187,197,201,218,219,226,227,235,238,241,244,246,254,271,301,302,320,],[-68,-70,-71,-69,-168,-169,-67,-83,-23,-140,-137,-131,-100,-126,-141,-142,-93,-139,-101,-134,-133,-66,-97,-132,-95,161,-103,-138,-23,-128,-130,-72,-102,-129,-127,-73,-99,-109,-171,-181,247,-96,-86,-98,-94,-79,-170,-74,-180,284,-66,-135,-82,-76,-136,]),'INT':([46,48,49,85,131,182,210,215,247,280,284,290,291,332,],[138,-23,-21,138,138,138,138,-22,138,138,138,138,138,138,]),'END':([1,12,21,22,36,112,113,127,150,175,183,193,195,240,325,333,334,337,342,344,],[-6,-9,-5,-7,-8,-4,-207,-144,-10,-15,-24,-3,-28,-143,-207,-207,338,341,-30,-29,]),'EXIT':([0,1,12,21,22,36,37,42,109,113,126,127,150,157,175,183,195,205,221,223,240,325,333,342,344,],[23,-6,-9,-5,-7,-8,23,23,23,23,23,-144,-10,23,-15,-24,-28,23,23,23,-143,23,23,-30,-29,]),'REF':([46,48,49,85,131,182,215,280,291,332,],[131,-23,-21,131,131,131,-22,131,131,131,]),'LBRACKET':([3,5,10,14,17,31,33,39,40,41,43,45,51,53,54,56,58,59,62,64,67,68,69,73,76,77,78,79,80,81,83,84,97,139,147,159,187,188,197,219,235,238,241,244,254,271,301,302,320,],[-68,-70,-71,-69,89,110,-168,-72,-23,-169,-67,-83,-140,-137,-131,-126,-141,-142,-139,89,-134,-133,110,-132,173,-138,-23,-128,-130,-72,-129,-127,-73,210,213,89,-171,-23,-181,-86,-79,-170,-74,-180,110,-135,-82,-76,-136,]),'CHAR':([46,48,49,85,131,182,210,215,247,280,284,290,291,332,],[132,-23,-21,132,132,132,132,-22,132,132,132,132,132,132,]),'LENGTH':([0,1,6,12,21,22,26,36,37,38,42,52,57,60,63,70,72,88,89,90,92,94,95,98,99,100,107,109,110,113,118,122,126,127,142,150,153,154,155,157,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,180,183,195,205,207,209,210,212,216,221,223,225,230,233,234,239,240,242,245,264,265,270,288,290,296,307,309,325,333,342,344,],[35,-6,35,-9,-5,-7,35,-8,35,35,35,35,35,-107,35,35,-108,-114,35,-105,-116,-155,-106,-104,-115,35,35,35,35,35,35,35,35,-144,35,-10,35,-112,-113,35,35,-125,-124,-123,35,-110,-122,-117,-120,-111,-121,-119,-118,35,-15,-154,-24,-28,35,35,35,35,35,35,35,35,35,35,35,35,35,-143,35,35,35,35,35,35,35,35,35,35,35,35,-30,-29,]),'MODULO':([3,5,10,14,17,31,33,39,40,41,43,45,51,53,54,55,56,58,59,62,64,67,68,69,71,73,74,76,77,78,79,80,81,82,83,84,97,152,159,187,188,197,218,219,226,235,238,241,244,254,271,301,302,320,],[-68,-70,-71,-69,95,-66,-168,-72,-23,-169,-67,-83,-140,-137,-131,-100,-126,-141,-142,-139,-101,-134,-133,-66,-97,-132,95,-103,-138,-23,-128,-130,-72,-102,-129,-127,-73,-99,-109,-171,-23,-181,95,-86,-98,-79,-170,-74,-180,-66,-135,-82,-76,-136,]),'ICONST':([6,26,38,52,57,60,63,72,88,89,90,92,94,95,98,99,100,107,110,118,122,142,153,154,155,160,161,162,163,164,165,166,167,168,169,170,171,172,173,180,207,209,210,212,213,216,225,230,233,234,239,242,245,264,265,270,288,290,296,307,309,],[53,53,53,53,53,-107,53,-108,-114,53,-105,-116,-155,-106,-104,-115,53,53,53,53,53,53,53,-112,-113,53,-125,-124,-123,53,-110,-122,-117,-120,-111,-121,-119,-118,53,-154,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'AND':([3,5,10,14,33,41,43,45,51,53,54,55,56,58,59,61,62,64,67,68,69,71,73,74,75,76,77,78,79,80,81,82,83,84,97,152,159,187,197,218,219,226,227,235,238,241,244,254,271,301,302,320,],[-68,-70,-71,-69,-168,-169,-67,-83,-140,-137,-131,-100,-126,-141,-142,-93,-139,-101,-134,-133,-66,-97,-132,-95,167,-103,-138,-23,-128,-130,-72,-102,-129,-127,-73,-99,-109,-171,-181,-96,-86,-98,-94,-79,-170,-74,-180,-66,-135,-82,-76,-136,]),'ARROW':([3,5,6,10,14,17,26,31,33,38,39,40,41,43,45,52,57,60,63,64,69,72,78,81,88,89,90,92,94,95,97,98,99,100,107,110,118,122,142,153,154,155,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,180,187,188,197,207,209,210,212,216,225,230,233,234,235,238,239,241,242,244,245,254,264,265,270,288,290,296,301,302,307,309,],[-68,-70,70,-71,-69,97,70,-66,-168,70,-72,-23,-169,-67,-83,70,70,-107,70,97,-66,-108,-23,-72,-114,70,-105,-116,-155,-106,-73,-104,-115,70,70,70,70,70,70,70,-112,-113,97,70,-125,-124,-123,70,-110,-122,-117,-120,-111,-121,-119,-118,70,-154,-171,-23,-181,70,70,70,70,70,70,70,70,70,-79,-170,70,-74,70,-180,70,-66,70,70,70,70,70,70,-82,-76,70,70,]),'TIMES':([3,5,10,14,17,31,33,39,40,41,43,45,51,53,54,55,56,58,59,62,64,67,68,69,71,73,74,76,77,78,79,80,81,82,83,84,97,152,159,187,188,197,218,219,226,235,238,241,244,254,271,301,302,320,],[-68,-70,-71,-69,98,-66,-168,-72,-23,-169,-67,-83,-140,-137,-131,-100,-126,-141,-142,-139,-101,-134,-133,-66,-97,-132,98,-103,-138,-23,-128,-130,-72,-102,-129,-127,-73,-99,-109,-171,-23,-181,98,-86,-98,-79,-170,-74,-180,-66,-135,-82,-76,-136,]),'NOT':([6,26,38,52,63,88,89,90,92,94,95,98,99,100,107,110,118,122,142,153,154,155,160,161,162,163,164,165,166,167,168,169,170,171,172,173,180,207,209,210,212,216,225,230,233,234,239,242,245,264,265,270,288,290,296,307,309,],[72,72,72,72,72,-114,72,-105,-116,-155,-106,-104,-115,72,72,72,72,72,72,72,-112,-113,72,-125,-124,-123,72,-110,-122,-117,-120,-111,-121,-119,-118,72,-154,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'FALSE':([6,26,38,52,57,60,63,72,88,89,90,92,94,95,98,99,100,107,110,118,122,142,153,154,155,160,161,162,163,164,165,166,167,168,169,170,171,172,173,180,207,209,210,212,216,225,230,233,234,239,242,245,264,265,270,288,290,296,307,309,],[62,62,62,62,62,-107,62,-108,-114,62,-105,-116,-155,-106,-104,-115,62,62,62,62,62,62,62,-112,-113,62,-125,-124,-123,62,-110,-122,-117,-120,-111,-121,-119,-118,62,-154,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'TYPE':([0,1,12,21,22,36,37,113,127,150,175,183,195,240,325,333,342,344,],[18,-6,-9,-5,-7,-8,18,18,-144,-10,-15,-24,-28,-143,18,18,-30,-29,]),'NUM':([0,1,6,12,21,22,26,36,37,38,42,52,57,60,63,70,72,88,89,90,92,94,95,98,99,100,107,109,110,113,118,122,126,127,142,150,153,154,155,157,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,180,183,195,205,207,209,210,212,216,221,223,225,230,233,234,239,240,242,245,264,265,270,288,290,296,307,309,325,333,342,344,],[34,-6,34,-9,-5,-7,34,-8,34,34,34,34,34,-107,34,34,-108,-114,34,-105,-116,-155,-106,-104,-115,34,34,34,34,34,34,34,34,-144,34,-10,34,-112,-113,34,34,-125,-124,-123,34,-110,-122,-117,-120,-111,-121,-119,-118,34,-15,-154,-24,-28,34,34,34,34,34,34,34,34,34,34,34,34,34,-143,34,34,34,34,34,34,34,34,34,34,34,34,-30,-29,]),'TRUE':([6,26,38,52,57,60,63,72,88,89,90,92,94,95,98,99,100,107,110,118,122,142,153,154,155,160,161,162,163,164,165,166,167,168,169,170,171,172,173,180,207,209,210,212,216,225,230,233,234,239,242,245,264,265,270,288,290,296,307,309,],[77,77,77,77,77,-107,77,-108,-114,77,-105,-116,-155,-106,-104,-115,77,77,77,77,77,77,77,-112,-113,77,-125,-124,-123,77,-110,-122,-117,-120,-111,-121,-119,-118,77,-154,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'THEN':([3,5,10,14,33,41,43,45,51,53,54,55,56,58,59,61,62,64,65,66,67,68,69,71,73,74,75,76,77,78,79,80,81,82,83,84,97,151,152,159,187,197,218,219,226,227,235,238,241,244,269,271,294,297,301,302,316,317,320,],[-68,-70,-71,-69,-168,-169,-67,-83,-140,-137,-131,-100,-126,-141,-142,-93,-139,-101,157,-85,-134,-133,-66,-97,-132,-95,-84,-103,-138,-23,-128,-130,-72,-102,-129,-127,-73,216,-99,-109,-171,-181,-96,-86,-98,-94,-79,-170,-74,-180,157,-135,-87,216,-82,-76,-88,216,-136,]),'CONCAT':([3,5,10,14,17,31,33,39,40,41,43,45,51,53,54,55,56,58,59,61,62,64,67,68,69,71,73,74,76,77,78,79,80,81,82,83,84,97,152,159,187,188,197,218,219,226,227,235,238,241,244,254,271,301,302,320,],[-68,-70,-71,-69,92,-66,-168,-72,-23,-169,-67,-83,-140,-137,-131,-100,-126,-141,-142,92,-139,-101,-134,-133,-66,-97,-132,-95,-103,-138,-23,-128,-130,-72,-102,-129,-127,-73,-99,-109,-171,-23,-181,-96,-86,-98,92,-79,-170,-74,-180,-66,-135,-82,-76,-136,]),'ID':([0,1,2,6,8,12,18,21,22,23,26,36,37,38,42,46,48,49,52,57,60,63,70,72,85,88,89,90,92,94,95,98,99,100,107,109,110,113,118,119,122,126,127,131,142,148,149,150,153,154,155,157,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,176,180,182,183,184,195,205,207,209,210,212,215,216,221,223,225,230,233,234,239,240,242,243,245,247,264,265,270,280,284,288,290,291,296,304,307,309,325,332,333,342,344,],[40,-6,48,78,48,-9,48,-5,-7,106,78,-8,40,78,78,48,-23,-21,78,78,-107,78,78,-108,48,-114,78,-105,-116,-155,-106,-104,-115,78,78,188,78,40,78,48,78,78,-144,48,78,48,48,-10,78,-112,-113,78,78,-125,-124,-123,78,-110,-122,-117,-120,-111,-121,-119,-118,78,-15,48,-154,48,-24,48,-28,78,78,78,78,78,-22,78,78,78,78,78,78,78,78,-143,78,48,78,48,78,78,78,48,48,78,78,48,78,48,78,78,40,48,40,-30,-29,]),'TO':([3,5,10,14,33,41,43,45,51,53,54,55,56,58,59,61,62,64,66,67,68,69,71,73,74,75,76,77,78,79,80,81,82,83,84,97,152,159,187,197,218,219,226,227,235,238,241,244,271,283,294,301,302,308,310,316,320,326,328,],[-68,-70,-71,-69,-168,-169,-67,-83,-140,-137,-131,-100,-126,-141,-142,-93,-139,-101,-85,-134,-133,-66,-97,-132,-95,-84,-103,-138,-23,-128,-130,-72,-102,-129,-127,-73,-99,-109,-171,-181,-96,-86,-98,-94,-79,-170,-74,-180,-135,309,-87,-82,-76,309,309,-88,-136,-202,309,]),'ELSIF':([3,5,10,14,33,41,43,45,51,53,54,55,56,58,59,61,62,64,66,67,68,69,71,73,74,75,76,77,78,79,80,81,82,83,84,97,124,126,127,152,158,159,187,197,206,217,218,219,220,221,226,227,235,238,240,241,244,261,263,266,271,294,299,301,302,316,318,320,331,],[-68,-70,-71,-69,-168,-169,-67,-83,-140,-137,-131,-100,-126,-141,-142,-93,-139,-101,-85,-134,-133,-66,-97,-132,-95,-84,-103,-138,-23,-128,-130,-72,-102,-129,-127,-73,-167,-207,-144,-99,225,-109,-171,-181,-166,264,-96,-86,-161,-207,-98,-94,-79,-170,-143,-74,-180,-89,296,-165,-135,-87,225,-82,-76,-88,-91,-136,-92,]),'CHARS':([46,48,49,85,131,182,215,280,291,332,],[147,-23,-21,147,147,147,-22,147,147,147,]),'$end':([1,12,13,21,22,27,36,37,111,112,113,127,150,175,183,193,195,240,342,344,],[-6,-9,-1,-5,-7,0,-8,-207,-2,-4,-207,-144,-10,-15,-24,-3,-28,-143,-30,-29,]),'RESULT':([0,1,12,21,22,36,37,42,109,113,126,127,150,157,175,183,195,205,221,223,240,325,333,342,344,],[26,-6,-9,-5,-7,-8,26,26,26,26,26,-144,-10,26,-15,-24,-28,26,26,26,-143,26,26,-30,-29,]),'COMMA':([3,5,10,14,33,41,43,45,47,48,49,51,53,54,55,56,58,59,61,62,64,66,67,68,69,71,73,74,75,76,77,78,79,80,81,82,83,84,87,97,104,129,130,132,133,134,135,136,138,140,141,143,144,145,146,152,159,174,178,186,187,197,208,211,218,219,226,227,228,231,235,236,238,241,244,252,253,255,257,271,272,273,275,281,289,292,293,294,301,302,303,312,314,315,316,320,321,],[-68,-70,-71,-69,-168,-169,-67,-83,148,-23,149,-140,-137,-131,-100,-126,-141,-142,-93,-139,-101,-85,-134,-133,-66,-97,-132,-95,-84,-103,-138,-23,-128,-130,-72,-102,-129,-127,176,-73,184,-44,-43,-49,-56,-42,-41,-48,-47,-57,-39,-37,-45,-40,-38,-99,-109,-19,234,239,-171,-181,-55,-14,-96,-86,-98,-94,234,-18,-79,-27,-170,-74,-180,-13,290,-64,-63,-135,-20,-54,234,304,-50,-51,-58,-87,-82,-76,-34,-52,-60,-65,-88,-136,-33,]),'GTEQUAL':([3,5,10,14,33,41,43,45,51,53,54,55,56,58,59,61,62,64,67,68,69,71,73,74,75,76,77,78,79,80,81,82,83,84,97,152,159,187,197,218,219,226,227,235,238,241,244,254,271,301,302,320,],[-68,-70,-71,-69,-168,-169,-67,-83,-140,-137,-131,-100,-126,-141,-142,-93,-139,-101,-134,-133,-66,-97,-132,-95,166,-103,-138,-23,-128,-130,-72,-102,-129,-127,-73,-99,-109,-171,-181,-96,-86,-98,-94,-79,-170,-74,-180,-66,-135,-82,-76,-136,]),'LESS':([3,5,10,14,33,41,43,45,51,53,54,55,56,58,59,61,62,64,67,68,69,71,73,74,75,76,77,78,79,80,81,82,83,84,97,152,159,187,197,218,219,226,227,235,238,241,244,254,271,301,302,320,],[-68,-70,-71,-69,-168,-169,-67,-83,-140,-137,-131,-100,-126,-141,-142,-93,-139,-101,-134,-133,-66,-97,-132,-95,163,-103,-138,-23,-128,-130,-72,-102,-129,-127,-73,-99,-109,-171,-181,-96,-86,-98,-94,-79,-170,-74,-180,-66,-135,-82,-76,-136,]),'NULL':([6,26,38,52,57,60,63,72,88,89,90,92,94,95,98,99,100,107,110,118,122,142,153,154,155,160,161,162,163,164,165,166,167,168,169,170,171,172,173,180,207,209,210,212,216,225,230,233,234,239,242,245,264,265,270,288,290,296,307,309,],[58,58,58,58,58,-107,58,-108,-114,58,-105,-116,-155,-106,-104,-115,58,58,58,58,58,58,58,-112,-113,58,-125,-124,-123,58,-110,-122,-117,-120,-111,-121,-119,-118,58,-154,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'UPPER':([0,1,6,12,21,22,26,36,37,38,42,52,57,60,63,70,72,88,89,90,92,94,95,98,99,100,107,109,110,113,118,122,126,127,142,150,153,154,155,157,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,180,183,195,205,207,209,210,212,216,221,223,225,230,233,234,239,240,242,245,264,265,270,288,290,296,307,309,325,333,342,344,],[19,-6,19,-9,-5,-7,19,-8,19,19,19,19,19,-107,19,19,-108,-114,19,-105,-116,-155,-106,-104,-115,19,19,19,19,19,19,19,19,-144,19,-10,19,-112,-113,19,19,-125,-124,-123,19,-110,-122,-117,-120,-111,-121,-119,-118,19,-15,-154,-24,-28,19,19,19,19,19,19,19,19,19,19,19,19,19,-143,19,19,19,19,19,19,19,19,19,19,19,19,-30,-29,]),'DO':([0,1,12,21,22,36,37,42,109,113,126,127,150,157,175,183,195,205,221,223,240,325,333,342,344,],[42,-6,-9,-5,-7,-8,42,42,42,42,42,-144,-10,42,-15,-24,-28,42,42,42,-143,42,42,-30,-29,]),'LOC':([48,129,130,132,133,134,135,136,138,140,141,143,144,145,146,208,289,292,293,303,314,315,336,],[-23,-44,-43,-49,-56,-42,-41,-48,-47,-57,-39,-37,-45,-40,-38,-55,-50,-51,-58,321,-60,-65,340,]),'GREATER':([3,5,10,14,33,41,43,45,51,53,54,55,56,58,59,61,62,64,67,68,69,71,73,74,75,76,77,78,79,80,81,82,83,84,97,152,159,187,197,218,219,226,227,235,238,241,244,254,271,301,302,320,],[-68,-70,-71,-69,-168,-169,-67,-83,-140,-137,-131,-100,-126,-141,-142,-93,-139,-101,-134,-133,-66,-97,-132,-95,170,-103,-138,-23,-128,-130,-72,-102,-129,-127,-73,-99,-109,-171,-181,-96,-86,-98,-94,-79,-170,-74,-180,-66,-135,-82,-76,-136,]),'ARRAY':([46,48,49,85,131,182,215,280,291,332,],[139,-23,-21,139,139,139,-22,139,139,139,]),'OR':([3,5,10,14,33,41,43,45,51,53,54,55,56,58,59,61,62,64,67,68,69,71,73,74,75,76,77,78,79,80,81,82,83,84,97,152,159,187,197,218,219,226,227,235,238,241,244,254,271,301,302,320,],[-68,-70,-71,-69,-168,-169,-67,-83,-140,-137,-131,-100,-126,-141,-142,-93,-139,-101,-134,-133,-66,-97,-132,-95,172,-103,-138,-23,-128,-130,-72,-102,-129,-127,-73,-99,-109,-171,-181,-96,-86,-98,-94,-79,-170,-74,-180,-66,-135,-82,-76,-136,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'else_expression':([217,263,],[262,295,]),'array_element':([0,6,26,37,38,42,52,57,63,70,89,100,107,109,110,113,118,122,126,142,153,157,160,164,173,205,207,209,210,212,216,221,223,225,230,233,234,239,242,245,264,265,270,288,290,296,307,309,325,333,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'string_element':([0,6,26,37,38,42,52,57,63,70,89,100,107,109,110,113,118,122,126,142,153,157,160,164,173,205,207,209,210,212,216,221,223,225,230,233,234,239,242,245,264,265,270,288,290,296,307,309,325,333,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'arithmetic_multiplicative_operator':([17,74,218,],[91,160,160,]),'discrete_mode_name':([46,85,131,182,210,247,280,284,290,291,332,],[128,128,128,128,128,128,128,128,128,128,128,]),'end_value':([283,308,310,328,],[306,327,330,335,]),'else_clause':([158,299,],[224,319,]),'operand4':([6,26,38,52,57,63,89,100,107,110,118,122,142,153,160,164,173,207,209,210,212,216,225,230,233,234,239,242,245,264,265,270,288,290,296,307,309,],[55,55,55,55,152,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'exit_action':([0,37,42,109,113,126,157,205,221,223,325,333,],[7,7,7,7,7,7,7,7,7,7,7,7,]),'lower_bound':([89,207,210,212,290,],[177,249,249,249,249,]),'boolean_literal':([6,26,38,52,57,63,89,100,107,110,118,122,142,153,160,164,173,207,209,210,212,216,225,230,233,234,239,242,245,264,265,270,288,290,296,307,309,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'parameter_list':([107,118,239,],[185,196,277,]),'literal':([6,26,38,52,57,63,89,100,107,110,118,122,142,153,160,164,173,207,209,210,212,216,225,230,233,234,239,242,245,264,265,270,288,290,296,307,309,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'result_spec':([305,],[324,]),'do_action':([0,37,42,109,113,126,157,205,221,223,325,333,],[11,11,11,11,11,11,11,11,11,11,11,11,]),'literal_range':([207,210,212,290,],[251,255,258,255,]),'for_control':([42,],[120,]),'element_mode':([291,],[314,]),'statement_list':([0,],[13,]),'operand1':([6,26,38,52,63,89,100,107,110,118,122,142,164,173,207,209,210,212,216,225,230,233,234,239,242,245,264,265,270,288,290,296,307,309,],[61,61,61,61,61,61,61,61,61,61,61,61,227,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'synonym_list':([2,148,],[50,214,]),'index_mode':([210,290,],[253,253,]),'expression':([6,26,38,52,63,89,100,107,110,118,122,142,173,207,209,210,212,216,225,230,233,234,239,242,245,264,265,270,288,290,296,307,309,],[65,108,116,151,156,178,181,186,190,186,203,211,228,250,252,250,250,261,269,272,273,275,186,278,283,297,298,300,273,250,317,326,329,]),'right_element':([242,],[279,]),'assigning_operator':([17,],[100,]),'label_id':([23,],[105,]),'assignment_action':([0,37,42,109,113,126,157,205,221,223,325,333,],[20,20,20,20,20,20,20,20,20,20,20,20,]),'declaration_statement':([0,37,113,325,333,],[21,21,21,21,21,]),'identifier_list':([2,8,18,148,149,176,184,243,304,],[46,85,102,46,215,85,102,280,280,]),'newmode_statement':([0,37,113,325,333,],[22,22,22,22,22,]),'string_slice':([0,6,26,37,38,42,52,57,63,70,89,100,107,109,110,113,118,122,126,142,153,157,160,164,173,205,207,209,210,212,216,221,223,225,230,233,234,239,242,245,264,265,270,288,290,296,307,309,325,333,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'empty':([37,38,42,113,126,205,221,325,333,],[112,114,124,112,124,124,124,112,112,]),'boolean_mode':([46,85,131,182,210,247,280,284,290,291,332,],[130,130,130,130,130,130,130,130,130,130,130,]),'composite_mode':([46,85,131,182,280,291,332,],[145,145,145,145,145,145,145,]),'action_statement_list':([157,223,],[220,267,]),'range_enumeration':([119,],[198,]),'relational_operator':([75,],[165,]),'empty_literal':([6,26,38,52,57,63,89,100,107,110,118,122,142,153,160,164,173,207,209,210,212,216,225,230,233,234,239,242,245,264,265,270,288,290,296,307,309,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'elsif_expression':([217,],[263,]),'if_action':([0,37,42,109,113,126,157,205,221,223,325,333,],[29,29,29,29,29,29,29,29,29,29,29,29,]),'integer_mode':([46,85,131,182,210,247,280,284,290,291,332,],[134,134,134,134,134,134,134,134,134,134,134,]),'identifier':([0,2,6,8,18,26,37,38,42,46,52,57,63,70,85,89,100,107,109,110,113,118,119,122,126,131,142,148,149,153,157,160,164,173,176,182,184,205,207,209,210,212,216,221,223,225,230,233,234,239,242,243,245,247,264,265,270,280,284,288,290,291,296,304,307,309,325,332,333,],[31,49,69,49,49,69,31,69,31,135,69,69,69,69,135,69,69,69,69,69,31,69,201,69,31,135,69,49,49,69,31,69,69,69,49,135,49,31,69,69,254,69,69,31,31,69,69,69,69,69,69,49,69,285,69,69,69,135,285,69,254,135,69,49,69,69,31,135,31,]),'operand3':([6,26,38,52,63,89,100,107,110,118,122,142,153,160,164,173,207,209,210,212,216,225,230,233,234,239,242,245,264,265,270,288,290,296,307,309,],[71,71,71,71,71,71,71,71,71,71,71,71,71,226,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'start_element':([110,],[191,]),'formal_parameter_list':([243,304,],[282,322,]),'character_literal':([6,26,38,52,57,63,89,100,107,110,118,122,142,153,160,164,173,207,209,210,212,216,225,230,233,234,239,242,245,264,265,270,288,290,296,307,309,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'mode_definition':([18,184,],[104,104,]),'action_statement':([0,37,42,113,126,157,205,221,223,325,333,],[36,36,126,36,126,221,126,126,221,36,36,]),'reference_mode':([46,85,131,182,280,291,332,],[141,141,141,141,141,141,141,]),'parenthesized_expression':([6,26,38,52,57,63,89,100,107,110,118,122,142,153,160,164,173,207,209,210,212,216,225,230,233,234,239,242,245,264,265,270,288,290,296,307,309,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'expression_list':([89,173,234,],[179,229,276,]),'closed_dyadic_operator':([17,],[93,]),'index_mode_list':([210,290,],[256,313,]),'operand0':([6,26,38,52,63,89,100,107,110,118,122,142,173,207,209,210,212,216,225,230,233,234,239,242,245,264,265,270,288,290,296,307,309,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'discrete_mode':([46,85,131,182,210,247,280,284,290,291,332,],[146,146,146,146,257,286,146,311,257,146,146,]),'value_array_element':([6,26,38,52,57,63,89,100,107,110,118,122,142,153,160,164,173,207,209,210,212,216,225,230,233,234,239,242,245,264,265,270,288,290,296,307,309,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'step_value':([283,],[308,]),'synonym_statement':([0,37,113,325,333,],[1,1,1,1,1,]),'procedure_definition':([117,],[195,]),'string_length':([213,],[259,]),'bracketed_action':([0,37,42,109,113,126,157,205,221,223,325,333,],[4,4,4,4,4,4,4,4,4,4,4,4,]),'value_array_slice':([6,26,38,52,57,63,89,100,107,110,118,122,142,153,160,164,173,207,209,210,212,216,225,230,233,234,239,242,245,264,265,270,288,290,296,307,309,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'operator1':([75,],[164,]),'array_slice':([0,6,26,37,38,42,52,57,63,70,89,100,107,109,110,113,118,122,126,142,153,157,160,164,173,205,207,209,210,212,216,221,223,225,230,233,234,239,242,245,264,265,270,288,290,296,307,309,325,333,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'monadic_operator':([6,26,38,52,63,89,100,107,110,118,122,142,153,160,164,173,207,209,210,212,216,225,230,233,234,239,242,245,264,265,270,288,290,296,307,309,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'statement_nullable':([37,113,325,333,],[111,193,334,337,]),'procedure_statement':([0,37,113,325,333,],[12,12,12,12,12,]),'mode':([46,85,131,182,280,291,332,],[137,174,208,236,303,315,336,]),'iteration':([119,],[200,]),'while_control':([42,120,],[121,202,]),'builtin_name':([0,6,26,37,38,42,52,57,63,70,89,100,107,109,110,113,118,122,126,142,153,157,160,164,173,205,207,209,210,212,216,221,223,225,230,233,234,239,242,245,264,265,270,288,290,296,307,309,325,333,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'array_location':([0,6,26,37,38,42,52,57,63,70,89,100,107,109,110,113,118,122,126,142,153,157,160,164,173,205,207,209,210,212,216,221,223,225,230,233,234,239,242,245,264,265,270,288,290,296,307,309,325,333,],[17,64,64,17,64,17,64,64,64,159,64,64,64,17,64,17,64,64,17,64,64,17,64,64,64,17,64,64,64,64,64,17,17,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,17,17,]),'conditional_expression':([6,26,38,52,63,89,100,107,110,118,122,142,173,207,209,210,212,216,225,230,233,234,239,242,245,264,265,270,288,290,296,307,309,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'declaration_list':([8,176,],[86,232,]),'declaration':([8,176,],[87,87,]),'operator2':([61,227,],[153,153,]),'action_statement_nullable':([42,126,205,221,],[123,206,248,266,]),'step_enumeration':([119,],[199,]),'character_mode':([46,85,131,182,210,247,280,284,290,291,332,],[129,129,129,129,129,129,129,129,129,129,129,]),'program':([0,],[27,]),'return_action':([0,37,42,109,113,126,157,205,221,223,325,333,],[28,28,28,28,28,28,28,28,28,28,28,28,]),'character_string_literal':([6,26,38,52,57,63,89,100,107,110,118,122,142,153,160,164,173,207,209,210,212,216,225,230,233,234,239,242,245,264,265,270,288,290,296,307,309,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'builtin_call':([0,6,26,37,38,42,52,57,63,70,89,100,107,109,110,113,118,122,126,142,153,157,160,164,173,205,207,209,210,212,216,221,223,225,230,233,234,239,242,245,264,265,270,288,290,296,307,309,325,333,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'result':([38,],[115,]),'referenced_location':([6,26,38,52,57,63,89,100,107,110,118,122,142,153,160,164,173,207,209,210,212,216,225,230,233,234,239,242,245,264,265,270,288,290,296,307,309,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'then_clause':([65,269,],[158,299,]),'result_action':([0,37,42,109,113,126,157,205,221,223,325,333,],[32,32,32,32,32,32,32,32,32,32,32,32,]),'synonym_definition':([2,148,],[47,47,]),'operand2':([6,26,38,52,63,89,100,107,110,118,122,142,153,164,173,207,209,210,212,216,225,230,233,234,239,242,245,264,265,270,288,290,296,307,309,],[74,74,74,74,74,74,74,74,74,74,74,74,218,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'procedure_call':([0,6,26,37,38,42,52,57,63,70,89,100,107,109,110,113,118,122,126,142,153,157,160,164,173,205,207,209,210,212,216,221,223,225,230,233,234,239,242,245,264,265,270,288,290,296,307,309,325,333,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'string_mode':([46,85,131,182,280,291,332,],[133,133,133,133,133,133,133,]),'primitive_value':([6,26,38,52,57,63,89,100,107,110,118,122,142,153,160,164,173,207,209,210,212,216,225,230,233,234,239,242,245,264,265,270,288,290,296,307,309,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'left_element':([110,],[192,]),'initialization':([174,],[231,]),'statement':([0,37,113,325,333,],[37,113,113,113,113,]),'array_mode':([46,85,131,182,280,291,332,],[140,140,140,140,140,140,140,]),'formal_parameter':([243,304,],[281,281,]),'integer_literal':([6,26,38,52,57,63,89,100,107,110,118,122,142,153,160,164,173,207,209,210,212,213,216,225,230,233,234,239,242,245,264,265,270,288,290,296,307,309,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,260,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'call_action':([0,6,26,37,38,42,52,57,63,70,89,100,107,109,110,113,118,122,126,142,153,157,160,164,173,205,207,209,210,212,216,221,223,225,230,233,234,239,242,245,264,265,270,288,290,296,307,309,325,333,],[39,81,81,39,81,39,81,81,81,81,81,81,81,39,81,39,81,81,39,81,81,39,81,81,81,39,81,81,81,81,81,39,39,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,39,39,]),'mode_name':([46,85,131,182,280,291,332,],[143,143,143,143,143,143,143,]),'newmode_list':([18,184,],[103,237,]),'arithmetic_additive_operator':([17,61,227,],[96,154,154,]),'discrete_range_mode':([46,85,131,182,210,247,280,284,290,291,332,],[144,144,144,144,144,144,144,144,144,144,144,]),'upper_bound':([233,288,],[274,312,]),'control_part':([42,],[125,]),'membership_operator':([75,],[169,]),'dereferenced_reference':([0,6,26,37,38,42,52,57,63,70,89,100,107,109,110,113,118,122,126,142,153,157,160,164,173,205,207,209,210,212,216,221,223,225,230,233,234,239,242,245,264,265,270,288,290,296,307,309,325,333,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'action':([0,37,42,109,113,126,157,205,221,223,325,333,],[44,44,44,189,44,44,44,44,44,44,44,44,]),'location':([0,6,26,37,38,42,52,57,63,70,89,100,107,109,110,113,118,122,126,142,153,157,160,164,173,205,207,209,210,212,216,221,223,225,230,233,234,239,242,245,264,265,270,288,290,296,307,309,325,333,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'then_expression':([151,297,317,],[217,318,331,]),'string_concatenation_operator':([17,61,227,],[101,155,155,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','Parser.py',63),
  ('statement_list -> statement statement_nullable','statement_list',2,'p_statement_list','Parser.py',67),
  ('statement_nullable -> statement statement_nullable','statement_nullable',2,'p_statement_nullable','Parser.py',79),
  ('statement_nullable -> empty','statement_nullable',1,'p_statement_nullable','Parser.py',80),
  ('statement -> declaration_statement','statement',1,'p_statement','Parser.py',92),
  ('statement -> synonym_statement','statement',1,'p_statement','Parser.py',93),
  ('statement -> newmode_statement','statement',1,'p_statement','Parser.py',94),
  ('statement -> action_statement','statement',1,'p_statement','Parser.py',95),
  ('statement -> procedure_statement','statement',1,'p_statement','Parser.py',96),
  ('synonym_statement -> SYN synonym_list SEMI','synonym_statement',3,'p_synonym_statement','Parser.py',105),
  ('synonym_list -> synonym_definition','synonym_list',1,'p_synonym_list','Parser.py',109),
  ('synonym_list -> synonym_definition COMMA synonym_list','synonym_list',3,'p_synonym_list','Parser.py',110),
  ('synonym_definition -> identifier_list mode ASSIGN expression','synonym_definition',4,'p_synonym_definition','Parser.py',119),
  ('synonym_definition -> identifier_list ASSIGN expression','synonym_definition',3,'p_synonym_definition','Parser.py',120),
  ('declaration_statement -> DCL declaration_list SEMI','declaration_statement',3,'p_declaration_statement','Parser.py',134),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','Parser.py',138),
  ('declaration_list -> declaration COMMA declaration_list','declaration_list',3,'p_declaration_list','Parser.py',139),
  ('declaration -> identifier_list mode initialization','declaration',3,'p_declaration','Parser.py',147),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','Parser.py',148),
  ('initialization -> ASSIGN expression','initialization',2,'p_initialization','Parser.py',152),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','Parser.py',156),
  ('identifier_list -> identifier COMMA identifier_list','identifier_list',3,'p_identifier_list','Parser.py',157),
  ('identifier -> ID','identifier',1,'p_identifier','Parser.py',166),
  ('newmode_statement -> TYPE newmode_list SEMI','newmode_statement',3,'p_newmode_statement','Parser.py',176),
  ('newmode_list -> mode_definition','newmode_list',1,'p_newmode_list','Parser.py',180),
  ('newmode_list -> mode_definition COMMA newmode_list','newmode_list',3,'p_newmode_list','Parser.py',181),
  ('mode_definition -> identifier_list ASSIGN mode','mode_definition',3,'p_mode_definition','Parser.py',190),
  ('procedure_statement -> ID COLON procedure_definition','procedure_statement',3,'p_procedure_statement','Parser.py',201),
  ('procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI','procedure_definition',9,'p_procedure_definition','Parser.py',205),
  ('procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI','procedure_definition',8,'p_procedure_definition','Parser.py',206),
  ('formal_parameter_list -> formal_parameter','formal_parameter_list',1,'p_formal_parameter_list','Parser.py',210),
  ('formal_parameter_list -> formal_parameter COMMA formal_parameter_list','formal_parameter_list',3,'p_formal_parameter_list','Parser.py',211),
  ('formal_parameter -> identifier_list mode LOC','formal_parameter',3,'p_formal_parameter','Parser.py',220),
  ('formal_parameter -> identifier_list mode','formal_parameter',2,'p_formal_parameter','Parser.py',221),
  ('result_spec -> RETURNS LPAREN mode LOC RPAREN','result_spec',5,'p_result_spec','Parser.py',227),
  ('result_spec -> RETURNS LPAREN mode RPAREN','result_spec',4,'p_result_spec','Parser.py',228),
  ('mode -> mode_name','mode',1,'p_mode','Parser.py',233),
  ('mode -> discrete_mode','mode',1,'p_mode','Parser.py',234),
  ('mode -> reference_mode','mode',1,'p_mode','Parser.py',235),
  ('mode -> composite_mode','mode',1,'p_mode','Parser.py',236),
  ('mode_name -> identifier','mode_name',1,'p_mode_name','Parser.py',240),
  ('discrete_mode -> integer_mode','discrete_mode',1,'p_discrete_mode','Parser.py',248),
  ('discrete_mode -> boolean_mode','discrete_mode',1,'p_discrete_mode','Parser.py',249),
  ('discrete_mode -> character_mode','discrete_mode',1,'p_discrete_mode','Parser.py',250),
  ('discrete_mode -> discrete_range_mode','discrete_mode',1,'p_discrete_mode','Parser.py',251),
  ('discrete_mode_name -> identifier','discrete_mode_name',1,'p_discrete_mode_name','Parser.py',255),
  ('integer_mode -> INT','integer_mode',1,'p_integer_mode','Parser.py',259),
  ('boolean_mode -> BOOL','boolean_mode',1,'p_boolean_mode','Parser.py',263),
  ('character_mode -> CHAR','character_mode',1,'p_character_mode','Parser.py',267),
  ('discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','Parser.py',276),
  ('discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','Parser.py',277),
  ('literal_range -> lower_bound COLON upper_bound','literal_range',3,'p_literal_range','Parser.py',281),
  ('lower_bound -> expression','lower_bound',1,'p_lower_bound','Parser.py',285),
  ('upper_bound -> expression','upper_bound',1,'p_upper_bound','Parser.py',289),
  ('reference_mode -> REF mode','reference_mode',2,'p_reference_mode','Parser.py',296),
  ('composite_mode -> string_mode','composite_mode',1,'p_composite_mode','Parser.py',303),
  ('composite_mode -> array_mode','composite_mode',1,'p_composite_mode','Parser.py',304),
  ('string_mode -> CHARS LBRACKET string_length RBRACKET','string_mode',4,'p_string_mode','Parser.py',308),
  ('string_length -> integer_literal','string_length',1,'p_string_length','Parser.py',312),
  ('array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode','array_mode',5,'p_array_mode','Parser.py',316),
  ('index_mode_list -> index_mode','index_mode_list',1,'p_index_mode_list','Parser.py',320),
  ('index_mode_list -> index_mode COMMA index_mode_list','index_mode_list',3,'p_index_mode_list','Parser.py',321),
  ('index_mode -> discrete_mode','index_mode',1,'p_index_mode','Parser.py',330),
  ('index_mode -> literal_range','index_mode',1,'p_index_mode','Parser.py',331),
  ('element_mode -> mode','element_mode',1,'p_element_mode','Parser.py',335),
  ('location -> identifier','location',1,'p_location','Parser.py',346),
  ('location -> dereferenced_reference','location',1,'p_location','Parser.py',347),
  ('location -> string_element','location',1,'p_location','Parser.py',348),
  ('location -> string_slice','location',1,'p_location','Parser.py',349),
  ('location -> array_element','location',1,'p_location','Parser.py',350),
  ('location -> array_slice','location',1,'p_location','Parser.py',351),
  ('location -> call_action','location',1,'p_location','Parser.py',352),
  ('dereferenced_reference -> array_location ARROW','dereferenced_reference',2,'p_dereferenced_reference','Parser.py',356),
  ('string_element -> identifier LBRACKET start_element RBRACKET','string_element',4,'p_string_element','Parser.py',360),
  ('start_element -> expression','start_element',1,'p_start_element','Parser.py',364),
  ('string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET','string_slice',6,'p_string_slice','Parser.py',368),
  ('left_element -> expression','left_element',1,'p_left_element','Parser.py',372),
  ('right_element -> expression','right_element',1,'p_right_element','Parser.py',376),
  ('array_element -> array_location LBRACKET expression_list RBRACKET','array_element',4,'p_array_element','Parser.py',380),
  ('expression_list -> expression','expression_list',1,'p_expression_list','Parser.py',384),
  ('expression_list -> expression COMMA expression_list','expression_list',3,'p_expression_list','Parser.py',385),
  ('array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET','array_slice',6,'p_array_slice','Parser.py',392),
  ('array_location -> location','array_location',1,'p_array_location','Parser.py',396),
  ('expression -> operand0','expression',1,'p_expression','Parser.py',406),
  ('expression -> conditional_expression','expression',1,'p_expression','Parser.py',407),
  ('parenthesized_expression -> LPAREN expression RPAREN','parenthesized_expression',3,'p_parenthesized_expression','Parser.py',411),
  ('conditional_expression -> IF expression then_expression else_expression FI','conditional_expression',5,'p_conditional_expression','Parser.py',419),
  ('conditional_expression -> IF expression then_expression elsif_expression else_expression FI','conditional_expression',6,'p_conditional_expression','Parser.py',420),
  ('then_expression -> THEN expression','then_expression',2,'p_then_expression','Parser.py',424),
  ('else_expression -> ELSE expression','else_expression',2,'p_else_expression','Parser.py',428),
  ('elsif_expression -> ELSIF expression then_expression','elsif_expression',3,'p_elsif_expression','Parser.py',432),
  ('elsif_expression -> elsif_expression ELSIF expression then_expression','elsif_expression',4,'p_elsif_expression','Parser.py',433),
  ('operand0 -> operand1','operand0',1,'p_operand0','Parser.py',448),
  ('operand0 -> operand0 operator1 operand1','operand0',3,'p_operand0','Parser.py',449),
  ('operand1 -> operand2','operand1',1,'p_operand1','Parser.py',456),
  ('operand1 -> operand1 operator2 operand2','operand1',3,'p_operand1','Parser.py',457),
  ('operand2 -> operand3','operand2',1,'p_operand2','Parser.py',464),
  ('operand2 -> operand2 arithmetic_multiplicative_operator operand3','operand2',3,'p_operand2','Parser.py',465),
  ('operand3 -> monadic_operator operand4','operand3',2,'p_operand3','Parser.py',473),
  ('operand3 -> operand4','operand3',1,'p_operand3','Parser.py',474),
  ('operand4 -> array_location','operand4',1,'p_operand4','Parser.py',481),
  ('operand4 -> referenced_location','operand4',1,'p_operand4','Parser.py',482),
  ('operand4 -> primitive_value','operand4',1,'p_operand4','Parser.py',483),
  ('arithmetic_multiplicative_operator -> TIMES','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',494),
  ('arithmetic_multiplicative_operator -> DIVIDE','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',495),
  ('arithmetic_multiplicative_operator -> MODULO','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',496),
  ('monadic_operator -> MINUS','monadic_operator',1,'p_monadic_operator','Parser.py',500),
  ('monadic_operator -> NOT','monadic_operator',1,'p_monadic_operator','Parser.py',501),
  ('referenced_location -> ARROW array_location','referenced_location',2,'p_referenced_location','Parser.py',505),
  ('operator1 -> relational_operator','operator1',1,'p_operator1','Parser.py',509),
  ('operator1 -> membership_operator','operator1',1,'p_operator1','Parser.py',510),
  ('operator2 -> arithmetic_additive_operator','operator2',1,'p_operator2','Parser.py',514),
  ('operator2 -> string_concatenation_operator','operator2',1,'p_operator2','Parser.py',515),
  ('arithmetic_additive_operator -> PLUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','Parser.py',519),
  ('arithmetic_additive_operator -> MINUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','Parser.py',520),
  ('string_concatenation_operator -> CONCAT','string_concatenation_operator',1,'p_string_concatenation_operator','Parser.py',524),
  ('relational_operator -> AND','relational_operator',1,'p_relational_operator','Parser.py',528),
  ('relational_operator -> OR','relational_operator',1,'p_relational_operator','Parser.py',529),
  ('relational_operator -> EQUAL','relational_operator',1,'p_relational_operator','Parser.py',530),
  ('relational_operator -> NOTEQ','relational_operator',1,'p_relational_operator','Parser.py',531),
  ('relational_operator -> GREATER','relational_operator',1,'p_relational_operator','Parser.py',532),
  ('relational_operator -> GTEQUAL','relational_operator',1,'p_relational_operator','Parser.py',533),
  ('relational_operator -> LESS','relational_operator',1,'p_relational_operator','Parser.py',534),
  ('relational_operator -> LTEQUAL','relational_operator',1,'p_relational_operator','Parser.py',535),
  ('membership_operator -> IN','membership_operator',1,'p_membership_operator','Parser.py',539),
  ('primitive_value -> literal','primitive_value',1,'p_primitive_value','Parser.py',551),
  ('primitive_value -> value_array_element','primitive_value',1,'p_primitive_value','Parser.py',552),
  ('primitive_value -> value_array_slice','primitive_value',1,'p_primitive_value','Parser.py',553),
  ('primitive_value -> parenthesized_expression','primitive_value',1,'p_primitive_value','Parser.py',554),
  ('literal -> integer_literal','literal',1,'p_literal','Parser.py',558),
  ('literal -> boolean_literal','literal',1,'p_literal','Parser.py',559),
  ('literal -> character_literal','literal',1,'p_literal','Parser.py',560),
  ('literal -> empty_literal','literal',1,'p_literal','Parser.py',561),
  ('literal -> character_string_literal','literal',1,'p_literal','Parser.py',562),
  ('value_array_element -> primitive_value LBRACKET expression_list RBRACKET','value_array_element',4,'p_value_array_element','Parser.py',566),
  ('value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET','value_array_slice',6,'p_value_array_slice','Parser.py',570),
  ('integer_literal -> ICONST','integer_literal',1,'p_integer_literal','Parser.py',578),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','Parser.py',582),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','Parser.py',583),
  ('character_literal -> CCONST','character_literal',1,'p_character_literal','Parser.py',587),
  ('empty_literal -> NULL','empty_literal',1,'p_empty_literal','Parser.py',591),
  ('character_string_literal -> SCONST','character_string_literal',1,'p_character_string_literal','Parser.py',595),
  ('action_statement -> identifier COLON action SEMI','action_statement',4,'p_action_statement','Parser.py',606),
  ('action_statement -> action SEMI','action_statement',2,'p_action_statement','Parser.py',607),
  ('action -> bracketed_action','action',1,'p_action','Parser.py',612),
  ('action -> assignment_action','action',1,'p_action','Parser.py',613),
  ('action -> call_action','action',1,'p_action','Parser.py',614),
  ('action -> exit_action','action',1,'p_action','Parser.py',615),
  ('action -> result_action','action',1,'p_action','Parser.py',616),
  ('action -> return_action','action',1,'p_action','Parser.py',617),
  ('bracketed_action -> if_action','bracketed_action',1,'p_bracketed_action','Parser.py',621),
  ('bracketed_action -> do_action','bracketed_action',1,'p_bracketed_action','Parser.py',622),
  ('assignment_action -> array_location assigning_operator expression','assignment_action',3,'p_assignment_action','Parser.py',626),
  ('assigning_operator -> closed_dyadic_operator ASSIGN','assigning_operator',2,'p_assigning_operator','Parser.py',630),
  ('assigning_operator -> ASSIGN','assigning_operator',1,'p_assigning_operator','Parser.py',631),
  ('closed_dyadic_operator -> arithmetic_additive_operator','closed_dyadic_operator',1,'p_closed_dyadic_operator','Parser.py',635),
  ('closed_dyadic_operator -> arithmetic_multiplicative_operator','closed_dyadic_operator',1,'p_closed_dyadic_operator','Parser.py',636),
  ('closed_dyadic_operator -> string_concatenation_operator','closed_dyadic_operator',1,'p_closed_dyadic_operator','Parser.py',637),
  ('if_action -> IF expression then_clause else_clause FI','if_action',5,'p_if_action','Parser.py',641),
  ('if_action -> IF expression then_clause FI','if_action',4,'p_if_action','Parser.py',642),
  ('then_clause -> THEN action_statement_list','then_clause',2,'p_then_clause','Parser.py',646),
  ('else_clause -> ELSE action_statement_list','else_clause',2,'p_else_clause','Parser.py',650),
  ('else_clause -> ELSIF expression then_clause else_clause','else_clause',4,'p_else_clause','Parser.py',651),
  ('else_clause -> ELSIF expression then_clause','else_clause',3,'p_else_clause','Parser.py',652),
  ('action_statement_list -> action_statement action_statement_nullable','action_statement_list',2,'p_action_statement_list','Parser.py',663),
  ('action_statement_nullable -> action_statement action_statement_nullable','action_statement_nullable',2,'p_action_statement_nullable','Parser.py',675),
  ('action_statement_nullable -> empty','action_statement_nullable',1,'p_action_statement_nullable','Parser.py',676),
  ('call_action -> procedure_call','call_action',1,'p_call_action','Parser.py',693),
  ('call_action -> builtin_call','call_action',1,'p_call_action','Parser.py',694),
  ('builtin_call -> builtin_name LPAREN parameter_list RPAREN','builtin_call',4,'p_builtin_call','Parser.py',698),
  ('builtin_call -> builtin_name LPAREN RPAREN','builtin_call',3,'p_builtin_call','Parser.py',699),
  ('builtin_name -> ABS','builtin_name',1,'p_builtin_name','Parser.py',704),
  ('builtin_name -> ASC','builtin_name',1,'p_builtin_name','Parser.py',705),
  ('builtin_name -> NUM','builtin_name',1,'p_builtin_name','Parser.py',706),
  ('builtin_name -> UPPER','builtin_name',1,'p_builtin_name','Parser.py',707),
  ('builtin_name -> LOWER','builtin_name',1,'p_builtin_name','Parser.py',708),
  ('builtin_name -> LENGTH','builtin_name',1,'p_builtin_name','Parser.py',709),
  ('builtin_name -> READ','builtin_name',1,'p_builtin_name','Parser.py',710),
  ('builtin_name -> PRINT','builtin_name',1,'p_builtin_name','Parser.py',711),
  ('procedure_call -> ID LPAREN parameter_list RPAREN','procedure_call',4,'p_procedure_call','Parser.py',715),
  ('procedure_call -> ID LPAREN RPAREN','procedure_call',3,'p_procedure_call','Parser.py',716),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','Parser.py',720),
  ('parameter_list -> expression COMMA parameter_list','parameter_list',3,'p_parameter_list','Parser.py',721),
  ('exit_action -> EXIT label_id','exit_action',2,'p_exit_action','Parser.py',730),
  ('label_id -> ID','label_id',1,'p_label_id','Parser.py',734),
  ('return_action -> RETURN result','return_action',2,'p_return_action','Parser.py',738),
  ('result -> expression','result',1,'p_result','Parser.py',742),
  ('result -> empty','result',1,'p_result','Parser.py',743),
  ('result_action -> RESULT expression','result_action',2,'p_result_action','Parser.py',746),
  ('do_action -> DO control_part SEMI action_statement_nullable OD','do_action',5,'p_do_action','Parser.py',754),
  ('do_action -> DO action_statement_nullable OD','do_action',3,'p_do_action','Parser.py',755),
  ('control_part -> for_control while_control','control_part',2,'p_control_part','Parser.py',762),
  ('control_part -> for_control','control_part',1,'p_control_part','Parser.py',763),
  ('control_part -> while_control','control_part',1,'p_control_part','Parser.py',764),
  ('for_control -> FOR iteration','for_control',2,'p_for_control','Parser.py',768),
  ('iteration -> step_enumeration','iteration',1,'p_iteration','Parser.py',772),
  ('iteration -> range_enumeration','iteration',1,'p_iteration','Parser.py',773),
  ('step_enumeration -> identifier ASSIGN expression step_value DOWN end_value','step_enumeration',6,'p_step_enumeration','Parser.py',777),
  ('step_enumeration -> identifier ASSIGN expression step_value end_value','step_enumeration',5,'p_step_enumeration','Parser.py',778),
  ('step_enumeration -> identifier ASSIGN expression DOWN end_value','step_enumeration',5,'p_step_enumeration','Parser.py',779),
  ('step_enumeration -> identifier ASSIGN expression end_value','step_enumeration',4,'p_step_enumeration','Parser.py',780),
  ('step_value -> BY expression','step_value',2,'p_step_value','Parser.py',792),
  ('end_value -> TO expression','end_value',2,'p_end_value','Parser.py',796),
  ('range_enumeration -> identifier DOWN IN discrete_mode','range_enumeration',4,'p_range_enumeration','Parser.py',800),
  ('range_enumeration -> identifier IN discrete_mode','range_enumeration',3,'p_range_enumeration','Parser.py',801),
  ('while_control -> WHILE expression','while_control',2,'p_while_control','Parser.py',808),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',814),
]
