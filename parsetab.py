
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftANDORleftEQUALNOTEQleftLTEQUALLESSGREATERGTEQUALleftPLUSMINUSleftTIMESDIVIDEMODULOrightUMINUSUNOTICONST CCONST SCONST COMMA PLUS MINUS TIMES DIVIDE COLON LPAREN RPAREN ASSIGN SEMI ARROW LTEQUAL LESS GREATER GTEQUAL EQUAL LBRACKET RBRACKET ID MODULO AND OR NOTEQ NOT CONCAT HAT UPPER FALSE EXIT WHILE LENGTH TYPE RETURNS DO CHAR ASC NUM REF ARRAY BOOL FI TO ELSIF IF RETURN ELSE ABS IN BY PROC PRINT OD DOWN FOR TRUE SYN END CHARS RESULT NULL INT LOWER LOC DCL THEN READprogram : statement_liststatement_list : statement statement_nullablestatement_nullable : statement statement_nullable\n                              | emptystatement : declaration_statement\n                     | synonym_statement\n                     | newmode_statement\n                     | action_statement\n                     | procedure_statementsynonym_statement : SYN synonym_list SEMIsynonym_list : synonym_definition\n                        | synonym_definition COMMA synonym_listsynonym_definition : identifier_list mode ASSIGN expression\n                              | identifier_list ASSIGN expressiondeclaration_statement : DCL declaration_list SEMIdeclaration_list : declaration\n                            | declaration COMMA declaration_listdeclaration : identifier_list mode initialization\n                       | identifier_list modeinitialization : ASSIGN expressionidentifier_list : identifier\n                           | identifier COMMA identifier_listidentifier : IDnewmode_statement : TYPE newmode_list SEMInewmode_list : mode_definition\n                        | mode_definition COMMA newmode_listmode_definition : identifier_list ASSIGN modeprocedure_statement : ID COLON procedure_definitionprocedure_definition : PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI\n                                | PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI\n                                | PROC LPAREN  RPAREN result_spec SEMI statement_nullable END SEMI\n                                | PROC LPAREN  RPAREN SEMI statement_nullable END SEMIformal_parameter_list : formal_parameter\n                                 | formal_parameter COMMA formal_parameter_listformal_parameter : identifier_list mode LOC\n                            | identifier_list moderesult_spec : RETURNS LPAREN mode LOC RPAREN\n                       | RETURNS LPAREN mode RPARENmode : mode_name\n                | discrete_mode\n                | reference_mode\n                | composite_modemode_name : identifierdiscrete_mode : integer_mode\n                         | boolean_mode\n                         | character_mode\n                         | discrete_range_modediscrete_mode_name : identifierinteger_mode : INTboolean_mode : BOOLcharacter_mode : CHARdiscrete_range_mode : discrete_mode_name LPAREN literal_range RPAREN\n                               | discrete_mode LPAREN literal_range RPARENliteral_range : lower_bound COLON upper_boundlower_bound : expressionupper_bound : expressionreference_mode : REF modecomposite_mode : string_mode\n                          | array_modestring_mode : CHARS LBRACKET string_length RBRACKETstring_length : integer_literalarray_mode : ARRAY LBRACKET index_mode_list RBRACKET element_modeindex_mode_list : index_mode\n                           | index_mode COMMA index_mode_listindex_mode : discrete_mode\n                      | literal_rangeelement_mode : modelocation : identifier\n\t\t\t\t    | dereferenced_reference\n\t\t\t\t    | string_element\n\t\t\t\t    | string_slice\n\t\t\t\t    | array_element\n\t\t\t\t    | array_slice\n\t\t\t\t    | call_actiondereferenced_reference : array_location ARROWstring_element : identifier LBRACKET start_element RBRACKETstart_element : expressionstring_slice : identifier LBRACKET left_element COLON right_element RBRACKETleft_element : expressionright_element : expressionarray_element : array_location LBRACKET expression_list RBRACKETexpression_list : expression\n    \t\t\t\t\t   | expression COMMA expression_listarray_slice : array_location LBRACKET lower_bound COLON upper_bound RBRACKETarray_location : locationexpression : operand0\n                      | conditional_expressionparenthesized_expression : LPAREN expression RPARENconditional_expression : IF expression then_expression else_expression FI\n                                  | IF expression then_expression elsif_expression else_expression FIthen_expression : THEN expressionelse_expression : ELSE expressionelsif_expression : ELSIF expression then_expression\n                            | elsif_expression ELSIF expression then_expressionoperand0 : operand1\n                    | operand0 operator1 operand1operand1 : operand2\n                    | operand1 operator2 operand2operand2 : operand3\n                    | operand2 arithmetic_multiplicative_operator operand3operand3 : monadic_operator operand4\n                    | operand4operand4 : array_location\n                    | referenced_location\n                    | primitive_valuearithmetic_multiplicative_operator : TIMES\n                                              | DIVIDE\n                                              | MODULOmonadic_operator : MINUS %prec UMINUS\n                            | NOT %prec UNOTreferenced_location : ARROW array_locationoperator1 : membership_operator\n                     | relational_operatorrelational_operator : AND\n                               | OR\n                               | EQUAL\n                               | NOTEQ\n                               | GREATER\n                               | GTEQUAL\n                               | LESS\n                               | LTEQUALoperator2 : arithmetic_additive_operator\n                     | string_concatenation_operatorarithmetic_additive_operator : PLUS\n                                        | MINUSstring_concatenation_operator : CONCATmembership_operator : INprimitive_value : literal\n                           | value_array_element\n                           | value_array_slice\n                           | parenthesized_expressionliteral : integer_literal\n                   | boolean_literal\n                   | character_literal\n                   | empty_literal\n                   | character_string_literalvalue_array_element : primitive_value LBRACKET expression_list RBRACKETvalue_array_slice : primitive_value LBRACKET expression COLON expression RBRACKETinteger_literal : ICONSTboolean_literal : TRUE\n                           | FALSEcharacter_literal : CCONST\n                             | HAT LPAREN ICONST RPARENempty_literal : NULLcharacter_string_literal : SCONSTaction_statement : identifier COLON action SEMI\n                            | action SEMIaction : bracketed_action\n                  | assignment_action\n                  | call_action\n                  | exit_action\n                  | result_action\n                  | return_actionbracketed_action : if_action\n                            | do_actionassignment_action : array_location assigning_operator expressionassigning_operator : closed_dyadic_operator ASSIGN\n                              | ASSIGNclosed_dyadic_operator : arithmetic_additive_operator\n                                  | arithmetic_multiplicative_operator\n                                  | string_concatenation_operatorif_action : IF expression then_clause else_clause FI\n                     | IF expression then_clause FIthen_clause : THEN action_statement_listelse_clause : ELSE action_statement_list\n                       | ELSIF expression then_clause else_clause\n                       | ELSIF expression then_clauseaction_statement_list : action_statement action_statement_nullableaction_statement_nullable : action_statement action_statement_nullable\n                                     | emptycall_action : procedure_call\n                       | builtin_callbuiltin_call : builtin_name LPAREN parameter_list RPAREN\n                        | builtin_name LPAREN RPARENbuiltin_name : ABS\n                        | ASC\n                        | NUM\n                        | UPPER\n                        | LOWER\n                        | LENGTH\n                        | READ\n                        | PRINTprocedure_call : ID LPAREN parameter_list RPAREN\n                          | ID LPAREN RPARENparameter_list : expression\n                          | expression COMMA parameter_listexit_action : EXIT identifierreturn_action : RETURN resultresult : expression\n                  | emptyresult_action : RESULT expressiondo_action : DO control_part SEMI action_statement_nullable OD\n                     | DO action_statement_nullable ODcontrol_part : for_control while_control \n                        | for_control   \n                        | while_controlfor_control : FOR iterationiteration : step_enumeration\n                     | range_enumerationstep_enumeration : identifier ASSIGN expression step_value DOWN end_value\n                            | identifier ASSIGN expression step_value end_value\n                            | identifier ASSIGN expression DOWN end_value\n                            | identifier ASSIGN expression end_valuestep_value : BY expressionend_value : TO expressionrange_enumeration : identifier DOWN IN discrete_mode\n                             | identifier IN discrete_modewhile_control : WHILE expressionempty :'
    
_lr_action_items = {'HAT':([4,23,26,56,70,71,80,84,92,94,95,97,99,101,102,104,105,113,119,123,125,137,138,139,140,141,142,143,144,145,146,147,148,150,151,152,153,155,159,183,215,218,227,229,230,231,234,235,239,241,245,246,257,260,261,295,299,300,308,309,],[51,51,51,51,-110,51,51,-109,51,-158,51,-107,-124,-125,-126,-106,-108,51,51,51,51,-120,-116,-113,-114,-112,-117,-115,51,-127,-119,-118,-121,51,-123,-122,51,51,51,-157,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'LBRACKET':([2,8,9,10,13,17,18,19,30,34,39,41,53,54,55,58,61,62,63,65,67,69,72,73,74,75,77,78,79,81,82,83,103,136,163,177,195,202,205,221,236,242,247,249,251,262,267,305,312,323,],[-172,-74,-171,-69,95,-85,-70,-71,-72,-73,123,-23,-129,-133,-74,-144,95,-130,123,-141,-145,-131,-139,-128,-132,-135,153,-142,-136,-140,-23,-134,-75,95,227,232,-174,-23,-184,-88,-81,-173,-76,-183,-143,-137,123,-84,-78,-138,]),'INT':([46,47,90,122,131,166,208,227,240,280,291,300,301,333,],[-21,-23,161,161,161,161,-22,161,161,161,161,161,161,161,]),'LOWER':([0,4,6,12,14,16,21,22,23,26,28,56,57,70,71,80,84,86,92,94,95,97,99,101,102,104,105,106,113,119,123,124,125,127,130,133,137,138,139,140,141,142,143,144,145,146,147,148,150,151,152,153,155,157,159,183,185,197,206,212,214,215,218,227,229,230,231,234,235,239,241,245,246,248,257,260,261,295,299,300,308,309,314,335,336,346,349,354,355,357,],[1,1,1,-8,1,-9,-7,-6,1,1,-5,1,1,-110,1,1,-109,1,1,-158,1,-107,-124,-125,-126,-106,-108,1,1,1,1,1,1,-147,-24,1,-120,-116,-113,-114,-112,-117,-115,1,-127,-119,-118,-121,1,-123,-122,1,1,-10,1,-157,1,-15,-28,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-146,1,1,1,1,1,1,1,1,1,1,1,1,-32,-31,-30,-29,]),'ELSIF':([2,9,10,17,18,19,30,34,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,72,73,74,75,76,77,78,79,81,82,83,85,103,106,107,127,134,136,154,184,195,205,212,213,219,220,221,222,225,236,242,247,248,249,251,252,256,259,262,292,294,305,312,321,322,323,340,],[-172,-171,-69,-85,-70,-71,-72,-73,-129,-133,-74,-144,-87,-102,-103,-130,-68,-86,-141,-104,-145,-99,-131,-139,-128,-132,-135,-95,-105,-142,-136,-140,-23,-134,-97,-75,-209,-170,-147,215,-111,-101,-169,-174,-184,-209,-164,260,-96,-88,-98,-100,-81,-173,-76,-146,-183,-143,-168,-91,295,-137,215,-89,-84,-78,-90,-93,-138,-94,]),'NOTEQ':([2,9,10,17,18,19,30,34,53,54,55,58,60,61,62,63,64,65,66,67,68,69,72,73,74,75,76,77,78,79,81,82,83,85,103,136,154,195,205,220,221,222,225,236,242,247,249,251,262,267,305,312,323,],[-172,-171,-69,-85,-70,-71,-72,-73,-129,-133,-74,-144,-102,-103,-130,-68,142,-141,-104,-145,-99,-131,-139,-128,-132,-135,-95,-105,-142,-136,-140,-23,-134,-97,-75,-111,-101,-174,-184,-96,-88,-98,-100,-81,-173,-76,-183,-143,-137,-68,-84,-78,-138,]),'TYPE':([0,6,12,16,21,22,28,86,127,130,157,197,206,248,314,335,336,346,349,354,355,357,],[3,3,-8,-9,-7,-6,-5,3,-147,-24,-10,-15,-28,-146,3,3,3,3,-32,-31,-30,-29,]),'FI':([2,9,10,17,18,19,30,34,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,72,73,74,75,76,77,78,79,81,82,83,85,103,106,107,127,134,136,154,184,195,205,212,213,217,220,221,222,225,236,242,247,248,249,251,252,253,258,262,292,293,294,296,305,312,319,321,323,],[-172,-171,-69,-85,-70,-71,-72,-73,-129,-133,-74,-144,-87,-102,-103,-130,-68,-86,-141,-104,-145,-99,-131,-139,-128,-132,-135,-95,-105,-142,-136,-140,-23,-134,-97,-75,-209,-170,-147,216,-111,-101,-169,-174,-184,-209,-164,255,-96,-88,-98,-100,-81,-173,-76,-146,-183,-143,-168,-165,294,-137,-167,-92,-89,321,-84,-78,-166,-90,-138,]),'NOT':([4,23,26,56,71,92,94,95,97,99,101,102,104,105,113,119,123,125,137,138,139,140,141,142,143,144,145,146,147,148,150,151,152,153,155,159,183,215,218,227,229,230,231,234,235,239,241,245,246,257,260,261,295,299,300,308,309,],[70,70,70,70,70,70,-158,70,-107,-124,-125,-126,-106,-108,70,70,70,70,-120,-116,-113,-114,-112,-117,-115,70,-127,-119,-118,-121,70,-123,-122,70,70,70,-157,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'IF':([0,4,6,12,14,16,21,22,23,26,28,56,71,86,92,94,95,106,113,119,123,124,125,127,130,133,153,157,159,183,185,197,206,212,214,215,218,227,229,230,231,234,235,239,241,245,246,248,257,260,261,295,299,300,308,309,314,335,336,346,349,354,355,357,],[4,56,4,-8,4,-9,-7,-6,56,56,-5,56,56,4,56,-158,56,4,56,56,56,4,56,-147,-24,4,56,-10,56,-157,4,-15,-28,4,4,56,56,56,56,56,56,56,56,56,56,56,56,-146,56,56,56,56,56,56,56,56,4,4,4,4,-32,-31,-30,-29,]),'END':([12,16,21,22,28,86,87,127,130,156,157,197,206,248,314,334,335,336,344,345,346,349,352,354,355,357,],[-8,-9,-7,-6,-5,-209,-4,-147,-24,-3,-10,-15,-28,-146,-209,343,-209,-209,350,351,-209,-32,356,-31,-30,-29,]),'ASSIGN':([2,8,9,10,13,17,18,19,30,34,39,41,46,47,50,63,82,90,93,96,97,98,99,100,101,102,103,104,105,158,160,161,162,164,165,167,168,169,171,172,173,174,175,176,189,195,198,202,205,208,228,236,242,247,249,302,303,304,305,312,326,327,],[-172,-74,-171,-69,94,-85,-70,-71,-72,-73,-68,-23,-21,-23,131,-68,-23,159,-160,183,-107,-159,-124,-161,-125,-126,-75,-106,-108,-44,-50,-49,-41,-47,-39,-59,-42,-51,-58,-40,-45,231,-43,-46,239,-174,245,-23,-184,-22,-57,-81,-173,-76,-183,-52,-53,-60,-84,-78,-62,-67,]),'OR':([2,9,10,17,18,19,30,34,53,54,55,58,60,61,62,63,64,65,66,67,68,69,72,73,74,75,76,77,78,79,81,82,83,85,103,136,154,195,205,220,221,222,225,236,242,247,249,251,262,267,305,312,323,],[-172,-171,-69,-85,-70,-71,-72,-73,-129,-133,-74,-144,-102,-103,-130,-68,143,-141,-104,-145,-99,-131,-139,-128,-132,-135,-95,-105,-142,-136,-140,-23,-134,-97,-75,-111,-101,-174,-184,-96,-88,-98,-100,-81,-173,-76,-183,-143,-137,-68,-84,-78,-138,]),'COMMA':([2,9,10,17,18,19,30,34,46,47,48,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,72,73,74,75,76,77,78,79,81,82,83,85,91,103,120,136,154,158,160,161,162,164,165,167,168,169,171,172,173,175,176,180,193,195,198,205,210,220,221,222,223,225,226,228,236,242,244,247,249,251,262,264,266,268,272,275,277,285,290,294,302,303,304,305,312,318,321,323,324,326,327,339,],[-172,-171,-69,-85,-70,-71,-72,-73,128,-23,129,-129,-133,-74,-144,-87,-102,-103,-130,-68,-86,-141,-104,-145,-99,-131,-139,-128,-132,-135,-95,-105,-142,-136,-140,-23,-134,-97,178,-75,196,-111,-101,-44,-50,-49,-41,-47,-39,-59,-42,-51,-58,-40,-45,-43,-46,234,241,-174,-19,-184,-27,-96,-88,-98,234,-100,-14,-57,-81,-173,-18,-76,-183,-143,-137,-65,-66,300,-13,234,-56,-20,317,-89,-52,-53,-60,-84,-78,-36,-90,-138,-54,-62,-67,-35,]),'RBRACKET':([2,9,10,17,18,19,30,34,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,72,73,74,75,76,77,78,79,81,82,83,85,103,136,154,158,160,161,164,169,173,176,180,182,195,199,201,205,220,221,222,223,224,225,236,242,247,249,251,262,264,266,268,269,273,274,275,276,277,278,286,287,294,298,302,303,305,312,321,323,324,325,],[-172,-171,-69,-85,-70,-71,-72,-73,-129,-133,-74,-144,-87,-102,-103,-130,-68,-86,-141,-104,-145,-99,-131,-139,-128,-132,-135,-95,-105,-142,-136,-140,-23,-134,-97,-75,-111,-101,-44,-50,-49,-47,-51,-45,-46,-82,236,-174,-77,247,-184,-96,-88,-98,-82,262,-100,-81,-173,-76,-183,-143,-137,-65,-66,-63,301,304,-61,-82,-83,-56,305,-80,312,-89,323,-52,-53,-84,-78,-90,-138,-54,-64,]),'SYN':([0,6,12,16,21,22,28,86,127,130,157,197,206,248,314,335,336,346,349,354,355,357,],[7,7,-8,-9,-7,-6,-5,7,-147,-24,-10,-15,-28,-146,7,7,7,7,-32,-31,-30,-29,]),'CONCAT':([2,8,9,10,13,17,18,19,30,34,39,41,53,54,55,58,60,61,62,63,65,66,67,68,69,72,73,74,75,76,77,78,79,81,82,83,85,103,136,154,195,202,205,220,221,222,225,236,242,247,249,251,262,267,305,312,323,],[-172,-74,-171,-69,102,-85,-70,-71,-72,-73,-68,-23,-129,-133,-74,-144,-102,-103,-130,-68,-141,-104,-145,-99,-131,-139,-128,-132,-135,102,-105,-142,-136,-140,-23,-134,-97,-75,-111,-101,-174,-23,-184,102,-88,-98,-100,-81,-173,-76,-183,-143,-137,-68,-84,-78,-138,]),'SCONST':([4,23,26,56,70,71,80,84,92,94,95,97,99,101,102,104,105,113,119,123,125,137,138,139,140,141,142,143,144,145,146,147,148,150,151,152,153,155,159,183,215,218,227,229,230,231,234,235,239,241,245,246,257,260,261,295,299,300,308,309,],[67,67,67,67,-110,67,67,-109,67,-158,67,-107,-124,-125,-126,-106,-108,67,67,67,67,-120,-116,-113,-114,-112,-117,-115,67,-127,-119,-118,-121,67,-123,-122,67,67,67,-157,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'FALSE':([4,23,26,56,70,71,80,84,92,94,95,97,99,101,102,104,105,113,119,123,125,137,138,139,140,141,142,143,144,145,146,147,148,150,151,152,153,155,159,183,215,218,227,229,230,231,234,235,239,241,245,246,257,260,261,295,299,300,308,309,],[65,65,65,65,-110,65,65,-109,65,-158,65,-107,-124,-125,-126,-106,-108,65,65,65,65,-120,-116,-113,-114,-112,-117,-115,65,-127,-119,-118,-121,65,-123,-122,65,65,65,-157,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'DOWN':([2,9,10,17,18,19,30,34,47,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,72,73,74,75,76,77,78,79,81,82,83,85,103,136,154,189,195,205,220,221,222,225,236,242,247,249,251,262,281,294,305,311,312,321,323,329,],[-172,-171,-69,-85,-70,-71,-72,-73,-23,-129,-133,-74,-144,-87,-102,-103,-130,-68,-86,-141,-104,-145,-99,-131,-139,-128,-132,-135,-95,-105,-142,-136,-140,-23,-134,-97,-75,-111,-101,238,-174,-184,-96,-88,-98,-100,-81,-173,-76,-183,-143,-137,307,-89,-84,331,-78,-90,-138,-204,]),'EQUAL':([2,9,10,17,18,19,30,34,53,54,55,58,60,61,62,63,64,65,66,67,68,69,72,73,74,75,76,77,78,79,81,82,83,85,103,136,154,195,205,220,221,222,225,236,242,247,249,251,262,267,305,312,323,],[-172,-171,-69,-85,-70,-71,-72,-73,-129,-133,-74,-144,-102,-103,-130,-68,138,-141,-104,-145,-99,-131,-139,-128,-132,-135,-95,-105,-142,-136,-140,-23,-134,-97,-75,-111,-101,-174,-184,-96,-88,-98,-100,-81,-173,-76,-183,-143,-137,-68,-84,-78,-138,]),'ICONST':([4,23,26,56,70,71,80,84,92,94,95,97,99,101,102,104,105,113,119,123,125,132,137,138,139,140,141,142,143,144,145,146,147,148,150,151,152,153,155,159,183,215,218,227,229,230,231,232,234,235,239,241,245,246,257,260,261,295,299,300,308,309,],[72,72,72,72,-110,72,72,-109,72,-158,72,-107,-124,-125,-126,-106,-108,72,72,72,72,211,-120,-116,-113,-114,-112,-117,-115,72,-127,-119,-118,-121,72,-123,-122,72,72,72,-157,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'AND':([2,9,10,17,18,19,30,34,53,54,55,58,60,61,62,63,64,65,66,67,68,69,72,73,74,75,76,77,78,79,81,82,83,85,103,136,154,195,205,220,221,222,225,236,242,247,249,251,262,267,305,312,323,],[-172,-171,-69,-85,-70,-71,-72,-73,-129,-133,-74,-144,-102,-103,-130,-68,140,-141,-104,-145,-99,-131,-139,-128,-132,-135,-95,-105,-142,-136,-140,-23,-134,-97,-75,-111,-101,-174,-184,-96,-88,-98,-100,-81,-173,-76,-183,-143,-137,-68,-84,-78,-138,]),'CHARS':([46,47,90,122,131,166,208,291,301,333,],[-21,-23,177,177,177,177,-22,177,177,177,]),'PLUS':([2,8,9,10,13,17,18,19,30,34,39,41,53,54,55,58,60,61,62,63,65,66,67,68,69,72,73,74,75,76,77,78,79,81,82,83,85,103,136,154,195,202,205,220,221,222,225,236,242,247,249,251,262,267,305,312,323,],[-172,-74,-171,-69,99,-85,-70,-71,-72,-73,-68,-23,-129,-133,-74,-144,-102,-103,-130,-68,-141,-104,-145,-99,-131,-139,-128,-132,-135,99,-105,-142,-136,-140,-23,-134,-97,-75,-111,-101,-174,-23,-184,99,-88,-98,-100,-81,-173,-76,-183,-143,-137,-68,-84,-78,-138,]),'REF':([46,47,90,122,131,166,208,291,301,333,],[-21,-23,166,166,166,166,-22,166,166,166,]),'BOOL':([46,47,90,122,131,166,208,227,240,280,291,300,301,333,],[-21,-23,160,160,160,160,-22,160,160,160,160,160,160,160,]),'TO':([2,9,10,17,18,19,30,34,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,72,73,74,75,76,77,78,79,81,82,83,85,103,136,154,195,205,220,221,222,225,236,242,247,249,251,262,281,294,305,307,311,312,321,323,329,331,],[-172,-171,-69,-85,-70,-71,-72,-73,-129,-133,-74,-144,-87,-102,-103,-130,-68,-86,-141,-104,-145,-99,-131,-139,-128,-132,-135,-95,-105,-142,-136,-140,-23,-134,-97,-75,-111,-101,-174,-184,-96,-88,-98,-100,-81,-173,-76,-183,-143,-137,309,-89,-84,309,309,-78,-90,-138,-204,309,]),'DO':([0,6,12,14,16,21,22,28,86,106,124,127,130,133,157,185,197,206,212,214,248,314,335,336,346,349,354,355,357,],[14,14,-8,14,-9,-7,-6,-5,14,14,14,-147,-24,14,-10,14,-15,-28,14,14,-146,14,14,14,14,-32,-31,-30,-29,]),'THEN':([2,9,10,17,18,19,30,34,52,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,72,73,74,75,76,77,78,79,81,82,83,85,103,135,136,154,195,205,220,221,222,225,236,242,247,249,251,254,262,294,297,305,312,320,321,323,],[-172,-171,-69,-85,-70,-71,-72,-73,133,-129,-133,-74,-144,-87,-102,-103,-130,-68,-86,-141,-104,-145,-99,-131,-139,-128,-132,-135,-95,-105,-142,-136,-140,-23,-134,-97,-75,218,-111,-101,-174,-184,-96,-88,-98,-100,-81,-173,-76,-183,-143,133,-137,-89,218,-84,-78,218,-90,-138,]),'CHAR':([46,47,90,122,131,166,208,227,240,280,291,300,301,333,],[-21,-23,169,169,169,169,-22,169,169,169,169,169,169,169,]),'NULL':([4,23,26,56,70,71,80,84,92,94,95,97,99,101,102,104,105,113,119,123,125,137,138,139,140,141,142,143,144,145,146,147,148,150,151,152,153,155,159,183,215,218,227,229,230,231,234,235,239,241,245,246,257,260,261,295,299,300,308,309,],[58,58,58,58,-110,58,58,-109,58,-158,58,-107,-124,-125,-126,-106,-108,58,58,58,58,-120,-116,-113,-114,-112,-117,-115,58,-127,-119,-118,-121,58,-123,-122,58,58,58,-157,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'SEMI':([2,8,9,10,17,18,19,23,24,27,29,30,32,33,34,40,44,45,47,48,49,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,72,73,74,75,76,77,78,79,81,82,83,85,89,91,103,108,109,112,114,115,116,117,118,120,121,136,154,158,160,161,162,164,165,167,168,169,171,172,173,175,176,179,186,187,188,190,191,192,195,198,203,205,209,210,216,220,221,222,225,226,228,233,236,242,243,244,247,249,251,255,262,272,279,282,285,288,294,302,303,304,305,306,310,312,315,316,321,323,326,327,328,330,332,337,341,343,347,350,351,353,356,],[-172,-150,-171,-69,-85,-70,-71,-209,-154,-151,-152,-72,-153,-155,-73,-148,-149,127,-23,-25,130,-129,-133,-74,-144,-87,-102,-103,-130,-68,-86,-141,-104,-145,-99,-131,-139,-128,-132,-135,-95,-105,-142,-136,-140,-23,-134,-97,157,-11,-75,185,-196,-195,-190,-189,-188,-187,-191,-16,197,-111,-101,-44,-50,-49,-41,-47,-39,-59,-42,-51,-58,-40,-45,-43,-46,-156,-199,-198,-197,-193,-194,-208,-174,-19,248,-184,-26,-27,-163,-96,-88,-98,-100,-14,-57,-12,-81,-173,-17,-18,-76,-183,-143,-162,-137,-13,-192,-207,-20,314,-89,-52,-53,-60,-84,-206,-203,-78,335,336,-90,-138,-62,-67,-202,-205,-201,346,-200,349,-38,354,355,-37,357,]),'CCONST':([4,23,26,56,70,71,80,84,92,94,95,97,99,101,102,104,105,113,119,123,125,137,138,139,140,141,142,143,144,145,146,147,148,150,151,152,153,155,159,183,215,218,227,229,230,231,234,235,239,241,245,246,257,260,261,295,299,300,308,309,],[78,78,78,78,-110,78,78,-109,78,-158,78,-107,-124,-125,-126,-106,-108,78,78,78,78,-120,-116,-113,-114,-112,-117,-115,78,-127,-119,-118,-121,78,-123,-122,78,78,78,-157,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'PRINT':([0,4,6,12,14,16,21,22,23,26,28,56,57,70,71,80,84,86,92,94,95,97,99,101,102,104,105,106,113,119,123,124,125,127,130,133,137,138,139,140,141,142,143,144,145,146,147,148,150,151,152,153,155,157,159,183,185,197,206,212,214,215,218,227,229,230,231,234,235,239,241,245,246,248,257,260,261,295,299,300,308,309,314,335,336,346,349,354,355,357,],[20,20,20,-8,20,-9,-7,-6,20,20,-5,20,20,-110,20,20,-109,20,20,-158,20,-107,-124,-125,-126,-106,-108,20,20,20,20,20,20,-147,-24,20,-120,-116,-113,-114,-112,-117,-115,20,-127,-119,-118,-121,20,-123,-122,20,20,-10,20,-157,20,-15,-28,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-146,20,20,20,20,20,20,20,20,20,20,20,20,-32,-31,-30,-29,]),'ASC':([0,4,6,12,14,16,21,22,23,26,28,56,57,70,71,80,84,86,92,94,95,97,99,101,102,104,105,106,113,119,123,124,125,127,130,133,137,138,139,140,141,142,143,144,145,146,147,148,150,151,152,153,155,157,159,183,185,197,206,212,214,215,218,227,229,230,231,234,235,239,241,245,246,248,257,260,261,295,299,300,308,309,314,335,336,346,349,354,355,357,],[38,38,38,-8,38,-9,-7,-6,38,38,-5,38,38,-110,38,38,-109,38,38,-158,38,-107,-124,-125,-126,-106,-108,38,38,38,38,38,38,-147,-24,38,-120,-116,-113,-114,-112,-117,-115,38,-127,-119,-118,-121,38,-123,-122,38,38,-10,38,-157,38,-15,-28,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-146,38,38,38,38,38,38,38,38,38,38,38,38,-32,-31,-30,-29,]),'NUM':([0,4,6,12,14,16,21,22,23,26,28,56,57,70,71,80,84,86,92,94,95,97,99,101,102,104,105,106,113,119,123,124,125,127,130,133,137,138,139,140,141,142,143,144,145,146,147,148,150,151,152,153,155,157,159,183,185,197,206,212,214,215,218,227,229,230,231,234,235,239,241,245,246,248,257,260,261,295,299,300,308,309,314,335,336,346,349,354,355,357,],[36,36,36,-8,36,-9,-7,-6,36,36,-5,36,36,-110,36,36,-109,36,36,-158,36,-107,-124,-125,-126,-106,-108,36,36,36,36,36,36,-147,-24,36,-120,-116,-113,-114,-112,-117,-115,36,-127,-119,-118,-121,36,-123,-122,36,36,-10,36,-157,36,-15,-28,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-146,36,36,36,36,36,36,36,36,36,36,36,36,-32,-31,-30,-29,]),'RETURN':([0,6,12,14,16,21,22,28,86,106,124,127,130,133,157,185,197,206,212,214,248,314,335,336,346,349,354,355,357,],[23,23,-8,23,-9,-7,-6,-5,23,23,23,-147,-24,23,-10,23,-15,-28,23,23,-146,23,23,23,23,-32,-31,-30,-29,]),'LPAREN':([1,4,5,20,23,26,31,36,37,38,41,42,43,47,51,56,70,71,80,82,84,92,94,95,97,99,101,102,104,105,113,119,123,125,137,138,139,140,141,142,143,144,145,146,147,148,150,151,152,153,155,158,159,160,161,164,169,170,172,173,175,176,183,202,207,215,218,227,229,230,231,234,235,239,241,245,246,257,260,261,264,267,282,283,295,299,300,302,303,306,308,309,313,],[-179,71,-181,-182,71,71,119,-177,-178,-176,125,-175,-180,-23,132,71,-110,71,71,125,-109,71,-158,71,-107,-124,-125,-126,-106,-108,71,71,71,71,-120,-116,-113,-114,-112,-117,-115,71,-127,-119,-118,-121,71,-123,-122,71,71,-44,71,-50,-49,-47,-51,229,230,-45,-48,-46,-157,125,250,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,230,-48,230,-48,71,71,71,-52,-53,230,71,71,333,]),'EXIT':([0,6,12,14,16,21,22,28,86,106,124,127,130,133,157,185,197,206,212,214,248,314,335,336,346,349,354,355,357,],[25,25,-8,25,-9,-7,-6,-5,25,25,25,-147,-24,25,-10,25,-15,-28,25,25,-146,25,25,25,25,-32,-31,-30,-29,]),'FOR':([14,],[110,]),'LENGTH':([0,4,6,12,14,16,21,22,23,26,28,56,57,70,71,80,84,86,92,94,95,97,99,101,102,104,105,106,113,119,123,124,125,127,130,133,137,138,139,140,141,142,143,144,145,146,147,148,150,151,152,153,155,157,159,183,185,197,206,212,214,215,218,227,229,230,231,234,235,239,241,245,246,248,257,260,261,295,299,300,308,309,314,335,336,346,349,354,355,357,],[43,43,43,-8,43,-9,-7,-6,43,43,-5,43,43,-110,43,43,-109,43,43,-158,43,-107,-124,-125,-126,-106,-108,43,43,43,43,43,43,-147,-24,43,-120,-116,-113,-114,-112,-117,-115,43,-127,-119,-118,-121,43,-123,-122,43,43,-10,43,-157,43,-15,-28,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-146,43,43,43,43,43,43,43,43,43,43,43,43,-32,-31,-30,-29,]),'RESULT':([0,6,12,14,16,21,22,28,86,106,124,127,130,133,157,185,197,206,212,214,248,314,335,336,346,349,354,355,357,],[26,26,-8,26,-9,-7,-6,-5,26,26,26,-147,-24,26,-10,26,-15,-28,26,26,-146,26,26,26,26,-32,-31,-30,-29,]),'ABS':([0,4,6,12,14,16,21,22,23,26,28,56,57,70,71,80,84,86,92,94,95,97,99,101,102,104,105,106,113,119,123,124,125,127,130,133,137,138,139,140,141,142,143,144,145,146,147,148,150,151,152,153,155,157,159,183,185,197,206,212,214,215,218,227,229,230,231,234,235,239,241,245,246,248,257,260,261,295,299,300,308,309,314,335,336,346,349,354,355,357,],[42,42,42,-8,42,-9,-7,-6,42,42,-5,42,42,-110,42,42,-109,42,42,-158,42,-107,-124,-125,-126,-106,-108,42,42,42,42,42,42,-147,-24,42,-120,-116,-113,-114,-112,-117,-115,42,-127,-119,-118,-121,42,-123,-122,42,42,-10,42,-157,42,-15,-28,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-146,42,42,42,42,42,42,42,42,42,42,42,42,-32,-31,-30,-29,]),'ARRAY':([46,47,90,122,131,166,208,291,301,333,],[-21,-23,163,163,163,163,-22,163,163,163,]),'DIVIDE':([2,8,9,10,13,17,18,19,30,34,39,41,53,54,55,58,60,61,62,63,65,66,67,68,69,72,73,74,75,77,78,79,81,82,83,85,103,136,154,195,202,205,221,222,225,236,242,247,249,251,262,267,305,312,323,],[-172,-74,-171,-69,97,-85,-70,-71,-72,-73,-68,-23,-129,-133,-74,-144,-102,-103,-130,-68,-141,-104,-145,-99,-131,-139,-128,-132,-135,-105,-142,-136,-140,-23,-134,97,-75,-111,-101,-174,-23,-184,-88,97,-100,-81,-173,-76,-183,-143,-137,-68,-84,-78,-138,]),'DCL':([0,6,12,16,21,22,28,86,127,130,157,197,206,248,314,335,336,346,349,354,355,357,],[35,35,-8,-9,-7,-6,-5,35,-147,-24,-10,-15,-28,-146,35,35,35,35,-32,-31,-30,-29,]),'ARROW':([2,4,8,9,10,13,17,18,19,23,26,30,34,39,41,55,56,61,63,70,71,80,82,84,92,94,95,97,99,101,102,103,104,105,113,119,123,125,136,137,138,139,140,141,142,143,144,145,146,147,148,150,151,152,153,155,159,183,195,202,205,215,218,227,229,230,231,234,235,236,239,241,242,245,246,247,249,257,260,261,267,295,299,300,305,308,309,312,],[-172,57,-74,-171,-69,103,-85,-70,-71,57,57,-72,-73,-68,-23,-74,57,103,-68,-110,57,57,-23,-109,57,-158,57,-107,-124,-125,-126,-75,-106,-108,57,57,57,57,103,-120,-116,-113,-114,-112,-117,-115,57,-127,-119,-118,-121,57,-123,-122,57,57,57,-157,-174,-23,-184,57,57,57,57,57,57,57,57,-81,57,57,-173,57,57,-76,-183,57,57,57,-68,57,57,57,-84,57,57,-78,]),'UPPER':([0,4,6,12,14,16,21,22,23,26,28,56,57,70,71,80,84,86,92,94,95,97,99,101,102,104,105,106,113,119,123,124,125,127,130,133,137,138,139,140,141,142,143,144,145,146,147,148,150,151,152,153,155,157,159,183,185,197,206,212,214,215,218,227,229,230,231,234,235,239,241,245,246,248,257,260,261,295,299,300,308,309,314,335,336,346,349,354,355,357,],[37,37,37,-8,37,-9,-7,-6,37,37,-5,37,37,-110,37,37,-109,37,37,-158,37,-107,-124,-125,-126,-106,-108,37,37,37,37,37,37,-147,-24,37,-120,-116,-113,-114,-112,-117,-115,37,-127,-119,-118,-121,37,-123,-122,37,37,-10,37,-157,37,-15,-28,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-146,37,37,37,37,37,37,37,37,37,37,37,37,-32,-31,-30,-29,]),'LESS':([2,9,10,17,18,19,30,34,53,54,55,58,60,61,62,63,64,65,66,67,68,69,72,73,74,75,76,77,78,79,81,82,83,85,103,136,154,195,205,220,221,222,225,236,242,247,249,251,262,267,305,312,323,],[-172,-171,-69,-85,-70,-71,-72,-73,-129,-133,-74,-144,-102,-103,-130,-68,137,-141,-104,-145,-99,-131,-139,-128,-132,-135,-95,-105,-142,-136,-140,-23,-134,-97,-75,-111,-101,-174,-184,-96,-88,-98,-100,-81,-173,-76,-183,-143,-137,-68,-84,-78,-138,]),'GTEQUAL':([2,9,10,17,18,19,30,34,53,54,55,58,60,61,62,63,64,65,66,67,68,69,72,73,74,75,76,77,78,79,81,82,83,85,103,136,154,195,205,220,221,222,225,236,242,247,249,251,262,267,305,312,323,],[-172,-171,-69,-85,-70,-71,-72,-73,-129,-133,-74,-144,-102,-103,-130,-68,146,-141,-104,-145,-99,-131,-139,-128,-132,-135,-95,-105,-142,-136,-140,-23,-134,-97,-75,-111,-101,-174,-184,-96,-88,-98,-100,-81,-173,-76,-183,-143,-137,-68,-84,-78,-138,]),'LOC':([47,158,160,161,162,164,165,167,168,169,171,172,173,175,176,228,302,303,304,318,326,327,342,],[-23,-44,-50,-49,-41,-47,-39,-59,-42,-51,-58,-40,-45,-43,-46,-57,-52,-53,-60,339,-62,-67,348,]),'RPAREN':([2,9,10,17,18,19,30,34,47,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,72,73,74,75,76,77,78,79,81,82,83,85,103,119,125,136,149,154,158,160,161,162,164,165,167,168,169,171,172,173,175,176,193,194,195,204,205,211,220,221,222,225,228,236,242,247,249,250,251,262,270,271,277,284,289,290,294,302,303,304,305,312,318,321,323,324,326,327,338,339,342,348,],[-172,-171,-69,-85,-70,-71,-72,-73,-23,-129,-133,-74,-144,-87,-102,-103,-130,-68,-86,-141,-104,-145,-99,-131,-139,-128,-132,-135,-95,-105,-142,-136,-140,-23,-134,-97,-75,195,205,-111,221,-101,-44,-50,-49,-41,-47,-39,-59,-42,-51,-58,-40,-45,-43,-46,-185,242,-174,249,-184,251,-96,-88,-98,-100,-57,-81,-173,-76,-183,288,-143,-137,302,303,-56,-186,316,-33,-89,-52,-53,-60,-84,-78,-36,-90,-138,-54,-62,-67,-34,-35,347,353,]),'RETURNS':([288,316,],[313,313,]),'TIMES':([2,8,9,10,13,17,18,19,30,34,39,41,53,54,55,58,60,61,62,63,65,66,67,68,69,72,73,74,75,77,78,79,81,82,83,85,103,136,154,195,202,205,221,222,225,236,242,247,249,251,262,267,305,312,323,],[-172,-74,-171,-69,104,-85,-70,-71,-72,-73,-68,-23,-129,-133,-74,-144,-102,-103,-130,-68,-141,-104,-145,-99,-131,-139,-128,-132,-135,-105,-142,-136,-140,-23,-134,104,-75,-111,-101,-174,-23,-184,-88,104,-100,-81,-173,-76,-183,-143,-137,-68,-84,-78,-138,]),'TRUE':([4,23,26,56,70,71,80,84,92,94,95,97,99,101,102,104,105,113,119,123,125,137,138,139,140,141,142,143,144,145,146,147,148,150,151,152,153,155,159,183,215,218,227,229,230,231,234,235,239,241,245,246,257,260,261,295,299,300,308,309,],[81,81,81,81,-110,81,81,-109,81,-158,81,-107,-124,-125,-126,-106,-108,81,81,81,81,-120,-116,-113,-114,-112,-117,-115,81,-127,-119,-118,-121,81,-123,-122,81,81,81,-157,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'ID':([0,3,4,6,7,12,14,16,21,22,23,25,26,28,35,46,47,56,57,70,71,80,84,86,90,92,94,95,97,99,101,102,104,105,106,110,113,119,122,123,124,125,127,128,129,130,131,133,137,138,139,140,141,142,143,144,145,146,147,148,150,151,152,153,155,157,159,166,178,183,185,196,197,206,208,212,214,215,218,227,229,230,231,234,235,239,240,241,245,246,248,250,257,260,261,280,291,295,299,300,301,308,309,314,317,333,335,336,346,349,354,355,357,],[41,47,82,41,47,-8,82,-9,-7,-6,82,47,82,-5,47,-21,-23,82,82,-110,82,82,-109,41,47,82,-158,82,-107,-124,-125,-126,-106,-108,82,47,82,82,47,82,202,82,-147,47,47,-24,47,82,-120,-116,-113,-114,-112,-117,-115,82,-127,-119,-118,-121,82,-123,-122,82,82,-10,82,47,47,-157,82,47,-15,-28,-22,82,82,82,82,82,82,82,82,82,82,82,47,82,82,82,-146,47,82,82,82,47,47,82,82,82,47,82,82,41,47,47,41,41,41,-32,-31,-30,-29,]),'READ':([0,4,6,12,14,16,21,22,23,26,28,56,57,70,71,80,84,86,92,94,95,97,99,101,102,104,105,106,113,119,123,124,125,127,130,133,137,138,139,140,141,142,143,144,145,146,147,148,150,151,152,153,155,157,159,183,185,197,206,212,214,215,218,227,229,230,231,234,235,239,241,245,246,248,257,260,261,295,299,300,308,309,314,335,336,346,349,354,355,357,],[5,5,5,-8,5,-9,-7,-6,5,5,-5,5,5,-110,5,5,-109,5,5,-158,5,-107,-124,-125,-126,-106,-108,5,5,5,5,5,5,-147,-24,5,-120,-116,-113,-114,-112,-117,-115,5,-127,-119,-118,-121,5,-123,-122,5,5,-10,5,-157,5,-15,-28,5,5,5,5,5,5,5,5,5,5,5,5,5,5,-146,5,5,5,5,5,5,5,5,5,5,5,5,-32,-31,-30,-29,]),'OD':([14,106,107,111,127,184,185,237,248,],[-209,-209,-170,190,-147,-169,-209,279,-146,]),'ELSE':([2,9,10,17,18,19,30,34,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,72,73,74,75,76,77,78,79,81,82,83,85,103,106,107,127,134,136,154,184,195,205,212,213,219,220,221,222,225,236,242,247,248,249,251,252,256,259,262,292,294,305,312,321,322,323,340,],[-172,-171,-69,-85,-70,-71,-72,-73,-129,-133,-74,-144,-87,-102,-103,-130,-68,-86,-141,-104,-145,-99,-131,-139,-128,-132,-135,-95,-105,-142,-136,-140,-23,-134,-97,-75,-209,-170,-147,214,-111,-101,-169,-174,-184,-209,-164,257,-96,-88,-98,-100,-81,-173,-76,-146,-183,-143,-168,-91,257,-137,214,-89,-84,-78,-90,-93,-138,-94,]),'$end':([6,11,12,15,16,21,22,28,86,87,88,127,130,156,157,197,206,248,349,354,355,357,],[-209,-1,-8,0,-9,-7,-6,-5,-209,-4,-2,-147,-24,-3,-10,-15,-28,-146,-32,-31,-30,-29,]),'WHILE':([2,9,10,14,17,18,19,30,34,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,72,73,74,75,76,77,78,79,81,82,83,85,103,112,136,154,158,160,161,164,169,173,176,186,187,188,195,205,220,221,222,225,236,242,247,249,251,262,282,294,302,303,305,306,310,312,321,323,328,330,332,341,],[-172,-171,-69,113,-85,-70,-71,-72,-73,-129,-133,-74,-144,-87,-102,-103,-130,-68,-86,-141,-104,-145,-99,-131,-139,-128,-132,-135,-95,-105,-142,-136,-140,-23,-134,-97,-75,113,-111,-101,-44,-50,-49,-47,-51,-45,-46,-199,-198,-197,-174,-184,-96,-88,-98,-100,-81,-173,-76,-183,-143,-137,-207,-89,-52,-53,-84,-206,-203,-78,-90,-138,-202,-205,-201,-200,]),'MINUS':([2,4,8,9,10,13,17,18,19,23,26,30,34,39,41,53,54,55,56,58,60,61,62,63,65,66,67,68,69,71,72,73,74,75,76,77,78,79,81,82,83,85,92,94,95,97,99,101,102,103,104,105,113,119,123,125,136,137,138,139,140,141,142,143,144,145,146,147,148,150,151,152,153,154,155,159,183,195,202,205,215,218,220,221,222,225,227,229,230,231,234,235,236,239,241,242,245,246,247,249,251,257,260,261,262,267,295,299,300,305,308,309,312,323,],[-172,84,-74,-171,-69,101,-85,-70,-71,84,84,-72,-73,-68,-23,-129,-133,-74,84,-144,-102,-103,-130,-68,-141,-104,-145,-99,-131,84,-139,-128,-132,-135,101,-105,-142,-136,-140,-23,-134,-97,84,-158,84,-107,-124,-125,-126,-75,-106,-108,84,84,84,84,-111,-120,-116,-113,-114,-112,-117,-115,84,-127,-119,-118,-121,84,-123,-122,84,-101,84,84,-157,-174,-23,-184,84,84,101,-88,-98,-100,84,84,84,84,84,84,-81,84,84,-173,84,84,-76,-183,-143,84,84,84,-137,-68,84,84,84,-84,84,84,-78,-138,]),'BY':([2,9,10,17,18,19,30,34,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,72,73,74,75,76,77,78,79,81,82,83,85,103,136,154,195,205,220,221,222,225,236,242,247,249,251,262,281,294,305,312,321,323,],[-172,-171,-69,-85,-70,-71,-72,-73,-129,-133,-74,-144,-87,-102,-103,-130,-68,-86,-141,-104,-145,-99,-131,-139,-128,-132,-135,-95,-105,-142,-136,-140,-23,-134,-97,-75,-111,-101,-174,-184,-96,-88,-98,-100,-81,-173,-76,-183,-143,-137,308,-89,-84,-78,-90,-138,]),'COLON':([2,9,10,17,18,19,30,34,39,41,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,72,73,74,75,76,77,78,79,81,82,83,85,103,136,154,180,181,195,199,200,205,220,221,222,223,225,236,242,247,249,251,262,263,265,267,294,305,312,321,323,],[-172,-171,-69,-85,-70,-71,-72,-73,124,126,-129,-133,-74,-144,-87,-102,-103,-130,-68,-86,-141,-104,-145,-99,-131,-139,-128,-132,-135,-95,-105,-142,-136,-140,-23,-134,-97,-75,-111,-101,-55,235,-174,-79,246,-184,-96,-88,-98,261,-100,-81,-173,-76,-183,-143,-137,-55,299,-68,-89,-84,-78,-90,-138,]),'GREATER':([2,9,10,17,18,19,30,34,53,54,55,58,60,61,62,63,64,65,66,67,68,69,72,73,74,75,76,77,78,79,81,82,83,85,103,136,154,195,205,220,221,222,225,236,242,247,249,251,262,267,305,312,323,],[-172,-171,-69,-85,-70,-71,-72,-73,-129,-133,-74,-144,-102,-103,-130,-68,147,-141,-104,-145,-99,-131,-139,-128,-132,-135,-95,-105,-142,-136,-140,-23,-134,-97,-75,-111,-101,-174,-184,-96,-88,-98,-100,-81,-173,-76,-183,-143,-137,-68,-84,-78,-138,]),'IN':([2,9,10,17,18,19,30,34,47,53,54,55,58,60,61,62,63,64,65,66,67,68,69,72,73,74,75,76,77,78,79,81,82,83,85,103,136,154,189,195,205,220,221,222,225,236,238,242,247,249,251,262,267,305,312,323,],[-172,-171,-69,-85,-70,-71,-72,-73,-23,-129,-133,-74,-144,-102,-103,-130,-68,145,-141,-104,-145,-99,-131,-139,-128,-132,-135,-95,-105,-142,-136,-140,-23,-134,-97,-75,-111,-101,240,-174,-184,-96,-88,-98,-100,-81,280,-173,-76,-183,-143,-137,-68,-84,-78,-138,]),'MODULO':([2,8,9,10,13,17,18,19,30,34,39,41,53,54,55,58,60,61,62,63,65,66,67,68,69,72,73,74,75,77,78,79,81,82,83,85,103,136,154,195,202,205,221,222,225,236,242,247,249,251,262,267,305,312,323,],[-172,-74,-171,-69,105,-85,-70,-71,-72,-73,-68,-23,-129,-133,-74,-144,-102,-103,-130,-68,-141,-104,-145,-99,-131,-139,-128,-132,-135,-105,-142,-136,-140,-23,-134,105,-75,-111,-101,-174,-23,-184,-88,105,-100,-81,-173,-76,-183,-143,-137,-68,-84,-78,-138,]),'PROC':([126,],[207,]),'LTEQUAL':([2,9,10,17,18,19,30,34,53,54,55,58,60,61,62,63,64,65,66,67,68,69,72,73,74,75,76,77,78,79,81,82,83,85,103,136,154,195,205,220,221,222,225,236,242,247,249,251,262,267,305,312,323,],[-172,-171,-69,-85,-70,-71,-72,-73,-129,-133,-74,-144,-102,-103,-130,-68,148,-141,-104,-145,-99,-131,-139,-128,-132,-135,-95,-105,-142,-136,-140,-23,-134,-97,-75,-111,-101,-174,-184,-96,-88,-98,-100,-81,-173,-76,-183,-143,-137,-68,-84,-78,-138,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'then_expression':([135,297,320,],[219,322,340,]),'expression':([4,23,26,56,71,92,95,113,119,123,125,153,159,215,218,227,229,230,231,234,235,239,241,245,246,257,260,261,295,299,300,308,309,],[52,115,118,135,149,179,180,192,193,199,193,223,226,254,256,263,263,263,272,275,277,281,193,285,286,293,297,298,320,277,263,329,330,]),'value_array_element':([4,23,26,56,71,80,92,95,113,119,123,125,144,150,153,155,159,215,218,227,229,230,231,234,235,239,241,245,246,257,260,261,295,299,300,308,309,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'synonym_statement':([0,6,86,314,335,336,346,],[22,22,22,22,22,22,22,]),'membership_operator':([64,],[141,]),'integer_mode':([90,122,131,166,227,240,280,291,300,301,333,],[158,158,158,158,158,158,158,158,158,158,158,]),'right_element':([246,],[287,]),'boolean_literal':([4,23,26,56,71,80,92,95,113,119,123,125,144,150,153,155,159,215,218,227,229,230,231,234,235,239,241,245,246,257,260,261,295,299,300,308,309,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'discrete_range_mode':([90,122,131,166,227,240,280,291,300,301,333,],[164,164,164,164,164,164,164,164,164,164,164,]),'statement':([0,6,86,314,335,336,346,],[6,86,86,86,86,86,86,]),'else_clause':([134,292,],[217,319,]),'string_length':([232,],[273,]),'dereferenced_reference':([0,4,6,14,23,26,56,57,71,80,86,92,95,106,113,119,123,124,125,133,144,150,153,155,159,185,212,214,215,218,227,229,230,231,234,235,239,241,245,246,257,260,261,295,299,300,308,309,314,335,336,346,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'statement_list':([0,],[11,]),'operand4':([4,23,26,56,71,80,92,95,113,119,123,125,144,150,153,155,159,215,218,227,229,230,231,234,235,239,241,245,246,257,260,261,295,299,300,308,309,],[60,60,60,60,60,154,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'action_statement':([0,6,14,86,106,133,185,212,214,314,335,336,346,],[12,12,106,12,106,212,106,106,212,12,12,12,12,]),'operator2':([76,220,],[150,150,]),'step_value':([281,],[311,]),'array_location':([0,4,6,14,23,26,56,57,71,80,86,92,95,106,113,119,123,124,125,133,144,150,153,155,159,185,212,214,215,218,227,229,230,231,234,235,239,241,245,246,257,260,261,295,299,300,308,309,314,335,336,346,],[13,61,13,13,61,61,61,136,61,61,13,61,61,13,61,61,61,13,61,13,61,61,61,61,61,13,13,13,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,13,13,13,13,]),'empty':([6,14,23,86,106,185,212,314,335,336,346,],[87,107,114,87,107,107,107,87,87,87,87,]),'left_element':([123,],[200,]),'arithmetic_additive_operator':([13,76,220,],[98,152,152,]),'initialization':([198,],[244,]),'declaration':([35,196,],[120,120,]),'location':([0,4,6,14,23,26,56,57,71,80,86,92,95,106,113,119,123,124,125,133,144,150,153,155,159,185,212,214,215,218,227,229,230,231,234,235,239,241,245,246,257,260,261,295,299,300,308,309,314,335,336,346,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'then_clause':([52,254,],[134,292,]),'string_slice':([0,4,6,14,23,26,56,57,71,80,86,92,95,106,113,119,123,124,125,133,144,150,153,155,159,185,212,214,215,218,227,229,230,231,234,235,239,241,245,246,257,260,261,295,299,300,308,309,314,335,336,346,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'operand0':([4,23,26,56,71,92,95,113,119,123,125,153,159,215,218,227,229,230,231,234,235,239,241,245,246,257,260,261,295,299,300,308,309,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'step_enumeration':([110,],[187,]),'referenced_location':([4,23,26,56,71,80,92,95,113,119,123,125,144,150,153,155,159,215,218,227,229,230,231,234,235,239,241,245,246,257,260,261,295,299,300,308,309,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'newmode_statement':([0,6,86,314,335,336,346,],[21,21,21,21,21,21,21,]),'closed_dyadic_operator':([13,],[96,]),'if_action':([0,6,14,86,106,124,133,185,212,214,314,335,336,346,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'declaration_statement':([0,6,86,314,335,336,346,],[28,28,28,28,28,28,28,]),'integer_literal':([4,23,26,56,71,80,92,95,113,119,123,125,144,150,153,155,159,215,218,227,229,230,231,232,234,235,239,241,245,246,257,260,261,295,299,300,308,309,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,274,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'operator1':([64,],[144,]),'array_element':([0,4,6,14,23,26,56,57,71,80,86,92,95,106,113,119,123,124,125,133,144,150,153,155,159,185,212,214,215,218,227,229,230,231,234,235,239,241,245,246,257,260,261,295,299,300,308,309,314,335,336,346,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'parameter_list':([119,125,241,],[194,204,284,]),'return_action':([0,6,14,86,106,124,133,185,212,214,314,335,336,346,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'operand1':([4,23,26,56,71,92,95,113,119,123,125,144,153,159,215,218,227,229,230,231,234,235,239,241,245,246,257,260,261,295,299,300,308,309,],[76,76,76,76,76,76,76,76,76,76,76,220,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'mode_name':([90,122,131,166,291,301,333,],[165,165,165,165,165,165,165,]),'boolean_mode':([90,122,131,166,227,240,280,291,300,301,333,],[173,173,173,173,173,173,173,173,173,173,173,]),'while_control':([14,112,],[109,191,]),'action_statement_nullable':([14,106,185,212,],[111,184,237,252,]),'procedure_definition':([126,],[206,]),'composite_mode':([90,122,131,166,291,301,333,],[168,168,168,168,168,168,168,]),'discrete_mode_name':([90,122,131,166,227,240,280,291,300,301,333,],[170,170,170,170,170,170,170,170,170,170,170,]),'monadic_operator':([4,23,26,56,71,92,95,113,119,123,125,144,150,153,155,159,215,218,227,229,230,231,234,235,239,241,245,246,257,260,261,295,299,300,308,309,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'string_mode':([90,122,131,166,291,301,333,],[171,171,171,171,171,171,171,]),'range_enumeration':([110,],[186,]),'result_spec':([288,316,],[315,337,]),'assignment_action':([0,6,14,86,106,124,133,185,212,214,314,335,336,346,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'statement_nullable':([6,86,314,335,336,346,],[88,156,334,344,345,352,]),'relational_operator':([64,],[139,]),'newmode_list':([3,129,],[49,209,]),'operand2':([4,23,26,56,71,92,95,113,119,123,125,144,150,153,159,215,218,227,229,230,231,234,235,239,241,245,246,257,260,261,295,299,300,308,309,],[85,85,85,85,85,85,85,85,85,85,85,85,222,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'index_mode_list':([227,300,],[269,325,]),'element_mode':([301,],[326,]),'arithmetic_multiplicative_operator':([13,85,222,],[93,155,155,]),'builtin_call':([0,4,6,14,23,26,56,57,71,80,86,92,95,106,113,119,123,124,125,133,144,150,153,155,159,185,212,214,215,218,227,229,230,231,234,235,239,241,245,246,257,260,261,295,299,300,308,309,314,335,336,346,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'synonym_list':([7,178,],[89,233,]),'call_action':([0,4,6,14,23,26,56,57,71,80,86,92,95,106,113,119,123,124,125,133,144,150,153,155,159,185,212,214,215,218,227,229,230,231,234,235,239,241,245,246,257,260,261,295,299,300,308,309,314,335,336,346,],[8,55,8,8,55,55,55,55,55,55,8,55,55,8,55,55,55,8,55,8,55,55,55,55,55,8,8,8,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,8,8,8,8,]),'conditional_expression':([4,23,26,56,71,92,95,113,119,123,125,153,159,215,218,227,229,230,231,234,235,239,241,245,246,257,260,261,295,299,300,308,309,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'iteration':([110,],[188,]),'identifier_list':([3,7,35,128,129,178,196,250,317,],[50,90,122,208,50,90,122,291,291,]),'array_mode':([90,122,131,166,291,301,333,],[167,167,167,167,167,167,167,]),'procedure_call':([0,4,6,14,23,26,56,57,71,80,86,92,95,106,113,119,123,124,125,133,144,150,153,155,159,185,212,214,215,218,227,229,230,231,234,235,239,241,245,246,257,260,261,295,299,300,308,309,314,335,336,346,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'elsif_expression':([219,],[259,]),'empty_literal':([4,23,26,56,71,80,92,95,113,119,123,125,144,150,153,155,159,215,218,227,229,230,231,234,235,239,241,245,246,257,260,261,295,299,300,308,309,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'declaration_list':([35,196,],[121,243,]),'result':([23,],[116,]),'discrete_mode':([90,122,131,166,227,240,280,291,300,301,333,],[172,172,172,172,264,282,306,172,264,172,172,]),'end_value':([281,307,311,331,],[310,328,332,341,]),'value_array_slice':([4,23,26,56,71,80,92,95,113,119,123,125,144,150,153,155,159,215,218,227,229,230,231,234,235,239,241,245,246,257,260,261,295,299,300,308,309,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'upper_bound':([235,299,],[278,324,]),'formal_parameter_list':([250,317,],[289,338,]),'control_part':([14,],[108,]),'program':([0,],[15,]),'procedure_statement':([0,6,86,314,335,336,346,],[16,16,16,16,16,16,16,]),'formal_parameter':([250,317,],[290,290,]),'string_element':([0,4,6,14,23,26,56,57,71,80,86,92,95,106,113,119,123,124,125,133,144,150,153,155,159,185,212,214,215,218,227,229,230,231,234,235,239,241,245,246,257,260,261,295,299,300,308,309,314,335,336,346,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'exit_action':([0,6,14,86,106,124,133,185,212,214,314,335,336,346,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'literal':([4,23,26,56,71,80,92,95,113,119,123,125,144,150,153,155,159,215,218,227,229,230,231,234,235,239,241,245,246,257,260,261,295,299,300,308,309,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'else_expression':([219,259,],[258,296,]),'assigning_operator':([13,],[92,]),'operand3':([4,23,26,56,71,92,95,113,119,123,125,144,150,153,155,159,215,218,227,229,230,231,234,235,239,241,245,246,257,260,261,295,299,300,308,309,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,225,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'parenthesized_expression':([4,23,26,56,71,80,92,95,113,119,123,125,144,150,153,155,159,215,218,227,229,230,231,234,235,239,241,245,246,257,260,261,295,299,300,308,309,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'action_statement_list':([133,214,],[213,253,]),'reference_mode':([90,122,131,166,291,301,333,],[162,162,162,162,162,162,162,]),'result_action':([0,6,14,86,106,124,133,185,212,214,314,335,336,346,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'builtin_name':([0,4,6,14,23,26,56,57,71,80,86,92,95,106,113,119,123,124,125,133,144,150,153,155,159,185,212,214,215,218,227,229,230,231,234,235,239,241,245,246,257,260,261,295,299,300,308,309,314,335,336,346,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'do_action':([0,6,14,86,106,124,133,185,212,214,314,335,336,346,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'array_slice':([0,4,6,14,23,26,56,57,71,80,86,92,95,106,113,119,123,124,125,133,144,150,153,155,159,185,212,214,215,218,227,229,230,231,234,235,239,241,245,246,257,260,261,295,299,300,308,309,314,335,336,346,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'mode_definition':([3,129,],[48,48,]),'primitive_value':([4,23,26,56,71,80,92,95,113,119,123,125,144,150,153,155,159,215,218,227,229,230,231,234,235,239,241,245,246,257,260,261,295,299,300,308,309,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'lower_bound':([95,227,229,230,300,],[181,265,265,265,265,]),'identifier':([0,3,4,6,7,14,23,25,26,35,56,57,71,80,86,90,92,95,106,110,113,119,122,123,124,125,128,129,131,133,144,150,153,155,159,166,178,185,196,212,214,215,218,227,229,230,231,234,235,239,240,241,245,246,250,257,260,261,280,291,295,299,300,301,308,309,314,317,333,335,336,346,],[39,46,63,39,46,39,63,117,63,46,63,63,63,63,39,175,63,63,39,189,63,63,175,63,63,63,46,46,175,39,63,63,63,63,63,175,46,39,46,39,39,63,63,267,63,63,63,63,63,63,283,63,63,63,46,63,63,63,283,175,63,63,267,175,63,63,39,46,175,39,39,39,]),'synonym_definition':([7,178,],[91,91,]),'bracketed_action':([0,6,14,86,106,124,133,185,212,214,314,335,336,346,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'character_string_literal':([4,23,26,56,71,80,92,95,113,119,123,125,144,150,153,155,159,215,218,227,229,230,231,234,235,239,241,245,246,257,260,261,295,299,300,308,309,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'string_concatenation_operator':([13,76,220,],[100,151,151,]),'index_mode':([227,300,],[268,268,]),'expression_list':([95,153,234,],[182,224,276,]),'character_literal':([4,23,26,56,71,80,92,95,113,119,123,125,144,150,153,155,159,215,218,227,229,230,231,234,235,239,241,245,246,257,260,261,295,299,300,308,309,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'for_control':([14,],[112,]),'mode':([90,122,131,166,291,301,333,],[174,198,210,228,318,327,342,]),'start_element':([123,],[201,]),'action':([0,6,14,86,106,124,133,185,212,214,314,335,336,346,],[45,45,45,45,45,203,45,45,45,45,45,45,45,45,]),'character_mode':([90,122,131,166,227,240,280,291,300,301,333,],[176,176,176,176,176,176,176,176,176,176,176,]),'literal_range':([227,229,230,300,],[266,270,271,266,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','Parser.py',72),
  ('statement_list -> statement statement_nullable','statement_list',2,'p_statement_list','Parser.py',76),
  ('statement_nullable -> statement statement_nullable','statement_nullable',2,'p_statement_nullable','Parser.py',88),
  ('statement_nullable -> empty','statement_nullable',1,'p_statement_nullable','Parser.py',89),
  ('statement -> declaration_statement','statement',1,'p_statement','Parser.py',101),
  ('statement -> synonym_statement','statement',1,'p_statement','Parser.py',102),
  ('statement -> newmode_statement','statement',1,'p_statement','Parser.py',103),
  ('statement -> action_statement','statement',1,'p_statement','Parser.py',104),
  ('statement -> procedure_statement','statement',1,'p_statement','Parser.py',105),
  ('synonym_statement -> SYN synonym_list SEMI','synonym_statement',3,'p_synonym_statement','Parser.py',114),
  ('synonym_list -> synonym_definition','synonym_list',1,'p_synonym_list','Parser.py',118),
  ('synonym_list -> synonym_definition COMMA synonym_list','synonym_list',3,'p_synonym_list','Parser.py',119),
  ('synonym_definition -> identifier_list mode ASSIGN expression','synonym_definition',4,'p_synonym_definition','Parser.py',128),
  ('synonym_definition -> identifier_list ASSIGN expression','synonym_definition',3,'p_synonym_definition','Parser.py',129),
  ('declaration_statement -> DCL declaration_list SEMI','declaration_statement',3,'p_declaration_statement','Parser.py',143),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','Parser.py',147),
  ('declaration_list -> declaration COMMA declaration_list','declaration_list',3,'p_declaration_list','Parser.py',148),
  ('declaration -> identifier_list mode initialization','declaration',3,'p_declaration','Parser.py',157),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','Parser.py',158),
  ('initialization -> ASSIGN expression','initialization',2,'p_initialization','Parser.py',162),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','Parser.py',166),
  ('identifier_list -> identifier COMMA identifier_list','identifier_list',3,'p_identifier_list','Parser.py',167),
  ('identifier -> ID','identifier',1,'p_identifier','Parser.py',176),
  ('newmode_statement -> TYPE newmode_list SEMI','newmode_statement',3,'p_newmode_statement','Parser.py',186),
  ('newmode_list -> mode_definition','newmode_list',1,'p_newmode_list','Parser.py',190),
  ('newmode_list -> mode_definition COMMA newmode_list','newmode_list',3,'p_newmode_list','Parser.py',191),
  ('mode_definition -> identifier_list ASSIGN mode','mode_definition',3,'p_mode_definition','Parser.py',200),
  ('procedure_statement -> ID COLON procedure_definition','procedure_statement',3,'p_procedure_statement','Parser.py',211),
  ('procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI','procedure_definition',9,'p_procedure_definition','Parser.py',215),
  ('procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI','procedure_definition',8,'p_procedure_definition','Parser.py',216),
  ('procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI','procedure_definition',8,'p_procedure_definition','Parser.py',217),
  ('procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI','procedure_definition',7,'p_procedure_definition','Parser.py',218),
  ('formal_parameter_list -> formal_parameter','formal_parameter_list',1,'p_formal_parameter_list','Parser.py',231),
  ('formal_parameter_list -> formal_parameter COMMA formal_parameter_list','formal_parameter_list',3,'p_formal_parameter_list','Parser.py',232),
  ('formal_parameter -> identifier_list mode LOC','formal_parameter',3,'p_formal_parameter','Parser.py',241),
  ('formal_parameter -> identifier_list mode','formal_parameter',2,'p_formal_parameter','Parser.py',242),
  ('result_spec -> RETURNS LPAREN mode LOC RPAREN','result_spec',5,'p_result_spec','Parser.py',248),
  ('result_spec -> RETURNS LPAREN mode RPAREN','result_spec',4,'p_result_spec','Parser.py',249),
  ('mode -> mode_name','mode',1,'p_mode','Parser.py',254),
  ('mode -> discrete_mode','mode',1,'p_mode','Parser.py',255),
  ('mode -> reference_mode','mode',1,'p_mode','Parser.py',256),
  ('mode -> composite_mode','mode',1,'p_mode','Parser.py',257),
  ('mode_name -> identifier','mode_name',1,'p_mode_name','Parser.py',261),
  ('discrete_mode -> integer_mode','discrete_mode',1,'p_discrete_mode','Parser.py',269),
  ('discrete_mode -> boolean_mode','discrete_mode',1,'p_discrete_mode','Parser.py',270),
  ('discrete_mode -> character_mode','discrete_mode',1,'p_discrete_mode','Parser.py',271),
  ('discrete_mode -> discrete_range_mode','discrete_mode',1,'p_discrete_mode','Parser.py',272),
  ('discrete_mode_name -> identifier','discrete_mode_name',1,'p_discrete_mode_name','Parser.py',276),
  ('integer_mode -> INT','integer_mode',1,'p_integer_mode','Parser.py',280),
  ('boolean_mode -> BOOL','boolean_mode',1,'p_boolean_mode','Parser.py',284),
  ('character_mode -> CHAR','character_mode',1,'p_character_mode','Parser.py',288),
  ('discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','Parser.py',297),
  ('discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','Parser.py',298),
  ('literal_range -> lower_bound COLON upper_bound','literal_range',3,'p_literal_range','Parser.py',302),
  ('lower_bound -> expression','lower_bound',1,'p_lower_bound','Parser.py',306),
  ('upper_bound -> expression','upper_bound',1,'p_upper_bound','Parser.py',310),
  ('reference_mode -> REF mode','reference_mode',2,'p_reference_mode','Parser.py',317),
  ('composite_mode -> string_mode','composite_mode',1,'p_composite_mode','Parser.py',324),
  ('composite_mode -> array_mode','composite_mode',1,'p_composite_mode','Parser.py',325),
  ('string_mode -> CHARS LBRACKET string_length RBRACKET','string_mode',4,'p_string_mode','Parser.py',329),
  ('string_length -> integer_literal','string_length',1,'p_string_length','Parser.py',333),
  ('array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode','array_mode',5,'p_array_mode','Parser.py',337),
  ('index_mode_list -> index_mode','index_mode_list',1,'p_index_mode_list','Parser.py',341),
  ('index_mode_list -> index_mode COMMA index_mode_list','index_mode_list',3,'p_index_mode_list','Parser.py',342),
  ('index_mode -> discrete_mode','index_mode',1,'p_index_mode','Parser.py',351),
  ('index_mode -> literal_range','index_mode',1,'p_index_mode','Parser.py',352),
  ('element_mode -> mode','element_mode',1,'p_element_mode','Parser.py',356),
  ('location -> identifier','location',1,'p_location','Parser.py',367),
  ('location -> dereferenced_reference','location',1,'p_location','Parser.py',368),
  ('location -> string_element','location',1,'p_location','Parser.py',369),
  ('location -> string_slice','location',1,'p_location','Parser.py',370),
  ('location -> array_element','location',1,'p_location','Parser.py',371),
  ('location -> array_slice','location',1,'p_location','Parser.py',372),
  ('location -> call_action','location',1,'p_location','Parser.py',373),
  ('dereferenced_reference -> array_location ARROW','dereferenced_reference',2,'p_dereferenced_reference','Parser.py',377),
  ('string_element -> identifier LBRACKET start_element RBRACKET','string_element',4,'p_string_element','Parser.py',381),
  ('start_element -> expression','start_element',1,'p_start_element','Parser.py',385),
  ('string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET','string_slice',6,'p_string_slice','Parser.py',389),
  ('left_element -> expression','left_element',1,'p_left_element','Parser.py',393),
  ('right_element -> expression','right_element',1,'p_right_element','Parser.py',397),
  ('array_element -> array_location LBRACKET expression_list RBRACKET','array_element',4,'p_array_element','Parser.py',401),
  ('expression_list -> expression','expression_list',1,'p_expression_list','Parser.py',405),
  ('expression_list -> expression COMMA expression_list','expression_list',3,'p_expression_list','Parser.py',406),
  ('array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET','array_slice',6,'p_array_slice','Parser.py',413),
  ('array_location -> location','array_location',1,'p_array_location','Parser.py',417),
  ('expression -> operand0','expression',1,'p_expression','Parser.py',427),
  ('expression -> conditional_expression','expression',1,'p_expression','Parser.py',428),
  ('parenthesized_expression -> LPAREN expression RPAREN','parenthesized_expression',3,'p_parenthesized_expression','Parser.py',432),
  ('conditional_expression -> IF expression then_expression else_expression FI','conditional_expression',5,'p_conditional_expression','Parser.py',440),
  ('conditional_expression -> IF expression then_expression elsif_expression else_expression FI','conditional_expression',6,'p_conditional_expression','Parser.py',441),
  ('then_expression -> THEN expression','then_expression',2,'p_then_expression','Parser.py',445),
  ('else_expression -> ELSE expression','else_expression',2,'p_else_expression','Parser.py',449),
  ('elsif_expression -> ELSIF expression then_expression','elsif_expression',3,'p_elsif_expression','Parser.py',453),
  ('elsif_expression -> elsif_expression ELSIF expression then_expression','elsif_expression',4,'p_elsif_expression','Parser.py',454),
  ('operand0 -> operand1','operand0',1,'p_operand0','Parser.py',469),
  ('operand0 -> operand0 operator1 operand1','operand0',3,'p_operand0','Parser.py',470),
  ('operand1 -> operand2','operand1',1,'p_operand1','Parser.py',477),
  ('operand1 -> operand1 operator2 operand2','operand1',3,'p_operand1','Parser.py',478),
  ('operand2 -> operand3','operand2',1,'p_operand2','Parser.py',485),
  ('operand2 -> operand2 arithmetic_multiplicative_operator operand3','operand2',3,'p_operand2','Parser.py',486),
  ('operand3 -> monadic_operator operand4','operand3',2,'p_operand3','Parser.py',494),
  ('operand3 -> operand4','operand3',1,'p_operand3','Parser.py',495),
  ('operand4 -> array_location','operand4',1,'p_operand4','Parser.py',502),
  ('operand4 -> referenced_location','operand4',1,'p_operand4','Parser.py',503),
  ('operand4 -> primitive_value','operand4',1,'p_operand4','Parser.py',504),
  ('arithmetic_multiplicative_operator -> TIMES','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',515),
  ('arithmetic_multiplicative_operator -> DIVIDE','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',516),
  ('arithmetic_multiplicative_operator -> MODULO','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',517),
  ('monadic_operator -> MINUS','monadic_operator',1,'p_monadic_operator','Parser.py',521),
  ('monadic_operator -> NOT','monadic_operator',1,'p_monadic_operator','Parser.py',522),
  ('referenced_location -> ARROW array_location','referenced_location',2,'p_referenced_location','Parser.py',526),
  ('operator1 -> membership_operator','operator1',1,'p_operator1','Parser.py',530),
  ('operator1 -> relational_operator','operator1',1,'p_operator1','Parser.py',531),
  ('relational_operator -> AND','relational_operator',1,'p_relational_operator','Parser.py',534),
  ('relational_operator -> OR','relational_operator',1,'p_relational_operator','Parser.py',535),
  ('relational_operator -> EQUAL','relational_operator',1,'p_relational_operator','Parser.py',536),
  ('relational_operator -> NOTEQ','relational_operator',1,'p_relational_operator','Parser.py',537),
  ('relational_operator -> GREATER','relational_operator',1,'p_relational_operator','Parser.py',538),
  ('relational_operator -> GTEQUAL','relational_operator',1,'p_relational_operator','Parser.py',539),
  ('relational_operator -> LESS','relational_operator',1,'p_relational_operator','Parser.py',540),
  ('relational_operator -> LTEQUAL','relational_operator',1,'p_relational_operator','Parser.py',541),
  ('operator2 -> arithmetic_additive_operator','operator2',1,'p_operator2','Parser.py',545),
  ('operator2 -> string_concatenation_operator','operator2',1,'p_operator2','Parser.py',546),
  ('arithmetic_additive_operator -> PLUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','Parser.py',550),
  ('arithmetic_additive_operator -> MINUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','Parser.py',551),
  ('string_concatenation_operator -> CONCAT','string_concatenation_operator',1,'p_string_concatenation_operator','Parser.py',555),
  ('membership_operator -> IN','membership_operator',1,'p_membership_operator','Parser.py',560),
  ('primitive_value -> literal','primitive_value',1,'p_primitive_value','Parser.py',572),
  ('primitive_value -> value_array_element','primitive_value',1,'p_primitive_value','Parser.py',573),
  ('primitive_value -> value_array_slice','primitive_value',1,'p_primitive_value','Parser.py',574),
  ('primitive_value -> parenthesized_expression','primitive_value',1,'p_primitive_value','Parser.py',575),
  ('literal -> integer_literal','literal',1,'p_literal','Parser.py',579),
  ('literal -> boolean_literal','literal',1,'p_literal','Parser.py',580),
  ('literal -> character_literal','literal',1,'p_literal','Parser.py',581),
  ('literal -> empty_literal','literal',1,'p_literal','Parser.py',582),
  ('literal -> character_string_literal','literal',1,'p_literal','Parser.py',583),
  ('value_array_element -> primitive_value LBRACKET expression_list RBRACKET','value_array_element',4,'p_value_array_element','Parser.py',587),
  ('value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET','value_array_slice',6,'p_value_array_slice','Parser.py',591),
  ('integer_literal -> ICONST','integer_literal',1,'p_integer_literal','Parser.py',599),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','Parser.py',603),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','Parser.py',604),
  ('character_literal -> CCONST','character_literal',1,'p_character_literal','Parser.py',608),
  ('character_literal -> HAT LPAREN ICONST RPAREN','character_literal',4,'p_character_literal','Parser.py',609),
  ('empty_literal -> NULL','empty_literal',1,'p_empty_literal','Parser.py',618),
  ('character_string_literal -> SCONST','character_string_literal',1,'p_character_string_literal','Parser.py',622),
  ('action_statement -> identifier COLON action SEMI','action_statement',4,'p_action_statement','Parser.py',633),
  ('action_statement -> action SEMI','action_statement',2,'p_action_statement','Parser.py',634),
  ('action -> bracketed_action','action',1,'p_action','Parser.py',639),
  ('action -> assignment_action','action',1,'p_action','Parser.py',640),
  ('action -> call_action','action',1,'p_action','Parser.py',641),
  ('action -> exit_action','action',1,'p_action','Parser.py',642),
  ('action -> result_action','action',1,'p_action','Parser.py',643),
  ('action -> return_action','action',1,'p_action','Parser.py',644),
  ('bracketed_action -> if_action','bracketed_action',1,'p_bracketed_action','Parser.py',648),
  ('bracketed_action -> do_action','bracketed_action',1,'p_bracketed_action','Parser.py',649),
  ('assignment_action -> array_location assigning_operator expression','assignment_action',3,'p_assignment_action','Parser.py',653),
  ('assigning_operator -> closed_dyadic_operator ASSIGN','assigning_operator',2,'p_assigning_operator','Parser.py',657),
  ('assigning_operator -> ASSIGN','assigning_operator',1,'p_assigning_operator','Parser.py',658),
  ('closed_dyadic_operator -> arithmetic_additive_operator','closed_dyadic_operator',1,'p_closed_dyadic_operator','Parser.py',662),
  ('closed_dyadic_operator -> arithmetic_multiplicative_operator','closed_dyadic_operator',1,'p_closed_dyadic_operator','Parser.py',663),
  ('closed_dyadic_operator -> string_concatenation_operator','closed_dyadic_operator',1,'p_closed_dyadic_operator','Parser.py',664),
  ('if_action -> IF expression then_clause else_clause FI','if_action',5,'p_if_action','Parser.py',668),
  ('if_action -> IF expression then_clause FI','if_action',4,'p_if_action','Parser.py',669),
  ('then_clause -> THEN action_statement_list','then_clause',2,'p_then_clause','Parser.py',673),
  ('else_clause -> ELSE action_statement_list','else_clause',2,'p_else_clause','Parser.py',677),
  ('else_clause -> ELSIF expression then_clause else_clause','else_clause',4,'p_else_clause','Parser.py',678),
  ('else_clause -> ELSIF expression then_clause','else_clause',3,'p_else_clause','Parser.py',679),
  ('action_statement_list -> action_statement action_statement_nullable','action_statement_list',2,'p_action_statement_list','Parser.py',690),
  ('action_statement_nullable -> action_statement action_statement_nullable','action_statement_nullable',2,'p_action_statement_nullable','Parser.py',702),
  ('action_statement_nullable -> empty','action_statement_nullable',1,'p_action_statement_nullable','Parser.py',703),
  ('call_action -> procedure_call','call_action',1,'p_call_action','Parser.py',720),
  ('call_action -> builtin_call','call_action',1,'p_call_action','Parser.py',721),
  ('builtin_call -> builtin_name LPAREN parameter_list RPAREN','builtin_call',4,'p_builtin_call','Parser.py',725),
  ('builtin_call -> builtin_name LPAREN RPAREN','builtin_call',3,'p_builtin_call','Parser.py',726),
  ('builtin_name -> ABS','builtin_name',1,'p_builtin_name','Parser.py',731),
  ('builtin_name -> ASC','builtin_name',1,'p_builtin_name','Parser.py',732),
  ('builtin_name -> NUM','builtin_name',1,'p_builtin_name','Parser.py',733),
  ('builtin_name -> UPPER','builtin_name',1,'p_builtin_name','Parser.py',734),
  ('builtin_name -> LOWER','builtin_name',1,'p_builtin_name','Parser.py',735),
  ('builtin_name -> LENGTH','builtin_name',1,'p_builtin_name','Parser.py',736),
  ('builtin_name -> READ','builtin_name',1,'p_builtin_name','Parser.py',737),
  ('builtin_name -> PRINT','builtin_name',1,'p_builtin_name','Parser.py',738),
  ('procedure_call -> ID LPAREN parameter_list RPAREN','procedure_call',4,'p_procedure_call','Parser.py',742),
  ('procedure_call -> ID LPAREN RPAREN','procedure_call',3,'p_procedure_call','Parser.py',743),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','Parser.py',747),
  ('parameter_list -> expression COMMA parameter_list','parameter_list',3,'p_parameter_list','Parser.py',748),
  ('exit_action -> EXIT identifier','exit_action',2,'p_exit_action','Parser.py',757),
  ('return_action -> RETURN result','return_action',2,'p_return_action','Parser.py',765),
  ('result -> expression','result',1,'p_result','Parser.py',769),
  ('result -> empty','result',1,'p_result','Parser.py',770),
  ('result_action -> RESULT expression','result_action',2,'p_result_action','Parser.py',773),
  ('do_action -> DO control_part SEMI action_statement_nullable OD','do_action',5,'p_do_action','Parser.py',781),
  ('do_action -> DO action_statement_nullable OD','do_action',3,'p_do_action','Parser.py',782),
  ('control_part -> for_control while_control','control_part',2,'p_control_part','Parser.py',789),
  ('control_part -> for_control','control_part',1,'p_control_part','Parser.py',790),
  ('control_part -> while_control','control_part',1,'p_control_part','Parser.py',791),
  ('for_control -> FOR iteration','for_control',2,'p_for_control','Parser.py',795),
  ('iteration -> step_enumeration','iteration',1,'p_iteration','Parser.py',799),
  ('iteration -> range_enumeration','iteration',1,'p_iteration','Parser.py',800),
  ('step_enumeration -> identifier ASSIGN expression step_value DOWN end_value','step_enumeration',6,'p_step_enumeration','Parser.py',804),
  ('step_enumeration -> identifier ASSIGN expression step_value end_value','step_enumeration',5,'p_step_enumeration','Parser.py',805),
  ('step_enumeration -> identifier ASSIGN expression DOWN end_value','step_enumeration',5,'p_step_enumeration','Parser.py',806),
  ('step_enumeration -> identifier ASSIGN expression end_value','step_enumeration',4,'p_step_enumeration','Parser.py',807),
  ('step_value -> BY expression','step_value',2,'p_step_value','Parser.py',819),
  ('end_value -> TO expression','end_value',2,'p_end_value','Parser.py',823),
  ('range_enumeration -> identifier DOWN IN discrete_mode','range_enumeration',4,'p_range_enumeration','Parser.py',827),
  ('range_enumeration -> identifier IN discrete_mode','range_enumeration',3,'p_range_enumeration','Parser.py',828),
  ('while_control -> WHILE expression','while_control',2,'p_while_control','Parser.py',835),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',841),
]
