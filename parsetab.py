
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ICONST CCONST SCONST COMMA PLUS MINUS TIMES DIVIDE COLON LPAREN RPAREN ASSIGN SEMI ARROW LTEQUAL LESS GREATER GTEQUAL EQUAL LBRACKET RBRACKET ID MODULO AND OR NOTEQ NOT CONCAT TRUE DO THEN OD ABS LOC UPPER RESULT SYN BOOL CHARS END NUM IF TO CHAR RETURN EXIT PRINT DCL RETURNS NULL ASC IN LENGTH PROC WHILE FOR LOWER ELSE FALSE ELSIF FI INT TYPE READ DOWN ARRAY REF BYprogram : statement_liststatement_list : statement statement_nullablestatement_nullable : statement statement_nullable\n                              | emptystatement : declaration_statement\n                     | synonym_statement\n                     | newmode_statement\n                     | procedure_statementsynonym_statement : SYN synonym_list SEMIsynonym_list : synonym_definition\n                        | synonym_definition COMMA synonym_listsynonym_definition : identifier_list mode ASSIGN expression\n                              | identifier_list ASSIGN expressiondeclaration_statement : DCL declaration_list SEMIdeclaration_list : declaration\n                            | declaration COMMA declaration_listdeclaration : identifier_list mode initialization\n                       | identifier_list modeinitialization : ASSIGN expressionidentifier_list : identifier\n                           | identifier COMMA identifier_listidentifier : IDnewmode_statement : TYPE newmode_list SEMInewmode_list : mode_definition\n                        | mode_definition COMMA newmode_listmode_definition : identifier_list ASSIGN modeprocedure_statement : ID COLON procedure_definitionprocedure_definition : PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI\n                                | PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMIformal_parameter_list : formal_parameter\n                                 | formal_parameter COMMA formal_parameterformal_parameter : identifier_list mode LOC\n                            | identifier_list moderesult_spec : RETURNS LPAREN mode LOC RPAREN\n                       | RETURNS LPAREN mode RPARENmode : mode_name\n                | discrete_mode\n                | reference_mode\n                | composite_modemode_name : identifierdiscrete_mode : integer_mode\n                         | boolean_mode\n                         | character_mode\n                         | discrete_range_modediscrete_mode_name : identifierinteger_mode : INTboolean_mode : BOOLcharacter_mode : CHARdiscrete_range_mode : discrete_mode_name LPAREN literal_range RPAREN\n                               | discrete_mode LPAREN literal_range RPARENliteral_range : lower_bound COLON upper_boundlower_bound : expressionupper_bound : expressionreference_mode : REF modecomposite_mode : string_mode\n                          | array_modestring_mode : CHARS LBRACKET string_length RBRACKETstring_length : integer_literalarray_mode : ARRAY LBRACKET index_mode_list RBRACKET element_modeindex_mode_list : index_mode\n                           | index_mode COMMA index_mode_listindex_mode : discrete_mode\n                      | literal_rangeelement_mode : modelocation : identifier\n\t\t\t\t    | dereferenced_reference\n\t\t\t\t    | string_element\n\t\t\t\t    | string_slice\n\t\t\t\t    | array_element\n\t\t\t\t    | array_slicedereferenced_reference : array_location ARROWstring_element : identifier LBRACKET start_element LBRACKETstart_element : expressionstring_slice : identifier LBRACKET left_element COLON right_element RBRACKETleft_element : expressionright_element : expressionarray_element : array_location LBRACKET expression_list RBRACKETexpression_list : expression\n    \t\t\t\t\t   | expression COMMA expression_listarray_slice : array_location LBRACKET lower_bound COLON upper_bound RBRACKETarray_location : locationexpression : operand0\n                      | conditional_expressionconditional_expression : IF expression then_expression else_expression FI\n                                  | IF expression then_expression elsif_expression else_expression FIthen_expression : THEN expressionelse_expression : ELSE expressionelsif_expression : ELSIF expression then_expression\n                            | elsif_expression ELSIF expression then_expressionoperand0 : operand1\n                    | operand0 operator1 operand1operand1 : operand2\n                    | operand1 operator2 operand2operand2 : operand3\n                    | operand2 arithmetic_multiplicative_operator operand3operand3 : monadic_operator operand4\n                    | operand4operand4 : array_location\n                    | referenced_location\n                    | primitive_valuearithmetic_multiplicative_operator : TIMES\n                                              | DIVIDE\n                                              | MODULOmonadic_operator : MINUS\n                            | NOTreferenced_location : ARROW array_locationoperator1 : relational_operator\n                     | membership_operatoroperator2 : arithmetic_additive_operator\n                     | string_concatenation_operatorarithmetic_additive_operator : PLUS\n                                        | MINUSstring_concatenation_operator : CONCATrelational_operator : AND\n                               | OR\n                               | EQUAL\n                               | NOTEQ\n                               | GREATER\n                               | GTEQUAL\n                               | LESS\n                               | LTEQUALmembership_operator : INprimitive_value : literalliteral : integer_literal\n                   | boolean_literal\n                   | character_literal\n                   | empty_literal\n                   | character_string_literalinteger_literal : ICONSTboolean_literal : TRUE\n                           | FALSEcharacter_literal : CCONSTempty_literal : NULLcharacter_string_literal : SCONSTempty :'
    
_lr_action_items = {'PLUS':([15,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,91,92,94,95,97,98,101,102,103,104,117,122,123,132,166,169,170,183,185,207,208,],[-22,-98,-123,-66,-94,-124,-100,-99,-131,-67,-81,-70,-65,-126,126,-130,-129,-132,-69,-128,-134,-133,-68,-127,-97,-92,-125,-65,-106,-71,-96,-93,-95,126,-77,-72,-80,-74,]),'TYPE':([0,1,5,6,8,10,22,28,29,33,56,174,192,215,218,],[4,-5,-8,-6,-7,4,4,-27,-23,-14,-9,4,4,-29,-28,]),'ARROW':([15,57,64,67,68,70,73,75,81,82,83,84,90,92,93,96,98,99,106,117,122,123,124,125,126,127,128,129,130,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,155,159,167,181,182,183,184,185,188,190,200,207,208,],[-22,72,72,72,72,72,123,-66,-67,-81,-70,-65,-104,-69,72,-105,-68,72,72,-65,123,-71,72,72,-111,72,-109,-110,-113,-112,-102,72,-103,-101,-118,-114,-119,-115,-108,-120,72,-107,-117,-116,-122,-121,72,72,72,72,72,-77,72,-72,72,72,72,-80,-74,]),'DIVIDE':([15,73,74,75,76,77,78,79,80,81,82,83,84,85,87,89,91,92,94,95,97,98,101,102,103,104,117,122,123,132,166,169,183,185,207,208,],[-22,-98,-123,-66,-94,-124,-100,-99,-131,-67,-81,-70,-65,-126,-130,-129,-132,-69,-128,-134,-133,-68,-127,-97,134,-125,-65,-106,-71,-96,134,-95,-77,-72,-80,-74,]),'GREATER':([15,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,91,92,94,95,97,98,101,102,103,104,105,117,122,123,132,166,169,170,183,185,207,208,],[-22,-98,-123,-66,-94,-124,-100,-99,-131,-67,-81,-70,-65,-126,-90,-130,-129,-132,-69,-128,-134,-133,-68,-127,-97,-92,-125,138,-65,-106,-71,-96,-93,-95,-91,-77,-72,-80,-74,]),'MODULO':([15,73,74,75,76,77,78,79,80,81,82,83,84,85,87,89,91,92,94,95,97,98,101,102,103,104,117,122,123,132,166,169,183,185,207,208,],[-22,-98,-123,-66,-94,-124,-100,-99,-131,-67,-81,-70,-65,-126,-130,-129,-132,-69,-128,-134,-133,-68,-127,-97,136,-125,-65,-106,-71,-96,136,-95,-77,-72,-80,-74,]),'COLON':([2,15,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,91,92,94,95,97,98,100,101,102,103,104,105,111,112,117,122,123,132,160,161,163,164,166,169,170,183,185,202,207,208,209,],[12,-22,-98,-123,-66,-94,-124,-100,-99,-131,-67,-81,-70,-65,-126,-90,-130,-129,-132,-69,-128,-134,-133,-68,-83,-127,-97,-92,-125,-82,-52,155,-65,-106,-71,-96,-52,182,184,-75,-93,-95,-91,-77,-72,-84,-80,-74,-85,]),'REF':([15,16,20,26,32,38,61,109,158,191,],[-22,-20,38,38,38,38,-21,38,38,38,]),'RBRACKET':([15,39,40,45,47,50,51,53,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,91,92,94,95,97,98,100,101,102,103,104,105,113,114,118,119,120,121,122,123,132,154,157,160,162,166,169,170,176,177,180,183,185,194,195,196,197,198,202,207,208,209,],[-22,-46,-41,-44,-43,-42,-48,-47,-98,-123,-66,-94,-124,-100,-99,-131,-67,-81,-70,-65,-126,-90,-130,-129,-132,-69,-128,-134,-133,-68,-83,-127,-97,-92,-125,-82,-58,156,-62,-63,158,-60,-106,-71,-96,-50,-49,-78,183,-93,-95,-91,-53,-51,-61,-77,-72,-78,-79,207,-76,208,-84,-80,-74,-85,]),'CHARS':([15,16,20,26,32,38,61,109,158,191,],[-22,-20,43,43,43,43,-21,43,43,43,]),'FALSE':([57,64,67,68,70,90,93,96,99,106,124,125,126,127,128,129,130,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,155,159,167,181,182,184,188,190,200,],[80,80,80,80,80,-104,80,-105,80,80,80,80,-111,80,-109,-110,-113,-112,-102,80,-103,-101,-118,-114,-119,-115,-108,-120,80,-107,-117,-116,-122,-121,80,80,80,80,80,80,80,80,80,]),'RETURNS':([152,],[172,]),'LBRACKET':([15,43,52,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,91,92,94,95,97,98,100,101,102,103,104,105,117,122,123,132,164,165,166,169,170,183,185,202,207,208,209,],[-22,66,70,124,-123,-66,-94,-124,-100,-99,-131,-67,-81,-70,125,-126,-90,-130,-129,-132,-69,-128,-134,-133,-68,-83,-127,-97,-92,-125,-82,125,124,-71,-96,-73,185,-93,-95,-91,-77,-72,-84,-80,-74,-85,]),'LESS':([15,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,91,92,94,95,97,98,101,102,103,104,105,117,122,123,132,166,169,170,183,185,207,208,],[-22,-98,-123,-66,-94,-124,-100,-99,-131,-67,-81,-70,-65,-126,-90,-130,-129,-132,-69,-128,-134,-133,-68,-127,-97,-92,-125,143,-65,-106,-71,-96,-93,-95,-91,-77,-72,-80,-74,]),'DCL':([0,1,5,6,8,10,22,28,29,33,56,174,192,215,218,],[7,-5,-8,-6,-7,7,7,-27,-23,-14,-9,7,7,-29,-28,]),'END':([1,5,6,8,21,22,28,29,33,54,56,174,192,193,205,215,218,],[-5,-8,-6,-7,-4,-135,-27,-23,-14,-3,-9,-135,-135,206,214,-29,-28,]),'TRUE':([57,64,67,68,70,90,93,96,99,106,124,125,126,127,128,129,130,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,155,159,167,181,182,184,188,190,200,],[87,87,87,87,87,-104,87,-105,87,87,87,87,-111,87,-109,-110,-113,-112,-102,87,-103,-101,-118,-114,-119,-115,-108,-120,87,-107,-117,-116,-122,-121,87,87,87,87,87,87,87,87,87,]),'SEMI':([13,14,15,18,19,24,25,35,36,37,39,40,41,42,44,45,46,47,49,50,51,53,60,62,63,65,69,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,94,95,97,98,100,101,102,103,104,105,116,122,123,132,150,152,154,156,157,166,169,170,173,178,179,183,185,202,206,207,208,209,213,214,217,],[29,-24,-22,33,-15,-10,56,-38,-40,-37,-46,-41,-36,-56,-55,-44,-39,-43,-18,-42,-48,-47,-25,-26,-16,-54,-17,-11,-98,-123,-66,-94,-124,-100,-99,-131,-67,-81,-70,-65,-126,-90,-130,-13,-129,-132,-69,-128,-134,-133,-68,-83,-127,-97,-92,-125,-82,-19,-106,-71,-96,-12,174,-50,-57,-49,-93,-95,-91,192,-64,-59,-77,-72,-84,215,-80,-74,-85,-35,218,-34,]),'ELSE':([15,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,91,92,94,95,97,98,100,101,102,103,104,105,122,123,132,166,168,169,170,183,185,186,187,202,207,208,209,211,216,],[-22,-98,-123,-66,-94,-124,-100,-99,-131,-67,-81,-70,-65,-126,-90,-130,-129,-132,-69,-128,-134,-133,-68,-83,-127,-97,-92,-125,-82,-106,-71,-96,-93,188,-95,-91,-77,-72,-86,188,-84,-80,-74,-85,-88,-89,]),'RPAREN':([15,35,36,37,39,40,41,42,44,45,46,47,50,51,53,65,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,91,92,94,95,97,98,100,101,102,103,104,105,107,108,110,115,122,123,132,153,154,156,157,166,169,170,171,175,176,177,178,179,183,185,202,204,207,208,209,212,],[-22,-38,-40,-37,-46,-41,-36,-56,-55,-44,-39,-43,-42,-48,-47,-54,-98,-123,-66,-94,-124,-100,-99,-131,-67,-81,-70,-65,-126,-90,-130,-129,-132,-69,-128,-134,-133,-68,-83,-127,-97,-92,-125,-82,-30,152,154,157,-106,-71,-96,-33,-50,-57,-49,-93,-95,-91,-31,-32,-53,-51,-64,-59,-77,-72,-84,213,-80,-74,-85,217,]),'OR':([15,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,91,92,94,95,97,98,101,102,103,104,105,117,122,123,132,166,169,170,183,185,207,208,],[-22,-98,-123,-66,-94,-124,-100,-99,-131,-67,-81,-70,-65,-126,-90,-130,-129,-132,-69,-128,-134,-133,-68,-127,-97,-92,-125,141,-65,-106,-71,-96,-93,-95,-91,-77,-72,-80,-74,]),'LPAREN':([15,27,36,37,39,40,45,47,48,50,51,53,117,118,154,157,172,],[-22,59,-45,64,-46,-41,-44,-43,67,-42,-48,-47,-45,64,-50,-49,191,]),'EQUAL':([15,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,91,92,94,95,97,98,101,102,103,104,105,117,122,123,132,166,169,170,183,185,207,208,],[-22,-98,-123,-66,-94,-124,-100,-99,-131,-67,-81,-70,-65,-126,-90,-130,-129,-132,-69,-128,-134,-133,-68,-127,-97,-92,-125,147,-65,-106,-71,-96,-93,-95,-91,-77,-72,-80,-74,]),'MINUS':([15,57,64,67,68,70,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,91,92,94,95,97,98,99,101,102,103,104,106,117,122,123,124,125,126,127,128,129,130,131,132,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,155,159,166,167,169,170,181,182,183,184,185,188,190,200,207,208,],[-22,90,90,90,90,90,-98,-123,-66,-94,-124,-100,-99,-131,-67,-81,-70,-65,-126,131,-130,-129,-132,-69,-128,-134,-133,-68,90,-127,-97,-92,-125,90,-65,-106,-71,90,90,-111,90,-109,-110,-113,-112,-96,-102,90,-103,-101,-118,-114,-119,-115,-108,-120,90,-107,-117,-116,-122,-121,90,90,-93,90,-95,131,90,90,-77,90,-72,90,90,90,-80,-74,]),'CONCAT':([15,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,91,92,94,95,97,98,101,102,103,104,117,122,123,132,166,169,170,183,185,207,208,],[-22,-98,-123,-66,-94,-124,-100,-99,-131,-67,-81,-70,-65,-126,130,-130,-129,-132,-69,-128,-134,-133,-68,-127,-97,-92,-125,-65,-106,-71,-96,-93,-95,130,-77,-72,-80,-74,]),'FI':([15,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,91,92,94,95,97,98,100,101,102,103,104,105,122,123,132,166,169,170,183,185,189,199,201,202,207,208,209,],[-22,-98,-123,-66,-94,-124,-100,-99,-131,-67,-81,-70,-65,-126,-90,-130,-129,-132,-69,-128,-134,-133,-68,-83,-127,-97,-92,-125,-82,-106,-71,-96,-93,-95,-91,-77,-72,202,209,-87,-84,-80,-74,-85,]),'THEN':([15,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,91,92,94,95,97,98,100,101,102,103,104,105,122,123,132,133,166,169,170,183,185,202,203,207,208,209,210,],[-22,-98,-123,-66,-94,-124,-100,-99,-131,-67,-81,-70,-65,-126,-90,-130,-129,-132,-69,-128,-134,-133,-68,-83,-127,-97,-92,-125,-82,-106,-71,-96,167,-93,-95,-91,-77,-72,-84,167,-80,-74,-85,167,]),'PROC':([12,],[27,]),'SCONST':([57,64,67,68,70,90,93,96,99,106,124,125,126,127,128,129,130,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,155,159,167,181,182,184,188,190,200,],[95,95,95,95,95,-104,95,-105,95,95,95,95,-111,95,-109,-110,-113,-112,-102,95,-103,-101,-118,-114,-119,-115,-108,-120,95,-107,-117,-116,-122,-121,95,95,95,95,95,95,95,95,95,]),'NOT':([57,64,67,68,70,99,106,124,125,126,127,128,129,130,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,155,159,167,181,182,184,188,190,200,],[96,96,96,96,96,96,96,96,96,-111,96,-109,-110,-113,-112,-102,96,-103,-101,-118,-114,-119,-115,-108,-120,96,-107,-117,-116,-122,-121,96,96,96,96,96,96,96,96,96,]),'GTEQUAL':([15,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,91,92,94,95,97,98,101,102,103,104,105,117,122,123,132,166,169,170,183,185,207,208,],[-22,-98,-123,-66,-94,-124,-100,-99,-131,-67,-81,-70,-65,-126,-90,-130,-129,-132,-69,-128,-134,-133,-68,-127,-97,-92,-125,140,-65,-106,-71,-96,-93,-95,-91,-77,-72,-80,-74,]),'SYN':([0,1,5,6,8,10,22,28,29,33,56,174,192,215,218,],[11,-5,-8,-6,-7,11,11,-27,-23,-14,-9,11,11,-29,-28,]),'TIMES':([15,73,74,75,76,77,78,79,80,81,82,83,84,85,87,89,91,92,94,95,97,98,101,102,103,104,117,122,123,132,166,169,183,185,207,208,],[-22,-98,-123,-66,-94,-124,-100,-99,-131,-67,-81,-70,-65,-126,-130,-129,-132,-69,-128,-134,-133,-68,-127,-97,137,-125,-65,-106,-71,-96,137,-95,-77,-72,-80,-74,]),'ELSIF':([15,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,91,92,94,95,97,98,100,101,102,103,104,105,122,123,132,166,168,169,170,183,185,186,187,202,207,208,209,211,216,],[-22,-98,-123,-66,-94,-124,-100,-99,-131,-67,-81,-70,-65,-126,-90,-130,-129,-132,-69,-128,-134,-133,-68,-83,-127,-97,-92,-125,-82,-106,-71,-96,-93,190,-95,-91,-77,-72,-86,200,-84,-80,-74,-85,-88,-89,]),'NOTEQ':([15,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,91,92,94,95,97,98,101,102,103,104,105,117,122,123,132,166,169,170,183,185,207,208,],[-22,-98,-123,-66,-94,-124,-100,-99,-131,-67,-81,-70,-65,-126,-90,-130,-129,-132,-69,-128,-134,-133,-68,-127,-97,-92,-125,146,-65,-106,-71,-96,-93,-95,-91,-77,-72,-80,-74,]),'NULL':([57,64,67,68,70,90,93,96,99,106,124,125,126,127,128,129,130,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,155,159,167,181,182,184,188,190,200,],[97,97,97,97,97,-104,97,-105,97,97,97,97,-111,97,-109,-110,-113,-112,-102,97,-103,-101,-118,-114,-119,-115,-108,-120,97,-107,-117,-116,-122,-121,97,97,97,97,97,97,97,97,97,]),'IN':([15,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,91,92,94,95,97,98,101,102,103,104,105,117,122,123,132,166,169,170,183,185,207,208,],[-22,-98,-123,-66,-94,-124,-100,-99,-131,-67,-81,-70,-65,-126,-90,-130,-129,-132,-69,-128,-134,-133,-68,-127,-97,-92,-125,148,-65,-106,-71,-96,-93,-95,-91,-77,-72,-80,-74,]),'ICONST':([57,64,66,67,68,70,90,93,96,99,106,124,125,126,127,128,129,130,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,155,159,167,181,182,184,188,190,200,],[89,89,89,89,89,89,-104,89,-105,89,89,89,89,-111,89,-109,-110,-113,-112,-102,89,-103,-101,-118,-114,-119,-115,-108,-120,89,-107,-117,-116,-122,-121,89,89,89,89,89,89,89,89,89,]),'CCONST':([57,64,67,68,70,90,93,96,99,106,124,125,126,127,128,129,130,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,155,159,167,181,182,184,188,190,200,],[91,91,91,91,91,-104,91,-105,91,91,91,91,-111,91,-109,-110,-113,-112,-102,91,-103,-101,-118,-114,-119,-115,-108,-120,91,-107,-117,-116,-122,-121,91,91,91,91,91,91,91,91,91,]),'ID':([0,1,4,5,6,7,8,10,11,15,16,20,22,26,28,29,30,31,32,33,34,38,55,56,57,59,61,64,67,68,70,72,90,93,96,99,106,109,124,125,126,127,128,129,130,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,155,158,159,167,174,181,182,184,188,190,191,192,200,215,218,],[2,-5,15,-8,-6,15,-7,2,15,-22,-20,15,2,15,-27,-23,15,15,15,-14,15,15,15,-9,15,15,-21,15,15,15,15,15,-104,15,-105,15,15,15,15,15,-111,15,-109,-110,-113,-112,-102,15,-103,-101,-118,-114,-119,-115,-108,-120,15,-107,-117,-116,-122,-121,15,15,15,15,15,2,15,15,15,15,15,15,2,15,-29,-28,]),'ASSIGN':([15,16,17,26,35,36,37,39,40,41,42,44,45,46,47,49,50,51,53,58,61,65,154,156,157,178,179,],[-22,-20,32,57,-38,-40,-37,-46,-41,-36,-56,-55,-44,-39,-43,68,-42,-48,-47,106,-21,-54,-50,-57,-49,-64,-59,]),'AND':([15,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,91,92,94,95,97,98,101,102,103,104,105,117,122,123,132,166,169,170,183,185,207,208,],[-22,-98,-123,-66,-94,-124,-100,-99,-131,-67,-81,-70,-65,-126,-90,-130,-129,-132,-69,-128,-134,-133,-68,-127,-97,-92,-125,139,-65,-106,-71,-96,-93,-95,-91,-77,-72,-80,-74,]),'IF':([57,64,67,68,70,99,106,124,125,155,159,167,181,182,184,188,190,200,],[99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,]),'$end':([1,3,5,6,8,9,10,21,22,23,28,29,33,54,56,215,218,],[-5,-1,-8,-6,-7,0,-135,-4,-135,-2,-27,-23,-14,-3,-9,-29,-28,]),'COMMA':([14,15,16,19,24,35,36,37,39,40,41,42,44,45,46,47,49,50,51,53,62,65,69,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,94,95,97,98,100,101,102,103,104,105,107,116,118,119,121,122,123,132,150,153,154,156,157,160,166,169,170,175,176,177,178,179,183,185,194,202,207,208,209,],[30,-22,31,34,55,-38,-40,-37,-46,-41,-36,-56,-55,-44,-39,-43,-18,-42,-48,-47,-26,-54,-17,-98,-123,-66,-94,-124,-100,-99,-131,-67,-81,-70,-65,-126,-90,-130,-13,-129,-132,-69,-128,-134,-133,-68,-83,-127,-97,-92,-125,-82,151,-19,-62,-63,159,-106,-71,-96,-12,-33,-50,-57,-49,181,-93,-95,-91,-32,-53,-51,-64,-59,-77,-72,181,-84,-80,-74,-85,]),'INT':([15,16,20,26,32,38,61,70,109,158,159,191,],[-22,-20,39,39,39,39,-21,39,39,39,39,39,]),'ARRAY':([15,16,20,26,32,38,61,109,158,191,],[-22,-20,52,52,52,52,-21,52,52,52,]),'CHAR':([15,16,20,26,32,38,61,70,109,158,159,191,],[-22,-20,51,51,51,51,-21,51,51,51,51,51,]),'LOC':([15,35,36,37,39,40,41,42,44,45,46,47,50,51,53,65,153,154,156,157,178,179,204,],[-22,-38,-40,-37,-46,-41,-36,-56,-55,-44,-39,-43,-42,-48,-47,-54,175,-50,-57,-49,-64,-59,212,]),'LTEQUAL':([15,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,91,92,94,95,97,98,101,102,103,104,105,117,122,123,132,166,169,170,183,185,207,208,],[-22,-98,-123,-66,-94,-124,-100,-99,-131,-67,-81,-70,-65,-126,-90,-130,-129,-132,-69,-128,-134,-133,-68,-127,-97,-92,-125,149,-65,-106,-71,-96,-93,-95,-91,-77,-72,-80,-74,]),'BOOL':([15,16,20,26,32,38,61,70,109,158,159,191,],[-22,-20,53,53,53,53,-21,53,53,53,53,53,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'upper_bound':([155,182,],[177,196,]),'formal_parameter':([59,151,],[107,171,]),'mode_definition':([4,30,],[14,14,]),'membership_operator':([105,],[142,]),'array_location':([57,64,67,68,70,72,93,99,106,124,125,127,135,144,155,159,167,181,182,184,188,190,200,],[73,73,73,73,73,122,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'literal':([57,64,67,68,70,93,99,106,124,125,127,135,144,155,159,167,181,182,184,188,190,200,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'operator1':([105,],[144,]),'result_spec':([152,],[173,]),'then_expression':([133,203,210,],[168,211,216,]),'dereferenced_reference':([57,64,67,68,70,72,93,99,106,124,125,127,135,144,155,159,167,181,182,184,188,190,200,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'operand3':([57,64,67,68,70,99,106,124,125,127,135,144,155,159,167,181,182,184,188,190,200,],[76,76,76,76,76,76,76,76,76,76,169,76,76,76,76,76,76,76,76,76,76,]),'program':([0,],[9,]),'integer_literal':([57,64,66,67,68,70,93,99,106,124,125,127,135,144,155,159,167,181,182,184,188,190,200,],[77,77,113,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'synonym_definition':([11,55,],[24,24,]),'declaration_list':([7,34,],[18,63,]),'newmode_statement':([0,10,22,174,192,],[8,8,8,8,8,]),'referenced_location':([57,64,67,68,70,93,99,106,124,125,127,135,144,155,159,167,181,182,184,188,190,200,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'array_mode':([20,26,32,38,109,158,191,],[42,42,42,42,42,42,42,]),'string_mode':([20,26,32,38,109,158,191,],[44,44,44,44,44,44,44,]),'string_element':([57,64,67,68,70,72,93,99,106,124,125,127,135,144,155,159,167,181,182,184,188,190,200,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'operator2':([86,170,],[127,127,]),'location':([57,64,67,68,70,72,93,99,106,124,125,127,135,144,155,159,167,181,182,184,188,190,200,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'discrete_range_mode':([20,26,32,38,70,109,158,159,191,],[45,45,45,45,45,45,45,45,45,]),'identifier':([4,7,11,20,26,30,31,32,34,38,55,57,59,64,67,68,70,72,93,99,106,109,124,125,127,135,144,151,155,158,159,167,181,182,184,188,190,191,200,],[16,16,16,36,36,16,16,36,16,36,16,84,16,84,84,84,117,84,84,84,84,36,84,84,84,84,84,16,84,36,117,84,84,84,84,84,84,36,84,]),'statement_list':([0,],[3,]),'composite_mode':([20,26,32,38,109,158,191,],[46,46,46,46,46,46,46,]),'operand2':([57,64,67,68,70,99,106,124,125,127,144,155,159,167,181,182,184,188,190,200,],[103,103,103,103,103,103,103,103,103,166,103,103,103,103,103,103,103,103,103,103,]),'synonym_statement':([0,10,22,174,192,],[6,6,6,6,6,]),'character_literal':([57,64,67,68,70,93,99,106,124,125,127,135,144,155,159,167,181,182,184,188,190,200,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'procedure_statement':([0,10,22,174,192,],[5,5,5,5,5,]),'statement':([0,10,22,174,192,],[10,22,22,22,22,]),'empty_literal':([57,64,67,68,70,93,99,106,124,125,127,135,144,155,159,167,181,182,184,188,190,200,],[101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,]),'operand1':([57,64,67,68,70,99,106,124,125,144,155,159,167,181,182,184,188,190,200,],[86,86,86,86,86,86,86,86,86,170,86,86,86,86,86,86,86,86,86,]),'mode_name':([20,26,32,38,109,158,191,],[41,41,41,41,41,41,41,]),'boolean_mode':([20,26,32,38,70,109,158,159,191,],[50,50,50,50,50,50,50,50,50,]),'procedure_definition':([12,],[28,]),'relational_operator':([105,],[145,]),'reference_mode':([20,26,32,38,109,158,191,],[35,35,35,35,35,35,35,]),'synonym_list':([11,55,],[25,71,]),'integer_mode':([20,26,32,38,70,109,158,159,191,],[40,40,40,40,40,40,40,40,40,]),'string_concatenation_operator':([86,170,],[129,129,]),'statement_nullable':([10,22,174,192,],[23,54,193,205,]),'left_element':([125,],[163,]),'array_element':([57,64,67,68,70,72,93,99,106,124,125,127,135,144,155,159,167,181,182,184,188,190,200,],[92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,]),'monadic_operator':([57,64,67,68,70,99,106,124,125,127,135,144,155,159,167,181,182,184,188,190,200,],[93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,]),'character_string_literal':([57,64,67,68,70,93,99,106,124,125,127,135,144,155,159,167,181,182,184,188,190,200,],[94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,]),'declaration':([7,34,],[19,19,]),'formal_parameter_list':([59,],[108,]),'discrete_mode':([20,26,32,38,70,109,158,159,191,],[37,37,37,37,118,37,37,118,37,]),'expression':([57,64,67,68,70,99,106,124,125,155,159,167,181,182,184,188,190,200,],[88,111,111,116,111,133,150,160,164,176,111,186,194,176,197,201,203,210,]),'lower_bound':([64,67,70,124,159,],[112,112,112,161,112,]),'element_mode':([158,],[179,]),'array_slice':([57,64,67,68,70,72,93,99,106,124,125,127,135,144,155,159,167,181,182,184,188,190,200,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'start_element':([125,],[165,]),'literal_range':([64,67,70,159,],[110,115,119,119,]),'string_slice':([57,64,67,68,70,72,93,99,106,124,125,127,135,144,155,159,167,181,182,184,188,190,200,],[98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,]),'newmode_list':([4,30,],[13,60,]),'arithmetic_multiplicative_operator':([103,166,],[135,135,]),'right_element':([184,],[198,]),'declaration_statement':([0,10,22,174,192,],[1,1,1,1,1,]),'string_length':([66,],[114,]),'expression_list':([124,181,],[162,195,]),'conditional_expression':([57,64,67,68,70,99,106,124,125,155,159,167,181,182,184,188,190,200,],[100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,]),'boolean_literal':([57,64,67,68,70,93,99,106,124,125,127,135,144,155,159,167,181,182,184,188,190,200,],[104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,]),'index_mode_list':([70,159,],[120,180,]),'discrete_mode_name':([20,26,32,38,70,109,158,159,191,],[48,48,48,48,48,48,48,48,48,]),'identifier_list':([4,7,11,30,31,34,55,59,151,],[17,20,26,17,61,20,26,109,109,]),'mode':([20,26,32,38,109,158,191,],[49,58,62,65,153,178,204,]),'empty':([10,22,174,192,],[21,21,21,21,]),'operand4':([57,64,67,68,70,93,99,106,124,125,127,135,144,155,159,167,181,182,184,188,190,200,],[102,102,102,102,102,132,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,]),'elsif_expression':([168,],[187,]),'else_expression':([168,187,],[189,199,]),'arithmetic_additive_operator':([86,170,],[128,128,]),'primitive_value':([57,64,67,68,70,93,99,106,124,125,127,135,144,155,159,167,181,182,184,188,190,200,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'initialization':([49,],[69,]),'character_mode':([20,26,32,38,70,109,158,159,191,],[47,47,47,47,47,47,47,47,47,]),'operand0':([57,64,67,68,70,99,106,124,125,155,159,167,181,182,184,188,190,200,],[105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,]),'index_mode':([70,159,],[121,121,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','Parser.py',46),
  ('statement_list -> statement statement_nullable','statement_list',2,'p_statement_list','Parser.py',50),
  ('statement_nullable -> statement statement_nullable','statement_nullable',2,'p_statement_nullable','Parser.py',61),
  ('statement_nullable -> empty','statement_nullable',1,'p_statement_nullable','Parser.py',62),
  ('statement -> declaration_statement','statement',1,'p_statement','Parser.py',74),
  ('statement -> synonym_statement','statement',1,'p_statement','Parser.py',75),
  ('statement -> newmode_statement','statement',1,'p_statement','Parser.py',76),
  ('statement -> procedure_statement','statement',1,'p_statement','Parser.py',77),
  ('synonym_statement -> SYN synonym_list SEMI','synonym_statement',3,'p_synonym_statement','Parser.py',86),
  ('synonym_list -> synonym_definition','synonym_list',1,'p_synonym_list','Parser.py',90),
  ('synonym_list -> synonym_definition COMMA synonym_list','synonym_list',3,'p_synonym_list','Parser.py',91),
  ('synonym_definition -> identifier_list mode ASSIGN expression','synonym_definition',4,'p_synonym_definition','Parser.py',100),
  ('synonym_definition -> identifier_list ASSIGN expression','synonym_definition',3,'p_synonym_definition','Parser.py',101),
  ('declaration_statement -> DCL declaration_list SEMI','declaration_statement',3,'p_declaration_statement','Parser.py',115),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','Parser.py',119),
  ('declaration_list -> declaration COMMA declaration_list','declaration_list',3,'p_declaration_list','Parser.py',120),
  ('declaration -> identifier_list mode initialization','declaration',3,'p_declaration','Parser.py',128),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','Parser.py',129),
  ('initialization -> ASSIGN expression','initialization',2,'p_initialization','Parser.py',133),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','Parser.py',137),
  ('identifier_list -> identifier COMMA identifier_list','identifier_list',3,'p_identifier_list','Parser.py',138),
  ('identifier -> ID','identifier',1,'p_identifier','Parser.py',146),
  ('newmode_statement -> TYPE newmode_list SEMI','newmode_statement',3,'p_newmode_statement','Parser.py',157),
  ('newmode_list -> mode_definition','newmode_list',1,'p_newmode_list','Parser.py',161),
  ('newmode_list -> mode_definition COMMA newmode_list','newmode_list',3,'p_newmode_list','Parser.py',162),
  ('mode_definition -> identifier_list ASSIGN mode','mode_definition',3,'p_mode_definition','Parser.py',170),
  ('procedure_statement -> ID COLON procedure_definition','procedure_statement',3,'p_procedure_statement','Parser.py',179),
  ('procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI','procedure_definition',9,'p_procedure_definition','Parser.py',183),
  ('procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI','procedure_definition',8,'p_procedure_definition','Parser.py',184),
  ('formal_parameter_list -> formal_parameter','formal_parameter_list',1,'p_formal_parameter_list','Parser.py',188),
  ('formal_parameter_list -> formal_parameter COMMA formal_parameter','formal_parameter_list',3,'p_formal_parameter_list','Parser.py',189),
  ('formal_parameter -> identifier_list mode LOC','formal_parameter',3,'p_formal_parameter','Parser.py',197),
  ('formal_parameter -> identifier_list mode','formal_parameter',2,'p_formal_parameter','Parser.py',198),
  ('result_spec -> RETURNS LPAREN mode LOC RPAREN','result_spec',5,'p_result_spec','Parser.py',204),
  ('result_spec -> RETURNS LPAREN mode RPAREN','result_spec',4,'p_result_spec','Parser.py',205),
  ('mode -> mode_name','mode',1,'p_mode','Parser.py',210),
  ('mode -> discrete_mode','mode',1,'p_mode','Parser.py',211),
  ('mode -> reference_mode','mode',1,'p_mode','Parser.py',212),
  ('mode -> composite_mode','mode',1,'p_mode','Parser.py',213),
  ('mode_name -> identifier','mode_name',1,'p_mode_name','Parser.py',217),
  ('discrete_mode -> integer_mode','discrete_mode',1,'p_discrete_mode','Parser.py',224),
  ('discrete_mode -> boolean_mode','discrete_mode',1,'p_discrete_mode','Parser.py',225),
  ('discrete_mode -> character_mode','discrete_mode',1,'p_discrete_mode','Parser.py',226),
  ('discrete_mode -> discrete_range_mode','discrete_mode',1,'p_discrete_mode','Parser.py',227),
  ('discrete_mode_name -> identifier','discrete_mode_name',1,'p_discrete_mode_name','Parser.py',231),
  ('integer_mode -> INT','integer_mode',1,'p_integer_mode','Parser.py',235),
  ('boolean_mode -> BOOL','boolean_mode',1,'p_boolean_mode','Parser.py',239),
  ('character_mode -> CHAR','character_mode',1,'p_character_mode','Parser.py',243),
  ('discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','Parser.py',252),
  ('discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','Parser.py',253),
  ('literal_range -> lower_bound COLON upper_bound','literal_range',3,'p_literal_range','Parser.py',257),
  ('lower_bound -> expression','lower_bound',1,'p_lower_bound','Parser.py',261),
  ('upper_bound -> expression','upper_bound',1,'p_upper_bound','Parser.py',265),
  ('reference_mode -> REF mode','reference_mode',2,'p_reference_mode','Parser.py',272),
  ('composite_mode -> string_mode','composite_mode',1,'p_composite_mode','Parser.py',279),
  ('composite_mode -> array_mode','composite_mode',1,'p_composite_mode','Parser.py',280),
  ('string_mode -> CHARS LBRACKET string_length RBRACKET','string_mode',4,'p_string_mode','Parser.py',284),
  ('string_length -> integer_literal','string_length',1,'p_string_length','Parser.py',288),
  ('array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode','array_mode',5,'p_array_mode','Parser.py',292),
  ('index_mode_list -> index_mode','index_mode_list',1,'p_index_mode_list','Parser.py',296),
  ('index_mode_list -> index_mode COMMA index_mode_list','index_mode_list',3,'p_index_mode_list','Parser.py',297),
  ('index_mode -> discrete_mode','index_mode',1,'p_index_mode','Parser.py',303),
  ('index_mode -> literal_range','index_mode',1,'p_index_mode','Parser.py',304),
  ('element_mode -> mode','element_mode',1,'p_element_mode','Parser.py',308),
  ('location -> identifier','location',1,'p_location','Parser.py',319),
  ('location -> dereferenced_reference','location',1,'p_location','Parser.py',320),
  ('location -> string_element','location',1,'p_location','Parser.py',321),
  ('location -> string_slice','location',1,'p_location','Parser.py',322),
  ('location -> array_element','location',1,'p_location','Parser.py',323),
  ('location -> array_slice','location',1,'p_location','Parser.py',324),
  ('dereferenced_reference -> array_location ARROW','dereferenced_reference',2,'p_dereferenced_reference','Parser.py',328),
  ('string_element -> identifier LBRACKET start_element LBRACKET','string_element',4,'p_string_element','Parser.py',332),
  ('start_element -> expression','start_element',1,'p_start_element','Parser.py',336),
  ('string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET','string_slice',6,'p_string_slice','Parser.py',340),
  ('left_element -> expression','left_element',1,'p_left_element','Parser.py',344),
  ('right_element -> expression','right_element',1,'p_right_element','Parser.py',348),
  ('array_element -> array_location LBRACKET expression_list RBRACKET','array_element',4,'p_array_element','Parser.py',352),
  ('expression_list -> expression','expression_list',1,'p_expression_list','Parser.py',356),
  ('expression_list -> expression COMMA expression_list','expression_list',3,'p_expression_list','Parser.py',357),
  ('array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET','array_slice',6,'p_array_slice','Parser.py',364),
  ('array_location -> location','array_location',1,'p_array_location','Parser.py',368),
  ('expression -> operand0','expression',1,'p_expression','Parser.py',377),
  ('expression -> conditional_expression','expression',1,'p_expression','Parser.py',378),
  ('conditional_expression -> IF expression then_expression else_expression FI','conditional_expression',5,'p_conditional_expression','Parser.py',387),
  ('conditional_expression -> IF expression then_expression elsif_expression else_expression FI','conditional_expression',6,'p_conditional_expression','Parser.py',388),
  ('then_expression -> THEN expression','then_expression',2,'p_then_expression','Parser.py',392),
  ('else_expression -> ELSE expression','else_expression',2,'p_else_expression','Parser.py',396),
  ('elsif_expression -> ELSIF expression then_expression','elsif_expression',3,'p_elsif_expression','Parser.py',400),
  ('elsif_expression -> elsif_expression ELSIF expression then_expression','elsif_expression',4,'p_elsif_expression','Parser.py',401),
  ('operand0 -> operand1','operand0',1,'p_operand0','Parser.py',415),
  ('operand0 -> operand0 operator1 operand1','operand0',3,'p_operand0','Parser.py',416),
  ('operand1 -> operand2','operand1',1,'p_operand1','Parser.py',423),
  ('operand1 -> operand1 operator2 operand2','operand1',3,'p_operand1','Parser.py',424),
  ('operand2 -> operand3','operand2',1,'p_operand2','Parser.py',431),
  ('operand2 -> operand2 arithmetic_multiplicative_operator operand3','operand2',3,'p_operand2','Parser.py',432),
  ('operand3 -> monadic_operator operand4','operand3',2,'p_operand3','Parser.py',440),
  ('operand3 -> operand4','operand3',1,'p_operand3','Parser.py',441),
  ('operand4 -> array_location','operand4',1,'p_operand4','Parser.py',448),
  ('operand4 -> referenced_location','operand4',1,'p_operand4','Parser.py',449),
  ('operand4 -> primitive_value','operand4',1,'p_operand4','Parser.py',450),
  ('arithmetic_multiplicative_operator -> TIMES','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',461),
  ('arithmetic_multiplicative_operator -> DIVIDE','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',462),
  ('arithmetic_multiplicative_operator -> MODULO','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',463),
  ('monadic_operator -> MINUS','monadic_operator',1,'p_monadic_operator','Parser.py',467),
  ('monadic_operator -> NOT','monadic_operator',1,'p_monadic_operator','Parser.py',468),
  ('referenced_location -> ARROW array_location','referenced_location',2,'p_referenced_location','Parser.py',472),
  ('operator1 -> relational_operator','operator1',1,'p_operator1','Parser.py',476),
  ('operator1 -> membership_operator','operator1',1,'p_operator1','Parser.py',477),
  ('operator2 -> arithmetic_additive_operator','operator2',1,'p_operator2','Parser.py',481),
  ('operator2 -> string_concatenation_operator','operator2',1,'p_operator2','Parser.py',482),
  ('arithmetic_additive_operator -> PLUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','Parser.py',486),
  ('arithmetic_additive_operator -> MINUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','Parser.py',487),
  ('string_concatenation_operator -> CONCAT','string_concatenation_operator',1,'p_string_concatenation_operator','Parser.py',491),
  ('relational_operator -> AND','relational_operator',1,'p_relational_operator','Parser.py',495),
  ('relational_operator -> OR','relational_operator',1,'p_relational_operator','Parser.py',496),
  ('relational_operator -> EQUAL','relational_operator',1,'p_relational_operator','Parser.py',497),
  ('relational_operator -> NOTEQ','relational_operator',1,'p_relational_operator','Parser.py',498),
  ('relational_operator -> GREATER','relational_operator',1,'p_relational_operator','Parser.py',499),
  ('relational_operator -> GTEQUAL','relational_operator',1,'p_relational_operator','Parser.py',500),
  ('relational_operator -> LESS','relational_operator',1,'p_relational_operator','Parser.py',501),
  ('relational_operator -> LTEQUAL','relational_operator',1,'p_relational_operator','Parser.py',502),
  ('membership_operator -> IN','membership_operator',1,'p_membership_operator','Parser.py',506),
  ('primitive_value -> literal','primitive_value',1,'p_primitive_value','Parser.py',518),
  ('literal -> integer_literal','literal',1,'p_literal','Parser.py',522),
  ('literal -> boolean_literal','literal',1,'p_literal','Parser.py',523),
  ('literal -> character_literal','literal',1,'p_literal','Parser.py',524),
  ('literal -> empty_literal','literal',1,'p_literal','Parser.py',525),
  ('literal -> character_string_literal','literal',1,'p_literal','Parser.py',526),
  ('integer_literal -> ICONST','integer_literal',1,'p_integer_literal','Parser.py',530),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','Parser.py',534),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','Parser.py',535),
  ('character_literal -> CCONST','character_literal',1,'p_character_literal','Parser.py',539),
  ('empty_literal -> NULL','empty_literal',1,'p_empty_literal','Parser.py',543),
  ('character_string_literal -> SCONST','character_string_literal',1,'p_character_string_literal','Parser.py',547),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',553),
]
