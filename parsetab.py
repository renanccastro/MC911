
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftANDORleftEQUALNOTEQleftLTEQUALLESSGREATERGTEQUALleftPLUSMINUSleftTIMESDIVIDEMODULOrightUMINUSUNOTICONST CCONST SCONST COMMA PLUS MINUS TIMES DIVIDE COLON LPAREN RPAREN ASSIGN SEMI ARROW LTEQUAL LESS GREATER GTEQUAL EQUAL LBRACKET RBRACKET ID MODULO AND OR NOTEQ NOT CONCAT HAT NUM ABS REF ARRAY RETURNS FI RESULT INT ELSE SYN IF RETURN TRUE ELSIF FALSE READ LENGTH LOWER UPPER IN TO PROC OD THEN LOC WHILE BY FOR NULL EXIT END DOWN PRINT DO TYPE CHARS DCL BOOL ASC CHARprogram : statement_liststatement_list : statement statement_nullablestatement_nullable : statement statement_nullable\n                              | emptystatement : declaration_statement\n                     | synonym_statement\n                     | newmode_statement\n                     | action_statement\n                     | procedure_statementsynonym_statement : SYN synonym_list SEMIsynonym_list : synonym_definition\n                        | synonym_definition COMMA synonym_listsynonym_definition : identifier_list mode ASSIGN expression\n                              | identifier_list ASSIGN expressiondeclaration_statement : DCL declaration_list SEMIdeclaration_list : declaration\n                            | declaration COMMA declaration_listdeclaration : identifier_list mode initialization\n                       | identifier_list modeinitialization : ASSIGN expressionidentifier_list : identifier\n                           | identifier COMMA identifier_listidentifier : IDnewmode_statement : TYPE newmode_list SEMInewmode_list : mode_definition\n                        | mode_definition COMMA newmode_listmode_definition : identifier_list ASSIGN modeprocedure_statement : ID COLON procedure_definitionprocedure_definition : PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI\n                                | PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI\n                                | PROC LPAREN  RPAREN result_spec SEMI statement_nullable END SEMI\n                                | PROC LPAREN  RPAREN SEMI statement_nullable END SEMIformal_parameter_list : formal_parameter\n                                 | formal_parameter COMMA formal_parameter_listformal_parameter : identifier_list mode LOC\n                            | identifier_list moderesult_spec : RETURNS LPAREN mode LOC RPAREN\n                       | RETURNS LPAREN mode RPARENmode : mode_name\n                | discrete_mode\n                | reference_mode\n                | composite_modemode_name : identifierdiscrete_mode : integer_mode\n                         | boolean_mode\n                         | character_mode\n                         | discrete_range_modediscrete_mode_name : identifierinteger_mode : INTboolean_mode : BOOLcharacter_mode : CHARdiscrete_range_mode : discrete_mode_name LPAREN literal_range RPAREN\n                               | discrete_mode LPAREN literal_range RPARENliteral_range : lower_bound COLON upper_boundlower_bound : expressionupper_bound : expressionreference_mode : REF modecomposite_mode : string_mode\n                          | array_modestring_mode : CHARS LBRACKET string_length RBRACKETstring_length : integer_literalarray_mode : ARRAY LBRACKET index_mode_list RBRACKET element_modeindex_mode_list : index_mode\n                           | index_mode COMMA index_mode_listindex_mode : discrete_mode\n                      | literal_rangeelement_mode : modelocation : identifier\n\t\t\t\t    | dereferenced_reference\n                    | array_element\n\t\t\t\t    | array_slice\n\t\t\t\t    | call_actiondereferenced_reference : array_location ARROWarray_element : array_location LBRACKET expression_list RBRACKETexpression_list : expression\n    \t\t\t\t\t   | expression COMMA expression_listarray_slice : array_location LBRACKET lower_bound COLON upper_bound RBRACKETarray_location : locationexpression : operand0\n                      | conditional_expressionparenthesized_expression : LPAREN expression RPARENconditional_expression : IF expression then_expression else_expression FI\n                                  | IF expression then_expression elsif_expression else_expression FIthen_expression : THEN expressionelse_expression : ELSE expressionelsif_expression : ELSIF expression then_expression\n                            | elsif_expression ELSIF expression then_expressionoperand0 : operand1\n                    | operand0 operator1 operand1operand1 : operand2\n                    | operand1 operator2 operand2operand2 : operand3\n                    | operand2 arithmetic_multiplicative_operator operand3operand3 : monadic_operator operand4\n                    | operand4operand4 : array_location\n                    | referenced_location\n                    | primitive_valuearithmetic_multiplicative_operator : TIMES\n                                              | DIVIDE\n                                              | MODULOmonadic_operator : MINUS %prec UMINUS\n                            | NOT %prec UNOTreferenced_location : ARROW array_locationoperator1 : membership_operator\n                     | relational_operatorrelational_operator : AND\n                               | OR\n                               | EQUAL\n                               | NOTEQ\n                               | GREATER\n                               | GTEQUAL\n                               | LESS\n                               | LTEQUALoperator2 : arithmetic_additive_operator\n                     | string_concatenation_operatorarithmetic_additive_operator : PLUS\n                                        | MINUSstring_concatenation_operator : CONCATmembership_operator : INprimitive_value : literal\n                           | value_array_element\n                           | value_array_slice\n                           | parenthesized_expressionliteral : integer_literal\n                   | boolean_literal\n                   | character_literal\n                   | empty_literal\n                   | character_string_literalvalue_array_element : primitive_value LBRACKET expression_list RBRACKETvalue_array_slice : primitive_value LBRACKET expression COLON expression RBRACKETinteger_literal : ICONSTboolean_literal : TRUE\n                           | FALSEcharacter_literal : CCONST\n                             | HAT LPAREN ICONST RPARENempty_literal : NULLcharacter_string_literal : SCONSTaction_statement : identifier COLON action SEMI\n                            | action SEMIaction : bracketed_action\n                  | assignment_action\n                  | call_action\n                  | exit_action\n                  | result_action\n                  | return_actionbracketed_action : if_action\n                            | do_actionassignment_action : array_location assigning_operator expressionassigning_operator : closed_dyadic_operator ASSIGN\n                              | ASSIGNclosed_dyadic_operator : arithmetic_additive_operator\n                                  | arithmetic_multiplicative_operator\n                                  | string_concatenation_operatorif_action : IF expression then_clause else_clause FI\n                     | IF expression then_clause FIthen_clause : THEN action_statement_listelse_clause : ELSE action_statement_list\n                       | ELSIF expression then_clause else_clause\n                       | ELSIF expression then_clauseaction_statement_list : action_statement action_statement_nullableaction_statement_nullable : action_statement action_statement_nullable\n                                     | emptycall_action : procedure_call\n                       | builtin_callbuiltin_call : builtin_name LPAREN parameter_list RPAREN\n                        | builtin_name LPAREN RPARENbuiltin_name : ABS\n                        | ASC\n                        | NUM\n                        | UPPER\n                        | LOWER\n                        | LENGTH\n                        | READ\n                        | PRINTprocedure_call : ID LPAREN parameter_list RPAREN\n                          | ID LPAREN RPARENparameter_list : expression\n                          | expression COMMA parameter_listexit_action : EXIT identifierreturn_action : RETURN resultresult : expression\n                  | emptyresult_action : RESULT expressiondo_action : DO control_part SEMI action_statement_nullable OD\n                     | DO action_statement_nullable ODcontrol_part : for_control while_control \n                        | for_control   \n                        | while_controlfor_control : FOR iterationiteration : step_enumeration\n                     | range_enumerationstep_enumeration : identifier ASSIGN expression step_value DOWN end_value\n                            | identifier ASSIGN expression step_value end_value\n                            | identifier ASSIGN expression DOWN end_value\n                            | identifier ASSIGN expression end_valuestep_value : BY expressionend_value : TO expressionrange_enumeration : identifier DOWN IN discrete_mode\n                             | identifier IN discrete_modewhile_control : WHILE expressionempty :'
    
_lr_action_items = {'CCONST':([5,7,40,47,57,68,73,75,80,97,102,104,105,107,109,110,111,113,115,119,126,127,128,129,130,131,132,133,134,135,136,137,138,144,145,146,148,160,195,202,210,218,222,223,227,228,231,236,237,239,244,247,249,283,296,297,301,302,],[44,44,44,44,-102,44,44,-103,44,44,-99,-101,-100,-119,-151,-117,44,44,-118,44,44,-107,-112,-108,-110,-111,-106,44,-120,-113,-105,-109,-114,-116,44,-115,44,44,-150,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'END':([1,8,12,19,36,120,121,124,149,156,188,197,201,229,293,314,317,318,330,331,332,336,339,343,344,346,],[-5,-9,-8,-7,-6,-4,-202,-140,-28,-10,-15,-24,-3,-139,-202,-202,-202,333,-202,337,338,342,-32,-30,-31,-29,]),'ID':([0,1,5,7,8,11,12,16,17,19,22,24,32,36,40,47,57,63,68,73,75,80,85,87,88,89,94,95,97,100,102,104,105,107,109,110,111,113,115,119,121,124,126,127,128,129,130,131,132,133,134,135,136,137,138,141,144,145,146,148,149,154,155,156,160,167,180,188,189,195,196,197,198,202,209,210,213,217,218,221,222,223,227,228,229,231,233,236,237,239,244,247,249,257,274,283,290,293,295,296,297,301,302,314,317,319,330,339,343,344,346,],[6,-5,65,65,-9,87,-8,65,87,-7,87,87,6,-6,65,65,-102,65,65,65,-103,65,-21,-23,87,177,65,87,65,87,-99,-101,-100,-119,-151,-117,65,65,-118,65,6,-140,65,-107,-112,-108,-110,-111,-106,65,-120,-113,-105,-109,-114,65,-116,65,-115,65,-28,87,87,-10,65,87,65,-15,87,-150,87,-24,87,65,65,65,65,87,65,-22,65,65,65,65,-139,65,87,65,65,65,65,65,65,87,87,65,87,6,87,65,65,65,65,6,6,87,6,-32,-30,-31,-29,]),'NOT':([5,7,40,47,68,80,97,102,104,105,107,109,110,111,113,115,119,126,127,128,129,130,131,132,133,134,135,136,137,138,144,145,146,148,160,195,202,210,218,222,223,227,228,231,236,237,239,244,247,249,283,296,297,301,302,],[75,75,75,75,75,75,75,-99,-101,-100,-119,-151,-117,75,75,-118,75,75,-107,-112,-108,-110,-111,-106,75,-120,-113,-105,-109,-114,-116,75,-115,75,75,-150,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'ASSIGN':([2,3,6,9,14,15,23,26,34,38,65,71,85,87,88,102,103,104,105,106,107,108,110,112,114,115,118,153,157,158,162,163,164,165,166,168,169,170,171,173,174,175,176,177,182,190,200,219,221,226,238,242,298,299,300,307,320,321,],[-78,-164,-23,-71,-68,-165,109,-72,-70,-69,-23,-68,-21,-23,160,-99,-154,-101,-100,-153,-119,-73,-117,-152,195,-118,198,-177,222,-45,-59,-58,-50,-44,-49,-39,-46,-43,-47,-42,-51,-41,-40,-23,231,236,-167,-176,-22,-57,-74,-166,-60,-52,-53,-77,-67,-62,]),'RETURN':([0,1,8,12,16,19,32,36,89,94,121,124,141,149,156,180,188,197,209,213,229,293,314,317,330,339,343,344,346,],[7,-5,-9,-8,7,-7,7,-6,7,7,7,-140,7,-28,-10,7,-15,-24,7,7,-139,7,7,7,7,-32,-30,-31,-29,]),'CHARS':([85,87,88,100,167,198,221,257,295,319,],[-21,-23,161,161,161,161,-22,161,161,161,]),'PROC':([79,],[150,]),'LENGTH':([0,1,5,7,8,12,16,19,32,36,40,47,57,63,68,73,75,80,89,94,97,102,104,105,107,109,110,111,113,115,119,121,124,126,127,128,129,130,131,132,133,134,135,136,137,138,141,144,145,146,148,149,156,160,180,188,195,197,202,209,210,213,218,222,223,227,228,229,231,236,237,239,244,247,249,283,293,296,297,301,302,314,317,330,339,343,344,346,],[10,-5,10,10,-9,-8,10,-7,10,-6,10,10,-102,10,10,10,-103,10,10,10,10,-99,-101,-100,-119,-151,-117,10,10,-118,10,10,-140,10,-107,-112,-108,-110,-111,-106,10,-120,-113,-105,-109,-114,10,-116,10,-115,10,-28,-10,10,10,-15,-150,-24,10,10,10,10,10,10,10,10,10,-139,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,-32,-30,-31,-29,]),'BOOL':([85,87,88,100,167,198,221,223,233,257,274,295,296,319,],[-21,-23,164,164,164,164,-22,164,164,164,164,164,164,164,]),'PLUS':([2,3,6,9,14,15,23,26,34,38,44,45,46,49,50,51,52,53,54,55,56,58,61,62,64,65,66,69,70,71,72,74,76,77,78,108,140,147,153,177,200,206,214,215,216,219,238,242,248,250,265,307,311,],[-78,-164,-23,-71,-68,-165,110,-72,-70,-69,-135,-121,-122,-123,-98,-124,-95,-96,-127,-138,-126,-72,-129,-137,-92,-23,-134,-133,110,-68,-125,-90,-128,-97,-132,-73,-104,-94,-177,-23,-167,110,-81,-91,-93,-176,-74,-166,-130,-136,-68,-77,-131,]),'FI':([2,3,9,15,34,38,44,45,46,48,49,50,51,52,53,54,55,56,58,59,61,62,64,65,66,69,70,71,72,74,76,77,78,91,94,108,124,140,142,147,153,181,200,206,208,209,211,214,215,216,219,229,238,242,246,248,250,251,254,284,285,286,288,307,310,311,312,],[-78,-164,-71,-165,-70,-69,-135,-121,-122,-80,-123,-98,-124,-95,-96,-127,-138,-126,-72,-79,-129,-137,-92,-23,-134,-133,-88,-68,-125,-90,-128,-97,-132,-163,-202,-73,-140,-104,212,-94,-177,-162,-167,-89,-157,-202,253,-81,-91,-93,-176,-139,-74,-166,285,-130,-136,-161,-158,310,-82,-85,-160,-77,-83,-131,-159,]),'ELSE':([2,3,9,15,34,38,44,45,46,48,49,50,51,52,53,54,55,56,58,59,61,62,64,65,66,69,70,71,72,74,76,77,78,91,94,108,124,140,142,147,153,181,200,203,206,208,209,214,215,216,219,229,238,242,243,245,248,250,251,285,288,307,308,310,311,329,],[-78,-164,-71,-165,-70,-69,-135,-121,-122,-80,-123,-98,-124,-95,-96,-127,-138,-126,-72,-79,-129,-137,-92,-23,-134,-133,-88,-68,-125,-90,-128,-97,-132,-163,-202,-73,-140,-104,213,-94,-177,-162,-167,247,-89,-157,-202,-81,-91,-93,-176,-139,-74,-166,-84,247,-130,-136,-161,-82,213,-77,-86,-83,-131,-87,]),'SYN':([0,1,8,12,19,32,36,121,124,149,156,188,197,229,293,314,317,330,339,343,344,346,],[11,-5,-9,-8,-7,11,-6,11,-140,-28,-10,-15,-24,-139,11,11,11,11,-32,-30,-31,-29,]),'CONCAT':([2,3,6,9,14,15,23,26,34,38,44,45,46,49,50,51,52,53,54,55,56,58,61,62,64,65,66,69,70,71,72,74,76,77,78,108,140,147,153,177,200,206,214,215,216,219,238,242,248,250,265,307,311,],[-78,-164,-23,-71,-68,-165,107,-72,-70,-69,-135,-121,-122,-123,-98,-124,-95,-96,-127,-138,-126,-72,-129,-137,-92,-23,-134,-133,107,-68,-125,-90,-128,-97,-132,-73,-104,-94,-177,-23,-167,107,-81,-91,-93,-176,-74,-166,-130,-136,-68,-77,-131,]),'BY':([2,3,9,15,34,38,44,45,46,48,49,50,51,52,53,54,55,56,58,59,61,62,64,65,66,69,70,71,72,74,76,77,78,108,140,147,153,200,206,214,215,216,219,238,242,248,250,273,285,307,310,311,],[-78,-164,-71,-165,-70,-69,-135,-121,-122,-80,-123,-98,-124,-95,-96,-127,-138,-126,-72,-79,-129,-137,-92,-23,-134,-133,-88,-68,-125,-90,-128,-97,-132,-73,-104,-94,-177,-167,-89,-81,-91,-93,-176,-74,-166,-130,-136,302,-82,-77,-83,-131,]),'NUM':([0,1,5,7,8,12,16,19,32,36,40,47,57,63,68,73,75,80,89,94,97,102,104,105,107,109,110,111,113,115,119,121,124,126,127,128,129,130,131,132,133,134,135,136,137,138,141,144,145,146,148,149,156,160,180,188,195,197,202,209,210,213,218,222,223,227,228,229,231,236,237,239,244,247,249,283,293,296,297,301,302,314,317,330,339,343,344,346,],[13,-5,13,13,-9,-8,13,-7,13,-6,13,13,-102,13,13,13,-103,13,13,13,13,-99,-101,-100,-119,-151,-117,13,13,-118,13,13,-140,13,-107,-112,-108,-110,-111,-106,13,-120,-113,-105,-109,-114,13,-116,13,-115,13,-28,-10,13,13,-15,-150,-24,13,13,13,13,13,13,13,13,13,-139,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,-32,-30,-31,-29,]),'NULL':([5,7,40,47,57,68,73,75,80,97,102,104,105,107,109,110,111,113,115,119,126,127,128,129,130,131,132,133,134,135,136,137,138,144,145,146,148,160,195,202,210,218,222,223,227,228,231,236,237,239,244,247,249,283,296,297,301,302,],[62,62,62,62,-102,62,62,-103,62,62,-99,-101,-100,-119,-151,-117,62,62,-118,62,62,-107,-112,-108,-110,-111,-106,62,-120,-113,-105,-109,-114,-116,62,-115,62,62,-150,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'IF':([0,1,5,7,8,12,16,19,32,36,40,47,68,80,89,94,97,109,111,113,119,121,124,126,141,149,156,160,180,188,195,197,202,209,210,213,218,222,223,227,228,229,231,236,237,239,244,247,249,283,293,296,297,301,302,314,317,330,339,343,344,346,],[5,-5,47,47,-9,-8,5,-7,5,-6,47,47,47,47,5,5,47,-151,47,47,47,5,-140,47,5,-28,-10,47,5,-15,-150,-24,47,5,47,5,47,47,47,47,47,-139,47,47,47,47,47,47,47,47,5,47,47,47,47,5,5,5,-32,-30,-31,-29,]),'SCONST':([5,7,40,47,57,68,73,75,80,97,102,104,105,107,109,110,111,113,115,119,126,127,128,129,130,131,132,133,134,135,136,137,138,144,145,146,148,160,195,202,210,218,222,223,227,228,231,236,237,239,244,247,249,283,296,297,301,302,],[55,55,55,55,-102,55,55,-103,55,55,-99,-101,-100,-119,-151,-117,55,55,-118,55,55,-107,-112,-108,-110,-111,-106,55,-120,-113,-105,-109,-114,-116,55,-115,55,55,-150,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'LESS':([2,3,9,15,34,38,44,45,46,49,50,51,52,53,54,55,56,58,59,61,62,64,65,66,69,70,71,72,74,76,77,78,108,140,147,153,200,206,214,215,216,219,238,242,248,250,265,307,311,],[-78,-164,-71,-165,-70,-69,-135,-121,-122,-123,-98,-124,-95,-96,-127,-138,-126,-72,135,-129,-137,-92,-23,-134,-133,-88,-68,-125,-90,-128,-97,-132,-73,-104,-94,-177,-167,-89,-81,-91,-93,-176,-74,-166,-130,-136,-68,-77,-131,]),'DO':([0,1,8,12,16,19,32,36,89,94,121,124,141,149,156,180,188,197,209,213,229,293,314,317,330,339,343,344,346,],[16,-5,-9,-8,16,-7,16,-6,16,16,16,-140,16,-28,-10,16,-15,-24,16,16,-139,16,16,16,16,-32,-30,-31,-29,]),'LBRACKET':([2,3,6,9,14,15,23,26,34,38,44,45,46,49,50,51,53,54,55,56,58,61,62,65,66,69,71,72,76,78,108,140,153,159,161,177,200,214,219,238,242,248,250,265,307,311,],[-78,-164,-23,-71,-68,-165,111,-72,-70,-69,-135,-121,-122,-123,126,-124,111,-127,-138,-126,-72,-129,-137,-23,-134,-133,-68,-125,-128,-132,-73,111,-177,223,225,-23,-167,-81,-176,-74,-166,-130,-136,-68,-77,-131,]),'DCL':([0,1,8,12,19,32,36,121,124,149,156,188,197,229,293,314,317,330,339,343,344,346,],[17,-5,-9,-8,-7,17,-6,17,-140,-28,-10,-15,-24,-139,17,17,17,17,-32,-30,-31,-29,]),'ASC':([0,1,5,7,8,12,16,19,32,36,40,47,57,63,68,73,75,80,89,94,97,102,104,105,107,109,110,111,113,115,119,121,124,126,127,128,129,130,131,132,133,134,135,136,137,138,141,144,145,146,148,149,156,160,180,188,195,197,202,209,210,213,218,222,223,227,228,229,231,236,237,239,244,247,249,283,293,296,297,301,302,314,317,330,339,343,344,346,],[18,-5,18,18,-9,-8,18,-7,18,-6,18,18,-102,18,18,18,-103,18,18,18,18,-99,-101,-100,-119,-151,-117,18,18,-118,18,18,-140,18,-107,-112,-108,-110,-111,-106,18,-120,-113,-105,-109,-114,18,-116,18,-115,18,-28,-10,18,18,-15,-150,-24,18,18,18,18,18,18,18,18,18,-139,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-32,-30,-31,-29,]),'DOWN':([2,3,9,15,34,38,44,45,46,48,49,50,51,52,53,54,55,56,58,59,61,62,64,65,66,69,70,71,72,74,76,77,78,87,108,140,147,153,182,200,206,214,215,216,219,238,242,248,250,273,285,304,307,310,311,325,],[-78,-164,-71,-165,-70,-69,-135,-121,-122,-80,-123,-98,-124,-95,-96,-127,-138,-126,-72,-79,-129,-137,-92,-23,-134,-133,-88,-68,-125,-90,-128,-97,-132,-23,-73,-104,-94,-177,232,-167,-89,-81,-91,-93,-176,-74,-166,-130,-136,303,-82,327,-77,-83,-131,-197,]),'PRINT':([0,1,5,7,8,12,16,19,32,36,40,47,57,63,68,73,75,80,89,94,97,102,104,105,107,109,110,111,113,115,119,121,124,126,127,128,129,130,131,132,133,134,135,136,137,138,141,144,145,146,148,149,156,160,180,188,195,197,202,209,210,213,218,222,223,227,228,229,231,236,237,239,244,247,249,283,293,296,297,301,302,314,317,330,339,343,344,346,],[21,-5,21,21,-9,-8,21,-7,21,-6,21,21,-102,21,21,21,-103,21,21,21,21,-99,-101,-100,-119,-151,-117,21,21,-118,21,21,-140,21,-107,-112,-108,-110,-111,-106,21,-120,-113,-105,-109,-114,21,-116,21,-115,21,-28,-10,21,21,-15,-150,-24,21,21,21,21,21,21,21,21,21,-139,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-32,-30,-31,-29,]),'EXIT':([0,1,8,12,16,19,32,36,89,94,121,124,141,149,156,180,188,197,209,213,229,293,314,317,330,339,343,344,346,],[22,-5,-9,-8,22,-7,22,-6,22,22,22,-140,22,-28,-10,22,-15,-24,22,22,-139,22,22,22,22,-32,-30,-31,-29,]),'LOC':([87,158,162,163,164,165,166,168,169,170,171,173,174,175,176,226,291,298,299,300,320,321,334,],[-23,-45,-59,-58,-50,-44,-49,-39,-46,-43,-47,-42,-51,-41,-40,-57,316,-60,-52,-53,-67,-62,340,]),'EQUAL':([2,3,9,15,34,38,44,45,46,49,50,51,52,53,54,55,56,58,59,61,62,64,65,66,69,70,71,72,74,76,77,78,108,140,147,153,200,206,214,215,216,219,238,242,248,250,265,307,311,],[-78,-164,-71,-165,-70,-69,-135,-121,-122,-123,-98,-124,-95,-96,-127,-138,-126,-72,137,-129,-137,-92,-23,-134,-133,-88,-68,-125,-90,-128,-97,-132,-73,-104,-94,-177,-167,-89,-81,-91,-93,-176,-74,-166,-130,-136,-68,-77,-131,]),'TYPE':([0,1,8,12,19,32,36,121,124,149,156,188,197,229,293,314,317,330,339,343,344,346,],[24,-5,-9,-8,-7,24,-6,24,-140,-28,-10,-15,-24,-139,24,24,24,24,-32,-30,-31,-29,]),'READ':([0,1,5,7,8,12,16,19,32,36,40,47,57,63,68,73,75,80,89,94,97,102,104,105,107,109,110,111,113,115,119,121,124,126,127,128,129,130,131,132,133,134,135,136,137,138,141,144,145,146,148,149,156,160,180,188,195,197,202,209,210,213,218,222,223,227,228,229,231,236,237,239,244,247,249,283,293,296,297,301,302,314,317,330,339,343,344,346,],[25,-5,25,25,-9,-8,25,-7,25,-6,25,25,-102,25,25,25,-103,25,25,25,25,-99,-101,-100,-119,-151,-117,25,25,-118,25,25,-140,25,-107,-112,-108,-110,-111,-106,25,-120,-113,-105,-109,-114,25,-116,25,-115,25,-28,-10,25,25,-15,-150,-24,25,25,25,25,25,25,25,25,25,-139,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-32,-30,-31,-29,]),'AND':([2,3,9,15,34,38,44,45,46,49,50,51,52,53,54,55,56,58,59,61,62,64,65,66,69,70,71,72,74,76,77,78,108,140,147,153,200,206,214,215,216,219,238,242,248,250,265,307,311,],[-78,-164,-71,-165,-70,-69,-135,-121,-122,-123,-98,-124,-95,-96,-127,-138,-126,-72,127,-129,-137,-92,-23,-134,-133,-88,-68,-125,-90,-128,-97,-132,-73,-104,-94,-177,-167,-89,-81,-91,-93,-176,-74,-166,-130,-136,-68,-77,-131,]),'OD':([16,91,94,96,124,180,181,229,230,],[-202,-163,-202,186,-140,-202,-162,-139,272,]),'GTEQUAL':([2,3,9,15,34,38,44,45,46,49,50,51,52,53,54,55,56,58,59,61,62,64,65,66,69,70,71,72,74,76,77,78,108,140,147,153,200,206,214,215,216,219,238,242,248,250,265,307,311,],[-78,-164,-71,-165,-70,-69,-135,-121,-122,-123,-98,-124,-95,-96,-127,-138,-126,-72,128,-129,-137,-92,-23,-134,-133,-88,-68,-125,-90,-128,-97,-132,-73,-104,-94,-177,-167,-89,-81,-91,-93,-176,-74,-166,-130,-136,-68,-77,-131,]),'$end}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'location':([0,5,7,16,32,40,47,63,68,73,80,89,94,97,111,113,119,121,126,133,141,145,148,160,180,202,209,210,213,218,222,223,227,228,231,236,237,239,244,247,249,283,293,296,297,301,302,314,317,330,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'index_mode_list':([223,296,],[261,322,]),'value_array_element':([5,7,40,47,68,73,80,97,111,113,119,126,133,145,148,160,202,210,218,222,223,227,228,231,236,237,239,244,247,249,283,296,297,301,302,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'builtin_call':([0,5,7,16,32,40,47,63,68,73,80,89,94,97,111,113,119,121,126,133,141,145,148,160,180,202,209,210,213,218,222,223,227,228,231,236,237,239,244,247,249,283,293,296,297,301,302,314,317,330,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'array_slice':([0,5,7,16,32,40,47,63,68,73,80,89,94,97,111,113,119,121,126,133,141,145,148,160,180,202,209,210,213,218,222,223,227,228,231,236,237,239,244,247,249,283,293,296,297,301,302,314,317,330,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'parenthesized_expression':([5,7,40,47,68,73,80,97,111,113,119,126,133,145,148,160,202,210,218,222,223,227,228,231,236,237,239,244,247,249,283,296,297,301,302,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'expression_list':([111,126,239,],[192,204,280,]),'operand4':([5,7,40,47,68,73,80,97,111,113,119,126,133,145,148,160,202,210,218,222,223,227,228,231,236,237,239,244,247,249,283,296,297,301,302,],[52,52,52,52,52,147,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'formal_parameter':([217,290,],[256,256,]),'operand2':([5,7,40,47,68,80,97,111,113,119,126,133,145,160,202,210,218,222,223,227,228,231,236,237,239,244,247,249,283,296,297,301,302,],[74,74,74,74,74,74,74,74,74,74,74,74,215,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'then_expression':([125,282,309,],[203,308,329,]),'synonym_list':([11,154,],[86,220,]),'array_location':([0,5,7,16,32,40,47,63,68,73,80,89,94,97,111,113,119,121,126,133,141,145,148,160,180,202,209,210,213,218,222,223,227,228,231,236,237,239,244,247,249,283,293,296,297,301,302,314,317,330,],[23,53,53,23,23,53,53,140,53,53,53,23,23,53,53,53,53,23,53,53,23,53,53,53,23,53,23,53,23,53,53,53,53,53,53,53,53,53,53,53,53,53,23,53,53,53,53,23,23,23,]),'while_control':([16,92,],[90,179,]),'identifier_list':([11,17,24,154,155,189,196,217,290,],[88,100,118,88,221,100,118,257,257,]),'end_value':([273,303,304,327,],[305,326,328,335,]),'character_mode':([88,100,167,198,223,233,257,274,295,296,319,],[169,169,169,169,169,169,169,169,169,169,169,]),'procedure_definition':([79,],[149,]),'newmode_statement':([0,32,121,293,314,317,330,],[19,19,19,19,19,19,19,]),'action_statement_list':([141,213,],[208,254,]),'return_action':([0,16,32,89,94,121,141,180,209,213,293,314,317,330,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'range_enumeration':([95,],[185,]),'operand1':([5,7,40,47,68,80,97,111,113,119,126,133,160,202,210,218,222,223,227,228,231,236,237,239,244,247,249,283,296,297,301,302,],[70,70,70,70,70,70,70,70,70,70,70,206,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'assignment_action':([0,16,32,89,94,121,141,180,209,213,293,314,317,330,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'then_clause':([67,252,],[142,288,]),'discrete_range_mode':([88,100,167,198,223,233,257,274,295,296,319,],[171,171,171,171,171,171,171,171,171,171,171,]),'synonym_definition':([11,154,],[84,84,]),'exit_action':([0,16,32,89,94,121,141,180,209,213,293,314,317,330,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'index_mode':([223,296,],[262,262,]),'literal_range':([223,227,228,296,],[263,270,271,263,]),'operand3':([5,7,40,47,68,80,97,111,113,119,126,133,145,148,160,202,210,218,222,223,227,228,231,236,237,239,244,247,249,283,296,297,301,302,],[64,64,64,64,64,64,64,64,64,64,64,64,64,216,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'statement':([0,32,121,293,314,317,330,],[32,121,121,121,121,121,121,]),'expression':([5,7,40,47,68,80,97,111,113,119,126,160,202,210,218,222,223,227,228,231,236,237,239,244,247,249,283,296,297,301,302,],[67,83,123,125,143,151,187,193,194,151,205,224,243,252,151,260,264,264,264,273,277,279,281,282,286,287,309,264,279,324,325,]),'bracketed_action':([0,16,32,89,94,121,141,180,209,213,293,314,317,330,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'array_element':([0,5,7,16,32,40,47,63,68,73,80,89,94,97,111,113,119,121,126,133,141,145,148,160,180,202,209,210,213,218,222,223,227,228,231,236,237,239,244,247,249,283,293,296,297,301,302,314,317,330,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'string_length':([225,],[268,]),'mode_definition':([24,196,],[116,116,]),'integer_literal':([5,7,40,47,68,73,80,97,111,113,119,126,133,145,148,160,202,210,218,222,223,225,227,228,231,236,237,239,244,247,249,283,296,297,301,302,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,269,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'parameter_list':([80,119,218,],[152,199,259,]),'program':([0,],[35,]),'mode':([88,100,167,198,257,295,319,],[157,190,226,241,291,320,334,]),'lower_bound':([111,223,227,228,296,],[191,266,266,266,266,]),'relational_operator':([59,],[132,]),'control_part':([16,],[93,]),'step_enumeration':([95,],[184,]),'composite_mode':([88,100,167,198,257,295,319,],[173,173,173,173,173,173,173,]),'iteration':([95,],[183,]),'closed_dyadic_operator':([23,],[114,]),'discrete_mode':([88,100,167,198,223,233,257,274,295,296,319,],[176,176,176,176,267,276,176,306,176,267,176,]),'declaration_statement':([0,32,121,293,314,317,330,],[1,1,1,1,1,1,1,]),'procedure_call':([0,5,7,16,32,40,47,63,68,73,80,89,94,97,111,113,119,121,126,133,141,145,148,160,180,202,209,210,213,218,222,223,227,228,231,236,237,239,244,247,249,283,293,296,297,301,302,314,317,330,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'upper_bound':([237,297,],[278,323,]),'boolean_literal':([5,7,40,47,68,73,80,97,111,113,119,126,133,145,148,160,202,210,218,222,223,227,228,231,236,237,239,244,247,249,283,296,297,301,302,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'conditional_expression':([5,7,40,47,68,80,97,111,113,119,126,160,202,210,218,222,223,227,228,231,236,237,239,244,247,249,283,296,297,301,302,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'primitive_value':([5,7,40,47,68,73,80,97,111,113,119,126,133,145,148,160,202,210,218,222,223,227,228,231,236,237,239,244,247,249,283,296,297,301,302,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'elsif_expression':([203,],[245,]),'arithmetic_additive_operator':([23,70,206,],[112,146,146,]),'initialization':([190,],[235,]),'result_spec':([258,289,],[292,313,]),'value_array_slice':([5,7,40,47,68,73,80,97,111,113,119,126,133,145,148,160,202,210,218,222,223,227,228,231,236,237,239,244,247,249,283,296,297,301,302,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'procedure_statement':([0,32,121,293,314,317,330,],[8,8,8,8,8,8,8,]),'literal':([5,7,40,47,68,73,80,97,111,113,119,126,133,145,148,160,202,210,218,222,223,227,228,231,236,237,239,244,247,249,283,296,297,301,302,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'empty':([7,16,32,94,121,180,209,293,314,317,330,],[81,91,120,91,120,91,91,120,120,120,120,]),'for_control':([16,],[92,]),'builtin_name':([0,5,7,16,32,40,47,63,68,73,80,89,94,97,111,113,119,121,126,133,141,145,148,160,180,202,209,210,213,218,222,223,227,228,231,236,237,239,244,247,249,283,293,296,297,301,302,314,317,330,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'action_statement':([0,16,32,94,121,141,180,209,213,293,314,317,330,],[12,94,12,94,12,209,94,94,209,12,12,12,12,]),'result':([7,],[82,]),'mode_name':([88,100,167,198,257,295,319,],[168,168,168,168,168,168,168,]),'identifier':([0,5,7,11,16,17,22,24,32,40,47,63,68,73,80,88,89,94,95,97,100,111,113,119,121,126,133,141,145,148,154,155,160,167,180,189,196,198,202,209,210,213,217,218,222,223,227,228,231,233,236,237,239,244,247,249,257,274,283,290,293,295,296,297,301,302,314,317,319,330,],[14,71,71,85,14,85,101,85,14,71,71,71,71,71,71,170,71,14,182,71,170,71,71,71,14,71,71,14,71,71,85,85,71,170,14,85,85,170,71,14,71,14,85,71,71,265,71,71,71,275,71,71,71,71,71,71,170,275,71,85,14,170,265,71,71,71,14,14,170,14,]),'referenced_location':([5,7,40,47,68,73,80,97,111,113,119,126,133,145,148,160,202,210,218,222,223,227,228,231,236,237,239,244,247,249,283,296,297,301,302,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'character_literal':([5,7,40,47,68,73,80,97,111,113,119,126,133,145,148,160,202,210,218,222,223,227,228,231,236,237,239,244,247,249,283,296,297,301,302,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'else_clause':([142,288,],[211,312,]),'discrete_mode_name':([88,100,167,198,223,233,257,274,295,296,319,],[172,172,172,172,172,172,172,172,172,172,172,]),'element_mode':([295,],[321,]),'step_value':([273,],[304,]),'membership_operator':([59,],[136,]),'call_action':([0,5,7,16,32,40,47,63,68,73,80,89,94,97,111,113,119,121,126,133,141,145,148,160,180,202,209,210,213,218,222,223,227,228,231,236,237,239,244,247,249,283,293,296,297,301,302,314,317,330,],[26,58,58,26,26,58,58,58,58,58,58,26,26,58,58,58,58,26,58,58,26,58,58,58,26,58,26,58,26,58,58,58,58,58,58,58,58,58,58,58,58,58,26,58,58,58,58,26,26,26,]),'operand0':([5,7,40,47,68,80,97,111,113,119,126,160,202,210,218,222,223,227,228,231,236,237,239,244,247,249,283,296,297,301,302,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'result_action':([0,16,32,89,94,121,141,180,209,213,293,314,317,330,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'string_concatenation_operator':([23,70,206,],[103,144,144,]),'newmode_list':([24,196,],[117,240,]),'boolean_mode':([88,100,167,198,223,233,257,274,295,296,319,],[158,158,158,158,158,158,158,158,158,158,158,]),'if_action':([0,16,32,89,94,121,141,180,209,213,293,314,317,330,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'formal_parameter_list':([217,290,],[255,315,]),'array_mode':([88,100,167,198,257,295,319,],[162,162,162,162,162,162,162,]),'assigning_operator':([23,],[113,]),'operator1':([59,],[133,]),'string_mode':([88,100,167,198,257,295,319,],[163,163,163,163,163,163,163,]),'integer_mode':([88,100,167,198,223,233,257,274,295,296,319,],[165,165,165,165,165,165,165,165,165,165,165,]),'action_statement_nullable':([16,94,180,209,],[96,181,230,251,]),'declaration_list':([17,189,],[98,234,]),'declaration':([17,189,],[99,99,]),'arithmetic_multiplicative_operator':([23,74,215,],[106,148,148,]),'monadic_operator':([5,7,40,47,68,80,97,111,113,119,126,133,145,148,160,202,210,218,222,223,227,228,231,236,237,239,244,247,249,283,296,297,301,302,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'synonym_statement':([0,32,121,293,314,317,330,],[36,36,36,36,36,36,36,]),'statement_list':([0,],[42,]),'empty_literal':([5,7,40,47,68,73,80,97,111,113,119,126,133,145,148,160,202,210,218,222,223,227,228,231,236,237,239,244,247,249,283,296,297,301,302,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'character_string_literal':([5,7,40,47,68,73,80,97,111,113,119,126,133,145,148,160,202,210,218,222,223,227,228,231,236,237,239,244,247,249,283,296,297,301,302,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'dereferenced_reference':([0,5,7,16,32,40,47,63,68,73,80,89,94,97,111,113,119,121,126,133,141,145,148,160,180,202,209,210,213,218,222,223,227,228,231,236,237,239,244,247,249,283,293,296,297,301,302,314,317,330,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'statement_nullable':([32,121,293,314,317,330,],[122,201,318,331,332,336,]),'do_action':([0,16,32,89,94,121,141,180,209,213,293,314,317,330,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'else_expression':([203,245,],[246,284,]),'reference_mode':([88,100,167,198,257,295,319,],[175,175,175,175,175,175,175,]),'operator2':([70,206,],[145,145,]),'action':([0,16,32,89,94,121,141,180,209,213,293,314,317,330,],[43,43,43,178,43,43,43,43,43,43,43,43,43,43,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','Parser.py',72),
  ('statement_list -> statement statement_nullable','statement_list',2,'p_statement_list','Parser.py',76),
  ('statement_nullable -> statement statement_nullable','statement_nullable',2,'p_statement_nullable','Parser.py',88),
  ('statement_nullable -> empty','statement_nullable',1,'p_statement_nullable','Parser.py',89),
  ('statement -> declaration_statement','statement',1,'p_statement','Parser.py',101),
  ('statement -> synonym_statement','statement',1,'p_statement','Parser.py',102),
  ('statement -> newmode_statement','statement',1,'p_statement','Parser.py',103),
  ('statement -> action_statement','statement',1,'p_statement','Parser.py',104),
  ('statement -> procedure_statement','statement',1,'p_statement','Parser.py',105),
  ('synonym_statement -> SYN synonym_list SEMI','synonym_statement',3,'p_synonym_statement','Parser.py',114),
  ('synonym_list -> synonym_definition','synonym_list',1,'p_synonym_list','Parser.py',118),
  ('synonym_list -> synonym_definition COMMA synonym_list','synonym_list',3,'p_synonym_list','Parser.py',119),
  ('synonym_definition -> identifier_list mode ASSIGN expression','synonym_definition',4,'p_synonym_definition','Parser.py',128),
  ('synonym_definition -> identifier_list ASSIGN expression','synonym_definition',3,'p_synonym_definition','Parser.py',129),
  ('declaration_statement -> DCL declaration_list SEMI','declaration_statement',3,'p_declaration_statement','Parser.py',143),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','Parser.py',147),
  ('declaration_list -> declaration COMMA declaration_list','declaration_list',3,'p_declaration_list','Parser.py',148),
  ('declaration -> identifier_list mode initialization','declaration',3,'p_declaration','Parser.py',157),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','Parser.py',158),
  ('initialization -> ASSIGN expression','initialization',2,'p_initialization','Parser.py',162),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','Parser.py',166),
  ('identifier_list -> identifier COMMA identifier_list','identifier_list',3,'p_identifier_list','Parser.py',167),
  ('identifier -> ID','identifier',1,'p_identifier','Parser.py',176),
  ('newmode_statement -> TYPE newmode_list SEMI','newmode_statement',3,'p_newmode_statement','Parser.py',186),
  ('newmode_list -> mode_definition','newmode_list',1,'p_newmode_list','Parser.py',190),
  ('newmode_list -> mode_definition COMMA newmode_list','newmode_list',3,'p_newmode_list','Parser.py',191),
  ('mode_definition -> identifier_list ASSIGN mode','mode_definition',3,'p_mode_definition','Parser.py',200),
  ('procedure_statement -> ID COLON procedure_definition','procedure_statement',3,'p_procedure_statement','Parser.py',211),
  ('procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI','procedure_definition',9,'p_procedure_definition','Parser.py',215),
  ('procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI','procedure_definition',8,'p_procedure_definition','Parser.py',216),
  ('procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI','procedure_definition',8,'p_procedure_definition','Parser.py',217),
  ('procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI','procedure_definition',7,'p_procedure_definition','Parser.py',218),
  ('formal_parameter_list -> formal_parameter','formal_parameter_list',1,'p_formal_parameter_list','Parser.py',231),
  ('formal_parameter_list -> formal_parameter COMMA formal_parameter_list','formal_parameter_list',3,'p_formal_parameter_list','Parser.py',232),
  ('formal_parameter -> identifier_list mode LOC','formal_parameter',3,'p_formal_parameter','Parser.py',241),
  ('formal_parameter -> identifier_list mode','formal_parameter',2,'p_formal_parameter','Parser.py',242),
  ('result_spec -> RETURNS LPAREN mode LOC RPAREN','result_spec',5,'p_result_spec','Parser.py',248),
  ('result_spec -> RETURNS LPAREN mode RPAREN','result_spec',4,'p_result_spec','Parser.py',249),
  ('mode -> mode_name','mode',1,'p_mode','Parser.py',254),
  ('mode -> discrete_mode','mode',1,'p_mode','Parser.py',255),
  ('mode -> reference_mode','mode',1,'p_mode','Parser.py',256),
  ('mode -> composite_mode','mode',1,'p_mode','Parser.py',257),
  ('mode_name -> identifier','mode_name',1,'p_mode_name','Parser.py',261),
  ('discrete_mode -> integer_mode','discrete_mode',1,'p_discrete_mode','Parser.py',269),
  ('discrete_mode -> boolean_mode','discrete_mode',1,'p_discrete_mode','Parser.py',270),
  ('discrete_mode -> character_mode','discrete_mode',1,'p_discrete_mode','Parser.py',271),
  ('discrete_mode -> discrete_range_mode','discrete_mode',1,'p_discrete_mode','Parser.py',272),
  ('discrete_mode_name -> identifier','discrete_mode_name',1,'p_discrete_mode_name','Parser.py',276),
  ('integer_mode -> INT','integer_mode',1,'p_integer_mode','Parser.py',280),
  ('boolean_mode -> BOOL','boolean_mode',1,'p_boolean_mode','Parser.py',284),
  ('character_mode -> CHAR','character_mode',1,'p_character_mode','Parser.py',288),
  ('discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','Parser.py',297),
  ('discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','Parser.py',298),
  ('literal_range -> lower_bound COLON upper_bound','literal_range',3,'p_literal_range','Parser.py',302),
  ('lower_bound -> expression','lower_bound',1,'p_lower_bound','Parser.py',306),
  ('upper_bound -> expression','upper_bound',1,'p_upper_bound','Parser.py',310),
  ('reference_mode -> REF mode','reference_mode',2,'p_reference_mode','Parser.py',317),
  ('composite_mode -> string_mode','composite_mode',1,'p_composite_mode','Parser.py',324),
  ('composite_mode -> array_mode','composite_mode',1,'p_composite_mode','Parser.py',325),
  ('string_mode -> CHARS LBRACKET string_length RBRACKET','string_mode',4,'p_string_mode','Parser.py',329),
  ('string_length -> integer_literal','string_length',1,'p_string_length','Parser.py',333),
  ('array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode','array_mode',5,'p_array_mode','Parser.py',337),
  ('index_mode_list -> index_mode','index_mode_list',1,'p_index_mode_list','Parser.py',341),
  ('index_mode_list -> index_mode COMMA index_mode_list','index_mode_list',3,'p_index_mode_list','Parser.py',342),
  ('index_mode -> discrete_mode','index_mode',1,'p_index_mode','Parser.py',351),
  ('index_mode -> literal_range','index_mode',1,'p_index_mode','Parser.py',352),
  ('element_mode -> mode','element_mode',1,'p_element_mode','Parser.py',356),
  ('location -> identifier','location',1,'p_location','Parser.py',367),
  ('location -> dereferenced_reference','location',1,'p_location','Parser.py',368),
  ('location -> array_element','location',1,'p_location','Parser.py',369),
  ('location -> array_slice','location',1,'p_location','Parser.py',370),
  ('location -> call_action','location',1,'p_location','Parser.py',371),
  ('dereferenced_reference -> array_location ARROW','dereferenced_reference',2,'p_dereferenced_reference','Parser.py',375),
  ('array_element -> array_location LBRACKET expression_list RBRACKET','array_element',4,'p_array_element','Parser.py',399),
  ('expression_list -> expression','expression_list',1,'p_expression_list','Parser.py',403),
  ('expression_list -> expression COMMA expression_list','expression_list',3,'p_expression_list','Parser.py',404),
  ('array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET','array_slice',6,'p_array_slice','Parser.py',412),
  ('array_location -> location','array_location',1,'p_array_location','Parser.py',416),
  ('expression -> operand0','expression',1,'p_expression','Parser.py',426),
  ('expression -> conditional_expression','expression',1,'p_expression','Parser.py',427),
  ('parenthesized_expression -> LPAREN expression RPAREN','parenthesized_expression',3,'p_parenthesized_expression','Parser.py',431),
  ('conditional_expression -> IF expression then_expression else_expression FI','conditional_expression',5,'p_conditional_expression','Parser.py',439),
  ('conditional_expression -> IF expression then_expression elsif_expression else_expression FI','conditional_expression',6,'p_conditional_expression','Parser.py',440),
  ('then_expression -> THEN expression','then_expression',2,'p_then_expression','Parser.py',444),
  ('else_expression -> ELSE expression','else_expression',2,'p_else_expression','Parser.py',448),
  ('elsif_expression -> ELSIF expression then_expression','elsif_expression',3,'p_elsif_expression','Parser.py',452),
  ('elsif_expression -> elsif_expression ELSIF expression then_expression','elsif_expression',4,'p_elsif_expression','Parser.py',453),
  ('operand0 -> operand1','operand0',1,'p_operand0','Parser.py',468),
  ('operand0 -> operand0 operator1 operand1','operand0',3,'p_operand0','Parser.py',469),
  ('operand1 -> operand2','operand1',1,'p_operand1','Parser.py',476),
  ('operand1 -> operand1 operator2 operand2','operand1',3,'p_operand1','Parser.py',477),
  ('operand2 -> operand3','operand2',1,'p_operand2','Parser.py',484),
  ('operand2 -> operand2 arithmetic_multiplicative_operator operand3','operand2',3,'p_operand2','Parser.py',485),
  ('operand3 -> monadic_operator operand4','operand3',2,'p_operand3','Parser.py',493),
  ('operand3 -> operand4','operand3',1,'p_operand3','Parser.py',494),
  ('operand4 -> array_location','operand4',1,'p_operand4','Parser.py',501),
  ('operand4 -> referenced_location','operand4',1,'p_operand4','Parser.py',502),
  ('operand4 -> primitive_value','operand4',1,'p_operand4','Parser.py',503),
  ('arithmetic_multiplicative_operator -> TIMES','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',514),
  ('arithmetic_multiplicative_operator -> DIVIDE','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',515),
  ('arithmetic_multiplicative_operator -> MODULO','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',516),
  ('monadic_operator -> MINUS','monadic_operator',1,'p_monadic_operator','Parser.py',520),
  ('monadic_operator -> NOT','monadic_operator',1,'p_monadic_operator','Parser.py',521),
  ('referenced_location -> ARROW array_location','referenced_location',2,'p_referenced_location','Parser.py',525),
  ('operator1 -> membership_operator','operator1',1,'p_operator1','Parser.py',529),
  ('operator1 -> relational_operator','operator1',1,'p_operator1','Parser.py',530),
  ('relational_operator -> AND','relational_operator',1,'p_relational_operator','Parser.py',533),
  ('relational_operator -> OR','relational_operator',1,'p_relational_operator','Parser.py',534),
  ('relational_operator -> EQUAL','relational_operator',1,'p_relational_operator','Parser.py',535),
  ('relational_operator -> NOTEQ','relational_operator',1,'p_relational_operator','Parser.py',536),
  ('relational_operator -> GREATER','relational_operator',1,'p_relational_operator','Parser.py',537),
  ('relational_operator -> GTEQUAL','relational_operator',1,'p_relational_operator','Parser.py',538),
  ('relational_operator -> LESS','relational_operator',1,'p_relational_operator','Parser.py',539),
  ('relational_operator -> LTEQUAL','relational_operator',1,'p_relational_operator','Parser.py',540),
  ('operator2 -> arithmetic_additive_operator','operator2',1,'p_operator2','Parser.py',544),
  ('operator2 -> string_concatenation_operator','operator2',1,'p_operator2','Parser.py',545),
  ('arithmetic_additive_operator -> PLUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','Parser.py',549),
  ('arithmetic_additive_operator -> MINUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','Parser.py',550),
  ('string_concatenation_operator -> CONCAT','string_concatenation_operator',1,'p_string_concatenation_operator','Parser.py',554),
  ('membership_operator -> IN','membership_operator',1,'p_membership_operator','Parser.py',559),
  ('primitive_value -> literal','primitive_value',1,'p_primitive_value','Parser.py',571),
  ('primitive_value -> value_array_element','primitive_value',1,'p_primitive_value','Parser.py',572),
  ('primitive_value -> value_array_slice','primitive_value',1,'p_primitive_value','Parser.py',573),
  ('primitive_value -> parenthesized_expression','primitive_value',1,'p_primitive_value','Parser.py',574),
  ('literal -> integer_literal','literal',1,'p_literal','Parser.py',578),
  ('literal -> boolean_literal','literal',1,'p_literal','Parser.py',579),
  ('literal -> character_literal','literal',1,'p_literal','Parser.py',580),
  ('literal -> empty_literal','literal',1,'p_literal','Parser.py',581),
  ('literal -> character_string_literal','literal',1,'p_literal','Parser.py',582),
  ('value_array_element -> primitive_value LBRACKET expression_list RBRACKET','value_array_element',4,'p_value_array_element','Parser.py',586),
  ('value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET','value_array_slice',6,'p_value_array_slice','Parser.py',590),
  ('integer_literal -> ICONST','integer_literal',1,'p_integer_literal','Parser.py',598),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','Parser.py',602),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','Parser.py',603),
  ('character_literal -> CCONST','character_literal',1,'p_character_literal','Parser.py',607),
  ('character_literal -> HAT LPAREN ICONST RPAREN','character_literal',4,'p_character_literal','Parser.py',608),
  ('empty_literal -> NULL','empty_literal',1,'p_empty_literal','Parser.py',617),
  ('character_string_literal -> SCONST','character_string_literal',1,'p_character_string_literal','Parser.py',621),
  ('action_statement -> identifier COLON action SEMI','action_statement',4,'p_action_statement','Parser.py',632),
  ('action_statement -> action SEMI','action_statement',2,'p_action_statement','Parser.py',633),
  ('action -> bracketed_action','action',1,'p_action','Parser.py',638),
  ('action -> assignment_action','action',1,'p_action','Parser.py',639),
  ('action -> call_action','action',1,'p_action','Parser.py',640),
  ('action -> exit_action','action',1,'p_action','Parser.py',641),
  ('action -> result_action','action',1,'p_action','Parser.py',642),
  ('action -> return_action','action',1,'p_action','Parser.py',643),
  ('bracketed_action -> if_action','bracketed_action',1,'p_bracketed_action','Parser.py',647),
  ('bracketed_action -> do_action','bracketed_action',1,'p_bracketed_action','Parser.py',648),
  ('assignment_action -> array_location assigning_operator expression','assignment_action',3,'p_assignment_action','Parser.py',652),
  ('assigning_operator -> closed_dyadic_operator ASSIGN','assigning_operator',2,'p_assigning_operator','Parser.py',656),
  ('assigning_operator -> ASSIGN','assigning_operator',1,'p_assigning_operator','Parser.py',657),
  ('closed_dyadic_operator -> arithmetic_additive_operator','closed_dyadic_operator',1,'p_closed_dyadic_operator','Parser.py',661),
  ('closed_dyadic_operator -> arithmetic_multiplicative_operator','closed_dyadic_operator',1,'p_closed_dyadic_operator','Parser.py',662),
  ('closed_dyadic_operator -> string_concatenation_operator','closed_dyadic_operator',1,'p_closed_dyadic_operator','Parser.py',663),
  ('if_action -> IF expression then_clause else_clause FI','if_action',5,'p_if_action','Parser.py',667),
  ('if_action -> IF expression then_clause FI','if_action',4,'p_if_action','Parser.py',668),
  ('then_clause -> THEN action_statement_list','then_clause',2,'p_then_clause','Parser.py',672),
  ('else_clause -> ELSE action_statement_list','else_clause',2,'p_else_clause','Parser.py',676),
  ('else_clause -> ELSIF expression then_clause else_clause','else_clause',4,'p_else_clause','Parser.py',677),
  ('else_clause -> ELSIF expression then_clause','else_clause',3,'p_else_clause','Parser.py',678),
  ('action_statement_list -> action_statement action_statement_nullable','action_statement_list',2,'p_action_statement_list','Parser.py',689),
  ('action_statement_nullable -> action_statement action_statement_nullable','action_statement_nullable',2,'p_action_statement_nullable','Parser.py',701),
  ('action_statement_nullable -> empty','action_statement_nullable',1,'p_action_statement_nullable','Parser.py',702),
  ('call_action -> procedure_call','call_action',1,'p_call_action','Parser.py',719),
  ('call_action -> builtin_call','call_action',1,'p_call_action','Parser.py',720),
  ('builtin_call -> builtin_name LPAREN parameter_list RPAREN','builtin_call',4,'p_builtin_call','Parser.py',724),
  ('builtin_call -> builtin_name LPAREN RPAREN','builtin_call',3,'p_builtin_call','Parser.py',725),
  ('builtin_name -> ABS','builtin_name',1,'p_builtin_name','Parser.py',730),
  ('builtin_name -> ASC','builtin_name',1,'p_builtin_name','Parser.py',731),
  ('builtin_name -> NUM','builtin_name',1,'p_builtin_name','Parser.py',732),
  ('builtin_name -> UPPER','builtin_name',1,'p_builtin_name','Parser.py',733),
  ('builtin_name -> LOWER','builtin_name',1,'p_builtin_name','Parser.py',734),
  ('builtin_name -> LENGTH','builtin_name',1,'p_builtin_name','Parser.py',735),
  ('builtin_name -> READ','builtin_name',1,'p_builtin_name','Parser.py',736),
  ('builtin_name -> PRINT','builtin_name',1,'p_builtin_name','Parser.py',737),
  ('procedure_call -> ID LPAREN parameter_list RPAREN','procedure_call',4,'p_procedure_call','Parser.py',741),
  ('procedure_call -> ID LPAREN RPAREN','procedure_call',3,'p_procedure_call','Parser.py',742),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','Parser.py',746),
  ('parameter_list -> expression COMMA parameter_list','parameter_list',3,'p_parameter_list','Parser.py',747),
  ('exit_action -> EXIT identifier','exit_action',2,'p_exit_action','Parser.py',756),
  ('return_action -> RETURN result','return_action',2,'p_return_action','Parser.py',764),
  ('result -> expression','result',1,'p_result','Parser.py',768),
  ('result -> empty','result',1,'p_result','Parser.py',769),
  ('result_action -> RESULT expression','result_action',2,'p_result_action','Parser.py',772),
  ('do_action -> DO control_part SEMI action_statement_nullable OD','do_action',5,'p_do_action','Parser.py',780),
  ('do_action -> DO action_statement_nullable OD','do_action',3,'p_do_action','Parser.py',781),
  ('control_part -> for_control while_control','control_part',2,'p_control_part','Parser.py',788),
  ('control_part -> for_control','control_part',1,'p_control_part','Parser.py',789),
  ('control_part -> while_control','control_part',1,'p_control_part','Parser.py',790),
  ('for_control -> FOR iteration','for_control',2,'p_for_control','Parser.py',794),
  ('iteration -> step_enumeration','iteration',1,'p_iteration','Parser.py',798),
  ('iteration -> range_enumeration','iteration',1,'p_iteration','Parser.py',799),
  ('step_enumeration -> identifier ASSIGN expression step_value DOWN end_value','step_enumeration',6,'p_step_enumeration','Parser.py',803),
  ('step_enumeration -> identifier ASSIGN expression step_value end_value','step_enumeration',5,'p_step_enumeration','Parser.py',804),
  ('step_enumeration -> identifier ASSIGN expression DOWN end_value','step_enumeration',5,'p_step_enumeration','Parser.py',805),
  ('step_enumeration -> identifier ASSIGN expression end_value','step_enumeration',4,'p_step_enumeration','Parser.py',806),
  ('step_value -> BY expression','step_value',2,'p_step_value','Parser.py',818),
  ('end_value -> TO expression','end_value',2,'p_end_value','Parser.py',822),
  ('range_enumeration -> identifier DOWN IN discrete_mode','range_enumeration',4,'p_range_enumeration','Parser.py',826),
  ('range_enumeration -> identifier IN discrete_mode','range_enumeration',3,'p_range_enumeration','Parser.py',827),
  ('while_control -> WHILE expression','while_control',2,'p_while_control','Parser.py',834),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',840),
]
