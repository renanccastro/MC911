
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ICONST CCONST SCONST COMMA PLUS MINUS TIMES DIVIDE COLON LPAREN RPAREN ASSIGN SEMI ARROW LTEQUAL LESS GREATER GTEQUAL EQUAL LBRACKET RBRACKET ID MODULO AND OR NOTEQ NOT DO DCL RETURN THEN INT FALSE CHARS SYN ELSE DOWN NUM RESULT IN FI ARRAY NULL LENGTH BY LOWER IF LOC CHAR REF END FOR READ PROC OD WHILE UPPER ASC TO RETURNS ABS EXIT ELSIF PRINT BOOL TYPE TRUEprogram : statement_liststatement_list : statement statement_nullablestatement_nullable : statement statement_nullable\n                              | emptystatement : declaration_statementdeclaration_statement : DCL declaration_list SEMIdeclaration_list : declaration\n                            | declaration COMMA declarationdeclaration : identifier_list modeidentifier_list : ID\n                           | ID COMMA identifier_listmode : mode_name\n                | discrete_mode\n                | reference_modemode_name : IDdiscrete_mode : integer_mode\n                         | boolean_mode\n                         | character_mode\n                         | discrete_range_modeinteger_mode : INTboolean_mode : BOOLcharacter_mode : CHARdiscrete_range_mode : discrete_mode_name  LPAREN literal_range RPAREN\n                               | discrete_mode LPAREN literal_range RPARENliteral_range : lower_bound COLON upper_boundlower_bound : ICONSTupper_bound : ICONSTdiscrete_mode_name : IDreference_mode : REF modeempty :'
    
_lr_action_items = {'ICONST':([33,34,40,],[37,37,43,]),'DCL':([0,3,4,11,13,],[1,1,-5,1,-6,]),'RPAREN':([38,39,43,44,],[41,42,-27,-25,]),'SEMI':([6,7,15,17,18,19,20,21,23,24,25,26,27,28,31,32,41,42,],[13,-7,-19,-20,-17,-18,-22,-14,-16,-9,-13,-21,-12,-15,-8,-29,-23,-24,]),'INT':([8,9,16,35,],[17,-10,17,-11,]),'CHAR':([8,9,16,35,],[20,-10,20,-11,]),'COLON':([36,37,],[40,-26,]),'COMMA':([7,9,15,17,18,19,20,21,23,24,25,26,27,28,32,41,42,],[14,29,-19,-20,-17,-18,-22,-14,-16,-9,-13,-21,-12,-15,-29,-23,-24,]),'LPAREN':([15,17,18,19,20,22,23,25,26,28,41,42,],[-19,-20,-17,-18,-22,33,-16,34,-21,-28,-23,-24,]),'BOOL':([8,9,16,35,],[26,-10,26,-11,]),'REF':([8,9,16,35,],[16,-10,16,-11,]),'ID':([1,8,9,14,16,29,35,],[9,28,-10,9,28,9,-11,]),'$end':([2,3,4,5,10,11,12,13,30,],[0,-30,-5,-1,-2,-30,-4,-6,-3,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement_nullable':([3,11,],[10,30,]),'upper_bound':([40,],[44,]),'character_mode':([8,16,],[19,19,]),'discrete_range_mode':([8,16,],[15,15,]),'lower_bound':([33,34,],[36,36,]),'declaration':([1,14,],[7,31,]),'discrete_mode_name':([8,16,],[22,22,]),'boolean_mode':([8,16,],[18,18,]),'declaration_list':([1,],[6,]),'reference_mode':([8,16,],[21,21,]),'program':([0,],[2,]),'integer_mode':([8,16,],[23,23,]),'mode':([8,16,],[24,32,]),'statement':([0,3,11,],[3,11,11,]),'declaration_statement':([0,3,11,],[4,4,4,]),'statement_list':([0,],[5,]),'discrete_mode':([8,16,],[25,25,]),'identifier_list':([1,14,29,],[8,8,35,]),'mode_name':([8,16,],[27,27,]),'literal_range':([33,34,],[38,39,]),'empty':([3,11,],[12,12,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','Parser.py',19),
  ('statement_list -> statement statement_nullable','statement_list',2,'p_statement_list','Parser.py',23),
  ('statement_nullable -> statement statement_nullable','statement_nullable',2,'p_statement_nullable','Parser.py',32),
  ('statement_nullable -> empty','statement_nullable',1,'p_statement_nullable','Parser.py',33),
  ('statement -> declaration_statement','statement',1,'p_statement','Parser.py',44),
  ('declaration_statement -> DCL declaration_list SEMI','declaration_statement',3,'p_declaration_statement','Parser.py',49),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','Parser.py',53),
  ('declaration_list -> declaration COMMA declaration','declaration_list',3,'p_declaration_list','Parser.py',54),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','Parser.py',64),
  ('identifier_list -> ID','identifier_list',1,'p_identifier_list','Parser.py',68),
  ('identifier_list -> ID COMMA identifier_list','identifier_list',3,'p_identifier_list','Parser.py',69),
  ('mode -> mode_name','mode',1,'p_mode','Parser.py',78),
  ('mode -> discrete_mode','mode',1,'p_mode','Parser.py',79),
  ('mode -> reference_mode','mode',1,'p_mode','Parser.py',80),
  ('mode_name -> ID','mode_name',1,'p_mode_name','Parser.py',86),
  ('discrete_mode -> integer_mode','discrete_mode',1,'p_discrete_mode','Parser.py',91),
  ('discrete_mode -> boolean_mode','discrete_mode',1,'p_discrete_mode','Parser.py',92),
  ('discrete_mode -> character_mode','discrete_mode',1,'p_discrete_mode','Parser.py',93),
  ('discrete_mode -> discrete_range_mode','discrete_mode',1,'p_discrete_mode','Parser.py',94),
  ('integer_mode -> INT','integer_mode',1,'p_integer_mode','Parser.py',98),
  ('boolean_mode -> BOOL','boolean_mode',1,'p_boolean_mode','Parser.py',101),
  ('character_mode -> CHAR','character_mode',1,'p_character_mode','Parser.py',104),
  ('discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','Parser.py',108),
  ('discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','Parser.py',109),
  ('literal_range -> lower_bound COLON upper_bound','literal_range',3,'p_literal_range','Parser.py',113),
  ('lower_bound -> ICONST','lower_bound',1,'p_lower_bound','Parser.py',118),
  ('upper_bound -> ICONST','upper_bound',1,'p_upper_bound','Parser.py',121),
  ('discrete_mode_name -> ID','discrete_mode_name',1,'p_discrete_mode_name','Parser.py',127),
  ('reference_mode -> REF mode','reference_mode',2,'p_reference_mode','Parser.py',131),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',136),
]
