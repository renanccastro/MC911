
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ICONST CCONST SCONST COMMA PLUS MINUS TIMES DIVIDE COLON LPAREN RPAREN ASSIGN SEMI ARROW LTEQUAL LESS GREATER GTEQUAL EQUAL LBRACKET RBRACKET ID MODULO AND OR NOTEQ NOT CONCAT DO DCL RETURN THEN INT FALSE CHARS SYN ELSE DOWN NUM RESULT IN FI ARRAY NULL LENGTH BY LOWER IF LOC CHAR REF END FOR READ PROC OD WHILE UPPER ASC TO RETURNS ABS EXIT ELSIF PRINT BOOL TYPE TRUEprogram : statement_liststatement_list : statement statement_nullablestatement_nullable : statement statement_nullable\n                              | emptystatement : declaration_statement\n                     | synonym_statementsynonym_statement : SYN synonym_list SEMIsynonym_list : synonym_definition\n                        | synonym_definition COMMA synonym_definitionsynonym_definition : identifier_list mode ASSIGN expression\n                              | identifier_list ASSIGN expressiondeclaration_statement : DCL declaration_list SEMIdeclaration_list : declaration\n                            | declaration COMMA declarationdeclaration : identifier_list mode initialization\n                       | identifier_list modeinitialization : ASSIGN expressionidentifier_list : ID\n                           | ID COMMA identifier_listmode : mode_name\n                | discrete_mode\n                | reference_modemode_name : IDdiscrete_mode : integer_mode\n                         | boolean_mode\n                         | character_mode\n                         | discrete_range_modeinteger_mode : INTboolean_mode : BOOLcharacter_mode : CHARdiscrete_range_mode : discrete_mode_name  LPAREN literal_range RPAREN\n                               | discrete_mode LPAREN literal_range RPARENliteral_range : lower_bound COLON upper_boundlower_bound : ICONSTupper_bound : ICONSTdiscrete_mode_name : IDreference_mode : REF modeexpression : operand0operand0 : operand1\n                    | operand0 operator1 operand1operand1 : operand2\n                    | operand1 operator2 operand2operand2 : operand3\n                    | operand2 arithmetic_multiplicative_operator operand3operand3 : monadic_operator operand4\n                    | operand4operand4 : primitive_valuearithmetic_multiplicative_operator : TIMES\n                                              | DIVIDE\n                                              | MODULOmonadic_operator : MINUS\n                            | NOToperator1 : relational_operator\n                    | membership_operatoroperator2 : arithmetic_additive_operator\n                     | string_concatenation_operatorarithmetic_additive_operator : PLUS\n                                        | MINUSstring_concatenation_operator : CONCATrelational_operator : AND\n                               | OR\n                               | EQUAL\n                               | NOTEQ\n                               | GREATER\n                               | GTEQUAL\n                               | LESS\n                               | LTEQUALmembership_operator : INprimitive_value : literalliteral : integer_literal\n                   | boolean_literal\n                   | character_literal\n                   | empty_literal\n                   | character_string_literalinteger_literal : ICONSTboolean_literal : TRUE\n                           | FALSEcharacter_literal : CCONSTempty_literal : NULLcharacter_string_literal : SCONSTempty :'
    
_lr_action_items = {'LESS':([50,51,52,53,55,56,57,58,59,60,61,62,63,64,65,66,68,70,77,103,104,105,],[-73,-71,-79,-76,-46,-39,85,-43,-41,-80,-69,-78,-75,-70,-74,-77,-72,-47,-45,-42,-40,-44,]),'NOTEQ':([50,51,52,53,55,56,57,58,59,60,61,62,63,64,65,66,68,70,77,103,104,105,],[-73,-71,-79,-76,-46,-39,90,-43,-41,-80,-69,-78,-75,-70,-74,-77,-72,-47,-45,-42,-40,-44,]),'EQUAL':([50,51,52,53,55,56,57,58,59,60,61,62,63,64,65,66,68,70,77,103,104,105,],[-73,-71,-79,-76,-46,-39,89,-43,-41,-80,-69,-78,-75,-70,-74,-77,-72,-47,-45,-42,-40,-44,]),'CHAR':([10,11,14,21,46,],[25,-18,25,25,-19,]),'COLON':([71,72,],[100,-34,]),'NULL':([38,44,48,49,54,67,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[52,52,52,52,-51,-52,-55,-56,52,-57,-58,-59,-60,-66,52,-68,-54,-62,-63,-65,-64,-67,-61,-53,-50,-49,52,-48,]),'TRUE':([38,44,48,49,54,67,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[53,53,53,53,-51,-52,-55,-56,53,-57,-58,-59,-60,-66,53,-68,-54,-62,-63,-65,-64,-67,-61,-53,-50,-49,53,-48,]),'MINUS':([38,44,48,50,51,52,53,55,56,58,59,60,61,62,63,64,65,66,68,70,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,103,104,105,],[54,54,54,-73,-71,-79,-76,-46,82,-43,-41,-80,-69,-78,-75,-70,-74,-77,-72,-47,-45,-55,-56,54,-57,-58,-59,-60,-66,54,-68,-54,-62,-63,-65,-64,-67,-61,-53,-50,-49,54,-48,-42,82,-44,]),'CONCAT':([50,51,52,53,55,56,58,59,60,61,62,63,64,65,66,68,70,77,103,104,105,],[-73,-71,-79,-76,-46,83,-43,-41,-80,-69,-78,-75,-70,-74,-77,-72,-47,-45,-42,83,-44,]),'DCL':([0,2,5,6,16,18,36,],[1,-6,1,-5,1,-12,-7,]),'RPAREN':([73,75,106,107,],[101,102,-35,-33,]),'SEMI':([8,9,12,13,20,22,23,24,25,26,28,29,30,31,32,33,40,41,43,47,50,51,52,53,55,56,57,58,59,60,61,62,63,64,65,66,68,69,70,74,76,77,101,102,103,104,105,],[18,-13,-8,36,-27,-28,-25,-26,-30,-22,-24,-16,-21,-29,-20,-23,-14,-37,-15,-9,-73,-71,-79,-76,-46,-39,-38,-43,-41,-80,-69,-78,-75,-70,-74,-77,-72,-11,-47,-17,-10,-45,-31,-32,-42,-40,-44,]),'REF':([10,11,14,21,46,],[21,-18,21,21,-19,]),'SCONST':([38,44,48,49,54,67,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[60,60,60,60,-51,-52,-55,-56,60,-57,-58,-59,-60,-66,60,-68,-54,-62,-63,-65,-64,-67,-61,-53,-50,-49,60,-48,]),'COMMA':([9,11,12,20,22,23,24,25,26,28,29,30,31,32,33,41,43,50,51,52,53,55,56,57,58,59,60,61,62,63,64,65,66,68,69,70,74,76,77,101,102,103,104,105,],[19,34,35,-27,-28,-25,-26,-30,-22,-24,-16,-21,-29,-20,-23,-37,-15,-73,-71,-79,-76,-46,-39,-38,-43,-41,-80,-69,-78,-75,-70,-74,-77,-72,-11,-47,-17,-10,-45,-31,-32,-42,-40,-44,]),'PLUS':([50,51,52,53,55,56,58,59,60,61,62,63,64,65,66,68,70,77,103,104,105,],[-73,-71,-79,-76,-46,81,-43,-41,-80,-69,-78,-75,-70,-74,-77,-72,-47,-45,-42,81,-44,]),'GTEQUAL':([50,51,52,53,55,56,57,58,59,60,61,62,63,64,65,66,68,70,77,103,104,105,],[-73,-71,-79,-76,-46,-39,91,-43,-41,-80,-69,-78,-75,-70,-74,-77,-72,-47,-45,-42,-40,-44,]),'ASSIGN':([11,14,20,22,23,24,25,26,28,29,30,31,32,33,37,41,46,101,102,],[-18,38,-27,-28,-25,-26,-30,-22,-24,44,-21,-29,-20,-23,48,-37,-19,-31,-32,]),'CCONST':([38,44,48,49,54,67,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[62,62,62,62,-51,-52,-55,-56,62,-57,-58,-59,-60,-66,62,-68,-54,-62,-63,-65,-64,-67,-61,-53,-50,-49,62,-48,]),'$end':([2,4,5,6,7,15,16,17,18,36,39,],[-6,0,-81,-5,-1,-2,-81,-4,-12,-7,-3,]),'MODULO':([50,51,52,53,55,58,59,60,61,62,63,64,65,66,68,70,77,103,105,],[-73,-71,-79,-76,-46,-43,96,-80,-69,-78,-75,-70,-74,-77,-72,-47,-45,96,-44,]),'DIVIDE':([50,51,52,53,55,58,59,60,61,62,63,64,65,66,68,70,77,103,105,],[-73,-71,-79,-76,-46,-43,97,-80,-69,-78,-75,-70,-74,-77,-72,-47,-45,97,-44,]),'TIMES':([50,51,52,53,55,58,59,60,61,62,63,64,65,66,68,70,77,103,105,],[-73,-71,-79,-76,-46,-43,99,-80,-69,-78,-75,-70,-74,-77,-72,-47,-45,99,-44,]),'ICONST':([38,42,44,45,48,49,54,67,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,],[63,72,63,72,63,63,-51,-52,-55,-56,63,-57,-58,-59,-60,-66,63,-68,-54,-62,-63,-65,-64,-67,-61,-53,-50,-49,63,-48,106,]),'LPAREN':([20,22,23,24,25,27,28,30,31,33,101,102,],[-27,-28,-25,-26,-30,42,-24,45,-29,-36,-31,-32,]),'IN':([50,51,52,53,55,56,57,58,59,60,61,62,63,64,65,66,68,70,77,103,104,105,],[-73,-71,-79,-76,-46,-39,87,-43,-41,-80,-69,-78,-75,-70,-74,-77,-72,-47,-45,-42,-40,-44,]),'ID':([1,3,10,11,14,19,21,34,35,46,],[11,11,33,-18,33,11,33,11,11,-19,]),'LTEQUAL':([50,51,52,53,55,56,57,58,59,60,61,62,63,64,65,66,68,70,77,103,104,105,],[-73,-71,-79,-76,-46,-39,93,-43,-41,-80,-69,-78,-75,-70,-74,-77,-72,-47,-45,-42,-40,-44,]),'AND':([50,51,52,53,55,56,57,58,59,60,61,62,63,64,65,66,68,70,77,103,104,105,],[-73,-71,-79,-76,-46,-39,84,-43,-41,-80,-69,-78,-75,-70,-74,-77,-72,-47,-45,-42,-40,-44,]),'FALSE':([38,44,48,49,54,67,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[66,66,66,66,-51,-52,-55,-56,66,-57,-58,-59,-60,-66,66,-68,-54,-62,-63,-65,-64,-67,-61,-53,-50,-49,66,-48,]),'GREATER':([50,51,52,53,55,56,57,58,59,60,61,62,63,64,65,66,68,70,77,103,104,105,],[-73,-71,-79,-76,-46,-39,92,-43,-41,-80,-69,-78,-75,-70,-74,-77,-72,-47,-45,-42,-40,-44,]),'INT':([10,11,14,21,46,],[22,-18,22,22,-19,]),'SYN':([0,2,5,6,16,18,36,],[3,-6,3,-5,3,-12,-7,]),'BOOL':([10,11,14,21,46,],[31,-18,31,31,-19,]),'NOT':([38,44,48,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[67,67,67,-55,-56,67,-57,-58,-59,-60,-66,67,-68,-54,-62,-63,-65,-64,-67,-61,-53,-50,-49,67,-48,]),'OR':([50,51,52,53,55,56,57,58,59,60,61,62,63,64,65,66,68,70,77,103,104,105,],[-73,-71,-79,-76,-46,-39,94,-43,-41,-80,-69,-78,-75,-70,-74,-77,-72,-47,-45,-42,-40,-44,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'arithmetic_additive_operator':([56,104,],[78,78,]),'monadic_operator':([38,44,48,80,86,98,],[49,49,49,49,49,49,]),'relational_operator':([57,],[95,]),'synonym_statement':([0,5,16,],[2,2,2,]),'arithmetic_multiplicative_operator':([59,103,],[98,98,]),'operator2':([56,104,],[80,80,]),'boolean_mode':([10,14,21,],[23,23,23,]),'boolean_literal':([38,44,48,49,80,86,98,],[51,51,51,51,51,51,51,]),'reference_mode':([10,14,21,],[26,26,26,]),'discrete_mode_name':([10,14,21,],[27,27,27,]),'discrete_mode':([10,14,21,],[30,30,30,]),'declaration_list':([1,],[8,]),'mode_name':([10,14,21,],[32,32,32,]),'operand4':([38,44,48,49,80,86,98,],[55,55,55,77,55,55,55,]),'statement_nullable':([5,16,],[15,39,]),'operand1':([38,44,48,86,],[56,56,56,104,]),'operand0':([38,44,48,],[57,57,57,]),'operand3':([38,44,48,80,86,98,],[58,58,58,58,58,105,]),'operand2':([38,44,48,80,86,],[59,59,59,103,59,]),'membership_operator':([57,],[88,]),'operator1':([57,],[86,]),'literal':([38,44,48,49,80,86,98,],[61,61,61,61,61,61,61,]),'program':([0,],[4,]),'statement':([0,5,16,],[5,16,16,]),'empty':([5,16,],[17,17,]),'lower_bound':([42,45,],[71,71,]),'initialization':([29,],[43,]),'character_string_literal':([38,44,48,49,80,86,98,],[65,65,65,65,65,65,65,]),'integer_mode':([10,14,21,],[28,28,28,]),'empty_literal':([38,44,48,49,80,86,98,],[50,50,50,50,50,50,50,]),'synonym_list':([3,],[13,]),'declaration':([1,19,],[9,40,]),'identifier_list':([1,3,19,34,35,],[10,14,10,46,14,]),'integer_literal':([38,44,48,49,80,86,98,],[64,64,64,64,64,64,64,]),'synonym_definition':([3,35,],[12,47,]),'upper_bound':([100,],[107,]),'discrete_range_mode':([10,14,21,],[20,20,20,]),'character_mode':([10,14,21,],[24,24,24,]),'string_concatenation_operator':([56,104,],[79,79,]),'declaration_statement':([0,5,16,],[6,6,6,]),'mode':([10,14,21,],[29,37,41,]),'statement_list':([0,],[7,]),'character_literal':([38,44,48,49,80,86,98,],[68,68,68,68,68,68,68,]),'literal_range':([42,45,],[73,75,]),'expression':([38,44,48,],[69,74,76,]),'primitive_value':([38,44,48,49,80,86,98,],[70,70,70,70,70,70,70,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','Parser.py',28),
  ('statement_list -> statement statement_nullable','statement_list',2,'p_statement_list','Parser.py',32),
  ('statement_nullable -> statement statement_nullable','statement_nullable',2,'p_statement_nullable','Parser.py',41),
  ('statement_nullable -> empty','statement_nullable',1,'p_statement_nullable','Parser.py',42),
  ('statement -> declaration_statement','statement',1,'p_statement','Parser.py',53),
  ('statement -> synonym_statement','statement',1,'p_statement','Parser.py',54),
  ('synonym_statement -> SYN synonym_list SEMI','synonym_statement',3,'p_synonym_statement','Parser.py',66),
  ('synonym_list -> synonym_definition','synonym_list',1,'p_synonym_list','Parser.py',70),
  ('synonym_list -> synonym_definition COMMA synonym_definition','synonym_list',3,'p_synonym_list','Parser.py',71),
  ('synonym_definition -> identifier_list mode ASSIGN expression','synonym_definition',4,'p_synonym_definition','Parser.py',81),
  ('synonym_definition -> identifier_list ASSIGN expression','synonym_definition',3,'p_synonym_definition','Parser.py',82),
  ('declaration_statement -> DCL declaration_list SEMI','declaration_statement',3,'p_declaration_statement','Parser.py',94),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','Parser.py',98),
  ('declaration_list -> declaration COMMA declaration','declaration_list',3,'p_declaration_list','Parser.py',99),
  ('declaration -> identifier_list mode initialization','declaration',3,'p_declaration','Parser.py',109),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','Parser.py',110),
  ('initialization -> ASSIGN expression','initialization',2,'p_initialization','Parser.py',114),
  ('identifier_list -> ID','identifier_list',1,'p_identifier_list','Parser.py',118),
  ('identifier_list -> ID COMMA identifier_list','identifier_list',3,'p_identifier_list','Parser.py',119),
  ('mode -> mode_name','mode',1,'p_mode','Parser.py',132),
  ('mode -> discrete_mode','mode',1,'p_mode','Parser.py',133),
  ('mode -> reference_mode','mode',1,'p_mode','Parser.py',134),
  ('mode_name -> ID','mode_name',1,'p_mode_name','Parser.py',140),
  ('discrete_mode -> integer_mode','discrete_mode',1,'p_discrete_mode','Parser.py',145),
  ('discrete_mode -> boolean_mode','discrete_mode',1,'p_discrete_mode','Parser.py',146),
  ('discrete_mode -> character_mode','discrete_mode',1,'p_discrete_mode','Parser.py',147),
  ('discrete_mode -> discrete_range_mode','discrete_mode',1,'p_discrete_mode','Parser.py',148),
  ('integer_mode -> INT','integer_mode',1,'p_integer_mode','Parser.py',152),
  ('boolean_mode -> BOOL','boolean_mode',1,'p_boolean_mode','Parser.py',155),
  ('character_mode -> CHAR','character_mode',1,'p_character_mode','Parser.py',158),
  ('discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','Parser.py',162),
  ('discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','Parser.py',163),
  ('literal_range -> lower_bound COLON upper_bound','literal_range',3,'p_literal_range','Parser.py',167),
  ('lower_bound -> ICONST','lower_bound',1,'p_lower_bound','Parser.py',172),
  ('upper_bound -> ICONST','upper_bound',1,'p_upper_bound','Parser.py',175),
  ('discrete_mode_name -> ID','discrete_mode_name',1,'p_discrete_mode_name','Parser.py',179),
  ('reference_mode -> REF mode','reference_mode',2,'p_reference_mode','Parser.py',183),
  ('expression -> operand0','expression',1,'p_expression','Parser.py',194),
  ('operand0 -> operand1','operand0',1,'p_operand0','Parser.py',199),
  ('operand0 -> operand0 operator1 operand1','operand0',3,'p_operand0','Parser.py',200),
  ('operand1 -> operand2','operand1',1,'p_operand1','Parser.py',206),
  ('operand1 -> operand1 operator2 operand2','operand1',3,'p_operand1','Parser.py',207),
  ('operand2 -> operand3','operand2',1,'p_operand2','Parser.py',214),
  ('operand2 -> operand2 arithmetic_multiplicative_operator operand3','operand2',3,'p_operand2','Parser.py',215),
  ('operand3 -> monadic_operator operand4','operand3',2,'p_operand3','Parser.py',224),
  ('operand3 -> operand4','operand3',1,'p_operand3','Parser.py',225),
  ('operand4 -> primitive_value','operand4',1,'p_operand4','Parser.py',234),
  ('arithmetic_multiplicative_operator -> TIMES','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',241),
  ('arithmetic_multiplicative_operator -> DIVIDE','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',242),
  ('arithmetic_multiplicative_operator -> MODULO','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',243),
  ('monadic_operator -> MINUS','monadic_operator',1,'p_monadic_operator','Parser.py',247),
  ('monadic_operator -> NOT','monadic_operator',1,'p_monadic_operator','Parser.py',248),
  ('operator1 -> relational_operator','operator1',1,'p_operator1','Parser.py',253),
  ('operator1 -> membership_operator','operator1',1,'p_operator1','Parser.py',254),
  ('operator2 -> arithmetic_additive_operator','operator2',1,'p_operator2','Parser.py',258),
  ('operator2 -> string_concatenation_operator','operator2',1,'p_operator2','Parser.py',259),
  ('arithmetic_additive_operator -> PLUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','Parser.py',263),
  ('arithmetic_additive_operator -> MINUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','Parser.py',264),
  ('string_concatenation_operator -> CONCAT','string_concatenation_operator',1,'p_string_concatenation_operator','Parser.py',268),
  ('relational_operator -> AND','relational_operator',1,'p_relational_operator','Parser.py',272),
  ('relational_operator -> OR','relational_operator',1,'p_relational_operator','Parser.py',273),
  ('relational_operator -> EQUAL','relational_operator',1,'p_relational_operator','Parser.py',274),
  ('relational_operator -> NOTEQ','relational_operator',1,'p_relational_operator','Parser.py',275),
  ('relational_operator -> GREATER','relational_operator',1,'p_relational_operator','Parser.py',276),
  ('relational_operator -> GTEQUAL','relational_operator',1,'p_relational_operator','Parser.py',277),
  ('relational_operator -> LESS','relational_operator',1,'p_relational_operator','Parser.py',278),
  ('relational_operator -> LTEQUAL','relational_operator',1,'p_relational_operator','Parser.py',279),
  ('membership_operator -> IN','membership_operator',1,'p_membership_operator','Parser.py',283),
  ('primitive_value -> literal','primitive_value',1,'p_primitive_value','Parser.py',294),
  ('literal -> integer_literal','literal',1,'p_literal','Parser.py',298),
  ('literal -> boolean_literal','literal',1,'p_literal','Parser.py',299),
  ('literal -> character_literal','literal',1,'p_literal','Parser.py',300),
  ('literal -> empty_literal','literal',1,'p_literal','Parser.py',301),
  ('literal -> character_string_literal','literal',1,'p_literal','Parser.py',302),
  ('integer_literal -> ICONST','integer_literal',1,'p_integer_literal','Parser.py',305),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','Parser.py',309),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','Parser.py',310),
  ('character_literal -> CCONST','character_literal',1,'p_character_literal','Parser.py',314),
  ('empty_literal -> NULL','empty_literal',1,'p_empty_literal','Parser.py',319),
  ('character_string_literal -> SCONST','character_string_literal',1,'p_character_string_literal','Parser.py',323),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',328),
]
