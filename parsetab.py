
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ICONST CCONST SCONST COMMA PLUS MINUS TIMES DIVIDE COLON LPAREN RPAREN ASSIGN SEMI ARROW LTEQUAL LESS GREATER GTEQUAL EQUAL LBRACKET RBRACKET ID MODULO AND OR NOTEQ NOT CONCAT DCL BOOL IN CHAR END NULL OD REF SYN LOWER UPPER TYPE DOWN CHARS RESULT TRUE FOR INT DO ELSIF IF RETURN LENGTH FALSE EXIT PRINT ELSE NUM ABS THEN PROC BY RETURNS READ TO WHILE ASC LOC ARRAY FIprogram : statement_liststatement_list : statement statement_nullablestatement_nullable : statement statement_nullable\n                              | emptystatement : declaration_statement\n                     | synonym_statement\n                     | newmode_statement\n                     | action_statement\n                     | procedure_statementsynonym_statement : SYN synonym_list SEMIsynonym_list : synonym_definition\n                        | synonym_definition COMMA synonym_listsynonym_definition : identifier_list mode ASSIGN expression\n                              | identifier_list ASSIGN expressiondeclaration_statement : DCL declaration_list SEMIdeclaration_list : declaration\n                            | declaration COMMA declaration_listdeclaration : identifier_list mode initialization\n                       | identifier_list modeinitialization : ASSIGN expressionidentifier_list : identifier\n                           | identifier COMMA identifier_listidentifier : IDnewmode_statement : TYPE newmode_list SEMInewmode_list : mode_definition\n                        | mode_definition COMMA newmode_listmode_definition : identifier_list ASSIGN modeprocedure_statement : ID COLON procedure_definitionprocedure_definition : PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI\n                                | PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMIformal_parameter_list : formal_parameter\n                                 | formal_parameter COMMA formal_parameter_listformal_parameter : identifier_list mode LOC\n                            | identifier_list moderesult_spec : RETURNS LPAREN mode LOC RPAREN\n                       | RETURNS LPAREN mode RPARENmode : mode_name\n                | discrete_mode\n                | reference_mode\n                | composite_modemode_name : identifierdiscrete_mode : integer_mode\n                         | boolean_mode\n                         | character_mode\n                         | discrete_range_modediscrete_mode_name : identifierinteger_mode : INTboolean_mode : BOOLcharacter_mode : CHARdiscrete_range_mode : discrete_mode_name LPAREN literal_range RPAREN\n                               | discrete_mode LPAREN literal_range RPARENliteral_range : lower_bound COLON upper_boundlower_bound : expressionupper_bound : expressionreference_mode : REF modecomposite_mode : string_mode\n                          | array_modestring_mode : CHARS LBRACKET string_length RBRACKETstring_length : integer_literalarray_mode : ARRAY LBRACKET index_mode_list RBRACKET element_modeindex_mode_list : index_mode\n                           | index_mode COMMA index_mode_listindex_mode : discrete_mode\n                      | literal_rangeelement_mode : modelocation : identifier\n\t\t\t\t    | dereferenced_reference\n\t\t\t\t    | string_element\n\t\t\t\t    | string_slice\n\t\t\t\t    | array_element\n\t\t\t\t    | array_slice\n\t\t\t\t    | call_actiondereferenced_reference : array_location ARROWstring_element : identifier LBRACKET start_element RBRACKETstart_element : expressionstring_slice : identifier LBRACKET left_element COLON right_element RBRACKETleft_element : expressionright_element : expressionarray_element : array_location LBRACKET expression_list RBRACKETexpression_list : expression\n    \t\t\t\t\t   | expression COMMA expression_listarray_slice : array_location LBRACKET lower_bound COLON upper_bound RBRACKETarray_location : locationexpression : operand0\n                      | conditional_expressionparenthesized_expression : LPAREN expression RPARENconditional_expression : IF expression then_expression else_expression FI\n                                  | IF expression then_expression elsif_expression else_expression FIthen_expression : THEN expressionelse_expression : ELSE expressionelsif_expression : ELSIF expression then_expression\n                            | elsif_expression ELSIF expression then_expressionoperand0 : operand1\n                    | operand0 operator1 operand1operand1 : operand2\n                    | operand1 operator2 operand2operand2 : operand3\n                    | operand2 arithmetic_multiplicative_operator operand3operand3 : monadic_operator operand4\n                    | operand4operand4 : array_location\n                    | referenced_location\n                    | primitive_valuearithmetic_multiplicative_operator : TIMES\n                                              | DIVIDE\n                                              | MODULOmonadic_operator : MINUS\n                            | NOTreferenced_location : ARROW array_locationoperator1 : relational_operator\n                     | membership_operatoroperator2 : arithmetic_additive_operator\n                     | string_concatenation_operatorarithmetic_additive_operator : PLUS\n                                        | MINUSstring_concatenation_operator : CONCATrelational_operator : AND\n                               | OR\n                               | EQUAL\n                               | NOTEQ\n                               | GREATER\n                               | GTEQUAL\n                               | LESS\n                               | LTEQUALmembership_operator : INprimitive_value : literal\n                           | value_array_element\n                           | value_array_slice\n                           | parenthesized_expressionliteral : integer_literal\n                   | boolean_literal\n                   | character_literal\n                   | empty_literal\n                   | character_string_literalvalue_array_element : primitive_value LBRACKET expression_list RBRACKETvalue_array_slice : primitive_value LBRACKET expression COLON expression RBRACKETinteger_literal : ICONSTboolean_literal : TRUE\n                           | FALSEcharacter_literal : CCONSTempty_literal : NULLcharacter_string_literal : SCONSTaction_statement : identifier COLON action SEMI\n                            | action SEMIaction : bracketed_action\n                  | assignment_action\n                  | call_action\n                  | exit_action\n                  | result_action\n                  | return_actionbracketed_action : if_action\n                            | do_actionassignment_action : array_location assigning_operator expressionassigning_operator : closed_dyadic_operator ASSIGN\n                              | ASSIGNclosed_dyadic_operator : arithmetic_additive_operator\n                                  | arithmetic_multiplicative_operator\n                                  | string_concatenation_operatorif_action : IF expression then_clause else_clause FI\n                     | IF expression then_clause FIthen_clause : THEN action_statement_listelse_clause : ELSE action_statement_list\n                       | ELSIF expression then_clause else_clause\n                       | ELSIF expression then_clauseaction_statement_list : action_statement action_statement_nullableaction_statement_nullable : action_statement action_statement_nullable\n                                     | emptycall_action : procedure_call\n                       | builtin_callbuiltin_call : builtin_name LPAREN parameter_list RPAREN\n                        | builtin_name LPAREN RPARENbuiltin_name : ABS\n                        | ASC\n                        | NUM\n                        | UPPER\n                        | LOWER\n                        | LENGTH\n                        | READ\n                        | PRINTprocedure_call : ID LPAREN parameter_list RPAREN\n                          | ID LPAREN RPARENparameter_list : expression\n                          | expression COMMA parameter_listexit_action : EXIT label_idlabel_id : IDreturn_action : RETURN resultresult : expression\n                  | emptyresult_action : RESULT expressiondo_action : DO control_part SEMI action_statement_nullable OD\n                     | DO action_statement_nullable ODcontrol_part : for_control while_control \n                        | for_control   \n                        | while_controlfor_control : FOR iterationiteration : step_enumeration\n                     | range_enumerationstep_enumeration : identifier ASSIGN expression step_value DOWN end_value \n                            | identifier ASSIGN expression step_value end_value \n                            | identifier ASSIGN expression DOWN end_value \n                            | identifier ASSIGN expression end_valuestep_value : BY expressionend_value : TO expressionrange_enumeration : identifier DOWN IN discrete_mode\n                             | identifier IN discrete_modewhile_control : WHILE expressionempty :'
    
_lr_action_items = {'SYN':([0,3,6,24,32,34,39,51,54,150,197,202,205,223,327,335,341,344,],[2,2,-6,-5,-7,-9,-8,2,-144,-10,-28,-24,-15,-143,2,2,-30,-29,]),'COLON':([10,11,17,18,21,25,29,36,37,45,60,71,81,82,83,84,85,87,88,90,92,93,94,95,96,97,99,100,101,102,103,104,105,106,109,111,112,113,152,153,168,169,172,195,196,200,218,225,226,228,229,236,237,239,243,250,254,255,277,294,301,305,322,324,],[-168,-70,-67,-71,78,-169,114,-68,-83,-69,-73,-23,-72,-127,-100,-95,-93,-101,-129,-128,-142,-126,-130,-84,-102,-103,-66,-140,-138,-137,-97,-141,-132,-85,-139,-134,-133,-131,-53,217,-77,224,-171,-99,-109,-181,-79,-74,-170,-98,-96,-86,-94,278,-180,289,-66,-53,-135,-82,-76,-87,-136,-88,]),'RETURNS':([309,],[326,]),'DOWN':([10,11,17,18,25,36,37,45,49,60,71,81,82,83,84,85,87,88,90,92,93,94,95,96,97,99,100,101,102,103,104,105,106,109,111,112,113,161,172,195,196,200,218,225,226,228,229,236,237,243,266,277,294,299,301,305,317,322,324,],[-168,-70,-67,-71,-169,-68,-83,-69,-23,-73,-23,-72,-127,-100,-95,-93,-101,-129,-128,-142,-126,-130,-84,-102,-103,-66,-140,-138,-137,-97,-141,-132,-85,-139,-134,-133,-131,221,-171,-99,-109,-181,-79,-74,-170,-98,-96,-86,-94,-180,296,-135,-82,320,-76,-87,-202,-136,-88,]),'NUM':([0,3,6,15,24,28,32,34,39,41,43,51,54,56,57,58,61,62,64,65,66,68,70,77,78,79,80,89,91,98,107,108,110,115,144,150,155,159,174,175,176,177,178,181,182,183,184,185,186,187,188,189,190,191,192,193,197,202,205,207,210,212,213,216,217,220,223,224,227,231,234,235,241,248,278,279,281,289,290,297,298,308,327,335,341,344,],[5,5,-6,5,-5,5,-7,-9,-8,5,5,5,-144,-106,-115,-104,-114,-105,-155,-116,5,5,5,5,5,5,5,5,-108,5,5,-107,5,5,5,-10,-154,5,5,-113,-112,5,5,-124,-117,-119,-123,-121,-111,-122,5,-118,-125,-110,-120,5,-28,-24,-15,5,5,5,5,5,5,5,-143,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,-30,-29,]),'PLUS':([1,9,10,11,17,18,21,25,29,36,37,45,60,71,81,82,83,84,85,87,88,90,92,93,94,96,97,99,100,101,102,103,104,105,109,111,112,113,167,172,195,196,200,218,225,226,228,229,236,237,243,254,277,294,301,322,],[-72,61,-168,-70,-67,-71,-66,-169,-23,-68,-83,-69,-73,-23,-72,-127,-100,-95,61,-101,-129,-128,-142,-126,-130,-102,-103,-66,-140,-138,-137,-97,-141,-132,-139,-134,-133,-131,-23,-171,-99,-109,-181,-79,-74,-170,-98,-96,-86,61,-180,-66,-135,-82,-76,-136,]),'OD':([15,54,69,72,77,159,165,219,223,],[-207,-144,-167,158,-207,-207,-166,265,-143,]),'RPAREN':([10,11,17,18,25,36,37,45,49,60,71,80,81,82,83,84,85,87,88,90,92,93,94,95,96,97,99,100,101,102,103,104,105,106,109,111,112,113,115,128,129,130,131,132,133,134,135,136,139,140,142,143,145,171,172,173,180,195,196,199,200,208,218,225,226,228,229,236,237,243,258,260,264,272,277,284,285,291,292,293,294,301,305,311,312,313,314,322,324,329,330,336,339,],[-168,-70,-67,-71,-169,-68,-83,-69,-23,-73,-23,172,-72,-127,-100,-95,-93,-101,-129,-128,-142,-126,-130,-84,-102,-103,-66,-140,-138,-137,-97,-141,-132,-85,-139,-134,-133,-131,200,-56,-42,-45,-41,-43,-57,-39,-48,-37,-40,-49,-47,-38,-44,226,-171,-182,236,-99,-109,243,-181,-55,-79,-74,-170,-98,-96,-86,-94,-180,292,293,-54,-183,-135,309,-31,-58,-51,-50,-82,-76,-87,-34,-60,-65,-52,-136,-88,-32,-33,340,343,]),'NULL':([28,41,43,56,57,58,61,62,64,65,66,68,70,79,80,89,91,98,107,108,115,144,155,174,175,176,177,181,182,183,184,185,186,187,188,189,190,191,192,193,207,210,212,213,216,217,220,224,227,234,241,248,278,279,281,289,290,297,298,308,],[104,104,104,-106,-115,-104,-114,-105,-155,-116,104,104,104,104,104,104,-108,104,104,-107,104,104,-154,104,-113,-112,104,-124,-117,-119,-123,-121,-111,-122,104,-118,-125,-110,-120,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,]),'EXIT':([0,3,6,15,24,32,34,39,51,54,77,78,150,159,178,197,202,205,223,231,235,327,335,341,344,],[42,42,-6,42,-5,-7,-9,-8,42,-144,42,42,-10,42,42,-28,-24,-15,-143,42,42,42,42,-30,-29,]),'TO':([10,11,17,18,25,36,37,45,60,71,81,82,83,84,85,87,88,90,92,93,94,95,96,97,99,100,101,102,103,104,105,106,109,111,112,113,172,195,196,200,218,225,226,228,229,236,237,243,266,277,294,296,299,301,305,317,320,322,324,],[-168,-70,-67,-71,-169,-68,-83,-69,-73,-23,-72,-127,-100,-95,-93,-101,-129,-128,-142,-126,-130,-84,-102,-103,-66,-140,-138,-137,-97,-141,-132,-85,-139,-134,-133,-131,-171,-99,-109,-181,-79,-74,-170,-98,-96,-86,-94,-180,298,-135,-82,298,298,-76,-87,-202,298,-136,-88,]),'LOC':([49,128,129,130,131,132,133,134,135,136,139,140,142,143,145,208,291,292,293,311,312,313,336,],[-23,-56,-42,-45,-41,-43,-57,-39,-48,-37,-40,-49,-47,-38,-44,-55,-58,-51,-50,330,-60,-65,339,]),'OR':([10,11,17,18,25,36,37,45,60,71,81,82,83,84,85,87,88,90,92,93,94,95,96,97,99,100,101,102,103,104,105,109,111,112,113,172,195,196,200,218,225,226,228,229,236,237,243,254,277,294,301,322,],[-168,-70,-67,-71,-169,-68,-83,-69,-73,-23,-72,-127,-100,-95,-93,-101,-129,-128,-142,-126,-130,189,-102,-103,-66,-140,-138,-137,-97,-141,-132,-139,-134,-133,-131,-171,-99,-109,-181,-79,-74,-170,-98,-96,-86,-94,-180,-66,-135,-82,-76,-136,]),'LPAREN':([5,12,13,16,19,20,23,26,27,28,29,41,43,49,56,57,58,61,62,64,65,66,68,70,71,79,80,89,91,98,107,108,115,129,130,131,132,135,140,142,143,144,145,147,155,167,174,175,176,177,181,182,183,184,185,186,187,188,189,190,191,192,193,198,207,210,212,213,216,217,220,224,227,234,241,248,253,254,268,269,278,279,281,289,290,292,293,297,298,300,308,326,],[-174,-173,-178,-176,-179,-175,80,-172,-177,89,115,89,89,-23,-106,-115,-104,-114,-105,-155,-116,89,89,89,115,89,89,89,-108,89,89,-107,89,-42,-45,-46,-43,-48,-49,-47,210,89,-44,213,-154,115,89,-113,-112,89,-124,-117,-119,-123,-121,-111,-122,89,-118,-125,-110,-120,89,242,89,89,89,89,89,89,89,89,89,89,89,89,210,-46,-46,210,89,89,89,89,89,-51,-50,89,89,210,89,333,]),'NOT':([28,41,43,56,57,58,61,62,64,65,66,68,70,79,80,89,98,115,144,155,174,175,176,177,181,182,183,184,185,186,187,188,189,190,191,192,193,207,210,212,213,216,217,220,224,227,234,241,248,278,279,281,289,290,297,298,308,],[91,91,91,-106,-115,-104,-114,-105,-155,-116,91,91,91,91,91,91,91,91,91,-154,91,-113,-112,91,-124,-117,-119,-123,-121,-111,-122,91,-118,-125,-110,-120,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,]),'CCONST':([28,41,43,56,57,58,61,62,64,65,66,68,70,79,80,89,91,98,107,108,115,144,155,174,175,176,177,181,182,183,184,185,186,187,188,189,190,191,192,193,207,210,212,213,216,217,220,224,227,234,241,248,278,279,281,289,290,297,298,308,],[100,100,100,-106,-115,-104,-114,-105,-155,-116,100,100,100,100,100,100,-108,100,100,-107,100,100,-154,100,-113,-112,100,-124,-117,-119,-123,-121,-111,-122,100,-118,-125,-110,-120,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,]),'NOTEQ':([10,11,17,18,25,36,37,45,60,71,81,82,83,84,85,87,88,90,92,93,94,95,96,97,99,100,101,102,103,104,105,109,111,112,113,172,195,196,200,218,225,226,228,229,236,237,243,254,277,294,301,322,],[-168,-70,-67,-71,-169,-68,-83,-69,-73,-23,-72,-127,-100,-95,-93,-101,-129,-128,-142,-126,-130,192,-102,-103,-66,-140,-138,-137,-97,-141,-132,-139,-134,-133,-131,-171,-99,-109,-181,-79,-74,-170,-98,-96,-86,-94,-180,-66,-135,-82,-76,-136,]),'ICONST':([28,41,43,56,57,58,61,62,64,65,66,68,70,79,80,89,91,98,107,108,115,144,155,174,175,176,177,181,182,183,184,185,186,187,188,189,190,191,192,193,207,209,210,212,213,216,217,220,224,227,234,241,248,278,279,281,289,290,297,298,308,],[102,102,102,-106,-115,-104,-114,-105,-155,-116,102,102,102,102,102,102,-108,102,102,-107,102,102,-154,102,-113,-112,102,-124,-117,-119,-123,-121,-111,-122,102,-118,-125,-110,-120,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,]),'LTEQUAL':([10,11,17,18,25,36,37,45,60,71,81,82,83,84,85,87,88,90,92,93,94,95,96,97,99,100,101,102,103,104,105,109,111,112,113,172,195,196,200,218,225,226,228,229,236,237,243,254,277,294,301,322,],[-168,-70,-67,-71,-169,-68,-83,-69,-73,-23,-72,-127,-100,-95,-93,-101,-129,-128,-142,-126,-130,181,-102,-103,-66,-140,-138,-137,-97,-141,-132,-139,-134,-133,-131,-171,-99,-109,-181,-79,-74,-170,-98,-96,-86,-94,-180,-66,-135,-82,-76,-136,]),'ASC':([0,3,6,15,24,28,32,34,39,41,43,51,54,56,57,58,61,62,64,65,66,68,70,77,78,79,80,89,91,98,107,108,110,115,144,150,155,159,174,175,176,177,178,181,182,183,184,185,186,187,188,189,190,191,192,193,197,202,205,207,210,212,213,216,217,220,223,224,227,231,234,235,241,248,278,279,281,289,290,297,298,308,327,335,341,344,],[12,12,-6,12,-5,12,-7,-9,-8,12,12,12,-144,-106,-115,-104,-114,-105,-155,-116,12,12,12,12,12,12,12,12,-108,12,12,-107,12,12,12,-10,-154,12,12,-113,-112,12,12,-124,-117,-119,-123,-121,-111,-122,12,-118,-125,-110,-120,12,-28,-24,-15,12,12,12,12,12,12,12,-143,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,-30,-29,]),'READ':([0,3,6,15,24,28,32,34,39,41,43,51,54,56,57,58,61,62,64,65,66,68,70,77,78,79,80,89,91,98,107,108,110,115,144,150,155,159,174,175,176,177,178,181,182,183,184,185,186,187,188,189,190,191,192,193,197,202,205,207,210,212,213,216,217,220,223,224,227,231,234,235,241,248,278,279,281,289,290,297,298,308,327,335,341,344,],[13,13,-6,13,-5,13,-7,-9,-8,13,13,13,-144,-106,-115,-104,-114,-105,-155,-116,13,13,13,13,13,13,13,13,-108,13,13,-107,13,13,13,-10,-154,13,13,-113,-112,13,13,-124,-117,-119,-123,-121,-111,-122,13,-118,-125,-110,-120,13,-28,-24,-15,13,13,13,13,13,13,13,-143,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,-30,-29,]),'DO':([0,3,6,15,24,32,34,39,51,54,77,78,150,159,178,197,202,205,223,231,235,327,335,341,344,],[15,15,-6,15,-5,-7,-9,-8,15,-144,15,15,-10,15,15,-28,-24,-15,-143,15,15,15,15,-30,-29,]),'CHAR':([46,47,49,121,138,203,207,214,222,267,286,288,290,333,],[140,-21,-23,140,140,140,140,-22,140,140,140,140,140,140,]),'GREATER':([10,11,17,18,25,36,37,45,60,71,81,82,83,84,85,87,88,90,92,93,94,95,96,97,99,100,101,102,103,104,105,109,111,112,113,172,195,196,200,218,225,226,228,229,236,237,243,254,277,294,301,322,],[-168,-70,-67,-71,-169,-68,-83,-69,-73,-23,-72,-127,-100,-95,-93,-101,-129,-128,-142,-126,-130,185,-102,-103,-66,-140,-138,-137,-97,-141,-132,-139,-134,-133,-131,-171,-99,-109,-181,-79,-74,-170,-98,-96,-86,-94,-180,-66,-135,-82,-76,-136,]),'PRINT':([0,3,6,15,24,28,32,34,39,41,43,51,54,56,57,58,61,62,64,65,66,68,70,77,78,79,80,89,91,98,107,108,110,115,144,150,155,159,174,175,176,177,178,181,182,183,184,185,186,187,188,189,190,191,192,193,197,202,205,207,210,212,213,216,217,220,223,224,227,231,234,235,241,248,278,279,281,289,290,297,298,308,327,335,341,344,],[19,19,-6,19,-5,19,-7,-9,-8,19,19,19,-144,-106,-115,-104,-114,-105,-155,-116,19,19,19,19,19,19,19,19,-108,19,19,-107,19,19,19,-10,-154,19,19,-113,-112,19,19,-124,-117,-119,-123,-121,-111,-122,19,-118,-125,-110,-120,19,-28,-24,-15,19,19,19,19,19,19,19,-143,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-30,-29,]),'UPPER':([0,3,6,15,24,28,32,34,39,41,43,51,54,56,57,58,61,62,64,65,66,68,70,77,78,79,80,89,91,98,107,108,110,115,144,150,155,159,174,175,176,177,178,181,182,183,184,185,186,187,188,189,190,191,192,193,197,202,205,207,210,212,213,216,217,220,223,224,227,231,234,235,241,248,278,279,281,289,290,297,298,308,327,335,341,344,],[20,20,-6,20,-5,20,-7,-9,-8,20,20,20,-144,-106,-115,-104,-114,-105,-155,-116,20,20,20,20,20,20,20,20,-108,20,20,-107,20,20,20,-10,-154,20,20,-113,-112,20,20,-124,-117,-119,-123,-121,-111,-122,20,-118,-125,-110,-120,20,-28,-24,-15,20,20,20,20,20,20,20,-143,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-30,-29,]),'CHARS':([46,47,49,121,138,203,214,286,288,333,],[141,-21,-23,141,141,141,-22,141,141,141,]),'REF':([46,47,49,121,138,203,214,286,288,333,],[138,-21,-23,138,138,138,-22,138,138,138,]),'TIMES':([1,9,10,11,17,18,21,25,29,36,37,45,60,71,81,82,83,84,87,88,90,92,93,94,96,97,99,100,101,102,103,104,105,109,111,112,113,167,172,195,196,200,218,225,226,228,229,236,243,254,277,294,301,322,],[-72,58,-168,-70,-67,-71,-66,-169,-23,-68,-83,-69,-73,-23,-72,-127,-100,58,-101,-129,-128,-142,-126,-130,-102,-103,-66,-140,-138,-137,-97,-141,-132,-139,-134,-133,-131,-23,-171,-99,-109,-181,-79,-74,-170,-98,58,-86,-180,-66,-135,-82,-76,-136,]),'BY':([10,11,17,18,25,36,37,45,60,71,81,82,83,84,85,87,88,90,92,93,94,95,96,97,99,100,101,102,103,104,105,106,109,111,112,113,172,195,196,200,218,225,226,228,229,236,237,243,266,277,294,301,305,322,324,],[-168,-70,-67,-71,-169,-68,-83,-69,-73,-23,-72,-127,-100,-95,-93,-101,-129,-128,-142,-126,-130,-84,-102,-103,-66,-140,-138,-137,-97,-141,-132,-85,-139,-134,-133,-131,-171,-99,-109,-181,-79,-74,-170,-98,-96,-86,-94,-180,297,-135,-82,-76,-87,-136,-88,]),'RBRACKET':([10,11,17,18,25,36,37,45,60,71,81,82,83,84,85,87,88,90,92,93,94,95,96,97,99,100,101,102,103,104,105,106,109,111,112,113,129,130,132,135,140,142,145,152,154,168,170,172,195,196,200,218,225,226,228,229,236,237,238,239,243,249,251,252,253,256,257,261,262,263,264,270,271,277,292,293,294,301,303,305,314,315,322,324,],[-168,-70,-67,-71,-169,-68,-83,-69,-73,-23,-72,-127,-100,-95,-93,-101,-129,-128,-142,-126,-130,-84,-102,-103,-66,-140,-138,-137,-97,-141,-132,-85,-139,-134,-133,-131,-42,-45,-43,-48,-49,-47,-44,-80,218,-75,225,-171,-99,-109,-181,-79,-74,-170,-98,-96,-86,-94,277,-80,-180,288,-64,-61,-63,291,-59,-80,-81,294,-54,-78,301,-135,-51,-50,-82,-76,322,-87,-52,-62,-136,-88,]),'WHILE':([10,11,15,17,18,25,36,37,45,60,71,76,81,82,83,84,85,87,88,90,92,93,94,95,96,97,99,100,101,102,103,104,105,106,109,111,112,113,129,130,132,135,140,142,145,160,162,163,172,195,196,200,218,225,226,228,229,236,237,243,269,277,292,293,294,295,300,301,305,316,318,319,322,324,331,],[-168,-70,70,-67,-71,-169,-68,-83,-69,-73,-23,70,-72,-127,-100,-95,-93,-101,-129,-128,-142,-126,-130,-84,-102,-103,-66,-140,-138,-137,-97,-141,-132,-85,-139,-134,-133,-131,-42,-45,-43,-48,-49,-47,-44,-196,-195,-197,-171,-99,-109,-181,-79,-74,-170,-98,-96,-86,-94,-180,-205,-135,-51,-50,-82,-201,-204,-76,-87,-200,-203,-199,-136,-88,-198,]),'CONCAT':([1,9,10,11,17,18,21,25,29,36,37,45,60,71,81,82,83,84,85,87,88,90,92,93,94,96,97,99,100,101,102,103,104,105,109,111,112,113,167,172,195,196,200,218,225,226,228,229,236,237,243,254,277,294,301,322,],[-72,65,-168,-70,-67,-71,-66,-169,-23,-68,-83,-69,-73,-23,-72,-127,-100,-95,65,-101,-129,-128,-142,-126,-130,-102,-103,-66,-140,-138,-137,-97,-141,-132,-139,-134,-133,-131,-23,-171,-99,-109,-181,-79,-74,-170,-98,-96,-86,65,-180,-66,-135,-82,-76,-136,]),'COMMA':([10,11,17,18,25,36,37,45,47,48,49,60,71,81,82,83,84,85,87,88,90,92,93,94,95,96,97,99,100,101,102,103,104,105,106,109,111,112,113,116,119,128,129,130,131,132,133,134,135,136,139,140,142,143,145,152,172,173,195,196,200,206,208,211,218,225,226,228,229,236,237,239,243,245,247,251,252,253,259,261,264,277,285,287,291,292,293,294,301,305,311,312,313,314,322,324,330,],[-168,-70,-67,-71,-169,-68,-83,-69,148,149,-23,-73,-23,-72,-127,-100,-95,-93,-101,-129,-128,-142,-126,-130,-84,-102,-103,-66,-140,-138,-137,-97,-141,-132,-85,-139,-134,-133,-131,201,204,-56,-42,-45,-41,-43,-57,-39,-48,-37,-40,-49,-47,-38,-44,216,-171,227,-99,-109,-181,-19,-55,-14,-79,-74,-170,-98,-96,-86,-94,216,-180,-27,-18,-64,290,-63,-13,216,-54,-135,310,-20,-58,-51,-50,-82,-76,-87,-34,-60,-65,-52,-136,-88,-33,]),'DCL':([0,3,6,24,32,34,39,51,54,150,197,202,205,223,327,335,341,344,],[38,38,-6,-5,-7,-9,-8,38,-144,-10,-28,-24,-15,-143,38,38,-30,-29,]),'INT':([46,47,49,121,138,203,207,214,222,267,286,288,290,333,],[142,-21,-23,142,142,142,142,-22,142,142,142,142,142,142,]),'ABS':([0,3,6,15,24,28,32,34,39,41,43,51,54,56,57,58,61,62,64,65,66,68,70,77,78,79,80,89,91,98,107,108,110,115,144,150,155,159,174,175,176,177,178,181,182,183,184,185,186,187,188,189,190,191,192,193,197,202,205,207,210,212,213,216,217,220,223,224,227,231,234,235,241,248,278,279,281,289,290,297,298,308,327,335,341,344,],[26,26,-6,26,-5,26,-7,-9,-8,26,26,26,-144,-106,-115,-104,-114,-105,-155,-116,26,26,26,26,26,26,26,26,-108,26,26,-107,26,26,26,-10,-154,26,26,-113,-112,26,26,-124,-117,-119,-123,-121,-111,-122,26,-118,-125,-110,-120,26,-28,-24,-15,26,26,26,26,26,26,26,-143,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-30,-29,]),'IN':([10,11,17,18,25,36,37,45,49,60,71,81,82,83,84,85,87,88,90,92,93,94,95,96,97,99,100,101,102,103,104,105,109,111,112,113,161,172,195,196,200,218,221,225,226,228,229,236,237,243,254,277,294,301,322,],[-168,-70,-67,-71,-169,-68,-83,-69,-23,-73,-23,-72,-127,-100,-95,-93,-101,-129,-128,-142,-126,-130,190,-102,-103,-66,-140,-138,-137,-97,-141,-132,-139,-134,-133,-131,222,-171,-99,-109,-181,-79,267,-74,-170,-98,-96,-86,-94,-180,-66,-135,-82,-76,-136,]),'LENGTH':([0,3,6,15,24,28,32,34,39,41,43,51,54,56,57,58,61,62,64,65,66,68,70,77,78,79,80,89,91,98,107,108,110,115,144,150,155,159,174,175,176,177,178,181,182,183,184,185,186,187,188,189,190,191,192,193,197,202,205,207,210,212,213,216,217,220,223,224,227,231,234,235,241,248,278,279,281,289,290,297,298,308,327,335,341,344,],[27,27,-6,27,-5,27,-7,-9,-8,27,27,27,-144,-106,-115,-104,-114,-105,-155,-116,27,27,27,27,27,27,27,27,-108,27,27,-107,27,27,27,-10,-154,27,27,-113,-112,27,27,-124,-117,-119,-123,-121,-111,-122,27,-118,-125,-110,-120,27,-28,-24,-15,27,27,27,27,27,27,27,-143,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-30,-29,]),'IF':([0,3,6,15,24,28,32,34,39,41,43,51,54,64,66,68,70,77,78,79,80,89,98,115,144,150,155,159,178,193,197,202,205,207,210,212,213,216,217,220,223,224,227,231,234,235,241,248,278,279,281,289,290,297,298,308,327,335,341,344,],[28,28,-6,28,-5,98,-7,-9,-8,98,98,28,-144,-155,98,98,98,28,28,98,98,98,98,98,98,-10,-154,28,28,98,-28,-24,-15,98,98,98,98,98,98,98,-143,98,98,28,98,28,98,98,98,98,98,98,98,98,98,98,28,28,-30,-29,]),'EQUAL':([10,11,17,18,25,36,37,45,60,71,81,82,83,84,85,87,88,90,92,93,94,95,96,97,99,100,101,102,103,104,105,109,111,112,113,172,195,196,200,218,225,226,228,229,236,237,243,254,277,294,301,322,],[-168,-70,-67,-71,-169,-68,-83,-69,-73,-23,-72,-127,-100,-95,-93,-101,-129,-128,-142,-126,-130,183,-102,-103,-66,-140,-138,-137,-97,-141,-132,-139,-134,-133,-131,-171,-99,-109,-181,-79,-74,-170,-98,-96,-86,-94,-180,-66,-135,-82,-76,-136,]),'ID':([0,2,3,6,15,24,28,32,33,34,38,39,41,42,43,46,47,49,51,54,56,57,58,61,62,64,65,66,68,70,75,77,78,79,80,89,91,98,107,108,110,115,121,138,144,148,149,150,155,159,174,175,176,177,178,181,182,183,184,185,186,187,188,189,190,191,192,193,197,201,202,203,204,205,207,210,212,213,214,216,217,220,222,223,224,227,231,234,235,241,242,248,267,278,279,281,286,288,289,290,297,298,308,310,327,333,335,341,344,],[29,49,29,-6,71,-5,71,-7,49,-9,49,-8,71,126,71,49,-21,-23,29,-144,-106,-115,-104,-114,-105,-155,-116,71,71,71,49,71,167,71,71,71,-108,71,71,-107,71,71,49,49,71,49,49,-10,-154,71,71,-113,-112,71,71,-124,-117,-119,-123,-121,-111,-122,71,-118,-125,-110,-120,71,-28,49,-24,49,49,-15,71,71,71,71,-22,71,71,71,49,-143,71,71,71,71,71,71,49,71,49,71,71,71,49,49,71,71,71,71,71,49,29,49,29,-30,-29,]),'TRUE':([28,41,43,56,57,58,61,62,64,65,66,68,70,79,80,89,91,98,107,108,115,144,155,174,175,176,177,181,182,183,184,185,186,187,188,189,190,191,192,193,207,210,212,213,216,217,220,224,227,234,241,248,278,279,281,289,290,297,298,308,],[101,101,101,-106,-115,-104,-114,-105,-155,-116,101,101,101,101,101,101,-108,101,101,-107,101,101,-154,101,-113,-112,101,-124,-117,-119,-123,-121,-111,-122,101,-118,-125,-110,-120,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,]),'SCONST':([28,41,43,56,57,58,61,62,64,65,66,68,70,79,80,89,91,98,107,108,115,144,155,174,175,176,177,181,182,183,184,185,186,187,188,189,190,191,192,193,207,210,212,213,216,217,220,224,227,234,241,248,278,279,281,289,290,297,298,308,],[92,92,92,-106,-115,-104,-114,-105,-155,-116,92,92,92,92,92,92,-108,92,92,-107,92,92,-154,92,-113,-112,92,-124,-117,-119,-123,-121,-111,-122,92,-118,-125,-110,-120,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,]),'SEMI':([1,4,7,10,11,14,17,18,22,25,30,35,36,37,40,41,44,45,48,49,50,60,71,73,74,76,81,82,83,84,85,87,88,90,92,93,94,95,96,97,99,100,101,102,103,104,105,106,109,111,112,113,116,117,119,120,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,139,140,142,143,145,156,157,158,160,162,163,164,166,172,195,196,200,206,208,211,215,218,225,226,228,229,232,236,237,243,244,245,246,247,259,265,269,274,277,287,291,292,293,294,295,300,301,305,309,312,313,316,318,319,322,324,328,331,337,340,342,343,],[-147,54,-152,-168,-70,-148,-67,-71,-150,-169,-149,-146,-68,-83,-145,-207,-151,-69,-11,-23,150,-73,-23,159,-194,-193,-72,-127,-100,-95,-93,-101,-129,-128,-142,-126,-130,-84,-102,-103,-66,-140,-138,-137,-97,-141,-132,-85,-139,-134,-133,-131,-25,202,-16,205,-187,-186,-188,-184,-185,-189,-56,-42,-45,-41,-43,-57,-39,-48,-37,-40,-49,-47,-38,-44,-153,-206,-191,-196,-195,-197,-192,223,-171,-99,-109,-181,-19,-55,-14,-12,-79,-74,-170,-98,-96,-160,-86,-94,-180,-26,-27,-17,-18,-13,-190,-205,-159,-135,-20,-58,-51,-50,-82,-201,-204,-76,-87,327,-60,-65,-200,-203,-199,-136,-88,335,-198,341,-36,344,-35,]),'DIVIDE':([1,9,10,11,17,18,21,25,29,36,37,45,60,71,81,82,83,84,87,88,90,92,93,94,96,97,99,100,101,102,103,104,105,109,111,112,113,167,172,195,196,200,218,225,226,228,229,236,243,254,277,294,301,322,],[-72,62,-168,-70,-67,-71,-66,-169,-23,-68,-83,-69,-73,-23,-72,-127,-100,62,-101,-129,-128,-142,-126,-130,-102,-103,-66,-140,-138,-137,-97,-141,-132,-139,-134,-133,-131,-23,-171,-99,-109,-181,-79,-74,-170,-98,62,-86,-180,-66,-135,-82,-76,-136,]),'BOOL':([46,47,49,121,138,203,207,214,222,267,286,288,290,333,],[135,-21,-23,135,135,135,135,-22,135,135,135,135,135,135,]),'ASSIGN':([1,9,10,11,17,18,21,25,29,36,37,45,46,47,49,55,56,57,58,59,60,61,62,63,65,67,71,99,118,128,129,130,131,132,133,134,135,136,139,140,142,143,145,146,161,167,172,200,206,208,214,218,225,226,243,291,292,293,294,301,312,313,],[-72,64,-168,-70,-67,-71,-66,-169,-23,-68,-83,-69,144,-21,-23,-156,-106,-115,-104,-158,-73,-114,-105,-157,-116,155,-23,-66,203,-56,-42,-45,-41,-43,-57,-39,-48,-37,-40,-49,-47,-38,-44,212,220,-23,-171,-181,248,-55,-22,-79,-74,-170,-180,-58,-51,-50,-82,-76,-60,-65,]),'ARRAY':([46,47,49,121,138,203,214,286,288,333,],[137,-21,-23,137,137,137,-22,137,137,137,]),'FOR':([15,],[75,]),'END':([6,24,32,34,39,51,52,54,150,151,197,202,205,223,327,334,335,338,341,344,],[-6,-5,-7,-9,-8,-207,-4,-144,-10,-3,-28,-24,-15,-143,-207,337,-207,342,-30,-29,]),'FI':([10,11,17,18,25,36,37,45,54,60,69,71,77,81,82,83,84,85,87,88,90,92,93,94,95,96,97,99,100,101,102,103,104,105,106,109,111,112,113,165,172,179,195,196,200,218,223,225,226,228,229,230,231,233,236,237,243,273,276,277,280,294,301,302,304,305,307,321,322,324,],[-168,-70,-67,-71,-169,-68,-83,-69,-144,-73,-167,-23,-207,-72,-127,-100,-95,-93,-101,-129,-128,-142,-126,-130,-84,-102,-103,-66,-140,-138,-137,-97,-141,-132,-85,-139,-134,-133,-131,-166,-171,232,-99,-109,-181,-79,-143,-74,-170,-98,-96,-161,-207,274,-86,-94,-180,-165,-162,-135,305,-82,-76,-164,-90,-87,324,-163,-136,-88,]),'TYPE':([0,3,6,24,32,34,39,51,54,150,197,202,205,223,327,335,341,344,],[33,33,-6,-5,-7,-9,-8,33,-144,-10,-28,-24,-15,-143,33,33,-30,-29,]),'ELSE':([10,11,17,18,25,36,37,45,54,60,69,71,77,81,82,83,84,85,87,88,90,92,93,94,95,96,97,99,100,101,102,103,104,105,106,109,111,112,113,165,172,179,195,196,200,218,223,225,226,228,229,230,231,236,237,240,243,273,277,282,283,294,301,302,305,322,323,324,332,],[-168,-70,-67,-71,-169,-68,-83,-69,-144,-73,-167,-23,-207,-72,-127,-100,-95,-93,-101,-129,-128,-142,-126,-130,-84,-102,-103,-66,-140,-138,-137,-97,-141,-132,-85,-139,-134,-133,-131,-166,-171,235,-99,-109,-181,-79,-143,-74,-170,-98,-96,-161,-207,-86,-94,279,-180,-165,-135,279,-89,-82,-76,235,-87,-136,-91,-88,-92,]),'MINUS':([1,9,10,11,17,18,21,25,28,29,36,37,41,43,45,56,57,58,60,61,62,64,65,66,68,70,71,79,80,81,82,83,84,85,87,88,89,90,92,93,94,96,97,98,99,100,101,102,103,104,105,109,111,112,113,115,144,155,167,172,174,175,176,177,181,182,183,184,185,186,187,188,189,190,191,192,193,195,196,200,207,210,212,213,216,217,218,220,224,225,226,227,228,229,234,236,237,241,243,248,254,277,278,279,281,289,290,294,297,298,301,308,322,],[-72,57,-168,-70,-67,-71,-66,-169,108,-23,-68,-83,108,108,-69,-106,-115,-104,-73,-114,-105,-155,-116,108,108,108,-23,108,108,-72,-127,-100,-95,57,-101,-129,108,-128,-142,-126,-130,-102,-103,108,-66,-140,-138,-137,-97,-141,-132,-139,-134,-133,-131,108,108,-154,-23,-171,108,-113,-112,108,-124,-117,-119,-123,-121,-111,-122,108,-118,-125,-110,-120,108,-99,-109,-181,108,108,108,108,108,108,-79,108,108,-74,-170,108,-98,-96,108,-86,57,108,-180,108,-66,-135,108,108,108,108,108,-82,108,108,-76,108,-136,]),'ELSIF':([10,11,17,18,25,36,37,45,54,60,69,71,77,81,82,83,84,85,87,88,90,92,93,94,95,96,97,99,100,101,102,103,104,105,106,109,111,112,113,165,172,179,195,196,200,218,223,225,226,228,229,230,231,236,237,240,243,273,277,282,283,294,301,302,305,322,323,324,332,],[-168,-70,-67,-71,-169,-68,-83,-69,-144,-73,-167,-23,-207,-72,-127,-100,-95,-93,-101,-129,-128,-142,-126,-130,-84,-102,-103,-66,-140,-138,-137,-97,-141,-132,-85,-139,-134,-133,-131,-166,-171,234,-99,-109,-181,-79,-143,-74,-170,-98,-96,-161,-207,-86,-94,281,-180,-165,-135,308,-89,-82,-76,234,-87,-136,-91,-88,-92,]),'ARROW':([1,9,10,11,17,18,21,25,28,29,36,37,41,43,45,56,57,58,60,61,62,64,65,66,68,70,71,79,80,81,87,89,91,98,99,107,108,115,144,155,167,172,174,175,176,177,181,182,183,184,185,186,187,188,189,190,191,192,193,196,200,207,210,212,213,216,217,218,220,224,225,226,227,234,241,243,248,254,278,279,281,289,290,294,297,298,301,308,],[-72,60,-168,-70,-67,-71,-66,-169,110,-23,-68,-83,110,110,-69,-106,-115,-104,-73,-114,-105,-155,-116,110,110,110,-23,110,110,-72,60,110,-108,110,-66,110,-107,110,110,-154,-23,-171,110,-113,-112,110,-124,-117,-119,-123,-121,-111,-122,110,-118,-125,-110,-120,110,60,-181,110,110,110,110,110,110,-79,110,110,-74,-170,110,110,110,-180,110,-66,110,110,110,110,110,-82,110,110,-76,110,]),'LESS':([10,11,17,18,25,36,37,45,60,71,81,82,83,84,85,87,88,90,92,93,94,95,96,97,99,100,101,102,103,104,105,109,111,112,113,172,195,196,200,218,225,226,228,229,236,237,243,254,277,294,301,322,],[-168,-70,-67,-71,-169,-68,-83,-69,-73,-23,-72,-127,-100,-95,-93,-101,-129,-128,-142,-126,-130,184,-102,-103,-66,-140,-138,-137,-97,-141,-132,-139,-134,-133,-131,-171,-99,-109,-181,-79,-74,-170,-98,-96,-86,-94,-180,-66,-135,-82,-76,-136,]),'AND':([10,11,17,18,25,36,37,45,60,71,81,82,83,84,85,87,88,90,92,93,94,95,96,97,99,100,101,102,103,104,105,109,111,112,113,172,195,196,200,218,225,226,228,229,236,237,243,254,277,294,301,322,],[-168,-70,-67,-71,-169,-68,-83,-69,-73,-23,-72,-127,-100,-95,-93,-101,-129,-128,-142,-126,-130,182,-102,-103,-66,-140,-138,-137,-97,-141,-132,-139,-134,-133,-131,-171,-99,-109,-181,-79,-74,-170,-98,-96,-86,-94,-180,-66,-135,-82,-76,-136,]),'LOWER':([0,3,6,15,24,28,32,34,39,41,43,51,54,56,57,58,61,62,64,65,66,68,70,77,78,79,80,89,91,98,107,108,110,115,144,150,155,159,174,175,176,177,178,181,182,183,184,185,186,187,188,189,190,191,192,193,197,202,205,207,210,212,213,216,217,220,223,224,227,231,234,235,241,248,278,279,281,289,290,297,298,308,327,335,341,344,],[16,16,-6,16,-5,16,-7,-9,-8,16,16,16,-144,-106,-115,-104,-114,-105,-155,-116,16,16,16,16,16,16,16,16,-108,16,16,-107,16,16,16,-10,-154,16,16,-113,-112,16,16,-124,-117,-119,-123,-121,-111,-122,16,-118,-125,-110,-120,16,-28,-24,-15,16,16,16,16,16,16,16,-143,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-30,-29,]),'GTEQUAL':([10,11,17,18,25,36,37,45,60,71,81,82,83,84,85,87,88,90,92,93,94,95,96,97,99,100,101,102,103,104,105,109,111,112,113,172,195,196,200,218,225,226,228,229,236,237,243,254,277,294,301,322,],[-168,-70,-67,-71,-169,-68,-83,-69,-73,-23,-72,-127,-100,-95,-93,-101,-129,-128,-142,-126,-130,187,-102,-103,-66,-140,-138,-137,-97,-141,-132,-139,-134,-133,-131,-171,-99,-109,-181,-79,-74,-170,-98,-96,-86,-94,-180,-66,-135,-82,-76,-136,]),'MODULO':([1,9,10,11,17,18,21,25,29,36,37,45,60,71,81,82,83,84,87,88,90,92,93,94,96,97,99,100,101,102,103,104,105,109,111,112,113,167,172,195,196,200,218,225,226,228,229,236,243,254,277,294,301,322,],[-72,56,-168,-70,-67,-71,-66,-169,-23,-68,-83,-69,-73,-23,-72,-127,-100,56,-101,-129,-128,-142,-126,-130,-102,-103,-66,-140,-138,-137,-97,-141,-132,-139,-134,-133,-131,-23,-171,-99,-109,-181,-79,-74,-170,-98,56,-86,-180,-66,-135,-82,-76,-136,]),'LBRACKET':([1,9,10,11,17,18,21,25,29,36,37,45,60,71,81,82,87,88,90,92,93,94,97,99,100,101,102,104,105,109,111,112,113,137,141,167,172,196,200,218,225,226,236,243,254,277,294,301,322,],[-72,66,-168,-70,-67,-71,79,-169,-23,-68,-83,-69,-73,-23,-72,-127,66,-129,-128,-142,-126,-130,193,79,-140,-138,-137,-141,-132,-139,-134,-133,-131,207,209,-23,-171,66,-181,-79,-74,-170,-86,-180,79,-135,-82,-76,-136,]),'PROC':([114,],[198,]),'RETURN':([0,3,6,15,24,32,34,39,51,54,77,78,150,159,178,197,202,205,223,231,235,327,335,341,344,],[41,41,-6,41,-5,-7,-9,-8,41,-144,41,41,-10,41,41,-28,-24,-15,-143,41,41,41,41,-30,-29,]),'FALSE':([28,41,43,56,57,58,61,62,64,65,66,68,70,79,80,89,91,98,107,108,115,144,155,174,175,176,177,181,182,183,184,185,186,187,188,189,190,191,192,193,207,210,212,213,216,217,220,224,227,234,241,248,278,279,281,289,290,297,298,308,],[109,109,109,-106,-115,-104,-114,-105,-155,-116,109,109,109,109,109,109,-108,109,109,-107,109,109,-154,109,-113,-112,109,-124,-117,-119,-123,-121,-111,-122,109,-118,-125,-110,-120,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,]),'RESULT':([0,3,6,15,24,32,34,39,51,54,77,78,150,159,178,197,202,205,223,231,235,327,335,341,344,],[43,43,-6,43,-5,-7,-9,-8,43,-144,43,43,-10,43,43,-28,-24,-15,-143,43,43,43,43,-30,-29,]),'THEN':([10,11,17,18,25,36,37,45,60,71,81,82,83,84,85,86,87,88,90,92,93,94,95,96,97,99,100,101,102,103,104,105,106,109,111,112,113,172,194,195,196,200,218,225,226,228,229,236,237,243,275,277,294,301,305,306,322,324,325,],[-168,-70,-67,-71,-169,-68,-83,-69,-73,-23,-72,-127,-100,-95,-93,178,-101,-129,-128,-142,-126,-130,-84,-102,-103,-66,-140,-138,-137,-97,-141,-132,-85,-139,-134,-133,-131,-171,241,-99,-109,-181,-79,-74,-170,-98,-96,-86,-94,-180,178,-135,-82,-76,-87,241,-136,-88,241,]),'$end':([3,6,8,24,31,32,34,39,51,52,53,54,150,151,197,202,205,223,341,344,],[-207,-6,-1,-5,0,-7,-9,-8,-207,-4,-2,-144,-10,-3,-28,-24,-15,-143,-30,-29,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'call_action':([0,3,15,28,41,43,51,66,68,70,77,78,79,80,89,98,107,110,115,144,159,174,177,178,188,193,207,210,212,213,216,217,220,224,227,231,234,235,241,248,278,279,281,289,290,297,298,308,327,335,],[1,1,1,81,81,81,1,81,81,81,1,1,81,81,81,81,81,81,81,81,1,81,81,1,81,81,81,81,81,81,81,81,81,81,81,1,81,1,81,81,81,81,81,81,81,81,81,81,1,1,]),'integer_mode':([46,121,138,203,207,222,267,286,288,290,333,],[129,129,129,129,129,129,129,129,129,129,129,]),'newmode_list':([33,201,],[117,244,]),'statement':([0,3,51,327,335,],[3,51,51,51,51,]),'action':([0,3,15,51,77,78,159,178,231,235,327,335,],[4,4,4,4,4,166,4,4,4,4,4,4,]),'arithmetic_additive_operator':([9,85,237,],[55,176,176,]),'synonym_statement':([0,3,51,327,335,],[6,6,6,6,6,]),'operand2':([28,41,43,66,68,70,79,80,89,98,115,144,177,188,193,207,210,212,213,216,217,220,224,227,234,241,248,278,279,281,289,290,297,298,308,],[84,84,84,84,84,84,84,84,84,84,84,84,229,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'conditional_expression':([28,41,43,66,68,70,79,80,89,98,115,144,193,207,210,212,213,216,217,220,224,227,234,241,248,278,279,281,289,290,297,298,308,],[106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,]),'bracketed_action':([0,3,15,51,77,78,159,178,231,235,327,335,],[40,40,40,40,40,40,40,40,40,40,40,40,]),'arithmetic_multiplicative_operator':([9,84,229,],[63,174,174,]),'parameter_list':([80,115,227,],[171,199,272,]),'declaration_list':([38,204,],[120,246,]),'operator2':([85,237,],[177,177,]),'relational_operator':([95,],[191,]),'value_array_slice':([28,41,43,66,68,70,79,80,89,98,107,115,144,174,177,188,193,207,210,212,213,216,217,220,224,227,234,241,248,278,279,281,289,290,297,298,308,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'synonym_definition':([2,149,],[48,48,]),'upper_bound':([217,289,],[263,314,]),'literal_range':([207,210,213,290,],[251,258,260,251,]),'formal_parameter_list':([242,310,],[284,329,]),'index_mode':([207,290,],[252,252,]),'composite_mode':([46,121,138,203,286,288,333,],[139,139,139,139,139,139,139,]),'closed_dyadic_operator':([9,],[67,]),'membership_operator':([95,],[186,]),'literal':([28,41,43,66,68,70,79,80,89,98,107,115,144,174,177,188,193,207,210,212,213,216,217,220,224,227,234,241,248,278,279,281,289,290,297,298,308,],[93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,]),'integer_literal':([28,41,43,66,68,70,79,80,89,98,107,115,144,174,177,188,193,207,209,210,212,213,216,217,220,224,227,234,241,248,278,279,281,289,290,297,298,308,],[94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,257,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,]),'assigning_operator':([9,],[68,]),'empty':([3,15,41,51,77,159,231,327,335,],[52,69,124,52,69,69,69,52,52,]),'declaration':([38,204,],[119,119,]),'builtin_name':([0,3,15,28,41,43,51,66,68,70,77,78,79,80,89,98,107,110,115,144,159,174,177,178,188,193,207,210,212,213,216,217,220,224,227,231,234,235,241,248,278,279,281,289,290,297,298,308,327,335,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'elsif_expression':([240,],[282,]),'for_control':([15,],[76,]),'character_mode':([46,121,138,203,207,222,267,286,288,290,333,],[145,145,145,145,145,145,145,145,145,145,145,]),'parenthesized_expression':([28,41,43,66,68,70,79,80,89,98,107,115,144,174,177,188,193,207,210,212,213,216,217,220,224,227,234,241,248,278,279,281,289,290,297,298,308,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'value_array_element':([28,41,43,66,68,70,79,80,89,98,107,115,144,174,177,188,193,207,210,212,213,216,217,220,224,227,234,241,248,278,279,281,289,290,297,298,308,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'primitive_value':([28,41,43,66,68,70,79,80,89,98,107,115,144,174,177,188,193,207,210,212,213,216,217,220,224,227,234,241,248,278,279,281,289,290,297,298,308,],[97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,]),'discrete_range_mode':([46,121,138,203,207,222,267,286,288,290,333,],[130,130,130,130,130,130,130,130,130,130,130,]),'string_mode':([46,121,138,203,286,288,333,],[128,128,128,128,128,128,128,]),'return_action':([0,3,15,51,77,78,159,178,231,235,327,335,],[22,22,22,22,22,22,22,22,22,22,22,22,]),'string_slice':([0,3,15,28,41,43,51,66,68,70,77,78,79,80,89,98,107,110,115,144,159,174,177,178,188,193,207,210,212,213,216,217,220,224,227,231,234,235,241,248,278,279,281,289,290,297,298,308,327,335,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'result_action':([0,3,15,51,77,78,159,178,231,235,327,335,],[30,30,30,30,30,30,30,30,30,30,30,30,]),'program':([0,],[31,]),'monadic_operator':([28,41,43,66,68,70,79,80,89,98,115,144,174,177,188,193,207,210,212,213,216,217,220,224,227,234,241,248,278,279,281,289,290,297,298,308,],[107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,]),'else_expression':([240,282,],[280,307,]),'mode_definition':([33,201,],[116,116,]),'assignment_action':([0,3,15,51,77,78,159,178,231,235,327,335,],[35,35,35,35,35,35,35,35,35,35,35,35,]),'operand4':([28,41,43,66,68,70,79,80,89,98,107,115,144,174,177,188,193,207,210,212,213,216,217,220,224,227,234,241,248,278,279,281,289,290,297,298,308,],[83,83,83,83,83,83,83,83,83,83,195,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'else_clause':([179,302,],[233,321,]),'empty_literal':([28,41,43,66,68,70,79,80,89,98,107,115,144,174,177,188,193,207,210,212,213,216,217,220,224,227,234,241,248,278,279,281,289,290,297,298,308,],[112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,]),'array_slice':([0,3,15,28,41,43,51,66,68,70,77,78,79,80,89,98,107,110,115,144,159,174,177,178,188,193,207,210,212,213,216,217,220,224,227,231,234,235,241,248,278,279,281,289,290,297,298,308,327,335,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'operand0':([28,41,43,66,68,70,79,80,89,98,115,144,193,207,210,212,213,216,217,220,224,227,234,241,248,278,279,281,289,290,297,298,308,],[95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'right_element':([224,],[271,]),'operator1':([95,],[188,]),'expression':([28,41,43,66,68,70,79,80,89,98,115,144,193,207,210,212,213,216,217,220,224,227,234,241,248,278,279,281,289,290,297,298,308,],[86,122,127,152,156,157,168,173,180,194,173,211,239,255,255,259,255,261,264,266,270,173,275,283,287,303,304,306,264,255,317,318,325,]),'expression_list':([66,193,216,],[154,238,262,]),'boolean_literal':([28,41,43,66,68,70,79,80,89,98,107,115,144,174,177,188,193,207,210,212,213,216,217,220,224,227,234,241,248,278,279,281,289,290,297,298,308,],[113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,]),'while_control':([15,76,],[74,164,]),'mode':([46,121,138,203,286,288,333,],[146,206,208,245,311,313,336,]),'referenced_location':([28,41,43,66,68,70,79,80,89,98,107,115,144,174,177,188,193,207,210,212,213,216,217,220,224,227,234,241,248,278,279,281,289,290,297,298,308,],[96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'do_action':([0,3,15,51,77,78,159,178,231,235,327,335,],[7,7,7,7,7,7,7,7,7,7,7,7,]),'action_statement_list':([178,235,],[230,276,]),'then_clause':([86,275,],[179,302,]),'statement_nullable':([3,51,327,335,],[53,151,334,338,]),'iteration':([75,],[162,]),'operand1':([28,41,43,66,68,70,79,80,89,98,115,144,188,193,207,210,212,213,216,217,220,224,227,234,241,248,278,279,281,289,290,297,298,308,],[85,85,85,85,85,85,85,85,85,85,85,85,237,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'string_element':([0,3,15,28,41,43,51,66,68,70,77,78,79,80,89,98,107,110,115,144,159,174,177,178,188,193,207,210,212,213,216,217,220,224,227,231,234,235,241,248,278,279,281,289,290,297,298,308,327,335,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'procedure_definition':([114,],[197,]),'statement_list':([0,],[8,]),'array_location':([0,3,15,28,41,43,51,66,68,70,77,78,79,80,89,98,107,110,115,144,159,174,177,178,188,193,207,210,212,213,216,217,220,224,227,231,234,235,241,248,278,279,281,289,290,297,298,308,327,335,],[9,9,9,87,87,87,9,87,87,87,9,9,87,87,87,87,87,196,87,87,9,87,87,9,87,87,87,87,87,87,87,87,87,87,87,9,87,9,87,87,87,87,87,87,87,87,87,87,9,9,]),'array_mode':([46,121,138,203,286,288,333,],[133,133,133,133,133,133,133,]),'lower_bound':([66,207,210,213,290,],[153,250,250,250,250,]),'result':([41,],[123,]),'procedure_call':([0,3,15,28,41,43,51,66,68,70,77,78,79,80,89,98,107,110,115,144,159,174,177,178,188,193,207,210,212,213,216,217,220,224,227,231,234,235,241,248,278,279,281,289,290,297,298,308,327,335,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'array_element':([0,3,15,28,41,43,51,66,68,70,77,78,79,80,89,98,107,110,115,144,159,174,177,178,188,193,207,210,212,213,216,217,220,224,227,231,234,235,241,248,278,279,281,289,290,297,298,308,327,335,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'mode_name':([46,121,138,203,286,288,333,],[136,136,136,136,136,136,136,]),'step_enumeration':([75,],[160,]),'exit_action':([0,3,15,51,77,78,159,178,231,235,327,335,],[14,14,14,14,14,14,14,14,14,14,14,14,]),'index_mode_list':([207,290,],[249,315,]),'discrete_mode':([46,121,138,203,207,222,267,286,288,290,333,],[143,143,143,143,253,269,300,143,143,253,143,]),'action_statement':([0,3,15,51,77,159,178,231,235,327,335,],[39,39,77,39,77,77,231,77,231,39,39,]),'step_value':([266,],[299,]),'then_expression':([194,306,325,],[240,323,332,]),'identifier':([0,2,3,15,28,33,38,41,43,46,51,66,68,70,75,77,78,79,80,89,98,107,110,115,121,138,144,148,149,159,174,177,178,188,193,201,203,204,207,210,212,213,216,217,220,222,224,227,231,234,235,241,242,248,267,278,279,281,286,288,289,290,297,298,308,310,327,333,335,],[21,47,21,21,99,47,47,99,99,131,21,99,99,99,161,21,99,99,99,99,99,99,99,99,131,131,99,47,47,21,99,99,21,99,99,47,131,47,254,99,99,99,99,99,99,268,99,99,21,99,21,99,47,99,268,99,99,99,131,131,99,254,99,99,99,47,21,131,21,]),'initialization':([206,],[247,]),'label_id':([42,],[125,]),'declaration_statement':([0,3,51,327,335,],[24,24,24,24,24,]),'formal_parameter':([242,310,],[285,285,]),'builtin_call':([0,3,15,28,41,43,51,66,68,70,77,78,79,80,89,98,107,110,115,144,159,174,177,178,188,193,207,210,212,213,216,217,220,224,227,231,234,235,241,248,278,279,281,289,290,297,298,308,327,335,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'action_statement_nullable':([15,77,159,231,],[72,165,219,273,]),'boolean_mode':([46,121,138,203,207,222,267,286,288,290,333,],[132,132,132,132,132,132,132,132,132,132,132,]),'control_part':([15,],[73,]),'left_element':([79,],[169,]),'operand3':([28,41,43,66,68,70,79,80,89,98,115,144,174,177,188,193,207,210,212,213,216,217,220,224,227,234,241,248,278,279,281,289,290,297,298,308,],[103,103,103,103,103,103,103,103,103,103,103,103,228,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,]),'end_value':([266,296,299,320,],[295,316,319,331,]),'character_literal':([28,41,43,66,68,70,79,80,89,98,107,115,144,174,177,188,193,207,210,212,213,216,217,220,224,227,234,241,248,278,279,281,289,290,297,298,308,],[105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,]),'newmode_statement':([0,3,51,327,335,],[32,32,32,32,32,]),'reference_mode':([46,121,138,203,286,288,333,],[134,134,134,134,134,134,134,]),'dereferenced_reference':([0,3,15,28,41,43,51,66,68,70,77,78,79,80,89,98,107,110,115,144,159,174,177,178,188,193,207,210,212,213,216,217,220,224,227,231,234,235,241,248,278,279,281,289,290,297,298,308,327,335,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'procedure_statement':([0,3,51,327,335,],[34,34,34,34,34,]),'result_spec':([309,],[328,]),'string_concatenation_operator':([9,85,237,],[59,175,175,]),'if_action':([0,3,15,51,77,78,159,178,231,235,327,335,],[44,44,44,44,44,44,44,44,44,44,44,44,]),'start_element':([79,],[170,]),'character_string_literal':([28,41,43,66,68,70,79,80,89,98,107,115,144,174,177,188,193,207,210,212,213,216,217,220,224,227,234,241,248,278,279,281,289,290,297,298,308,],[111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,]),'synonym_list':([2,149,],[50,215,]),'range_enumeration':([75,],[163,]),'element_mode':([288,],[312,]),'discrete_mode_name':([46,121,138,203,207,222,267,286,288,290,333,],[147,147,147,147,147,147,147,147,147,147,147,]),'string_length':([209,],[256,]),'location':([0,3,15,28,41,43,51,66,68,70,77,78,79,80,89,98,107,110,115,144,159,174,177,178,188,193,207,210,212,213,216,217,220,224,227,231,234,235,241,248,278,279,281,289,290,297,298,308,327,335,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'identifier_list':([2,33,38,148,149,201,204,242,310,],[46,118,121,214,46,118,121,286,286,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','Parser.py',61),
  ('statement_list -> statement statement_nullable','statement_list',2,'p_statement_list','Parser.py',65),
  ('statement_nullable -> statement statement_nullable','statement_nullable',2,'p_statement_nullable','Parser.py',77),
  ('statement_nullable -> empty','statement_nullable',1,'p_statement_nullable','Parser.py',78),
  ('statement -> declaration_statement','statement',1,'p_statement','Parser.py',90),
  ('statement -> synonym_statement','statement',1,'p_statement','Parser.py',91),
  ('statement -> newmode_statement','statement',1,'p_statement','Parser.py',92),
  ('statement -> action_statement','statement',1,'p_statement','Parser.py',93),
  ('statement -> procedure_statement','statement',1,'p_statement','Parser.py',94),
  ('synonym_statement -> SYN synonym_list SEMI','synonym_statement',3,'p_synonym_statement','Parser.py',103),
  ('synonym_list -> synonym_definition','synonym_list',1,'p_synonym_list','Parser.py',107),
  ('synonym_list -> synonym_definition COMMA synonym_list','synonym_list',3,'p_synonym_list','Parser.py',108),
  ('synonym_definition -> identifier_list mode ASSIGN expression','synonym_definition',4,'p_synonym_definition','Parser.py',117),
  ('synonym_definition -> identifier_list ASSIGN expression','synonym_definition',3,'p_synonym_definition','Parser.py',118),
  ('declaration_statement -> DCL declaration_list SEMI','declaration_statement',3,'p_declaration_statement','Parser.py',132),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','Parser.py',136),
  ('declaration_list -> declaration COMMA declaration_list','declaration_list',3,'p_declaration_list','Parser.py',137),
  ('declaration -> identifier_list mode initialization','declaration',3,'p_declaration','Parser.py',145),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','Parser.py',146),
  ('initialization -> ASSIGN expression','initialization',2,'p_initialization','Parser.py',150),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','Parser.py',154),
  ('identifier_list -> identifier COMMA identifier_list','identifier_list',3,'p_identifier_list','Parser.py',155),
  ('identifier -> ID','identifier',1,'p_identifier','Parser.py',164),
  ('newmode_statement -> TYPE newmode_list SEMI','newmode_statement',3,'p_newmode_statement','Parser.py',175),
  ('newmode_list -> mode_definition','newmode_list',1,'p_newmode_list','Parser.py',179),
  ('newmode_list -> mode_definition COMMA newmode_list','newmode_list',3,'p_newmode_list','Parser.py',180),
  ('mode_definition -> identifier_list ASSIGN mode','mode_definition',3,'p_mode_definition','Parser.py',189),
  ('procedure_statement -> ID COLON procedure_definition','procedure_statement',3,'p_procedure_statement','Parser.py',200),
  ('procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI','procedure_definition',9,'p_procedure_definition','Parser.py',204),
  ('procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI','procedure_definition',8,'p_procedure_definition','Parser.py',205),
  ('formal_parameter_list -> formal_parameter','formal_parameter_list',1,'p_formal_parameter_list','Parser.py',209),
  ('formal_parameter_list -> formal_parameter COMMA formal_parameter_list','formal_parameter_list',3,'p_formal_parameter_list','Parser.py',210),
  ('formal_parameter -> identifier_list mode LOC','formal_parameter',3,'p_formal_parameter','Parser.py',219),
  ('formal_parameter -> identifier_list mode','formal_parameter',2,'p_formal_parameter','Parser.py',220),
  ('result_spec -> RETURNS LPAREN mode LOC RPAREN','result_spec',5,'p_result_spec','Parser.py',226),
  ('result_spec -> RETURNS LPAREN mode RPAREN','result_spec',4,'p_result_spec','Parser.py',227),
  ('mode -> mode_name','mode',1,'p_mode','Parser.py',232),
  ('mode -> discrete_mode','mode',1,'p_mode','Parser.py',233),
  ('mode -> reference_mode','mode',1,'p_mode','Parser.py',234),
  ('mode -> composite_mode','mode',1,'p_mode','Parser.py',235),
  ('mode_name -> identifier','mode_name',1,'p_mode_name','Parser.py',239),
  ('discrete_mode -> integer_mode','discrete_mode',1,'p_discrete_mode','Parser.py',247),
  ('discrete_mode -> boolean_mode','discrete_mode',1,'p_discrete_mode','Parser.py',248),
  ('discrete_mode -> character_mode','discrete_mode',1,'p_discrete_mode','Parser.py',249),
  ('discrete_mode -> discrete_range_mode','discrete_mode',1,'p_discrete_mode','Parser.py',250),
  ('discrete_mode_name -> identifier','discrete_mode_name',1,'p_discrete_mode_name','Parser.py',254),
  ('integer_mode -> INT','integer_mode',1,'p_integer_mode','Parser.py',258),
  ('boolean_mode -> BOOL','boolean_mode',1,'p_boolean_mode','Parser.py',262),
  ('character_mode -> CHAR','character_mode',1,'p_character_mode','Parser.py',266),
  ('discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','Parser.py',275),
  ('discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','Parser.py',276),
  ('literal_range -> lower_bound COLON upper_bound','literal_range',3,'p_literal_range','Parser.py',280),
  ('lower_bound -> expression','lower_bound',1,'p_lower_bound','Parser.py',284),
  ('upper_bound -> expression','upper_bound',1,'p_upper_bound','Parser.py',288),
  ('reference_mode -> REF mode','reference_mode',2,'p_reference_mode','Parser.py',295),
  ('composite_mode -> string_mode','composite_mode',1,'p_composite_mode','Parser.py',302),
  ('composite_mode -> array_mode','composite_mode',1,'p_composite_mode','Parser.py',303),
  ('string_mode -> CHARS LBRACKET string_length RBRACKET','string_mode',4,'p_string_mode','Parser.py',307),
  ('string_length -> integer_literal','string_length',1,'p_string_length','Parser.py',311),
  ('array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode','array_mode',5,'p_array_mode','Parser.py',315),
  ('index_mode_list -> index_mode','index_mode_list',1,'p_index_mode_list','Parser.py',319),
  ('index_mode_list -> index_mode COMMA index_mode_list','index_mode_list',3,'p_index_mode_list','Parser.py',320),
  ('index_mode -> discrete_mode','index_mode',1,'p_index_mode','Parser.py',329),
  ('index_mode -> literal_range','index_mode',1,'p_index_mode','Parser.py',330),
  ('element_mode -> mode','element_mode',1,'p_element_mode','Parser.py',334),
  ('location -> identifier','location',1,'p_location','Parser.py',345),
  ('location -> dereferenced_reference','location',1,'p_location','Parser.py',346),
  ('location -> string_element','location',1,'p_location','Parser.py',347),
  ('location -> string_slice','location',1,'p_location','Parser.py',348),
  ('location -> array_element','location',1,'p_location','Parser.py',349),
  ('location -> array_slice','location',1,'p_location','Parser.py',350),
  ('location -> call_action','location',1,'p_location','Parser.py',351),
  ('dereferenced_reference -> array_location ARROW','dereferenced_reference',2,'p_dereferenced_reference','Parser.py',355),
  ('string_element -> identifier LBRACKET start_element RBRACKET','string_element',4,'p_string_element','Parser.py',359),
  ('start_element -> expression','start_element',1,'p_start_element','Parser.py',363),
  ('string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET','string_slice',6,'p_string_slice','Parser.py',367),
  ('left_element -> expression','left_element',1,'p_left_element','Parser.py',371),
  ('right_element -> expression','right_element',1,'p_right_element','Parser.py',375),
  ('array_element -> array_location LBRACKET expression_list RBRACKET','array_element',4,'p_array_element','Parser.py',379),
  ('expression_list -> expression','expression_list',1,'p_expression_list','Parser.py',383),
  ('expression_list -> expression COMMA expression_list','expression_list',3,'p_expression_list','Parser.py',384),
  ('array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET','array_slice',6,'p_array_slice','Parser.py',391),
  ('array_location -> location','array_location',1,'p_array_location','Parser.py',395),
  ('expression -> operand0','expression',1,'p_expression','Parser.py',405),
  ('expression -> conditional_expression','expression',1,'p_expression','Parser.py',406),
  ('parenthesized_expression -> LPAREN expression RPAREN','parenthesized_expression',3,'p_parenthesized_expression','Parser.py',410),
  ('conditional_expression -> IF expression then_expression else_expression FI','conditional_expression',5,'p_conditional_expression','Parser.py',418),
  ('conditional_expression -> IF expression then_expression elsif_expression else_expression FI','conditional_expression',6,'p_conditional_expression','Parser.py',419),
  ('then_expression -> THEN expression','then_expression',2,'p_then_expression','Parser.py',423),
  ('else_expression -> ELSE expression','else_expression',2,'p_else_expression','Parser.py',427),
  ('elsif_expression -> ELSIF expression then_expression','elsif_expression',3,'p_elsif_expression','Parser.py',431),
  ('elsif_expression -> elsif_expression ELSIF expression then_expression','elsif_expression',4,'p_elsif_expression','Parser.py',432),
  ('operand0 -> operand1','operand0',1,'p_operand0','Parser.py',447),
  ('operand0 -> operand0 operator1 operand1','operand0',3,'p_operand0','Parser.py',448),
  ('operand1 -> operand2','operand1',1,'p_operand1','Parser.py',455),
  ('operand1 -> operand1 operator2 operand2','operand1',3,'p_operand1','Parser.py',456),
  ('operand2 -> operand3','operand2',1,'p_operand2','Parser.py',463),
  ('operand2 -> operand2 arithmetic_multiplicative_operator operand3','operand2',3,'p_operand2','Parser.py',464),
  ('operand3 -> monadic_operator operand4','operand3',2,'p_operand3','Parser.py',472),
  ('operand3 -> operand4','operand3',1,'p_operand3','Parser.py',473),
  ('operand4 -> array_location','operand4',1,'p_operand4','Parser.py',480),
  ('operand4 -> referenced_location','operand4',1,'p_operand4','Parser.py',481),
  ('operand4 -> primitive_value','operand4',1,'p_operand4','Parser.py',482),
  ('arithmetic_multiplicative_operator -> TIMES','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',493),
  ('arithmetic_multiplicative_operator -> DIVIDE','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',494),
  ('arithmetic_multiplicative_operator -> MODULO','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',495),
  ('monadic_operator -> MINUS','monadic_operator',1,'p_monadic_operator','Parser.py',499),
  ('monadic_operator -> NOT','monadic_operator',1,'p_monadic_operator','Parser.py',500),
  ('referenced_location -> ARROW array_location','referenced_location',2,'p_referenced_location','Parser.py',504),
  ('operator1 -> relational_operator','operator1',1,'p_operator1','Parser.py',508),
  ('operator1 -> membership_operator','operator1',1,'p_operator1','Parser.py',509),
  ('operator2 -> arithmetic_additive_operator','operator2',1,'p_operator2','Parser.py',513),
  ('operator2 -> string_concatenation_operator','operator2',1,'p_operator2','Parser.py',514),
  ('arithmetic_additive_operator -> PLUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','Parser.py',518),
  ('arithmetic_additive_operator -> MINUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','Parser.py',519),
  ('string_concatenation_operator -> CONCAT','string_concatenation_operator',1,'p_string_concatenation_operator','Parser.py',523),
  ('relational_operator -> AND','relational_operator',1,'p_relational_operator','Parser.py',527),
  ('relational_operator -> OR','relational_operator',1,'p_relational_operator','Parser.py',528),
  ('relational_operator -> EQUAL','relational_operator',1,'p_relational_operator','Parser.py',529),
  ('relational_operator -> NOTEQ','relational_operator',1,'p_relational_operator','Parser.py',530),
  ('relational_operator -> GREATER','relational_operator',1,'p_relational_operator','Parser.py',531),
  ('relational_operator -> GTEQUAL','relational_operator',1,'p_relational_operator','Parser.py',532),
  ('relational_operator -> LESS','relational_operator',1,'p_relational_operator','Parser.py',533),
  ('relational_operator -> LTEQUAL','relational_operator',1,'p_relational_operator','Parser.py',534),
  ('membership_operator -> IN','membership_operator',1,'p_membership_operator','Parser.py',538),
  ('primitive_value -> literal','primitive_value',1,'p_primitive_value','Parser.py',550),
  ('primitive_value -> value_array_element','primitive_value',1,'p_primitive_value','Parser.py',551),
  ('primitive_value -> value_array_slice','primitive_value',1,'p_primitive_value','Parser.py',552),
  ('primitive_value -> parenthesized_expression','primitive_value',1,'p_primitive_value','Parser.py',553),
  ('literal -> integer_literal','literal',1,'p_literal','Parser.py',557),
  ('literal -> boolean_literal','literal',1,'p_literal','Parser.py',558),
  ('literal -> character_literal','literal',1,'p_literal','Parser.py',559),
  ('literal -> empty_literal','literal',1,'p_literal','Parser.py',560),
  ('literal -> character_string_literal','literal',1,'p_literal','Parser.py',561),
  ('value_array_element -> primitive_value LBRACKET expression_list RBRACKET','value_array_element',4,'p_value_array_element','Parser.py',565),
  ('value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET','value_array_slice',6,'p_value_array_slice','Parser.py',569),
  ('integer_literal -> ICONST','integer_literal',1,'p_integer_literal','Parser.py',577),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','Parser.py',581),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','Parser.py',582),
  ('character_literal -> CCONST','character_literal',1,'p_character_literal','Parser.py',586),
  ('empty_literal -> NULL','empty_literal',1,'p_empty_literal','Parser.py',590),
  ('character_string_literal -> SCONST','character_string_literal',1,'p_character_string_literal','Parser.py',594),
  ('action_statement -> identifier COLON action SEMI','action_statement',4,'p_action_statement','Parser.py',605),
  ('action_statement -> action SEMI','action_statement',2,'p_action_statement','Parser.py',606),
  ('action -> bracketed_action','action',1,'p_action','Parser.py',611),
  ('action -> assignment_action','action',1,'p_action','Parser.py',612),
  ('action -> call_action','action',1,'p_action','Parser.py',613),
  ('action -> exit_action','action',1,'p_action','Parser.py',614),
  ('action -> result_action','action',1,'p_action','Parser.py',615),
  ('action -> return_action','action',1,'p_action','Parser.py',616),
  ('bracketed_action -> if_action','bracketed_action',1,'p_bracketed_action','Parser.py',620),
  ('bracketed_action -> do_action','bracketed_action',1,'p_bracketed_action','Parser.py',621),
  ('assignment_action -> array_location assigning_operator expression','assignment_action',3,'p_assignment_action','Parser.py',625),
  ('assigning_operator -> closed_dyadic_operator ASSIGN','assigning_operator',2,'p_assigning_operator','Parser.py',629),
  ('assigning_operator -> ASSIGN','assigning_operator',1,'p_assigning_operator','Parser.py',630),
  ('closed_dyadic_operator -> arithmetic_additive_operator','closed_dyadic_operator',1,'p_closed_dyadic_operator','Parser.py',634),
  ('closed_dyadic_operator -> arithmetic_multiplicative_operator','closed_dyadic_operator',1,'p_closed_dyadic_operator','Parser.py',635),
  ('closed_dyadic_operator -> string_concatenation_operator','closed_dyadic_operator',1,'p_closed_dyadic_operator','Parser.py',636),
  ('if_action -> IF expression then_clause else_clause FI','if_action',5,'p_if_action','Parser.py',640),
  ('if_action -> IF expression then_clause FI','if_action',4,'p_if_action','Parser.py',641),
  ('then_clause -> THEN action_statement_list','then_clause',2,'p_then_clause','Parser.py',645),
  ('else_clause -> ELSE action_statement_list','else_clause',2,'p_else_clause','Parser.py',649),
  ('else_clause -> ELSIF expression then_clause else_clause','else_clause',4,'p_else_clause','Parser.py',650),
  ('else_clause -> ELSIF expression then_clause','else_clause',3,'p_else_clause','Parser.py',651),
  ('action_statement_list -> action_statement action_statement_nullable','action_statement_list',2,'p_action_statement_list','Parser.py',662),
  ('action_statement_nullable -> action_statement action_statement_nullable','action_statement_nullable',2,'p_action_statement_nullable','Parser.py',674),
  ('action_statement_nullable -> empty','action_statement_nullable',1,'p_action_statement_nullable','Parser.py',675),
  ('call_action -> procedure_call','call_action',1,'p_call_action','Parser.py',692),
  ('call_action -> builtin_call','call_action',1,'p_call_action','Parser.py',693),
  ('builtin_call -> builtin_name LPAREN parameter_list RPAREN','builtin_call',4,'p_builtin_call','Parser.py',697),
  ('builtin_call -> builtin_name LPAREN RPAREN','builtin_call',3,'p_builtin_call','Parser.py',698),
  ('builtin_name -> ABS','builtin_name',1,'p_builtin_name','Parser.py',703),
  ('builtin_name -> ASC','builtin_name',1,'p_builtin_name','Parser.py',704),
  ('builtin_name -> NUM','builtin_name',1,'p_builtin_name','Parser.py',705),
  ('builtin_name -> UPPER','builtin_name',1,'p_builtin_name','Parser.py',706),
  ('builtin_name -> LOWER','builtin_name',1,'p_builtin_name','Parser.py',707),
  ('builtin_name -> LENGTH','builtin_name',1,'p_builtin_name','Parser.py',708),
  ('builtin_name -> READ','builtin_name',1,'p_builtin_name','Parser.py',709),
  ('builtin_name -> PRINT','builtin_name',1,'p_builtin_name','Parser.py',710),
  ('procedure_call -> ID LPAREN parameter_list RPAREN','procedure_call',4,'p_procedure_call','Parser.py',714),
  ('procedure_call -> ID LPAREN RPAREN','procedure_call',3,'p_procedure_call','Parser.py',715),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','Parser.py',719),
  ('parameter_list -> expression COMMA parameter_list','parameter_list',3,'p_parameter_list','Parser.py',720),
  ('exit_action -> EXIT label_id','exit_action',2,'p_exit_action','Parser.py',729),
  ('label_id -> ID','label_id',1,'p_label_id','Parser.py',733),
  ('return_action -> RETURN result','return_action',2,'p_return_action','Parser.py',737),
  ('result -> expression','result',1,'p_result','Parser.py',741),
  ('result -> empty','result',1,'p_result','Parser.py',742),
  ('result_action -> RESULT expression','result_action',2,'p_result_action','Parser.py',745),
  ('do_action -> DO control_part SEMI action_statement_nullable OD','do_action',5,'p_do_action','Parser.py',753),
  ('do_action -> DO action_statement_nullable OD','do_action',3,'p_do_action','Parser.py',754),
  ('control_part -> for_control while_control','control_part',2,'p_control_part','Parser.py',761),
  ('control_part -> for_control','control_part',1,'p_control_part','Parser.py',762),
  ('control_part -> while_control','control_part',1,'p_control_part','Parser.py',763),
  ('for_control -> FOR iteration','for_control',2,'p_for_control','Parser.py',767),
  ('iteration -> step_enumeration','iteration',1,'p_iteration','Parser.py',771),
  ('iteration -> range_enumeration','iteration',1,'p_iteration','Parser.py',772),
  ('step_enumeration -> identifier ASSIGN expression step_value DOWN end_value','step_enumeration',6,'p_step_enumeration','Parser.py',776),
  ('step_enumeration -> identifier ASSIGN expression step_value end_value','step_enumeration',5,'p_step_enumeration','Parser.py',777),
  ('step_enumeration -> identifier ASSIGN expression DOWN end_value','step_enumeration',5,'p_step_enumeration','Parser.py',778),
  ('step_enumeration -> identifier ASSIGN expression end_value','step_enumeration',4,'p_step_enumeration','Parser.py',779),
  ('step_value -> BY expression','step_value',2,'p_step_value','Parser.py',791),
  ('end_value -> TO expression','end_value',2,'p_end_value','Parser.py',795),
  ('range_enumeration -> identifier DOWN IN discrete_mode','range_enumeration',4,'p_range_enumeration','Parser.py',799),
  ('range_enumeration -> identifier IN discrete_mode','range_enumeration',3,'p_range_enumeration','Parser.py',800),
  ('while_control -> WHILE expression','while_control',2,'p_while_control','Parser.py',807),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',813),
]
