
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ICONST CCONST SCONST COMMA PLUS MINUS TIMES DIVIDE COLON LPAREN RPAREN ASSIGN SEMI ARROW LTEQUAL LESS GREATER GTEQUAL EQUAL LBRACKET RBRACKET ID MODULO AND OR NOTEQ NOT CONCAT DO DCL RETURN THEN INT FALSE CHARS SYN ELSE DOWN NUM RESULT IN FI ARRAY NULL LENGTH BY LOWER IF LOC CHAR REF END FOR READ PROC OD WHILE UPPER ASC TO RETURNS ABS EXIT ELSIF PRINT BOOL TYPE TRUEprogram : statement_liststatement_list : statement statement_nullablestatement_nullable : statement statement_nullable\n                              | emptystatement : declaration_statement\n                     | synonym_statementsynonym_statement : SYN synonym_listsynonym_list : synonym_definition\n                        | synonym_definition COMMA synonym_definitionsynonym_definition : identifier_list mode ASSIGN expression\n                              | identifier_list ASSIGN expressiondeclaration_statement : DCL declaration_list SEMIdeclaration_list : declaration\n                            | declaration COMMA declarationdeclaration : identifier_list mode initialization\n                       | identifier_list modeinitialization : ASSIGN expressionidentifier_list : ID\n                           | ID COMMA identifier_listmode : mode_name\n                | discrete_mode\n                | reference_modemode_name : IDdiscrete_mode : integer_mode\n                         | boolean_mode\n                         | character_mode\n                         | discrete_range_modeinteger_mode : INTboolean_mode : BOOLcharacter_mode : CHARdiscrete_range_mode : discrete_mode_name  LPAREN literal_range RPAREN\n                               | discrete_mode LPAREN literal_range RPARENliteral_range : lower_bound COLON upper_boundlower_bound : ICONSTupper_bound : ICONSTdiscrete_mode_name : IDreference_mode : REF modeexpression : operand0operand0 : operand1\n                    | operand0 operator1 operand1operand1 : operand2\n                    | operand1 operator2 operand2operand2 : operand3\n                    | operand2 arithmetic_multiplicative_operator operand3operand3 : monadic_operator operand4\n                    | operand4operand4 : primitive_valuearithmetic_multiplicative_operator : TIMES\n                                              | DIVIDE\n                                              | MODULOmonadic_operator : MINUS\n                            | NOToperator1 : relational_operator\n                    | membership_operatoroperator2 : arithmetic_additive_operator\n                     | string_concatenation_operatorarithmetic_additive_operator : PLUS\n                                        | MINUSstring_concatenation_operator : CONCATrelational_operator : AND\n                               | OR\n                               | EQUAL\n                               | NOTEQ\n                               | GREATER\n                               | GTEQUAL\n                               | LESS\n                               | LTEQUALmembership_operator : INprimitive_value : literalliteral : integer_literal\n                   | boolean_literal\n                   | character_literal\n                   | empty_literal\n                   | character_string_literalinteger_literal : ICONSTboolean_literal : TRUE\n                           | FALSEcharacter_literal : CCONSTempty_literal : NULLcharacter_string_literal : SCONSTempty :'
    
_lr_action_items = {'LESS':([49,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,67,69,76,102,103,104,],[-73,-71,-79,-76,-46,-39,84,-43,-41,-80,-69,-78,-75,-70,-74,-77,-72,-47,-45,-42,-40,-44,]),'NOTEQ':([49,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,67,69,76,102,103,104,],[-73,-71,-79,-76,-46,-39,89,-43,-41,-80,-69,-78,-75,-70,-74,-77,-72,-47,-45,-42,-40,-44,]),'EQUAL':([49,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,67,69,76,102,103,104,],[-73,-71,-79,-76,-46,-39,88,-43,-41,-80,-69,-78,-75,-70,-74,-77,-72,-47,-45,-42,-40,-44,]),'CHAR':([10,11,14,21,45,],[25,-18,25,25,-19,]),'COLON':([70,71,],[99,-34,]),'NULL':([37,43,47,48,53,66,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,],[51,51,51,51,-51,-52,-55,-56,51,-57,-58,-59,-60,-66,51,-68,-54,-62,-63,-65,-64,-67,-61,-53,-50,-49,51,-48,]),'TRUE':([37,43,47,48,53,66,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,],[52,52,52,52,-51,-52,-55,-56,52,-57,-58,-59,-60,-66,52,-68,-54,-62,-63,-65,-64,-67,-61,-53,-50,-49,52,-48,]),'MINUS':([37,43,47,49,50,51,52,54,55,57,58,59,60,61,62,63,64,65,67,69,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,102,103,104,],[53,53,53,-73,-71,-79,-76,-46,81,-43,-41,-80,-69,-78,-75,-70,-74,-77,-72,-47,-45,-55,-56,53,-57,-58,-59,-60,-66,53,-68,-54,-62,-63,-65,-64,-67,-61,-53,-50,-49,53,-48,-42,81,-44,]),'CONCAT':([49,50,51,52,54,55,57,58,59,60,61,62,63,64,65,67,69,76,102,103,104,],[-73,-71,-79,-76,-46,82,-43,-41,-80,-69,-78,-75,-70,-74,-77,-72,-47,-45,-42,82,-44,]),'DCL':([0,2,5,6,12,13,16,18,46,49,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,67,68,69,75,76,102,103,104,],[1,-6,1,-5,-8,-7,1,-12,-9,-73,-71,-79,-76,-46,-39,-38,-43,-41,-80,-69,-78,-75,-70,-74,-77,-72,-11,-47,-10,-45,-42,-40,-44,]),'RPAREN':([72,74,105,106,],[100,101,-35,-33,]),'SEMI':([8,9,20,22,23,24,25,26,28,29,30,31,32,33,39,40,42,49,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,67,69,73,76,100,101,102,103,104,],[18,-13,-27,-28,-25,-26,-30,-22,-24,-16,-21,-29,-20,-23,-14,-37,-15,-73,-71,-79,-76,-46,-39,-38,-43,-41,-80,-69,-78,-75,-70,-74,-77,-72,-47,-17,-45,-31,-32,-42,-40,-44,]),'REF':([10,11,14,21,45,],[21,-18,21,21,-19,]),'SCONST':([37,43,47,48,53,66,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,],[59,59,59,59,-51,-52,-55,-56,59,-57,-58,-59,-60,-66,59,-68,-54,-62,-63,-65,-64,-67,-61,-53,-50,-49,59,-48,]),'COMMA':([9,11,12,20,22,23,24,25,26,28,29,30,31,32,33,40,42,49,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,67,68,69,73,75,76,100,101,102,103,104,],[19,34,35,-27,-28,-25,-26,-30,-22,-24,-16,-21,-29,-20,-23,-37,-15,-73,-71,-79,-76,-46,-39,-38,-43,-41,-80,-69,-78,-75,-70,-74,-77,-72,-11,-47,-17,-10,-45,-31,-32,-42,-40,-44,]),'PLUS':([49,50,51,52,54,55,57,58,59,60,61,62,63,64,65,67,69,76,102,103,104,],[-73,-71,-79,-76,-46,80,-43,-41,-80,-69,-78,-75,-70,-74,-77,-72,-47,-45,-42,80,-44,]),'GTEQUAL':([49,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,67,69,76,102,103,104,],[-73,-71,-79,-76,-46,-39,90,-43,-41,-80,-69,-78,-75,-70,-74,-77,-72,-47,-45,-42,-40,-44,]),'ASSIGN':([11,14,20,22,23,24,25,26,28,29,30,31,32,33,36,40,45,100,101,],[-18,37,-27,-28,-25,-26,-30,-22,-24,43,-21,-29,-20,-23,47,-37,-19,-31,-32,]),'CCONST':([37,43,47,48,53,66,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,],[61,61,61,61,-51,-52,-55,-56,61,-57,-58,-59,-60,-66,61,-68,-54,-62,-63,-65,-64,-67,-61,-53,-50,-49,61,-48,]),'$end':([2,4,5,6,7,12,13,15,16,17,18,38,46,49,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,67,68,69,75,76,102,103,104,],[-6,0,-81,-5,-1,-8,-7,-2,-81,-4,-12,-3,-9,-73,-71,-79,-76,-46,-39,-38,-43,-41,-80,-69,-78,-75,-70,-74,-77,-72,-11,-47,-10,-45,-42,-40,-44,]),'MODULO':([49,50,51,52,54,57,58,59,60,61,62,63,64,65,67,69,76,102,104,],[-73,-71,-79,-76,-46,-43,95,-80,-69,-78,-75,-70,-74,-77,-72,-47,-45,95,-44,]),'DIVIDE':([49,50,51,52,54,57,58,59,60,61,62,63,64,65,67,69,76,102,104,],[-73,-71,-79,-76,-46,-43,96,-80,-69,-78,-75,-70,-74,-77,-72,-47,-45,96,-44,]),'TIMES':([49,50,51,52,54,57,58,59,60,61,62,63,64,65,67,69,76,102,104,],[-73,-71,-79,-76,-46,-43,98,-80,-69,-78,-75,-70,-74,-77,-72,-47,-45,98,-44,]),'ICONST':([37,41,43,44,47,48,53,66,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[62,71,62,71,62,62,-51,-52,-55,-56,62,-57,-58,-59,-60,-66,62,-68,-54,-62,-63,-65,-64,-67,-61,-53,-50,-49,62,-48,105,]),'LPAREN':([20,22,23,24,25,27,28,30,31,33,100,101,],[-27,-28,-25,-26,-30,41,-24,44,-29,-36,-31,-32,]),'IN':([49,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,67,69,76,102,103,104,],[-73,-71,-79,-76,-46,-39,86,-43,-41,-80,-69,-78,-75,-70,-74,-77,-72,-47,-45,-42,-40,-44,]),'ID':([1,3,10,11,14,19,21,34,35,45,],[11,11,33,-18,33,11,33,11,11,-19,]),'LTEQUAL':([49,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,67,69,76,102,103,104,],[-73,-71,-79,-76,-46,-39,92,-43,-41,-80,-69,-78,-75,-70,-74,-77,-72,-47,-45,-42,-40,-44,]),'AND':([49,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,67,69,76,102,103,104,],[-73,-71,-79,-76,-46,-39,83,-43,-41,-80,-69,-78,-75,-70,-74,-77,-72,-47,-45,-42,-40,-44,]),'FALSE':([37,43,47,48,53,66,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,],[65,65,65,65,-51,-52,-55,-56,65,-57,-58,-59,-60,-66,65,-68,-54,-62,-63,-65,-64,-67,-61,-53,-50,-49,65,-48,]),'GREATER':([49,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,67,69,76,102,103,104,],[-73,-71,-79,-76,-46,-39,91,-43,-41,-80,-69,-78,-75,-70,-74,-77,-72,-47,-45,-42,-40,-44,]),'INT':([10,11,14,21,45,],[22,-18,22,22,-19,]),'SYN':([0,2,5,6,12,13,16,18,46,49,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,67,68,69,75,76,102,103,104,],[3,-6,3,-5,-8,-7,3,-12,-9,-73,-71,-79,-76,-46,-39,-38,-43,-41,-80,-69,-78,-75,-70,-74,-77,-72,-11,-47,-10,-45,-42,-40,-44,]),'BOOL':([10,11,14,21,45,],[31,-18,31,31,-19,]),'NOT':([37,43,47,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,],[66,66,66,-55,-56,66,-57,-58,-59,-60,-66,66,-68,-54,-62,-63,-65,-64,-67,-61,-53,-50,-49,66,-48,]),'OR':([49,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,67,69,76,102,103,104,],[-73,-71,-79,-76,-46,-39,93,-43,-41,-80,-69,-78,-75,-70,-74,-77,-72,-47,-45,-42,-40,-44,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'arithmetic_additive_operator':([55,103,],[77,77,]),'monadic_operator':([37,43,47,79,85,97,],[48,48,48,48,48,48,]),'relational_operator':([56,],[94,]),'synonym_statement':([0,5,16,],[2,2,2,]),'arithmetic_multiplicative_operator':([58,102,],[97,97,]),'operator2':([55,103,],[79,79,]),'boolean_mode':([10,14,21,],[23,23,23,]),'boolean_literal':([37,43,47,48,79,85,97,],[50,50,50,50,50,50,50,]),'reference_mode':([10,14,21,],[26,26,26,]),'discrete_mode_name':([10,14,21,],[27,27,27,]),'discrete_mode':([10,14,21,],[30,30,30,]),'declaration_list':([1,],[8,]),'mode_name':([10,14,21,],[32,32,32,]),'operand4':([37,43,47,48,79,85,97,],[54,54,54,76,54,54,54,]),'statement_nullable':([5,16,],[15,38,]),'operand1':([37,43,47,85,],[55,55,55,103,]),'operand0':([37,43,47,],[56,56,56,]),'operand3':([37,43,47,79,85,97,],[57,57,57,57,57,104,]),'operand2':([37,43,47,79,85,],[58,58,58,102,58,]),'membership_operator':([56,],[87,]),'operator1':([56,],[85,]),'literal':([37,43,47,48,79,85,97,],[60,60,60,60,60,60,60,]),'program':([0,],[4,]),'statement':([0,5,16,],[5,16,16,]),'empty':([5,16,],[17,17,]),'lower_bound':([41,44,],[70,70,]),'initialization':([29,],[42,]),'character_string_literal':([37,43,47,48,79,85,97,],[64,64,64,64,64,64,64,]),'integer_mode':([10,14,21,],[28,28,28,]),'empty_literal':([37,43,47,48,79,85,97,],[49,49,49,49,49,49,49,]),'synonym_list':([3,],[13,]),'declaration':([1,19,],[9,39,]),'identifier_list':([1,3,19,34,35,],[10,14,10,45,14,]),'integer_literal':([37,43,47,48,79,85,97,],[63,63,63,63,63,63,63,]),'synonym_definition':([3,35,],[12,46,]),'upper_bound':([99,],[106,]),'discrete_range_mode':([10,14,21,],[20,20,20,]),'character_mode':([10,14,21,],[24,24,24,]),'string_concatenation_operator':([55,103,],[78,78,]),'declaration_statement':([0,5,16,],[6,6,6,]),'mode':([10,14,21,],[29,36,40,]),'statement_list':([0,],[7,]),'character_literal':([37,43,47,48,79,85,97,],[67,67,67,67,67,67,67,]),'literal_range':([41,44,],[72,74,]),'expression':([37,43,47,],[68,73,75,]),'primitive_value':([37,43,47,48,79,85,97,],[69,69,69,69,69,69,69,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','Parser.py',26),
  ('statement_list -> statement statement_nullable','statement_list',2,'p_statement_list','Parser.py',30),
  ('statement_nullable -> statement statement_nullable','statement_nullable',2,'p_statement_nullable','Parser.py',39),
  ('statement_nullable -> empty','statement_nullable',1,'p_statement_nullable','Parser.py',40),
  ('statement -> declaration_statement','statement',1,'p_statement','Parser.py',51),
  ('statement -> synonym_statement','statement',1,'p_statement','Parser.py',52),
  ('synonym_statement -> SYN synonym_list','synonym_statement',2,'p_synonym_statement','Parser.py',64),
  ('synonym_list -> synonym_definition','synonym_list',1,'p_synonym_list','Parser.py',67),
  ('synonym_list -> synonym_definition COMMA synonym_definition','synonym_list',3,'p_synonym_list','Parser.py',68),
  ('synonym_definition -> identifier_list mode ASSIGN expression','synonym_definition',4,'p_synonym_definition','Parser.py',75),
  ('synonym_definition -> identifier_list ASSIGN expression','synonym_definition',3,'p_synonym_definition','Parser.py',76),
  ('declaration_statement -> DCL declaration_list SEMI','declaration_statement',3,'p_declaration_statement','Parser.py',84),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','Parser.py',88),
  ('declaration_list -> declaration COMMA declaration','declaration_list',3,'p_declaration_list','Parser.py',89),
  ('declaration -> identifier_list mode initialization','declaration',3,'p_declaration','Parser.py',99),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','Parser.py',100),
  ('initialization -> ASSIGN expression','initialization',2,'p_initialization','Parser.py',104),
  ('identifier_list -> ID','identifier_list',1,'p_identifier_list','Parser.py',108),
  ('identifier_list -> ID COMMA identifier_list','identifier_list',3,'p_identifier_list','Parser.py',109),
  ('mode -> mode_name','mode',1,'p_mode','Parser.py',122),
  ('mode -> discrete_mode','mode',1,'p_mode','Parser.py',123),
  ('mode -> reference_mode','mode',1,'p_mode','Parser.py',124),
  ('mode_name -> ID','mode_name',1,'p_mode_name','Parser.py',130),
  ('discrete_mode -> integer_mode','discrete_mode',1,'p_discrete_mode','Parser.py',135),
  ('discrete_mode -> boolean_mode','discrete_mode',1,'p_discrete_mode','Parser.py',136),
  ('discrete_mode -> character_mode','discrete_mode',1,'p_discrete_mode','Parser.py',137),
  ('discrete_mode -> discrete_range_mode','discrete_mode',1,'p_discrete_mode','Parser.py',138),
  ('integer_mode -> INT','integer_mode',1,'p_integer_mode','Parser.py',142),
  ('boolean_mode -> BOOL','boolean_mode',1,'p_boolean_mode','Parser.py',145),
  ('character_mode -> CHAR','character_mode',1,'p_character_mode','Parser.py',148),
  ('discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','Parser.py',152),
  ('discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','Parser.py',153),
  ('literal_range -> lower_bound COLON upper_bound','literal_range',3,'p_literal_range','Parser.py',157),
  ('lower_bound -> ICONST','lower_bound',1,'p_lower_bound','Parser.py',162),
  ('upper_bound -> ICONST','upper_bound',1,'p_upper_bound','Parser.py',165),
  ('discrete_mode_name -> ID','discrete_mode_name',1,'p_discrete_mode_name','Parser.py',169),
  ('reference_mode -> REF mode','reference_mode',2,'p_reference_mode','Parser.py',173),
  ('expression -> operand0','expression',1,'p_expression','Parser.py',184),
  ('operand0 -> operand1','operand0',1,'p_operand0','Parser.py',189),
  ('operand0 -> operand0 operator1 operand1','operand0',3,'p_operand0','Parser.py',190),
  ('operand1 -> operand2','operand1',1,'p_operand1','Parser.py',196),
  ('operand1 -> operand1 operator2 operand2','operand1',3,'p_operand1','Parser.py',197),
  ('operand2 -> operand3','operand2',1,'p_operand2','Parser.py',204),
  ('operand2 -> operand2 arithmetic_multiplicative_operator operand3','operand2',3,'p_operand2','Parser.py',205),
  ('operand3 -> monadic_operator operand4','operand3',2,'p_operand3','Parser.py',214),
  ('operand3 -> operand4','operand3',1,'p_operand3','Parser.py',215),
  ('operand4 -> primitive_value','operand4',1,'p_operand4','Parser.py',224),
  ('arithmetic_multiplicative_operator -> TIMES','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',231),
  ('arithmetic_multiplicative_operator -> DIVIDE','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',232),
  ('arithmetic_multiplicative_operator -> MODULO','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','Parser.py',233),
  ('monadic_operator -> MINUS','monadic_operator',1,'p_monadic_operator','Parser.py',237),
  ('monadic_operator -> NOT','monadic_operator',1,'p_monadic_operator','Parser.py',238),
  ('operator1 -> relational_operator','operator1',1,'p_operator1','Parser.py',243),
  ('operator1 -> membership_operator','operator1',1,'p_operator1','Parser.py',244),
  ('operator2 -> arithmetic_additive_operator','operator2',1,'p_operator2','Parser.py',248),
  ('operator2 -> string_concatenation_operator','operator2',1,'p_operator2','Parser.py',249),
  ('arithmetic_additive_operator -> PLUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','Parser.py',253),
  ('arithmetic_additive_operator -> MINUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','Parser.py',254),
  ('string_concatenation_operator -> CONCAT','string_concatenation_operator',1,'p_string_concatenation_operator','Parser.py',258),
  ('relational_operator -> AND','relational_operator',1,'p_relational_operator','Parser.py',262),
  ('relational_operator -> OR','relational_operator',1,'p_relational_operator','Parser.py',263),
  ('relational_operator -> EQUAL','relational_operator',1,'p_relational_operator','Parser.py',264),
  ('relational_operator -> NOTEQ','relational_operator',1,'p_relational_operator','Parser.py',265),
  ('relational_operator -> GREATER','relational_operator',1,'p_relational_operator','Parser.py',266),
  ('relational_operator -> GTEQUAL','relational_operator',1,'p_relational_operator','Parser.py',267),
  ('relational_operator -> LESS','relational_operator',1,'p_relational_operator','Parser.py',268),
  ('relational_operator -> LTEQUAL','relational_operator',1,'p_relational_operator','Parser.py',269),
  ('membership_operator -> IN','membership_operator',1,'p_membership_operator','Parser.py',273),
  ('primitive_value -> literal','primitive_value',1,'p_primitive_value','Parser.py',284),
  ('literal -> integer_literal','literal',1,'p_literal','Parser.py',288),
  ('literal -> boolean_literal','literal',1,'p_literal','Parser.py',289),
  ('literal -> character_literal','literal',1,'p_literal','Parser.py',290),
  ('literal -> empty_literal','literal',1,'p_literal','Parser.py',291),
  ('literal -> character_string_literal','literal',1,'p_literal','Parser.py',292),
  ('integer_literal -> ICONST','integer_literal',1,'p_integer_literal','Parser.py',295),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','Parser.py',299),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','Parser.py',300),
  ('character_literal -> CCONST','character_literal',1,'p_character_literal','Parser.py',304),
  ('empty_literal -> NULL','empty_literal',1,'p_empty_literal','Parser.py',309),
  ('character_string_literal -> SCONST','character_string_literal',1,'p_character_string_literal','Parser.py',313),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',318),
]
