Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    DO
    LOWER
    RETURN
    LPAREN
    LESS
    NOTEQ
    THEN
    EQUAL
    LBRACKET
    WHILE
    COLON
    TO
    PRINT
    FI
    NULL
    REF
    MINUS
    RPAREN
    TRUE
    SCONST
    BY
    ASC
    READ
    NUM
    GTEQUAL
    PLUS
    ARRAY
    IF
    ASSIGN
    CCONST
    MODULO
    DIVIDE
    FOR
    UPPER
    END
    TIMES
    LOC
    RETURNS
    ABS
    ICONST
    RESULT
    ARROW
    IN
    ELSE
    LTEQUAL
    AND
    DOWN
    FALSE
    GREATER
    TYPE
    CHARS
    OD
    ELSIF
    SYN
    LENGTH
    EXIT
    NOT
    RBRACKET
    PROC
    OR

Grammar

Rule 0     S' -> program
Rule 1     program -> statement statement_nullable
Rule 2     statement_nullable -> statement
Rule 3     statement_nullable -> empty
Rule 4     statement -> declaration_statement
Rule 5     declaration_statement -> DCL declaration_list SEMI
Rule 6     declaration_list -> declaration declaration_append
Rule 7     declaration_append -> COMMA declaration
Rule 8     declaration_append -> empty
Rule 9     declaration -> identifier_list mode
Rule 10    identifier_list -> ID identifier_append
Rule 11    identifier_append -> COMMA ID
Rule 12    identifier_append -> empty
Rule 13    mode -> discrete_mode
Rule 14    discrete_mode -> integer_mode
Rule 15    discrete_mode -> boolean_mode
Rule 16    discrete_mode -> character_mode
Rule 17    integer_mode -> INT
Rule 18    boolean_mode -> BOOL
Rule 19    character_mode -> CHAR
Rule 20    empty -> <empty>

Terminals, with rules where they appear

ABS                  : 
AND                  : 
ARRAY                : 
ARROW                : 
ASC                  : 
ASSIGN               : 
BOOL                 : 18
BY                   : 
CCONST               : 
CHAR                 : 19
CHARS                : 
COLON                : 
COMMA                : 7 11
DCL                  : 5
DIVIDE               : 
DO                   : 
DOWN                 : 
ELSE                 : 
ELSIF                : 
END                  : 
EQUAL                : 
EXIT                 : 
FALSE                : 
FI                   : 
FOR                  : 
GREATER              : 
GTEQUAL              : 
ICONST               : 
ID                   : 10 11
IF                   : 
IN                   : 
INT                  : 17
LBRACKET             : 
LENGTH               : 
LESS                 : 
LOC                  : 
LOWER                : 
LPAREN               : 
LTEQUAL              : 
MINUS                : 
MODULO               : 
NOT                  : 
NOTEQ                : 
NULL                 : 
NUM                  : 
OD                   : 
OR                   : 
PLUS                 : 
PRINT                : 
PROC                 : 
RBRACKET             : 
READ                 : 
REF                  : 
RESULT               : 
RETURN               : 
RETURNS              : 
RPAREN               : 
SCONST               : 
SEMI                 : 5
SYN                  : 
THEN                 : 
TIMES                : 
TO                   : 
TRUE                 : 
TYPE                 : 
UPPER                : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

boolean_mode         : 15
character_mode       : 16
declaration          : 6 7
declaration_append   : 6
declaration_list     : 5
declaration_statement : 4
discrete_mode        : 13
empty                : 3 8 12
identifier_append    : 10
identifier_list      : 9
integer_mode         : 14
mode                 : 9
program              : 0
statement            : 1 2
statement_nullable   : 1

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement statement_nullable
    (4) statement -> . declaration_statement
    (5) declaration_statement -> . DCL declaration_list SEMI

    DCL             shift and go to state 1

    program                        shift and go to state 2
    statement                      shift and go to state 3
    declaration_statement          shift and go to state 4

state 1

    (5) declaration_statement -> DCL . declaration_list SEMI
    (6) declaration_list -> . declaration declaration_append
    (9) declaration -> . identifier_list mode
    (10) identifier_list -> . ID identifier_append

    ID              shift and go to state 8

    declaration_list               shift and go to state 5
    declaration                    shift and go to state 6
    identifier_list                shift and go to state 7

state 2

    (0) S' -> program .



state 3

    (1) program -> statement . statement_nullable
    (2) statement_nullable -> . statement
    (3) statement_nullable -> . empty
    (4) statement -> . declaration_statement
    (20) empty -> .
    (5) declaration_statement -> . DCL declaration_list SEMI

    $end            reduce using rule 20 (empty -> .)
    DCL             shift and go to state 1

    statement_nullable             shift and go to state 9
    empty                          shift and go to state 11
    statement                      shift and go to state 10
    declaration_statement          shift and go to state 4

state 4

    (4) statement -> declaration_statement .

    DCL             reduce using rule 4 (statement -> declaration_statement .)
    $end            reduce using rule 4 (statement -> declaration_statement .)


state 5

    (5) declaration_statement -> DCL declaration_list . SEMI

    SEMI            shift and go to state 12


state 6

    (6) declaration_list -> declaration . declaration_append
    (7) declaration_append -> . COMMA declaration
    (8) declaration_append -> . empty
    (20) empty -> .

    COMMA           shift and go to state 13
    SEMI            reduce using rule 20 (empty -> .)

    declaration_append             shift and go to state 14
    empty                          shift and go to state 15

state 7

    (9) declaration -> identifier_list . mode
    (13) mode -> . discrete_mode
    (14) discrete_mode -> . integer_mode
    (15) discrete_mode -> . boolean_mode
    (16) discrete_mode -> . character_mode
    (17) integer_mode -> . INT
    (18) boolean_mode -> . BOOL
    (19) character_mode -> . CHAR

    INT             shift and go to state 16
    BOOL            shift and go to state 23
    CHAR            shift and go to state 19

    boolean_mode                   shift and go to state 17
    character_mode                 shift and go to state 18
    integer_mode                   shift and go to state 20
    mode                           shift and go to state 21
    discrete_mode                  shift and go to state 22

state 8

    (10) identifier_list -> ID . identifier_append
    (11) identifier_append -> . COMMA ID
    (12) identifier_append -> . empty
    (20) empty -> .

    COMMA           shift and go to state 24
    INT             reduce using rule 20 (empty -> .)
    BOOL            reduce using rule 20 (empty -> .)
    CHAR            reduce using rule 20 (empty -> .)

    identifier_append              shift and go to state 26
    empty                          shift and go to state 25

state 9

    (1) program -> statement statement_nullable .

    $end            reduce using rule 1 (program -> statement statement_nullable .)


state 10

    (2) statement_nullable -> statement .

    $end            reduce using rule 2 (statement_nullable -> statement .)


state 11

    (3) statement_nullable -> empty .

    $end            reduce using rule 3 (statement_nullable -> empty .)


state 12

    (5) declaration_statement -> DCL declaration_list SEMI .

    $end            reduce using rule 5 (declaration_statement -> DCL declaration_list SEMI .)
    DCL             reduce using rule 5 (declaration_statement -> DCL declaration_list SEMI .)


state 13

    (7) declaration_append -> COMMA . declaration
    (9) declaration -> . identifier_list mode
    (10) identifier_list -> . ID identifier_append

    ID              shift and go to state 8

    identifier_list                shift and go to state 7
    declaration                    shift and go to state 27

state 14

    (6) declaration_list -> declaration declaration_append .

    SEMI            reduce using rule 6 (declaration_list -> declaration declaration_append .)


state 15

    (8) declaration_append -> empty .

    SEMI            reduce using rule 8 (declaration_append -> empty .)


state 16

    (17) integer_mode -> INT .

    COMMA           reduce using rule 17 (integer_mode -> INT .)
    SEMI            reduce using rule 17 (integer_mode -> INT .)


state 17

    (15) discrete_mode -> boolean_mode .

    COMMA           reduce using rule 15 (discrete_mode -> boolean_mode .)
    SEMI            reduce using rule 15 (discrete_mode -> boolean_mode .)


state 18

    (16) discrete_mode -> character_mode .

    COMMA           reduce using rule 16 (discrete_mode -> character_mode .)
    SEMI            reduce using rule 16 (discrete_mode -> character_mode .)


state 19

    (19) character_mode -> CHAR .

    COMMA           reduce using rule 19 (character_mode -> CHAR .)
    SEMI            reduce using rule 19 (character_mode -> CHAR .)


state 20

    (14) discrete_mode -> integer_mode .

    COMMA           reduce using rule 14 (discrete_mode -> integer_mode .)
    SEMI            reduce using rule 14 (discrete_mode -> integer_mode .)


state 21

    (9) declaration -> identifier_list mode .

    COMMA           reduce using rule 9 (declaration -> identifier_list mode .)
    SEMI            reduce using rule 9 (declaration -> identifier_list mode .)


state 22

    (13) mode -> discrete_mode .

    COMMA           reduce using rule 13 (mode -> discrete_mode .)
    SEMI            reduce using rule 13 (mode -> discrete_mode .)


state 23

    (18) boolean_mode -> BOOL .

    COMMA           reduce using rule 18 (boolean_mode -> BOOL .)
    SEMI            reduce using rule 18 (boolean_mode -> BOOL .)


state 24

    (11) identifier_append -> COMMA . ID

    ID              shift and go to state 28


state 25

    (12) identifier_append -> empty .

    INT             reduce using rule 12 (identifier_append -> empty .)
    BOOL            reduce using rule 12 (identifier_append -> empty .)
    CHAR            reduce using rule 12 (identifier_append -> empty .)


state 26

    (10) identifier_list -> ID identifier_append .

    INT             reduce using rule 10 (identifier_list -> ID identifier_append .)
    BOOL            reduce using rule 10 (identifier_list -> ID identifier_append .)
    CHAR            reduce using rule 10 (identifier_list -> ID identifier_append .)


state 27

    (7) declaration_append -> COMMA declaration .

    SEMI            reduce using rule 7 (declaration_append -> COMMA declaration .)


state 28

    (11) identifier_append -> COMMA ID .

    INT             reduce using rule 11 (identifier_append -> COMMA ID .)
    BOOL            reduce using rule 11 (identifier_append -> COMMA ID .)
    CHAR            reduce using rule 11 (identifier_append -> COMMA ID .)

