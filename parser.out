Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Unused terminals:

    LOWER
    READ
    END
    THEN
    LOC
    LENGTH
    OD
    DOWN
    IF
    DO
    FOR
    ASC
    FI
    ABS
    NUM
    BY
    TO
    RETURNS
    PRINT
    RESULT
    RETURN
    EXIT
    WHILE
    ELSIF
    ELSE
    UPPER
    PROC

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement statement_nullable
Rule 3     statement_nullable -> statement statement_nullable
Rule 4     statement_nullable -> empty
Rule 5     statement -> declaration_statement
Rule 6     statement -> synonym_statement
Rule 7     statement -> newmode_statement
Rule 8     synonym_statement -> SYN synonym_list SEMI
Rule 9     synonym_list -> synonym_definition
Rule 10    synonym_list -> synonym_definition COMMA synonym_list
Rule 11    synonym_definition -> identifier_list mode ASSIGN expression
Rule 12    synonym_definition -> identifier_list ASSIGN expression
Rule 13    declaration_statement -> DCL declaration_list SEMI
Rule 14    declaration_list -> declaration
Rule 15    declaration_list -> declaration COMMA declaration_list
Rule 16    declaration -> identifier_list mode initialization
Rule 17    declaration -> identifier_list mode
Rule 18    initialization -> ASSIGN expression
Rule 19    identifier_list -> ID
Rule 20    identifier_list -> ID COMMA identifier_list
Rule 21    newmode_statement -> TYPE newmode_list SEMI
Rule 22    newmode_list -> mode_definition
Rule 23    newmode_list -> mode_definition COMMA newmode_list
Rule 24    mode_definition -> identifier_list ASSIGN mode
Rule 25    mode -> mode_name
Rule 26    mode -> discrete_mode
Rule 27    mode -> reference_mode
Rule 28    mode -> composite_mode
Rule 29    mode_name -> ID
Rule 30    discrete_mode -> integer_mode
Rule 31    discrete_mode -> boolean_mode
Rule 32    discrete_mode -> character_mode
Rule 33    discrete_mode -> discrete_range_mode
Rule 34    discrete_mode_name -> ID
Rule 35    integer_mode -> INT
Rule 36    boolean_mode -> BOOL
Rule 37    character_mode -> CHAR
Rule 38    discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN
Rule 39    discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN
Rule 40    literal_range -> lower_bound COLON upper_bound
Rule 41    lower_bound -> expression
Rule 42    upper_bound -> expression
Rule 43    reference_mode -> REF mode
Rule 44    composite_mode -> string_mode
Rule 45    composite_mode -> array_mode
Rule 46    string_mode -> CHARS LBRACKET string_length RBRACKET
Rule 47    string_length -> integer_literal
Rule 48    array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode
Rule 49    index_mode_list -> index_mode
Rule 50    index_mode_list -> index_mode COMMA index_mode_list
Rule 51    index_mode -> discrete_mode
Rule 52    index_mode -> literal_range
Rule 53    element_mode -> mode
Rule 54    location -> ID
Rule 55    location -> dereferenced_reference
Rule 56    location -> string_element
Rule 57    location -> string_slice
Rule 58    location -> array_element
Rule 59    location -> array_slice
Rule 60    dereferenced_reference -> location ARROW
Rule 61    string_element -> string_location LBRACKET start_element LBRACKET
Rule 62    start_element -> expression
Rule 63    string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET
Rule 64    string_location -> ID
Rule 65    left_element -> expression
Rule 66    right_element -> expression
Rule 67    array_element -> array_location LBRACKET expression_list RBRACKET
Rule 68    expression_list -> expression
Rule 69    expression_list -> expression COMMA expression_list
Rule 70    array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET
Rule 71    array_location -> location
Rule 72    expression -> operand0
Rule 73    operand0 -> operand1
Rule 74    operand0 -> operand0 operator1 operand1
Rule 75    operand1 -> operand2
Rule 76    operand1 -> operand1 operator2 operand2
Rule 77    operand2 -> operand3
Rule 78    operand2 -> operand2 arithmetic_multiplicative_operator operand3
Rule 79    operand3 -> monadic_operator operand4
Rule 80    operand3 -> operand4
Rule 81    operand4 -> primitive_value
Rule 82    operand4 -> location
Rule 83    arithmetic_multiplicative_operator -> TIMES
Rule 84    arithmetic_multiplicative_operator -> DIVIDE
Rule 85    arithmetic_multiplicative_operator -> MODULO
Rule 86    monadic_operator -> MINUS
Rule 87    monadic_operator -> NOT
Rule 88    operator1 -> relational_operator
Rule 89    operator1 -> membership_operator
Rule 90    operator2 -> arithmetic_additive_operator
Rule 91    operator2 -> string_concatenation_operator
Rule 92    arithmetic_additive_operator -> PLUS
Rule 93    arithmetic_additive_operator -> MINUS
Rule 94    string_concatenation_operator -> CONCAT
Rule 95    relational_operator -> AND
Rule 96    relational_operator -> OR
Rule 97    relational_operator -> EQUAL
Rule 98    relational_operator -> NOTEQ
Rule 99    relational_operator -> GREATER
Rule 100   relational_operator -> GTEQUAL
Rule 101   relational_operator -> LESS
Rule 102   relational_operator -> LTEQUAL
Rule 103   membership_operator -> IN
Rule 104   primitive_value -> literal
Rule 105   literal -> integer_literal
Rule 106   literal -> boolean_literal
Rule 107   literal -> character_literal
Rule 108   literal -> empty_literal
Rule 109   literal -> character_string_literal
Rule 110   integer_literal -> ICONST
Rule 111   boolean_literal -> TRUE
Rule 112   boolean_literal -> FALSE
Rule 113   character_literal -> CCONST
Rule 114   empty_literal -> NULL
Rule 115   character_string_literal -> SCONST
Rule 116   empty -> <empty>

Terminals, with rules where they appear

ABS                  : 
AND                  : 95
ARRAY                : 48
ARROW                : 60
ASC                  : 
ASSIGN               : 11 12 18 24
BOOL                 : 36
BY                   : 
CCONST               : 113
CHAR                 : 37
CHARS                : 46
COLON                : 40 63 70
COMMA                : 10 15 20 23 50 69
CONCAT               : 94
DCL                  : 13
DIVIDE               : 84
DO                   : 
DOWN                 : 
ELSE                 : 
ELSIF                : 
END                  : 
EQUAL                : 97
EXIT                 : 
FALSE                : 112
FI                   : 
FOR                  : 
GREATER              : 99
GTEQUAL              : 100
ICONST               : 110
ID                   : 19 20 29 34 54 64
IF                   : 
IN                   : 103
INT                  : 35
LBRACKET             : 46 48 61 61 63 67 70
LENGTH               : 
LESS                 : 101
LOC                  : 
LOWER                : 
LPAREN               : 38 39
LTEQUAL              : 102
MINUS                : 86 93
MODULO               : 85
NOT                  : 87
NOTEQ                : 98
NULL                 : 114
NUM                  : 
OD                   : 
OR                   : 96
PLUS                 : 92
PRINT                : 
PROC                 : 
RBRACKET             : 46 48 63 67 70
READ                 : 
REF                  : 43
RESULT               : 
RETURN               : 
RETURNS              : 
RPAREN               : 38 39
SCONST               : 115
SEMI                 : 8 13 21
SYN                  : 8
THEN                 : 
TIMES                : 83
TO                   : 
TRUE                 : 111
TYPE                 : 21
UPPER                : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

arithmetic_additive_operator : 90
arithmetic_multiplicative_operator : 78
array_element        : 58
array_location       : 67 70
array_mode           : 45
array_slice          : 59
boolean_literal      : 106
boolean_mode         : 31
character_literal    : 107
character_mode       : 32
character_string_literal : 109
composite_mode       : 28
declaration          : 14 15
declaration_list     : 13 15
declaration_statement : 5
dereferenced_reference : 55
discrete_mode        : 26 39 51
discrete_mode_name   : 38
discrete_range_mode  : 33
element_mode         : 48
empty                : 4
empty_literal        : 108
expression           : 11 12 18 41 42 62 65 66 68 69
expression_list      : 67 69
identifier_list      : 11 12 16 17 20 24
index_mode           : 49 50
index_mode_list      : 48 50
initialization       : 16
integer_literal      : 47 105
integer_mode         : 30
left_element         : 63
literal              : 104
literal_range        : 38 39 52
location             : 60 71 82
lower_bound          : 40 70
membership_operator  : 89
mode                 : 11 16 17 24 43 53
mode_definition      : 22 23
mode_name            : 25
monadic_operator     : 79
newmode_list         : 21 23
newmode_statement    : 7
operand0             : 72 74
operand1             : 73 74 76
operand2             : 75 76 78
operand3             : 77 78
operand4             : 79 80
operator1            : 74
operator2            : 76
primitive_value      : 81
program              : 0
reference_mode       : 27
relational_operator  : 88
right_element        : 63
start_element        : 61
statement            : 2 3
statement_list       : 1
statement_nullable   : 2 3
string_concatenation_operator : 91
string_element       : 56
string_length        : 46
string_location      : 61 63
string_mode          : 44
string_slice         : 57
synonym_definition   : 9 10
synonym_list         : 8 10
synonym_statement    : 6
upper_bound          : 40 70

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement statement_nullable
    (5) statement -> . declaration_statement
    (6) statement -> . synonym_statement
    (7) statement -> . newmode_statement
    (13) declaration_statement -> . DCL declaration_list SEMI
    (8) synonym_statement -> . SYN synonym_list SEMI
    (21) newmode_statement -> . TYPE newmode_list SEMI

    DCL             shift and go to state 9
    SYN             shift and go to state 7
    TYPE            shift and go to state 8

    statement_list                 shift and go to state 5
    program                        shift and go to state 6
    statement                      shift and go to state 2
    declaration_statement          shift and go to state 3
    newmode_statement              shift and go to state 1
    synonym_statement              shift and go to state 4

state 1

    (7) statement -> newmode_statement .

    DCL             reduce using rule 7 (statement -> newmode_statement .)
    SYN             reduce using rule 7 (statement -> newmode_statement .)
    TYPE            reduce using rule 7 (statement -> newmode_statement .)
    $end            reduce using rule 7 (statement -> newmode_statement .)


state 2

    (2) statement_list -> statement . statement_nullable
    (3) statement_nullable -> . statement statement_nullable
    (4) statement_nullable -> . empty
    (5) statement -> . declaration_statement
    (6) statement -> . synonym_statement
    (7) statement -> . newmode_statement
    (116) empty -> .
    (13) declaration_statement -> . DCL declaration_list SEMI
    (8) synonym_statement -> . SYN synonym_list SEMI
    (21) newmode_statement -> . TYPE newmode_list SEMI

    $end            reduce using rule 116 (empty -> .)
    DCL             shift and go to state 9
    SYN             shift and go to state 7
    TYPE            shift and go to state 8

    statement_nullable             shift and go to state 12
    statement                      shift and go to state 10
    declaration_statement          shift and go to state 3
    newmode_statement              shift and go to state 1
    empty                          shift and go to state 11
    synonym_statement              shift and go to state 4

state 3

    (5) statement -> declaration_statement .

    DCL             reduce using rule 5 (statement -> declaration_statement .)
    SYN             reduce using rule 5 (statement -> declaration_statement .)
    TYPE            reduce using rule 5 (statement -> declaration_statement .)
    $end            reduce using rule 5 (statement -> declaration_statement .)


state 4

    (6) statement -> synonym_statement .

    DCL             reduce using rule 6 (statement -> synonym_statement .)
    SYN             reduce using rule 6 (statement -> synonym_statement .)
    TYPE            reduce using rule 6 (statement -> synonym_statement .)
    $end            reduce using rule 6 (statement -> synonym_statement .)


state 5

    (1) program -> statement_list .

    $end            reduce using rule 1 (program -> statement_list .)


state 6

    (0) S' -> program .



state 7

    (8) synonym_statement -> SYN . synonym_list SEMI
    (9) synonym_list -> . synonym_definition
    (10) synonym_list -> . synonym_definition COMMA synonym_list
    (11) synonym_definition -> . identifier_list mode ASSIGN expression
    (12) synonym_definition -> . identifier_list ASSIGN expression
    (19) identifier_list -> . ID
    (20) identifier_list -> . ID COMMA identifier_list

    ID              shift and go to state 13

    synonym_list                   shift and go to state 16
    synonym_definition             shift and go to state 14
    identifier_list                shift and go to state 15

state 8

    (21) newmode_statement -> TYPE . newmode_list SEMI
    (22) newmode_list -> . mode_definition
    (23) newmode_list -> . mode_definition COMMA newmode_list
    (24) mode_definition -> . identifier_list ASSIGN mode
    (19) identifier_list -> . ID
    (20) identifier_list -> . ID COMMA identifier_list

    ID              shift and go to state 13

    mode_definition                shift and go to state 17
    newmode_list                   shift and go to state 18
    identifier_list                shift and go to state 19

state 9

    (13) declaration_statement -> DCL . declaration_list SEMI
    (14) declaration_list -> . declaration
    (15) declaration_list -> . declaration COMMA declaration_list
    (16) declaration -> . identifier_list mode initialization
    (17) declaration -> . identifier_list mode
    (19) identifier_list -> . ID
    (20) identifier_list -> . ID COMMA identifier_list

    ID              shift and go to state 13

    declaration_list               shift and go to state 22
    declaration                    shift and go to state 20
    identifier_list                shift and go to state 21

state 10

    (3) statement_nullable -> statement . statement_nullable
    (3) statement_nullable -> . statement statement_nullable
    (4) statement_nullable -> . empty
    (5) statement -> . declaration_statement
    (6) statement -> . synonym_statement
    (7) statement -> . newmode_statement
    (116) empty -> .
    (13) declaration_statement -> . DCL declaration_list SEMI
    (8) synonym_statement -> . SYN synonym_list SEMI
    (21) newmode_statement -> . TYPE newmode_list SEMI

    $end            reduce using rule 116 (empty -> .)
    DCL             shift and go to state 9
    SYN             shift and go to state 7
    TYPE            shift and go to state 8

    statement_nullable             shift and go to state 23
    statement                      shift and go to state 10
    declaration_statement          shift and go to state 3
    newmode_statement              shift and go to state 1
    empty                          shift and go to state 11
    synonym_statement              shift and go to state 4

state 11

    (4) statement_nullable -> empty .

    $end            reduce using rule 4 (statement_nullable -> empty .)


state 12

    (2) statement_list -> statement statement_nullable .

    $end            reduce using rule 2 (statement_list -> statement statement_nullable .)


state 13

    (19) identifier_list -> ID .
    (20) identifier_list -> ID . COMMA identifier_list

    ASSIGN          reduce using rule 19 (identifier_list -> ID .)
    ID              reduce using rule 19 (identifier_list -> ID .)
    REF             reduce using rule 19 (identifier_list -> ID .)
    INT             reduce using rule 19 (identifier_list -> ID .)
    BOOL            reduce using rule 19 (identifier_list -> ID .)
    CHAR            reduce using rule 19 (identifier_list -> ID .)
    CHARS           reduce using rule 19 (identifier_list -> ID .)
    ARRAY           reduce using rule 19 (identifier_list -> ID .)
    COMMA           shift and go to state 24


state 14

    (9) synonym_list -> synonym_definition .
    (10) synonym_list -> synonym_definition . COMMA synonym_list

    SEMI            reduce using rule 9 (synonym_list -> synonym_definition .)
    COMMA           shift and go to state 25


state 15

    (11) synonym_definition -> identifier_list . mode ASSIGN expression
    (12) synonym_definition -> identifier_list . ASSIGN expression
    (25) mode -> . mode_name
    (26) mode -> . discrete_mode
    (27) mode -> . reference_mode
    (28) mode -> . composite_mode
    (29) mode_name -> . ID
    (30) discrete_mode -> . integer_mode
    (31) discrete_mode -> . boolean_mode
    (32) discrete_mode -> . character_mode
    (33) discrete_mode -> . discrete_range_mode
    (43) reference_mode -> . REF mode
    (44) composite_mode -> . string_mode
    (45) composite_mode -> . array_mode
    (35) integer_mode -> . INT
    (36) boolean_mode -> . BOOL
    (37) character_mode -> . CHAR
    (38) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (39) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (46) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (48) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (34) discrete_mode_name -> . ID

    ASSIGN          shift and go to state 27
    ID              shift and go to state 37
    REF             shift and go to state 43
    INT             shift and go to state 38
    BOOL            shift and go to state 29
    CHAR            shift and go to state 28
    CHARS           shift and go to state 31
    ARRAY           shift and go to state 35

    composite_mode                 shift and go to state 26
    boolean_mode                   shift and go to state 36
    discrete_mode_name             shift and go to state 44
    string_mode                    shift and go to state 39
    array_mode                     shift and go to state 40
    mode_name                      shift and go to state 30
    reference_mode                 shift and go to state 41
    character_mode                 shift and go to state 42
    discrete_mode                  shift and go to state 32
    integer_mode                   shift and go to state 33
    discrete_range_mode            shift and go to state 34
    mode                           shift and go to state 45

state 16

    (8) synonym_statement -> SYN synonym_list . SEMI

    SEMI            shift and go to state 46


state 17

    (22) newmode_list -> mode_definition .
    (23) newmode_list -> mode_definition . COMMA newmode_list

    SEMI            reduce using rule 22 (newmode_list -> mode_definition .)
    COMMA           shift and go to state 47


state 18

    (21) newmode_statement -> TYPE newmode_list . SEMI

    SEMI            shift and go to state 48


state 19

    (24) mode_definition -> identifier_list . ASSIGN mode

    ASSIGN          shift and go to state 49


state 20

    (14) declaration_list -> declaration .
    (15) declaration_list -> declaration . COMMA declaration_list

    SEMI            reduce using rule 14 (declaration_list -> declaration .)
    COMMA           shift and go to state 50


state 21

    (16) declaration -> identifier_list . mode initialization
    (17) declaration -> identifier_list . mode
    (25) mode -> . mode_name
    (26) mode -> . discrete_mode
    (27) mode -> . reference_mode
    (28) mode -> . composite_mode
    (29) mode_name -> . ID
    (30) discrete_mode -> . integer_mode
    (31) discrete_mode -> . boolean_mode
    (32) discrete_mode -> . character_mode
    (33) discrete_mode -> . discrete_range_mode
    (43) reference_mode -> . REF mode
    (44) composite_mode -> . string_mode
    (45) composite_mode -> . array_mode
    (35) integer_mode -> . INT
    (36) boolean_mode -> . BOOL
    (37) character_mode -> . CHAR
    (38) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (39) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (46) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (48) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (34) discrete_mode_name -> . ID

    ID              shift and go to state 37
    REF             shift and go to state 43
    INT             shift and go to state 38
    BOOL            shift and go to state 29
    CHAR            shift and go to state 28
    CHARS           shift and go to state 31
    ARRAY           shift and go to state 35

    composite_mode                 shift and go to state 26
    boolean_mode                   shift and go to state 36
    string_mode                    shift and go to state 39
    array_mode                     shift and go to state 40
    discrete_mode_name             shift and go to state 44
    mode_name                      shift and go to state 30
    reference_mode                 shift and go to state 41
    character_mode                 shift and go to state 42
    discrete_mode                  shift and go to state 32
    integer_mode                   shift and go to state 33
    discrete_range_mode            shift and go to state 34
    mode                           shift and go to state 51

state 22

    (13) declaration_statement -> DCL declaration_list . SEMI

    SEMI            shift and go to state 52


state 23

    (3) statement_nullable -> statement statement_nullable .

    $end            reduce using rule 3 (statement_nullable -> statement statement_nullable .)


state 24

    (20) identifier_list -> ID COMMA . identifier_list
    (19) identifier_list -> . ID
    (20) identifier_list -> . ID COMMA identifier_list

    ID              shift and go to state 13

    identifier_list                shift and go to state 53

state 25

    (10) synonym_list -> synonym_definition COMMA . synonym_list
    (9) synonym_list -> . synonym_definition
    (10) synonym_list -> . synonym_definition COMMA synonym_list
    (11) synonym_definition -> . identifier_list mode ASSIGN expression
    (12) synonym_definition -> . identifier_list ASSIGN expression
    (19) identifier_list -> . ID
    (20) identifier_list -> . ID COMMA identifier_list

    ID              shift and go to state 13

    synonym_definition             shift and go to state 14
    synonym_list                   shift and go to state 54
    identifier_list                shift and go to state 15

state 26

    (28) mode -> composite_mode .

    COMMA           reduce using rule 28 (mode -> composite_mode .)
    SEMI            reduce using rule 28 (mode -> composite_mode .)
    ASSIGN          reduce using rule 28 (mode -> composite_mode .)


state 27

    (12) synonym_definition -> identifier_list ASSIGN . expression
    (72) expression -> . operand0
    (73) operand0 -> . operand1
    (74) operand0 -> . operand0 operator1 operand1
    (75) operand1 -> . operand2
    (76) operand1 -> . operand1 operator2 operand2
    (77) operand2 -> . operand3
    (78) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (79) operand3 -> . monadic_operator operand4
    (80) operand3 -> . operand4
    (86) monadic_operator -> . MINUS
    (87) monadic_operator -> . NOT
    (81) operand4 -> . primitive_value
    (82) operand4 -> . location
    (104) primitive_value -> . literal
    (54) location -> . ID
    (55) location -> . dereferenced_reference
    (56) location -> . string_element
    (57) location -> . string_slice
    (58) location -> . array_element
    (59) location -> . array_slice
    (105) literal -> . integer_literal
    (106) literal -> . boolean_literal
    (107) literal -> . character_literal
    (108) literal -> . empty_literal
    (109) literal -> . character_string_literal
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . string_location LBRACKET start_element LBRACKET
    (63) string_slice -> . string_location LBRACKET left_element COLON right_element RBRACKET
    (67) array_element -> . array_location LBRACKET expression_list RBRACKET
    (70) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (110) integer_literal -> . ICONST
    (111) boolean_literal -> . TRUE
    (112) boolean_literal -> . FALSE
    (113) character_literal -> . CCONST
    (114) empty_literal -> . NULL
    (115) character_string_literal -> . SCONST
    (64) string_location -> . ID
    (71) array_location -> . location

    MINUS           shift and go to state 83
    NOT             shift and go to state 67
    ID              shift and go to state 61
    ICONST          shift and go to state 57
    TRUE            shift and go to state 79
    FALSE           shift and go to state 71
    CCONST          shift and go to state 60
    NULL            shift and go to state 76
    SCONST          shift and go to state 64

    operand1                       shift and go to state 68
    character_string_literal       shift and go to state 80
    monadic_operator               shift and go to state 65
    string_slice                   shift and go to state 55
    boolean_literal                shift and go to state 75
    empty_literal                  shift and go to state 70
    primitive_value                shift and go to state 56
    array_location                 shift and go to state 73
    array_element                  shift and go to state 74
    string_location                shift and go to state 62
    operand2                       shift and go to state 69
    dereferenced_reference         shift and go to state 59
    operand0                       shift and go to state 77
    operand3                       shift and go to state 63
    string_element                 shift and go to state 78
    integer_literal                shift and go to state 66
    operand4                       shift and go to state 81
    expression                     shift and go to state 82
    literal                        shift and go to state 58
    array_slice                    shift and go to state 84
    location                       shift and go to state 85
    character_literal              shift and go to state 72

state 28

    (37) character_mode -> CHAR .

    LPAREN          reduce using rule 37 (character_mode -> CHAR .)
    ASSIGN          reduce using rule 37 (character_mode -> CHAR .)
    COMMA           reduce using rule 37 (character_mode -> CHAR .)
    SEMI            reduce using rule 37 (character_mode -> CHAR .)
    RBRACKET        reduce using rule 37 (character_mode -> CHAR .)


state 29

    (36) boolean_mode -> BOOL .

    LPAREN          reduce using rule 36 (boolean_mode -> BOOL .)
    ASSIGN          reduce using rule 36 (boolean_mode -> BOOL .)
    COMMA           reduce using rule 36 (boolean_mode -> BOOL .)
    SEMI            reduce using rule 36 (boolean_mode -> BOOL .)
    RBRACKET        reduce using rule 36 (boolean_mode -> BOOL .)


state 30

    (25) mode -> mode_name .

    COMMA           reduce using rule 25 (mode -> mode_name .)
    SEMI            reduce using rule 25 (mode -> mode_name .)
    ASSIGN          reduce using rule 25 (mode -> mode_name .)


state 31

    (46) string_mode -> CHARS . LBRACKET string_length RBRACKET

    LBRACKET        shift and go to state 86


state 32

    (26) mode -> discrete_mode .
    (39) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    COMMA           reduce using rule 26 (mode -> discrete_mode .)
    SEMI            reduce using rule 26 (mode -> discrete_mode .)
    ASSIGN          reduce using rule 26 (mode -> discrete_mode .)
    LPAREN          shift and go to state 87


state 33

    (30) discrete_mode -> integer_mode .

    LPAREN          reduce using rule 30 (discrete_mode -> integer_mode .)
    COMMA           reduce using rule 30 (discrete_mode -> integer_mode .)
    RBRACKET        reduce using rule 30 (discrete_mode -> integer_mode .)
    ASSIGN          reduce using rule 30 (discrete_mode -> integer_mode .)
    SEMI            reduce using rule 30 (discrete_mode -> integer_mode .)


state 34

    (33) discrete_mode -> discrete_range_mode .

    LPAREN          reduce using rule 33 (discrete_mode -> discrete_range_mode .)
    COMMA           reduce using rule 33 (discrete_mode -> discrete_range_mode .)
    RBRACKET        reduce using rule 33 (discrete_mode -> discrete_range_mode .)
    ASSIGN          reduce using rule 33 (discrete_mode -> discrete_range_mode .)
    SEMI            reduce using rule 33 (discrete_mode -> discrete_range_mode .)


state 35

    (48) array_mode -> ARRAY . LBRACKET index_mode_list RBRACKET element_mode

    LBRACKET        shift and go to state 88


state 36

    (31) discrete_mode -> boolean_mode .

    LPAREN          reduce using rule 31 (discrete_mode -> boolean_mode .)
    COMMA           reduce using rule 31 (discrete_mode -> boolean_mode .)
    RBRACKET        reduce using rule 31 (discrete_mode -> boolean_mode .)
    ASSIGN          reduce using rule 31 (discrete_mode -> boolean_mode .)
    SEMI            reduce using rule 31 (discrete_mode -> boolean_mode .)


state 37

    (29) mode_name -> ID .
    (34) discrete_mode_name -> ID .

    ASSIGN          reduce using rule 29 (mode_name -> ID .)
    COMMA           reduce using rule 29 (mode_name -> ID .)
    SEMI            reduce using rule 29 (mode_name -> ID .)
    LPAREN          reduce using rule 34 (discrete_mode_name -> ID .)


state 38

    (35) integer_mode -> INT .

    LPAREN          reduce using rule 35 (integer_mode -> INT .)
    ASSIGN          reduce using rule 35 (integer_mode -> INT .)
    COMMA           reduce using rule 35 (integer_mode -> INT .)
    SEMI            reduce using rule 35 (integer_mode -> INT .)
    RBRACKET        reduce using rule 35 (integer_mode -> INT .)


state 39

    (44) composite_mode -> string_mode .

    ASSIGN          reduce using rule 44 (composite_mode -> string_mode .)
    COMMA           reduce using rule 44 (composite_mode -> string_mode .)
    SEMI            reduce using rule 44 (composite_mode -> string_mode .)


state 40

    (45) composite_mode -> array_mode .

    ASSIGN          reduce using rule 45 (composite_mode -> array_mode .)
    COMMA           reduce using rule 45 (composite_mode -> array_mode .)
    SEMI            reduce using rule 45 (composite_mode -> array_mode .)


state 41

    (27) mode -> reference_mode .

    COMMA           reduce using rule 27 (mode -> reference_mode .)
    SEMI            reduce using rule 27 (mode -> reference_mode .)
    ASSIGN          reduce using rule 27 (mode -> reference_mode .)


state 42

    (32) discrete_mode -> character_mode .

    LPAREN          reduce using rule 32 (discrete_mode -> character_mode .)
    COMMA           reduce using rule 32 (discrete_mode -> character_mode .)
    RBRACKET        reduce using rule 32 (discrete_mode -> character_mode .)
    ASSIGN          reduce using rule 32 (discrete_mode -> character_mode .)
    SEMI            reduce using rule 32 (discrete_mode -> character_mode .)


state 43

    (43) reference_mode -> REF . mode
    (25) mode -> . mode_name
    (26) mode -> . discrete_mode
    (27) mode -> . reference_mode
    (28) mode -> . composite_mode
    (29) mode_name -> . ID
    (30) discrete_mode -> . integer_mode
    (31) discrete_mode -> . boolean_mode
    (32) discrete_mode -> . character_mode
    (33) discrete_mode -> . discrete_range_mode
    (43) reference_mode -> . REF mode
    (44) composite_mode -> . string_mode
    (45) composite_mode -> . array_mode
    (35) integer_mode -> . INT
    (36) boolean_mode -> . BOOL
    (37) character_mode -> . CHAR
    (38) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (39) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (46) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (48) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (34) discrete_mode_name -> . ID

    ID              shift and go to state 37
    REF             shift and go to state 43
    INT             shift and go to state 38
    BOOL            shift and go to state 29
    CHAR            shift and go to state 28
    CHARS           shift and go to state 31
    ARRAY           shift and go to state 35

    composite_mode                 shift and go to state 26
    boolean_mode                   shift and go to state 36
    string_mode                    shift and go to state 39
    array_mode                     shift and go to state 40
    discrete_mode_name             shift and go to state 44
    mode_name                      shift and go to state 30
    reference_mode                 shift and go to state 41
    character_mode                 shift and go to state 42
    discrete_mode                  shift and go to state 32
    integer_mode                   shift and go to state 33
    discrete_range_mode            shift and go to state 34
    mode                           shift and go to state 89

state 44

    (38) discrete_range_mode -> discrete_mode_name . LPAREN literal_range RPAREN

    LPAREN          shift and go to state 90


state 45

    (11) synonym_definition -> identifier_list mode . ASSIGN expression

    ASSIGN          shift and go to state 91


state 46

    (8) synonym_statement -> SYN synonym_list SEMI .

    DCL             reduce using rule 8 (synonym_statement -> SYN synonym_list SEMI .)
    SYN             reduce using rule 8 (synonym_statement -> SYN synonym_list SEMI .)
    TYPE            reduce using rule 8 (synonym_statement -> SYN synonym_list SEMI .)
    $end            reduce using rule 8 (synonym_statement -> SYN synonym_list SEMI .)


state 47

    (23) newmode_list -> mode_definition COMMA . newmode_list
    (22) newmode_list -> . mode_definition
    (23) newmode_list -> . mode_definition COMMA newmode_list
    (24) mode_definition -> . identifier_list ASSIGN mode
    (19) identifier_list -> . ID
    (20) identifier_list -> . ID COMMA identifier_list

    ID              shift and go to state 13

    mode_definition                shift and go to state 17
    newmode_list                   shift and go to state 92
    identifier_list                shift and go to state 19

state 48

    (21) newmode_statement -> TYPE newmode_list SEMI .

    DCL             reduce using rule 21 (newmode_statement -> TYPE newmode_list SEMI .)
    SYN             reduce using rule 21 (newmode_statement -> TYPE newmode_list SEMI .)
    TYPE            reduce using rule 21 (newmode_statement -> TYPE newmode_list SEMI .)
    $end            reduce using rule 21 (newmode_statement -> TYPE newmode_list SEMI .)


state 49

    (24) mode_definition -> identifier_list ASSIGN . mode
    (25) mode -> . mode_name
    (26) mode -> . discrete_mode
    (27) mode -> . reference_mode
    (28) mode -> . composite_mode
    (29) mode_name -> . ID
    (30) discrete_mode -> . integer_mode
    (31) discrete_mode -> . boolean_mode
    (32) discrete_mode -> . character_mode
    (33) discrete_mode -> . discrete_range_mode
    (43) reference_mode -> . REF mode
    (44) composite_mode -> . string_mode
    (45) composite_mode -> . array_mode
    (35) integer_mode -> . INT
    (36) boolean_mode -> . BOOL
    (37) character_mode -> . CHAR
    (38) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (39) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (46) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (48) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (34) discrete_mode_name -> . ID

    ID              shift and go to state 37
    REF             shift and go to state 43
    INT             shift and go to state 38
    BOOL            shift and go to state 29
    CHAR            shift and go to state 28
    CHARS           shift and go to state 31
    ARRAY           shift and go to state 35

    composite_mode                 shift and go to state 26
    boolean_mode                   shift and go to state 36
    string_mode                    shift and go to state 39
    array_mode                     shift and go to state 40
    discrete_mode_name             shift and go to state 44
    mode_name                      shift and go to state 30
    reference_mode                 shift and go to state 41
    character_mode                 shift and go to state 42
    discrete_mode                  shift and go to state 32
    integer_mode                   shift and go to state 33
    discrete_range_mode            shift and go to state 34
    mode                           shift and go to state 93

state 50

    (15) declaration_list -> declaration COMMA . declaration_list
    (14) declaration_list -> . declaration
    (15) declaration_list -> . declaration COMMA declaration_list
    (16) declaration -> . identifier_list mode initialization
    (17) declaration -> . identifier_list mode
    (19) identifier_list -> . ID
    (20) identifier_list -> . ID COMMA identifier_list

    ID              shift and go to state 13

    declaration_list               shift and go to state 94
    declaration                    shift and go to state 20
    identifier_list                shift and go to state 21

state 51

    (16) declaration -> identifier_list mode . initialization
    (17) declaration -> identifier_list mode .
    (18) initialization -> . ASSIGN expression

    COMMA           reduce using rule 17 (declaration -> identifier_list mode .)
    SEMI            reduce using rule 17 (declaration -> identifier_list mode .)
    ASSIGN          shift and go to state 95

    initialization                 shift and go to state 96

state 52

    (13) declaration_statement -> DCL declaration_list SEMI .

    DCL             reduce using rule 13 (declaration_statement -> DCL declaration_list SEMI .)
    SYN             reduce using rule 13 (declaration_statement -> DCL declaration_list SEMI .)
    TYPE            reduce using rule 13 (declaration_statement -> DCL declaration_list SEMI .)
    $end            reduce using rule 13 (declaration_statement -> DCL declaration_list SEMI .)


state 53

    (20) identifier_list -> ID COMMA identifier_list .

    ASSIGN          reduce using rule 20 (identifier_list -> ID COMMA identifier_list .)
    ID              reduce using rule 20 (identifier_list -> ID COMMA identifier_list .)
    REF             reduce using rule 20 (identifier_list -> ID COMMA identifier_list .)
    INT             reduce using rule 20 (identifier_list -> ID COMMA identifier_list .)
    BOOL            reduce using rule 20 (identifier_list -> ID COMMA identifier_list .)
    CHAR            reduce using rule 20 (identifier_list -> ID COMMA identifier_list .)
    CHARS           reduce using rule 20 (identifier_list -> ID COMMA identifier_list .)
    ARRAY           reduce using rule 20 (identifier_list -> ID COMMA identifier_list .)


state 54

    (10) synonym_list -> synonym_definition COMMA synonym_list .

    SEMI            reduce using rule 10 (synonym_list -> synonym_definition COMMA synonym_list .)


state 55

    (57) location -> string_slice .

    ARROW           reduce using rule 57 (location -> string_slice .)
    TIMES           reduce using rule 57 (location -> string_slice .)
    DIVIDE          reduce using rule 57 (location -> string_slice .)
    MODULO          reduce using rule 57 (location -> string_slice .)
    PLUS            reduce using rule 57 (location -> string_slice .)
    MINUS           reduce using rule 57 (location -> string_slice .)
    CONCAT          reduce using rule 57 (location -> string_slice .)
    AND             reduce using rule 57 (location -> string_slice .)
    OR              reduce using rule 57 (location -> string_slice .)
    EQUAL           reduce using rule 57 (location -> string_slice .)
    NOTEQ           reduce using rule 57 (location -> string_slice .)
    GREATER         reduce using rule 57 (location -> string_slice .)
    GTEQUAL         reduce using rule 57 (location -> string_slice .)
    LESS            reduce using rule 57 (location -> string_slice .)
    LTEQUAL         reduce using rule 57 (location -> string_slice .)
    IN              reduce using rule 57 (location -> string_slice .)
    COMMA           reduce using rule 57 (location -> string_slice .)
    SEMI            reduce using rule 57 (location -> string_slice .)
    LBRACKET        reduce using rule 57 (location -> string_slice .)
    COLON           reduce using rule 57 (location -> string_slice .)
    RBRACKET        reduce using rule 57 (location -> string_slice .)
    RPAREN          reduce using rule 57 (location -> string_slice .)


state 56

    (81) operand4 -> primitive_value .

    TIMES           reduce using rule 81 (operand4 -> primitive_value .)
    DIVIDE          reduce using rule 81 (operand4 -> primitive_value .)
    MODULO          reduce using rule 81 (operand4 -> primitive_value .)
    PLUS            reduce using rule 81 (operand4 -> primitive_value .)
    MINUS           reduce using rule 81 (operand4 -> primitive_value .)
    CONCAT          reduce using rule 81 (operand4 -> primitive_value .)
    AND             reduce using rule 81 (operand4 -> primitive_value .)
    OR              reduce using rule 81 (operand4 -> primitive_value .)
    EQUAL           reduce using rule 81 (operand4 -> primitive_value .)
    NOTEQ           reduce using rule 81 (operand4 -> primitive_value .)
    GREATER         reduce using rule 81 (operand4 -> primitive_value .)
    GTEQUAL         reduce using rule 81 (operand4 -> primitive_value .)
    LESS            reduce using rule 81 (operand4 -> primitive_value .)
    LTEQUAL         reduce using rule 81 (operand4 -> primitive_value .)
    IN              reduce using rule 81 (operand4 -> primitive_value .)
    COMMA           reduce using rule 81 (operand4 -> primitive_value .)
    SEMI            reduce using rule 81 (operand4 -> primitive_value .)
    RPAREN          reduce using rule 81 (operand4 -> primitive_value .)
    RBRACKET        reduce using rule 81 (operand4 -> primitive_value .)
    COLON           reduce using rule 81 (operand4 -> primitive_value .)
    LBRACKET        reduce using rule 81 (operand4 -> primitive_value .)


state 57

    (110) integer_literal -> ICONST .

    TIMES           reduce using rule 110 (integer_literal -> ICONST .)
    DIVIDE          reduce using rule 110 (integer_literal -> ICONST .)
    MODULO          reduce using rule 110 (integer_literal -> ICONST .)
    PLUS            reduce using rule 110 (integer_literal -> ICONST .)
    MINUS           reduce using rule 110 (integer_literal -> ICONST .)
    CONCAT          reduce using rule 110 (integer_literal -> ICONST .)
    AND             reduce using rule 110 (integer_literal -> ICONST .)
    OR              reduce using rule 110 (integer_literal -> ICONST .)
    EQUAL           reduce using rule 110 (integer_literal -> ICONST .)
    NOTEQ           reduce using rule 110 (integer_literal -> ICONST .)
    GREATER         reduce using rule 110 (integer_literal -> ICONST .)
    GTEQUAL         reduce using rule 110 (integer_literal -> ICONST .)
    LESS            reduce using rule 110 (integer_literal -> ICONST .)
    LTEQUAL         reduce using rule 110 (integer_literal -> ICONST .)
    IN              reduce using rule 110 (integer_literal -> ICONST .)
    RBRACKET        reduce using rule 110 (integer_literal -> ICONST .)
    COMMA           reduce using rule 110 (integer_literal -> ICONST .)
    COLON           reduce using rule 110 (integer_literal -> ICONST .)
    RPAREN          reduce using rule 110 (integer_literal -> ICONST .)
    SEMI            reduce using rule 110 (integer_literal -> ICONST .)
    LBRACKET        reduce using rule 110 (integer_literal -> ICONST .)


state 58

    (104) primitive_value -> literal .

    TIMES           reduce using rule 104 (primitive_value -> literal .)
    DIVIDE          reduce using rule 104 (primitive_value -> literal .)
    MODULO          reduce using rule 104 (primitive_value -> literal .)
    PLUS            reduce using rule 104 (primitive_value -> literal .)
    MINUS           reduce using rule 104 (primitive_value -> literal .)
    CONCAT          reduce using rule 104 (primitive_value -> literal .)
    AND             reduce using rule 104 (primitive_value -> literal .)
    OR              reduce using rule 104 (primitive_value -> literal .)
    EQUAL           reduce using rule 104 (primitive_value -> literal .)
    NOTEQ           reduce using rule 104 (primitive_value -> literal .)
    GREATER         reduce using rule 104 (primitive_value -> literal .)
    GTEQUAL         reduce using rule 104 (primitive_value -> literal .)
    LESS            reduce using rule 104 (primitive_value -> literal .)
    LTEQUAL         reduce using rule 104 (primitive_value -> literal .)
    IN              reduce using rule 104 (primitive_value -> literal .)
    COMMA           reduce using rule 104 (primitive_value -> literal .)
    SEMI            reduce using rule 104 (primitive_value -> literal .)
    RBRACKET        reduce using rule 104 (primitive_value -> literal .)
    COLON           reduce using rule 104 (primitive_value -> literal .)
    LBRACKET        reduce using rule 104 (primitive_value -> literal .)
    RPAREN          reduce using rule 104 (primitive_value -> literal .)


state 59

    (55) location -> dereferenced_reference .

    ARROW           reduce using rule 55 (location -> dereferenced_reference .)
    TIMES           reduce using rule 55 (location -> dereferenced_reference .)
    DIVIDE          reduce using rule 55 (location -> dereferenced_reference .)
    MODULO          reduce using rule 55 (location -> dereferenced_reference .)
    PLUS            reduce using rule 55 (location -> dereferenced_reference .)
    MINUS           reduce using rule 55 (location -> dereferenced_reference .)
    CONCAT          reduce using rule 55 (location -> dereferenced_reference .)
    AND             reduce using rule 55 (location -> dereferenced_reference .)
    OR              reduce using rule 55 (location -> dereferenced_reference .)
    EQUAL           reduce using rule 55 (location -> dereferenced_reference .)
    NOTEQ           reduce using rule 55 (location -> dereferenced_reference .)
    GREATER         reduce using rule 55 (location -> dereferenced_reference .)
    GTEQUAL         reduce using rule 55 (location -> dereferenced_reference .)
    LESS            reduce using rule 55 (location -> dereferenced_reference .)
    LTEQUAL         reduce using rule 55 (location -> dereferenced_reference .)
    IN              reduce using rule 55 (location -> dereferenced_reference .)
    COMMA           reduce using rule 55 (location -> dereferenced_reference .)
    SEMI            reduce using rule 55 (location -> dereferenced_reference .)
    LBRACKET        reduce using rule 55 (location -> dereferenced_reference .)
    COLON           reduce using rule 55 (location -> dereferenced_reference .)
    RBRACKET        reduce using rule 55 (location -> dereferenced_reference .)
    RPAREN          reduce using rule 55 (location -> dereferenced_reference .)


state 60

    (113) character_literal -> CCONST .

    TIMES           reduce using rule 113 (character_literal -> CCONST .)
    DIVIDE          reduce using rule 113 (character_literal -> CCONST .)
    MODULO          reduce using rule 113 (character_literal -> CCONST .)
    PLUS            reduce using rule 113 (character_literal -> CCONST .)
    MINUS           reduce using rule 113 (character_literal -> CCONST .)
    CONCAT          reduce using rule 113 (character_literal -> CCONST .)
    AND             reduce using rule 113 (character_literal -> CCONST .)
    OR              reduce using rule 113 (character_literal -> CCONST .)
    EQUAL           reduce using rule 113 (character_literal -> CCONST .)
    NOTEQ           reduce using rule 113 (character_literal -> CCONST .)
    GREATER         reduce using rule 113 (character_literal -> CCONST .)
    GTEQUAL         reduce using rule 113 (character_literal -> CCONST .)
    LESS            reduce using rule 113 (character_literal -> CCONST .)
    LTEQUAL         reduce using rule 113 (character_literal -> CCONST .)
    IN              reduce using rule 113 (character_literal -> CCONST .)
    COLON           reduce using rule 113 (character_literal -> CCONST .)
    COMMA           reduce using rule 113 (character_literal -> CCONST .)
    RBRACKET        reduce using rule 113 (character_literal -> CCONST .)
    SEMI            reduce using rule 113 (character_literal -> CCONST .)
    LBRACKET        reduce using rule 113 (character_literal -> CCONST .)
    RPAREN          reduce using rule 113 (character_literal -> CCONST .)


state 61

    (54) location -> ID .
    (64) string_location -> ID .

  ! reduce/reduce conflict for LBRACKET resolved using rule 54 (location -> ID .)
    ARROW           reduce using rule 54 (location -> ID .)
    TIMES           reduce using rule 54 (location -> ID .)
    DIVIDE          reduce using rule 54 (location -> ID .)
    MODULO          reduce using rule 54 (location -> ID .)
    PLUS            reduce using rule 54 (location -> ID .)
    MINUS           reduce using rule 54 (location -> ID .)
    CONCAT          reduce using rule 54 (location -> ID .)
    AND             reduce using rule 54 (location -> ID .)
    OR              reduce using rule 54 (location -> ID .)
    EQUAL           reduce using rule 54 (location -> ID .)
    NOTEQ           reduce using rule 54 (location -> ID .)
    GREATER         reduce using rule 54 (location -> ID .)
    GTEQUAL         reduce using rule 54 (location -> ID .)
    LESS            reduce using rule 54 (location -> ID .)
    LTEQUAL         reduce using rule 54 (location -> ID .)
    IN              reduce using rule 54 (location -> ID .)
    COMMA           reduce using rule 54 (location -> ID .)
    SEMI            reduce using rule 54 (location -> ID .)
    LBRACKET        reduce using rule 54 (location -> ID .)
    COLON           reduce using rule 54 (location -> ID .)
    RBRACKET        reduce using rule 54 (location -> ID .)
    RPAREN          reduce using rule 54 (location -> ID .)

  ! LBRACKET        [ reduce using rule 64 (string_location -> ID .) ]


state 62

    (61) string_element -> string_location . LBRACKET start_element LBRACKET
    (63) string_slice -> string_location . LBRACKET left_element COLON right_element RBRACKET

    LBRACKET        shift and go to state 97


state 63

    (77) operand2 -> operand3 .

    TIMES           reduce using rule 77 (operand2 -> operand3 .)
    DIVIDE          reduce using rule 77 (operand2 -> operand3 .)
    MODULO          reduce using rule 77 (operand2 -> operand3 .)
    PLUS            reduce using rule 77 (operand2 -> operand3 .)
    MINUS           reduce using rule 77 (operand2 -> operand3 .)
    CONCAT          reduce using rule 77 (operand2 -> operand3 .)
    AND             reduce using rule 77 (operand2 -> operand3 .)
    OR              reduce using rule 77 (operand2 -> operand3 .)
    EQUAL           reduce using rule 77 (operand2 -> operand3 .)
    NOTEQ           reduce using rule 77 (operand2 -> operand3 .)
    GREATER         reduce using rule 77 (operand2 -> operand3 .)
    GTEQUAL         reduce using rule 77 (operand2 -> operand3 .)
    LESS            reduce using rule 77 (operand2 -> operand3 .)
    LTEQUAL         reduce using rule 77 (operand2 -> operand3 .)
    IN              reduce using rule 77 (operand2 -> operand3 .)
    COMMA           reduce using rule 77 (operand2 -> operand3 .)
    SEMI            reduce using rule 77 (operand2 -> operand3 .)
    COLON           reduce using rule 77 (operand2 -> operand3 .)
    LBRACKET        reduce using rule 77 (operand2 -> operand3 .)
    RBRACKET        reduce using rule 77 (operand2 -> operand3 .)
    RPAREN          reduce using rule 77 (operand2 -> operand3 .)


state 64

    (115) character_string_literal -> SCONST .

    TIMES           reduce using rule 115 (character_string_literal -> SCONST .)
    DIVIDE          reduce using rule 115 (character_string_literal -> SCONST .)
    MODULO          reduce using rule 115 (character_string_literal -> SCONST .)
    PLUS            reduce using rule 115 (character_string_literal -> SCONST .)
    MINUS           reduce using rule 115 (character_string_literal -> SCONST .)
    CONCAT          reduce using rule 115 (character_string_literal -> SCONST .)
    AND             reduce using rule 115 (character_string_literal -> SCONST .)
    OR              reduce using rule 115 (character_string_literal -> SCONST .)
    EQUAL           reduce using rule 115 (character_string_literal -> SCONST .)
    NOTEQ           reduce using rule 115 (character_string_literal -> SCONST .)
    GREATER         reduce using rule 115 (character_string_literal -> SCONST .)
    GTEQUAL         reduce using rule 115 (character_string_literal -> SCONST .)
    LESS            reduce using rule 115 (character_string_literal -> SCONST .)
    LTEQUAL         reduce using rule 115 (character_string_literal -> SCONST .)
    IN              reduce using rule 115 (character_string_literal -> SCONST .)
    COLON           reduce using rule 115 (character_string_literal -> SCONST .)
    COMMA           reduce using rule 115 (character_string_literal -> SCONST .)
    SEMI            reduce using rule 115 (character_string_literal -> SCONST .)
    LBRACKET        reduce using rule 115 (character_string_literal -> SCONST .)
    RBRACKET        reduce using rule 115 (character_string_literal -> SCONST .)
    RPAREN          reduce using rule 115 (character_string_literal -> SCONST .)


state 65

    (79) operand3 -> monadic_operator . operand4
    (81) operand4 -> . primitive_value
    (82) operand4 -> . location
    (104) primitive_value -> . literal
    (54) location -> . ID
    (55) location -> . dereferenced_reference
    (56) location -> . string_element
    (57) location -> . string_slice
    (58) location -> . array_element
    (59) location -> . array_slice
    (105) literal -> . integer_literal
    (106) literal -> . boolean_literal
    (107) literal -> . character_literal
    (108) literal -> . empty_literal
    (109) literal -> . character_string_literal
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . string_location LBRACKET start_element LBRACKET
    (63) string_slice -> . string_location LBRACKET left_element COLON right_element RBRACKET
    (67) array_element -> . array_location LBRACKET expression_list RBRACKET
    (70) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (110) integer_literal -> . ICONST
    (111) boolean_literal -> . TRUE
    (112) boolean_literal -> . FALSE
    (113) character_literal -> . CCONST
    (114) empty_literal -> . NULL
    (115) character_string_literal -> . SCONST
    (64) string_location -> . ID
    (71) array_location -> . location

    ID              shift and go to state 61
    ICONST          shift and go to state 57
    TRUE            shift and go to state 79
    FALSE           shift and go to state 71
    CCONST          shift and go to state 60
    NULL            shift and go to state 76
    SCONST          shift and go to state 64

    array_element                  shift and go to state 74
    string_slice                   shift and go to state 55
    empty_literal                  shift and go to state 70
    primitive_value                shift and go to state 56
    character_literal              shift and go to state 72
    array_location                 shift and go to state 73
    literal                        shift and go to state 58
    boolean_literal                shift and go to state 75
    integer_literal                shift and go to state 66
    string_location                shift and go to state 62
    string_element                 shift and go to state 78
    character_string_literal       shift and go to state 80
    operand4                       shift and go to state 98
    array_slice                    shift and go to state 84
    dereferenced_reference         shift and go to state 59
    location                       shift and go to state 85

state 66

    (105) literal -> integer_literal .

    TIMES           reduce using rule 105 (literal -> integer_literal .)
    DIVIDE          reduce using rule 105 (literal -> integer_literal .)
    MODULO          reduce using rule 105 (literal -> integer_literal .)
    PLUS            reduce using rule 105 (literal -> integer_literal .)
    MINUS           reduce using rule 105 (literal -> integer_literal .)
    CONCAT          reduce using rule 105 (literal -> integer_literal .)
    AND             reduce using rule 105 (literal -> integer_literal .)
    OR              reduce using rule 105 (literal -> integer_literal .)
    EQUAL           reduce using rule 105 (literal -> integer_literal .)
    NOTEQ           reduce using rule 105 (literal -> integer_literal .)
    GREATER         reduce using rule 105 (literal -> integer_literal .)
    GTEQUAL         reduce using rule 105 (literal -> integer_literal .)
    LESS            reduce using rule 105 (literal -> integer_literal .)
    LTEQUAL         reduce using rule 105 (literal -> integer_literal .)
    IN              reduce using rule 105 (literal -> integer_literal .)
    COMMA           reduce using rule 105 (literal -> integer_literal .)
    SEMI            reduce using rule 105 (literal -> integer_literal .)
    LBRACKET        reduce using rule 105 (literal -> integer_literal .)
    COLON           reduce using rule 105 (literal -> integer_literal .)
    RBRACKET        reduce using rule 105 (literal -> integer_literal .)
    RPAREN          reduce using rule 105 (literal -> integer_literal .)


state 67

    (87) monadic_operator -> NOT .

    ID              reduce using rule 87 (monadic_operator -> NOT .)
    ICONST          reduce using rule 87 (monadic_operator -> NOT .)
    TRUE            reduce using rule 87 (monadic_operator -> NOT .)
    FALSE           reduce using rule 87 (monadic_operator -> NOT .)
    CCONST          reduce using rule 87 (monadic_operator -> NOT .)
    NULL            reduce using rule 87 (monadic_operator -> NOT .)
    SCONST          reduce using rule 87 (monadic_operator -> NOT .)


state 68

    (73) operand0 -> operand1 .
    (76) operand1 -> operand1 . operator2 operand2
    (90) operator2 -> . arithmetic_additive_operator
    (91) operator2 -> . string_concatenation_operator
    (92) arithmetic_additive_operator -> . PLUS
    (93) arithmetic_additive_operator -> . MINUS
    (94) string_concatenation_operator -> . CONCAT

    AND             reduce using rule 73 (operand0 -> operand1 .)
    OR              reduce using rule 73 (operand0 -> operand1 .)
    EQUAL           reduce using rule 73 (operand0 -> operand1 .)
    NOTEQ           reduce using rule 73 (operand0 -> operand1 .)
    GREATER         reduce using rule 73 (operand0 -> operand1 .)
    GTEQUAL         reduce using rule 73 (operand0 -> operand1 .)
    LESS            reduce using rule 73 (operand0 -> operand1 .)
    LTEQUAL         reduce using rule 73 (operand0 -> operand1 .)
    IN              reduce using rule 73 (operand0 -> operand1 .)
    RBRACKET        reduce using rule 73 (operand0 -> operand1 .)
    RPAREN          reduce using rule 73 (operand0 -> operand1 .)
    COMMA           reduce using rule 73 (operand0 -> operand1 .)
    SEMI            reduce using rule 73 (operand0 -> operand1 .)
    COLON           reduce using rule 73 (operand0 -> operand1 .)
    LBRACKET        reduce using rule 73 (operand0 -> operand1 .)
    PLUS            shift and go to state 99
    MINUS           shift and go to state 101
    CONCAT          shift and go to state 104

    arithmetic_additive_operator   shift and go to state 102
    operator2                      shift and go to state 103
    string_concatenation_operator  shift and go to state 100

state 69

    (75) operand1 -> operand2 .
    (78) operand2 -> operand2 . arithmetic_multiplicative_operator operand3
    (83) arithmetic_multiplicative_operator -> . TIMES
    (84) arithmetic_multiplicative_operator -> . DIVIDE
    (85) arithmetic_multiplicative_operator -> . MODULO

    PLUS            reduce using rule 75 (operand1 -> operand2 .)
    MINUS           reduce using rule 75 (operand1 -> operand2 .)
    CONCAT          reduce using rule 75 (operand1 -> operand2 .)
    AND             reduce using rule 75 (operand1 -> operand2 .)
    OR              reduce using rule 75 (operand1 -> operand2 .)
    EQUAL           reduce using rule 75 (operand1 -> operand2 .)
    NOTEQ           reduce using rule 75 (operand1 -> operand2 .)
    GREATER         reduce using rule 75 (operand1 -> operand2 .)
    GTEQUAL         reduce using rule 75 (operand1 -> operand2 .)
    LESS            reduce using rule 75 (operand1 -> operand2 .)
    LTEQUAL         reduce using rule 75 (operand1 -> operand2 .)
    IN              reduce using rule 75 (operand1 -> operand2 .)
    COMMA           reduce using rule 75 (operand1 -> operand2 .)
    SEMI            reduce using rule 75 (operand1 -> operand2 .)
    LBRACKET        reduce using rule 75 (operand1 -> operand2 .)
    COLON           reduce using rule 75 (operand1 -> operand2 .)
    RBRACKET        reduce using rule 75 (operand1 -> operand2 .)
    RPAREN          reduce using rule 75 (operand1 -> operand2 .)
    TIMES           shift and go to state 107
    DIVIDE          shift and go to state 108
    MODULO          shift and go to state 105

    arithmetic_multiplicative_operator shift and go to state 106

state 70

    (108) literal -> empty_literal .

    TIMES           reduce using rule 108 (literal -> empty_literal .)
    DIVIDE          reduce using rule 108 (literal -> empty_literal .)
    MODULO          reduce using rule 108 (literal -> empty_literal .)
    PLUS            reduce using rule 108 (literal -> empty_literal .)
    MINUS           reduce using rule 108 (literal -> empty_literal .)
    CONCAT          reduce using rule 108 (literal -> empty_literal .)
    AND             reduce using rule 108 (literal -> empty_literal .)
    OR              reduce using rule 108 (literal -> empty_literal .)
    EQUAL           reduce using rule 108 (literal -> empty_literal .)
    NOTEQ           reduce using rule 108 (literal -> empty_literal .)
    GREATER         reduce using rule 108 (literal -> empty_literal .)
    GTEQUAL         reduce using rule 108 (literal -> empty_literal .)
    LESS            reduce using rule 108 (literal -> empty_literal .)
    LTEQUAL         reduce using rule 108 (literal -> empty_literal .)
    IN              reduce using rule 108 (literal -> empty_literal .)
    COMMA           reduce using rule 108 (literal -> empty_literal .)
    SEMI            reduce using rule 108 (literal -> empty_literal .)
    LBRACKET        reduce using rule 108 (literal -> empty_literal .)
    COLON           reduce using rule 108 (literal -> empty_literal .)
    RBRACKET        reduce using rule 108 (literal -> empty_literal .)
    RPAREN          reduce using rule 108 (literal -> empty_literal .)


state 71

    (112) boolean_literal -> FALSE .

    TIMES           reduce using rule 112 (boolean_literal -> FALSE .)
    DIVIDE          reduce using rule 112 (boolean_literal -> FALSE .)
    MODULO          reduce using rule 112 (boolean_literal -> FALSE .)
    PLUS            reduce using rule 112 (boolean_literal -> FALSE .)
    MINUS           reduce using rule 112 (boolean_literal -> FALSE .)
    CONCAT          reduce using rule 112 (boolean_literal -> FALSE .)
    AND             reduce using rule 112 (boolean_literal -> FALSE .)
    OR              reduce using rule 112 (boolean_literal -> FALSE .)
    EQUAL           reduce using rule 112 (boolean_literal -> FALSE .)
    NOTEQ           reduce using rule 112 (boolean_literal -> FALSE .)
    GREATER         reduce using rule 112 (boolean_literal -> FALSE .)
    GTEQUAL         reduce using rule 112 (boolean_literal -> FALSE .)
    LESS            reduce using rule 112 (boolean_literal -> FALSE .)
    LTEQUAL         reduce using rule 112 (boolean_literal -> FALSE .)
    IN              reduce using rule 112 (boolean_literal -> FALSE .)
    COLON           reduce using rule 112 (boolean_literal -> FALSE .)
    COMMA           reduce using rule 112 (boolean_literal -> FALSE .)
    SEMI            reduce using rule 112 (boolean_literal -> FALSE .)
    LBRACKET        reduce using rule 112 (boolean_literal -> FALSE .)
    RBRACKET        reduce using rule 112 (boolean_literal -> FALSE .)
    RPAREN          reduce using rule 112 (boolean_literal -> FALSE .)


state 72

    (107) literal -> character_literal .

    TIMES           reduce using rule 107 (literal -> character_literal .)
    DIVIDE          reduce using rule 107 (literal -> character_literal .)
    MODULO          reduce using rule 107 (literal -> character_literal .)
    PLUS            reduce using rule 107 (literal -> character_literal .)
    MINUS           reduce using rule 107 (literal -> character_literal .)
    CONCAT          reduce using rule 107 (literal -> character_literal .)
    AND             reduce using rule 107 (literal -> character_literal .)
    OR              reduce using rule 107 (literal -> character_literal .)
    EQUAL           reduce using rule 107 (literal -> character_literal .)
    NOTEQ           reduce using rule 107 (literal -> character_literal .)
    GREATER         reduce using rule 107 (literal -> character_literal .)
    GTEQUAL         reduce using rule 107 (literal -> character_literal .)
    LESS            reduce using rule 107 (literal -> character_literal .)
    LTEQUAL         reduce using rule 107 (literal -> character_literal .)
    IN              reduce using rule 107 (literal -> character_literal .)
    COMMA           reduce using rule 107 (literal -> character_literal .)
    SEMI            reduce using rule 107 (literal -> character_literal .)
    LBRACKET        reduce using rule 107 (literal -> character_literal .)
    COLON           reduce using rule 107 (literal -> character_literal .)
    RBRACKET        reduce using rule 107 (literal -> character_literal .)
    RPAREN          reduce using rule 107 (literal -> character_literal .)


state 73

    (67) array_element -> array_location . LBRACKET expression_list RBRACKET
    (70) array_slice -> array_location . LBRACKET lower_bound COLON upper_bound RBRACKET

    LBRACKET        shift and go to state 109


state 74

    (58) location -> array_element .

    ARROW           reduce using rule 58 (location -> array_element .)
    TIMES           reduce using rule 58 (location -> array_element .)
    DIVIDE          reduce using rule 58 (location -> array_element .)
    MODULO          reduce using rule 58 (location -> array_element .)
    PLUS            reduce using rule 58 (location -> array_element .)
    MINUS           reduce using rule 58 (location -> array_element .)
    CONCAT          reduce using rule 58 (location -> array_element .)
    AND             reduce using rule 58 (location -> array_element .)
    OR              reduce using rule 58 (location -> array_element .)
    EQUAL           reduce using rule 58 (location -> array_element .)
    NOTEQ           reduce using rule 58 (location -> array_element .)
    GREATER         reduce using rule 58 (location -> array_element .)
    GTEQUAL         reduce using rule 58 (location -> array_element .)
    LESS            reduce using rule 58 (location -> array_element .)
    LTEQUAL         reduce using rule 58 (location -> array_element .)
    IN              reduce using rule 58 (location -> array_element .)
    COMMA           reduce using rule 58 (location -> array_element .)
    SEMI            reduce using rule 58 (location -> array_element .)
    LBRACKET        reduce using rule 58 (location -> array_element .)
    COLON           reduce using rule 58 (location -> array_element .)
    RBRACKET        reduce using rule 58 (location -> array_element .)
    RPAREN          reduce using rule 58 (location -> array_element .)


state 75

    (106) literal -> boolean_literal .

    TIMES           reduce using rule 106 (literal -> boolean_literal .)
    DIVIDE          reduce using rule 106 (literal -> boolean_literal .)
    MODULO          reduce using rule 106 (literal -> boolean_literal .)
    PLUS            reduce using rule 106 (literal -> boolean_literal .)
    MINUS           reduce using rule 106 (literal -> boolean_literal .)
    CONCAT          reduce using rule 106 (literal -> boolean_literal .)
    AND             reduce using rule 106 (literal -> boolean_literal .)
    OR              reduce using rule 106 (literal -> boolean_literal .)
    EQUAL           reduce using rule 106 (literal -> boolean_literal .)
    NOTEQ           reduce using rule 106 (literal -> boolean_literal .)
    GREATER         reduce using rule 106 (literal -> boolean_literal .)
    GTEQUAL         reduce using rule 106 (literal -> boolean_literal .)
    LESS            reduce using rule 106 (literal -> boolean_literal .)
    LTEQUAL         reduce using rule 106 (literal -> boolean_literal .)
    IN              reduce using rule 106 (literal -> boolean_literal .)
    COMMA           reduce using rule 106 (literal -> boolean_literal .)
    SEMI            reduce using rule 106 (literal -> boolean_literal .)
    LBRACKET        reduce using rule 106 (literal -> boolean_literal .)
    COLON           reduce using rule 106 (literal -> boolean_literal .)
    RBRACKET        reduce using rule 106 (literal -> boolean_literal .)
    RPAREN          reduce using rule 106 (literal -> boolean_literal .)


state 76

    (114) empty_literal -> NULL .

    TIMES           reduce using rule 114 (empty_literal -> NULL .)
    DIVIDE          reduce using rule 114 (empty_literal -> NULL .)
    MODULO          reduce using rule 114 (empty_literal -> NULL .)
    PLUS            reduce using rule 114 (empty_literal -> NULL .)
    MINUS           reduce using rule 114 (empty_literal -> NULL .)
    CONCAT          reduce using rule 114 (empty_literal -> NULL .)
    AND             reduce using rule 114 (empty_literal -> NULL .)
    OR              reduce using rule 114 (empty_literal -> NULL .)
    EQUAL           reduce using rule 114 (empty_literal -> NULL .)
    NOTEQ           reduce using rule 114 (empty_literal -> NULL .)
    GREATER         reduce using rule 114 (empty_literal -> NULL .)
    GTEQUAL         reduce using rule 114 (empty_literal -> NULL .)
    LESS            reduce using rule 114 (empty_literal -> NULL .)
    LTEQUAL         reduce using rule 114 (empty_literal -> NULL .)
    IN              reduce using rule 114 (empty_literal -> NULL .)
    LBRACKET        reduce using rule 114 (empty_literal -> NULL .)
    COLON           reduce using rule 114 (empty_literal -> NULL .)
    COMMA           reduce using rule 114 (empty_literal -> NULL .)
    SEMI            reduce using rule 114 (empty_literal -> NULL .)
    RBRACKET        reduce using rule 114 (empty_literal -> NULL .)
    RPAREN          reduce using rule 114 (empty_literal -> NULL .)


state 77

    (72) expression -> operand0 .
    (74) operand0 -> operand0 . operator1 operand1
    (88) operator1 -> . relational_operator
    (89) operator1 -> . membership_operator
    (95) relational_operator -> . AND
    (96) relational_operator -> . OR
    (97) relational_operator -> . EQUAL
    (98) relational_operator -> . NOTEQ
    (99) relational_operator -> . GREATER
    (100) relational_operator -> . GTEQUAL
    (101) relational_operator -> . LESS
    (102) relational_operator -> . LTEQUAL
    (103) membership_operator -> . IN

    RBRACKET        reduce using rule 72 (expression -> operand0 .)
    COMMA           reduce using rule 72 (expression -> operand0 .)
    COLON           reduce using rule 72 (expression -> operand0 .)
    LBRACKET        reduce using rule 72 (expression -> operand0 .)
    SEMI            reduce using rule 72 (expression -> operand0 .)
    RPAREN          reduce using rule 72 (expression -> operand0 .)
    AND             shift and go to state 111
    OR              shift and go to state 110
    EQUAL           shift and go to state 115
    NOTEQ           shift and go to state 116
    GREATER         shift and go to state 119
    GTEQUAL         shift and go to state 112
    LESS            shift and go to state 121
    LTEQUAL         shift and go to state 113
    IN              shift and go to state 118

    operator1                      shift and go to state 114
    relational_operator            shift and go to state 117
    membership_operator            shift and go to state 120

state 78

    (56) location -> string_element .

    ARROW           reduce using rule 56 (location -> string_element .)
    TIMES           reduce using rule 56 (location -> string_element .)
    DIVIDE          reduce using rule 56 (location -> string_element .)
    MODULO          reduce using rule 56 (location -> string_element .)
    PLUS            reduce using rule 56 (location -> string_element .)
    MINUS           reduce using rule 56 (location -> string_element .)
    CONCAT          reduce using rule 56 (location -> string_element .)
    AND             reduce using rule 56 (location -> string_element .)
    OR              reduce using rule 56 (location -> string_element .)
    EQUAL           reduce using rule 56 (location -> string_element .)
    NOTEQ           reduce using rule 56 (location -> string_element .)
    GREATER         reduce using rule 56 (location -> string_element .)
    GTEQUAL         reduce using rule 56 (location -> string_element .)
    LESS            reduce using rule 56 (location -> string_element .)
    LTEQUAL         reduce using rule 56 (location -> string_element .)
    IN              reduce using rule 56 (location -> string_element .)
    COMMA           reduce using rule 56 (location -> string_element .)
    SEMI            reduce using rule 56 (location -> string_element .)
    LBRACKET        reduce using rule 56 (location -> string_element .)
    COLON           reduce using rule 56 (location -> string_element .)
    RBRACKET        reduce using rule 56 (location -> string_element .)
    RPAREN          reduce using rule 56 (location -> string_element .)


state 79

    (111) boolean_literal -> TRUE .

    TIMES           reduce using rule 111 (boolean_literal -> TRUE .)
    DIVIDE          reduce using rule 111 (boolean_literal -> TRUE .)
    MODULO          reduce using rule 111 (boolean_literal -> TRUE .)
    PLUS            reduce using rule 111 (boolean_literal -> TRUE .)
    MINUS           reduce using rule 111 (boolean_literal -> TRUE .)
    CONCAT          reduce using rule 111 (boolean_literal -> TRUE .)
    AND             reduce using rule 111 (boolean_literal -> TRUE .)
    OR              reduce using rule 111 (boolean_literal -> TRUE .)
    EQUAL           reduce using rule 111 (boolean_literal -> TRUE .)
    NOTEQ           reduce using rule 111 (boolean_literal -> TRUE .)
    GREATER         reduce using rule 111 (boolean_literal -> TRUE .)
    GTEQUAL         reduce using rule 111 (boolean_literal -> TRUE .)
    LESS            reduce using rule 111 (boolean_literal -> TRUE .)
    LTEQUAL         reduce using rule 111 (boolean_literal -> TRUE .)
    IN              reduce using rule 111 (boolean_literal -> TRUE .)
    COLON           reduce using rule 111 (boolean_literal -> TRUE .)
    COMMA           reduce using rule 111 (boolean_literal -> TRUE .)
    SEMI            reduce using rule 111 (boolean_literal -> TRUE .)
    LBRACKET        reduce using rule 111 (boolean_literal -> TRUE .)
    RBRACKET        reduce using rule 111 (boolean_literal -> TRUE .)
    RPAREN          reduce using rule 111 (boolean_literal -> TRUE .)


state 80

    (109) literal -> character_string_literal .

    TIMES           reduce using rule 109 (literal -> character_string_literal .)
    DIVIDE          reduce using rule 109 (literal -> character_string_literal .)
    MODULO          reduce using rule 109 (literal -> character_string_literal .)
    PLUS            reduce using rule 109 (literal -> character_string_literal .)
    MINUS           reduce using rule 109 (literal -> character_string_literal .)
    CONCAT          reduce using rule 109 (literal -> character_string_literal .)
    AND             reduce using rule 109 (literal -> character_string_literal .)
    OR              reduce using rule 109 (literal -> character_string_literal .)
    EQUAL           reduce using rule 109 (literal -> character_string_literal .)
    NOTEQ           reduce using rule 109 (literal -> character_string_literal .)
    GREATER         reduce using rule 109 (literal -> character_string_literal .)
    GTEQUAL         reduce using rule 109 (literal -> character_string_literal .)
    LESS            reduce using rule 109 (literal -> character_string_literal .)
    LTEQUAL         reduce using rule 109 (literal -> character_string_literal .)
    IN              reduce using rule 109 (literal -> character_string_literal .)
    COMMA           reduce using rule 109 (literal -> character_string_literal .)
    SEMI            reduce using rule 109 (literal -> character_string_literal .)
    LBRACKET        reduce using rule 109 (literal -> character_string_literal .)
    COLON           reduce using rule 109 (literal -> character_string_literal .)
    RBRACKET        reduce using rule 109 (literal -> character_string_literal .)
    RPAREN          reduce using rule 109 (literal -> character_string_literal .)


state 81

    (80) operand3 -> operand4 .

    TIMES           reduce using rule 80 (operand3 -> operand4 .)
    DIVIDE          reduce using rule 80 (operand3 -> operand4 .)
    MODULO          reduce using rule 80 (operand3 -> operand4 .)
    PLUS            reduce using rule 80 (operand3 -> operand4 .)
    MINUS           reduce using rule 80 (operand3 -> operand4 .)
    CONCAT          reduce using rule 80 (operand3 -> operand4 .)
    AND             reduce using rule 80 (operand3 -> operand4 .)
    OR              reduce using rule 80 (operand3 -> operand4 .)
    EQUAL           reduce using rule 80 (operand3 -> operand4 .)
    NOTEQ           reduce using rule 80 (operand3 -> operand4 .)
    GREATER         reduce using rule 80 (operand3 -> operand4 .)
    GTEQUAL         reduce using rule 80 (operand3 -> operand4 .)
    LESS            reduce using rule 80 (operand3 -> operand4 .)
    LTEQUAL         reduce using rule 80 (operand3 -> operand4 .)
    IN              reduce using rule 80 (operand3 -> operand4 .)
    LBRACKET        reduce using rule 80 (operand3 -> operand4 .)
    COLON           reduce using rule 80 (operand3 -> operand4 .)
    COMMA           reduce using rule 80 (operand3 -> operand4 .)
    SEMI            reduce using rule 80 (operand3 -> operand4 .)
    RBRACKET        reduce using rule 80 (operand3 -> operand4 .)
    RPAREN          reduce using rule 80 (operand3 -> operand4 .)


state 82

    (12) synonym_definition -> identifier_list ASSIGN expression .

    COMMA           reduce using rule 12 (synonym_definition -> identifier_list ASSIGN expression .)
    SEMI            reduce using rule 12 (synonym_definition -> identifier_list ASSIGN expression .)


state 83

    (86) monadic_operator -> MINUS .

    ID              reduce using rule 86 (monadic_operator -> MINUS .)
    ICONST          reduce using rule 86 (monadic_operator -> MINUS .)
    TRUE            reduce using rule 86 (monadic_operator -> MINUS .)
    FALSE           reduce using rule 86 (monadic_operator -> MINUS .)
    CCONST          reduce using rule 86 (monadic_operator -> MINUS .)
    NULL            reduce using rule 86 (monadic_operator -> MINUS .)
    SCONST          reduce using rule 86 (monadic_operator -> MINUS .)


state 84

    (59) location -> array_slice .

    ARROW           reduce using rule 59 (location -> array_slice .)
    TIMES           reduce using rule 59 (location -> array_slice .)
    DIVIDE          reduce using rule 59 (location -> array_slice .)
    MODULO          reduce using rule 59 (location -> array_slice .)
    PLUS            reduce using rule 59 (location -> array_slice .)
    MINUS           reduce using rule 59 (location -> array_slice .)
    CONCAT          reduce using rule 59 (location -> array_slice .)
    AND             reduce using rule 59 (location -> array_slice .)
    OR              reduce using rule 59 (location -> array_slice .)
    EQUAL           reduce using rule 59 (location -> array_slice .)
    NOTEQ           reduce using rule 59 (location -> array_slice .)
    GREATER         reduce using rule 59 (location -> array_slice .)
    GTEQUAL         reduce using rule 59 (location -> array_slice .)
    LESS            reduce using rule 59 (location -> array_slice .)
    LTEQUAL         reduce using rule 59 (location -> array_slice .)
    IN              reduce using rule 59 (location -> array_slice .)
    COMMA           reduce using rule 59 (location -> array_slice .)
    SEMI            reduce using rule 59 (location -> array_slice .)
    LBRACKET        reduce using rule 59 (location -> array_slice .)
    COLON           reduce using rule 59 (location -> array_slice .)
    RBRACKET        reduce using rule 59 (location -> array_slice .)
    RPAREN          reduce using rule 59 (location -> array_slice .)


state 85

    (82) operand4 -> location .
    (60) dereferenced_reference -> location . ARROW
    (71) array_location -> location .

  ! reduce/reduce conflict for LBRACKET resolved using rule 71 (array_location -> location .)
    TIMES           reduce using rule 82 (operand4 -> location .)
    DIVIDE          reduce using rule 82 (operand4 -> location .)
    MODULO          reduce using rule 82 (operand4 -> location .)
    PLUS            reduce using rule 82 (operand4 -> location .)
    MINUS           reduce using rule 82 (operand4 -> location .)
    CONCAT          reduce using rule 82 (operand4 -> location .)
    AND             reduce using rule 82 (operand4 -> location .)
    OR              reduce using rule 82 (operand4 -> location .)
    EQUAL           reduce using rule 82 (operand4 -> location .)
    NOTEQ           reduce using rule 82 (operand4 -> location .)
    GREATER         reduce using rule 82 (operand4 -> location .)
    GTEQUAL         reduce using rule 82 (operand4 -> location .)
    LESS            reduce using rule 82 (operand4 -> location .)
    LTEQUAL         reduce using rule 82 (operand4 -> location .)
    IN              reduce using rule 82 (operand4 -> location .)
    COMMA           reduce using rule 82 (operand4 -> location .)
    SEMI            reduce using rule 82 (operand4 -> location .)
    RPAREN          reduce using rule 82 (operand4 -> location .)
    RBRACKET        reduce using rule 82 (operand4 -> location .)
    COLON           reduce using rule 82 (operand4 -> location .)
    ARROW           shift and go to state 122
    LBRACKET        reduce using rule 71 (array_location -> location .)

  ! LBRACKET        [ reduce using rule 82 (operand4 -> location .) ]


state 86

    (46) string_mode -> CHARS LBRACKET . string_length RBRACKET
    (47) string_length -> . integer_literal
    (110) integer_literal -> . ICONST

    ICONST          shift and go to state 57

    string_length                  shift and go to state 123
    integer_literal                shift and go to state 124

state 87

    (39) discrete_range_mode -> discrete_mode LPAREN . literal_range RPAREN
    (40) literal_range -> . lower_bound COLON upper_bound
    (41) lower_bound -> . expression
    (72) expression -> . operand0
    (73) operand0 -> . operand1
    (74) operand0 -> . operand0 operator1 operand1
    (75) operand1 -> . operand2
    (76) operand1 -> . operand1 operator2 operand2
    (77) operand2 -> . operand3
    (78) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (79) operand3 -> . monadic_operator operand4
    (80) operand3 -> . operand4
    (86) monadic_operator -> . MINUS
    (87) monadic_operator -> . NOT
    (81) operand4 -> . primitive_value
    (82) operand4 -> . location
    (104) primitive_value -> . literal
    (54) location -> . ID
    (55) location -> . dereferenced_reference
    (56) location -> . string_element
    (57) location -> . string_slice
    (58) location -> . array_element
    (59) location -> . array_slice
    (105) literal -> . integer_literal
    (106) literal -> . boolean_literal
    (107) literal -> . character_literal
    (108) literal -> . empty_literal
    (109) literal -> . character_string_literal
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . string_location LBRACKET start_element LBRACKET
    (63) string_slice -> . string_location LBRACKET left_element COLON right_element RBRACKET
    (67) array_element -> . array_location LBRACKET expression_list RBRACKET
    (70) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (110) integer_literal -> . ICONST
    (111) boolean_literal -> . TRUE
    (112) boolean_literal -> . FALSE
    (113) character_literal -> . CCONST
    (114) empty_literal -> . NULL
    (115) character_string_literal -> . SCONST
    (64) string_location -> . ID
    (71) array_location -> . location

    MINUS           shift and go to state 83
    NOT             shift and go to state 67
    ID              shift and go to state 61
    ICONST          shift and go to state 57
    TRUE            shift and go to state 79
    FALSE           shift and go to state 71
    CCONST          shift and go to state 60
    NULL            shift and go to state 76
    SCONST          shift and go to state 64

    operand1                       shift and go to state 68
    character_string_literal       shift and go to state 80
    monadic_operator               shift and go to state 65
    string_slice                   shift and go to state 55
    boolean_literal                shift and go to state 75
    empty_literal                  shift and go to state 70
    primitive_value                shift and go to state 56
    array_location                 shift and go to state 73
    literal                        shift and go to state 58
    string_location                shift and go to state 62
    operand2                       shift and go to state 69
    array_element                  shift and go to state 74
    operand0                       shift and go to state 77
    operand3                       shift and go to state 63
    lower_bound                    shift and go to state 127
    string_element                 shift and go to state 78
    integer_literal                shift and go to state 66
    operand4                       shift and go to state 81
    expression                     shift and go to state 125
    array_slice                    shift and go to state 84
    literal_range                  shift and go to state 126
    dereferenced_reference         shift and go to state 59
    location                       shift and go to state 85
    character_literal              shift and go to state 72

state 88

    (48) array_mode -> ARRAY LBRACKET . index_mode_list RBRACKET element_mode
    (49) index_mode_list -> . index_mode
    (50) index_mode_list -> . index_mode COMMA index_mode_list
    (51) index_mode -> . discrete_mode
    (52) index_mode -> . literal_range
    (30) discrete_mode -> . integer_mode
    (31) discrete_mode -> . boolean_mode
    (32) discrete_mode -> . character_mode
    (33) discrete_mode -> . discrete_range_mode
    (40) literal_range -> . lower_bound COLON upper_bound
    (35) integer_mode -> . INT
    (36) boolean_mode -> . BOOL
    (37) character_mode -> . CHAR
    (38) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (39) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (41) lower_bound -> . expression
    (34) discrete_mode_name -> . ID
    (72) expression -> . operand0
    (73) operand0 -> . operand1
    (74) operand0 -> . operand0 operator1 operand1
    (75) operand1 -> . operand2
    (76) operand1 -> . operand1 operator2 operand2
    (77) operand2 -> . operand3
    (78) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (79) operand3 -> . monadic_operator operand4
    (80) operand3 -> . operand4
    (86) monadic_operator -> . MINUS
    (87) monadic_operator -> . NOT
    (81) operand4 -> . primitive_value
    (82) operand4 -> . location
    (104) primitive_value -> . literal
    (54) location -> . ID
    (55) location -> . dereferenced_reference
    (56) location -> . string_element
    (57) location -> . string_slice
    (58) location -> . array_element
    (59) location -> . array_slice
    (105) literal -> . integer_literal
    (106) literal -> . boolean_literal
    (107) literal -> . character_literal
    (108) literal -> . empty_literal
    (109) literal -> . character_string_literal
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . string_location LBRACKET start_element LBRACKET
    (63) string_slice -> . string_location LBRACKET left_element COLON right_element RBRACKET
    (67) array_element -> . array_location LBRACKET expression_list RBRACKET
    (70) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (110) integer_literal -> . ICONST
    (111) boolean_literal -> . TRUE
    (112) boolean_literal -> . FALSE
    (113) character_literal -> . CCONST
    (114) empty_literal -> . NULL
    (115) character_string_literal -> . SCONST
    (64) string_location -> . ID
    (71) array_location -> . location

    INT             shift and go to state 38
    BOOL            shift and go to state 29
    CHAR            shift and go to state 28
    ID              shift and go to state 128
    MINUS           shift and go to state 83
    NOT             shift and go to state 67
    ICONST          shift and go to state 57
    TRUE            shift and go to state 79
    FALSE           shift and go to state 71
    CCONST          shift and go to state 60
    NULL            shift and go to state 76
    SCONST          shift and go to state 64

    operand1                       shift and go to state 68
    character_string_literal       shift and go to state 80
    monadic_operator               shift and go to state 65
    array_element                  shift and go to state 74
    string_slice                   shift and go to state 55
    index_mode                     shift and go to state 132
    empty_literal                  shift and go to state 70
    expression                     shift and go to state 125
    array_location                 shift and go to state 73
    discrete_mode                  shift and go to state 129
    string_location                shift and go to state 62
    integer_mode                   shift and go to state 33
    discrete_range_mode            shift and go to state 34
    dereferenced_reference         shift and go to state 59
    index_mode_list                shift and go to state 130
    boolean_mode                   shift and go to state 36
    literal                        shift and go to state 58
    boolean_literal                shift and go to state 75
    operand0                       shift and go to state 77
    operand3                       shift and go to state 63
    lower_bound                    shift and go to state 127
    string_element                 shift and go to state 78
    integer_literal                shift and go to state 66
    operand4                       shift and go to state 81
    discrete_mode_name             shift and go to state 44
    primitive_value                shift and go to state 56
    character_mode                 shift and go to state 42
    array_slice                    shift and go to state 84
    literal_range                  shift and go to state 131
    operand2                       shift and go to state 69
    location                       shift and go to state 85
    character_literal              shift and go to state 72

state 89

    (43) reference_mode -> REF mode .

    ASSIGN          reduce using rule 43 (reference_mode -> REF mode .)
    COMMA           reduce using rule 43 (reference_mode -> REF mode .)
    SEMI            reduce using rule 43 (reference_mode -> REF mode .)


state 90

    (38) discrete_range_mode -> discrete_mode_name LPAREN . literal_range RPAREN
    (40) literal_range -> . lower_bound COLON upper_bound
    (41) lower_bound -> . expression
    (72) expression -> . operand0
    (73) operand0 -> . operand1
    (74) operand0 -> . operand0 operator1 operand1
    (75) operand1 -> . operand2
    (76) operand1 -> . operand1 operator2 operand2
    (77) operand2 -> . operand3
    (78) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (79) operand3 -> . monadic_operator operand4
    (80) operand3 -> . operand4
    (86) monadic_operator -> . MINUS
    (87) monadic_operator -> . NOT
    (81) operand4 -> . primitive_value
    (82) operand4 -> . location
    (104) primitive_value -> . literal
    (54) location -> . ID
    (55) location -> . dereferenced_reference
    (56) location -> . string_element
    (57) location -> . string_slice
    (58) location -> . array_element
    (59) location -> . array_slice
    (105) literal -> . integer_literal
    (106) literal -> . boolean_literal
    (107) literal -> . character_literal
    (108) literal -> . empty_literal
    (109) literal -> . character_string_literal
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . string_location LBRACKET start_element LBRACKET
    (63) string_slice -> . string_location LBRACKET left_element COLON right_element RBRACKET
    (67) array_element -> . array_location LBRACKET expression_list RBRACKET
    (70) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (110) integer_literal -> . ICONST
    (111) boolean_literal -> . TRUE
    (112) boolean_literal -> . FALSE
    (113) character_literal -> . CCONST
    (114) empty_literal -> . NULL
    (115) character_string_literal -> . SCONST
    (64) string_location -> . ID
    (71) array_location -> . location

    MINUS           shift and go to state 83
    NOT             shift and go to state 67
    ID              shift and go to state 61
    ICONST          shift and go to state 57
    TRUE            shift and go to state 79
    FALSE           shift and go to state 71
    CCONST          shift and go to state 60
    NULL            shift and go to state 76
    SCONST          shift and go to state 64

    operand1                       shift and go to state 68
    character_string_literal       shift and go to state 80
    monadic_operator               shift and go to state 65
    string_slice                   shift and go to state 55
    boolean_literal                shift and go to state 75
    empty_literal                  shift and go to state 70
    primitive_value                shift and go to state 56
    array_location                 shift and go to state 73
    array_element                  shift and go to state 74
    string_location                shift and go to state 62
    operand2                       shift and go to state 69
    dereferenced_reference         shift and go to state 59
    operand0                       shift and go to state 77
    operand3                       shift and go to state 63
    lower_bound                    shift and go to state 127
    string_element                 shift and go to state 78
    integer_literal                shift and go to state 66
    operand4                       shift and go to state 81
    expression                     shift and go to state 125
    literal                        shift and go to state 58
    array_slice                    shift and go to state 84
    literal_range                  shift and go to state 133
    location                       shift and go to state 85
    character_literal              shift and go to state 72

state 91

    (11) synonym_definition -> identifier_list mode ASSIGN . expression
    (72) expression -> . operand0
    (73) operand0 -> . operand1
    (74) operand0 -> . operand0 operator1 operand1
    (75) operand1 -> . operand2
    (76) operand1 -> . operand1 operator2 operand2
    (77) operand2 -> . operand3
    (78) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (79) operand3 -> . monadic_operator operand4
    (80) operand3 -> . operand4
    (86) monadic_operator -> . MINUS
    (87) monadic_operator -> . NOT
    (81) operand4 -> . primitive_value
    (82) operand4 -> . location
    (104) primitive_value -> . literal
    (54) location -> . ID
    (55) location -> . dereferenced_reference
    (56) location -> . string_element
    (57) location -> . string_slice
    (58) location -> . array_element
    (59) location -> . array_slice
    (105) literal -> . integer_literal
    (106) literal -> . boolean_literal
    (107) literal -> . character_literal
    (108) literal -> . empty_literal
    (109) literal -> . character_string_literal
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . string_location LBRACKET start_element LBRACKET
    (63) string_slice -> . string_location LBRACKET left_element COLON right_element RBRACKET
    (67) array_element -> . array_location LBRACKET expression_list RBRACKET
    (70) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (110) integer_literal -> . ICONST
    (111) boolean_literal -> . TRUE
    (112) boolean_literal -> . FALSE
    (113) character_literal -> . CCONST
    (114) empty_literal -> . NULL
    (115) character_string_literal -> . SCONST
    (64) string_location -> . ID
    (71) array_location -> . location

    MINUS           shift and go to state 83
    NOT             shift and go to state 67
    ID              shift and go to state 61
    ICONST          shift and go to state 57
    TRUE            shift and go to state 79
    FALSE           shift and go to state 71
    CCONST          shift and go to state 60
    NULL            shift and go to state 76
    SCONST          shift and go to state 64

    operand1                       shift and go to state 68
    character_string_literal       shift and go to state 80
    monadic_operator               shift and go to state 65
    string_slice                   shift and go to state 55
    boolean_literal                shift and go to state 75
    empty_literal                  shift and go to state 70
    character_literal              shift and go to state 72
    primitive_value                shift and go to state 56
    array_location                 shift and go to state 73
    array_element                  shift and go to state 74
    string_location                shift and go to state 62
    operand2                       shift and go to state 69
    dereferenced_reference         shift and go to state 59
    operand0                       shift and go to state 77
    operand3                       shift and go to state 63
    string_element                 shift and go to state 78
    integer_literal                shift and go to state 66
    operand4                       shift and go to state 81
    expression                     shift and go to state 134
    literal                        shift and go to state 58
    array_slice                    shift and go to state 84
    location                       shift and go to state 85

state 92

    (23) newmode_list -> mode_definition COMMA newmode_list .

    SEMI            reduce using rule 23 (newmode_list -> mode_definition COMMA newmode_list .)


state 93

    (24) mode_definition -> identifier_list ASSIGN mode .

    COMMA           reduce using rule 24 (mode_definition -> identifier_list ASSIGN mode .)
    SEMI            reduce using rule 24 (mode_definition -> identifier_list ASSIGN mode .)


state 94

    (15) declaration_list -> declaration COMMA declaration_list .

    SEMI            reduce using rule 15 (declaration_list -> declaration COMMA declaration_list .)


state 95

    (18) initialization -> ASSIGN . expression
    (72) expression -> . operand0
    (73) operand0 -> . operand1
    (74) operand0 -> . operand0 operator1 operand1
    (75) operand1 -> . operand2
    (76) operand1 -> . operand1 operator2 operand2
    (77) operand2 -> . operand3
    (78) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (79) operand3 -> . monadic_operator operand4
    (80) operand3 -> . operand4
    (86) monadic_operator -> . MINUS
    (87) monadic_operator -> . NOT
    (81) operand4 -> . primitive_value
    (82) operand4 -> . location
    (104) primitive_value -> . literal
    (54) location -> . ID
    (55) location -> . dereferenced_reference
    (56) location -> . string_element
    (57) location -> . string_slice
    (58) location -> . array_element
    (59) location -> . array_slice
    (105) literal -> . integer_literal
    (106) literal -> . boolean_literal
    (107) literal -> . character_literal
    (108) literal -> . empty_literal
    (109) literal -> . character_string_literal
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . string_location LBRACKET start_element LBRACKET
    (63) string_slice -> . string_location LBRACKET left_element COLON right_element RBRACKET
    (67) array_element -> . array_location LBRACKET expression_list RBRACKET
    (70) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (110) integer_literal -> . ICONST
    (111) boolean_literal -> . TRUE
    (112) boolean_literal -> . FALSE
    (113) character_literal -> . CCONST
    (114) empty_literal -> . NULL
    (115) character_string_literal -> . SCONST
    (64) string_location -> . ID
    (71) array_location -> . location

    MINUS           shift and go to state 83
    NOT             shift and go to state 67
    ID              shift and go to state 61
    ICONST          shift and go to state 57
    TRUE            shift and go to state 79
    FALSE           shift and go to state 71
    CCONST          shift and go to state 60
    NULL            shift and go to state 76
    SCONST          shift and go to state 64

    operand1                       shift and go to state 68
    character_string_literal       shift and go to state 80
    monadic_operator               shift and go to state 65
    string_slice                   shift and go to state 55
    boolean_literal                shift and go to state 75
    empty_literal                  shift and go to state 70
    primitive_value                shift and go to state 56
    array_location                 shift and go to state 73
    array_element                  shift and go to state 74
    string_location                shift and go to state 62
    operand2                       shift and go to state 69
    dereferenced_reference         shift and go to state 59
    operand0                       shift and go to state 77
    operand3                       shift and go to state 63
    string_element                 shift and go to state 78
    integer_literal                shift and go to state 66
    operand4                       shift and go to state 81
    expression                     shift and go to state 135
    literal                        shift and go to state 58
    array_slice                    shift and go to state 84
    location                       shift and go to state 85
    character_literal              shift and go to state 72

state 96

    (16) declaration -> identifier_list mode initialization .

    COMMA           reduce using rule 16 (declaration -> identifier_list mode initialization .)
    SEMI            reduce using rule 16 (declaration -> identifier_list mode initialization .)


state 97

    (61) string_element -> string_location LBRACKET . start_element LBRACKET
    (63) string_slice -> string_location LBRACKET . left_element COLON right_element RBRACKET
    (62) start_element -> . expression
    (65) left_element -> . expression
    (72) expression -> . operand0
    (73) operand0 -> . operand1
    (74) operand0 -> . operand0 operator1 operand1
    (75) operand1 -> . operand2
    (76) operand1 -> . operand1 operator2 operand2
    (77) operand2 -> . operand3
    (78) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (79) operand3 -> . monadic_operator operand4
    (80) operand3 -> . operand4
    (86) monadic_operator -> . MINUS
    (87) monadic_operator -> . NOT
    (81) operand4 -> . primitive_value
    (82) operand4 -> . location
    (104) primitive_value -> . literal
    (54) location -> . ID
    (55) location -> . dereferenced_reference
    (56) location -> . string_element
    (57) location -> . string_slice
    (58) location -> . array_element
    (59) location -> . array_slice
    (105) literal -> . integer_literal
    (106) literal -> . boolean_literal
    (107) literal -> . character_literal
    (108) literal -> . empty_literal
    (109) literal -> . character_string_literal
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . string_location LBRACKET start_element LBRACKET
    (63) string_slice -> . string_location LBRACKET left_element COLON right_element RBRACKET
    (67) array_element -> . array_location LBRACKET expression_list RBRACKET
    (70) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (110) integer_literal -> . ICONST
    (111) boolean_literal -> . TRUE
    (112) boolean_literal -> . FALSE
    (113) character_literal -> . CCONST
    (114) empty_literal -> . NULL
    (115) character_string_literal -> . SCONST
    (64) string_location -> . ID
    (71) array_location -> . location

    MINUS           shift and go to state 83
    NOT             shift and go to state 67
    ID              shift and go to state 61
    ICONST          shift and go to state 57
    TRUE            shift and go to state 79
    FALSE           shift and go to state 71
    CCONST          shift and go to state 60
    NULL            shift and go to state 76
    SCONST          shift and go to state 64

    operand1                       shift and go to state 68
    literal                        shift and go to state 58
    character_string_literal       shift and go to state 80
    monadic_operator               shift and go to state 65
    string_slice                   shift and go to state 55
    boolean_literal                shift and go to state 75
    empty_literal                  shift and go to state 70
    left_element                   shift and go to state 138
    primitive_value                shift and go to state 56
    array_location                 shift and go to state 73
    array_element                  shift and go to state 74
    string_location                shift and go to state 62
    operand2                       shift and go to state 69
    dereferenced_reference         shift and go to state 59
    operand0                       shift and go to state 77
    operand3                       shift and go to state 63
    string_element                 shift and go to state 78
    integer_literal                shift and go to state 66
    operand4                       shift and go to state 81
    expression                     shift and go to state 136
    start_element                  shift and go to state 137
    array_slice                    shift and go to state 84
    location                       shift and go to state 85
    character_literal              shift and go to state 72

state 98

    (79) operand3 -> monadic_operator operand4 .

    TIMES           reduce using rule 79 (operand3 -> monadic_operator operand4 .)
    DIVIDE          reduce using rule 79 (operand3 -> monadic_operator operand4 .)
    MODULO          reduce using rule 79 (operand3 -> monadic_operator operand4 .)
    PLUS            reduce using rule 79 (operand3 -> monadic_operator operand4 .)
    MINUS           reduce using rule 79 (operand3 -> monadic_operator operand4 .)
    CONCAT          reduce using rule 79 (operand3 -> monadic_operator operand4 .)
    AND             reduce using rule 79 (operand3 -> monadic_operator operand4 .)
    OR              reduce using rule 79 (operand3 -> monadic_operator operand4 .)
    EQUAL           reduce using rule 79 (operand3 -> monadic_operator operand4 .)
    NOTEQ           reduce using rule 79 (operand3 -> monadic_operator operand4 .)
    GREATER         reduce using rule 79 (operand3 -> monadic_operator operand4 .)
    GTEQUAL         reduce using rule 79 (operand3 -> monadic_operator operand4 .)
    LESS            reduce using rule 79 (operand3 -> monadic_operator operand4 .)
    LTEQUAL         reduce using rule 79 (operand3 -> monadic_operator operand4 .)
    IN              reduce using rule 79 (operand3 -> monadic_operator operand4 .)
    LBRACKET        reduce using rule 79 (operand3 -> monadic_operator operand4 .)
    COLON           reduce using rule 79 (operand3 -> monadic_operator operand4 .)
    COMMA           reduce using rule 79 (operand3 -> monadic_operator operand4 .)
    SEMI            reduce using rule 79 (operand3 -> monadic_operator operand4 .)
    RBRACKET        reduce using rule 79 (operand3 -> monadic_operator operand4 .)
    RPAREN          reduce using rule 79 (operand3 -> monadic_operator operand4 .)


state 99

    (92) arithmetic_additive_operator -> PLUS .

    MINUS           reduce using rule 92 (arithmetic_additive_operator -> PLUS .)
    NOT             reduce using rule 92 (arithmetic_additive_operator -> PLUS .)
    ID              reduce using rule 92 (arithmetic_additive_operator -> PLUS .)
    ICONST          reduce using rule 92 (arithmetic_additive_operator -> PLUS .)
    TRUE            reduce using rule 92 (arithmetic_additive_operator -> PLUS .)
    FALSE           reduce using rule 92 (arithmetic_additive_operator -> PLUS .)
    CCONST          reduce using rule 92 (arithmetic_additive_operator -> PLUS .)
    NULL            reduce using rule 92 (arithmetic_additive_operator -> PLUS .)
    SCONST          reduce using rule 92 (arithmetic_additive_operator -> PLUS .)


state 100

    (91) operator2 -> string_concatenation_operator .

    MINUS           reduce using rule 91 (operator2 -> string_concatenation_operator .)
    NOT             reduce using rule 91 (operator2 -> string_concatenation_operator .)
    ID              reduce using rule 91 (operator2 -> string_concatenation_operator .)
    ICONST          reduce using rule 91 (operator2 -> string_concatenation_operator .)
    TRUE            reduce using rule 91 (operator2 -> string_concatenation_operator .)
    FALSE           reduce using rule 91 (operator2 -> string_concatenation_operator .)
    CCONST          reduce using rule 91 (operator2 -> string_concatenation_operator .)
    NULL            reduce using rule 91 (operator2 -> string_concatenation_operator .)
    SCONST          reduce using rule 91 (operator2 -> string_concatenation_operator .)


state 101

    (93) arithmetic_additive_operator -> MINUS .

    MINUS           reduce using rule 93 (arithmetic_additive_operator -> MINUS .)
    NOT             reduce using rule 93 (arithmetic_additive_operator -> MINUS .)
    ID              reduce using rule 93 (arithmetic_additive_operator -> MINUS .)
    ICONST          reduce using rule 93 (arithmetic_additive_operator -> MINUS .)
    TRUE            reduce using rule 93 (arithmetic_additive_operator -> MINUS .)
    FALSE           reduce using rule 93 (arithmetic_additive_operator -> MINUS .)
    CCONST          reduce using rule 93 (arithmetic_additive_operator -> MINUS .)
    NULL            reduce using rule 93 (arithmetic_additive_operator -> MINUS .)
    SCONST          reduce using rule 93 (arithmetic_additive_operator -> MINUS .)


state 102

    (90) operator2 -> arithmetic_additive_operator .

    MINUS           reduce using rule 90 (operator2 -> arithmetic_additive_operator .)
    NOT             reduce using rule 90 (operator2 -> arithmetic_additive_operator .)
    ID              reduce using rule 90 (operator2 -> arithmetic_additive_operator .)
    ICONST          reduce using rule 90 (operator2 -> arithmetic_additive_operator .)
    TRUE            reduce using rule 90 (operator2 -> arithmetic_additive_operator .)
    FALSE           reduce using rule 90 (operator2 -> arithmetic_additive_operator .)
    CCONST          reduce using rule 90 (operator2 -> arithmetic_additive_operator .)
    NULL            reduce using rule 90 (operator2 -> arithmetic_additive_operator .)
    SCONST          reduce using rule 90 (operator2 -> arithmetic_additive_operator .)


state 103

    (76) operand1 -> operand1 operator2 . operand2
    (77) operand2 -> . operand3
    (78) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (79) operand3 -> . monadic_operator operand4
    (80) operand3 -> . operand4
    (86) monadic_operator -> . MINUS
    (87) monadic_operator -> . NOT
    (81) operand4 -> . primitive_value
    (82) operand4 -> . location
    (104) primitive_value -> . literal
    (54) location -> . ID
    (55) location -> . dereferenced_reference
    (56) location -> . string_element
    (57) location -> . string_slice
    (58) location -> . array_element
    (59) location -> . array_slice
    (105) literal -> . integer_literal
    (106) literal -> . boolean_literal
    (107) literal -> . character_literal
    (108) literal -> . empty_literal
    (109) literal -> . character_string_literal
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . string_location LBRACKET start_element LBRACKET
    (63) string_slice -> . string_location LBRACKET left_element COLON right_element RBRACKET
    (67) array_element -> . array_location LBRACKET expression_list RBRACKET
    (70) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (110) integer_literal -> . ICONST
    (111) boolean_literal -> . TRUE
    (112) boolean_literal -> . FALSE
    (113) character_literal -> . CCONST
    (114) empty_literal -> . NULL
    (115) character_string_literal -> . SCONST
    (64) string_location -> . ID
    (71) array_location -> . location

    MINUS           shift and go to state 83
    NOT             shift and go to state 67
    ID              shift and go to state 61
    ICONST          shift and go to state 57
    TRUE            shift and go to state 79
    FALSE           shift and go to state 71
    CCONST          shift and go to state 60
    NULL            shift and go to state 76
    SCONST          shift and go to state 64

    monadic_operator               shift and go to state 65
    string_slice                   shift and go to state 55
    boolean_literal                shift and go to state 75
    empty_literal                  shift and go to state 70
    primitive_value                shift and go to state 56
    array_location                 shift and go to state 73
    array_element                  shift and go to state 74
    string_location                shift and go to state 62
    operand2                       shift and go to state 139
    dereferenced_reference         shift and go to state 59
    operand3                       shift and go to state 63
    string_element                 shift and go to state 78
    character_string_literal       shift and go to state 80
    operand4                       shift and go to state 81
    integer_literal                shift and go to state 66
    literal                        shift and go to state 58
    array_slice                    shift and go to state 84
    location                       shift and go to state 85
    character_literal              shift and go to state 72

state 104

    (94) string_concatenation_operator -> CONCAT .

    MINUS           reduce using rule 94 (string_concatenation_operator -> CONCAT .)
    NOT             reduce using rule 94 (string_concatenation_operator -> CONCAT .)
    ID              reduce using rule 94 (string_concatenation_operator -> CONCAT .)
    ICONST          reduce using rule 94 (string_concatenation_operator -> CONCAT .)
    TRUE            reduce using rule 94 (string_concatenation_operator -> CONCAT .)
    FALSE           reduce using rule 94 (string_concatenation_operator -> CONCAT .)
    CCONST          reduce using rule 94 (string_concatenation_operator -> CONCAT .)
    NULL            reduce using rule 94 (string_concatenation_operator -> CONCAT .)
    SCONST          reduce using rule 94 (string_concatenation_operator -> CONCAT .)


state 105

    (85) arithmetic_multiplicative_operator -> MODULO .

    MINUS           reduce using rule 85 (arithmetic_multiplicative_operator -> MODULO .)
    NOT             reduce using rule 85 (arithmetic_multiplicative_operator -> MODULO .)
    ID              reduce using rule 85 (arithmetic_multiplicative_operator -> MODULO .)
    ICONST          reduce using rule 85 (arithmetic_multiplicative_operator -> MODULO .)
    TRUE            reduce using rule 85 (arithmetic_multiplicative_operator -> MODULO .)
    FALSE           reduce using rule 85 (arithmetic_multiplicative_operator -> MODULO .)
    CCONST          reduce using rule 85 (arithmetic_multiplicative_operator -> MODULO .)
    NULL            reduce using rule 85 (arithmetic_multiplicative_operator -> MODULO .)
    SCONST          reduce using rule 85 (arithmetic_multiplicative_operator -> MODULO .)


state 106

    (78) operand2 -> operand2 arithmetic_multiplicative_operator . operand3
    (79) operand3 -> . monadic_operator operand4
    (80) operand3 -> . operand4
    (86) monadic_operator -> . MINUS
    (87) monadic_operator -> . NOT
    (81) operand4 -> . primitive_value
    (82) operand4 -> . location
    (104) primitive_value -> . literal
    (54) location -> . ID
    (55) location -> . dereferenced_reference
    (56) location -> . string_element
    (57) location -> . string_slice
    (58) location -> . array_element
    (59) location -> . array_slice
    (105) literal -> . integer_literal
    (106) literal -> . boolean_literal
    (107) literal -> . character_literal
    (108) literal -> . empty_literal
    (109) literal -> . character_string_literal
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . string_location LBRACKET start_element LBRACKET
    (63) string_slice -> . string_location LBRACKET left_element COLON right_element RBRACKET
    (67) array_element -> . array_location LBRACKET expression_list RBRACKET
    (70) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (110) integer_literal -> . ICONST
    (111) boolean_literal -> . TRUE
    (112) boolean_literal -> . FALSE
    (113) character_literal -> . CCONST
    (114) empty_literal -> . NULL
    (115) character_string_literal -> . SCONST
    (64) string_location -> . ID
    (71) array_location -> . location

    MINUS           shift and go to state 83
    NOT             shift and go to state 67
    ID              shift and go to state 61
    ICONST          shift and go to state 57
    TRUE            shift and go to state 79
    FALSE           shift and go to state 71
    CCONST          shift and go to state 60
    NULL            shift and go to state 76
    SCONST          shift and go to state 64

    monadic_operator               shift and go to state 65
    string_slice                   shift and go to state 55
    boolean_literal                shift and go to state 75
    empty_literal                  shift and go to state 70
    primitive_value                shift and go to state 56
    array_location                 shift and go to state 73
    array_element                  shift and go to state 74
    string_location                shift and go to state 62
    integer_literal                shift and go to state 66
    operand3                       shift and go to state 140
    string_element                 shift and go to state 78
    character_string_literal       shift and go to state 80
    operand4                       shift and go to state 81
    literal                        shift and go to state 58
    array_slice                    shift and go to state 84
    dereferenced_reference         shift and go to state 59
    location                       shift and go to state 85
    character_literal              shift and go to state 72

state 107

    (83) arithmetic_multiplicative_operator -> TIMES .

    MINUS           reduce using rule 83 (arithmetic_multiplicative_operator -> TIMES .)
    NOT             reduce using rule 83 (arithmetic_multiplicative_operator -> TIMES .)
    ID              reduce using rule 83 (arithmetic_multiplicative_operator -> TIMES .)
    ICONST          reduce using rule 83 (arithmetic_multiplicative_operator -> TIMES .)
    TRUE            reduce using rule 83 (arithmetic_multiplicative_operator -> TIMES .)
    FALSE           reduce using rule 83 (arithmetic_multiplicative_operator -> TIMES .)
    CCONST          reduce using rule 83 (arithmetic_multiplicative_operator -> TIMES .)
    NULL            reduce using rule 83 (arithmetic_multiplicative_operator -> TIMES .)
    SCONST          reduce using rule 83 (arithmetic_multiplicative_operator -> TIMES .)


state 108

    (84) arithmetic_multiplicative_operator -> DIVIDE .

    MINUS           reduce using rule 84 (arithmetic_multiplicative_operator -> DIVIDE .)
    NOT             reduce using rule 84 (arithmetic_multiplicative_operator -> DIVIDE .)
    ID              reduce using rule 84 (arithmetic_multiplicative_operator -> DIVIDE .)
    ICONST          reduce using rule 84 (arithmetic_multiplicative_operator -> DIVIDE .)
    TRUE            reduce using rule 84 (arithmetic_multiplicative_operator -> DIVIDE .)
    FALSE           reduce using rule 84 (arithmetic_multiplicative_operator -> DIVIDE .)
    CCONST          reduce using rule 84 (arithmetic_multiplicative_operator -> DIVIDE .)
    NULL            reduce using rule 84 (arithmetic_multiplicative_operator -> DIVIDE .)
    SCONST          reduce using rule 84 (arithmetic_multiplicative_operator -> DIVIDE .)


state 109

    (67) array_element -> array_location LBRACKET . expression_list RBRACKET
    (70) array_slice -> array_location LBRACKET . lower_bound COLON upper_bound RBRACKET
    (68) expression_list -> . expression
    (69) expression_list -> . expression COMMA expression_list
    (41) lower_bound -> . expression
    (72) expression -> . operand0
    (73) operand0 -> . operand1
    (74) operand0 -> . operand0 operator1 operand1
    (75) operand1 -> . operand2
    (76) operand1 -> . operand1 operator2 operand2
    (77) operand2 -> . operand3
    (78) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (79) operand3 -> . monadic_operator operand4
    (80) operand3 -> . operand4
    (86) monadic_operator -> . MINUS
    (87) monadic_operator -> . NOT
    (81) operand4 -> . primitive_value
    (82) operand4 -> . location
    (104) primitive_value -> . literal
    (54) location -> . ID
    (55) location -> . dereferenced_reference
    (56) location -> . string_element
    (57) location -> . string_slice
    (58) location -> . array_element
    (59) location -> . array_slice
    (105) literal -> . integer_literal
    (106) literal -> . boolean_literal
    (107) literal -> . character_literal
    (108) literal -> . empty_literal
    (109) literal -> . character_string_literal
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . string_location LBRACKET start_element LBRACKET
    (63) string_slice -> . string_location LBRACKET left_element COLON right_element RBRACKET
    (67) array_element -> . array_location LBRACKET expression_list RBRACKET
    (70) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (110) integer_literal -> . ICONST
    (111) boolean_literal -> . TRUE
    (112) boolean_literal -> . FALSE
    (113) character_literal -> . CCONST
    (114) empty_literal -> . NULL
    (115) character_string_literal -> . SCONST
    (64) string_location -> . ID
    (71) array_location -> . location

    MINUS           shift and go to state 83
    NOT             shift and go to state 67
    ID              shift and go to state 61
    ICONST          shift and go to state 57
    TRUE            shift and go to state 79
    FALSE           shift and go to state 71
    CCONST          shift and go to state 60
    NULL            shift and go to state 76
    SCONST          shift and go to state 64

    operand1                       shift and go to state 68
    character_string_literal       shift and go to state 80
    monadic_operator               shift and go to state 65
    string_slice                   shift and go to state 55
    boolean_literal                shift and go to state 75
    empty_literal                  shift and go to state 70
    primitive_value                shift and go to state 56
    array_location                 shift and go to state 73
    array_element                  shift and go to state 74
    string_location                shift and go to state 62
    expression_list                shift and go to state 141
    operand2                       shift and go to state 69
    dereferenced_reference         shift and go to state 59
    operand0                       shift and go to state 77
    operand3                       shift and go to state 63
    lower_bound                    shift and go to state 143
    string_element                 shift and go to state 78
    integer_literal                shift and go to state 66
    operand4                       shift and go to state 81
    expression                     shift and go to state 142
    literal                        shift and go to state 58
    array_slice                    shift and go to state 84
    location                       shift and go to state 85
    character_literal              shift and go to state 72

state 110

    (96) relational_operator -> OR .

    MINUS           reduce using rule 96 (relational_operator -> OR .)
    NOT             reduce using rule 96 (relational_operator -> OR .)
    ID              reduce using rule 96 (relational_operator -> OR .)
    ICONST          reduce using rule 96 (relational_operator -> OR .)
    TRUE            reduce using rule 96 (relational_operator -> OR .)
    FALSE           reduce using rule 96 (relational_operator -> OR .)
    CCONST          reduce using rule 96 (relational_operator -> OR .)
    NULL            reduce using rule 96 (relational_operator -> OR .)
    SCONST          reduce using rule 96 (relational_operator -> OR .)


state 111

    (95) relational_operator -> AND .

    MINUS           reduce using rule 95 (relational_operator -> AND .)
    NOT             reduce using rule 95 (relational_operator -> AND .)
    ID              reduce using rule 95 (relational_operator -> AND .)
    ICONST          reduce using rule 95 (relational_operator -> AND .)
    TRUE            reduce using rule 95 (relational_operator -> AND .)
    FALSE           reduce using rule 95 (relational_operator -> AND .)
    CCONST          reduce using rule 95 (relational_operator -> AND .)
    NULL            reduce using rule 95 (relational_operator -> AND .)
    SCONST          reduce using rule 95 (relational_operator -> AND .)


state 112

    (100) relational_operator -> GTEQUAL .

    MINUS           reduce using rule 100 (relational_operator -> GTEQUAL .)
    NOT             reduce using rule 100 (relational_operator -> GTEQUAL .)
    ID              reduce using rule 100 (relational_operator -> GTEQUAL .)
    ICONST          reduce using rule 100 (relational_operator -> GTEQUAL .)
    TRUE            reduce using rule 100 (relational_operator -> GTEQUAL .)
    FALSE           reduce using rule 100 (relational_operator -> GTEQUAL .)
    CCONST          reduce using rule 100 (relational_operator -> GTEQUAL .)
    NULL            reduce using rule 100 (relational_operator -> GTEQUAL .)
    SCONST          reduce using rule 100 (relational_operator -> GTEQUAL .)


state 113

    (102) relational_operator -> LTEQUAL .

    MINUS           reduce using rule 102 (relational_operator -> LTEQUAL .)
    NOT             reduce using rule 102 (relational_operator -> LTEQUAL .)
    ID              reduce using rule 102 (relational_operator -> LTEQUAL .)
    ICONST          reduce using rule 102 (relational_operator -> LTEQUAL .)
    TRUE            reduce using rule 102 (relational_operator -> LTEQUAL .)
    FALSE           reduce using rule 102 (relational_operator -> LTEQUAL .)
    CCONST          reduce using rule 102 (relational_operator -> LTEQUAL .)
    NULL            reduce using rule 102 (relational_operator -> LTEQUAL .)
    SCONST          reduce using rule 102 (relational_operator -> LTEQUAL .)


state 114

    (74) operand0 -> operand0 operator1 . operand1
    (75) operand1 -> . operand2
    (76) operand1 -> . operand1 operator2 operand2
    (77) operand2 -> . operand3
    (78) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (79) operand3 -> . monadic_operator operand4
    (80) operand3 -> . operand4
    (86) monadic_operator -> . MINUS
    (87) monadic_operator -> . NOT
    (81) operand4 -> . primitive_value
    (82) operand4 -> . location
    (104) primitive_value -> . literal
    (54) location -> . ID
    (55) location -> . dereferenced_reference
    (56) location -> . string_element
    (57) location -> . string_slice
    (58) location -> . array_element
    (59) location -> . array_slice
    (105) literal -> . integer_literal
    (106) literal -> . boolean_literal
    (107) literal -> . character_literal
    (108) literal -> . empty_literal
    (109) literal -> . character_string_literal
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . string_location LBRACKET start_element LBRACKET
    (63) string_slice -> . string_location LBRACKET left_element COLON right_element RBRACKET
    (67) array_element -> . array_location LBRACKET expression_list RBRACKET
    (70) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (110) integer_literal -> . ICONST
    (111) boolean_literal -> . TRUE
    (112) boolean_literal -> . FALSE
    (113) character_literal -> . CCONST
    (114) empty_literal -> . NULL
    (115) character_string_literal -> . SCONST
    (64) string_location -> . ID
    (71) array_location -> . location

    MINUS           shift and go to state 83
    NOT             shift and go to state 67
    ID              shift and go to state 61
    ICONST          shift and go to state 57
    TRUE            shift and go to state 79
    FALSE           shift and go to state 71
    CCONST          shift and go to state 60
    NULL            shift and go to state 76
    SCONST          shift and go to state 64

    operand1                       shift and go to state 144
    character_string_literal       shift and go to state 80
    monadic_operator               shift and go to state 65
    string_slice                   shift and go to state 55
    boolean_literal                shift and go to state 75
    empty_literal                  shift and go to state 70
    primitive_value                shift and go to state 56
    array_location                 shift and go to state 73
    array_element                  shift and go to state 74
    string_location                shift and go to state 62
    operand2                       shift and go to state 69
    dereferenced_reference         shift and go to state 59
    operand3                       shift and go to state 63
    string_element                 shift and go to state 78
    integer_literal                shift and go to state 66
    operand4                       shift and go to state 81
    literal                        shift and go to state 58
    array_slice                    shift and go to state 84
    location                       shift and go to state 85
    character_literal              shift and go to state 72

state 115

    (97) relational_operator -> EQUAL .

    MINUS           reduce using rule 97 (relational_operator -> EQUAL .)
    NOT             reduce using rule 97 (relational_operator -> EQUAL .)
    ID              reduce using rule 97 (relational_operator -> EQUAL .)
    ICONST          reduce using rule 97 (relational_operator -> EQUAL .)
    TRUE            reduce using rule 97 (relational_operator -> EQUAL .)
    FALSE           reduce using rule 97 (relational_operator -> EQUAL .)
    CCONST          reduce using rule 97 (relational_operator -> EQUAL .)
    NULL            reduce using rule 97 (relational_operator -> EQUAL .)
    SCONST          reduce using rule 97 (relational_operator -> EQUAL .)


state 116

    (98) relational_operator -> NOTEQ .

    MINUS           reduce using rule 98 (relational_operator -> NOTEQ .)
    NOT             reduce using rule 98 (relational_operator -> NOTEQ .)
    ID              reduce using rule 98 (relational_operator -> NOTEQ .)
    ICONST          reduce using rule 98 (relational_operator -> NOTEQ .)
    TRUE            reduce using rule 98 (relational_operator -> NOTEQ .)
    FALSE           reduce using rule 98 (relational_operator -> NOTEQ .)
    CCONST          reduce using rule 98 (relational_operator -> NOTEQ .)
    NULL            reduce using rule 98 (relational_operator -> NOTEQ .)
    SCONST          reduce using rule 98 (relational_operator -> NOTEQ .)


state 117

    (88) operator1 -> relational_operator .

    MINUS           reduce using rule 88 (operator1 -> relational_operator .)
    NOT             reduce using rule 88 (operator1 -> relational_operator .)
    ID              reduce using rule 88 (operator1 -> relational_operator .)
    ICONST          reduce using rule 88 (operator1 -> relational_operator .)
    TRUE            reduce using rule 88 (operator1 -> relational_operator .)
    FALSE           reduce using rule 88 (operator1 -> relational_operator .)
    CCONST          reduce using rule 88 (operator1 -> relational_operator .)
    NULL            reduce using rule 88 (operator1 -> relational_operator .)
    SCONST          reduce using rule 88 (operator1 -> relational_operator .)


state 118

    (103) membership_operator -> IN .

    MINUS           reduce using rule 103 (membership_operator -> IN .)
    NOT             reduce using rule 103 (membership_operator -> IN .)
    ID              reduce using rule 103 (membership_operator -> IN .)
    ICONST          reduce using rule 103 (membership_operator -> IN .)
    TRUE            reduce using rule 103 (membership_operator -> IN .)
    FALSE           reduce using rule 103 (membership_operator -> IN .)
    CCONST          reduce using rule 103 (membership_operator -> IN .)
    NULL            reduce using rule 103 (membership_operator -> IN .)
    SCONST          reduce using rule 103 (membership_operator -> IN .)


state 119

    (99) relational_operator -> GREATER .

    MINUS           reduce using rule 99 (relational_operator -> GREATER .)
    NOT             reduce using rule 99 (relational_operator -> GREATER .)
    ID              reduce using rule 99 (relational_operator -> GREATER .)
    ICONST          reduce using rule 99 (relational_operator -> GREATER .)
    TRUE            reduce using rule 99 (relational_operator -> GREATER .)
    FALSE           reduce using rule 99 (relational_operator -> GREATER .)
    CCONST          reduce using rule 99 (relational_operator -> GREATER .)
    NULL            reduce using rule 99 (relational_operator -> GREATER .)
    SCONST          reduce using rule 99 (relational_operator -> GREATER .)


state 120

    (89) operator1 -> membership_operator .

    MINUS           reduce using rule 89 (operator1 -> membership_operator .)
    NOT             reduce using rule 89 (operator1 -> membership_operator .)
    ID              reduce using rule 89 (operator1 -> membership_operator .)
    ICONST          reduce using rule 89 (operator1 -> membership_operator .)
    TRUE            reduce using rule 89 (operator1 -> membership_operator .)
    FALSE           reduce using rule 89 (operator1 -> membership_operator .)
    CCONST          reduce using rule 89 (operator1 -> membership_operator .)
    NULL            reduce using rule 89 (operator1 -> membership_operator .)
    SCONST          reduce using rule 89 (operator1 -> membership_operator .)


state 121

    (101) relational_operator -> LESS .

    MINUS           reduce using rule 101 (relational_operator -> LESS .)
    NOT             reduce using rule 101 (relational_operator -> LESS .)
    ID              reduce using rule 101 (relational_operator -> LESS .)
    ICONST          reduce using rule 101 (relational_operator -> LESS .)
    TRUE            reduce using rule 101 (relational_operator -> LESS .)
    FALSE           reduce using rule 101 (relational_operator -> LESS .)
    CCONST          reduce using rule 101 (relational_operator -> LESS .)
    NULL            reduce using rule 101 (relational_operator -> LESS .)
    SCONST          reduce using rule 101 (relational_operator -> LESS .)


state 122

    (60) dereferenced_reference -> location ARROW .

    ARROW           reduce using rule 60 (dereferenced_reference -> location ARROW .)
    TIMES           reduce using rule 60 (dereferenced_reference -> location ARROW .)
    DIVIDE          reduce using rule 60 (dereferenced_reference -> location ARROW .)
    MODULO          reduce using rule 60 (dereferenced_reference -> location ARROW .)
    PLUS            reduce using rule 60 (dereferenced_reference -> location ARROW .)
    MINUS           reduce using rule 60 (dereferenced_reference -> location ARROW .)
    CONCAT          reduce using rule 60 (dereferenced_reference -> location ARROW .)
    AND             reduce using rule 60 (dereferenced_reference -> location ARROW .)
    OR              reduce using rule 60 (dereferenced_reference -> location ARROW .)
    EQUAL           reduce using rule 60 (dereferenced_reference -> location ARROW .)
    NOTEQ           reduce using rule 60 (dereferenced_reference -> location ARROW .)
    GREATER         reduce using rule 60 (dereferenced_reference -> location ARROW .)
    GTEQUAL         reduce using rule 60 (dereferenced_reference -> location ARROW .)
    LESS            reduce using rule 60 (dereferenced_reference -> location ARROW .)
    LTEQUAL         reduce using rule 60 (dereferenced_reference -> location ARROW .)
    IN              reduce using rule 60 (dereferenced_reference -> location ARROW .)
    COMMA           reduce using rule 60 (dereferenced_reference -> location ARROW .)
    RBRACKET        reduce using rule 60 (dereferenced_reference -> location ARROW .)
    LBRACKET        reduce using rule 60 (dereferenced_reference -> location ARROW .)
    COLON           reduce using rule 60 (dereferenced_reference -> location ARROW .)
    SEMI            reduce using rule 60 (dereferenced_reference -> location ARROW .)
    RPAREN          reduce using rule 60 (dereferenced_reference -> location ARROW .)


state 123

    (46) string_mode -> CHARS LBRACKET string_length . RBRACKET

    RBRACKET        shift and go to state 145


state 124

    (47) string_length -> integer_literal .

    RBRACKET        reduce using rule 47 (string_length -> integer_literal .)


state 125

    (41) lower_bound -> expression .

    COLON           reduce using rule 41 (lower_bound -> expression .)


state 126

    (39) discrete_range_mode -> discrete_mode LPAREN literal_range . RPAREN

    RPAREN          shift and go to state 146


state 127

    (40) literal_range -> lower_bound . COLON upper_bound

    COLON           shift and go to state 147


state 128

    (34) discrete_mode_name -> ID .
    (54) location -> ID .
    (64) string_location -> ID .

  ! reduce/reduce conflict for LBRACKET resolved using rule 54 (location -> ID .)
    LPAREN          reduce using rule 34 (discrete_mode_name -> ID .)
    ARROW           reduce using rule 54 (location -> ID .)
    TIMES           reduce using rule 54 (location -> ID .)
    DIVIDE          reduce using rule 54 (location -> ID .)
    MODULO          reduce using rule 54 (location -> ID .)
    PLUS            reduce using rule 54 (location -> ID .)
    MINUS           reduce using rule 54 (location -> ID .)
    CONCAT          reduce using rule 54 (location -> ID .)
    AND             reduce using rule 54 (location -> ID .)
    OR              reduce using rule 54 (location -> ID .)
    EQUAL           reduce using rule 54 (location -> ID .)
    NOTEQ           reduce using rule 54 (location -> ID .)
    GREATER         reduce using rule 54 (location -> ID .)
    GTEQUAL         reduce using rule 54 (location -> ID .)
    LESS            reduce using rule 54 (location -> ID .)
    LTEQUAL         reduce using rule 54 (location -> ID .)
    IN              reduce using rule 54 (location -> ID .)
    COLON           reduce using rule 54 (location -> ID .)
    LBRACKET        reduce using rule 54 (location -> ID .)

  ! LBRACKET        [ reduce using rule 64 (string_location -> ID .) ]


state 129

    (51) index_mode -> discrete_mode .
    (39) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    COMMA           reduce using rule 51 (index_mode -> discrete_mode .)
    RBRACKET        reduce using rule 51 (index_mode -> discrete_mode .)
    LPAREN          shift and go to state 87


state 130

    (48) array_mode -> ARRAY LBRACKET index_mode_list . RBRACKET element_mode

    RBRACKET        shift and go to state 148


state 131

    (52) index_mode -> literal_range .

    COMMA           reduce using rule 52 (index_mode -> literal_range .)
    RBRACKET        reduce using rule 52 (index_mode -> literal_range .)


state 132

    (49) index_mode_list -> index_mode .
    (50) index_mode_list -> index_mode . COMMA index_mode_list

    RBRACKET        reduce using rule 49 (index_mode_list -> index_mode .)
    COMMA           shift and go to state 149


state 133

    (38) discrete_range_mode -> discrete_mode_name LPAREN literal_range . RPAREN

    RPAREN          shift and go to state 150


state 134

    (11) synonym_definition -> identifier_list mode ASSIGN expression .

    COMMA           reduce using rule 11 (synonym_definition -> identifier_list mode ASSIGN expression .)
    SEMI            reduce using rule 11 (synonym_definition -> identifier_list mode ASSIGN expression .)


state 135

    (18) initialization -> ASSIGN expression .

    COMMA           reduce using rule 18 (initialization -> ASSIGN expression .)
    SEMI            reduce using rule 18 (initialization -> ASSIGN expression .)


state 136

    (62) start_element -> expression .
    (65) left_element -> expression .

    LBRACKET        reduce using rule 62 (start_element -> expression .)
    COLON           reduce using rule 65 (left_element -> expression .)


state 137

    (61) string_element -> string_location LBRACKET start_element . LBRACKET

    LBRACKET        shift and go to state 151


state 138

    (63) string_slice -> string_location LBRACKET left_element . COLON right_element RBRACKET

    COLON           shift and go to state 152


state 139

    (76) operand1 -> operand1 operator2 operand2 .
    (78) operand2 -> operand2 . arithmetic_multiplicative_operator operand3
    (83) arithmetic_multiplicative_operator -> . TIMES
    (84) arithmetic_multiplicative_operator -> . DIVIDE
    (85) arithmetic_multiplicative_operator -> . MODULO

    PLUS            reduce using rule 76 (operand1 -> operand1 operator2 operand2 .)
    MINUS           reduce using rule 76 (operand1 -> operand1 operator2 operand2 .)
    CONCAT          reduce using rule 76 (operand1 -> operand1 operator2 operand2 .)
    AND             reduce using rule 76 (operand1 -> operand1 operator2 operand2 .)
    OR              reduce using rule 76 (operand1 -> operand1 operator2 operand2 .)
    EQUAL           reduce using rule 76 (operand1 -> operand1 operator2 operand2 .)
    NOTEQ           reduce using rule 76 (operand1 -> operand1 operator2 operand2 .)
    GREATER         reduce using rule 76 (operand1 -> operand1 operator2 operand2 .)
    GTEQUAL         reduce using rule 76 (operand1 -> operand1 operator2 operand2 .)
    LESS            reduce using rule 76 (operand1 -> operand1 operator2 operand2 .)
    LTEQUAL         reduce using rule 76 (operand1 -> operand1 operator2 operand2 .)
    IN              reduce using rule 76 (operand1 -> operand1 operator2 operand2 .)
    COMMA           reduce using rule 76 (operand1 -> operand1 operator2 operand2 .)
    SEMI            reduce using rule 76 (operand1 -> operand1 operator2 operand2 .)
    LBRACKET        reduce using rule 76 (operand1 -> operand1 operator2 operand2 .)
    COLON           reduce using rule 76 (operand1 -> operand1 operator2 operand2 .)
    RBRACKET        reduce using rule 76 (operand1 -> operand1 operator2 operand2 .)
    RPAREN          reduce using rule 76 (operand1 -> operand1 operator2 operand2 .)
    TIMES           shift and go to state 107
    DIVIDE          shift and go to state 108
    MODULO          shift and go to state 105

    arithmetic_multiplicative_operator shift and go to state 106

state 140

    (78) operand2 -> operand2 arithmetic_multiplicative_operator operand3 .

    TIMES           reduce using rule 78 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    DIVIDE          reduce using rule 78 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    MODULO          reduce using rule 78 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    PLUS            reduce using rule 78 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    MINUS           reduce using rule 78 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    CONCAT          reduce using rule 78 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    AND             reduce using rule 78 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    OR              reduce using rule 78 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    EQUAL           reduce using rule 78 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    NOTEQ           reduce using rule 78 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    GREATER         reduce using rule 78 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    GTEQUAL         reduce using rule 78 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LESS            reduce using rule 78 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LTEQUAL         reduce using rule 78 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    IN              reduce using rule 78 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    COMMA           reduce using rule 78 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    SEMI            reduce using rule 78 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    COLON           reduce using rule 78 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LBRACKET        reduce using rule 78 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    RBRACKET        reduce using rule 78 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    RPAREN          reduce using rule 78 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)


state 141

    (67) array_element -> array_location LBRACKET expression_list . RBRACKET

    RBRACKET        shift and go to state 153


state 142

    (68) expression_list -> expression .
    (69) expression_list -> expression . COMMA expression_list
    (41) lower_bound -> expression .

    RBRACKET        reduce using rule 68 (expression_list -> expression .)
    COMMA           shift and go to state 154
    COLON           reduce using rule 41 (lower_bound -> expression .)


state 143

    (70) array_slice -> array_location LBRACKET lower_bound . COLON upper_bound RBRACKET

    COLON           shift and go to state 155


state 144

    (74) operand0 -> operand0 operator1 operand1 .
    (76) operand1 -> operand1 . operator2 operand2
    (90) operator2 -> . arithmetic_additive_operator
    (91) operator2 -> . string_concatenation_operator
    (92) arithmetic_additive_operator -> . PLUS
    (93) arithmetic_additive_operator -> . MINUS
    (94) string_concatenation_operator -> . CONCAT

    AND             reduce using rule 74 (operand0 -> operand0 operator1 operand1 .)
    OR              reduce using rule 74 (operand0 -> operand0 operator1 operand1 .)
    EQUAL           reduce using rule 74 (operand0 -> operand0 operator1 operand1 .)
    NOTEQ           reduce using rule 74 (operand0 -> operand0 operator1 operand1 .)
    GREATER         reduce using rule 74 (operand0 -> operand0 operator1 operand1 .)
    GTEQUAL         reduce using rule 74 (operand0 -> operand0 operator1 operand1 .)
    LESS            reduce using rule 74 (operand0 -> operand0 operator1 operand1 .)
    LTEQUAL         reduce using rule 74 (operand0 -> operand0 operator1 operand1 .)
    IN              reduce using rule 74 (operand0 -> operand0 operator1 operand1 .)
    RBRACKET        reduce using rule 74 (operand0 -> operand0 operator1 operand1 .)
    RPAREN          reduce using rule 74 (operand0 -> operand0 operator1 operand1 .)
    COMMA           reduce using rule 74 (operand0 -> operand0 operator1 operand1 .)
    SEMI            reduce using rule 74 (operand0 -> operand0 operator1 operand1 .)
    COLON           reduce using rule 74 (operand0 -> operand0 operator1 operand1 .)
    LBRACKET        reduce using rule 74 (operand0 -> operand0 operator1 operand1 .)
    PLUS            shift and go to state 99
    MINUS           shift and go to state 101
    CONCAT          shift and go to state 104

    string_concatenation_operator  shift and go to state 100
    arithmetic_additive_operator   shift and go to state 102
    operator2                      shift and go to state 103

state 145

    (46) string_mode -> CHARS LBRACKET string_length RBRACKET .

    ASSIGN          reduce using rule 46 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    COMMA           reduce using rule 46 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    SEMI            reduce using rule 46 (string_mode -> CHARS LBRACKET string_length RBRACKET .)


state 146

    (39) discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .

    LPAREN          reduce using rule 39 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    COMMA           reduce using rule 39 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    RBRACKET        reduce using rule 39 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    ASSIGN          reduce using rule 39 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    SEMI            reduce using rule 39 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)


state 147

    (40) literal_range -> lower_bound COLON . upper_bound
    (42) upper_bound -> . expression
    (72) expression -> . operand0
    (73) operand0 -> . operand1
    (74) operand0 -> . operand0 operator1 operand1
    (75) operand1 -> . operand2
    (76) operand1 -> . operand1 operator2 operand2
    (77) operand2 -> . operand3
    (78) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (79) operand3 -> . monadic_operator operand4
    (80) operand3 -> . operand4
    (86) monadic_operator -> . MINUS
    (87) monadic_operator -> . NOT
    (81) operand4 -> . primitive_value
    (82) operand4 -> . location
    (104) primitive_value -> . literal
    (54) location -> . ID
    (55) location -> . dereferenced_reference
    (56) location -> . string_element
    (57) location -> . string_slice
    (58) location -> . array_element
    (59) location -> . array_slice
    (105) literal -> . integer_literal
    (106) literal -> . boolean_literal
    (107) literal -> . character_literal
    (108) literal -> . empty_literal
    (109) literal -> . character_string_literal
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . string_location LBRACKET start_element LBRACKET
    (63) string_slice -> . string_location LBRACKET left_element COLON right_element RBRACKET
    (67) array_element -> . array_location LBRACKET expression_list RBRACKET
    (70) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (110) integer_literal -> . ICONST
    (111) boolean_literal -> . TRUE
    (112) boolean_literal -> . FALSE
    (113) character_literal -> . CCONST
    (114) empty_literal -> . NULL
    (115) character_string_literal -> . SCONST
    (64) string_location -> . ID
    (71) array_location -> . location

    MINUS           shift and go to state 83
    NOT             shift and go to state 67
    ID              shift and go to state 61
    ICONST          shift and go to state 57
    TRUE            shift and go to state 79
    FALSE           shift and go to state 71
    CCONST          shift and go to state 60
    NULL            shift and go to state 76
    SCONST          shift and go to state 64

    operand1                       shift and go to state 68
    character_string_literal       shift and go to state 80
    monadic_operator               shift and go to state 65
    string_slice                   shift and go to state 55
    boolean_literal                shift and go to state 75
    empty_literal                  shift and go to state 70
    primitive_value                shift and go to state 56
    array_location                 shift and go to state 73
    array_element                  shift and go to state 74
    string_location                shift and go to state 62
    operand2                       shift and go to state 69
    dereferenced_reference         shift and go to state 59
    operand0                       shift and go to state 77
    upper_bound                    shift and go to state 156
    operand3                       shift and go to state 63
    string_element                 shift and go to state 78
    integer_literal                shift and go to state 66
    operand4                       shift and go to state 81
    expression                     shift and go to state 157
    literal                        shift and go to state 58
    array_slice                    shift and go to state 84
    location                       shift and go to state 85
    character_literal              shift and go to state 72

state 148

    (48) array_mode -> ARRAY LBRACKET index_mode_list RBRACKET . element_mode
    (53) element_mode -> . mode
    (25) mode -> . mode_name
    (26) mode -> . discrete_mode
    (27) mode -> . reference_mode
    (28) mode -> . composite_mode
    (29) mode_name -> . ID
    (30) discrete_mode -> . integer_mode
    (31) discrete_mode -> . boolean_mode
    (32) discrete_mode -> . character_mode
    (33) discrete_mode -> . discrete_range_mode
    (43) reference_mode -> . REF mode
    (44) composite_mode -> . string_mode
    (45) composite_mode -> . array_mode
    (35) integer_mode -> . INT
    (36) boolean_mode -> . BOOL
    (37) character_mode -> . CHAR
    (38) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (39) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (46) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (48) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (34) discrete_mode_name -> . ID

    ID              shift and go to state 37
    REF             shift and go to state 43
    INT             shift and go to state 38
    BOOL            shift and go to state 29
    CHAR            shift and go to state 28
    CHARS           shift and go to state 31
    ARRAY           shift and go to state 35

    boolean_mode                   shift and go to state 36
    composite_mode                 shift and go to state 26
    string_mode                    shift and go to state 39
    array_mode                     shift and go to state 40
    discrete_mode_name             shift and go to state 44
    mode_name                      shift and go to state 30
    reference_mode                 shift and go to state 41
    element_mode                   shift and go to state 158
    character_mode                 shift and go to state 42
    discrete_mode                  shift and go to state 32
    integer_mode                   shift and go to state 33
    discrete_range_mode            shift and go to state 34
    mode                           shift and go to state 159

state 149

    (50) index_mode_list -> index_mode COMMA . index_mode_list
    (49) index_mode_list -> . index_mode
    (50) index_mode_list -> . index_mode COMMA index_mode_list
    (51) index_mode -> . discrete_mode
    (52) index_mode -> . literal_range
    (30) discrete_mode -> . integer_mode
    (31) discrete_mode -> . boolean_mode
    (32) discrete_mode -> . character_mode
    (33) discrete_mode -> . discrete_range_mode
    (40) literal_range -> . lower_bound COLON upper_bound
    (35) integer_mode -> . INT
    (36) boolean_mode -> . BOOL
    (37) character_mode -> . CHAR
    (38) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (39) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (41) lower_bound -> . expression
    (34) discrete_mode_name -> . ID
    (72) expression -> . operand0
    (73) operand0 -> . operand1
    (74) operand0 -> . operand0 operator1 operand1
    (75) operand1 -> . operand2
    (76) operand1 -> . operand1 operator2 operand2
    (77) operand2 -> . operand3
    (78) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (79) operand3 -> . monadic_operator operand4
    (80) operand3 -> . operand4
    (86) monadic_operator -> . MINUS
    (87) monadic_operator -> . NOT
    (81) operand4 -> . primitive_value
    (82) operand4 -> . location
    (104) primitive_value -> . literal
    (54) location -> . ID
    (55) location -> . dereferenced_reference
    (56) location -> . string_element
    (57) location -> . string_slice
    (58) location -> . array_element
    (59) location -> . array_slice
    (105) literal -> . integer_literal
    (106) literal -> . boolean_literal
    (107) literal -> . character_literal
    (108) literal -> . empty_literal
    (109) literal -> . character_string_literal
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . string_location LBRACKET start_element LBRACKET
    (63) string_slice -> . string_location LBRACKET left_element COLON right_element RBRACKET
    (67) array_element -> . array_location LBRACKET expression_list RBRACKET
    (70) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (110) integer_literal -> . ICONST
    (111) boolean_literal -> . TRUE
    (112) boolean_literal -> . FALSE
    (113) character_literal -> . CCONST
    (114) empty_literal -> . NULL
    (115) character_string_literal -> . SCONST
    (64) string_location -> . ID
    (71) array_location -> . location

    INT             shift and go to state 38
    BOOL            shift and go to state 29
    CHAR            shift and go to state 28
    ID              shift and go to state 128
    MINUS           shift and go to state 83
    NOT             shift and go to state 67
    ICONST          shift and go to state 57
    TRUE            shift and go to state 79
    FALSE           shift and go to state 71
    CCONST          shift and go to state 60
    NULL            shift and go to state 76
    SCONST          shift and go to state 64

    operand1                       shift and go to state 68
    character_string_literal       shift and go to state 80
    monadic_operator               shift and go to state 65
    array_element                  shift and go to state 74
    string_slice                   shift and go to state 55
    index_mode                     shift and go to state 132
    empty_literal                  shift and go to state 70
    expression                     shift and go to state 125
    array_location                 shift and go to state 73
    discrete_mode                  shift and go to state 129
    string_location                shift and go to state 62
    integer_mode                   shift and go to state 33
    discrete_range_mode            shift and go to state 34
    dereferenced_reference         shift and go to state 59
    index_mode_list                shift and go to state 160
    boolean_mode                   shift and go to state 36
    literal                        shift and go to state 58
    boolean_literal                shift and go to state 75
    operand0                       shift and go to state 77
    operand3                       shift and go to state 63
    lower_bound                    shift and go to state 127
    string_element                 shift and go to state 78
    integer_literal                shift and go to state 66
    operand4                       shift and go to state 81
    discrete_mode_name             shift and go to state 44
    primitive_value                shift and go to state 56
    character_mode                 shift and go to state 42
    array_slice                    shift and go to state 84
    literal_range                  shift and go to state 131
    operand2                       shift and go to state 69
    location                       shift and go to state 85
    character_literal              shift and go to state 72

state 150

    (38) discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .

    LPAREN          reduce using rule 38 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    COMMA           reduce using rule 38 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    RBRACKET        reduce using rule 38 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    ASSIGN          reduce using rule 38 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    SEMI            reduce using rule 38 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)


state 151

    (61) string_element -> string_location LBRACKET start_element LBRACKET .

    ARROW           reduce using rule 61 (string_element -> string_location LBRACKET start_element LBRACKET .)
    TIMES           reduce using rule 61 (string_element -> string_location LBRACKET start_element LBRACKET .)
    DIVIDE          reduce using rule 61 (string_element -> string_location LBRACKET start_element LBRACKET .)
    MODULO          reduce using rule 61 (string_element -> string_location LBRACKET start_element LBRACKET .)
    PLUS            reduce using rule 61 (string_element -> string_location LBRACKET start_element LBRACKET .)
    MINUS           reduce using rule 61 (string_element -> string_location LBRACKET start_element LBRACKET .)
    CONCAT          reduce using rule 61 (string_element -> string_location LBRACKET start_element LBRACKET .)
    AND             reduce using rule 61 (string_element -> string_location LBRACKET start_element LBRACKET .)
    OR              reduce using rule 61 (string_element -> string_location LBRACKET start_element LBRACKET .)
    EQUAL           reduce using rule 61 (string_element -> string_location LBRACKET start_element LBRACKET .)
    NOTEQ           reduce using rule 61 (string_element -> string_location LBRACKET start_element LBRACKET .)
    GREATER         reduce using rule 61 (string_element -> string_location LBRACKET start_element LBRACKET .)
    GTEQUAL         reduce using rule 61 (string_element -> string_location LBRACKET start_element LBRACKET .)
    LESS            reduce using rule 61 (string_element -> string_location LBRACKET start_element LBRACKET .)
    LTEQUAL         reduce using rule 61 (string_element -> string_location LBRACKET start_element LBRACKET .)
    IN              reduce using rule 61 (string_element -> string_location LBRACKET start_element LBRACKET .)
    COMMA           reduce using rule 61 (string_element -> string_location LBRACKET start_element LBRACKET .)
    SEMI            reduce using rule 61 (string_element -> string_location LBRACKET start_element LBRACKET .)
    COLON           reduce using rule 61 (string_element -> string_location LBRACKET start_element LBRACKET .)
    LBRACKET        reduce using rule 61 (string_element -> string_location LBRACKET start_element LBRACKET .)
    RBRACKET        reduce using rule 61 (string_element -> string_location LBRACKET start_element LBRACKET .)
    RPAREN          reduce using rule 61 (string_element -> string_location LBRACKET start_element LBRACKET .)


state 152

    (63) string_slice -> string_location LBRACKET left_element COLON . right_element RBRACKET
    (66) right_element -> . expression
    (72) expression -> . operand0
    (73) operand0 -> . operand1
    (74) operand0 -> . operand0 operator1 operand1
    (75) operand1 -> . operand2
    (76) operand1 -> . operand1 operator2 operand2
    (77) operand2 -> . operand3
    (78) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (79) operand3 -> . monadic_operator operand4
    (80) operand3 -> . operand4
    (86) monadic_operator -> . MINUS
    (87) monadic_operator -> . NOT
    (81) operand4 -> . primitive_value
    (82) operand4 -> . location
    (104) primitive_value -> . literal
    (54) location -> . ID
    (55) location -> . dereferenced_reference
    (56) location -> . string_element
    (57) location -> . string_slice
    (58) location -> . array_element
    (59) location -> . array_slice
    (105) literal -> . integer_literal
    (106) literal -> . boolean_literal
    (107) literal -> . character_literal
    (108) literal -> . empty_literal
    (109) literal -> . character_string_literal
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . string_location LBRACKET start_element LBRACKET
    (63) string_slice -> . string_location LBRACKET left_element COLON right_element RBRACKET
    (67) array_element -> . array_location LBRACKET expression_list RBRACKET
    (70) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (110) integer_literal -> . ICONST
    (111) boolean_literal -> . TRUE
    (112) boolean_literal -> . FALSE
    (113) character_literal -> . CCONST
    (114) empty_literal -> . NULL
    (115) character_string_literal -> . SCONST
    (64) string_location -> . ID
    (71) array_location -> . location

    MINUS           shift and go to state 83
    NOT             shift and go to state 67
    ID              shift and go to state 61
    ICONST          shift and go to state 57
    TRUE            shift and go to state 79
    FALSE           shift and go to state 71
    CCONST          shift and go to state 60
    NULL            shift and go to state 76
    SCONST          shift and go to state 64

    operand1                       shift and go to state 68
    literal                        shift and go to state 58
    character_string_literal       shift and go to state 80
    monadic_operator               shift and go to state 65
    string_slice                   shift and go to state 55
    boolean_literal                shift and go to state 75
    empty_literal                  shift and go to state 70
    primitive_value                shift and go to state 56
    array_location                 shift and go to state 73
    array_element                  shift and go to state 74
    right_element                  shift and go to state 161
    operand2                       shift and go to state 69
    dereferenced_reference         shift and go to state 59
    operand0                       shift and go to state 77
    string_location                shift and go to state 62
    operand3                       shift and go to state 63
    string_element                 shift and go to state 78
    integer_literal                shift and go to state 66
    operand4                       shift and go to state 81
    expression                     shift and go to state 162
    array_slice                    shift and go to state 84
    location                       shift and go to state 85
    character_literal              shift and go to state 72

state 153

    (67) array_element -> array_location LBRACKET expression_list RBRACKET .

    ARROW           reduce using rule 67 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    TIMES           reduce using rule 67 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    DIVIDE          reduce using rule 67 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    MODULO          reduce using rule 67 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    PLUS            reduce using rule 67 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    MINUS           reduce using rule 67 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    CONCAT          reduce using rule 67 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    AND             reduce using rule 67 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    OR              reduce using rule 67 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    EQUAL           reduce using rule 67 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    NOTEQ           reduce using rule 67 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    GREATER         reduce using rule 67 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    GTEQUAL         reduce using rule 67 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    LESS            reduce using rule 67 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    LTEQUAL         reduce using rule 67 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    IN              reduce using rule 67 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    COMMA           reduce using rule 67 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    SEMI            reduce using rule 67 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    LBRACKET        reduce using rule 67 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    COLON           reduce using rule 67 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    RBRACKET        reduce using rule 67 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    RPAREN          reduce using rule 67 (array_element -> array_location LBRACKET expression_list RBRACKET .)


state 154

    (69) expression_list -> expression COMMA . expression_list
    (68) expression_list -> . expression
    (69) expression_list -> . expression COMMA expression_list
    (72) expression -> . operand0
    (73) operand0 -> . operand1
    (74) operand0 -> . operand0 operator1 operand1
    (75) operand1 -> . operand2
    (76) operand1 -> . operand1 operator2 operand2
    (77) operand2 -> . operand3
    (78) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (79) operand3 -> . monadic_operator operand4
    (80) operand3 -> . operand4
    (86) monadic_operator -> . MINUS
    (87) monadic_operator -> . NOT
    (81) operand4 -> . primitive_value
    (82) operand4 -> . location
    (104) primitive_value -> . literal
    (54) location -> . ID
    (55) location -> . dereferenced_reference
    (56) location -> . string_element
    (57) location -> . string_slice
    (58) location -> . array_element
    (59) location -> . array_slice
    (105) literal -> . integer_literal
    (106) literal -> . boolean_literal
    (107) literal -> . character_literal
    (108) literal -> . empty_literal
    (109) literal -> . character_string_literal
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . string_location LBRACKET start_element LBRACKET
    (63) string_slice -> . string_location LBRACKET left_element COLON right_element RBRACKET
    (67) array_element -> . array_location LBRACKET expression_list RBRACKET
    (70) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (110) integer_literal -> . ICONST
    (111) boolean_literal -> . TRUE
    (112) boolean_literal -> . FALSE
    (113) character_literal -> . CCONST
    (114) empty_literal -> . NULL
    (115) character_string_literal -> . SCONST
    (64) string_location -> . ID
    (71) array_location -> . location

    MINUS           shift and go to state 83
    NOT             shift and go to state 67
    ID              shift and go to state 61
    ICONST          shift and go to state 57
    TRUE            shift and go to state 79
    FALSE           shift and go to state 71
    CCONST          shift and go to state 60
    NULL            shift and go to state 76
    SCONST          shift and go to state 64

    operand1                       shift and go to state 68
    character_string_literal       shift and go to state 80
    monadic_operator               shift and go to state 65
    string_slice                   shift and go to state 55
    boolean_literal                shift and go to state 75
    empty_literal                  shift and go to state 70
    primitive_value                shift and go to state 56
    array_location                 shift and go to state 73
    array_element                  shift and go to state 74
    string_location                shift and go to state 62
    expression_list                shift and go to state 163
    operand2                       shift and go to state 69
    dereferenced_reference         shift and go to state 59
    operand0                       shift and go to state 77
    operand3                       shift and go to state 63
    string_element                 shift and go to state 78
    integer_literal                shift and go to state 66
    operand4                       shift and go to state 81
    expression                     shift and go to state 164
    literal                        shift and go to state 58
    array_slice                    shift and go to state 84
    location                       shift and go to state 85
    character_literal              shift and go to state 72

state 155

    (70) array_slice -> array_location LBRACKET lower_bound COLON . upper_bound RBRACKET
    (42) upper_bound -> . expression
    (72) expression -> . operand0
    (73) operand0 -> . operand1
    (74) operand0 -> . operand0 operator1 operand1
    (75) operand1 -> . operand2
    (76) operand1 -> . operand1 operator2 operand2
    (77) operand2 -> . operand3
    (78) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (79) operand3 -> . monadic_operator operand4
    (80) operand3 -> . operand4
    (86) monadic_operator -> . MINUS
    (87) monadic_operator -> . NOT
    (81) operand4 -> . primitive_value
    (82) operand4 -> . location
    (104) primitive_value -> . literal
    (54) location -> . ID
    (55) location -> . dereferenced_reference
    (56) location -> . string_element
    (57) location -> . string_slice
    (58) location -> . array_element
    (59) location -> . array_slice
    (105) literal -> . integer_literal
    (106) literal -> . boolean_literal
    (107) literal -> . character_literal
    (108) literal -> . empty_literal
    (109) literal -> . character_string_literal
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . string_location LBRACKET start_element LBRACKET
    (63) string_slice -> . string_location LBRACKET left_element COLON right_element RBRACKET
    (67) array_element -> . array_location LBRACKET expression_list RBRACKET
    (70) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (110) integer_literal -> . ICONST
    (111) boolean_literal -> . TRUE
    (112) boolean_literal -> . FALSE
    (113) character_literal -> . CCONST
    (114) empty_literal -> . NULL
    (115) character_string_literal -> . SCONST
    (64) string_location -> . ID
    (71) array_location -> . location

    MINUS           shift and go to state 83
    NOT             shift and go to state 67
    ID              shift and go to state 61
    ICONST          shift and go to state 57
    TRUE            shift and go to state 79
    FALSE           shift and go to state 71
    CCONST          shift and go to state 60
    NULL            shift and go to state 76
    SCONST          shift and go to state 64

    operand1                       shift and go to state 68
    character_string_literal       shift and go to state 80
    monadic_operator               shift and go to state 65
    string_slice                   shift and go to state 55
    boolean_literal                shift and go to state 75
    empty_literal                  shift and go to state 70
    primitive_value                shift and go to state 56
    array_location                 shift and go to state 73
    array_element                  shift and go to state 74
    string_location                shift and go to state 62
    operand2                       shift and go to state 69
    dereferenced_reference         shift and go to state 59
    operand0                       shift and go to state 77
    upper_bound                    shift and go to state 165
    operand3                       shift and go to state 63
    string_element                 shift and go to state 78
    integer_literal                shift and go to state 66
    operand4                       shift and go to state 81
    expression                     shift and go to state 157
    literal                        shift and go to state 58
    array_slice                    shift and go to state 84
    location                       shift and go to state 85
    character_literal              shift and go to state 72

state 156

    (40) literal_range -> lower_bound COLON upper_bound .

    RPAREN          reduce using rule 40 (literal_range -> lower_bound COLON upper_bound .)
    COMMA           reduce using rule 40 (literal_range -> lower_bound COLON upper_bound .)
    RBRACKET        reduce using rule 40 (literal_range -> lower_bound COLON upper_bound .)


state 157

    (42) upper_bound -> expression .

    RBRACKET        reduce using rule 42 (upper_bound -> expression .)
    RPAREN          reduce using rule 42 (upper_bound -> expression .)
    COMMA           reduce using rule 42 (upper_bound -> expression .)


state 158

    (48) array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .

    COMMA           reduce using rule 48 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)
    SEMI            reduce using rule 48 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)
    ASSIGN          reduce using rule 48 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)


state 159

    (53) element_mode -> mode .

    ASSIGN          reduce using rule 53 (element_mode -> mode .)
    COMMA           reduce using rule 53 (element_mode -> mode .)
    SEMI            reduce using rule 53 (element_mode -> mode .)


state 160

    (50) index_mode_list -> index_mode COMMA index_mode_list .

    RBRACKET        reduce using rule 50 (index_mode_list -> index_mode COMMA index_mode_list .)


state 161

    (63) string_slice -> string_location LBRACKET left_element COLON right_element . RBRACKET

    RBRACKET        shift and go to state 166


state 162

    (66) right_element -> expression .

    RBRACKET        reduce using rule 66 (right_element -> expression .)


state 163

    (69) expression_list -> expression COMMA expression_list .

    RBRACKET        reduce using rule 69 (expression_list -> expression COMMA expression_list .)


state 164

    (68) expression_list -> expression .
    (69) expression_list -> expression . COMMA expression_list

    RBRACKET        reduce using rule 68 (expression_list -> expression .)
    COMMA           shift and go to state 154


state 165

    (70) array_slice -> array_location LBRACKET lower_bound COLON upper_bound . RBRACKET

    RBRACKET        shift and go to state 167


state 166

    (63) string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .

    ARROW           reduce using rule 63 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    TIMES           reduce using rule 63 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    DIVIDE          reduce using rule 63 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    MODULO          reduce using rule 63 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    PLUS            reduce using rule 63 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    MINUS           reduce using rule 63 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    CONCAT          reduce using rule 63 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    AND             reduce using rule 63 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    OR              reduce using rule 63 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    EQUAL           reduce using rule 63 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    NOTEQ           reduce using rule 63 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    GREATER         reduce using rule 63 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    GTEQUAL         reduce using rule 63 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    LESS            reduce using rule 63 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    LTEQUAL         reduce using rule 63 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    IN              reduce using rule 63 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    COMMA           reduce using rule 63 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    RBRACKET        reduce using rule 63 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    COLON           reduce using rule 63 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    LBRACKET        reduce using rule 63 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    SEMI            reduce using rule 63 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    RPAREN          reduce using rule 63 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)


state 167

    (70) array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .

    ARROW           reduce using rule 70 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    TIMES           reduce using rule 70 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    DIVIDE          reduce using rule 70 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    MODULO          reduce using rule 70 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    PLUS            reduce using rule 70 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    MINUS           reduce using rule 70 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    CONCAT          reduce using rule 70 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    AND             reduce using rule 70 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    OR              reduce using rule 70 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    EQUAL           reduce using rule 70 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    NOTEQ           reduce using rule 70 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    GREATER         reduce using rule 70 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    GTEQUAL         reduce using rule 70 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LESS            reduce using rule 70 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LTEQUAL         reduce using rule 70 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    IN              reduce using rule 70 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    RBRACKET        reduce using rule 70 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LBRACKET        reduce using rule 70 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    RPAREN          reduce using rule 70 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    COMMA           reduce using rule 70 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    SEMI            reduce using rule 70 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    COLON           reduce using rule 70 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 61 resolved using rule (location -> ID)
WARNING: rejected rule (string_location -> ID) in state 61
WARNING: reduce/reduce conflict in state 85 resolved using rule (array_location -> location)
WARNING: rejected rule (operand4 -> location) in state 85
WARNING: reduce/reduce conflict in state 128 resolved using rule (location -> ID)
WARNING: rejected rule (string_location -> ID) in state 128
WARNING: Rule (string_location -> ID) is never reduced
