Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement statement_nullable
Rule 3     statement_nullable -> statement statement_nullable
Rule 4     statement_nullable -> empty
Rule 5     statement -> declaration_statement
Rule 6     statement -> synonym_statement
Rule 7     statement -> newmode_statement
Rule 8     statement -> action_statement
Rule 9     statement -> procedure_statement
Rule 10    synonym_statement -> SYN synonym_list SEMI
Rule 11    synonym_list -> synonym_definition
Rule 12    synonym_list -> synonym_definition COMMA synonym_list
Rule 13    synonym_definition -> identifier_list mode ASSIGN expression
Rule 14    synonym_definition -> identifier_list ASSIGN expression
Rule 15    declaration_statement -> DCL declaration_list SEMI
Rule 16    declaration_list -> declaration
Rule 17    declaration_list -> declaration COMMA declaration_list
Rule 18    declaration -> identifier_list mode initialization
Rule 19    declaration -> identifier_list mode
Rule 20    initialization -> ASSIGN expression
Rule 21    identifier_list -> identifier
Rule 22    identifier_list -> identifier COMMA identifier_list
Rule 23    identifier -> ID
Rule 24    newmode_statement -> TYPE newmode_list SEMI
Rule 25    newmode_list -> mode_definition
Rule 26    newmode_list -> mode_definition COMMA newmode_list
Rule 27    mode_definition -> identifier_list ASSIGN mode
Rule 28    procedure_statement -> ID COLON procedure_definition
Rule 29    procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI
Rule 30    procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI
Rule 31    formal_parameter_list -> formal_parameter
Rule 32    formal_parameter_list -> formal_parameter COMMA formal_parameter_list
Rule 33    formal_parameter -> identifier_list mode LOC
Rule 34    formal_parameter -> identifier_list mode
Rule 35    result_spec -> RETURNS LPAREN mode LOC RPAREN
Rule 36    result_spec -> RETURNS LPAREN mode RPAREN
Rule 37    mode -> mode_name
Rule 38    mode -> discrete_mode
Rule 39    mode -> reference_mode
Rule 40    mode -> composite_mode
Rule 41    mode_name -> identifier
Rule 42    discrete_mode -> integer_mode
Rule 43    discrete_mode -> boolean_mode
Rule 44    discrete_mode -> character_mode
Rule 45    discrete_mode -> discrete_range_mode
Rule 46    discrete_mode_name -> identifier
Rule 47    integer_mode -> INT
Rule 48    boolean_mode -> BOOL
Rule 49    character_mode -> CHAR
Rule 50    discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN
Rule 51    discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN
Rule 52    literal_range -> lower_bound COLON upper_bound
Rule 53    lower_bound -> expression
Rule 54    upper_bound -> expression
Rule 55    reference_mode -> REF mode
Rule 56    composite_mode -> string_mode
Rule 57    composite_mode -> array_mode
Rule 58    string_mode -> CHARS LBRACKET string_length RBRACKET
Rule 59    string_length -> integer_literal
Rule 60    array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode
Rule 61    index_mode_list -> index_mode
Rule 62    index_mode_list -> index_mode COMMA index_mode_list
Rule 63    index_mode -> discrete_mode
Rule 64    index_mode -> literal_range
Rule 65    element_mode -> mode
Rule 66    location -> identifier
Rule 67    location -> dereferenced_reference
Rule 68    location -> string_element
Rule 69    location -> string_slice
Rule 70    location -> array_element
Rule 71    location -> array_slice
Rule 72    location -> call_action
Rule 73    dereferenced_reference -> array_location ARROW
Rule 74    string_element -> identifier LBRACKET start_element RBRACKET
Rule 75    start_element -> expression
Rule 76    string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET
Rule 77    left_element -> expression
Rule 78    right_element -> expression
Rule 79    array_element -> array_location LBRACKET expression_list RBRACKET
Rule 80    expression_list -> expression
Rule 81    expression_list -> expression COMMA expression_list
Rule 82    array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET
Rule 83    array_location -> location
Rule 84    expression -> operand0
Rule 85    expression -> boolean_expression
Rule 86    expression -> conditional_expression
Rule 87    parenthesized_expression -> LPAREN expression RPAREN
Rule 88    boolean_expression -> expression AND expression
Rule 89    boolean_expression -> expression OR expression
Rule 90    boolean_expression -> expression EQUAL expression
Rule 91    boolean_expression -> expression NOTEQ expression
Rule 92    boolean_expression -> expression GREATER expression
Rule 93    boolean_expression -> expression GTEQUAL expression
Rule 94    boolean_expression -> expression LESS expression
Rule 95    boolean_expression -> expression LTEQUAL expression
Rule 96    conditional_expression -> IF boolean_expression then_expression else_expression FI
Rule 97    conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI
Rule 98    then_expression -> THEN expression
Rule 99    else_expression -> ELSE expression
Rule 100   elsif_expression -> ELSIF boolean_expression then_expression
Rule 101   elsif_expression -> elsif_expression ELSIF boolean_expression then_expression
Rule 102   operand0 -> operand1
Rule 103   operand0 -> operand0 operator1 operand1
Rule 104   operand1 -> operand2
Rule 105   operand1 -> operand1 operator2 operand2
Rule 106   operand2 -> operand3
Rule 107   operand2 -> operand2 arithmetic_multiplicative_operator operand3
Rule 108   operand3 -> monadic_operator operand4
Rule 109   operand3 -> operand4
Rule 110   operand4 -> array_location
Rule 111   operand4 -> referenced_location
Rule 112   operand4 -> primitive_value
Rule 113   arithmetic_multiplicative_operator -> TIMES
Rule 114   arithmetic_multiplicative_operator -> DIVIDE
Rule 115   arithmetic_multiplicative_operator -> MODULO
Rule 116   monadic_operator -> MINUS
Rule 117   monadic_operator -> NOT
Rule 118   referenced_location -> ARROW array_location
Rule 119   operator1 -> membership_operator
Rule 120   operator2 -> arithmetic_additive_operator
Rule 121   operator2 -> string_concatenation_operator
Rule 122   arithmetic_additive_operator -> PLUS
Rule 123   arithmetic_additive_operator -> MINUS
Rule 124   string_concatenation_operator -> CONCAT
Rule 125   membership_operator -> IN
Rule 126   primitive_value -> literal
Rule 127   primitive_value -> value_array_element
Rule 128   primitive_value -> value_array_slice
Rule 129   primitive_value -> parenthesized_expression
Rule 130   literal -> integer_literal
Rule 131   literal -> boolean_literal
Rule 132   literal -> character_literal
Rule 133   literal -> empty_literal
Rule 134   literal -> character_string_literal
Rule 135   value_array_element -> primitive_value LBRACKET expression_list RBRACKET
Rule 136   value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET
Rule 137   integer_literal -> ICONST
Rule 138   boolean_literal -> TRUE
Rule 139   boolean_literal -> FALSE
Rule 140   character_literal -> CCONST
Rule 141   empty_literal -> NULL
Rule 142   character_string_literal -> SCONST
Rule 143   action_statement -> identifier COLON action SEMI
Rule 144   action_statement -> action SEMI
Rule 145   action -> bracketed_action
Rule 146   action -> assignment_action
Rule 147   action -> call_action
Rule 148   action -> exit_action
Rule 149   action -> result_action
Rule 150   action -> return_action
Rule 151   bracketed_action -> if_action
Rule 152   bracketed_action -> do_action
Rule 153   assignment_action -> array_location assigning_operator expression
Rule 154   assigning_operator -> closed_dyadic_operator ASSIGN
Rule 155   assigning_operator -> ASSIGN
Rule 156   closed_dyadic_operator -> arithmetic_additive_operator
Rule 157   closed_dyadic_operator -> arithmetic_multiplicative_operator
Rule 158   closed_dyadic_operator -> string_concatenation_operator
Rule 159   if_action -> IF boolean_expression then_clause else_clause FI
Rule 160   if_action -> IF boolean_expression then_clause FI
Rule 161   then_clause -> THEN action_statement_list
Rule 162   else_clause -> ELSE action_statement_list
Rule 163   else_clause -> ELSIF boolean_expression then_clause else_clause
Rule 164   else_clause -> ELSIF boolean_expression then_clause
Rule 165   action_statement_list -> action_statement action_statement_nullable
Rule 166   action_statement_nullable -> action_statement action_statement_nullable
Rule 167   action_statement_nullable -> empty
Rule 168   call_action -> procedure_call
Rule 169   call_action -> builtin_call
Rule 170   builtin_call -> builtin_name LPAREN parameter_list RPAREN
Rule 171   builtin_call -> builtin_name LPAREN RPAREN
Rule 172   builtin_name -> ABS
Rule 173   builtin_name -> ASC
Rule 174   builtin_name -> NUM
Rule 175   builtin_name -> UPPER
Rule 176   builtin_name -> LOWER
Rule 177   builtin_name -> LENGTH
Rule 178   builtin_name -> READ
Rule 179   builtin_name -> PRINT
Rule 180   procedure_call -> ID LPAREN parameter_list RPAREN
Rule 181   procedure_call -> ID LPAREN RPAREN
Rule 182   parameter_list -> expression
Rule 183   parameter_list -> expression COMMA parameter_list
Rule 184   exit_action -> EXIT identifier
Rule 185   return_action -> RETURN result
Rule 186   result -> expression
Rule 187   result -> empty
Rule 188   result_action -> RESULT expression
Rule 189   do_action -> DO control_part SEMI action_statement_nullable OD
Rule 190   do_action -> DO action_statement_nullable OD
Rule 191   control_part -> for_control while_control
Rule 192   control_part -> for_control
Rule 193   control_part -> while_control
Rule 194   for_control -> FOR iteration
Rule 195   iteration -> step_enumeration
Rule 196   iteration -> range_enumeration
Rule 197   step_enumeration -> identifier ASSIGN expression step_value DOWN end_value
Rule 198   step_enumeration -> identifier ASSIGN expression step_value end_value
Rule 199   step_enumeration -> identifier ASSIGN expression DOWN end_value
Rule 200   step_enumeration -> identifier ASSIGN expression end_value
Rule 201   step_value -> BY expression
Rule 202   end_value -> TO expression
Rule 203   range_enumeration -> identifier DOWN IN discrete_mode
Rule 204   range_enumeration -> identifier IN discrete_mode
Rule 205   while_control -> WHILE expression
Rule 206   empty -> <empty>

Terminals, with rules where they appear

ABS                  : 172
AND                  : 88
ARRAY                : 60
ARROW                : 73 118
ASC                  : 173
ASSIGN               : 13 14 20 27 154 155 197 198 199 200
BOOL                 : 48
BY                   : 201
CCONST               : 140
CHAR                 : 49
CHARS                : 58
COLON                : 28 52 76 82 136 143
COMMA                : 12 17 22 26 32 62 81 183
CONCAT               : 124
DCL                  : 15
DIVIDE               : 114
DO                   : 189 190
DOWN                 : 197 199 203
ELSE                 : 99 162
ELSIF                : 100 101 163 164
END                  : 29 30
EQUAL                : 90
EXIT                 : 184
FALSE                : 139
FI                   : 96 97 159 160
FOR                  : 194
GREATER              : 92
GTEQUAL              : 93
ICONST               : 137
ID                   : 23 28 180 181
IF                   : 96 97 159 160
IN                   : 125 203 204
INT                  : 47
LBRACKET             : 58 60 74 76 79 82 135 136
LENGTH               : 177
LESS                 : 94
LOC                  : 33 35
LOWER                : 176
LPAREN               : 29 30 35 36 50 51 87 170 171 180 181
LTEQUAL              : 95
MINUS                : 116 123
MODULO               : 115
NOT                  : 117
NOTEQ                : 91
NULL                 : 141
NUM                  : 174
OD                   : 189 190
OR                   : 89
PLUS                 : 122
PRINT                : 179
PROC                 : 29 30
RBRACKET             : 58 60 74 76 79 82 135 136
READ                 : 178
REF                  : 55
RESULT               : 188
RETURN               : 185
RETURNS              : 35 36
RPAREN               : 29 30 35 36 50 51 87 170 171 180 181
SCONST               : 142
SEMI                 : 10 15 24 29 29 30 30 143 144 189
SYN                  : 10
THEN                 : 98 161
TIMES                : 113
TO                   : 202
TRUE                 : 138
TYPE                 : 24
UPPER                : 175
WHILE                : 205
error                : 

Nonterminals, with rules where they appear

action               : 143 144
action_statement     : 8 165 166
action_statement_list : 161 162
action_statement_nullable : 165 166 189 190
arithmetic_additive_operator : 120 156
arithmetic_multiplicative_operator : 107 157
array_element        : 70
array_location       : 73 79 82 110 118 153
array_mode           : 57
array_slice          : 71
assigning_operator   : 153
assignment_action    : 146
boolean_expression   : 85 96 97 100 101 159 160 163 164
boolean_literal      : 131
boolean_mode         : 43
bracketed_action     : 145
builtin_call         : 169
builtin_name         : 170 171
call_action          : 72 147
character_literal    : 132
character_mode       : 44
character_string_literal : 134
closed_dyadic_operator : 154
composite_mode       : 40
conditional_expression : 86
control_part         : 189
declaration          : 16 17
declaration_list     : 15 17
declaration_statement : 5
dereferenced_reference : 67
discrete_mode        : 38 51 63 203 204
discrete_mode_name   : 50
discrete_range_mode  : 45
do_action            : 152
element_mode         : 60
else_clause          : 159 163
else_expression      : 96 97
elsif_expression     : 97 101
empty                : 4 167 187
empty_literal        : 133
end_value            : 197 198 199 200
exit_action          : 148
expression           : 13 14 20 53 54 75 77 78 80 81 87 88 88 89 89 90 90 91 91 92 92 93 93 94 94 95 95 98 99 136 136 153 182 183 186 188 197 198 199 200 201 202 205
expression_list      : 79 81 135
for_control          : 191 192
formal_parameter     : 31 32
formal_parameter_list : 29 30 32
identifier           : 21 22 41 46 66 74 76 143 184 197 198 199 200 203 204
identifier_list      : 13 14 18 19 22 27 33 34
if_action            : 151
index_mode           : 61 62
index_mode_list      : 60 62
initialization       : 18
integer_literal      : 59 130
integer_mode         : 42
iteration            : 194
left_element         : 76
literal              : 126
literal_range        : 50 51 64
location             : 83
lower_bound          : 52 82
membership_operator  : 119
mode                 : 13 18 19 27 33 34 35 36 55 65
mode_definition      : 25 26
mode_name            : 37
monadic_operator     : 108
newmode_list         : 24 26
newmode_statement    : 7
operand0             : 84 103
operand1             : 102 103 105
operand2             : 104 105 107
operand3             : 106 107
operand4             : 108 109
operator1            : 103
operator2            : 105
parameter_list       : 170 180 183
parenthesized_expression : 129
primitive_value      : 112 135 136
procedure_call       : 168
procedure_definition : 28
procedure_statement  : 9
program              : 0
range_enumeration    : 196
reference_mode       : 39
referenced_location  : 111
result               : 185
result_action        : 149
result_spec          : 29
return_action        : 150
right_element        : 76
start_element        : 74
statement            : 2 3
statement_list       : 1
statement_nullable   : 2 3 29 30
step_enumeration     : 195
step_value           : 197 198
string_concatenation_operator : 121 158
string_element       : 68
string_length        : 58
string_mode          : 56
string_slice         : 69
synonym_definition   : 11 12
synonym_list         : 10 12
synonym_statement    : 6
then_clause          : 159 160 163 164
then_expression      : 96 97 100 101
upper_bound          : 52 82
value_array_element  : 127
value_array_slice    : 128
while_control        : 191 193

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement statement_nullable
    (5) statement -> . declaration_statement
    (6) statement -> . synonym_statement
    (7) statement -> . newmode_statement
    (8) statement -> . action_statement
    (9) statement -> . procedure_statement
    (15) declaration_statement -> . DCL declaration_list SEMI
    (10) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (143) action_statement -> . identifier COLON action SEMI
    (144) action_statement -> . action SEMI
    (28) procedure_statement -> . ID COLON procedure_definition
    (23) identifier -> . ID
    (145) action -> . bracketed_action
    (146) action -> . assignment_action
    (147) action -> . call_action
    (148) action -> . exit_action
    (149) action -> . result_action
    (150) action -> . return_action
    (151) bracketed_action -> . if_action
    (152) bracketed_action -> . do_action
    (153) assignment_action -> . array_location assigning_operator expression
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (184) exit_action -> . EXIT identifier
    (188) result_action -> . RESULT expression
    (185) return_action -> . RETURN result
    (159) if_action -> . IF boolean_expression then_clause else_clause FI
    (160) if_action -> . IF boolean_expression then_clause FI
    (189) do_action -> . DO control_part SEMI action_statement_nullable OD
    (190) do_action -> . DO action_statement_nullable OD
    (83) array_location -> . location
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    DCL             shift and go to state 5
    SYN             shift and go to state 19
    TYPE            shift and go to state 26
    ID              shift and go to state 17
    EXIT            shift and go to state 42
    RESULT          shift and go to state 44
    RETURN          shift and go to state 34
    IF              shift and go to state 31
    DO              shift and go to state 10
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    call_action                    shift and go to state 2
    statement                      shift and go to state 37
    declaration_statement          shift and go to state 3
    assignment_action              shift and go to state 4
    action_statement               shift and go to state 9
    result_action                  shift and go to state 11
    dereferenced_reference         shift and go to state 16
    array_location                 shift and go to state 13
    procedure_statement            shift and go to state 15
    builtin_call                   shift and go to state 12
    array_element                  shift and go to state 18
    program                        shift and go to state 21
    synonym_statement              shift and go to state 23
    exit_action                    shift and go to state 25
    return_action                  shift and go to state 43
    newmode_statement              shift and go to state 27
    if_action                      shift and go to state 28
    bracketed_action               shift and go to state 30
    action                         shift and go to state 33
    string_element                 shift and go to state 32
    array_slice                    shift and go to state 36
    identifier                     shift and go to state 35
    statement_list                 shift and go to state 38
    do_action                      shift and go to state 40
    location                       shift and go to state 41
    builtin_name                   shift and go to state 29
    string_slice                   shift and go to state 45

state 1

    (168) call_action -> procedure_call .

    ARROW           reduce using rule 168 (call_action -> procedure_call .)
    LBRACKET        reduce using rule 168 (call_action -> procedure_call .)
    TIMES           reduce using rule 168 (call_action -> procedure_call .)
    DIVIDE          reduce using rule 168 (call_action -> procedure_call .)
    MODULO          reduce using rule 168 (call_action -> procedure_call .)
    PLUS            reduce using rule 168 (call_action -> procedure_call .)
    MINUS           reduce using rule 168 (call_action -> procedure_call .)
    CONCAT          reduce using rule 168 (call_action -> procedure_call .)
    IN              reduce using rule 168 (call_action -> procedure_call .)
    AND             reduce using rule 168 (call_action -> procedure_call .)
    OR              reduce using rule 168 (call_action -> procedure_call .)
    EQUAL           reduce using rule 168 (call_action -> procedure_call .)
    NOTEQ           reduce using rule 168 (call_action -> procedure_call .)
    GREATER         reduce using rule 168 (call_action -> procedure_call .)
    GTEQUAL         reduce using rule 168 (call_action -> procedure_call .)
    LESS            reduce using rule 168 (call_action -> procedure_call .)
    LTEQUAL         reduce using rule 168 (call_action -> procedure_call .)
    THEN            reduce using rule 168 (call_action -> procedure_call .)
    SEMI            reduce using rule 168 (call_action -> procedure_call .)
    COMMA           reduce using rule 168 (call_action -> procedure_call .)
    RBRACKET        reduce using rule 168 (call_action -> procedure_call .)
    COLON           reduce using rule 168 (call_action -> procedure_call .)
    RPAREN          reduce using rule 168 (call_action -> procedure_call .)
    DOWN            reduce using rule 168 (call_action -> procedure_call .)
    BY              reduce using rule 168 (call_action -> procedure_call .)
    TO              reduce using rule 168 (call_action -> procedure_call .)
    ELSE            reduce using rule 168 (call_action -> procedure_call .)
    ELSIF           reduce using rule 168 (call_action -> procedure_call .)
    FI              reduce using rule 168 (call_action -> procedure_call .)
    WHILE           reduce using rule 168 (call_action -> procedure_call .)
    ASSIGN          reduce using rule 168 (call_action -> procedure_call .)


state 2

    (147) action -> call_action .
    (72) location -> call_action .

    SEMI            reduce using rule 147 (action -> call_action .)
    ARROW           reduce using rule 72 (location -> call_action .)
    LBRACKET        reduce using rule 72 (location -> call_action .)
    ASSIGN          reduce using rule 72 (location -> call_action .)
    PLUS            reduce using rule 72 (location -> call_action .)
    MINUS           reduce using rule 72 (location -> call_action .)
    TIMES           reduce using rule 72 (location -> call_action .)
    DIVIDE          reduce using rule 72 (location -> call_action .)
    MODULO          reduce using rule 72 (location -> call_action .)
    CONCAT          reduce using rule 72 (location -> call_action .)


state 3

    (5) statement -> declaration_statement .

    DCL             reduce using rule 5 (statement -> declaration_statement .)
    SYN             reduce using rule 5 (statement -> declaration_statement .)
    TYPE            reduce using rule 5 (statement -> declaration_statement .)
    ID              reduce using rule 5 (statement -> declaration_statement .)
    EXIT            reduce using rule 5 (statement -> declaration_statement .)
    RESULT          reduce using rule 5 (statement -> declaration_statement .)
    RETURN          reduce using rule 5 (statement -> declaration_statement .)
    IF              reduce using rule 5 (statement -> declaration_statement .)
    DO              reduce using rule 5 (statement -> declaration_statement .)
    ABS             reduce using rule 5 (statement -> declaration_statement .)
    ASC             reduce using rule 5 (statement -> declaration_statement .)
    NUM             reduce using rule 5 (statement -> declaration_statement .)
    UPPER           reduce using rule 5 (statement -> declaration_statement .)
    LOWER           reduce using rule 5 (statement -> declaration_statement .)
    LENGTH          reduce using rule 5 (statement -> declaration_statement .)
    READ            reduce using rule 5 (statement -> declaration_statement .)
    PRINT           reduce using rule 5 (statement -> declaration_statement .)
    $end            reduce using rule 5 (statement -> declaration_statement .)
    END             reduce using rule 5 (statement -> declaration_statement .)


state 4

    (146) action -> assignment_action .

    SEMI            reduce using rule 146 (action -> assignment_action .)


state 5

    (15) declaration_statement -> DCL . declaration_list SEMI
    (16) declaration_list -> . declaration
    (17) declaration_list -> . declaration COMMA declaration_list
    (18) declaration -> . identifier_list mode initialization
    (19) declaration -> . identifier_list mode
    (21) identifier_list -> . identifier
    (22) identifier_list -> . identifier COMMA identifier_list
    (23) identifier -> . ID

    ID              shift and go to state 47

    identifier_list                shift and go to state 46
    declaration                    shift and go to state 49
    declaration_list               shift and go to state 48
    identifier                     shift and go to state 50

state 6

    (173) builtin_name -> ASC .

    LPAREN          reduce using rule 173 (builtin_name -> ASC .)


state 7

    (176) builtin_name -> LOWER .

    LPAREN          reduce using rule 176 (builtin_name -> LOWER .)


state 8

    (178) builtin_name -> READ .

    LPAREN          reduce using rule 178 (builtin_name -> READ .)


state 9

    (8) statement -> action_statement .

    DCL             reduce using rule 8 (statement -> action_statement .)
    SYN             reduce using rule 8 (statement -> action_statement .)
    TYPE            reduce using rule 8 (statement -> action_statement .)
    ID              reduce using rule 8 (statement -> action_statement .)
    EXIT            reduce using rule 8 (statement -> action_statement .)
    RESULT          reduce using rule 8 (statement -> action_statement .)
    RETURN          reduce using rule 8 (statement -> action_statement .)
    IF              reduce using rule 8 (statement -> action_statement .)
    DO              reduce using rule 8 (statement -> action_statement .)
    ABS             reduce using rule 8 (statement -> action_statement .)
    ASC             reduce using rule 8 (statement -> action_statement .)
    NUM             reduce using rule 8 (statement -> action_statement .)
    UPPER           reduce using rule 8 (statement -> action_statement .)
    LOWER           reduce using rule 8 (statement -> action_statement .)
    LENGTH          reduce using rule 8 (statement -> action_statement .)
    READ            reduce using rule 8 (statement -> action_statement .)
    PRINT           reduce using rule 8 (statement -> action_statement .)
    $end            reduce using rule 8 (statement -> action_statement .)
    END             reduce using rule 8 (statement -> action_statement .)


state 10

    (189) do_action -> DO . control_part SEMI action_statement_nullable OD
    (190) do_action -> DO . action_statement_nullable OD
    (191) control_part -> . for_control while_control
    (192) control_part -> . for_control
    (193) control_part -> . while_control
    (166) action_statement_nullable -> . action_statement action_statement_nullable
    (167) action_statement_nullable -> . empty
    (194) for_control -> . FOR iteration
    (205) while_control -> . WHILE expression
    (143) action_statement -> . identifier COLON action SEMI
    (144) action_statement -> . action SEMI
    (206) empty -> .
    (23) identifier -> . ID
    (145) action -> . bracketed_action
    (146) action -> . assignment_action
    (147) action -> . call_action
    (148) action -> . exit_action
    (149) action -> . result_action
    (150) action -> . return_action
    (151) bracketed_action -> . if_action
    (152) bracketed_action -> . do_action
    (153) assignment_action -> . array_location assigning_operator expression
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (184) exit_action -> . EXIT identifier
    (188) result_action -> . RESULT expression
    (185) return_action -> . RETURN result
    (159) if_action -> . IF boolean_expression then_clause else_clause FI
    (160) if_action -> . IF boolean_expression then_clause FI
    (189) do_action -> . DO control_part SEMI action_statement_nullable OD
    (190) do_action -> . DO action_statement_nullable OD
    (83) array_location -> . location
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    FOR             shift and go to state 58
    WHILE           shift and go to state 52
    OD              reduce using rule 206 (empty -> .)
    ID              shift and go to state 56
    EXIT            shift and go to state 42
    RESULT          shift and go to state 44
    RETURN          shift and go to state 34
    IF              shift and go to state 31
    DO              shift and go to state 10
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    call_action                    shift and go to state 2
    empty                          shift and go to state 51
    while_control                  shift and go to state 55
    dereferenced_reference         shift and go to state 16
    exit_action                    shift and go to state 25
    action_statement               shift and go to state 53
    builtin_name                   shift and go to state 29
    if_action                      shift and go to state 28
    bracketed_action               shift and go to state 30
    assignment_action              shift and go to state 4
    for_control                    shift and go to state 59
    result_action                  shift and go to state 11
    action                         shift and go to state 33
    string_element                 shift and go to state 32
    string_slice                   shift and go to state 45
    identifier                     shift and go to state 35
    array_location                 shift and go to state 13
    array_slice                    shift and go to state 36
    do_action                      shift and go to state 40
    control_part                   shift and go to state 54
    return_action                  shift and go to state 43
    array_element                  shift and go to state 18
    action_statement_nullable      shift and go to state 57
    builtin_call                   shift and go to state 12
    location                       shift and go to state 41

state 11

    (149) action -> result_action .

    SEMI            reduce using rule 149 (action -> result_action .)


state 12

    (169) call_action -> builtin_call .

    ARROW           reduce using rule 169 (call_action -> builtin_call .)
    LBRACKET        reduce using rule 169 (call_action -> builtin_call .)
    TIMES           reduce using rule 169 (call_action -> builtin_call .)
    DIVIDE          reduce using rule 169 (call_action -> builtin_call .)
    MODULO          reduce using rule 169 (call_action -> builtin_call .)
    PLUS            reduce using rule 169 (call_action -> builtin_call .)
    MINUS           reduce using rule 169 (call_action -> builtin_call .)
    CONCAT          reduce using rule 169 (call_action -> builtin_call .)
    IN              reduce using rule 169 (call_action -> builtin_call .)
    AND             reduce using rule 169 (call_action -> builtin_call .)
    OR              reduce using rule 169 (call_action -> builtin_call .)
    EQUAL           reduce using rule 169 (call_action -> builtin_call .)
    NOTEQ           reduce using rule 169 (call_action -> builtin_call .)
    GREATER         reduce using rule 169 (call_action -> builtin_call .)
    GTEQUAL         reduce using rule 169 (call_action -> builtin_call .)
    LESS            reduce using rule 169 (call_action -> builtin_call .)
    LTEQUAL         reduce using rule 169 (call_action -> builtin_call .)
    THEN            reduce using rule 169 (call_action -> builtin_call .)
    SEMI            reduce using rule 169 (call_action -> builtin_call .)
    COMMA           reduce using rule 169 (call_action -> builtin_call .)
    RBRACKET        reduce using rule 169 (call_action -> builtin_call .)
    COLON           reduce using rule 169 (call_action -> builtin_call .)
    RPAREN          reduce using rule 169 (call_action -> builtin_call .)
    DOWN            reduce using rule 169 (call_action -> builtin_call .)
    BY              reduce using rule 169 (call_action -> builtin_call .)
    TO              reduce using rule 169 (call_action -> builtin_call .)
    ELSE            reduce using rule 169 (call_action -> builtin_call .)
    ELSIF           reduce using rule 169 (call_action -> builtin_call .)
    FI              reduce using rule 169 (call_action -> builtin_call .)
    WHILE           reduce using rule 169 (call_action -> builtin_call .)
    ASSIGN          reduce using rule 169 (call_action -> builtin_call .)


state 13

    (153) assignment_action -> array_location . assigning_operator expression
    (73) dereferenced_reference -> array_location . ARROW
    (79) array_element -> array_location . LBRACKET expression_list RBRACKET
    (82) array_slice -> array_location . LBRACKET lower_bound COLON upper_bound RBRACKET
    (154) assigning_operator -> . closed_dyadic_operator ASSIGN
    (155) assigning_operator -> . ASSIGN
    (156) closed_dyadic_operator -> . arithmetic_additive_operator
    (157) closed_dyadic_operator -> . arithmetic_multiplicative_operator
    (158) closed_dyadic_operator -> . string_concatenation_operator
    (122) arithmetic_additive_operator -> . PLUS
    (123) arithmetic_additive_operator -> . MINUS
    (113) arithmetic_multiplicative_operator -> . TIMES
    (114) arithmetic_multiplicative_operator -> . DIVIDE
    (115) arithmetic_multiplicative_operator -> . MODULO
    (124) string_concatenation_operator -> . CONCAT

    ARROW           shift and go to state 64
    LBRACKET        shift and go to state 68
    ASSIGN          shift and go to state 72
    PLUS            shift and go to state 61
    MINUS           shift and go to state 70
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 73
    MODULO          shift and go to state 66
    CONCAT          shift and go to state 65

    assigning_operator             shift and go to state 67
    string_concatenation_operator  shift and go to state 63
    closed_dyadic_operator         shift and go to state 62
    arithmetic_multiplicative_operator shift and go to state 60
    arithmetic_additive_operator   shift and go to state 69

state 14

    (174) builtin_name -> NUM .

    LPAREN          reduce using rule 174 (builtin_name -> NUM .)


state 15

    (9) statement -> procedure_statement .

    DCL             reduce using rule 9 (statement -> procedure_statement .)
    SYN             reduce using rule 9 (statement -> procedure_statement .)
    TYPE            reduce using rule 9 (statement -> procedure_statement .)
    ID              reduce using rule 9 (statement -> procedure_statement .)
    EXIT            reduce using rule 9 (statement -> procedure_statement .)
    RESULT          reduce using rule 9 (statement -> procedure_statement .)
    RETURN          reduce using rule 9 (statement -> procedure_statement .)
    IF              reduce using rule 9 (statement -> procedure_statement .)
    DO              reduce using rule 9 (statement -> procedure_statement .)
    ABS             reduce using rule 9 (statement -> procedure_statement .)
    ASC             reduce using rule 9 (statement -> procedure_statement .)
    NUM             reduce using rule 9 (statement -> procedure_statement .)
    UPPER           reduce using rule 9 (statement -> procedure_statement .)
    LOWER           reduce using rule 9 (statement -> procedure_statement .)
    LENGTH          reduce using rule 9 (statement -> procedure_statement .)
    READ            reduce using rule 9 (statement -> procedure_statement .)
    PRINT           reduce using rule 9 (statement -> procedure_statement .)
    $end            reduce using rule 9 (statement -> procedure_statement .)
    END             reduce using rule 9 (statement -> procedure_statement .)


state 16

    (67) location -> dereferenced_reference .

    ARROW           reduce using rule 67 (location -> dereferenced_reference .)
    LBRACKET        reduce using rule 67 (location -> dereferenced_reference .)
    TIMES           reduce using rule 67 (location -> dereferenced_reference .)
    DIVIDE          reduce using rule 67 (location -> dereferenced_reference .)
    MODULO          reduce using rule 67 (location -> dereferenced_reference .)
    PLUS            reduce using rule 67 (location -> dereferenced_reference .)
    MINUS           reduce using rule 67 (location -> dereferenced_reference .)
    CONCAT          reduce using rule 67 (location -> dereferenced_reference .)
    IN              reduce using rule 67 (location -> dereferenced_reference .)
    AND             reduce using rule 67 (location -> dereferenced_reference .)
    OR              reduce using rule 67 (location -> dereferenced_reference .)
    EQUAL           reduce using rule 67 (location -> dereferenced_reference .)
    NOTEQ           reduce using rule 67 (location -> dereferenced_reference .)
    GREATER         reduce using rule 67 (location -> dereferenced_reference .)
    GTEQUAL         reduce using rule 67 (location -> dereferenced_reference .)
    LESS            reduce using rule 67 (location -> dereferenced_reference .)
    LTEQUAL         reduce using rule 67 (location -> dereferenced_reference .)
    SEMI            reduce using rule 67 (location -> dereferenced_reference .)
    THEN            reduce using rule 67 (location -> dereferenced_reference .)
    COMMA           reduce using rule 67 (location -> dereferenced_reference .)
    RBRACKET        reduce using rule 67 (location -> dereferenced_reference .)
    COLON           reduce using rule 67 (location -> dereferenced_reference .)
    RPAREN          reduce using rule 67 (location -> dereferenced_reference .)
    DOWN            reduce using rule 67 (location -> dereferenced_reference .)
    BY              reduce using rule 67 (location -> dereferenced_reference .)
    TO              reduce using rule 67 (location -> dereferenced_reference .)
    ELSE            reduce using rule 67 (location -> dereferenced_reference .)
    ELSIF           reduce using rule 67 (location -> dereferenced_reference .)
    FI              reduce using rule 67 (location -> dereferenced_reference .)
    WHILE           reduce using rule 67 (location -> dereferenced_reference .)
    ASSIGN          reduce using rule 67 (location -> dereferenced_reference .)


state 17

    (28) procedure_statement -> ID . COLON procedure_definition
    (23) identifier -> ID .
    (180) procedure_call -> ID . LPAREN parameter_list RPAREN
    (181) procedure_call -> ID . LPAREN RPAREN

  ! shift/reduce conflict for COLON resolved as shift
    COLON           shift and go to state 74
    LBRACKET        reduce using rule 23 (identifier -> ID .)
    ARROW           reduce using rule 23 (identifier -> ID .)
    ASSIGN          reduce using rule 23 (identifier -> ID .)
    PLUS            reduce using rule 23 (identifier -> ID .)
    MINUS           reduce using rule 23 (identifier -> ID .)
    TIMES           reduce using rule 23 (identifier -> ID .)
    DIVIDE          reduce using rule 23 (identifier -> ID .)
    MODULO          reduce using rule 23 (identifier -> ID .)
    CONCAT          reduce using rule 23 (identifier -> ID .)
    LPAREN          shift and go to state 75

  ! COLON           [ reduce using rule 23 (identifier -> ID .) ]


state 18

    (70) location -> array_element .

    ARROW           reduce using rule 70 (location -> array_element .)
    LBRACKET        reduce using rule 70 (location -> array_element .)
    TIMES           reduce using rule 70 (location -> array_element .)
    DIVIDE          reduce using rule 70 (location -> array_element .)
    MODULO          reduce using rule 70 (location -> array_element .)
    PLUS            reduce using rule 70 (location -> array_element .)
    MINUS           reduce using rule 70 (location -> array_element .)
    CONCAT          reduce using rule 70 (location -> array_element .)
    IN              reduce using rule 70 (location -> array_element .)
    AND             reduce using rule 70 (location -> array_element .)
    OR              reduce using rule 70 (location -> array_element .)
    EQUAL           reduce using rule 70 (location -> array_element .)
    NOTEQ           reduce using rule 70 (location -> array_element .)
    GREATER         reduce using rule 70 (location -> array_element .)
    GTEQUAL         reduce using rule 70 (location -> array_element .)
    LESS            reduce using rule 70 (location -> array_element .)
    LTEQUAL         reduce using rule 70 (location -> array_element .)
    SEMI            reduce using rule 70 (location -> array_element .)
    THEN            reduce using rule 70 (location -> array_element .)
    COMMA           reduce using rule 70 (location -> array_element .)
    RBRACKET        reduce using rule 70 (location -> array_element .)
    COLON           reduce using rule 70 (location -> array_element .)
    RPAREN          reduce using rule 70 (location -> array_element .)
    DOWN            reduce using rule 70 (location -> array_element .)
    BY              reduce using rule 70 (location -> array_element .)
    TO              reduce using rule 70 (location -> array_element .)
    ELSE            reduce using rule 70 (location -> array_element .)
    ELSIF           reduce using rule 70 (location -> array_element .)
    FI              reduce using rule 70 (location -> array_element .)
    WHILE           reduce using rule 70 (location -> array_element .)
    ASSIGN          reduce using rule 70 (location -> array_element .)


state 19

    (10) synonym_statement -> SYN . synonym_list SEMI
    (11) synonym_list -> . synonym_definition
    (12) synonym_list -> . synonym_definition COMMA synonym_list
    (13) synonym_definition -> . identifier_list mode ASSIGN expression
    (14) synonym_definition -> . identifier_list ASSIGN expression
    (21) identifier_list -> . identifier
    (22) identifier_list -> . identifier COMMA identifier_list
    (23) identifier -> . ID

    ID              shift and go to state 47

    synonym_list                   shift and go to state 76
    synonym_definition             shift and go to state 77
    identifier_list                shift and go to state 78
    identifier                     shift and go to state 50

state 20

    (175) builtin_name -> UPPER .

    LPAREN          reduce using rule 175 (builtin_name -> UPPER .)


state 21

    (0) S' -> program .



state 22

    (177) builtin_name -> LENGTH .

    LPAREN          reduce using rule 177 (builtin_name -> LENGTH .)


state 23

    (6) statement -> synonym_statement .

    DCL             reduce using rule 6 (statement -> synonym_statement .)
    SYN             reduce using rule 6 (statement -> synonym_statement .)
    TYPE            reduce using rule 6 (statement -> synonym_statement .)
    ID              reduce using rule 6 (statement -> synonym_statement .)
    EXIT            reduce using rule 6 (statement -> synonym_statement .)
    RESULT          reduce using rule 6 (statement -> synonym_statement .)
    RETURN          reduce using rule 6 (statement -> synonym_statement .)
    IF              reduce using rule 6 (statement -> synonym_statement .)
    DO              reduce using rule 6 (statement -> synonym_statement .)
    ABS             reduce using rule 6 (statement -> synonym_statement .)
    ASC             reduce using rule 6 (statement -> synonym_statement .)
    NUM             reduce using rule 6 (statement -> synonym_statement .)
    UPPER           reduce using rule 6 (statement -> synonym_statement .)
    LOWER           reduce using rule 6 (statement -> synonym_statement .)
    LENGTH          reduce using rule 6 (statement -> synonym_statement .)
    READ            reduce using rule 6 (statement -> synonym_statement .)
    PRINT           reduce using rule 6 (statement -> synonym_statement .)
    $end            reduce using rule 6 (statement -> synonym_statement .)
    END             reduce using rule 6 (statement -> synonym_statement .)


state 24

    (179) builtin_name -> PRINT .

    LPAREN          reduce using rule 179 (builtin_name -> PRINT .)


state 25

    (148) action -> exit_action .

    SEMI            reduce using rule 148 (action -> exit_action .)


state 26

    (24) newmode_statement -> TYPE . newmode_list SEMI
    (25) newmode_list -> . mode_definition
    (26) newmode_list -> . mode_definition COMMA newmode_list
    (27) mode_definition -> . identifier_list ASSIGN mode
    (21) identifier_list -> . identifier
    (22) identifier_list -> . identifier COMMA identifier_list
    (23) identifier -> . ID

    ID              shift and go to state 47

    identifier_list                shift and go to state 80
    identifier                     shift and go to state 50
    newmode_list                   shift and go to state 81
    mode_definition                shift and go to state 79

state 27

    (7) statement -> newmode_statement .

    DCL             reduce using rule 7 (statement -> newmode_statement .)
    SYN             reduce using rule 7 (statement -> newmode_statement .)
    TYPE            reduce using rule 7 (statement -> newmode_statement .)
    ID              reduce using rule 7 (statement -> newmode_statement .)
    EXIT            reduce using rule 7 (statement -> newmode_statement .)
    RESULT          reduce using rule 7 (statement -> newmode_statement .)
    RETURN          reduce using rule 7 (statement -> newmode_statement .)
    IF              reduce using rule 7 (statement -> newmode_statement .)
    DO              reduce using rule 7 (statement -> newmode_statement .)
    ABS             reduce using rule 7 (statement -> newmode_statement .)
    ASC             reduce using rule 7 (statement -> newmode_statement .)
    NUM             reduce using rule 7 (statement -> newmode_statement .)
    UPPER           reduce using rule 7 (statement -> newmode_statement .)
    LOWER           reduce using rule 7 (statement -> newmode_statement .)
    LENGTH          reduce using rule 7 (statement -> newmode_statement .)
    READ            reduce using rule 7 (statement -> newmode_statement .)
    PRINT           reduce using rule 7 (statement -> newmode_statement .)
    $end            reduce using rule 7 (statement -> newmode_statement .)
    END             reduce using rule 7 (statement -> newmode_statement .)


state 28

    (151) bracketed_action -> if_action .

    SEMI            reduce using rule 151 (bracketed_action -> if_action .)


state 29

    (170) builtin_call -> builtin_name . LPAREN parameter_list RPAREN
    (171) builtin_call -> builtin_name . LPAREN RPAREN

    LPAREN          shift and go to state 82


state 30

    (145) action -> bracketed_action .

    SEMI            reduce using rule 145 (action -> bracketed_action .)


state 31

    (159) if_action -> IF . boolean_expression then_clause else_clause FI
    (160) if_action -> IF . boolean_expression then_clause FI
    (88) boolean_expression -> . expression AND expression
    (89) boolean_expression -> . expression OR expression
    (90) boolean_expression -> . expression EQUAL expression
    (91) boolean_expression -> . expression NOTEQ expression
    (92) boolean_expression -> . expression GREATER expression
    (93) boolean_expression -> . expression GTEQUAL expression
    (94) boolean_expression -> . expression LESS expression
    (95) boolean_expression -> . expression LTEQUAL expression
    (84) expression -> . operand0
    (85) expression -> . boolean_expression
    (86) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (96) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (97) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (104) operand1 -> . operand2
    (105) operand1 -> . operand1 operator2 operand2
    (106) operand2 -> . operand3
    (107) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (108) operand3 -> . monadic_operator operand4
    (109) operand3 -> . operand4
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    IF              shift and go to state 110
    MINUS           shift and go to state 100
    NOT             shift and go to state 104
    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ID              shift and go to state 56
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    integer_literal                shift and go to state 115
    empty_literal                  shift and go to state 83
    operand0                       shift and go to state 84
    expression                     shift and go to state 85
    call_action                    shift and go to state 86
    operand1                       shift and go to state 87
    value_array_slice              shift and go to state 89
    parenthesized_expression       shift and go to state 91
    boolean_expression             shift and go to state 92
    character_literal              shift and go to state 93
    operand3                       shift and go to state 94
    literal                        shift and go to state 96
    dereferenced_reference         shift and go to state 16
    array_location                 shift and go to state 101
    operand2                       shift and go to state 103
    builtin_call                   shift and go to state 12
    array_element                  shift and go to state 18
    array_slice                    shift and go to state 36
    conditional_expression         shift and go to state 88
    boolean_literal                shift and go to state 102
    referenced_location            shift and go to state 111
    builtin_name                   shift and go to state 29
    primitive_value                shift and go to state 107
    identifier                     shift and go to state 109
    value_array_element            shift and go to state 98
    operand4                       shift and go to state 112
    string_element                 shift and go to state 32
    character_string_literal       shift and go to state 113
    monadic_operator               shift and go to state 114
    location                       shift and go to state 41
    string_slice                   shift and go to state 45

state 32

    (68) location -> string_element .

    ARROW           reduce using rule 68 (location -> string_element .)
    LBRACKET        reduce using rule 68 (location -> string_element .)
    TIMES           reduce using rule 68 (location -> string_element .)
    DIVIDE          reduce using rule 68 (location -> string_element .)
    MODULO          reduce using rule 68 (location -> string_element .)
    PLUS            reduce using rule 68 (location -> string_element .)
    MINUS           reduce using rule 68 (location -> string_element .)
    CONCAT          reduce using rule 68 (location -> string_element .)
    IN              reduce using rule 68 (location -> string_element .)
    AND             reduce using rule 68 (location -> string_element .)
    OR              reduce using rule 68 (location -> string_element .)
    EQUAL           reduce using rule 68 (location -> string_element .)
    NOTEQ           reduce using rule 68 (location -> string_element .)
    GREATER         reduce using rule 68 (location -> string_element .)
    GTEQUAL         reduce using rule 68 (location -> string_element .)
    LESS            reduce using rule 68 (location -> string_element .)
    LTEQUAL         reduce using rule 68 (location -> string_element .)
    SEMI            reduce using rule 68 (location -> string_element .)
    THEN            reduce using rule 68 (location -> string_element .)
    COMMA           reduce using rule 68 (location -> string_element .)
    RBRACKET        reduce using rule 68 (location -> string_element .)
    COLON           reduce using rule 68 (location -> string_element .)
    RPAREN          reduce using rule 68 (location -> string_element .)
    DOWN            reduce using rule 68 (location -> string_element .)
    BY              reduce using rule 68 (location -> string_element .)
    TO              reduce using rule 68 (location -> string_element .)
    ELSE            reduce using rule 68 (location -> string_element .)
    ELSIF           reduce using rule 68 (location -> string_element .)
    FI              reduce using rule 68 (location -> string_element .)
    WHILE           reduce using rule 68 (location -> string_element .)
    ASSIGN          reduce using rule 68 (location -> string_element .)


state 33

    (144) action_statement -> action . SEMI

    SEMI            shift and go to state 117


state 34

    (185) return_action -> RETURN . result
    (186) result -> . expression
    (187) result -> . empty
    (84) expression -> . operand0
    (85) expression -> . boolean_expression
    (86) expression -> . conditional_expression
    (206) empty -> .
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (88) boolean_expression -> . expression AND expression
    (89) boolean_expression -> . expression OR expression
    (90) boolean_expression -> . expression EQUAL expression
    (91) boolean_expression -> . expression NOTEQ expression
    (92) boolean_expression -> . expression GREATER expression
    (93) boolean_expression -> . expression GTEQUAL expression
    (94) boolean_expression -> . expression LESS expression
    (95) boolean_expression -> . expression LTEQUAL expression
    (96) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (97) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (104) operand1 -> . operand2
    (105) operand1 -> . operand1 operator2 operand2
    (106) operand2 -> . operand3
    (107) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (108) operand3 -> . monadic_operator operand4
    (109) operand3 -> . operand4
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    SEMI            reduce using rule 206 (empty -> .)
    IF              shift and go to state 110
    MINUS           shift and go to state 100
    NOT             shift and go to state 104
    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ID              shift and go to state 56
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    integer_literal                shift and go to state 115
    empty_literal                  shift and go to state 83
    operand0                       shift and go to state 84
    empty                          shift and go to state 118
    expression                     shift and go to state 119
    call_action                    shift and go to state 86
    operand1                       shift and go to state 87
    conditional_expression         shift and go to state 88
    value_array_slice              shift and go to state 89
    parenthesized_expression       shift and go to state 91
    boolean_expression             shift and go to state 120
    character_literal              shift and go to state 93
    operand3                       shift and go to state 94
    literal                        shift and go to state 96
    dereferenced_reference         shift and go to state 16
    array_location                 shift and go to state 101
    operand2                       shift and go to state 103
    builtin_call                   shift and go to state 12
    array_element                  shift and go to state 18
    array_slice                    shift and go to state 36
    result                         shift and go to state 121
    boolean_literal                shift and go to state 102
    referenced_location            shift and go to state 111
    builtin_name                   shift and go to state 29
    primitive_value                shift and go to state 107
    identifier                     shift and go to state 109
    value_array_element            shift and go to state 98
    operand4                       shift and go to state 112
    string_element                 shift and go to state 32
    character_string_literal       shift and go to state 113
    monadic_operator               shift and go to state 114
    location                       shift and go to state 41
    string_slice                   shift and go to state 45

state 35

    (143) action_statement -> identifier . COLON action SEMI
    (66) location -> identifier .
    (74) string_element -> identifier . LBRACKET start_element RBRACKET
    (76) string_slice -> identifier . LBRACKET left_element COLON right_element RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    COLON           shift and go to state 123
    ARROW           reduce using rule 66 (location -> identifier .)
    ASSIGN          reduce using rule 66 (location -> identifier .)
    PLUS            reduce using rule 66 (location -> identifier .)
    MINUS           reduce using rule 66 (location -> identifier .)
    TIMES           reduce using rule 66 (location -> identifier .)
    DIVIDE          reduce using rule 66 (location -> identifier .)
    MODULO          reduce using rule 66 (location -> identifier .)
    CONCAT          reduce using rule 66 (location -> identifier .)
    LBRACKET        shift and go to state 122

  ! LBRACKET        [ reduce using rule 66 (location -> identifier .) ]


state 36

    (71) location -> array_slice .

    ARROW           reduce using rule 71 (location -> array_slice .)
    LBRACKET        reduce using rule 71 (location -> array_slice .)
    TIMES           reduce using rule 71 (location -> array_slice .)
    DIVIDE          reduce using rule 71 (location -> array_slice .)
    MODULO          reduce using rule 71 (location -> array_slice .)
    PLUS            reduce using rule 71 (location -> array_slice .)
    MINUS           reduce using rule 71 (location -> array_slice .)
    CONCAT          reduce using rule 71 (location -> array_slice .)
    IN              reduce using rule 71 (location -> array_slice .)
    AND             reduce using rule 71 (location -> array_slice .)
    OR              reduce using rule 71 (location -> array_slice .)
    EQUAL           reduce using rule 71 (location -> array_slice .)
    NOTEQ           reduce using rule 71 (location -> array_slice .)
    GREATER         reduce using rule 71 (location -> array_slice .)
    GTEQUAL         reduce using rule 71 (location -> array_slice .)
    LESS            reduce using rule 71 (location -> array_slice .)
    LTEQUAL         reduce using rule 71 (location -> array_slice .)
    SEMI            reduce using rule 71 (location -> array_slice .)
    THEN            reduce using rule 71 (location -> array_slice .)
    COMMA           reduce using rule 71 (location -> array_slice .)
    RBRACKET        reduce using rule 71 (location -> array_slice .)
    COLON           reduce using rule 71 (location -> array_slice .)
    RPAREN          reduce using rule 71 (location -> array_slice .)
    DOWN            reduce using rule 71 (location -> array_slice .)
    BY              reduce using rule 71 (location -> array_slice .)
    TO              reduce using rule 71 (location -> array_slice .)
    ELSE            reduce using rule 71 (location -> array_slice .)
    ELSIF           reduce using rule 71 (location -> array_slice .)
    FI              reduce using rule 71 (location -> array_slice .)
    WHILE           reduce using rule 71 (location -> array_slice .)
    ASSIGN          reduce using rule 71 (location -> array_slice .)


state 37

    (2) statement_list -> statement . statement_nullable
    (3) statement_nullable -> . statement statement_nullable
    (4) statement_nullable -> . empty
    (5) statement -> . declaration_statement
    (6) statement -> . synonym_statement
    (7) statement -> . newmode_statement
    (8) statement -> . action_statement
    (9) statement -> . procedure_statement
    (206) empty -> .
    (15) declaration_statement -> . DCL declaration_list SEMI
    (10) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (143) action_statement -> . identifier COLON action SEMI
    (144) action_statement -> . action SEMI
    (28) procedure_statement -> . ID COLON procedure_definition
    (23) identifier -> . ID
    (145) action -> . bracketed_action
    (146) action -> . assignment_action
    (147) action -> . call_action
    (148) action -> . exit_action
    (149) action -> . result_action
    (150) action -> . return_action
    (151) bracketed_action -> . if_action
    (152) bracketed_action -> . do_action
    (153) assignment_action -> . array_location assigning_operator expression
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (184) exit_action -> . EXIT identifier
    (188) result_action -> . RESULT expression
    (185) return_action -> . RETURN result
    (159) if_action -> . IF boolean_expression then_clause else_clause FI
    (160) if_action -> . IF boolean_expression then_clause FI
    (189) do_action -> . DO control_part SEMI action_statement_nullable OD
    (190) do_action -> . DO action_statement_nullable OD
    (83) array_location -> . location
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    $end            reduce using rule 206 (empty -> .)
    DCL             shift and go to state 5
    SYN             shift and go to state 19
    TYPE            shift and go to state 26
    ID              shift and go to state 17
    EXIT            shift and go to state 42
    RESULT          shift and go to state 44
    RETURN          shift and go to state 34
    IF              shift and go to state 31
    DO              shift and go to state 10
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    call_action                    shift and go to state 2
    statement                      shift and go to state 126
    declaration_statement          shift and go to state 3
    empty                          shift and go to state 124
    action_statement               shift and go to state 9
    assignment_action              shift and go to state 4
    result_action                  shift and go to state 11
    dereferenced_reference         shift and go to state 16
    array_location                 shift and go to state 13
    statement_nullable             shift and go to state 125
    procedure_statement            shift and go to state 15
    builtin_call                   shift and go to state 12
    array_element                  shift and go to state 18
    synonym_statement              shift and go to state 23
    exit_action                    shift and go to state 25
    return_action                  shift and go to state 43
    newmode_statement              shift and go to state 27
    if_action                      shift and go to state 28
    bracketed_action               shift and go to state 30
    action                         shift and go to state 33
    string_element                 shift and go to state 32
    array_slice                    shift and go to state 36
    identifier                     shift and go to state 35
    do_action                      shift and go to state 40
    location                       shift and go to state 41
    builtin_name                   shift and go to state 29
    string_slice                   shift and go to state 45

state 38

    (1) program -> statement_list .

    $end            reduce using rule 1 (program -> statement_list .)


state 39

    (172) builtin_name -> ABS .

    LPAREN          reduce using rule 172 (builtin_name -> ABS .)


state 40

    (152) bracketed_action -> do_action .

    SEMI            reduce using rule 152 (bracketed_action -> do_action .)


state 41

    (83) array_location -> location .

    ARROW           reduce using rule 83 (array_location -> location .)
    LBRACKET        reduce using rule 83 (array_location -> location .)
    TIMES           reduce using rule 83 (array_location -> location .)
    DIVIDE          reduce using rule 83 (array_location -> location .)
    MODULO          reduce using rule 83 (array_location -> location .)
    PLUS            reduce using rule 83 (array_location -> location .)
    MINUS           reduce using rule 83 (array_location -> location .)
    CONCAT          reduce using rule 83 (array_location -> location .)
    IN              reduce using rule 83 (array_location -> location .)
    DOWN            reduce using rule 83 (array_location -> location .)
    AND             reduce using rule 83 (array_location -> location .)
    OR              reduce using rule 83 (array_location -> location .)
    EQUAL           reduce using rule 83 (array_location -> location .)
    NOTEQ           reduce using rule 83 (array_location -> location .)
    GREATER         reduce using rule 83 (array_location -> location .)
    GTEQUAL         reduce using rule 83 (array_location -> location .)
    LESS            reduce using rule 83 (array_location -> location .)
    LTEQUAL         reduce using rule 83 (array_location -> location .)
    BY              reduce using rule 83 (array_location -> location .)
    TO              reduce using rule 83 (array_location -> location .)
    ASSIGN          reduce using rule 83 (array_location -> location .)
    WHILE           reduce using rule 83 (array_location -> location .)
    SEMI            reduce using rule 83 (array_location -> location .)
    RBRACKET        reduce using rule 83 (array_location -> location .)
    COMMA           reduce using rule 83 (array_location -> location .)
    COLON           reduce using rule 83 (array_location -> location .)
    RPAREN          reduce using rule 83 (array_location -> location .)
    THEN            reduce using rule 83 (array_location -> location .)
    ELSE            reduce using rule 83 (array_location -> location .)
    ELSIF           reduce using rule 83 (array_location -> location .)
    FI              reduce using rule 83 (array_location -> location .)


state 42

    (184) exit_action -> EXIT . identifier
    (23) identifier -> . ID

    ID              shift and go to state 47

    identifier                     shift and go to state 127

state 43

    (150) action -> return_action .

    SEMI            reduce using rule 150 (action -> return_action .)


state 44

    (188) result_action -> RESULT . expression
    (84) expression -> . operand0
    (85) expression -> . boolean_expression
    (86) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (88) boolean_expression -> . expression AND expression
    (89) boolean_expression -> . expression OR expression
    (90) boolean_expression -> . expression EQUAL expression
    (91) boolean_expression -> . expression NOTEQ expression
    (92) boolean_expression -> . expression GREATER expression
    (93) boolean_expression -> . expression GTEQUAL expression
    (94) boolean_expression -> . expression LESS expression
    (95) boolean_expression -> . expression LTEQUAL expression
    (96) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (97) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (104) operand1 -> . operand2
    (105) operand1 -> . operand1 operator2 operand2
    (106) operand2 -> . operand3
    (107) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (108) operand3 -> . monadic_operator operand4
    (109) operand3 -> . operand4
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    IF              shift and go to state 110
    MINUS           shift and go to state 100
    NOT             shift and go to state 104
    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ID              shift and go to state 56
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    empty_literal                  shift and go to state 83
    operand0                       shift and go to state 84
    expression                     shift and go to state 128
    call_action                    shift and go to state 86
    operand1                       shift and go to state 87
    value_array_slice              shift and go to state 89
    monadic_operator               shift and go to state 114
    parenthesized_expression       shift and go to state 91
    boolean_expression             shift and go to state 120
    character_literal              shift and go to state 93
    operand3                       shift and go to state 94
    literal                        shift and go to state 96
    builtin_call                   shift and go to state 12
    array_location                 shift and go to state 101
    operand2                       shift and go to state 103
    array_element                  shift and go to state 18
    array_slice                    shift and go to state 36
    conditional_expression         shift and go to state 88
    boolean_literal                shift and go to state 102
    builtin_name                   shift and go to state 29
    primitive_value                shift and go to state 107
    value_array_element            shift and go to state 98
    referenced_location            shift and go to state 111
    operand4                       shift and go to state 112
    dereferenced_reference         shift and go to state 16
    string_element                 shift and go to state 32
    character_string_literal       shift and go to state 113
    identifier                     shift and go to state 109
    location                       shift and go to state 41
    integer_literal                shift and go to state 115
    string_slice                   shift and go to state 45

state 45

    (69) location -> string_slice .

    ARROW           reduce using rule 69 (location -> string_slice .)
    LBRACKET        reduce using rule 69 (location -> string_slice .)
    TIMES           reduce using rule 69 (location -> string_slice .)
    DIVIDE          reduce using rule 69 (location -> string_slice .)
    MODULO          reduce using rule 69 (location -> string_slice .)
    PLUS            reduce using rule 69 (location -> string_slice .)
    MINUS           reduce using rule 69 (location -> string_slice .)
    CONCAT          reduce using rule 69 (location -> string_slice .)
    IN              reduce using rule 69 (location -> string_slice .)
    AND             reduce using rule 69 (location -> string_slice .)
    OR              reduce using rule 69 (location -> string_slice .)
    EQUAL           reduce using rule 69 (location -> string_slice .)
    NOTEQ           reduce using rule 69 (location -> string_slice .)
    GREATER         reduce using rule 69 (location -> string_slice .)
    GTEQUAL         reduce using rule 69 (location -> string_slice .)
    LESS            reduce using rule 69 (location -> string_slice .)
    LTEQUAL         reduce using rule 69 (location -> string_slice .)
    SEMI            reduce using rule 69 (location -> string_slice .)
    THEN            reduce using rule 69 (location -> string_slice .)
    COMMA           reduce using rule 69 (location -> string_slice .)
    RBRACKET        reduce using rule 69 (location -> string_slice .)
    COLON           reduce using rule 69 (location -> string_slice .)
    RPAREN          reduce using rule 69 (location -> string_slice .)
    DOWN            reduce using rule 69 (location -> string_slice .)
    BY              reduce using rule 69 (location -> string_slice .)
    TO              reduce using rule 69 (location -> string_slice .)
    ELSE            reduce using rule 69 (location -> string_slice .)
    ELSIF           reduce using rule 69 (location -> string_slice .)
    FI              reduce using rule 69 (location -> string_slice .)
    WHILE           reduce using rule 69 (location -> string_slice .)
    ASSIGN          reduce using rule 69 (location -> string_slice .)


state 46

    (18) declaration -> identifier_list . mode initialization
    (19) declaration -> identifier_list . mode
    (37) mode -> . mode_name
    (38) mode -> . discrete_mode
    (39) mode -> . reference_mode
    (40) mode -> . composite_mode
    (41) mode_name -> . identifier
    (42) discrete_mode -> . integer_mode
    (43) discrete_mode -> . boolean_mode
    (44) discrete_mode -> . character_mode
    (45) discrete_mode -> . discrete_range_mode
    (55) reference_mode -> . REF mode
    (56) composite_mode -> . string_mode
    (57) composite_mode -> . array_mode
    (23) identifier -> . ID
    (47) integer_mode -> . INT
    (48) boolean_mode -> . BOOL
    (49) character_mode -> . CHAR
    (50) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (51) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (58) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (60) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (46) discrete_mode_name -> . identifier

    REF             shift and go to state 146
    ID              shift and go to state 47
    INT             shift and go to state 131
    BOOL            shift and go to state 130
    CHAR            shift and go to state 129
    CHARS           shift and go to state 147
    ARRAY           shift and go to state 132

    integer_mode                   shift and go to state 138
    reference_mode                 shift and go to state 139
    string_mode                    shift and go to state 137
    identifier                     shift and go to state 140
    composite_mode                 shift and go to state 133
    array_mode                     shift and go to state 141
    character_mode                 shift and go to state 142
    boolean_mode                   shift and go to state 143
    discrete_mode_name             shift and go to state 135
    mode_name                      shift and go to state 136
    discrete_range_mode            shift and go to state 134
    mode                           shift and go to state 144
    discrete_mode                  shift and go to state 145

state 47

    (23) identifier -> ID .

    ASSIGN          reduce using rule 23 (identifier -> ID .)
    COMMA           reduce using rule 23 (identifier -> ID .)
    SEMI            reduce using rule 23 (identifier -> ID .)
    LPAREN          reduce using rule 23 (identifier -> ID .)
    LOC             reduce using rule 23 (identifier -> ID .)
    RPAREN          reduce using rule 23 (identifier -> ID .)
    REF             reduce using rule 23 (identifier -> ID .)
    ID              reduce using rule 23 (identifier -> ID .)
    INT             reduce using rule 23 (identifier -> ID .)
    BOOL            reduce using rule 23 (identifier -> ID .)
    CHAR            reduce using rule 23 (identifier -> ID .)
    CHARS           reduce using rule 23 (identifier -> ID .)
    ARRAY           reduce using rule 23 (identifier -> ID .)
    DOWN            reduce using rule 23 (identifier -> ID .)
    IN              reduce using rule 23 (identifier -> ID .)


state 48

    (15) declaration_statement -> DCL declaration_list . SEMI

    SEMI            shift and go to state 148


state 49

    (16) declaration_list -> declaration .
    (17) declaration_list -> declaration . COMMA declaration_list

    SEMI            reduce using rule 16 (declaration_list -> declaration .)
    COMMA           shift and go to state 149


state 50

    (21) identifier_list -> identifier .
    (22) identifier_list -> identifier . COMMA identifier_list

    REF             reduce using rule 21 (identifier_list -> identifier .)
    ID              reduce using rule 21 (identifier_list -> identifier .)
    INT             reduce using rule 21 (identifier_list -> identifier .)
    BOOL            reduce using rule 21 (identifier_list -> identifier .)
    CHAR            reduce using rule 21 (identifier_list -> identifier .)
    CHARS           reduce using rule 21 (identifier_list -> identifier .)
    ARRAY           reduce using rule 21 (identifier_list -> identifier .)
    ASSIGN          reduce using rule 21 (identifier_list -> identifier .)
    COMMA           shift and go to state 150


state 51

    (167) action_statement_nullable -> empty .

    OD              reduce using rule 167 (action_statement_nullable -> empty .)
    FI              reduce using rule 167 (action_statement_nullable -> empty .)
    ELSE            reduce using rule 167 (action_statement_nullable -> empty .)
    ELSIF           reduce using rule 167 (action_statement_nullable -> empty .)


state 52

    (205) while_control -> WHILE . expression
    (84) expression -> . operand0
    (85) expression -> . boolean_expression
    (86) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (88) boolean_expression -> . expression AND expression
    (89) boolean_expression -> . expression OR expression
    (90) boolean_expression -> . expression EQUAL expression
    (91) boolean_expression -> . expression NOTEQ expression
    (92) boolean_expression -> . expression GREATER expression
    (93) boolean_expression -> . expression GTEQUAL expression
    (94) boolean_expression -> . expression LESS expression
    (95) boolean_expression -> . expression LTEQUAL expression
    (96) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (97) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (104) operand1 -> . operand2
    (105) operand1 -> . operand1 operator2 operand2
    (106) operand2 -> . operand3
    (107) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (108) operand3 -> . monadic_operator operand4
    (109) operand3 -> . operand4
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    IF              shift and go to state 110
    MINUS           shift and go to state 100
    NOT             shift and go to state 104
    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ID              shift and go to state 56
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    empty_literal                  shift and go to state 83
    operand0                       shift and go to state 84
    expression                     shift and go to state 151
    call_action                    shift and go to state 86
    operand1                       shift and go to state 87
    value_array_slice              shift and go to state 89
    monadic_operator               shift and go to state 114
    parenthesized_expression       shift and go to state 91
    boolean_expression             shift and go to state 120
    character_literal              shift and go to state 93
    operand3                       shift and go to state 94
    literal                        shift and go to state 96
    builtin_call                   shift and go to state 12
    array_location                 shift and go to state 101
    operand2                       shift and go to state 103
    array_element                  shift and go to state 18
    array_slice                    shift and go to state 36
    conditional_expression         shift and go to state 88
    boolean_literal                shift and go to state 102
    builtin_name                   shift and go to state 29
    primitive_value                shift and go to state 107
    value_array_element            shift and go to state 98
    referenced_location            shift and go to state 111
    operand4                       shift and go to state 112
    dereferenced_reference         shift and go to state 16
    string_element                 shift and go to state 32
    character_string_literal       shift and go to state 113
    identifier                     shift and go to state 109
    location                       shift and go to state 41
    integer_literal                shift and go to state 115
    string_slice                   shift and go to state 45

state 53

    (166) action_statement_nullable -> action_statement . action_statement_nullable
    (166) action_statement_nullable -> . action_statement action_statement_nullable
    (167) action_statement_nullable -> . empty
    (143) action_statement -> . identifier COLON action SEMI
    (144) action_statement -> . action SEMI
    (206) empty -> .
    (23) identifier -> . ID
    (145) action -> . bracketed_action
    (146) action -> . assignment_action
    (147) action -> . call_action
    (148) action -> . exit_action
    (149) action -> . result_action
    (150) action -> . return_action
    (151) bracketed_action -> . if_action
    (152) bracketed_action -> . do_action
    (153) assignment_action -> . array_location assigning_operator expression
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (184) exit_action -> . EXIT identifier
    (188) result_action -> . RESULT expression
    (185) return_action -> . RETURN result
    (159) if_action -> . IF boolean_expression then_clause else_clause FI
    (160) if_action -> . IF boolean_expression then_clause FI
    (189) do_action -> . DO control_part SEMI action_statement_nullable OD
    (190) do_action -> . DO action_statement_nullable OD
    (83) array_location -> . location
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    OD              reduce using rule 206 (empty -> .)
    FI              reduce using rule 206 (empty -> .)
    ELSE            reduce using rule 206 (empty -> .)
    ELSIF           reduce using rule 206 (empty -> .)
    ID              shift and go to state 56
    EXIT            shift and go to state 42
    RESULT          shift and go to state 44
    RETURN          shift and go to state 34
    IF              shift and go to state 31
    DO              shift and go to state 10
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    call_action                    shift and go to state 2
    empty                          shift and go to state 51
    action_statement               shift and go to state 53
    return_action                  shift and go to state 43
    if_action                      shift and go to state 28
    builtin_name                   shift and go to state 29
    bracketed_action               shift and go to state 30
    assignment_action              shift and go to state 4
    result_action                  shift and go to state 11
    action                         shift and go to state 33
    string_element                 shift and go to state 32
    string_slice                   shift and go to state 45
    identifier                     shift and go to state 35
    array_location                 shift and go to state 13
    dereferenced_reference         shift and go to state 16
    array_slice                    shift and go to state 36
    do_action                      shift and go to state 40
    builtin_call                   shift and go to state 12
    exit_action                    shift and go to state 25
    array_element                  shift and go to state 18
    action_statement_nullable      shift and go to state 152
    location                       shift and go to state 41

state 54

    (189) do_action -> DO control_part . SEMI action_statement_nullable OD

    SEMI            shift and go to state 153


state 55

    (193) control_part -> while_control .

    SEMI            reduce using rule 193 (control_part -> while_control .)


state 56

    (23) identifier -> ID .
    (180) procedure_call -> ID . LPAREN parameter_list RPAREN
    (181) procedure_call -> ID . LPAREN RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    LBRACKET        reduce using rule 23 (identifier -> ID .)
    ARROW           reduce using rule 23 (identifier -> ID .)
    TIMES           reduce using rule 23 (identifier -> ID .)
    DIVIDE          reduce using rule 23 (identifier -> ID .)
    MODULO          reduce using rule 23 (identifier -> ID .)
    PLUS            reduce using rule 23 (identifier -> ID .)
    MINUS           reduce using rule 23 (identifier -> ID .)
    CONCAT          reduce using rule 23 (identifier -> ID .)
    IN              reduce using rule 23 (identifier -> ID .)
    COMMA           reduce using rule 23 (identifier -> ID .)
    AND             reduce using rule 23 (identifier -> ID .)
    OR              reduce using rule 23 (identifier -> ID .)
    EQUAL           reduce using rule 23 (identifier -> ID .)
    NOTEQ           reduce using rule 23 (identifier -> ID .)
    GREATER         reduce using rule 23 (identifier -> ID .)
    GTEQUAL         reduce using rule 23 (identifier -> ID .)
    LESS            reduce using rule 23 (identifier -> ID .)
    LTEQUAL         reduce using rule 23 (identifier -> ID .)
    RPAREN          reduce using rule 23 (identifier -> ID .)
    RBRACKET        reduce using rule 23 (identifier -> ID .)
    COLON           reduce using rule 23 (identifier -> ID .)
    FI              reduce using rule 23 (identifier -> ID .)
    THEN            reduce using rule 23 (identifier -> ID .)
    SEMI            reduce using rule 23 (identifier -> ID .)
    DOWN            reduce using rule 23 (identifier -> ID .)
    BY              reduce using rule 23 (identifier -> ID .)
    TO              reduce using rule 23 (identifier -> ID .)
    ELSE            reduce using rule 23 (identifier -> ID .)
    ELSIF           reduce using rule 23 (identifier -> ID .)
    WHILE           reduce using rule 23 (identifier -> ID .)
    ASSIGN          reduce using rule 23 (identifier -> ID .)
    LPAREN          shift and go to state 75

  ! LPAREN          [ reduce using rule 23 (identifier -> ID .) ]


state 57

    (190) do_action -> DO action_statement_nullable . OD

    OD              shift and go to state 154


state 58

    (194) for_control -> FOR . iteration
    (195) iteration -> . step_enumeration
    (196) iteration -> . range_enumeration
    (197) step_enumeration -> . identifier ASSIGN expression step_value DOWN end_value
    (198) step_enumeration -> . identifier ASSIGN expression step_value end_value
    (199) step_enumeration -> . identifier ASSIGN expression DOWN end_value
    (200) step_enumeration -> . identifier ASSIGN expression end_value
    (203) range_enumeration -> . identifier DOWN IN discrete_mode
    (204) range_enumeration -> . identifier IN discrete_mode
    (23) identifier -> . ID

    ID              shift and go to state 47

    range_enumeration              shift and go to state 157
    identifier                     shift and go to state 156
    iteration                      shift and go to state 155
    step_enumeration               shift and go to state 158

state 59

    (191) control_part -> for_control . while_control
    (192) control_part -> for_control .
    (205) while_control -> . WHILE expression

    SEMI            reduce using rule 192 (control_part -> for_control .)
    WHILE           shift and go to state 52

    while_control                  shift and go to state 159

state 60

    (157) closed_dyadic_operator -> arithmetic_multiplicative_operator .

    ASSIGN          reduce using rule 157 (closed_dyadic_operator -> arithmetic_multiplicative_operator .)


state 61

    (122) arithmetic_additive_operator -> PLUS .

    MINUS           reduce using rule 122 (arithmetic_additive_operator -> PLUS .)
    NOT             reduce using rule 122 (arithmetic_additive_operator -> PLUS .)
    ARROW           reduce using rule 122 (arithmetic_additive_operator -> PLUS .)
    LPAREN          reduce using rule 122 (arithmetic_additive_operator -> PLUS .)
    ID              reduce using rule 122 (arithmetic_additive_operator -> PLUS .)
    ICONST          reduce using rule 122 (arithmetic_additive_operator -> PLUS .)
    TRUE            reduce using rule 122 (arithmetic_additive_operator -> PLUS .)
    FALSE           reduce using rule 122 (arithmetic_additive_operator -> PLUS .)
    CCONST          reduce using rule 122 (arithmetic_additive_operator -> PLUS .)
    NULL            reduce using rule 122 (arithmetic_additive_operator -> PLUS .)
    SCONST          reduce using rule 122 (arithmetic_additive_operator -> PLUS .)
    ABS             reduce using rule 122 (arithmetic_additive_operator -> PLUS .)
    ASC             reduce using rule 122 (arithmetic_additive_operator -> PLUS .)
    NUM             reduce using rule 122 (arithmetic_additive_operator -> PLUS .)
    UPPER           reduce using rule 122 (arithmetic_additive_operator -> PLUS .)
    LOWER           reduce using rule 122 (arithmetic_additive_operator -> PLUS .)
    LENGTH          reduce using rule 122 (arithmetic_additive_operator -> PLUS .)
    READ            reduce using rule 122 (arithmetic_additive_operator -> PLUS .)
    PRINT           reduce using rule 122 (arithmetic_additive_operator -> PLUS .)
    ASSIGN          reduce using rule 122 (arithmetic_additive_operator -> PLUS .)


state 62

    (154) assigning_operator -> closed_dyadic_operator . ASSIGN

    ASSIGN          shift and go to state 160


state 63

    (158) closed_dyadic_operator -> string_concatenation_operator .

    ASSIGN          reduce using rule 158 (closed_dyadic_operator -> string_concatenation_operator .)


state 64

    (73) dereferenced_reference -> array_location ARROW .

    ARROW           reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    LBRACKET        reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    TIMES           reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    DIVIDE          reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    MODULO          reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    PLUS            reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    MINUS           reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    CONCAT          reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    IN              reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    AND             reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    OR              reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    EQUAL           reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    NOTEQ           reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    GREATER         reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    GTEQUAL         reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    LESS            reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    LTEQUAL         reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    SEMI            reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    COMMA           reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    RBRACKET        reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    COLON           reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    RPAREN          reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    THEN            reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    DOWN            reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    BY              reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    TO              reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    ELSE            reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    ELSIF           reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    FI              reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    WHILE           reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    ASSIGN          reduce using rule 73 (dereferenced_reference -> array_location ARROW .)


state 65

    (124) string_concatenation_operator -> CONCAT .

    ASSIGN          reduce using rule 124 (string_concatenation_operator -> CONCAT .)
    MINUS           reduce using rule 124 (string_concatenation_operator -> CONCAT .)
    NOT             reduce using rule 124 (string_concatenation_operator -> CONCAT .)
    ARROW           reduce using rule 124 (string_concatenation_operator -> CONCAT .)
    LPAREN          reduce using rule 124 (string_concatenation_operator -> CONCAT .)
    ID              reduce using rule 124 (string_concatenation_operator -> CONCAT .)
    ICONST          reduce using rule 124 (string_concatenation_operator -> CONCAT .)
    TRUE            reduce using rule 124 (string_concatenation_operator -> CONCAT .)
    FALSE           reduce using rule 124 (string_concatenation_operator -> CONCAT .)
    CCONST          reduce using rule 124 (string_concatenation_operator -> CONCAT .)
    NULL            reduce using rule 124 (string_concatenation_operator -> CONCAT .)
    SCONST          reduce using rule 124 (string_concatenation_operator -> CONCAT .)
    ABS             reduce using rule 124 (string_concatenation_operator -> CONCAT .)
    ASC             reduce using rule 124 (string_concatenation_operator -> CONCAT .)
    NUM             reduce using rule 124 (string_concatenation_operator -> CONCAT .)
    UPPER           reduce using rule 124 (string_concatenation_operator -> CONCAT .)
    LOWER           reduce using rule 124 (string_concatenation_operator -> CONCAT .)
    LENGTH          reduce using rule 124 (string_concatenation_operator -> CONCAT .)
    READ            reduce using rule 124 (string_concatenation_operator -> CONCAT .)
    PRINT           reduce using rule 124 (string_concatenation_operator -> CONCAT .)


state 66

    (115) arithmetic_multiplicative_operator -> MODULO .

    ASSIGN          reduce using rule 115 (arithmetic_multiplicative_operator -> MODULO .)
    MINUS           reduce using rule 115 (arithmetic_multiplicative_operator -> MODULO .)
    NOT             reduce using rule 115 (arithmetic_multiplicative_operator -> MODULO .)
    ARROW           reduce using rule 115 (arithmetic_multiplicative_operator -> MODULO .)
    LPAREN          reduce using rule 115 (arithmetic_multiplicative_operator -> MODULO .)
    ID              reduce using rule 115 (arithmetic_multiplicative_operator -> MODULO .)
    ICONST          reduce using rule 115 (arithmetic_multiplicative_operator -> MODULO .)
    TRUE            reduce using rule 115 (arithmetic_multiplicative_operator -> MODULO .)
    FALSE           reduce using rule 115 (arithmetic_multiplicative_operator -> MODULO .)
    CCONST          reduce using rule 115 (arithmetic_multiplicative_operator -> MODULO .)
    NULL            reduce using rule 115 (arithmetic_multiplicative_operator -> MODULO .)
    SCONST          reduce using rule 115 (arithmetic_multiplicative_operator -> MODULO .)
    ABS             reduce using rule 115 (arithmetic_multiplicative_operator -> MODULO .)
    ASC             reduce using rule 115 (arithmetic_multiplicative_operator -> MODULO .)
    NUM             reduce using rule 115 (arithmetic_multiplicative_operator -> MODULO .)
    UPPER           reduce using rule 115 (arithmetic_multiplicative_operator -> MODULO .)
    LOWER           reduce using rule 115 (arithmetic_multiplicative_operator -> MODULO .)
    LENGTH          reduce using rule 115 (arithmetic_multiplicative_operator -> MODULO .)
    READ            reduce using rule 115 (arithmetic_multiplicative_operator -> MODULO .)
    PRINT           reduce using rule 115 (arithmetic_multiplicative_operator -> MODULO .)


state 67

    (153) assignment_action -> array_location assigning_operator . expression
    (84) expression -> . operand0
    (85) expression -> . boolean_expression
    (86) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (88) boolean_expression -> . expression AND expression
    (89) boolean_expression -> . expression OR expression
    (90) boolean_expression -> . expression EQUAL expression
    (91) boolean_expression -> . expression NOTEQ expression
    (92) boolean_expression -> . expression GREATER expression
    (93) boolean_expression -> . expression GTEQUAL expression
    (94) boolean_expression -> . expression LESS expression
    (95) boolean_expression -> . expression LTEQUAL expression
    (96) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (97) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (104) operand1 -> . operand2
    (105) operand1 -> . operand1 operator2 operand2
    (106) operand2 -> . operand3
    (107) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (108) operand3 -> . monadic_operator operand4
    (109) operand3 -> . operand4
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    IF              shift and go to state 110
    MINUS           shift and go to state 100
    NOT             shift and go to state 104
    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ID              shift and go to state 56
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    integer_literal                shift and go to state 115
    empty_literal                  shift and go to state 83
    operand0                       shift and go to state 84
    expression                     shift and go to state 161
    call_action                    shift and go to state 86
    operand1                       shift and go to state 87
    value_array_slice              shift and go to state 89
    parenthesized_expression       shift and go to state 91
    boolean_expression             shift and go to state 120
    character_literal              shift and go to state 93
    operand3                       shift and go to state 94
    literal                        shift and go to state 96
    dereferenced_reference         shift and go to state 16
    array_location                 shift and go to state 101
    operand2                       shift and go to state 103
    builtin_call                   shift and go to state 12
    array_element                  shift and go to state 18
    array_slice                    shift and go to state 36
    conditional_expression         shift and go to state 88
    boolean_literal                shift and go to state 102
    referenced_location            shift and go to state 111
    builtin_name                   shift and go to state 29
    primitive_value                shift and go to state 107
    identifier                     shift and go to state 109
    value_array_element            shift and go to state 98
    operand4                       shift and go to state 112
    string_element                 shift and go to state 32
    character_string_literal       shift and go to state 113
    monadic_operator               shift and go to state 114
    location                       shift and go to state 41
    string_slice                   shift and go to state 45

state 68

    (79) array_element -> array_location LBRACKET . expression_list RBRACKET
    (82) array_slice -> array_location LBRACKET . lower_bound COLON upper_bound RBRACKET
    (80) expression_list -> . expression
    (81) expression_list -> . expression COMMA expression_list
    (53) lower_bound -> . expression
    (84) expression -> . operand0
    (85) expression -> . boolean_expression
    (86) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (88) boolean_expression -> . expression AND expression
    (89) boolean_expression -> . expression OR expression
    (90) boolean_expression -> . expression EQUAL expression
    (91) boolean_expression -> . expression NOTEQ expression
    (92) boolean_expression -> . expression GREATER expression
    (93) boolean_expression -> . expression GTEQUAL expression
    (94) boolean_expression -> . expression LESS expression
    (95) boolean_expression -> . expression LTEQUAL expression
    (96) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (97) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (104) operand1 -> . operand2
    (105) operand1 -> . operand1 operator2 operand2
    (106) operand2 -> . operand3
    (107) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (108) operand3 -> . monadic_operator operand4
    (109) operand3 -> . operand4
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    IF              shift and go to state 110
    MINUS           shift and go to state 100
    NOT             shift and go to state 104
    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ID              shift and go to state 56
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    integer_literal                shift and go to state 115
    empty_literal                  shift and go to state 83
    operand0                       shift and go to state 84
    expression                     shift and go to state 162
    call_action                    shift and go to state 86
    operand1                       shift and go to state 87
    value_array_slice              shift and go to state 89
    parenthesized_expression       shift and go to state 91
    boolean_expression             shift and go to state 120
    character_literal              shift and go to state 93
    operand3                       shift and go to state 94
    literal                        shift and go to state 96
    value_array_element            shift and go to state 98
    array_location                 shift and go to state 101
    operand2                       shift and go to state 103
    builtin_call                   shift and go to state 12
    array_element                  shift and go to state 18
    array_slice                    shift and go to state 36
    conditional_expression         shift and go to state 88
    boolean_literal                shift and go to state 102
    lower_bound                    shift and go to state 163
    primitive_value                shift and go to state 107
    identifier                     shift and go to state 109
    referenced_location            shift and go to state 111
    expression_list                shift and go to state 164
    operand4                       shift and go to state 112
    dereferenced_reference         shift and go to state 16
    string_element                 shift and go to state 32
    monadic_operator               shift and go to state 114
    location                       shift and go to state 41
    builtin_name                   shift and go to state 29
    character_string_literal       shift and go to state 113
    string_slice                   shift and go to state 45

state 69

    (156) closed_dyadic_operator -> arithmetic_additive_operator .

    ASSIGN          reduce using rule 156 (closed_dyadic_operator -> arithmetic_additive_operator .)


state 70

    (123) arithmetic_additive_operator -> MINUS .

    MINUS           reduce using rule 123 (arithmetic_additive_operator -> MINUS .)
    NOT             reduce using rule 123 (arithmetic_additive_operator -> MINUS .)
    ARROW           reduce using rule 123 (arithmetic_additive_operator -> MINUS .)
    LPAREN          reduce using rule 123 (arithmetic_additive_operator -> MINUS .)
    ID              reduce using rule 123 (arithmetic_additive_operator -> MINUS .)
    ICONST          reduce using rule 123 (arithmetic_additive_operator -> MINUS .)
    TRUE            reduce using rule 123 (arithmetic_additive_operator -> MINUS .)
    FALSE           reduce using rule 123 (arithmetic_additive_operator -> MINUS .)
    CCONST          reduce using rule 123 (arithmetic_additive_operator -> MINUS .)
    NULL            reduce using rule 123 (arithmetic_additive_operator -> MINUS .)
    SCONST          reduce using rule 123 (arithmetic_additive_operator -> MINUS .)
    ABS             reduce using rule 123 (arithmetic_additive_operator -> MINUS .)
    ASC             reduce using rule 123 (arithmetic_additive_operator -> MINUS .)
    NUM             reduce using rule 123 (arithmetic_additive_operator -> MINUS .)
    UPPER           reduce using rule 123 (arithmetic_additive_operator -> MINUS .)
    LOWER           reduce using rule 123 (arithmetic_additive_operator -> MINUS .)
    LENGTH          reduce using rule 123 (arithmetic_additive_operator -> MINUS .)
    READ            reduce using rule 123 (arithmetic_additive_operator -> MINUS .)
    PRINT           reduce using rule 123 (arithmetic_additive_operator -> MINUS .)
    ASSIGN          reduce using rule 123 (arithmetic_additive_operator -> MINUS .)


state 71

    (113) arithmetic_multiplicative_operator -> TIMES .

    ASSIGN          reduce using rule 113 (arithmetic_multiplicative_operator -> TIMES .)
    MINUS           reduce using rule 113 (arithmetic_multiplicative_operator -> TIMES .)
    NOT             reduce using rule 113 (arithmetic_multiplicative_operator -> TIMES .)
    ARROW           reduce using rule 113 (arithmetic_multiplicative_operator -> TIMES .)
    LPAREN          reduce using rule 113 (arithmetic_multiplicative_operator -> TIMES .)
    ID              reduce using rule 113 (arithmetic_multiplicative_operator -> TIMES .)
    ICONST          reduce using rule 113 (arithmetic_multiplicative_operator -> TIMES .)
    TRUE            reduce using rule 113 (arithmetic_multiplicative_operator -> TIMES .)
    FALSE           reduce using rule 113 (arithmetic_multiplicative_operator -> TIMES .)
    CCONST          reduce using rule 113 (arithmetic_multiplicative_operator -> TIMES .)
    NULL            reduce using rule 113 (arithmetic_multiplicative_operator -> TIMES .)
    SCONST          reduce using rule 113 (arithmetic_multiplicative_operator -> TIMES .)
    ABS             reduce using rule 113 (arithmetic_multiplicative_operator -> TIMES .)
    ASC             reduce using rule 113 (arithmetic_multiplicative_operator -> TIMES .)
    NUM             reduce using rule 113 (arithmetic_multiplicative_operator -> TIMES .)
    UPPER           reduce using rule 113 (arithmetic_multiplicative_operator -> TIMES .)
    LOWER           reduce using rule 113 (arithmetic_multiplicative_operator -> TIMES .)
    LENGTH          reduce using rule 113 (arithmetic_multiplicative_operator -> TIMES .)
    READ            reduce using rule 113 (arithmetic_multiplicative_operator -> TIMES .)
    PRINT           reduce using rule 113 (arithmetic_multiplicative_operator -> TIMES .)


state 72

    (155) assigning_operator -> ASSIGN .

    IF              reduce using rule 155 (assigning_operator -> ASSIGN .)
    MINUS           reduce using rule 155 (assigning_operator -> ASSIGN .)
    NOT             reduce using rule 155 (assigning_operator -> ASSIGN .)
    ARROW           reduce using rule 155 (assigning_operator -> ASSIGN .)
    LPAREN          reduce using rule 155 (assigning_operator -> ASSIGN .)
    ID              reduce using rule 155 (assigning_operator -> ASSIGN .)
    ICONST          reduce using rule 155 (assigning_operator -> ASSIGN .)
    TRUE            reduce using rule 155 (assigning_operator -> ASSIGN .)
    FALSE           reduce using rule 155 (assigning_operator -> ASSIGN .)
    CCONST          reduce using rule 155 (assigning_operator -> ASSIGN .)
    NULL            reduce using rule 155 (assigning_operator -> ASSIGN .)
    SCONST          reduce using rule 155 (assigning_operator -> ASSIGN .)
    ABS             reduce using rule 155 (assigning_operator -> ASSIGN .)
    ASC             reduce using rule 155 (assigning_operator -> ASSIGN .)
    NUM             reduce using rule 155 (assigning_operator -> ASSIGN .)
    UPPER           reduce using rule 155 (assigning_operator -> ASSIGN .)
    LOWER           reduce using rule 155 (assigning_operator -> ASSIGN .)
    LENGTH          reduce using rule 155 (assigning_operator -> ASSIGN .)
    READ            reduce using rule 155 (assigning_operator -> ASSIGN .)
    PRINT           reduce using rule 155 (assigning_operator -> ASSIGN .)


state 73

    (114) arithmetic_multiplicative_operator -> DIVIDE .

    ASSIGN          reduce using rule 114 (arithmetic_multiplicative_operator -> DIVIDE .)
    MINUS           reduce using rule 114 (arithmetic_multiplicative_operator -> DIVIDE .)
    NOT             reduce using rule 114 (arithmetic_multiplicative_operator -> DIVIDE .)
    ARROW           reduce using rule 114 (arithmetic_multiplicative_operator -> DIVIDE .)
    LPAREN          reduce using rule 114 (arithmetic_multiplicative_operator -> DIVIDE .)
    ID              reduce using rule 114 (arithmetic_multiplicative_operator -> DIVIDE .)
    ICONST          reduce using rule 114 (arithmetic_multiplicative_operator -> DIVIDE .)
    TRUE            reduce using rule 114 (arithmetic_multiplicative_operator -> DIVIDE .)
    FALSE           reduce using rule 114 (arithmetic_multiplicative_operator -> DIVIDE .)
    CCONST          reduce using rule 114 (arithmetic_multiplicative_operator -> DIVIDE .)
    NULL            reduce using rule 114 (arithmetic_multiplicative_operator -> DIVIDE .)
    SCONST          reduce using rule 114 (arithmetic_multiplicative_operator -> DIVIDE .)
    ABS             reduce using rule 114 (arithmetic_multiplicative_operator -> DIVIDE .)
    ASC             reduce using rule 114 (arithmetic_multiplicative_operator -> DIVIDE .)
    NUM             reduce using rule 114 (arithmetic_multiplicative_operator -> DIVIDE .)
    UPPER           reduce using rule 114 (arithmetic_multiplicative_operator -> DIVIDE .)
    LOWER           reduce using rule 114 (arithmetic_multiplicative_operator -> DIVIDE .)
    LENGTH          reduce using rule 114 (arithmetic_multiplicative_operator -> DIVIDE .)
    READ            reduce using rule 114 (arithmetic_multiplicative_operator -> DIVIDE .)
    PRINT           reduce using rule 114 (arithmetic_multiplicative_operator -> DIVIDE .)


state 74

    (28) procedure_statement -> ID COLON . procedure_definition
    (29) procedure_definition -> . PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI
    (30) procedure_definition -> . PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI

    PROC            shift and go to state 166

    procedure_definition           shift and go to state 165

state 75

    (180) procedure_call -> ID LPAREN . parameter_list RPAREN
    (181) procedure_call -> ID LPAREN . RPAREN
    (182) parameter_list -> . expression
    (183) parameter_list -> . expression COMMA parameter_list
    (84) expression -> . operand0
    (85) expression -> . boolean_expression
    (86) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (88) boolean_expression -> . expression AND expression
    (89) boolean_expression -> . expression OR expression
    (90) boolean_expression -> . expression EQUAL expression
    (91) boolean_expression -> . expression NOTEQ expression
    (92) boolean_expression -> . expression GREATER expression
    (93) boolean_expression -> . expression GTEQUAL expression
    (94) boolean_expression -> . expression LESS expression
    (95) boolean_expression -> . expression LTEQUAL expression
    (96) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (97) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (104) operand1 -> . operand2
    (105) operand1 -> . operand1 operator2 operand2
    (106) operand2 -> . operand3
    (107) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (108) operand3 -> . monadic_operator operand4
    (109) operand3 -> . operand4
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    RPAREN          shift and go to state 168
    IF              shift and go to state 110
    MINUS           shift and go to state 100
    NOT             shift and go to state 104
    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ID              shift and go to state 56
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    empty_literal                  shift and go to state 83
    operand0                       shift and go to state 84
    expression                     shift and go to state 167
    call_action                    shift and go to state 86
    operand1                       shift and go to state 87
    conditional_expression         shift and go to state 88
    value_array_slice              shift and go to state 89
    parenthesized_expression       shift and go to state 91
    integer_literal                shift and go to state 115
    character_literal              shift and go to state 93
    operand3                       shift and go to state 94
    literal                        shift and go to state 96
    dereferenced_reference         shift and go to state 16
    array_location                 shift and go to state 101
    operand2                       shift and go to state 103
    builtin_call                   shift and go to state 12
    array_element                  shift and go to state 18
    array_slice                    shift and go to state 36
    boolean_expression             shift and go to state 120
    boolean_literal                shift and go to state 102
    referenced_location            shift and go to state 111
    builtin_name                   shift and go to state 29
    primitive_value                shift and go to state 107
    parameter_list                 shift and go to state 169
    identifier                     shift and go to state 109
    value_array_element            shift and go to state 98
    operand4                       shift and go to state 112
    string_element                 shift and go to state 32
    character_string_literal       shift and go to state 113
    monadic_operator               shift and go to state 114
    location                       shift and go to state 41
    string_slice                   shift and go to state 45

state 76

    (10) synonym_statement -> SYN synonym_list . SEMI

    SEMI            shift and go to state 170


state 77

    (11) synonym_list -> synonym_definition .
    (12) synonym_list -> synonym_definition . COMMA synonym_list

    SEMI            reduce using rule 11 (synonym_list -> synonym_definition .)
    COMMA           shift and go to state 171


state 78

    (13) synonym_definition -> identifier_list . mode ASSIGN expression
    (14) synonym_definition -> identifier_list . ASSIGN expression
    (37) mode -> . mode_name
    (38) mode -> . discrete_mode
    (39) mode -> . reference_mode
    (40) mode -> . composite_mode
    (41) mode_name -> . identifier
    (42) discrete_mode -> . integer_mode
    (43) discrete_mode -> . boolean_mode
    (44) discrete_mode -> . character_mode
    (45) discrete_mode -> . discrete_range_mode
    (55) reference_mode -> . REF mode
    (56) composite_mode -> . string_mode
    (57) composite_mode -> . array_mode
    (23) identifier -> . ID
    (47) integer_mode -> . INT
    (48) boolean_mode -> . BOOL
    (49) character_mode -> . CHAR
    (50) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (51) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (58) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (60) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (46) discrete_mode_name -> . identifier

    ASSIGN          shift and go to state 172
    REF             shift and go to state 146
    ID              shift and go to state 47
    INT             shift and go to state 131
    BOOL            shift and go to state 130
    CHAR            shift and go to state 129
    CHARS           shift and go to state 147
    ARRAY           shift and go to state 132

    integer_mode                   shift and go to state 138
    reference_mode                 shift and go to state 139
    string_mode                    shift and go to state 137
    identifier                     shift and go to state 140
    composite_mode                 shift and go to state 133
    array_mode                     shift and go to state 141
    character_mode                 shift and go to state 142
    boolean_mode                   shift and go to state 143
    discrete_mode_name             shift and go to state 135
    mode_name                      shift and go to state 136
    discrete_range_mode            shift and go to state 134
    mode                           shift and go to state 173
    discrete_mode                  shift and go to state 145

state 79

    (25) newmode_list -> mode_definition .
    (26) newmode_list -> mode_definition . COMMA newmode_list

    SEMI            reduce using rule 25 (newmode_list -> mode_definition .)
    COMMA           shift and go to state 174


state 80

    (27) mode_definition -> identifier_list . ASSIGN mode

    ASSIGN          shift and go to state 175


state 81

    (24) newmode_statement -> TYPE newmode_list . SEMI

    SEMI            shift and go to state 176


state 82

    (170) builtin_call -> builtin_name LPAREN . parameter_list RPAREN
    (171) builtin_call -> builtin_name LPAREN . RPAREN
    (182) parameter_list -> . expression
    (183) parameter_list -> . expression COMMA parameter_list
    (84) expression -> . operand0
    (85) expression -> . boolean_expression
    (86) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (88) boolean_expression -> . expression AND expression
    (89) boolean_expression -> . expression OR expression
    (90) boolean_expression -> . expression EQUAL expression
    (91) boolean_expression -> . expression NOTEQ expression
    (92) boolean_expression -> . expression GREATER expression
    (93) boolean_expression -> . expression GTEQUAL expression
    (94) boolean_expression -> . expression LESS expression
    (95) boolean_expression -> . expression LTEQUAL expression
    (96) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (97) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (104) operand1 -> . operand2
    (105) operand1 -> . operand1 operator2 operand2
    (106) operand2 -> . operand3
    (107) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (108) operand3 -> . monadic_operator operand4
    (109) operand3 -> . operand4
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    RPAREN          shift and go to state 177
    IF              shift and go to state 110
    MINUS           shift and go to state 100
    NOT             shift and go to state 104
    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ID              shift and go to state 56
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    empty_literal                  shift and go to state 83
    operand0                       shift and go to state 84
    expression                     shift and go to state 167
    call_action                    shift and go to state 86
    operand1                       shift and go to state 87
    conditional_expression         shift and go to state 88
    value_array_slice              shift and go to state 89
    parenthesized_expression       shift and go to state 91
    integer_literal                shift and go to state 115
    character_literal              shift and go to state 93
    operand3                       shift and go to state 94
    literal                        shift and go to state 96
    dereferenced_reference         shift and go to state 16
    array_location                 shift and go to state 101
    operand2                       shift and go to state 103
    builtin_call                   shift and go to state 12
    array_element                  shift and go to state 18
    array_slice                    shift and go to state 36
    boolean_expression             shift and go to state 120
    boolean_literal                shift and go to state 102
    referenced_location            shift and go to state 111
    primitive_value                shift and go to state 107
    parameter_list                 shift and go to state 178
    identifier                     shift and go to state 109
    value_array_element            shift and go to state 98
    operand4                       shift and go to state 112
    string_element                 shift and go to state 32
    character_string_literal       shift and go to state 113
    monadic_operator               shift and go to state 114
    location                       shift and go to state 41
    builtin_name                   shift and go to state 29
    string_slice                   shift and go to state 45

state 83

    (133) literal -> empty_literal .

    LBRACKET        reduce using rule 133 (literal -> empty_literal .)
    TIMES           reduce using rule 133 (literal -> empty_literal .)
    DIVIDE          reduce using rule 133 (literal -> empty_literal .)
    MODULO          reduce using rule 133 (literal -> empty_literal .)
    PLUS            reduce using rule 133 (literal -> empty_literal .)
    MINUS           reduce using rule 133 (literal -> empty_literal .)
    CONCAT          reduce using rule 133 (literal -> empty_literal .)
    IN              reduce using rule 133 (literal -> empty_literal .)
    AND             reduce using rule 133 (literal -> empty_literal .)
    OR              reduce using rule 133 (literal -> empty_literal .)
    EQUAL           reduce using rule 133 (literal -> empty_literal .)
    NOTEQ           reduce using rule 133 (literal -> empty_literal .)
    GREATER         reduce using rule 133 (literal -> empty_literal .)
    GTEQUAL         reduce using rule 133 (literal -> empty_literal .)
    LESS            reduce using rule 133 (literal -> empty_literal .)
    LTEQUAL         reduce using rule 133 (literal -> empty_literal .)
    THEN            reduce using rule 133 (literal -> empty_literal .)
    SEMI            reduce using rule 133 (literal -> empty_literal .)
    COMMA           reduce using rule 133 (literal -> empty_literal .)
    RBRACKET        reduce using rule 133 (literal -> empty_literal .)
    COLON           reduce using rule 133 (literal -> empty_literal .)
    RPAREN          reduce using rule 133 (literal -> empty_literal .)
    DOWN            reduce using rule 133 (literal -> empty_literal .)
    BY              reduce using rule 133 (literal -> empty_literal .)
    TO              reduce using rule 133 (literal -> empty_literal .)
    ELSE            reduce using rule 133 (literal -> empty_literal .)
    ELSIF           reduce using rule 133 (literal -> empty_literal .)
    FI              reduce using rule 133 (literal -> empty_literal .)
    WHILE           reduce using rule 133 (literal -> empty_literal .)


state 84

    (84) expression -> operand0 .
    (103) operand0 -> operand0 . operator1 operand1
    (119) operator1 -> . membership_operator
    (125) membership_operator -> . IN

    AND             reduce using rule 84 (expression -> operand0 .)
    OR              reduce using rule 84 (expression -> operand0 .)
    EQUAL           reduce using rule 84 (expression -> operand0 .)
    NOTEQ           reduce using rule 84 (expression -> operand0 .)
    GREATER         reduce using rule 84 (expression -> operand0 .)
    GTEQUAL         reduce using rule 84 (expression -> operand0 .)
    LESS            reduce using rule 84 (expression -> operand0 .)
    LTEQUAL         reduce using rule 84 (expression -> operand0 .)
    COMMA           reduce using rule 84 (expression -> operand0 .)
    SEMI            reduce using rule 84 (expression -> operand0 .)
    FI              reduce using rule 84 (expression -> operand0 .)
    THEN            reduce using rule 84 (expression -> operand0 .)
    RBRACKET        reduce using rule 84 (expression -> operand0 .)
    COLON           reduce using rule 84 (expression -> operand0 .)
    RPAREN          reduce using rule 84 (expression -> operand0 .)
    DOWN            reduce using rule 84 (expression -> operand0 .)
    BY              reduce using rule 84 (expression -> operand0 .)
    TO              reduce using rule 84 (expression -> operand0 .)
    ELSE            reduce using rule 84 (expression -> operand0 .)
    ELSIF           reduce using rule 84 (expression -> operand0 .)
    WHILE           reduce using rule 84 (expression -> operand0 .)
    IN              shift and go to state 181

    operator1                      shift and go to state 179
    membership_operator            shift and go to state 180

state 85

    (88) boolean_expression -> expression . AND expression
    (89) boolean_expression -> expression . OR expression
    (90) boolean_expression -> expression . EQUAL expression
    (91) boolean_expression -> expression . NOTEQ expression
    (92) boolean_expression -> expression . GREATER expression
    (93) boolean_expression -> expression . GTEQUAL expression
    (94) boolean_expression -> expression . LESS expression
    (95) boolean_expression -> expression . LTEQUAL expression

    AND             shift and go to state 184
    OR              shift and go to state 188
    EQUAL           shift and go to state 186
    NOTEQ           shift and go to state 189
    GREATER         shift and go to state 185
    GTEQUAL         shift and go to state 182
    LESS            shift and go to state 183
    LTEQUAL         shift and go to state 187


state 86

    (72) location -> call_action .

    ARROW           reduce using rule 72 (location -> call_action .)
    LBRACKET        reduce using rule 72 (location -> call_action .)
    TIMES           reduce using rule 72 (location -> call_action .)
    DIVIDE          reduce using rule 72 (location -> call_action .)
    MODULO          reduce using rule 72 (location -> call_action .)
    PLUS            reduce using rule 72 (location -> call_action .)
    MINUS           reduce using rule 72 (location -> call_action .)
    CONCAT          reduce using rule 72 (location -> call_action .)
    IN              reduce using rule 72 (location -> call_action .)
    AND             reduce using rule 72 (location -> call_action .)
    OR              reduce using rule 72 (location -> call_action .)
    EQUAL           reduce using rule 72 (location -> call_action .)
    NOTEQ           reduce using rule 72 (location -> call_action .)
    GREATER         reduce using rule 72 (location -> call_action .)
    GTEQUAL         reduce using rule 72 (location -> call_action .)
    LESS            reduce using rule 72 (location -> call_action .)
    LTEQUAL         reduce using rule 72 (location -> call_action .)
    SEMI            reduce using rule 72 (location -> call_action .)
    THEN            reduce using rule 72 (location -> call_action .)
    COMMA           reduce using rule 72 (location -> call_action .)
    RBRACKET        reduce using rule 72 (location -> call_action .)
    COLON           reduce using rule 72 (location -> call_action .)
    RPAREN          reduce using rule 72 (location -> call_action .)
    DOWN            reduce using rule 72 (location -> call_action .)
    BY              reduce using rule 72 (location -> call_action .)
    TO              reduce using rule 72 (location -> call_action .)
    ELSE            reduce using rule 72 (location -> call_action .)
    ELSIF           reduce using rule 72 (location -> call_action .)
    FI              reduce using rule 72 (location -> call_action .)
    WHILE           reduce using rule 72 (location -> call_action .)


state 87

    (102) operand0 -> operand1 .
    (105) operand1 -> operand1 . operator2 operand2
    (120) operator2 -> . arithmetic_additive_operator
    (121) operator2 -> . string_concatenation_operator
    (122) arithmetic_additive_operator -> . PLUS
    (123) arithmetic_additive_operator -> . MINUS
    (124) string_concatenation_operator -> . CONCAT

    IN              reduce using rule 102 (operand0 -> operand1 .)
    COMMA           reduce using rule 102 (operand0 -> operand1 .)
    AND             reduce using rule 102 (operand0 -> operand1 .)
    OR              reduce using rule 102 (operand0 -> operand1 .)
    EQUAL           reduce using rule 102 (operand0 -> operand1 .)
    NOTEQ           reduce using rule 102 (operand0 -> operand1 .)
    GREATER         reduce using rule 102 (operand0 -> operand1 .)
    GTEQUAL         reduce using rule 102 (operand0 -> operand1 .)
    LESS            reduce using rule 102 (operand0 -> operand1 .)
    LTEQUAL         reduce using rule 102 (operand0 -> operand1 .)
    RPAREN          reduce using rule 102 (operand0 -> operand1 .)
    RBRACKET        reduce using rule 102 (operand0 -> operand1 .)
    COLON           reduce using rule 102 (operand0 -> operand1 .)
    ELSE            reduce using rule 102 (operand0 -> operand1 .)
    ELSIF           reduce using rule 102 (operand0 -> operand1 .)
    SEMI            reduce using rule 102 (operand0 -> operand1 .)
    DOWN            reduce using rule 102 (operand0 -> operand1 .)
    BY              reduce using rule 102 (operand0 -> operand1 .)
    TO              reduce using rule 102 (operand0 -> operand1 .)
    THEN            reduce using rule 102 (operand0 -> operand1 .)
    FI              reduce using rule 102 (operand0 -> operand1 .)
    WHILE           reduce using rule 102 (operand0 -> operand1 .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 70
    CONCAT          shift and go to state 65

    string_concatenation_operator  shift and go to state 190
    arithmetic_additive_operator   shift and go to state 192
    operator2                      shift and go to state 191

state 88

    (86) expression -> conditional_expression .

    AND             reduce using rule 86 (expression -> conditional_expression .)
    OR              reduce using rule 86 (expression -> conditional_expression .)
    EQUAL           reduce using rule 86 (expression -> conditional_expression .)
    NOTEQ           reduce using rule 86 (expression -> conditional_expression .)
    GREATER         reduce using rule 86 (expression -> conditional_expression .)
    GTEQUAL         reduce using rule 86 (expression -> conditional_expression .)
    LESS            reduce using rule 86 (expression -> conditional_expression .)
    LTEQUAL         reduce using rule 86 (expression -> conditional_expression .)
    COMMA           reduce using rule 86 (expression -> conditional_expression .)
    SEMI            reduce using rule 86 (expression -> conditional_expression .)
    FI              reduce using rule 86 (expression -> conditional_expression .)
    THEN            reduce using rule 86 (expression -> conditional_expression .)
    RBRACKET        reduce using rule 86 (expression -> conditional_expression .)
    COLON           reduce using rule 86 (expression -> conditional_expression .)
    RPAREN          reduce using rule 86 (expression -> conditional_expression .)
    DOWN            reduce using rule 86 (expression -> conditional_expression .)
    BY              reduce using rule 86 (expression -> conditional_expression .)
    TO              reduce using rule 86 (expression -> conditional_expression .)
    ELSE            reduce using rule 86 (expression -> conditional_expression .)
    ELSIF           reduce using rule 86 (expression -> conditional_expression .)
    WHILE           reduce using rule 86 (expression -> conditional_expression .)


state 89

    (128) primitive_value -> value_array_slice .

    LBRACKET        reduce using rule 128 (primitive_value -> value_array_slice .)
    TIMES           reduce using rule 128 (primitive_value -> value_array_slice .)
    DIVIDE          reduce using rule 128 (primitive_value -> value_array_slice .)
    MODULO          reduce using rule 128 (primitive_value -> value_array_slice .)
    PLUS            reduce using rule 128 (primitive_value -> value_array_slice .)
    MINUS           reduce using rule 128 (primitive_value -> value_array_slice .)
    CONCAT          reduce using rule 128 (primitive_value -> value_array_slice .)
    IN              reduce using rule 128 (primitive_value -> value_array_slice .)
    RBRACKET        reduce using rule 128 (primitive_value -> value_array_slice .)
    AND             reduce using rule 128 (primitive_value -> value_array_slice .)
    OR              reduce using rule 128 (primitive_value -> value_array_slice .)
    EQUAL           reduce using rule 128 (primitive_value -> value_array_slice .)
    NOTEQ           reduce using rule 128 (primitive_value -> value_array_slice .)
    GREATER         reduce using rule 128 (primitive_value -> value_array_slice .)
    GTEQUAL         reduce using rule 128 (primitive_value -> value_array_slice .)
    LESS            reduce using rule 128 (primitive_value -> value_array_slice .)
    LTEQUAL         reduce using rule 128 (primitive_value -> value_array_slice .)
    COLON           reduce using rule 128 (primitive_value -> value_array_slice .)
    SEMI            reduce using rule 128 (primitive_value -> value_array_slice .)
    COMMA           reduce using rule 128 (primitive_value -> value_array_slice .)
    RPAREN          reduce using rule 128 (primitive_value -> value_array_slice .)
    THEN            reduce using rule 128 (primitive_value -> value_array_slice .)
    DOWN            reduce using rule 128 (primitive_value -> value_array_slice .)
    BY              reduce using rule 128 (primitive_value -> value_array_slice .)
    TO              reduce using rule 128 (primitive_value -> value_array_slice .)
    ELSE            reduce using rule 128 (primitive_value -> value_array_slice .)
    ELSIF           reduce using rule 128 (primitive_value -> value_array_slice .)
    FI              reduce using rule 128 (primitive_value -> value_array_slice .)
    WHILE           reduce using rule 128 (primitive_value -> value_array_slice .)


state 90

    (141) empty_literal -> NULL .

    LBRACKET        reduce using rule 141 (empty_literal -> NULL .)
    TIMES           reduce using rule 141 (empty_literal -> NULL .)
    DIVIDE          reduce using rule 141 (empty_literal -> NULL .)
    MODULO          reduce using rule 141 (empty_literal -> NULL .)
    PLUS            reduce using rule 141 (empty_literal -> NULL .)
    MINUS           reduce using rule 141 (empty_literal -> NULL .)
    CONCAT          reduce using rule 141 (empty_literal -> NULL .)
    IN              reduce using rule 141 (empty_literal -> NULL .)
    AND             reduce using rule 141 (empty_literal -> NULL .)
    OR              reduce using rule 141 (empty_literal -> NULL .)
    EQUAL           reduce using rule 141 (empty_literal -> NULL .)
    NOTEQ           reduce using rule 141 (empty_literal -> NULL .)
    GREATER         reduce using rule 141 (empty_literal -> NULL .)
    GTEQUAL         reduce using rule 141 (empty_literal -> NULL .)
    LESS            reduce using rule 141 (empty_literal -> NULL .)
    LTEQUAL         reduce using rule 141 (empty_literal -> NULL .)
    COMMA           reduce using rule 141 (empty_literal -> NULL .)
    RBRACKET        reduce using rule 141 (empty_literal -> NULL .)
    RPAREN          reduce using rule 141 (empty_literal -> NULL .)
    THEN            reduce using rule 141 (empty_literal -> NULL .)
    SEMI            reduce using rule 141 (empty_literal -> NULL .)
    COLON           reduce using rule 141 (empty_literal -> NULL .)
    DOWN            reduce using rule 141 (empty_literal -> NULL .)
    BY              reduce using rule 141 (empty_literal -> NULL .)
    TO              reduce using rule 141 (empty_literal -> NULL .)
    ELSE            reduce using rule 141 (empty_literal -> NULL .)
    ELSIF           reduce using rule 141 (empty_literal -> NULL .)
    FI              reduce using rule 141 (empty_literal -> NULL .)
    WHILE           reduce using rule 141 (empty_literal -> NULL .)


state 91

    (129) primitive_value -> parenthesized_expression .

    LBRACKET        reduce using rule 129 (primitive_value -> parenthesized_expression .)
    TIMES           reduce using rule 129 (primitive_value -> parenthesized_expression .)
    DIVIDE          reduce using rule 129 (primitive_value -> parenthesized_expression .)
    MODULO          reduce using rule 129 (primitive_value -> parenthesized_expression .)
    PLUS            reduce using rule 129 (primitive_value -> parenthesized_expression .)
    MINUS           reduce using rule 129 (primitive_value -> parenthesized_expression .)
    CONCAT          reduce using rule 129 (primitive_value -> parenthesized_expression .)
    IN              reduce using rule 129 (primitive_value -> parenthesized_expression .)
    RBRACKET        reduce using rule 129 (primitive_value -> parenthesized_expression .)
    AND             reduce using rule 129 (primitive_value -> parenthesized_expression .)
    OR              reduce using rule 129 (primitive_value -> parenthesized_expression .)
    EQUAL           reduce using rule 129 (primitive_value -> parenthesized_expression .)
    NOTEQ           reduce using rule 129 (primitive_value -> parenthesized_expression .)
    GREATER         reduce using rule 129 (primitive_value -> parenthesized_expression .)
    GTEQUAL         reduce using rule 129 (primitive_value -> parenthesized_expression .)
    LESS            reduce using rule 129 (primitive_value -> parenthesized_expression .)
    LTEQUAL         reduce using rule 129 (primitive_value -> parenthesized_expression .)
    COLON           reduce using rule 129 (primitive_value -> parenthesized_expression .)
    SEMI            reduce using rule 129 (primitive_value -> parenthesized_expression .)
    COMMA           reduce using rule 129 (primitive_value -> parenthesized_expression .)
    RPAREN          reduce using rule 129 (primitive_value -> parenthesized_expression .)
    THEN            reduce using rule 129 (primitive_value -> parenthesized_expression .)
    DOWN            reduce using rule 129 (primitive_value -> parenthesized_expression .)
    BY              reduce using rule 129 (primitive_value -> parenthesized_expression .)
    TO              reduce using rule 129 (primitive_value -> parenthesized_expression .)
    ELSE            reduce using rule 129 (primitive_value -> parenthesized_expression .)
    ELSIF           reduce using rule 129 (primitive_value -> parenthesized_expression .)
    FI              reduce using rule 129 (primitive_value -> parenthesized_expression .)
    WHILE           reduce using rule 129 (primitive_value -> parenthesized_expression .)


state 92

    (159) if_action -> IF boolean_expression . then_clause else_clause FI
    (160) if_action -> IF boolean_expression . then_clause FI
    (85) expression -> boolean_expression .
    (161) then_clause -> . THEN action_statement_list

    AND             reduce using rule 85 (expression -> boolean_expression .)
    OR              reduce using rule 85 (expression -> boolean_expression .)
    EQUAL           reduce using rule 85 (expression -> boolean_expression .)
    NOTEQ           reduce using rule 85 (expression -> boolean_expression .)
    GREATER         reduce using rule 85 (expression -> boolean_expression .)
    GTEQUAL         reduce using rule 85 (expression -> boolean_expression .)
    LESS            reduce using rule 85 (expression -> boolean_expression .)
    LTEQUAL         reduce using rule 85 (expression -> boolean_expression .)
    THEN            shift and go to state 193

    then_clause                    shift and go to state 194

state 93

    (132) literal -> character_literal .

    LBRACKET        reduce using rule 132 (literal -> character_literal .)
    TIMES           reduce using rule 132 (literal -> character_literal .)
    DIVIDE          reduce using rule 132 (literal -> character_literal .)
    MODULO          reduce using rule 132 (literal -> character_literal .)
    PLUS            reduce using rule 132 (literal -> character_literal .)
    MINUS           reduce using rule 132 (literal -> character_literal .)
    CONCAT          reduce using rule 132 (literal -> character_literal .)
    IN              reduce using rule 132 (literal -> character_literal .)
    AND             reduce using rule 132 (literal -> character_literal .)
    OR              reduce using rule 132 (literal -> character_literal .)
    EQUAL           reduce using rule 132 (literal -> character_literal .)
    NOTEQ           reduce using rule 132 (literal -> character_literal .)
    GREATER         reduce using rule 132 (literal -> character_literal .)
    GTEQUAL         reduce using rule 132 (literal -> character_literal .)
    LESS            reduce using rule 132 (literal -> character_literal .)
    LTEQUAL         reduce using rule 132 (literal -> character_literal .)
    THEN            reduce using rule 132 (literal -> character_literal .)
    SEMI            reduce using rule 132 (literal -> character_literal .)
    COMMA           reduce using rule 132 (literal -> character_literal .)
    RBRACKET        reduce using rule 132 (literal -> character_literal .)
    COLON           reduce using rule 132 (literal -> character_literal .)
    RPAREN          reduce using rule 132 (literal -> character_literal .)
    DOWN            reduce using rule 132 (literal -> character_literal .)
    BY              reduce using rule 132 (literal -> character_literal .)
    TO              reduce using rule 132 (literal -> character_literal .)
    ELSE            reduce using rule 132 (literal -> character_literal .)
    ELSIF           reduce using rule 132 (literal -> character_literal .)
    FI              reduce using rule 132 (literal -> character_literal .)
    WHILE           reduce using rule 132 (literal -> character_literal .)


state 94

    (106) operand2 -> operand3 .

    TIMES           reduce using rule 106 (operand2 -> operand3 .)
    DIVIDE          reduce using rule 106 (operand2 -> operand3 .)
    MODULO          reduce using rule 106 (operand2 -> operand3 .)
    PLUS            reduce using rule 106 (operand2 -> operand3 .)
    MINUS           reduce using rule 106 (operand2 -> operand3 .)
    CONCAT          reduce using rule 106 (operand2 -> operand3 .)
    IN              reduce using rule 106 (operand2 -> operand3 .)
    AND             reduce using rule 106 (operand2 -> operand3 .)
    OR              reduce using rule 106 (operand2 -> operand3 .)
    EQUAL           reduce using rule 106 (operand2 -> operand3 .)
    NOTEQ           reduce using rule 106 (operand2 -> operand3 .)
    GREATER         reduce using rule 106 (operand2 -> operand3 .)
    GTEQUAL         reduce using rule 106 (operand2 -> operand3 .)
    LESS            reduce using rule 106 (operand2 -> operand3 .)
    LTEQUAL         reduce using rule 106 (operand2 -> operand3 .)
    THEN            reduce using rule 106 (operand2 -> operand3 .)
    SEMI            reduce using rule 106 (operand2 -> operand3 .)
    COMMA           reduce using rule 106 (operand2 -> operand3 .)
    RBRACKET        reduce using rule 106 (operand2 -> operand3 .)
    COLON           reduce using rule 106 (operand2 -> operand3 .)
    RPAREN          reduce using rule 106 (operand2 -> operand3 .)
    DOWN            reduce using rule 106 (operand2 -> operand3 .)
    BY              reduce using rule 106 (operand2 -> operand3 .)
    TO              reduce using rule 106 (operand2 -> operand3 .)
    ELSE            reduce using rule 106 (operand2 -> operand3 .)
    ELSIF           reduce using rule 106 (operand2 -> operand3 .)
    FI              reduce using rule 106 (operand2 -> operand3 .)
    WHILE           reduce using rule 106 (operand2 -> operand3 .)


state 95

    (138) boolean_literal -> TRUE .

    LBRACKET        reduce using rule 138 (boolean_literal -> TRUE .)
    TIMES           reduce using rule 138 (boolean_literal -> TRUE .)
    DIVIDE          reduce using rule 138 (boolean_literal -> TRUE .)
    MODULO          reduce using rule 138 (boolean_literal -> TRUE .)
    PLUS            reduce using rule 138 (boolean_literal -> TRUE .)
    MINUS           reduce using rule 138 (boolean_literal -> TRUE .)
    CONCAT          reduce using rule 138 (boolean_literal -> TRUE .)
    IN              reduce using rule 138 (boolean_literal -> TRUE .)
    AND             reduce using rule 138 (boolean_literal -> TRUE .)
    OR              reduce using rule 138 (boolean_literal -> TRUE .)
    EQUAL           reduce using rule 138 (boolean_literal -> TRUE .)
    NOTEQ           reduce using rule 138 (boolean_literal -> TRUE .)
    GREATER         reduce using rule 138 (boolean_literal -> TRUE .)
    GTEQUAL         reduce using rule 138 (boolean_literal -> TRUE .)
    LESS            reduce using rule 138 (boolean_literal -> TRUE .)
    LTEQUAL         reduce using rule 138 (boolean_literal -> TRUE .)
    SEMI            reduce using rule 138 (boolean_literal -> TRUE .)
    COMMA           reduce using rule 138 (boolean_literal -> TRUE .)
    RBRACKET        reduce using rule 138 (boolean_literal -> TRUE .)
    COLON           reduce using rule 138 (boolean_literal -> TRUE .)
    RPAREN          reduce using rule 138 (boolean_literal -> TRUE .)
    THEN            reduce using rule 138 (boolean_literal -> TRUE .)
    DOWN            reduce using rule 138 (boolean_literal -> TRUE .)
    BY              reduce using rule 138 (boolean_literal -> TRUE .)
    TO              reduce using rule 138 (boolean_literal -> TRUE .)
    ELSE            reduce using rule 138 (boolean_literal -> TRUE .)
    ELSIF           reduce using rule 138 (boolean_literal -> TRUE .)
    FI              reduce using rule 138 (boolean_literal -> TRUE .)
    WHILE           reduce using rule 138 (boolean_literal -> TRUE .)


state 96

    (126) primitive_value -> literal .

    LBRACKET        reduce using rule 126 (primitive_value -> literal .)
    TIMES           reduce using rule 126 (primitive_value -> literal .)
    DIVIDE          reduce using rule 126 (primitive_value -> literal .)
    MODULO          reduce using rule 126 (primitive_value -> literal .)
    PLUS            reduce using rule 126 (primitive_value -> literal .)
    MINUS           reduce using rule 126 (primitive_value -> literal .)
    CONCAT          reduce using rule 126 (primitive_value -> literal .)
    IN              reduce using rule 126 (primitive_value -> literal .)
    RBRACKET        reduce using rule 126 (primitive_value -> literal .)
    AND             reduce using rule 126 (primitive_value -> literal .)
    OR              reduce using rule 126 (primitive_value -> literal .)
    EQUAL           reduce using rule 126 (primitive_value -> literal .)
    NOTEQ           reduce using rule 126 (primitive_value -> literal .)
    GREATER         reduce using rule 126 (primitive_value -> literal .)
    GTEQUAL         reduce using rule 126 (primitive_value -> literal .)
    LESS            reduce using rule 126 (primitive_value -> literal .)
    LTEQUAL         reduce using rule 126 (primitive_value -> literal .)
    COLON           reduce using rule 126 (primitive_value -> literal .)
    SEMI            reduce using rule 126 (primitive_value -> literal .)
    COMMA           reduce using rule 126 (primitive_value -> literal .)
    RPAREN          reduce using rule 126 (primitive_value -> literal .)
    THEN            reduce using rule 126 (primitive_value -> literal .)
    DOWN            reduce using rule 126 (primitive_value -> literal .)
    BY              reduce using rule 126 (primitive_value -> literal .)
    TO              reduce using rule 126 (primitive_value -> literal .)
    ELSE            reduce using rule 126 (primitive_value -> literal .)
    ELSIF           reduce using rule 126 (primitive_value -> literal .)
    FI              reduce using rule 126 (primitive_value -> literal .)
    WHILE           reduce using rule 126 (primitive_value -> literal .)


state 97

    (140) character_literal -> CCONST .

    LBRACKET        reduce using rule 140 (character_literal -> CCONST .)
    TIMES           reduce using rule 140 (character_literal -> CCONST .)
    DIVIDE          reduce using rule 140 (character_literal -> CCONST .)
    MODULO          reduce using rule 140 (character_literal -> CCONST .)
    PLUS            reduce using rule 140 (character_literal -> CCONST .)
    MINUS           reduce using rule 140 (character_literal -> CCONST .)
    CONCAT          reduce using rule 140 (character_literal -> CCONST .)
    IN              reduce using rule 140 (character_literal -> CCONST .)
    AND             reduce using rule 140 (character_literal -> CCONST .)
    OR              reduce using rule 140 (character_literal -> CCONST .)
    EQUAL           reduce using rule 140 (character_literal -> CCONST .)
    NOTEQ           reduce using rule 140 (character_literal -> CCONST .)
    GREATER         reduce using rule 140 (character_literal -> CCONST .)
    GTEQUAL         reduce using rule 140 (character_literal -> CCONST .)
    LESS            reduce using rule 140 (character_literal -> CCONST .)
    LTEQUAL         reduce using rule 140 (character_literal -> CCONST .)
    RBRACKET        reduce using rule 140 (character_literal -> CCONST .)
    COMMA           reduce using rule 140 (character_literal -> CCONST .)
    SEMI            reduce using rule 140 (character_literal -> CCONST .)
    ELSE            reduce using rule 140 (character_literal -> CCONST .)
    ELSIF           reduce using rule 140 (character_literal -> CCONST .)
    COLON           reduce using rule 140 (character_literal -> CCONST .)
    RPAREN          reduce using rule 140 (character_literal -> CCONST .)
    THEN            reduce using rule 140 (character_literal -> CCONST .)
    DOWN            reduce using rule 140 (character_literal -> CCONST .)
    BY              reduce using rule 140 (character_literal -> CCONST .)
    TO              reduce using rule 140 (character_literal -> CCONST .)
    FI              reduce using rule 140 (character_literal -> CCONST .)
    WHILE           reduce using rule 140 (character_literal -> CCONST .)


state 98

    (127) primitive_value -> value_array_element .

    LBRACKET        reduce using rule 127 (primitive_value -> value_array_element .)
    TIMES           reduce using rule 127 (primitive_value -> value_array_element .)
    DIVIDE          reduce using rule 127 (primitive_value -> value_array_element .)
    MODULO          reduce using rule 127 (primitive_value -> value_array_element .)
    PLUS            reduce using rule 127 (primitive_value -> value_array_element .)
    MINUS           reduce using rule 127 (primitive_value -> value_array_element .)
    CONCAT          reduce using rule 127 (primitive_value -> value_array_element .)
    IN              reduce using rule 127 (primitive_value -> value_array_element .)
    RBRACKET        reduce using rule 127 (primitive_value -> value_array_element .)
    AND             reduce using rule 127 (primitive_value -> value_array_element .)
    OR              reduce using rule 127 (primitive_value -> value_array_element .)
    EQUAL           reduce using rule 127 (primitive_value -> value_array_element .)
    NOTEQ           reduce using rule 127 (primitive_value -> value_array_element .)
    GREATER         reduce using rule 127 (primitive_value -> value_array_element .)
    GTEQUAL         reduce using rule 127 (primitive_value -> value_array_element .)
    LESS            reduce using rule 127 (primitive_value -> value_array_element .)
    LTEQUAL         reduce using rule 127 (primitive_value -> value_array_element .)
    COLON           reduce using rule 127 (primitive_value -> value_array_element .)
    SEMI            reduce using rule 127 (primitive_value -> value_array_element .)
    COMMA           reduce using rule 127 (primitive_value -> value_array_element .)
    RPAREN          reduce using rule 127 (primitive_value -> value_array_element .)
    THEN            reduce using rule 127 (primitive_value -> value_array_element .)
    DOWN            reduce using rule 127 (primitive_value -> value_array_element .)
    BY              reduce using rule 127 (primitive_value -> value_array_element .)
    TO              reduce using rule 127 (primitive_value -> value_array_element .)
    ELSE            reduce using rule 127 (primitive_value -> value_array_element .)
    ELSIF           reduce using rule 127 (primitive_value -> value_array_element .)
    FI              reduce using rule 127 (primitive_value -> value_array_element .)
    WHILE           reduce using rule 127 (primitive_value -> value_array_element .)


state 99

    (118) referenced_location -> ARROW . array_location
    (83) array_location -> . location
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    ID              shift and go to state 56
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    call_action                    shift and go to state 86
    identifier                     shift and go to state 109
    builtin_call                   shift and go to state 12
    string_element                 shift and go to state 32
    string_slice                   shift and go to state 45
    dereferenced_reference         shift and go to state 16
    array_location                 shift and go to state 195
    builtin_name                   shift and go to state 29
    location                       shift and go to state 41
    array_element                  shift and go to state 18
    array_slice                    shift and go to state 36

state 100

    (116) monadic_operator -> MINUS .

    ARROW           reduce using rule 116 (monadic_operator -> MINUS .)
    LPAREN          reduce using rule 116 (monadic_operator -> MINUS .)
    ID              reduce using rule 116 (monadic_operator -> MINUS .)
    ICONST          reduce using rule 116 (monadic_operator -> MINUS .)
    TRUE            reduce using rule 116 (monadic_operator -> MINUS .)
    FALSE           reduce using rule 116 (monadic_operator -> MINUS .)
    CCONST          reduce using rule 116 (monadic_operator -> MINUS .)
    NULL            reduce using rule 116 (monadic_operator -> MINUS .)
    SCONST          reduce using rule 116 (monadic_operator -> MINUS .)
    ABS             reduce using rule 116 (monadic_operator -> MINUS .)
    ASC             reduce using rule 116 (monadic_operator -> MINUS .)
    NUM             reduce using rule 116 (monadic_operator -> MINUS .)
    UPPER           reduce using rule 116 (monadic_operator -> MINUS .)
    LOWER           reduce using rule 116 (monadic_operator -> MINUS .)
    LENGTH          reduce using rule 116 (monadic_operator -> MINUS .)
    READ            reduce using rule 116 (monadic_operator -> MINUS .)
    PRINT           reduce using rule 116 (monadic_operator -> MINUS .)


state 101

    (110) operand4 -> array_location .
    (73) dereferenced_reference -> array_location . ARROW
    (79) array_element -> array_location . LBRACKET expression_list RBRACKET
    (82) array_slice -> array_location . LBRACKET lower_bound COLON upper_bound RBRACKET

    TIMES           reduce using rule 110 (operand4 -> array_location .)
    DIVIDE          reduce using rule 110 (operand4 -> array_location .)
    MODULO          reduce using rule 110 (operand4 -> array_location .)
    PLUS            reduce using rule 110 (operand4 -> array_location .)
    MINUS           reduce using rule 110 (operand4 -> array_location .)
    CONCAT          reduce using rule 110 (operand4 -> array_location .)
    IN              reduce using rule 110 (operand4 -> array_location .)
    AND             reduce using rule 110 (operand4 -> array_location .)
    OR              reduce using rule 110 (operand4 -> array_location .)
    EQUAL           reduce using rule 110 (operand4 -> array_location .)
    NOTEQ           reduce using rule 110 (operand4 -> array_location .)
    GREATER         reduce using rule 110 (operand4 -> array_location .)
    GTEQUAL         reduce using rule 110 (operand4 -> array_location .)
    LESS            reduce using rule 110 (operand4 -> array_location .)
    LTEQUAL         reduce using rule 110 (operand4 -> array_location .)
    SEMI            reduce using rule 110 (operand4 -> array_location .)
    COMMA           reduce using rule 110 (operand4 -> array_location .)
    RBRACKET        reduce using rule 110 (operand4 -> array_location .)
    COLON           reduce using rule 110 (operand4 -> array_location .)
    THEN            reduce using rule 110 (operand4 -> array_location .)
    RPAREN          reduce using rule 110 (operand4 -> array_location .)
    DOWN            reduce using rule 110 (operand4 -> array_location .)
    BY              reduce using rule 110 (operand4 -> array_location .)
    TO              reduce using rule 110 (operand4 -> array_location .)
    ELSE            reduce using rule 110 (operand4 -> array_location .)
    ELSIF           reduce using rule 110 (operand4 -> array_location .)
    FI              reduce using rule 110 (operand4 -> array_location .)
    WHILE           reduce using rule 110 (operand4 -> array_location .)
    ARROW           shift and go to state 64
    LBRACKET        shift and go to state 68


state 102

    (131) literal -> boolean_literal .

    LBRACKET        reduce using rule 131 (literal -> boolean_literal .)
    TIMES           reduce using rule 131 (literal -> boolean_literal .)
    DIVIDE          reduce using rule 131 (literal -> boolean_literal .)
    MODULO          reduce using rule 131 (literal -> boolean_literal .)
    PLUS            reduce using rule 131 (literal -> boolean_literal .)
    MINUS           reduce using rule 131 (literal -> boolean_literal .)
    CONCAT          reduce using rule 131 (literal -> boolean_literal .)
    IN              reduce using rule 131 (literal -> boolean_literal .)
    AND             reduce using rule 131 (literal -> boolean_literal .)
    OR              reduce using rule 131 (literal -> boolean_literal .)
    EQUAL           reduce using rule 131 (literal -> boolean_literal .)
    NOTEQ           reduce using rule 131 (literal -> boolean_literal .)
    GREATER         reduce using rule 131 (literal -> boolean_literal .)
    GTEQUAL         reduce using rule 131 (literal -> boolean_literal .)
    LESS            reduce using rule 131 (literal -> boolean_literal .)
    LTEQUAL         reduce using rule 131 (literal -> boolean_literal .)
    THEN            reduce using rule 131 (literal -> boolean_literal .)
    SEMI            reduce using rule 131 (literal -> boolean_literal .)
    COMMA           reduce using rule 131 (literal -> boolean_literal .)
    RBRACKET        reduce using rule 131 (literal -> boolean_literal .)
    COLON           reduce using rule 131 (literal -> boolean_literal .)
    RPAREN          reduce using rule 131 (literal -> boolean_literal .)
    DOWN            reduce using rule 131 (literal -> boolean_literal .)
    BY              reduce using rule 131 (literal -> boolean_literal .)
    TO              reduce using rule 131 (literal -> boolean_literal .)
    ELSE            reduce using rule 131 (literal -> boolean_literal .)
    ELSIF           reduce using rule 131 (literal -> boolean_literal .)
    FI              reduce using rule 131 (literal -> boolean_literal .)
    WHILE           reduce using rule 131 (literal -> boolean_literal .)


state 103

    (104) operand1 -> operand2 .
    (107) operand2 -> operand2 . arithmetic_multiplicative_operator operand3
    (113) arithmetic_multiplicative_operator -> . TIMES
    (114) arithmetic_multiplicative_operator -> . DIVIDE
    (115) arithmetic_multiplicative_operator -> . MODULO

    PLUS            reduce using rule 104 (operand1 -> operand2 .)
    MINUS           reduce using rule 104 (operand1 -> operand2 .)
    CONCAT          reduce using rule 104 (operand1 -> operand2 .)
    IN              reduce using rule 104 (operand1 -> operand2 .)
    AND             reduce using rule 104 (operand1 -> operand2 .)
    OR              reduce using rule 104 (operand1 -> operand2 .)
    EQUAL           reduce using rule 104 (operand1 -> operand2 .)
    NOTEQ           reduce using rule 104 (operand1 -> operand2 .)
    GREATER         reduce using rule 104 (operand1 -> operand2 .)
    GTEQUAL         reduce using rule 104 (operand1 -> operand2 .)
    LESS            reduce using rule 104 (operand1 -> operand2 .)
    LTEQUAL         reduce using rule 104 (operand1 -> operand2 .)
    RBRACKET        reduce using rule 104 (operand1 -> operand2 .)
    COLON           reduce using rule 104 (operand1 -> operand2 .)
    THEN            reduce using rule 104 (operand1 -> operand2 .)
    SEMI            reduce using rule 104 (operand1 -> operand2 .)
    COMMA           reduce using rule 104 (operand1 -> operand2 .)
    RPAREN          reduce using rule 104 (operand1 -> operand2 .)
    DOWN            reduce using rule 104 (operand1 -> operand2 .)
    BY              reduce using rule 104 (operand1 -> operand2 .)
    TO              reduce using rule 104 (operand1 -> operand2 .)
    ELSE            reduce using rule 104 (operand1 -> operand2 .)
    ELSIF           reduce using rule 104 (operand1 -> operand2 .)
    FI              reduce using rule 104 (operand1 -> operand2 .)
    WHILE           reduce using rule 104 (operand1 -> operand2 .)
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 73
    MODULO          shift and go to state 66

    arithmetic_multiplicative_operator shift and go to state 196

state 104

    (117) monadic_operator -> NOT .

    ARROW           reduce using rule 117 (monadic_operator -> NOT .)
    LPAREN          reduce using rule 117 (monadic_operator -> NOT .)
    ID              reduce using rule 117 (monadic_operator -> NOT .)
    ICONST          reduce using rule 117 (monadic_operator -> NOT .)
    TRUE            reduce using rule 117 (monadic_operator -> NOT .)
    FALSE           reduce using rule 117 (monadic_operator -> NOT .)
    CCONST          reduce using rule 117 (monadic_operator -> NOT .)
    NULL            reduce using rule 117 (monadic_operator -> NOT .)
    SCONST          reduce using rule 117 (monadic_operator -> NOT .)
    ABS             reduce using rule 117 (monadic_operator -> NOT .)
    ASC             reduce using rule 117 (monadic_operator -> NOT .)
    NUM             reduce using rule 117 (monadic_operator -> NOT .)
    UPPER           reduce using rule 117 (monadic_operator -> NOT .)
    LOWER           reduce using rule 117 (monadic_operator -> NOT .)
    LENGTH          reduce using rule 117 (monadic_operator -> NOT .)
    READ            reduce using rule 117 (monadic_operator -> NOT .)
    PRINT           reduce using rule 117 (monadic_operator -> NOT .)


state 105

    (142) character_string_literal -> SCONST .

    LBRACKET        reduce using rule 142 (character_string_literal -> SCONST .)
    TIMES           reduce using rule 142 (character_string_literal -> SCONST .)
    DIVIDE          reduce using rule 142 (character_string_literal -> SCONST .)
    MODULO          reduce using rule 142 (character_string_literal -> SCONST .)
    PLUS            reduce using rule 142 (character_string_literal -> SCONST .)
    MINUS           reduce using rule 142 (character_string_literal -> SCONST .)
    CONCAT          reduce using rule 142 (character_string_literal -> SCONST .)
    IN              reduce using rule 142 (character_string_literal -> SCONST .)
    COMMA           reduce using rule 142 (character_string_literal -> SCONST .)
    AND             reduce using rule 142 (character_string_literal -> SCONST .)
    OR              reduce using rule 142 (character_string_literal -> SCONST .)
    EQUAL           reduce using rule 142 (character_string_literal -> SCONST .)
    NOTEQ           reduce using rule 142 (character_string_literal -> SCONST .)
    GREATER         reduce using rule 142 (character_string_literal -> SCONST .)
    GTEQUAL         reduce using rule 142 (character_string_literal -> SCONST .)
    LESS            reduce using rule 142 (character_string_literal -> SCONST .)
    LTEQUAL         reduce using rule 142 (character_string_literal -> SCONST .)
    RPAREN          reduce using rule 142 (character_string_literal -> SCONST .)
    SEMI            reduce using rule 142 (character_string_literal -> SCONST .)
    DOWN            reduce using rule 142 (character_string_literal -> SCONST .)
    BY              reduce using rule 142 (character_string_literal -> SCONST .)
    TO              reduce using rule 142 (character_string_literal -> SCONST .)
    COLON           reduce using rule 142 (character_string_literal -> SCONST .)
    THEN            reduce using rule 142 (character_string_literal -> SCONST .)
    RBRACKET        reduce using rule 142 (character_string_literal -> SCONST .)
    ELSE            reduce using rule 142 (character_string_literal -> SCONST .)
    ELSIF           reduce using rule 142 (character_string_literal -> SCONST .)
    FI              reduce using rule 142 (character_string_literal -> SCONST .)
    WHILE           reduce using rule 142 (character_string_literal -> SCONST .)


state 106

    (137) integer_literal -> ICONST .

    LBRACKET        reduce using rule 137 (integer_literal -> ICONST .)
    TIMES           reduce using rule 137 (integer_literal -> ICONST .)
    DIVIDE          reduce using rule 137 (integer_literal -> ICONST .)
    MODULO          reduce using rule 137 (integer_literal -> ICONST .)
    PLUS            reduce using rule 137 (integer_literal -> ICONST .)
    MINUS           reduce using rule 137 (integer_literal -> ICONST .)
    CONCAT          reduce using rule 137 (integer_literal -> ICONST .)
    IN              reduce using rule 137 (integer_literal -> ICONST .)
    AND             reduce using rule 137 (integer_literal -> ICONST .)
    OR              reduce using rule 137 (integer_literal -> ICONST .)
    EQUAL           reduce using rule 137 (integer_literal -> ICONST .)
    NOTEQ           reduce using rule 137 (integer_literal -> ICONST .)
    GREATER         reduce using rule 137 (integer_literal -> ICONST .)
    GTEQUAL         reduce using rule 137 (integer_literal -> ICONST .)
    LESS            reduce using rule 137 (integer_literal -> ICONST .)
    LTEQUAL         reduce using rule 137 (integer_literal -> ICONST .)
    SEMI            reduce using rule 137 (integer_literal -> ICONST .)
    COMMA           reduce using rule 137 (integer_literal -> ICONST .)
    RBRACKET        reduce using rule 137 (integer_literal -> ICONST .)
    COLON           reduce using rule 137 (integer_literal -> ICONST .)
    RPAREN          reduce using rule 137 (integer_literal -> ICONST .)
    THEN            reduce using rule 137 (integer_literal -> ICONST .)
    DOWN            reduce using rule 137 (integer_literal -> ICONST .)
    BY              reduce using rule 137 (integer_literal -> ICONST .)
    TO              reduce using rule 137 (integer_literal -> ICONST .)
    ELSE            reduce using rule 137 (integer_literal -> ICONST .)
    ELSIF           reduce using rule 137 (integer_literal -> ICONST .)
    FI              reduce using rule 137 (integer_literal -> ICONST .)
    WHILE           reduce using rule 137 (integer_literal -> ICONST .)


state 107

    (112) operand4 -> primitive_value .
    (135) value_array_element -> primitive_value . LBRACKET expression_list RBRACKET
    (136) value_array_slice -> primitive_value . LBRACKET expression COLON expression RBRACKET

    TIMES           reduce using rule 112 (operand4 -> primitive_value .)
    DIVIDE          reduce using rule 112 (operand4 -> primitive_value .)
    MODULO          reduce using rule 112 (operand4 -> primitive_value .)
    PLUS            reduce using rule 112 (operand4 -> primitive_value .)
    MINUS           reduce using rule 112 (operand4 -> primitive_value .)
    CONCAT          reduce using rule 112 (operand4 -> primitive_value .)
    IN              reduce using rule 112 (operand4 -> primitive_value .)
    AND             reduce using rule 112 (operand4 -> primitive_value .)
    OR              reduce using rule 112 (operand4 -> primitive_value .)
    EQUAL           reduce using rule 112 (operand4 -> primitive_value .)
    NOTEQ           reduce using rule 112 (operand4 -> primitive_value .)
    GREATER         reduce using rule 112 (operand4 -> primitive_value .)
    GTEQUAL         reduce using rule 112 (operand4 -> primitive_value .)
    LESS            reduce using rule 112 (operand4 -> primitive_value .)
    LTEQUAL         reduce using rule 112 (operand4 -> primitive_value .)
    SEMI            reduce using rule 112 (operand4 -> primitive_value .)
    COMMA           reduce using rule 112 (operand4 -> primitive_value .)
    RBRACKET        reduce using rule 112 (operand4 -> primitive_value .)
    COLON           reduce using rule 112 (operand4 -> primitive_value .)
    THEN            reduce using rule 112 (operand4 -> primitive_value .)
    RPAREN          reduce using rule 112 (operand4 -> primitive_value .)
    DOWN            reduce using rule 112 (operand4 -> primitive_value .)
    BY              reduce using rule 112 (operand4 -> primitive_value .)
    TO              reduce using rule 112 (operand4 -> primitive_value .)
    ELSE            reduce using rule 112 (operand4 -> primitive_value .)
    ELSIF           reduce using rule 112 (operand4 -> primitive_value .)
    FI              reduce using rule 112 (operand4 -> primitive_value .)
    WHILE           reduce using rule 112 (operand4 -> primitive_value .)
    LBRACKET        shift and go to state 197


state 108

    (87) parenthesized_expression -> LPAREN . expression RPAREN
    (84) expression -> . operand0
    (85) expression -> . boolean_expression
    (86) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (88) boolean_expression -> . expression AND expression
    (89) boolean_expression -> . expression OR expression
    (90) boolean_expression -> . expression EQUAL expression
    (91) boolean_expression -> . expression NOTEQ expression
    (92) boolean_expression -> . expression GREATER expression
    (93) boolean_expression -> . expression GTEQUAL expression
    (94) boolean_expression -> . expression LESS expression
    (95) boolean_expression -> . expression LTEQUAL expression
    (96) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (97) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (104) operand1 -> . operand2
    (105) operand1 -> . operand1 operator2 operand2
    (106) operand2 -> . operand3
    (107) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (108) operand3 -> . monadic_operator operand4
    (109) operand3 -> . operand4
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    IF              shift and go to state 110
    MINUS           shift and go to state 100
    NOT             shift and go to state 104
    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ID              shift and go to state 56
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    empty_literal                  shift and go to state 83
    operand0                       shift and go to state 84
    expression                     shift and go to state 198
    call_action                    shift and go to state 86
    operand1                       shift and go to state 87
    value_array_slice              shift and go to state 89
    monadic_operator               shift and go to state 114
    parenthesized_expression       shift and go to state 91
    boolean_expression             shift and go to state 120
    character_literal              shift and go to state 93
    operand3                       shift and go to state 94
    literal                        shift and go to state 96
    builtin_call                   shift and go to state 12
    array_location                 shift and go to state 101
    operand2                       shift and go to state 103
    array_element                  shift and go to state 18
    array_slice                    shift and go to state 36
    conditional_expression         shift and go to state 88
    boolean_literal                shift and go to state 102
    builtin_name                   shift and go to state 29
    primitive_value                shift and go to state 107
    value_array_element            shift and go to state 98
    referenced_location            shift and go to state 111
    operand4                       shift and go to state 112
    dereferenced_reference         shift and go to state 16
    string_element                 shift and go to state 32
    character_string_literal       shift and go to state 113
    identifier                     shift and go to state 109
    location                       shift and go to state 41
    integer_literal                shift and go to state 115
    string_slice                   shift and go to state 45

state 109

    (66) location -> identifier .
    (74) string_element -> identifier . LBRACKET start_element RBRACKET
    (76) string_slice -> identifier . LBRACKET left_element COLON right_element RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    ARROW           reduce using rule 66 (location -> identifier .)
    TIMES           reduce using rule 66 (location -> identifier .)
    DIVIDE          reduce using rule 66 (location -> identifier .)
    MODULO          reduce using rule 66 (location -> identifier .)
    PLUS            reduce using rule 66 (location -> identifier .)
    MINUS           reduce using rule 66 (location -> identifier .)
    CONCAT          reduce using rule 66 (location -> identifier .)
    IN              reduce using rule 66 (location -> identifier .)
    AND             reduce using rule 66 (location -> identifier .)
    OR              reduce using rule 66 (location -> identifier .)
    EQUAL           reduce using rule 66 (location -> identifier .)
    NOTEQ           reduce using rule 66 (location -> identifier .)
    GREATER         reduce using rule 66 (location -> identifier .)
    GTEQUAL         reduce using rule 66 (location -> identifier .)
    LESS            reduce using rule 66 (location -> identifier .)
    LTEQUAL         reduce using rule 66 (location -> identifier .)
    SEMI            reduce using rule 66 (location -> identifier .)
    THEN            reduce using rule 66 (location -> identifier .)
    COMMA           reduce using rule 66 (location -> identifier .)
    RBRACKET        reduce using rule 66 (location -> identifier .)
    COLON           reduce using rule 66 (location -> identifier .)
    RPAREN          reduce using rule 66 (location -> identifier .)
    DOWN            reduce using rule 66 (location -> identifier .)
    BY              reduce using rule 66 (location -> identifier .)
    TO              reduce using rule 66 (location -> identifier .)
    ELSE            reduce using rule 66 (location -> identifier .)
    ELSIF           reduce using rule 66 (location -> identifier .)
    FI              reduce using rule 66 (location -> identifier .)
    WHILE           reduce using rule 66 (location -> identifier .)
    ASSIGN          reduce using rule 66 (location -> identifier .)
    LBRACKET        shift and go to state 122

  ! LBRACKET        [ reduce using rule 66 (location -> identifier .) ]


state 110

    (96) conditional_expression -> IF . boolean_expression then_expression else_expression FI
    (97) conditional_expression -> IF . boolean_expression then_expression elsif_expression else_expression FI
    (88) boolean_expression -> . expression AND expression
    (89) boolean_expression -> . expression OR expression
    (90) boolean_expression -> . expression EQUAL expression
    (91) boolean_expression -> . expression NOTEQ expression
    (92) boolean_expression -> . expression GREATER expression
    (93) boolean_expression -> . expression GTEQUAL expression
    (94) boolean_expression -> . expression LESS expression
    (95) boolean_expression -> . expression LTEQUAL expression
    (84) expression -> . operand0
    (85) expression -> . boolean_expression
    (86) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (96) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (97) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (104) operand1 -> . operand2
    (105) operand1 -> . operand1 operator2 operand2
    (106) operand2 -> . operand3
    (107) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (108) operand3 -> . monadic_operator operand4
    (109) operand3 -> . operand4
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    IF              shift and go to state 110
    MINUS           shift and go to state 100
    NOT             shift and go to state 104
    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ID              shift and go to state 56
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    empty_literal                  shift and go to state 83
    operand0                       shift and go to state 84
    expression                     shift and go to state 85
    call_action                    shift and go to state 86
    operand1                       shift and go to state 87
    value_array_slice              shift and go to state 89
    monadic_operator               shift and go to state 114
    parenthesized_expression       shift and go to state 91
    boolean_expression             shift and go to state 199
    character_literal              shift and go to state 93
    operand3                       shift and go to state 94
    literal                        shift and go to state 96
    builtin_call                   shift and go to state 12
    array_location                 shift and go to state 101
    operand2                       shift and go to state 103
    array_element                  shift and go to state 18
    array_slice                    shift and go to state 36
    conditional_expression         shift and go to state 88
    boolean_literal                shift and go to state 102
    builtin_name                   shift and go to state 29
    primitive_value                shift and go to state 107
    value_array_element            shift and go to state 98
    referenced_location            shift and go to state 111
    operand4                       shift and go to state 112
    dereferenced_reference         shift and go to state 16
    string_element                 shift and go to state 32
    character_string_literal       shift and go to state 113
    identifier                     shift and go to state 109
    location                       shift and go to state 41
    integer_literal                shift and go to state 115
    string_slice                   shift and go to state 45

state 111

    (111) operand4 -> referenced_location .

    TIMES           reduce using rule 111 (operand4 -> referenced_location .)
    DIVIDE          reduce using rule 111 (operand4 -> referenced_location .)
    MODULO          reduce using rule 111 (operand4 -> referenced_location .)
    PLUS            reduce using rule 111 (operand4 -> referenced_location .)
    MINUS           reduce using rule 111 (operand4 -> referenced_location .)
    CONCAT          reduce using rule 111 (operand4 -> referenced_location .)
    IN              reduce using rule 111 (operand4 -> referenced_location .)
    AND             reduce using rule 111 (operand4 -> referenced_location .)
    OR              reduce using rule 111 (operand4 -> referenced_location .)
    EQUAL           reduce using rule 111 (operand4 -> referenced_location .)
    NOTEQ           reduce using rule 111 (operand4 -> referenced_location .)
    GREATER         reduce using rule 111 (operand4 -> referenced_location .)
    GTEQUAL         reduce using rule 111 (operand4 -> referenced_location .)
    LESS            reduce using rule 111 (operand4 -> referenced_location .)
    LTEQUAL         reduce using rule 111 (operand4 -> referenced_location .)
    SEMI            reduce using rule 111 (operand4 -> referenced_location .)
    COMMA           reduce using rule 111 (operand4 -> referenced_location .)
    RBRACKET        reduce using rule 111 (operand4 -> referenced_location .)
    COLON           reduce using rule 111 (operand4 -> referenced_location .)
    THEN            reduce using rule 111 (operand4 -> referenced_location .)
    RPAREN          reduce using rule 111 (operand4 -> referenced_location .)
    DOWN            reduce using rule 111 (operand4 -> referenced_location .)
    BY              reduce using rule 111 (operand4 -> referenced_location .)
    TO              reduce using rule 111 (operand4 -> referenced_location .)
    ELSE            reduce using rule 111 (operand4 -> referenced_location .)
    ELSIF           reduce using rule 111 (operand4 -> referenced_location .)
    FI              reduce using rule 111 (operand4 -> referenced_location .)
    WHILE           reduce using rule 111 (operand4 -> referenced_location .)


state 112

    (109) operand3 -> operand4 .

    TIMES           reduce using rule 109 (operand3 -> operand4 .)
    DIVIDE          reduce using rule 109 (operand3 -> operand4 .)
    MODULO          reduce using rule 109 (operand3 -> operand4 .)
    PLUS            reduce using rule 109 (operand3 -> operand4 .)
    MINUS           reduce using rule 109 (operand3 -> operand4 .)
    CONCAT          reduce using rule 109 (operand3 -> operand4 .)
    IN              reduce using rule 109 (operand3 -> operand4 .)
    AND             reduce using rule 109 (operand3 -> operand4 .)
    OR              reduce using rule 109 (operand3 -> operand4 .)
    EQUAL           reduce using rule 109 (operand3 -> operand4 .)
    NOTEQ           reduce using rule 109 (operand3 -> operand4 .)
    GREATER         reduce using rule 109 (operand3 -> operand4 .)
    GTEQUAL         reduce using rule 109 (operand3 -> operand4 .)
    LESS            reduce using rule 109 (operand3 -> operand4 .)
    LTEQUAL         reduce using rule 109 (operand3 -> operand4 .)
    THEN            reduce using rule 109 (operand3 -> operand4 .)
    SEMI            reduce using rule 109 (operand3 -> operand4 .)
    COMMA           reduce using rule 109 (operand3 -> operand4 .)
    RBRACKET        reduce using rule 109 (operand3 -> operand4 .)
    COLON           reduce using rule 109 (operand3 -> operand4 .)
    RPAREN          reduce using rule 109 (operand3 -> operand4 .)
    DOWN            reduce using rule 109 (operand3 -> operand4 .)
    BY              reduce using rule 109 (operand3 -> operand4 .)
    TO              reduce using rule 109 (operand3 -> operand4 .)
    ELSE            reduce using rule 109 (operand3 -> operand4 .)
    ELSIF           reduce using rule 109 (operand3 -> operand4 .)
    FI              reduce using rule 109 (operand3 -> operand4 .)
    WHILE           reduce using rule 109 (operand3 -> operand4 .)


state 113

    (134) literal -> character_string_literal .

    LBRACKET        reduce using rule 134 (literal -> character_string_literal .)
    TIMES           reduce using rule 134 (literal -> character_string_literal .)
    DIVIDE          reduce using rule 134 (literal -> character_string_literal .)
    MODULO          reduce using rule 134 (literal -> character_string_literal .)
    PLUS            reduce using rule 134 (literal -> character_string_literal .)
    MINUS           reduce using rule 134 (literal -> character_string_literal .)
    CONCAT          reduce using rule 134 (literal -> character_string_literal .)
    IN              reduce using rule 134 (literal -> character_string_literal .)
    AND             reduce using rule 134 (literal -> character_string_literal .)
    OR              reduce using rule 134 (literal -> character_string_literal .)
    EQUAL           reduce using rule 134 (literal -> character_string_literal .)
    NOTEQ           reduce using rule 134 (literal -> character_string_literal .)
    GREATER         reduce using rule 134 (literal -> character_string_literal .)
    GTEQUAL         reduce using rule 134 (literal -> character_string_literal .)
    LESS            reduce using rule 134 (literal -> character_string_literal .)
    LTEQUAL         reduce using rule 134 (literal -> character_string_literal .)
    THEN            reduce using rule 134 (literal -> character_string_literal .)
    SEMI            reduce using rule 134 (literal -> character_string_literal .)
    COMMA           reduce using rule 134 (literal -> character_string_literal .)
    RBRACKET        reduce using rule 134 (literal -> character_string_literal .)
    COLON           reduce using rule 134 (literal -> character_string_literal .)
    RPAREN          reduce using rule 134 (literal -> character_string_literal .)
    DOWN            reduce using rule 134 (literal -> character_string_literal .)
    BY              reduce using rule 134 (literal -> character_string_literal .)
    TO              reduce using rule 134 (literal -> character_string_literal .)
    ELSE            reduce using rule 134 (literal -> character_string_literal .)
    ELSIF           reduce using rule 134 (literal -> character_string_literal .)
    FI              reduce using rule 134 (literal -> character_string_literal .)
    WHILE           reduce using rule 134 (literal -> character_string_literal .)


state 114

    (108) operand3 -> monadic_operator . operand4
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ID              shift and go to state 56
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    call_action                    shift and go to state 86
    empty_literal                  shift and go to state 83
    boolean_literal                shift and go to state 102
    value_array_slice              shift and go to state 89
    parenthesized_expression       shift and go to state 91
    value_array_element            shift and go to state 98
    primitive_value                shift and go to state 107
    integer_literal                shift and go to state 115
    character_literal              shift and go to state 93
    builtin_name                   shift and go to state 29
    literal                        shift and go to state 96
    referenced_location            shift and go to state 111
    operand4                       shift and go to state 200
    builtin_call                   shift and go to state 12
    string_element                 shift and go to state 32
    string_slice                   shift and go to state 45
    dereferenced_reference         shift and go to state 16
    array_location                 shift and go to state 101
    character_string_literal       shift and go to state 113
    location                       shift and go to state 41
    array_element                  shift and go to state 18
    array_slice                    shift and go to state 36
    identifier                     shift and go to state 109

state 115

    (130) literal -> integer_literal .

    LBRACKET        reduce using rule 130 (literal -> integer_literal .)
    TIMES           reduce using rule 130 (literal -> integer_literal .)
    DIVIDE          reduce using rule 130 (literal -> integer_literal .)
    MODULO          reduce using rule 130 (literal -> integer_literal .)
    PLUS            reduce using rule 130 (literal -> integer_literal .)
    MINUS           reduce using rule 130 (literal -> integer_literal .)
    CONCAT          reduce using rule 130 (literal -> integer_literal .)
    IN              reduce using rule 130 (literal -> integer_literal .)
    AND             reduce using rule 130 (literal -> integer_literal .)
    OR              reduce using rule 130 (literal -> integer_literal .)
    EQUAL           reduce using rule 130 (literal -> integer_literal .)
    NOTEQ           reduce using rule 130 (literal -> integer_literal .)
    GREATER         reduce using rule 130 (literal -> integer_literal .)
    GTEQUAL         reduce using rule 130 (literal -> integer_literal .)
    LESS            reduce using rule 130 (literal -> integer_literal .)
    LTEQUAL         reduce using rule 130 (literal -> integer_literal .)
    THEN            reduce using rule 130 (literal -> integer_literal .)
    SEMI            reduce using rule 130 (literal -> integer_literal .)
    COMMA           reduce using rule 130 (literal -> integer_literal .)
    RBRACKET        reduce using rule 130 (literal -> integer_literal .)
    COLON           reduce using rule 130 (literal -> integer_literal .)
    RPAREN          reduce using rule 130 (literal -> integer_literal .)
    DOWN            reduce using rule 130 (literal -> integer_literal .)
    BY              reduce using rule 130 (literal -> integer_literal .)
    TO              reduce using rule 130 (literal -> integer_literal .)
    ELSE            reduce using rule 130 (literal -> integer_literal .)
    ELSIF           reduce using rule 130 (literal -> integer_literal .)
    FI              reduce using rule 130 (literal -> integer_literal .)
    WHILE           reduce using rule 130 (literal -> integer_literal .)


state 116

    (139) boolean_literal -> FALSE .

    LBRACKET        reduce using rule 139 (boolean_literal -> FALSE .)
    TIMES           reduce using rule 139 (boolean_literal -> FALSE .)
    DIVIDE          reduce using rule 139 (boolean_literal -> FALSE .)
    MODULO          reduce using rule 139 (boolean_literal -> FALSE .)
    PLUS            reduce using rule 139 (boolean_literal -> FALSE .)
    MINUS           reduce using rule 139 (boolean_literal -> FALSE .)
    CONCAT          reduce using rule 139 (boolean_literal -> FALSE .)
    IN              reduce using rule 139 (boolean_literal -> FALSE .)
    AND             reduce using rule 139 (boolean_literal -> FALSE .)
    OR              reduce using rule 139 (boolean_literal -> FALSE .)
    EQUAL           reduce using rule 139 (boolean_literal -> FALSE .)
    NOTEQ           reduce using rule 139 (boolean_literal -> FALSE .)
    GREATER         reduce using rule 139 (boolean_literal -> FALSE .)
    GTEQUAL         reduce using rule 139 (boolean_literal -> FALSE .)
    LESS            reduce using rule 139 (boolean_literal -> FALSE .)
    LTEQUAL         reduce using rule 139 (boolean_literal -> FALSE .)
    SEMI            reduce using rule 139 (boolean_literal -> FALSE .)
    COMMA           reduce using rule 139 (boolean_literal -> FALSE .)
    RBRACKET        reduce using rule 139 (boolean_literal -> FALSE .)
    COLON           reduce using rule 139 (boolean_literal -> FALSE .)
    RPAREN          reduce using rule 139 (boolean_literal -> FALSE .)
    THEN            reduce using rule 139 (boolean_literal -> FALSE .)
    DOWN            reduce using rule 139 (boolean_literal -> FALSE .)
    BY              reduce using rule 139 (boolean_literal -> FALSE .)
    TO              reduce using rule 139 (boolean_literal -> FALSE .)
    ELSE            reduce using rule 139 (boolean_literal -> FALSE .)
    ELSIF           reduce using rule 139 (boolean_literal -> FALSE .)
    FI              reduce using rule 139 (boolean_literal -> FALSE .)
    WHILE           reduce using rule 139 (boolean_literal -> FALSE .)


state 117

    (144) action_statement -> action SEMI .

    ID              reduce using rule 144 (action_statement -> action SEMI .)
    EXIT            reduce using rule 144 (action_statement -> action SEMI .)
    RESULT          reduce using rule 144 (action_statement -> action SEMI .)
    RETURN          reduce using rule 144 (action_statement -> action SEMI .)
    IF              reduce using rule 144 (action_statement -> action SEMI .)
    DO              reduce using rule 144 (action_statement -> action SEMI .)
    ABS             reduce using rule 144 (action_statement -> action SEMI .)
    ASC             reduce using rule 144 (action_statement -> action SEMI .)
    NUM             reduce using rule 144 (action_statement -> action SEMI .)
    UPPER           reduce using rule 144 (action_statement -> action SEMI .)
    LOWER           reduce using rule 144 (action_statement -> action SEMI .)
    LENGTH          reduce using rule 144 (action_statement -> action SEMI .)
    READ            reduce using rule 144 (action_statement -> action SEMI .)
    PRINT           reduce using rule 144 (action_statement -> action SEMI .)
    FI              reduce using rule 144 (action_statement -> action SEMI .)
    ELSE            reduce using rule 144 (action_statement -> action SEMI .)
    ELSIF           reduce using rule 144 (action_statement -> action SEMI .)
    OD              reduce using rule 144 (action_statement -> action SEMI .)
    DCL             reduce using rule 144 (action_statement -> action SEMI .)
    SYN             reduce using rule 144 (action_statement -> action SEMI .)
    TYPE            reduce using rule 144 (action_statement -> action SEMI .)
    $end            reduce using rule 144 (action_statement -> action SEMI .)
    END             reduce using rule 144 (action_statement -> action SEMI .)


state 118

    (187) result -> empty .

    SEMI            reduce using rule 187 (result -> empty .)


state 119

    (186) result -> expression .
    (88) boolean_expression -> expression . AND expression
    (89) boolean_expression -> expression . OR expression
    (90) boolean_expression -> expression . EQUAL expression
    (91) boolean_expression -> expression . NOTEQ expression
    (92) boolean_expression -> expression . GREATER expression
    (93) boolean_expression -> expression . GTEQUAL expression
    (94) boolean_expression -> expression . LESS expression
    (95) boolean_expression -> expression . LTEQUAL expression

    SEMI            reduce using rule 186 (result -> expression .)
    AND             shift and go to state 184
    OR              shift and go to state 188
    EQUAL           shift and go to state 186
    NOTEQ           shift and go to state 189
    GREATER         shift and go to state 185
    GTEQUAL         shift and go to state 182
    LESS            shift and go to state 183
    LTEQUAL         shift and go to state 187


state 120

    (85) expression -> boolean_expression .

    AND             reduce using rule 85 (expression -> boolean_expression .)
    OR              reduce using rule 85 (expression -> boolean_expression .)
    EQUAL           reduce using rule 85 (expression -> boolean_expression .)
    NOTEQ           reduce using rule 85 (expression -> boolean_expression .)
    GREATER         reduce using rule 85 (expression -> boolean_expression .)
    GTEQUAL         reduce using rule 85 (expression -> boolean_expression .)
    LESS            reduce using rule 85 (expression -> boolean_expression .)
    LTEQUAL         reduce using rule 85 (expression -> boolean_expression .)
    COMMA           reduce using rule 85 (expression -> boolean_expression .)
    SEMI            reduce using rule 85 (expression -> boolean_expression .)
    FI              reduce using rule 85 (expression -> boolean_expression .)
    THEN            reduce using rule 85 (expression -> boolean_expression .)
    RBRACKET        reduce using rule 85 (expression -> boolean_expression .)
    COLON           reduce using rule 85 (expression -> boolean_expression .)
    RPAREN          reduce using rule 85 (expression -> boolean_expression .)
    DOWN            reduce using rule 85 (expression -> boolean_expression .)
    BY              reduce using rule 85 (expression -> boolean_expression .)
    TO              reduce using rule 85 (expression -> boolean_expression .)
    ELSE            reduce using rule 85 (expression -> boolean_expression .)
    ELSIF           reduce using rule 85 (expression -> boolean_expression .)
    WHILE           reduce using rule 85 (expression -> boolean_expression .)


state 121

    (185) return_action -> RETURN result .

    SEMI            reduce using rule 185 (return_action -> RETURN result .)


state 122

    (74) string_element -> identifier LBRACKET . start_element RBRACKET
    (76) string_slice -> identifier LBRACKET . left_element COLON right_element RBRACKET
    (75) start_element -> . expression
    (77) left_element -> . expression
    (84) expression -> . operand0
    (85) expression -> . boolean_expression
    (86) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (88) boolean_expression -> . expression AND expression
    (89) boolean_expression -> . expression OR expression
    (90) boolean_expression -> . expression EQUAL expression
    (91) boolean_expression -> . expression NOTEQ expression
    (92) boolean_expression -> . expression GREATER expression
    (93) boolean_expression -> . expression GTEQUAL expression
    (94) boolean_expression -> . expression LESS expression
    (95) boolean_expression -> . expression LTEQUAL expression
    (96) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (97) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (104) operand1 -> . operand2
    (105) operand1 -> . operand1 operator2 operand2
    (106) operand2 -> . operand3
    (107) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (108) operand3 -> . monadic_operator operand4
    (109) operand3 -> . operand4
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    IF              shift and go to state 110
    MINUS           shift and go to state 100
    NOT             shift and go to state 104
    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ID              shift and go to state 56
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    empty_literal                  shift and go to state 83
    operand0                       shift and go to state 84
    expression                     shift and go to state 201
    call_action                    shift and go to state 86
    operand1                       shift and go to state 87
    value_array_slice              shift and go to state 89
    monadic_operator               shift and go to state 114
    parenthesized_expression       shift and go to state 91
    integer_literal                shift and go to state 115
    left_element                   shift and go to state 202
    character_literal              shift and go to state 93
    operand3                       shift and go to state 94
    literal                        shift and go to state 96
    builtin_call                   shift and go to state 12
    array_location                 shift and go to state 101
    operand2                       shift and go to state 103
    array_element                  shift and go to state 18
    character_string_literal       shift and go to state 113
    conditional_expression         shift and go to state 88
    boolean_literal                shift and go to state 102
    referenced_location            shift and go to state 111
    builtin_name                   shift and go to state 29
    primitive_value                shift and go to state 107
    value_array_element            shift and go to state 98
    operand4                       shift and go to state 112
    string_element                 shift and go to state 32
    array_slice                    shift and go to state 36
    identifier                     shift and go to state 109
    start_element                  shift and go to state 203
    location                       shift and go to state 41
    boolean_expression             shift and go to state 120
    string_slice                   shift and go to state 45
    dereferenced_reference         shift and go to state 16

state 123

    (143) action_statement -> identifier COLON . action SEMI
    (145) action -> . bracketed_action
    (146) action -> . assignment_action
    (147) action -> . call_action
    (148) action -> . exit_action
    (149) action -> . result_action
    (150) action -> . return_action
    (151) bracketed_action -> . if_action
    (152) bracketed_action -> . do_action
    (153) assignment_action -> . array_location assigning_operator expression
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (184) exit_action -> . EXIT identifier
    (188) result_action -> . RESULT expression
    (185) return_action -> . RETURN result
    (159) if_action -> . IF boolean_expression then_clause else_clause FI
    (160) if_action -> . IF boolean_expression then_clause FI
    (189) do_action -> . DO control_part SEMI action_statement_nullable OD
    (190) do_action -> . DO action_statement_nullable OD
    (83) array_location -> . location
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    EXIT            shift and go to state 42
    RESULT          shift and go to state 44
    RETURN          shift and go to state 34
    IF              shift and go to state 31
    DO              shift and go to state 10
    ID              shift and go to state 205
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    call_action                    shift and go to state 2
    assignment_action              shift and go to state 4
    return_action                  shift and go to state 43
    if_action                      shift and go to state 28
    builtin_name                   shift and go to state 29
    builtin_call                   shift and go to state 12
    result_action                  shift and go to state 11
    action                         shift and go to state 204
    string_element                 shift and go to state 32
    string_slice                   shift and go to state 45
    identifier                     shift and go to state 109
    array_location                 shift and go to state 13
    dereferenced_reference         shift and go to state 16
    array_slice                    shift and go to state 36
    do_action                      shift and go to state 40
    bracketed_action               shift and go to state 30
    exit_action                    shift and go to state 25
    array_element                  shift and go to state 18
    location                       shift and go to state 41

state 124

    (4) statement_nullable -> empty .

    $end            reduce using rule 4 (statement_nullable -> empty .)
    END             reduce using rule 4 (statement_nullable -> empty .)


state 125

    (2) statement_list -> statement statement_nullable .

    $end            reduce using rule 2 (statement_list -> statement statement_nullable .)


state 126

    (3) statement_nullable -> statement . statement_nullable
    (3) statement_nullable -> . statement statement_nullable
    (4) statement_nullable -> . empty
    (5) statement -> . declaration_statement
    (6) statement -> . synonym_statement
    (7) statement -> . newmode_statement
    (8) statement -> . action_statement
    (9) statement -> . procedure_statement
    (206) empty -> .
    (15) declaration_statement -> . DCL declaration_list SEMI
    (10) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (143) action_statement -> . identifier COLON action SEMI
    (144) action_statement -> . action SEMI
    (28) procedure_statement -> . ID COLON procedure_definition
    (23) identifier -> . ID
    (145) action -> . bracketed_action
    (146) action -> . assignment_action
    (147) action -> . call_action
    (148) action -> . exit_action
    (149) action -> . result_action
    (150) action -> . return_action
    (151) bracketed_action -> . if_action
    (152) bracketed_action -> . do_action
    (153) assignment_action -> . array_location assigning_operator expression
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (184) exit_action -> . EXIT identifier
    (188) result_action -> . RESULT expression
    (185) return_action -> . RETURN result
    (159) if_action -> . IF boolean_expression then_clause else_clause FI
    (160) if_action -> . IF boolean_expression then_clause FI
    (189) do_action -> . DO control_part SEMI action_statement_nullable OD
    (190) do_action -> . DO action_statement_nullable OD
    (83) array_location -> . location
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    $end            reduce using rule 206 (empty -> .)
    END             reduce using rule 206 (empty -> .)
    DCL             shift and go to state 5
    SYN             shift and go to state 19
    TYPE            shift and go to state 26
    ID              shift and go to state 17
    EXIT            shift and go to state 42
    RESULT          shift and go to state 44
    RETURN          shift and go to state 34
    IF              shift and go to state 31
    DO              shift and go to state 10
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    call_action                    shift and go to state 2
    statement                      shift and go to state 126
    declaration_statement          shift and go to state 3
    empty                          shift and go to state 124
    action_statement               shift and go to state 9
    assignment_action              shift and go to state 4
    result_action                  shift and go to state 11
    dereferenced_reference         shift and go to state 16
    array_location                 shift and go to state 13
    statement_nullable             shift and go to state 206
    procedure_statement            shift and go to state 15
    builtin_call                   shift and go to state 12
    array_element                  shift and go to state 18
    synonym_statement              shift and go to state 23
    exit_action                    shift and go to state 25
    return_action                  shift and go to state 43
    newmode_statement              shift and go to state 27
    if_action                      shift and go to state 28
    bracketed_action               shift and go to state 30
    action                         shift and go to state 33
    string_element                 shift and go to state 32
    array_slice                    shift and go to state 36
    identifier                     shift and go to state 35
    do_action                      shift and go to state 40
    location                       shift and go to state 41
    builtin_name                   shift and go to state 29
    string_slice                   shift and go to state 45

state 127

    (184) exit_action -> EXIT identifier .

    SEMI            reduce using rule 184 (exit_action -> EXIT identifier .)


state 128

    (188) result_action -> RESULT expression .
    (88) boolean_expression -> expression . AND expression
    (89) boolean_expression -> expression . OR expression
    (90) boolean_expression -> expression . EQUAL expression
    (91) boolean_expression -> expression . NOTEQ expression
    (92) boolean_expression -> expression . GREATER expression
    (93) boolean_expression -> expression . GTEQUAL expression
    (94) boolean_expression -> expression . LESS expression
    (95) boolean_expression -> expression . LTEQUAL expression

    SEMI            reduce using rule 188 (result_action -> RESULT expression .)
    AND             shift and go to state 184
    OR              shift and go to state 188
    EQUAL           shift and go to state 186
    NOTEQ           shift and go to state 189
    GREATER         shift and go to state 185
    GTEQUAL         shift and go to state 182
    LESS            shift and go to state 183
    LTEQUAL         shift and go to state 187


state 129

    (49) character_mode -> CHAR .

    LPAREN          reduce using rule 49 (character_mode -> CHAR .)
    WHILE           reduce using rule 49 (character_mode -> CHAR .)
    SEMI            reduce using rule 49 (character_mode -> CHAR .)
    LOC             reduce using rule 49 (character_mode -> CHAR .)
    COMMA           reduce using rule 49 (character_mode -> CHAR .)
    RPAREN          reduce using rule 49 (character_mode -> CHAR .)
    ASSIGN          reduce using rule 49 (character_mode -> CHAR .)
    RBRACKET        reduce using rule 49 (character_mode -> CHAR .)


state 130

    (48) boolean_mode -> BOOL .

    LPAREN          reduce using rule 48 (boolean_mode -> BOOL .)
    ASSIGN          reduce using rule 48 (boolean_mode -> BOOL .)
    COMMA           reduce using rule 48 (boolean_mode -> BOOL .)
    SEMI            reduce using rule 48 (boolean_mode -> BOOL .)
    LOC             reduce using rule 48 (boolean_mode -> BOOL .)
    RPAREN          reduce using rule 48 (boolean_mode -> BOOL .)
    RBRACKET        reduce using rule 48 (boolean_mode -> BOOL .)
    WHILE           reduce using rule 48 (boolean_mode -> BOOL .)


state 131

    (47) integer_mode -> INT .

    LPAREN          reduce using rule 47 (integer_mode -> INT .)
    ASSIGN          reduce using rule 47 (integer_mode -> INT .)
    LOC             reduce using rule 47 (integer_mode -> INT .)
    COMMA           reduce using rule 47 (integer_mode -> INT .)
    RPAREN          reduce using rule 47 (integer_mode -> INT .)
    RBRACKET        reduce using rule 47 (integer_mode -> INT .)
    SEMI            reduce using rule 47 (integer_mode -> INT .)
    WHILE           reduce using rule 47 (integer_mode -> INT .)


state 132

    (60) array_mode -> ARRAY . LBRACKET index_mode_list RBRACKET element_mode

    LBRACKET        shift and go to state 207


state 133

    (40) mode -> composite_mode .

    COMMA           reduce using rule 40 (mode -> composite_mode .)
    SEMI            reduce using rule 40 (mode -> composite_mode .)
    ASSIGN          reduce using rule 40 (mode -> composite_mode .)
    LOC             reduce using rule 40 (mode -> composite_mode .)
    RPAREN          reduce using rule 40 (mode -> composite_mode .)


state 134

    (45) discrete_mode -> discrete_range_mode .

    LPAREN          reduce using rule 45 (discrete_mode -> discrete_range_mode .)
    LOC             reduce using rule 45 (discrete_mode -> discrete_range_mode .)
    COMMA           reduce using rule 45 (discrete_mode -> discrete_range_mode .)
    RPAREN          reduce using rule 45 (discrete_mode -> discrete_range_mode .)
    ASSIGN          reduce using rule 45 (discrete_mode -> discrete_range_mode .)
    SEMI            reduce using rule 45 (discrete_mode -> discrete_range_mode .)
    RBRACKET        reduce using rule 45 (discrete_mode -> discrete_range_mode .)
    WHILE           reduce using rule 45 (discrete_mode -> discrete_range_mode .)


state 135

    (50) discrete_range_mode -> discrete_mode_name . LPAREN literal_range RPAREN

    LPAREN          shift and go to state 208


state 136

    (37) mode -> mode_name .

    COMMA           reduce using rule 37 (mode -> mode_name .)
    SEMI            reduce using rule 37 (mode -> mode_name .)
    ASSIGN          reduce using rule 37 (mode -> mode_name .)
    LOC             reduce using rule 37 (mode -> mode_name .)
    RPAREN          reduce using rule 37 (mode -> mode_name .)


state 137

    (56) composite_mode -> string_mode .

    ASSIGN          reduce using rule 56 (composite_mode -> string_mode .)
    COMMA           reduce using rule 56 (composite_mode -> string_mode .)
    SEMI            reduce using rule 56 (composite_mode -> string_mode .)
    LOC             reduce using rule 56 (composite_mode -> string_mode .)
    RPAREN          reduce using rule 56 (composite_mode -> string_mode .)


state 138

    (42) discrete_mode -> integer_mode .

    LPAREN          reduce using rule 42 (discrete_mode -> integer_mode .)
    LOC             reduce using rule 42 (discrete_mode -> integer_mode .)
    COMMA           reduce using rule 42 (discrete_mode -> integer_mode .)
    RPAREN          reduce using rule 42 (discrete_mode -> integer_mode .)
    ASSIGN          reduce using rule 42 (discrete_mode -> integer_mode .)
    SEMI            reduce using rule 42 (discrete_mode -> integer_mode .)
    RBRACKET        reduce using rule 42 (discrete_mode -> integer_mode .)
    WHILE           reduce using rule 42 (discrete_mode -> integer_mode .)


state 139

    (39) mode -> reference_mode .

    COMMA           reduce using rule 39 (mode -> reference_mode .)
    SEMI            reduce using rule 39 (mode -> reference_mode .)
    ASSIGN          reduce using rule 39 (mode -> reference_mode .)
    LOC             reduce using rule 39 (mode -> reference_mode .)
    RPAREN          reduce using rule 39 (mode -> reference_mode .)


state 140

    (41) mode_name -> identifier .
    (46) discrete_mode_name -> identifier .

    COMMA           reduce using rule 41 (mode_name -> identifier .)
    SEMI            reduce using rule 41 (mode_name -> identifier .)
    LOC             reduce using rule 41 (mode_name -> identifier .)
    RPAREN          reduce using rule 41 (mode_name -> identifier .)
    ASSIGN          reduce using rule 41 (mode_name -> identifier .)
    LPAREN          reduce using rule 46 (discrete_mode_name -> identifier .)


state 141

    (57) composite_mode -> array_mode .

    ASSIGN          reduce using rule 57 (composite_mode -> array_mode .)
    COMMA           reduce using rule 57 (composite_mode -> array_mode .)
    SEMI            reduce using rule 57 (composite_mode -> array_mode .)
    LOC             reduce using rule 57 (composite_mode -> array_mode .)
    RPAREN          reduce using rule 57 (composite_mode -> array_mode .)


state 142

    (44) discrete_mode -> character_mode .

    LPAREN          reduce using rule 44 (discrete_mode -> character_mode .)
    LOC             reduce using rule 44 (discrete_mode -> character_mode .)
    COMMA           reduce using rule 44 (discrete_mode -> character_mode .)
    RPAREN          reduce using rule 44 (discrete_mode -> character_mode .)
    ASSIGN          reduce using rule 44 (discrete_mode -> character_mode .)
    SEMI            reduce using rule 44 (discrete_mode -> character_mode .)
    RBRACKET        reduce using rule 44 (discrete_mode -> character_mode .)
    WHILE           reduce using rule 44 (discrete_mode -> character_mode .)


state 143

    (43) discrete_mode -> boolean_mode .

    LPAREN          reduce using rule 43 (discrete_mode -> boolean_mode .)
    LOC             reduce using rule 43 (discrete_mode -> boolean_mode .)
    COMMA           reduce using rule 43 (discrete_mode -> boolean_mode .)
    RPAREN          reduce using rule 43 (discrete_mode -> boolean_mode .)
    ASSIGN          reduce using rule 43 (discrete_mode -> boolean_mode .)
    SEMI            reduce using rule 43 (discrete_mode -> boolean_mode .)
    RBRACKET        reduce using rule 43 (discrete_mode -> boolean_mode .)
    WHILE           reduce using rule 43 (discrete_mode -> boolean_mode .)


state 144

    (18) declaration -> identifier_list mode . initialization
    (19) declaration -> identifier_list mode .
    (20) initialization -> . ASSIGN expression

    COMMA           reduce using rule 19 (declaration -> identifier_list mode .)
    SEMI            reduce using rule 19 (declaration -> identifier_list mode .)
    ASSIGN          shift and go to state 210

    initialization                 shift and go to state 209

state 145

    (38) mode -> discrete_mode .
    (51) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    COMMA           reduce using rule 38 (mode -> discrete_mode .)
    SEMI            reduce using rule 38 (mode -> discrete_mode .)
    ASSIGN          reduce using rule 38 (mode -> discrete_mode .)
    LOC             reduce using rule 38 (mode -> discrete_mode .)
    RPAREN          reduce using rule 38 (mode -> discrete_mode .)
    LPAREN          shift and go to state 211


state 146

    (55) reference_mode -> REF . mode
    (37) mode -> . mode_name
    (38) mode -> . discrete_mode
    (39) mode -> . reference_mode
    (40) mode -> . composite_mode
    (41) mode_name -> . identifier
    (42) discrete_mode -> . integer_mode
    (43) discrete_mode -> . boolean_mode
    (44) discrete_mode -> . character_mode
    (45) discrete_mode -> . discrete_range_mode
    (55) reference_mode -> . REF mode
    (56) composite_mode -> . string_mode
    (57) composite_mode -> . array_mode
    (23) identifier -> . ID
    (47) integer_mode -> . INT
    (48) boolean_mode -> . BOOL
    (49) character_mode -> . CHAR
    (50) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (51) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (58) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (60) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (46) discrete_mode_name -> . identifier

    REF             shift and go to state 146
    ID              shift and go to state 47
    INT             shift and go to state 131
    BOOL            shift and go to state 130
    CHAR            shift and go to state 129
    CHARS           shift and go to state 147
    ARRAY           shift and go to state 132

    integer_mode                   shift and go to state 138
    reference_mode                 shift and go to state 139
    mode                           shift and go to state 212
    identifier                     shift and go to state 140
    composite_mode                 shift and go to state 133
    array_mode                     shift and go to state 141
    discrete_range_mode            shift and go to state 134
    boolean_mode                   shift and go to state 143
    discrete_mode_name             shift and go to state 135
    mode_name                      shift and go to state 136
    character_mode                 shift and go to state 142
    string_mode                    shift and go to state 137
    discrete_mode                  shift and go to state 145

state 147

    (58) string_mode -> CHARS . LBRACKET string_length RBRACKET

    LBRACKET        shift and go to state 213


state 148

    (15) declaration_statement -> DCL declaration_list SEMI .

    DCL             reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    SYN             reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    TYPE            reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    ID              reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    EXIT            reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    RESULT          reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    RETURN          reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    IF              reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    DO              reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    ABS             reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    ASC             reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    NUM             reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    UPPER           reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    LOWER           reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    LENGTH          reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    READ            reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    PRINT           reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    $end            reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    END             reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)


state 149

    (17) declaration_list -> declaration COMMA . declaration_list
    (16) declaration_list -> . declaration
    (17) declaration_list -> . declaration COMMA declaration_list
    (18) declaration -> . identifier_list mode initialization
    (19) declaration -> . identifier_list mode
    (21) identifier_list -> . identifier
    (22) identifier_list -> . identifier COMMA identifier_list
    (23) identifier -> . ID

    ID              shift and go to state 47

    identifier_list                shift and go to state 46
    declaration                    shift and go to state 49
    declaration_list               shift and go to state 214
    identifier                     shift and go to state 50

state 150

    (22) identifier_list -> identifier COMMA . identifier_list
    (21) identifier_list -> . identifier
    (22) identifier_list -> . identifier COMMA identifier_list
    (23) identifier -> . ID

    ID              shift and go to state 47

    identifier_list                shift and go to state 215
    identifier                     shift and go to state 50

state 151

    (205) while_control -> WHILE expression .
    (88) boolean_expression -> expression . AND expression
    (89) boolean_expression -> expression . OR expression
    (90) boolean_expression -> expression . EQUAL expression
    (91) boolean_expression -> expression . NOTEQ expression
    (92) boolean_expression -> expression . GREATER expression
    (93) boolean_expression -> expression . GTEQUAL expression
    (94) boolean_expression -> expression . LESS expression
    (95) boolean_expression -> expression . LTEQUAL expression

    SEMI            reduce using rule 205 (while_control -> WHILE expression .)
    AND             shift and go to state 184
    OR              shift and go to state 188
    EQUAL           shift and go to state 186
    NOTEQ           shift and go to state 189
    GREATER         shift and go to state 185
    GTEQUAL         shift and go to state 182
    LESS            shift and go to state 183
    LTEQUAL         shift and go to state 187


state 152

    (166) action_statement_nullable -> action_statement action_statement_nullable .

    OD              reduce using rule 166 (action_statement_nullable -> action_statement action_statement_nullable .)
    FI              reduce using rule 166 (action_statement_nullable -> action_statement action_statement_nullable .)
    ELSE            reduce using rule 166 (action_statement_nullable -> action_statement action_statement_nullable .)
    ELSIF           reduce using rule 166 (action_statement_nullable -> action_statement action_statement_nullable .)


state 153

    (189) do_action -> DO control_part SEMI . action_statement_nullable OD
    (166) action_statement_nullable -> . action_statement action_statement_nullable
    (167) action_statement_nullable -> . empty
    (143) action_statement -> . identifier COLON action SEMI
    (144) action_statement -> . action SEMI
    (206) empty -> .
    (23) identifier -> . ID
    (145) action -> . bracketed_action
    (146) action -> . assignment_action
    (147) action -> . call_action
    (148) action -> . exit_action
    (149) action -> . result_action
    (150) action -> . return_action
    (151) bracketed_action -> . if_action
    (152) bracketed_action -> . do_action
    (153) assignment_action -> . array_location assigning_operator expression
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (184) exit_action -> . EXIT identifier
    (188) result_action -> . RESULT expression
    (185) return_action -> . RETURN result
    (159) if_action -> . IF boolean_expression then_clause else_clause FI
    (160) if_action -> . IF boolean_expression then_clause FI
    (189) do_action -> . DO control_part SEMI action_statement_nullable OD
    (190) do_action -> . DO action_statement_nullable OD
    (83) array_location -> . location
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    OD              reduce using rule 206 (empty -> .)
    ID              shift and go to state 56
    EXIT            shift and go to state 42
    RESULT          shift and go to state 44
    RETURN          shift and go to state 34
    IF              shift and go to state 31
    DO              shift and go to state 10
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    call_action                    shift and go to state 2
    exit_action                    shift and go to state 25
    empty                          shift and go to state 51
    dereferenced_reference         shift and go to state 16
    action_statement               shift and go to state 53
    return_action                  shift and go to state 43
    if_action                      shift and go to state 28
    bracketed_action               shift and go to state 30
    assignment_action              shift and go to state 4
    result_action                  shift and go to state 11
    action                         shift and go to state 33
    string_element                 shift and go to state 32
    string_slice                   shift and go to state 45
    identifier                     shift and go to state 35
    array_location                 shift and go to state 13
    array_slice                    shift and go to state 36
    do_action                      shift and go to state 40
    builtin_name                   shift and go to state 29
    array_element                  shift and go to state 18
    action_statement_nullable      shift and go to state 216
    builtin_call                   shift and go to state 12
    location                       shift and go to state 41

state 154

    (190) do_action -> DO action_statement_nullable OD .

    SEMI            reduce using rule 190 (do_action -> DO action_statement_nullable OD .)


state 155

    (194) for_control -> FOR iteration .

    WHILE           reduce using rule 194 (for_control -> FOR iteration .)
    SEMI            reduce using rule 194 (for_control -> FOR iteration .)


state 156

    (197) step_enumeration -> identifier . ASSIGN expression step_value DOWN end_value
    (198) step_enumeration -> identifier . ASSIGN expression step_value end_value
    (199) step_enumeration -> identifier . ASSIGN expression DOWN end_value
    (200) step_enumeration -> identifier . ASSIGN expression end_value
    (203) range_enumeration -> identifier . DOWN IN discrete_mode
    (204) range_enumeration -> identifier . IN discrete_mode

    ASSIGN          shift and go to state 219
    DOWN            shift and go to state 218
    IN              shift and go to state 217


state 157

    (196) iteration -> range_enumeration .

    WHILE           reduce using rule 196 (iteration -> range_enumeration .)
    SEMI            reduce using rule 196 (iteration -> range_enumeration .)


state 158

    (195) iteration -> step_enumeration .

    WHILE           reduce using rule 195 (iteration -> step_enumeration .)
    SEMI            reduce using rule 195 (iteration -> step_enumeration .)


state 159

    (191) control_part -> for_control while_control .

    SEMI            reduce using rule 191 (control_part -> for_control while_control .)


state 160

    (154) assigning_operator -> closed_dyadic_operator ASSIGN .

    IF              reduce using rule 154 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    MINUS           reduce using rule 154 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    NOT             reduce using rule 154 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    ARROW           reduce using rule 154 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    LPAREN          reduce using rule 154 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    ID              reduce using rule 154 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    ICONST          reduce using rule 154 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    TRUE            reduce using rule 154 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    FALSE           reduce using rule 154 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    CCONST          reduce using rule 154 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    NULL            reduce using rule 154 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    SCONST          reduce using rule 154 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    ABS             reduce using rule 154 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    ASC             reduce using rule 154 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    NUM             reduce using rule 154 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    UPPER           reduce using rule 154 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    LOWER           reduce using rule 154 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    LENGTH          reduce using rule 154 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    READ            reduce using rule 154 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    PRINT           reduce using rule 154 (assigning_operator -> closed_dyadic_operator ASSIGN .)


state 161

    (153) assignment_action -> array_location assigning_operator expression .
    (88) boolean_expression -> expression . AND expression
    (89) boolean_expression -> expression . OR expression
    (90) boolean_expression -> expression . EQUAL expression
    (91) boolean_expression -> expression . NOTEQ expression
    (92) boolean_expression -> expression . GREATER expression
    (93) boolean_expression -> expression . GTEQUAL expression
    (94) boolean_expression -> expression . LESS expression
    (95) boolean_expression -> expression . LTEQUAL expression

    SEMI            reduce using rule 153 (assignment_action -> array_location assigning_operator expression .)
    AND             shift and go to state 184
    OR              shift and go to state 188
    EQUAL           shift and go to state 186
    NOTEQ           shift and go to state 189
    GREATER         shift and go to state 185
    GTEQUAL         shift and go to state 182
    LESS            shift and go to state 183
    LTEQUAL         shift and go to state 187


state 162

    (80) expression_list -> expression .
    (81) expression_list -> expression . COMMA expression_list
    (53) lower_bound -> expression .
    (88) boolean_expression -> expression . AND expression
    (89) boolean_expression -> expression . OR expression
    (90) boolean_expression -> expression . EQUAL expression
    (91) boolean_expression -> expression . NOTEQ expression
    (92) boolean_expression -> expression . GREATER expression
    (93) boolean_expression -> expression . GTEQUAL expression
    (94) boolean_expression -> expression . LESS expression
    (95) boolean_expression -> expression . LTEQUAL expression

    RBRACKET        reduce using rule 80 (expression_list -> expression .)
    COMMA           shift and go to state 220
    COLON           reduce using rule 53 (lower_bound -> expression .)
    AND             shift and go to state 184
    OR              shift and go to state 188
    EQUAL           shift and go to state 186
    NOTEQ           shift and go to state 189
    GREATER         shift and go to state 185
    GTEQUAL         shift and go to state 182
    LESS            shift and go to state 183
    LTEQUAL         shift and go to state 187


state 163

    (82) array_slice -> array_location LBRACKET lower_bound . COLON upper_bound RBRACKET

    COLON           shift and go to state 221


state 164

    (79) array_element -> array_location LBRACKET expression_list . RBRACKET

    RBRACKET        shift and go to state 222


state 165

    (28) procedure_statement -> ID COLON procedure_definition .

    DCL             reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    SYN             reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    TYPE            reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    ID              reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    EXIT            reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    RESULT          reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    RETURN          reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    IF              reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    DO              reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    ABS             reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    ASC             reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    NUM             reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    UPPER           reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    LOWER           reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    LENGTH          reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    READ            reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    PRINT           reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    $end            reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    END             reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)


state 166

    (29) procedure_definition -> PROC . LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI
    (30) procedure_definition -> PROC . LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI

    LPAREN          shift and go to state 223


state 167

    (182) parameter_list -> expression .
    (183) parameter_list -> expression . COMMA parameter_list
    (88) boolean_expression -> expression . AND expression
    (89) boolean_expression -> expression . OR expression
    (90) boolean_expression -> expression . EQUAL expression
    (91) boolean_expression -> expression . NOTEQ expression
    (92) boolean_expression -> expression . GREATER expression
    (93) boolean_expression -> expression . GTEQUAL expression
    (94) boolean_expression -> expression . LESS expression
    (95) boolean_expression -> expression . LTEQUAL expression

    RPAREN          reduce using rule 182 (parameter_list -> expression .)
    COMMA           shift and go to state 224
    AND             shift and go to state 184
    OR              shift and go to state 188
    EQUAL           shift and go to state 186
    NOTEQ           shift and go to state 189
    GREATER         shift and go to state 185
    GTEQUAL         shift and go to state 182
    LESS            shift and go to state 183
    LTEQUAL         shift and go to state 187


state 168

    (181) procedure_call -> ID LPAREN RPAREN .

    ARROW           reduce using rule 181 (procedure_call -> ID LPAREN RPAREN .)
    LBRACKET        reduce using rule 181 (procedure_call -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 181 (procedure_call -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 181 (procedure_call -> ID LPAREN RPAREN .)
    MODULO          reduce using rule 181 (procedure_call -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 181 (procedure_call -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 181 (procedure_call -> ID LPAREN RPAREN .)
    CONCAT          reduce using rule 181 (procedure_call -> ID LPAREN RPAREN .)
    IN              reduce using rule 181 (procedure_call -> ID LPAREN RPAREN .)
    AND             reduce using rule 181 (procedure_call -> ID LPAREN RPAREN .)
    OR              reduce using rule 181 (procedure_call -> ID LPAREN RPAREN .)
    EQUAL           reduce using rule 181 (procedure_call -> ID LPAREN RPAREN .)
    NOTEQ           reduce using rule 181 (procedure_call -> ID LPAREN RPAREN .)
    GREATER         reduce using rule 181 (procedure_call -> ID LPAREN RPAREN .)
    GTEQUAL         reduce using rule 181 (procedure_call -> ID LPAREN RPAREN .)
    LESS            reduce using rule 181 (procedure_call -> ID LPAREN RPAREN .)
    LTEQUAL         reduce using rule 181 (procedure_call -> ID LPAREN RPAREN .)
    COLON           reduce using rule 181 (procedure_call -> ID LPAREN RPAREN .)
    SEMI            reduce using rule 181 (procedure_call -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 181 (procedure_call -> ID LPAREN RPAREN .)
    RBRACKET        reduce using rule 181 (procedure_call -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 181 (procedure_call -> ID LPAREN RPAREN .)
    THEN            reduce using rule 181 (procedure_call -> ID LPAREN RPAREN .)
    DOWN            reduce using rule 181 (procedure_call -> ID LPAREN RPAREN .)
    BY              reduce using rule 181 (procedure_call -> ID LPAREN RPAREN .)
    TO              reduce using rule 181 (procedure_call -> ID LPAREN RPAREN .)
    ELSE            reduce using rule 181 (procedure_call -> ID LPAREN RPAREN .)
    ELSIF           reduce using rule 181 (procedure_call -> ID LPAREN RPAREN .)
    FI              reduce using rule 181 (procedure_call -> ID LPAREN RPAREN .)
    WHILE           reduce using rule 181 (procedure_call -> ID LPAREN RPAREN .)
    ASSIGN          reduce using rule 181 (procedure_call -> ID LPAREN RPAREN .)


state 169

    (180) procedure_call -> ID LPAREN parameter_list . RPAREN

    RPAREN          shift and go to state 225


state 170

    (10) synonym_statement -> SYN synonym_list SEMI .

    DCL             reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    SYN             reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    TYPE            reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    ID              reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    EXIT            reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    RESULT          reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    RETURN          reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    IF              reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    DO              reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    ABS             reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    ASC             reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    NUM             reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    UPPER           reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    LOWER           reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    LENGTH          reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    READ            reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    PRINT           reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    $end            reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    END             reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)


state 171

    (12) synonym_list -> synonym_definition COMMA . synonym_list
    (11) synonym_list -> . synonym_definition
    (12) synonym_list -> . synonym_definition COMMA synonym_list
    (13) synonym_definition -> . identifier_list mode ASSIGN expression
    (14) synonym_definition -> . identifier_list ASSIGN expression
    (21) identifier_list -> . identifier
    (22) identifier_list -> . identifier COMMA identifier_list
    (23) identifier -> . ID

    ID              shift and go to state 47

    synonym_definition             shift and go to state 77
    synonym_list                   shift and go to state 226
    identifier_list                shift and go to state 78
    identifier                     shift and go to state 50

state 172

    (14) synonym_definition -> identifier_list ASSIGN . expression
    (84) expression -> . operand0
    (85) expression -> . boolean_expression
    (86) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (88) boolean_expression -> . expression AND expression
    (89) boolean_expression -> . expression OR expression
    (90) boolean_expression -> . expression EQUAL expression
    (91) boolean_expression -> . expression NOTEQ expression
    (92) boolean_expression -> . expression GREATER expression
    (93) boolean_expression -> . expression GTEQUAL expression
    (94) boolean_expression -> . expression LESS expression
    (95) boolean_expression -> . expression LTEQUAL expression
    (96) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (97) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (104) operand1 -> . operand2
    (105) operand1 -> . operand1 operator2 operand2
    (106) operand2 -> . operand3
    (107) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (108) operand3 -> . monadic_operator operand4
    (109) operand3 -> . operand4
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    IF              shift and go to state 110
    MINUS           shift and go to state 100
    NOT             shift and go to state 104
    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ID              shift and go to state 56
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    integer_literal                shift and go to state 115
    empty_literal                  shift and go to state 83
    operand0                       shift and go to state 84
    expression                     shift and go to state 227
    call_action                    shift and go to state 86
    operand1                       shift and go to state 87
    conditional_expression         shift and go to state 88
    value_array_slice              shift and go to state 89
    parenthesized_expression       shift and go to state 91
    boolean_expression             shift and go to state 120
    character_literal              shift and go to state 93
    operand3                       shift and go to state 94
    literal                        shift and go to state 96
    dereferenced_reference         shift and go to state 16
    array_location                 shift and go to state 101
    operand2                       shift and go to state 103
    builtin_call                   shift and go to state 12
    array_element                  shift and go to state 18
    array_slice                    shift and go to state 36
    boolean_literal                shift and go to state 102
    referenced_location            shift and go to state 111
    builtin_name                   shift and go to state 29
    primitive_value                shift and go to state 107
    identifier                     shift and go to state 109
    value_array_element            shift and go to state 98
    operand4                       shift and go to state 112
    string_element                 shift and go to state 32
    character_string_literal       shift and go to state 113
    monadic_operator               shift and go to state 114
    location                       shift and go to state 41
    string_slice                   shift and go to state 45

state 173

    (13) synonym_definition -> identifier_list mode . ASSIGN expression

    ASSIGN          shift and go to state 228


state 174

    (26) newmode_list -> mode_definition COMMA . newmode_list
    (25) newmode_list -> . mode_definition
    (26) newmode_list -> . mode_definition COMMA newmode_list
    (27) mode_definition -> . identifier_list ASSIGN mode
    (21) identifier_list -> . identifier
    (22) identifier_list -> . identifier COMMA identifier_list
    (23) identifier -> . ID

    ID              shift and go to state 47

    identifier_list                shift and go to state 80
    identifier                     shift and go to state 50
    newmode_list                   shift and go to state 229
    mode_definition                shift and go to state 79

state 175

    (27) mode_definition -> identifier_list ASSIGN . mode
    (37) mode -> . mode_name
    (38) mode -> . discrete_mode
    (39) mode -> . reference_mode
    (40) mode -> . composite_mode
    (41) mode_name -> . identifier
    (42) discrete_mode -> . integer_mode
    (43) discrete_mode -> . boolean_mode
    (44) discrete_mode -> . character_mode
    (45) discrete_mode -> . discrete_range_mode
    (55) reference_mode -> . REF mode
    (56) composite_mode -> . string_mode
    (57) composite_mode -> . array_mode
    (23) identifier -> . ID
    (47) integer_mode -> . INT
    (48) boolean_mode -> . BOOL
    (49) character_mode -> . CHAR
    (50) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (51) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (58) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (60) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (46) discrete_mode_name -> . identifier

    REF             shift and go to state 146
    ID              shift and go to state 47
    INT             shift and go to state 131
    BOOL            shift and go to state 130
    CHAR            shift and go to state 129
    CHARS           shift and go to state 147
    ARRAY           shift and go to state 132

    integer_mode                   shift and go to state 138
    reference_mode                 shift and go to state 139
    string_mode                    shift and go to state 137
    identifier                     shift and go to state 140
    composite_mode                 shift and go to state 133
    array_mode                     shift and go to state 141
    discrete_range_mode            shift and go to state 134
    boolean_mode                   shift and go to state 143
    discrete_mode_name             shift and go to state 135
    mode_name                      shift and go to state 136
    character_mode                 shift and go to state 142
    mode                           shift and go to state 230
    discrete_mode                  shift and go to state 145

state 176

    (24) newmode_statement -> TYPE newmode_list SEMI .

    DCL             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    SYN             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    TYPE            reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    ID              reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    EXIT            reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    RESULT          reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    RETURN          reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    IF              reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    DO              reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    ABS             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    ASC             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    NUM             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    UPPER           reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    LOWER           reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    LENGTH          reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    READ            reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    PRINT           reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    $end            reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    END             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)


state 177

    (171) builtin_call -> builtin_name LPAREN RPAREN .

    ARROW           reduce using rule 171 (builtin_call -> builtin_name LPAREN RPAREN .)
    LBRACKET        reduce using rule 171 (builtin_call -> builtin_name LPAREN RPAREN .)
    TIMES           reduce using rule 171 (builtin_call -> builtin_name LPAREN RPAREN .)
    DIVIDE          reduce using rule 171 (builtin_call -> builtin_name LPAREN RPAREN .)
    MODULO          reduce using rule 171 (builtin_call -> builtin_name LPAREN RPAREN .)
    PLUS            reduce using rule 171 (builtin_call -> builtin_name LPAREN RPAREN .)
    MINUS           reduce using rule 171 (builtin_call -> builtin_name LPAREN RPAREN .)
    CONCAT          reduce using rule 171 (builtin_call -> builtin_name LPAREN RPAREN .)
    IN              reduce using rule 171 (builtin_call -> builtin_name LPAREN RPAREN .)
    AND             reduce using rule 171 (builtin_call -> builtin_name LPAREN RPAREN .)
    OR              reduce using rule 171 (builtin_call -> builtin_name LPAREN RPAREN .)
    EQUAL           reduce using rule 171 (builtin_call -> builtin_name LPAREN RPAREN .)
    NOTEQ           reduce using rule 171 (builtin_call -> builtin_name LPAREN RPAREN .)
    GREATER         reduce using rule 171 (builtin_call -> builtin_name LPAREN RPAREN .)
    GTEQUAL         reduce using rule 171 (builtin_call -> builtin_name LPAREN RPAREN .)
    LESS            reduce using rule 171 (builtin_call -> builtin_name LPAREN RPAREN .)
    LTEQUAL         reduce using rule 171 (builtin_call -> builtin_name LPAREN RPAREN .)
    THEN            reduce using rule 171 (builtin_call -> builtin_name LPAREN RPAREN .)
    SEMI            reduce using rule 171 (builtin_call -> builtin_name LPAREN RPAREN .)
    COMMA           reduce using rule 171 (builtin_call -> builtin_name LPAREN RPAREN .)
    RBRACKET        reduce using rule 171 (builtin_call -> builtin_name LPAREN RPAREN .)
    COLON           reduce using rule 171 (builtin_call -> builtin_name LPAREN RPAREN .)
    RPAREN          reduce using rule 171 (builtin_call -> builtin_name LPAREN RPAREN .)
    DOWN            reduce using rule 171 (builtin_call -> builtin_name LPAREN RPAREN .)
    BY              reduce using rule 171 (builtin_call -> builtin_name LPAREN RPAREN .)
    TO              reduce using rule 171 (builtin_call -> builtin_name LPAREN RPAREN .)
    ELSE            reduce using rule 171 (builtin_call -> builtin_name LPAREN RPAREN .)
    ELSIF           reduce using rule 171 (builtin_call -> builtin_name LPAREN RPAREN .)
    FI              reduce using rule 171 (builtin_call -> builtin_name LPAREN RPAREN .)
    WHILE           reduce using rule 171 (builtin_call -> builtin_name LPAREN RPAREN .)
    ASSIGN          reduce using rule 171 (builtin_call -> builtin_name LPAREN RPAREN .)


state 178

    (170) builtin_call -> builtin_name LPAREN parameter_list . RPAREN

    RPAREN          shift and go to state 231


state 179

    (103) operand0 -> operand0 operator1 . operand1
    (104) operand1 -> . operand2
    (105) operand1 -> . operand1 operator2 operand2
    (106) operand2 -> . operand3
    (107) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (108) operand3 -> . monadic_operator operand4
    (109) operand3 -> . operand4
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    MINUS           shift and go to state 100
    NOT             shift and go to state 104
    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ID              shift and go to state 56
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    call_action                    shift and go to state 86
    empty_literal                  shift and go to state 83
    referenced_location            shift and go to state 111
    operand1                       shift and go to state 232
    value_array_slice              shift and go to state 89
    monadic_operator               shift and go to state 114
    parenthesized_expression       shift and go to state 91
    value_array_element            shift and go to state 98
    primitive_value                shift and go to state 107
    integer_literal                shift and go to state 115
    character_literal              shift and go to state 93
    operand3                       shift and go to state 94
    builtin_name                   shift and go to state 29
    literal                        shift and go to state 96
    operand4                       shift and go to state 112
    builtin_call                   shift and go to state 12
    string_element                 shift and go to state 32
    array_slice                    shift and go to state 36
    dereferenced_reference         shift and go to state 16
    array_location                 shift and go to state 101
    character_string_literal       shift and go to state 113
    boolean_literal                shift and go to state 102
    operand2                       shift and go to state 103
    location                       shift and go to state 41
    array_element                  shift and go to state 18
    string_slice                   shift and go to state 45
    identifier                     shift and go to state 109

state 180

    (119) operator1 -> membership_operator .

    MINUS           reduce using rule 119 (operator1 -> membership_operator .)
    NOT             reduce using rule 119 (operator1 -> membership_operator .)
    ARROW           reduce using rule 119 (operator1 -> membership_operator .)
    LPAREN          reduce using rule 119 (operator1 -> membership_operator .)
    ID              reduce using rule 119 (operator1 -> membership_operator .)
    ICONST          reduce using rule 119 (operator1 -> membership_operator .)
    TRUE            reduce using rule 119 (operator1 -> membership_operator .)
    FALSE           reduce using rule 119 (operator1 -> membership_operator .)
    CCONST          reduce using rule 119 (operator1 -> membership_operator .)
    NULL            reduce using rule 119 (operator1 -> membership_operator .)
    SCONST          reduce using rule 119 (operator1 -> membership_operator .)
    ABS             reduce using rule 119 (operator1 -> membership_operator .)
    ASC             reduce using rule 119 (operator1 -> membership_operator .)
    NUM             reduce using rule 119 (operator1 -> membership_operator .)
    UPPER           reduce using rule 119 (operator1 -> membership_operator .)
    LOWER           reduce using rule 119 (operator1 -> membership_operator .)
    LENGTH          reduce using rule 119 (operator1 -> membership_operator .)
    READ            reduce using rule 119 (operator1 -> membership_operator .)
    PRINT           reduce using rule 119 (operator1 -> membership_operator .)


state 181

    (125) membership_operator -> IN .

    MINUS           reduce using rule 125 (membership_operator -> IN .)
    NOT             reduce using rule 125 (membership_operator -> IN .)
    ARROW           reduce using rule 125 (membership_operator -> IN .)
    LPAREN          reduce using rule 125 (membership_operator -> IN .)
    ID              reduce using rule 125 (membership_operator -> IN .)
    ICONST          reduce using rule 125 (membership_operator -> IN .)
    TRUE            reduce using rule 125 (membership_operator -> IN .)
    FALSE           reduce using rule 125 (membership_operator -> IN .)
    CCONST          reduce using rule 125 (membership_operator -> IN .)
    NULL            reduce using rule 125 (membership_operator -> IN .)
    SCONST          reduce using rule 125 (membership_operator -> IN .)
    ABS             reduce using rule 125 (membership_operator -> IN .)
    ASC             reduce using rule 125 (membership_operator -> IN .)
    NUM             reduce using rule 125 (membership_operator -> IN .)
    UPPER           reduce using rule 125 (membership_operator -> IN .)
    LOWER           reduce using rule 125 (membership_operator -> IN .)
    LENGTH          reduce using rule 125 (membership_operator -> IN .)
    READ            reduce using rule 125 (membership_operator -> IN .)
    PRINT           reduce using rule 125 (membership_operator -> IN .)


state 182

    (93) boolean_expression -> expression GTEQUAL . expression
    (84) expression -> . operand0
    (85) expression -> . boolean_expression
    (86) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (88) boolean_expression -> . expression AND expression
    (89) boolean_expression -> . expression OR expression
    (90) boolean_expression -> . expression EQUAL expression
    (91) boolean_expression -> . expression NOTEQ expression
    (92) boolean_expression -> . expression GREATER expression
    (93) boolean_expression -> . expression GTEQUAL expression
    (94) boolean_expression -> . expression LESS expression
    (95) boolean_expression -> . expression LTEQUAL expression
    (96) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (97) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (104) operand1 -> . operand2
    (105) operand1 -> . operand1 operator2 operand2
    (106) operand2 -> . operand3
    (107) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (108) operand3 -> . monadic_operator operand4
    (109) operand3 -> . operand4
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    IF              shift and go to state 110
    MINUS           shift and go to state 100
    NOT             shift and go to state 104
    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ID              shift and go to state 56
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    empty_literal                  shift and go to state 83
    operand0                       shift and go to state 84
    expression                     shift and go to state 233
    call_action                    shift and go to state 86
    operand1                       shift and go to state 87
    value_array_slice              shift and go to state 89
    monadic_operator               shift and go to state 114
    parenthesized_expression       shift and go to state 91
    boolean_expression             shift and go to state 120
    character_literal              shift and go to state 93
    operand3                       shift and go to state 94
    literal                        shift and go to state 96
    builtin_call                   shift and go to state 12
    array_location                 shift and go to state 101
    operand2                       shift and go to state 103
    array_element                  shift and go to state 18
    array_slice                    shift and go to state 36
    conditional_expression         shift and go to state 88
    boolean_literal                shift and go to state 102
    builtin_name                   shift and go to state 29
    primitive_value                shift and go to state 107
    value_array_element            shift and go to state 98
    referenced_location            shift and go to state 111
    operand4                       shift and go to state 112
    dereferenced_reference         shift and go to state 16
    string_element                 shift and go to state 32
    character_string_literal       shift and go to state 113
    identifier                     shift and go to state 109
    location                       shift and go to state 41
    integer_literal                shift and go to state 115
    string_slice                   shift and go to state 45

state 183

    (94) boolean_expression -> expression LESS . expression
    (84) expression -> . operand0
    (85) expression -> . boolean_expression
    (86) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (88) boolean_expression -> . expression AND expression
    (89) boolean_expression -> . expression OR expression
    (90) boolean_expression -> . expression EQUAL expression
    (91) boolean_expression -> . expression NOTEQ expression
    (92) boolean_expression -> . expression GREATER expression
    (93) boolean_expression -> . expression GTEQUAL expression
    (94) boolean_expression -> . expression LESS expression
    (95) boolean_expression -> . expression LTEQUAL expression
    (96) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (97) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (104) operand1 -> . operand2
    (105) operand1 -> . operand1 operator2 operand2
    (106) operand2 -> . operand3
    (107) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (108) operand3 -> . monadic_operator operand4
    (109) operand3 -> . operand4
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    IF              shift and go to state 110
    MINUS           shift and go to state 100
    NOT             shift and go to state 104
    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ID              shift and go to state 56
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    empty_literal                  shift and go to state 83
    operand0                       shift and go to state 84
    expression                     shift and go to state 234
    call_action                    shift and go to state 86
    operand1                       shift and go to state 87
    value_array_slice              shift and go to state 89
    monadic_operator               shift and go to state 114
    parenthesized_expression       shift and go to state 91
    boolean_expression             shift and go to state 120
    character_literal              shift and go to state 93
    operand3                       shift and go to state 94
    literal                        shift and go to state 96
    builtin_call                   shift and go to state 12
    array_location                 shift and go to state 101
    operand2                       shift and go to state 103
    array_element                  shift and go to state 18
    array_slice                    shift and go to state 36
    conditional_expression         shift and go to state 88
    boolean_literal                shift and go to state 102
    builtin_name                   shift and go to state 29
    primitive_value                shift and go to state 107
    value_array_element            shift and go to state 98
    referenced_location            shift and go to state 111
    operand4                       shift and go to state 112
    dereferenced_reference         shift and go to state 16
    string_element                 shift and go to state 32
    character_string_literal       shift and go to state 113
    identifier                     shift and go to state 109
    location                       shift and go to state 41
    integer_literal                shift and go to state 115
    string_slice                   shift and go to state 45

state 184

    (88) boolean_expression -> expression AND . expression
    (84) expression -> . operand0
    (85) expression -> . boolean_expression
    (86) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (88) boolean_expression -> . expression AND expression
    (89) boolean_expression -> . expression OR expression
    (90) boolean_expression -> . expression EQUAL expression
    (91) boolean_expression -> . expression NOTEQ expression
    (92) boolean_expression -> . expression GREATER expression
    (93) boolean_expression -> . expression GTEQUAL expression
    (94) boolean_expression -> . expression LESS expression
    (95) boolean_expression -> . expression LTEQUAL expression
    (96) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (97) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (104) operand1 -> . operand2
    (105) operand1 -> . operand1 operator2 operand2
    (106) operand2 -> . operand3
    (107) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (108) operand3 -> . monadic_operator operand4
    (109) operand3 -> . operand4
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    IF              shift and go to state 110
    MINUS           shift and go to state 100
    NOT             shift and go to state 104
    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ID              shift and go to state 56
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    empty_literal                  shift and go to state 83
    operand0                       shift and go to state 84
    expression                     shift and go to state 235
    call_action                    shift and go to state 86
    operand1                       shift and go to state 87
    value_array_slice              shift and go to state 89
    monadic_operator               shift and go to state 114
    parenthesized_expression       shift and go to state 91
    boolean_expression             shift and go to state 120
    character_literal              shift and go to state 93
    operand3                       shift and go to state 94
    literal                        shift and go to state 96
    builtin_call                   shift and go to state 12
    array_location                 shift and go to state 101
    operand2                       shift and go to state 103
    array_element                  shift and go to state 18
    array_slice                    shift and go to state 36
    conditional_expression         shift and go to state 88
    boolean_literal                shift and go to state 102
    builtin_name                   shift and go to state 29
    primitive_value                shift and go to state 107
    value_array_element            shift and go to state 98
    referenced_location            shift and go to state 111
    operand4                       shift and go to state 112
    dereferenced_reference         shift and go to state 16
    string_element                 shift and go to state 32
    character_string_literal       shift and go to state 113
    identifier                     shift and go to state 109
    location                       shift and go to state 41
    integer_literal                shift and go to state 115
    string_slice                   shift and go to state 45

state 185

    (92) boolean_expression -> expression GREATER . expression
    (84) expression -> . operand0
    (85) expression -> . boolean_expression
    (86) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (88) boolean_expression -> . expression AND expression
    (89) boolean_expression -> . expression OR expression
    (90) boolean_expression -> . expression EQUAL expression
    (91) boolean_expression -> . expression NOTEQ expression
    (92) boolean_expression -> . expression GREATER expression
    (93) boolean_expression -> . expression GTEQUAL expression
    (94) boolean_expression -> . expression LESS expression
    (95) boolean_expression -> . expression LTEQUAL expression
    (96) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (97) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (104) operand1 -> . operand2
    (105) operand1 -> . operand1 operator2 operand2
    (106) operand2 -> . operand3
    (107) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (108) operand3 -> . monadic_operator operand4
    (109) operand3 -> . operand4
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    IF              shift and go to state 110
    MINUS           shift and go to state 100
    NOT             shift and go to state 104
    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ID              shift and go to state 56
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    empty_literal                  shift and go to state 83
    operand0                       shift and go to state 84
    expression                     shift and go to state 236
    call_action                    shift and go to state 86
    operand1                       shift and go to state 87
    value_array_slice              shift and go to state 89
    monadic_operator               shift and go to state 114
    parenthesized_expression       shift and go to state 91
    boolean_expression             shift and go to state 120
    character_literal              shift and go to state 93
    operand3                       shift and go to state 94
    literal                        shift and go to state 96
    builtin_call                   shift and go to state 12
    array_location                 shift and go to state 101
    operand2                       shift and go to state 103
    array_element                  shift and go to state 18
    array_slice                    shift and go to state 36
    conditional_expression         shift and go to state 88
    boolean_literal                shift and go to state 102
    builtin_name                   shift and go to state 29
    primitive_value                shift and go to state 107
    value_array_element            shift and go to state 98
    referenced_location            shift and go to state 111
    operand4                       shift and go to state 112
    dereferenced_reference         shift and go to state 16
    string_element                 shift and go to state 32
    character_string_literal       shift and go to state 113
    identifier                     shift and go to state 109
    location                       shift and go to state 41
    integer_literal                shift and go to state 115
    string_slice                   shift and go to state 45

state 186

    (90) boolean_expression -> expression EQUAL . expression
    (84) expression -> . operand0
    (85) expression -> . boolean_expression
    (86) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (88) boolean_expression -> . expression AND expression
    (89) boolean_expression -> . expression OR expression
    (90) boolean_expression -> . expression EQUAL expression
    (91) boolean_expression -> . expression NOTEQ expression
    (92) boolean_expression -> . expression GREATER expression
    (93) boolean_expression -> . expression GTEQUAL expression
    (94) boolean_expression -> . expression LESS expression
    (95) boolean_expression -> . expression LTEQUAL expression
    (96) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (97) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (104) operand1 -> . operand2
    (105) operand1 -> . operand1 operator2 operand2
    (106) operand2 -> . operand3
    (107) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (108) operand3 -> . monadic_operator operand4
    (109) operand3 -> . operand4
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    IF              shift and go to state 110
    MINUS           shift and go to state 100
    NOT             shift and go to state 104
    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ID              shift and go to state 56
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    empty_literal                  shift and go to state 83
    operand0                       shift and go to state 84
    expression                     shift and go to state 237
    call_action                    shift and go to state 86
    operand1                       shift and go to state 87
    value_array_slice              shift and go to state 89
    monadic_operator               shift and go to state 114
    parenthesized_expression       shift and go to state 91
    boolean_expression             shift and go to state 120
    character_literal              shift and go to state 93
    operand3                       shift and go to state 94
    literal                        shift and go to state 96
    builtin_call                   shift and go to state 12
    array_location                 shift and go to state 101
    operand2                       shift and go to state 103
    array_element                  shift and go to state 18
    array_slice                    shift and go to state 36
    conditional_expression         shift and go to state 88
    boolean_literal                shift and go to state 102
    builtin_name                   shift and go to state 29
    primitive_value                shift and go to state 107
    value_array_element            shift and go to state 98
    referenced_location            shift and go to state 111
    operand4                       shift and go to state 112
    dereferenced_reference         shift and go to state 16
    string_element                 shift and go to state 32
    character_string_literal       shift and go to state 113
    identifier                     shift and go to state 109
    location                       shift and go to state 41
    integer_literal                shift and go to state 115
    string_slice                   shift and go to state 45

state 187

    (95) boolean_expression -> expression LTEQUAL . expression
    (84) expression -> . operand0
    (85) expression -> . boolean_expression
    (86) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (88) boolean_expression -> . expression AND expression
    (89) boolean_expression -> . expression OR expression
    (90) boolean_expression -> . expression EQUAL expression
    (91) boolean_expression -> . expression NOTEQ expression
    (92) boolean_expression -> . expression GREATER expression
    (93) boolean_expression -> . expression GTEQUAL expression
    (94) boolean_expression -> . expression LESS expression
    (95) boolean_expression -> . expression LTEQUAL expression
    (96) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (97) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (104) operand1 -> . operand2
    (105) operand1 -> . operand1 operator2 operand2
    (106) operand2 -> . operand3
    (107) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (108) operand3 -> . monadic_operator operand4
    (109) operand3 -> . operand4
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    IF              shift and go to state 110
    MINUS           shift and go to state 100
    NOT             shift and go to state 104
    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ID              shift and go to state 56
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    empty_literal                  shift and go to state 83
    operand0                       shift and go to state 84
    expression                     shift and go to state 238
    call_action                    shift and go to state 86
    operand1                       shift and go to state 87
    value_array_slice              shift and go to state 89
    monadic_operator               shift and go to state 114
    parenthesized_expression       shift and go to state 91
    boolean_expression             shift and go to state 120
    character_literal              shift and go to state 93
    operand3                       shift and go to state 94
    literal                        shift and go to state 96
    builtin_call                   shift and go to state 12
    array_location                 shift and go to state 101
    operand2                       shift and go to state 103
    array_element                  shift and go to state 18
    array_slice                    shift and go to state 36
    conditional_expression         shift and go to state 88
    boolean_literal                shift and go to state 102
    builtin_name                   shift and go to state 29
    primitive_value                shift and go to state 107
    value_array_element            shift and go to state 98
    referenced_location            shift and go to state 111
    operand4                       shift and go to state 112
    dereferenced_reference         shift and go to state 16
    string_element                 shift and go to state 32
    character_string_literal       shift and go to state 113
    identifier                     shift and go to state 109
    location                       shift and go to state 41
    integer_literal                shift and go to state 115
    string_slice                   shift and go to state 45

state 188

    (89) boolean_expression -> expression OR . expression
    (84) expression -> . operand0
    (85) expression -> . boolean_expression
    (86) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (88) boolean_expression -> . expression AND expression
    (89) boolean_expression -> . expression OR expression
    (90) boolean_expression -> . expression EQUAL expression
    (91) boolean_expression -> . expression NOTEQ expression
    (92) boolean_expression -> . expression GREATER expression
    (93) boolean_expression -> . expression GTEQUAL expression
    (94) boolean_expression -> . expression LESS expression
    (95) boolean_expression -> . expression LTEQUAL expression
    (96) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (97) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (104) operand1 -> . operand2
    (105) operand1 -> . operand1 operator2 operand2
    (106) operand2 -> . operand3
    (107) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (108) operand3 -> . monadic_operator operand4
    (109) operand3 -> . operand4
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    IF              shift and go to state 110
    MINUS           shift and go to state 100
    NOT             shift and go to state 104
    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ID              shift and go to state 56
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    empty_literal                  shift and go to state 83
    operand0                       shift and go to state 84
    expression                     shift and go to state 239
    call_action                    shift and go to state 86
    operand1                       shift and go to state 87
    value_array_slice              shift and go to state 89
    monadic_operator               shift and go to state 114
    parenthesized_expression       shift and go to state 91
    boolean_expression             shift and go to state 120
    character_literal              shift and go to state 93
    operand3                       shift and go to state 94
    literal                        shift and go to state 96
    builtin_call                   shift and go to state 12
    array_location                 shift and go to state 101
    operand2                       shift and go to state 103
    array_element                  shift and go to state 18
    array_slice                    shift and go to state 36
    conditional_expression         shift and go to state 88
    boolean_literal                shift and go to state 102
    builtin_name                   shift and go to state 29
    primitive_value                shift and go to state 107
    value_array_element            shift and go to state 98
    referenced_location            shift and go to state 111
    operand4                       shift and go to state 112
    dereferenced_reference         shift and go to state 16
    string_element                 shift and go to state 32
    character_string_literal       shift and go to state 113
    identifier                     shift and go to state 109
    location                       shift and go to state 41
    integer_literal                shift and go to state 115
    string_slice                   shift and go to state 45

state 189

    (91) boolean_expression -> expression NOTEQ . expression
    (84) expression -> . operand0
    (85) expression -> . boolean_expression
    (86) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (88) boolean_expression -> . expression AND expression
    (89) boolean_expression -> . expression OR expression
    (90) boolean_expression -> . expression EQUAL expression
    (91) boolean_expression -> . expression NOTEQ expression
    (92) boolean_expression -> . expression GREATER expression
    (93) boolean_expression -> . expression GTEQUAL expression
    (94) boolean_expression -> . expression LESS expression
    (95) boolean_expression -> . expression LTEQUAL expression
    (96) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (97) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (104) operand1 -> . operand2
    (105) operand1 -> . operand1 operator2 operand2
    (106) operand2 -> . operand3
    (107) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (108) operand3 -> . monadic_operator operand4
    (109) operand3 -> . operand4
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    IF              shift and go to state 110
    MINUS           shift and go to state 100
    NOT             shift and go to state 104
    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ID              shift and go to state 56
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    empty_literal                  shift and go to state 83
    operand0                       shift and go to state 84
    expression                     shift and go to state 240
    call_action                    shift and go to state 86
    operand1                       shift and go to state 87
    value_array_slice              shift and go to state 89
    monadic_operator               shift and go to state 114
    parenthesized_expression       shift and go to state 91
    boolean_expression             shift and go to state 120
    character_literal              shift and go to state 93
    operand3                       shift and go to state 94
    literal                        shift and go to state 96
    builtin_call                   shift and go to state 12
    array_location                 shift and go to state 101
    operand2                       shift and go to state 103
    array_element                  shift and go to state 18
    array_slice                    shift and go to state 36
    conditional_expression         shift and go to state 88
    boolean_literal                shift and go to state 102
    builtin_name                   shift and go to state 29
    primitive_value                shift and go to state 107
    value_array_element            shift and go to state 98
    referenced_location            shift and go to state 111
    operand4                       shift and go to state 112
    dereferenced_reference         shift and go to state 16
    string_element                 shift and go to state 32
    character_string_literal       shift and go to state 113
    identifier                     shift and go to state 109
    location                       shift and go to state 41
    integer_literal                shift and go to state 115
    string_slice                   shift and go to state 45

state 190

    (121) operator2 -> string_concatenation_operator .

    MINUS           reduce using rule 121 (operator2 -> string_concatenation_operator .)
    NOT             reduce using rule 121 (operator2 -> string_concatenation_operator .)
    ARROW           reduce using rule 121 (operator2 -> string_concatenation_operator .)
    LPAREN          reduce using rule 121 (operator2 -> string_concatenation_operator .)
    ID              reduce using rule 121 (operator2 -> string_concatenation_operator .)
    ICONST          reduce using rule 121 (operator2 -> string_concatenation_operator .)
    TRUE            reduce using rule 121 (operator2 -> string_concatenation_operator .)
    FALSE           reduce using rule 121 (operator2 -> string_concatenation_operator .)
    CCONST          reduce using rule 121 (operator2 -> string_concatenation_operator .)
    NULL            reduce using rule 121 (operator2 -> string_concatenation_operator .)
    SCONST          reduce using rule 121 (operator2 -> string_concatenation_operator .)
    ABS             reduce using rule 121 (operator2 -> string_concatenation_operator .)
    ASC             reduce using rule 121 (operator2 -> string_concatenation_operator .)
    NUM             reduce using rule 121 (operator2 -> string_concatenation_operator .)
    UPPER           reduce using rule 121 (operator2 -> string_concatenation_operator .)
    LOWER           reduce using rule 121 (operator2 -> string_concatenation_operator .)
    LENGTH          reduce using rule 121 (operator2 -> string_concatenation_operator .)
    READ            reduce using rule 121 (operator2 -> string_concatenation_operator .)
    PRINT           reduce using rule 121 (operator2 -> string_concatenation_operator .)


state 191

    (105) operand1 -> operand1 operator2 . operand2
    (106) operand2 -> . operand3
    (107) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (108) operand3 -> . monadic_operator operand4
    (109) operand3 -> . operand4
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    MINUS           shift and go to state 100
    NOT             shift and go to state 104
    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ID              shift and go to state 56
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    call_action                    shift and go to state 86
    empty_literal                  shift and go to state 83
    boolean_literal                shift and go to state 102
    referenced_location            shift and go to state 111
    value_array_slice              shift and go to state 89
    parenthesized_expression       shift and go to state 91
    value_array_element            shift and go to state 98
    primitive_value                shift and go to state 107
    integer_literal                shift and go to state 115
    character_literal              shift and go to state 93
    operand3                       shift and go to state 94
    builtin_name                   shift and go to state 29
    identifier                     shift and go to state 109
    literal                        shift and go to state 96
    operand4                       shift and go to state 112
    builtin_call                   shift and go to state 12
    string_element                 shift and go to state 32
    string_slice                   shift and go to state 45
    monadic_operator               shift and go to state 114
    array_location                 shift and go to state 101
    character_string_literal       shift and go to state 113
    operand2                       shift and go to state 241
    location                       shift and go to state 41
    array_element                  shift and go to state 18
    array_slice                    shift and go to state 36
    dereferenced_reference         shift and go to state 16

state 192

    (120) operator2 -> arithmetic_additive_operator .

    MINUS           reduce using rule 120 (operator2 -> arithmetic_additive_operator .)
    NOT             reduce using rule 120 (operator2 -> arithmetic_additive_operator .)
    ARROW           reduce using rule 120 (operator2 -> arithmetic_additive_operator .)
    LPAREN          reduce using rule 120 (operator2 -> arithmetic_additive_operator .)
    ID              reduce using rule 120 (operator2 -> arithmetic_additive_operator .)
    ICONST          reduce using rule 120 (operator2 -> arithmetic_additive_operator .)
    TRUE            reduce using rule 120 (operator2 -> arithmetic_additive_operator .)
    FALSE           reduce using rule 120 (operator2 -> arithmetic_additive_operator .)
    CCONST          reduce using rule 120 (operator2 -> arithmetic_additive_operator .)
    NULL            reduce using rule 120 (operator2 -> arithmetic_additive_operator .)
    SCONST          reduce using rule 120 (operator2 -> arithmetic_additive_operator .)
    ABS             reduce using rule 120 (operator2 -> arithmetic_additive_operator .)
    ASC             reduce using rule 120 (operator2 -> arithmetic_additive_operator .)
    NUM             reduce using rule 120 (operator2 -> arithmetic_additive_operator .)
    UPPER           reduce using rule 120 (operator2 -> arithmetic_additive_operator .)
    LOWER           reduce using rule 120 (operator2 -> arithmetic_additive_operator .)
    LENGTH          reduce using rule 120 (operator2 -> arithmetic_additive_operator .)
    READ            reduce using rule 120 (operator2 -> arithmetic_additive_operator .)
    PRINT           reduce using rule 120 (operator2 -> arithmetic_additive_operator .)


state 193

    (161) then_clause -> THEN . action_statement_list
    (165) action_statement_list -> . action_statement action_statement_nullable
    (143) action_statement -> . identifier COLON action SEMI
    (144) action_statement -> . action SEMI
    (23) identifier -> . ID
    (145) action -> . bracketed_action
    (146) action -> . assignment_action
    (147) action -> . call_action
    (148) action -> . exit_action
    (149) action -> . result_action
    (150) action -> . return_action
    (151) bracketed_action -> . if_action
    (152) bracketed_action -> . do_action
    (153) assignment_action -> . array_location assigning_operator expression
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (184) exit_action -> . EXIT identifier
    (188) result_action -> . RESULT expression
    (185) return_action -> . RETURN result
    (159) if_action -> . IF boolean_expression then_clause else_clause FI
    (160) if_action -> . IF boolean_expression then_clause FI
    (189) do_action -> . DO control_part SEMI action_statement_nullable OD
    (190) do_action -> . DO action_statement_nullable OD
    (83) array_location -> . location
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    ID              shift and go to state 56
    EXIT            shift and go to state 42
    RESULT          shift and go to state 44
    RETURN          shift and go to state 34
    IF              shift and go to state 31
    DO              shift and go to state 10
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    call_action                    shift and go to state 2
    assignment_action              shift and go to state 4
    action_statement_list          shift and go to state 242
    action_statement               shift and go to state 243
    return_action                  shift and go to state 43
    if_action                      shift and go to state 28
    builtin_name                   shift and go to state 29
    bracketed_action               shift and go to state 30
    result_action                  shift and go to state 11
    action                         shift and go to state 33
    string_element                 shift and go to state 32
    string_slice                   shift and go to state 45
    identifier                     shift and go to state 35
    array_location                 shift and go to state 13
    dereferenced_reference         shift and go to state 16
    array_slice                    shift and go to state 36
    do_action                      shift and go to state 40
    builtin_call                   shift and go to state 12
    exit_action                    shift and go to state 25
    array_element                  shift and go to state 18
    location                       shift and go to state 41

state 194

    (159) if_action -> IF boolean_expression then_clause . else_clause FI
    (160) if_action -> IF boolean_expression then_clause . FI
    (162) else_clause -> . ELSE action_statement_list
    (163) else_clause -> . ELSIF boolean_expression then_clause else_clause
    (164) else_clause -> . ELSIF boolean_expression then_clause

    FI              shift and go to state 244
    ELSE            shift and go to state 246
    ELSIF           shift and go to state 245

    else_clause                    shift and go to state 247

state 195

    (118) referenced_location -> ARROW array_location .
    (73) dereferenced_reference -> array_location . ARROW
    (79) array_element -> array_location . LBRACKET expression_list RBRACKET
    (82) array_slice -> array_location . LBRACKET lower_bound COLON upper_bound RBRACKET

    TIMES           reduce using rule 118 (referenced_location -> ARROW array_location .)
    DIVIDE          reduce using rule 118 (referenced_location -> ARROW array_location .)
    MODULO          reduce using rule 118 (referenced_location -> ARROW array_location .)
    PLUS            reduce using rule 118 (referenced_location -> ARROW array_location .)
    MINUS           reduce using rule 118 (referenced_location -> ARROW array_location .)
    CONCAT          reduce using rule 118 (referenced_location -> ARROW array_location .)
    IN              reduce using rule 118 (referenced_location -> ARROW array_location .)
    AND             reduce using rule 118 (referenced_location -> ARROW array_location .)
    OR              reduce using rule 118 (referenced_location -> ARROW array_location .)
    EQUAL           reduce using rule 118 (referenced_location -> ARROW array_location .)
    NOTEQ           reduce using rule 118 (referenced_location -> ARROW array_location .)
    GREATER         reduce using rule 118 (referenced_location -> ARROW array_location .)
    GTEQUAL         reduce using rule 118 (referenced_location -> ARROW array_location .)
    LESS            reduce using rule 118 (referenced_location -> ARROW array_location .)
    LTEQUAL         reduce using rule 118 (referenced_location -> ARROW array_location .)
    SEMI            reduce using rule 118 (referenced_location -> ARROW array_location .)
    DOWN            reduce using rule 118 (referenced_location -> ARROW array_location .)
    BY              reduce using rule 118 (referenced_location -> ARROW array_location .)
    TO              reduce using rule 118 (referenced_location -> ARROW array_location .)
    COMMA           reduce using rule 118 (referenced_location -> ARROW array_location .)
    COLON           reduce using rule 118 (referenced_location -> ARROW array_location .)
    RPAREN          reduce using rule 118 (referenced_location -> ARROW array_location .)
    RBRACKET        reduce using rule 118 (referenced_location -> ARROW array_location .)
    ELSE            reduce using rule 118 (referenced_location -> ARROW array_location .)
    ELSIF           reduce using rule 118 (referenced_location -> ARROW array_location .)
    THEN            reduce using rule 118 (referenced_location -> ARROW array_location .)
    FI              reduce using rule 118 (referenced_location -> ARROW array_location .)
    WHILE           reduce using rule 118 (referenced_location -> ARROW array_location .)
    ARROW           shift and go to state 64
    LBRACKET        shift and go to state 68


state 196

    (107) operand2 -> operand2 arithmetic_multiplicative_operator . operand3
    (108) operand3 -> . monadic_operator operand4
    (109) operand3 -> . operand4
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    MINUS           shift and go to state 100
    NOT             shift and go to state 104
    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ID              shift and go to state 56
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    call_action                    shift and go to state 86
    empty_literal                  shift and go to state 83
    boolean_literal                shift and go to state 102
    referenced_location            shift and go to state 111
    value_array_slice              shift and go to state 89
    parenthesized_expression       shift and go to state 91
    value_array_element            shift and go to state 98
    primitive_value                shift and go to state 107
    integer_literal                shift and go to state 115
    character_literal              shift and go to state 93
    operand3                       shift and go to state 248
    builtin_name                   shift and go to state 29
    identifier                     shift and go to state 109
    literal                        shift and go to state 96
    operand4                       shift and go to state 112
    builtin_call                   shift and go to state 12
    string_element                 shift and go to state 32
    string_slice                   shift and go to state 45
    monadic_operator               shift and go to state 114
    array_location                 shift and go to state 101
    character_string_literal       shift and go to state 113
    location                       shift and go to state 41
    array_element                  shift and go to state 18
    array_slice                    shift and go to state 36
    dereferenced_reference         shift and go to state 16

state 197

    (135) value_array_element -> primitive_value LBRACKET . expression_list RBRACKET
    (136) value_array_slice -> primitive_value LBRACKET . expression COLON expression RBRACKET
    (80) expression_list -> . expression
    (81) expression_list -> . expression COMMA expression_list
    (84) expression -> . operand0
    (85) expression -> . boolean_expression
    (86) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (88) boolean_expression -> . expression AND expression
    (89) boolean_expression -> . expression OR expression
    (90) boolean_expression -> . expression EQUAL expression
    (91) boolean_expression -> . expression NOTEQ expression
    (92) boolean_expression -> . expression GREATER expression
    (93) boolean_expression -> . expression GTEQUAL expression
    (94) boolean_expression -> . expression LESS expression
    (95) boolean_expression -> . expression LTEQUAL expression
    (96) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (97) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (104) operand1 -> . operand2
    (105) operand1 -> . operand1 operator2 operand2
    (106) operand2 -> . operand3
    (107) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (108) operand3 -> . monadic_operator operand4
    (109) operand3 -> . operand4
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    IF              shift and go to state 110
    MINUS           shift and go to state 100
    NOT             shift and go to state 104
    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ID              shift and go to state 56
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    integer_literal                shift and go to state 115
    empty_literal                  shift and go to state 83
    operand0                       shift and go to state 84
    expression                     shift and go to state 249
    call_action                    shift and go to state 86
    operand1                       shift and go to state 87
    value_array_slice              shift and go to state 89
    parenthesized_expression       shift and go to state 91
    boolean_expression             shift and go to state 120
    character_literal              shift and go to state 93
    operand3                       shift and go to state 94
    literal                        shift and go to state 96
    value_array_element            shift and go to state 98
    array_location                 shift and go to state 101
    operand2                       shift and go to state 103
    builtin_call                   shift and go to state 12
    array_element                  shift and go to state 18
    array_slice                    shift and go to state 36
    conditional_expression         shift and go to state 88
    boolean_literal                shift and go to state 102
    builtin_name                   shift and go to state 29
    primitive_value                shift and go to state 107
    identifier                     shift and go to state 109
    referenced_location            shift and go to state 111
    expression_list                shift and go to state 250
    operand4                       shift and go to state 112
    dereferenced_reference         shift and go to state 16
    string_element                 shift and go to state 32
    character_string_literal       shift and go to state 113
    monadic_operator               shift and go to state 114
    location                       shift and go to state 41
    string_slice                   shift and go to state 45

state 198

    (87) parenthesized_expression -> LPAREN expression . RPAREN
    (88) boolean_expression -> expression . AND expression
    (89) boolean_expression -> expression . OR expression
    (90) boolean_expression -> expression . EQUAL expression
    (91) boolean_expression -> expression . NOTEQ expression
    (92) boolean_expression -> expression . GREATER expression
    (93) boolean_expression -> expression . GTEQUAL expression
    (94) boolean_expression -> expression . LESS expression
    (95) boolean_expression -> expression . LTEQUAL expression

    RPAREN          shift and go to state 251
    AND             shift and go to state 184
    OR              shift and go to state 188
    EQUAL           shift and go to state 186
    NOTEQ           shift and go to state 189
    GREATER         shift and go to state 185
    GTEQUAL         shift and go to state 182
    LESS            shift and go to state 183
    LTEQUAL         shift and go to state 187


state 199

    (96) conditional_expression -> IF boolean_expression . then_expression else_expression FI
    (97) conditional_expression -> IF boolean_expression . then_expression elsif_expression else_expression FI
    (85) expression -> boolean_expression .
    (98) then_expression -> . THEN expression

    AND             reduce using rule 85 (expression -> boolean_expression .)
    OR              reduce using rule 85 (expression -> boolean_expression .)
    EQUAL           reduce using rule 85 (expression -> boolean_expression .)
    NOTEQ           reduce using rule 85 (expression -> boolean_expression .)
    GREATER         reduce using rule 85 (expression -> boolean_expression .)
    GTEQUAL         reduce using rule 85 (expression -> boolean_expression .)
    LESS            reduce using rule 85 (expression -> boolean_expression .)
    LTEQUAL         reduce using rule 85 (expression -> boolean_expression .)
    THEN            shift and go to state 253

    then_expression                shift and go to state 252

state 200

    (108) operand3 -> monadic_operator operand4 .

    TIMES           reduce using rule 108 (operand3 -> monadic_operator operand4 .)
    DIVIDE          reduce using rule 108 (operand3 -> monadic_operator operand4 .)
    MODULO          reduce using rule 108 (operand3 -> monadic_operator operand4 .)
    PLUS            reduce using rule 108 (operand3 -> monadic_operator operand4 .)
    MINUS           reduce using rule 108 (operand3 -> monadic_operator operand4 .)
    CONCAT          reduce using rule 108 (operand3 -> monadic_operator operand4 .)
    IN              reduce using rule 108 (operand3 -> monadic_operator operand4 .)
    AND             reduce using rule 108 (operand3 -> monadic_operator operand4 .)
    OR              reduce using rule 108 (operand3 -> monadic_operator operand4 .)
    EQUAL           reduce using rule 108 (operand3 -> monadic_operator operand4 .)
    NOTEQ           reduce using rule 108 (operand3 -> monadic_operator operand4 .)
    GREATER         reduce using rule 108 (operand3 -> monadic_operator operand4 .)
    GTEQUAL         reduce using rule 108 (operand3 -> monadic_operator operand4 .)
    LESS            reduce using rule 108 (operand3 -> monadic_operator operand4 .)
    LTEQUAL         reduce using rule 108 (operand3 -> monadic_operator operand4 .)
    THEN            reduce using rule 108 (operand3 -> monadic_operator operand4 .)
    SEMI            reduce using rule 108 (operand3 -> monadic_operator operand4 .)
    COMMA           reduce using rule 108 (operand3 -> monadic_operator operand4 .)
    RBRACKET        reduce using rule 108 (operand3 -> monadic_operator operand4 .)
    COLON           reduce using rule 108 (operand3 -> monadic_operator operand4 .)
    RPAREN          reduce using rule 108 (operand3 -> monadic_operator operand4 .)
    DOWN            reduce using rule 108 (operand3 -> monadic_operator operand4 .)
    BY              reduce using rule 108 (operand3 -> monadic_operator operand4 .)
    TO              reduce using rule 108 (operand3 -> monadic_operator operand4 .)
    ELSE            reduce using rule 108 (operand3 -> monadic_operator operand4 .)
    ELSIF           reduce using rule 108 (operand3 -> monadic_operator operand4 .)
    FI              reduce using rule 108 (operand3 -> monadic_operator operand4 .)
    WHILE           reduce using rule 108 (operand3 -> monadic_operator operand4 .)


state 201

    (75) start_element -> expression .
    (77) left_element -> expression .
    (88) boolean_expression -> expression . AND expression
    (89) boolean_expression -> expression . OR expression
    (90) boolean_expression -> expression . EQUAL expression
    (91) boolean_expression -> expression . NOTEQ expression
    (92) boolean_expression -> expression . GREATER expression
    (93) boolean_expression -> expression . GTEQUAL expression
    (94) boolean_expression -> expression . LESS expression
    (95) boolean_expression -> expression . LTEQUAL expression

    RBRACKET        reduce using rule 75 (start_element -> expression .)
    COLON           reduce using rule 77 (left_element -> expression .)
    AND             shift and go to state 184
    OR              shift and go to state 188
    EQUAL           shift and go to state 186
    NOTEQ           shift and go to state 189
    GREATER         shift and go to state 185
    GTEQUAL         shift and go to state 182
    LESS            shift and go to state 183
    LTEQUAL         shift and go to state 187


state 202

    (76) string_slice -> identifier LBRACKET left_element . COLON right_element RBRACKET

    COLON           shift and go to state 254


state 203

    (74) string_element -> identifier LBRACKET start_element . RBRACKET

    RBRACKET        shift and go to state 255


state 204

    (143) action_statement -> identifier COLON action . SEMI

    SEMI            shift and go to state 256


state 205

    (180) procedure_call -> ID . LPAREN parameter_list RPAREN
    (181) procedure_call -> ID . LPAREN RPAREN
    (23) identifier -> ID .

    LPAREN          shift and go to state 75
    LBRACKET        reduce using rule 23 (identifier -> ID .)
    ARROW           reduce using rule 23 (identifier -> ID .)
    ASSIGN          reduce using rule 23 (identifier -> ID .)
    PLUS            reduce using rule 23 (identifier -> ID .)
    MINUS           reduce using rule 23 (identifier -> ID .)
    TIMES           reduce using rule 23 (identifier -> ID .)
    DIVIDE          reduce using rule 23 (identifier -> ID .)
    MODULO          reduce using rule 23 (identifier -> ID .)
    CONCAT          reduce using rule 23 (identifier -> ID .)


state 206

    (3) statement_nullable -> statement statement_nullable .

    $end            reduce using rule 3 (statement_nullable -> statement statement_nullable .)
    END             reduce using rule 3 (statement_nullable -> statement statement_nullable .)


state 207

    (60) array_mode -> ARRAY LBRACKET . index_mode_list RBRACKET element_mode
    (61) index_mode_list -> . index_mode
    (62) index_mode_list -> . index_mode COMMA index_mode_list
    (63) index_mode -> . discrete_mode
    (64) index_mode -> . literal_range
    (42) discrete_mode -> . integer_mode
    (43) discrete_mode -> . boolean_mode
    (44) discrete_mode -> . character_mode
    (45) discrete_mode -> . discrete_range_mode
    (52) literal_range -> . lower_bound COLON upper_bound
    (47) integer_mode -> . INT
    (48) boolean_mode -> . BOOL
    (49) character_mode -> . CHAR
    (50) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (51) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (53) lower_bound -> . expression
    (46) discrete_mode_name -> . identifier
    (84) expression -> . operand0
    (85) expression -> . boolean_expression
    (86) expression -> . conditional_expression
    (23) identifier -> . ID
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (88) boolean_expression -> . expression AND expression
    (89) boolean_expression -> . expression OR expression
    (90) boolean_expression -> . expression EQUAL expression
    (91) boolean_expression -> . expression NOTEQ expression
    (92) boolean_expression -> . expression GREATER expression
    (93) boolean_expression -> . expression GTEQUAL expression
    (94) boolean_expression -> . expression LESS expression
    (95) boolean_expression -> . expression LTEQUAL expression
    (96) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (97) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (104) operand1 -> . operand2
    (105) operand1 -> . operand1 operator2 operand2
    (106) operand2 -> . operand3
    (107) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (108) operand3 -> . monadic_operator operand4
    (109) operand3 -> . operand4
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    INT             shift and go to state 131
    BOOL            shift and go to state 130
    CHAR            shift and go to state 129
    ID              shift and go to state 56
    IF              shift and go to state 110
    MINUS           shift and go to state 100
    NOT             shift and go to state 104
    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    empty_literal                  shift and go to state 83
    operand0                       shift and go to state 84
    expression                     shift and go to state 261
    call_action                    shift and go to state 86
    operand1                       shift and go to state 87
    value_array_slice              shift and go to state 89
    parenthesized_expression       shift and go to state 91
    discrete_mode_name             shift and go to state 135
    boolean_expression             shift and go to state 120
    character_literal              shift and go to state 93
    operand3                       shift and go to state 94
    literal                        shift and go to state 96
    builtin_call                   shift and go to state 12
    dereferenced_reference         shift and go to state 16
    index_mode_list                shift and go to state 257
    array_location                 shift and go to state 101
    boolean_mode                   shift and go to state 143
    operand2                       shift and go to state 103
    discrete_mode                  shift and go to state 262
    array_element                  shift and go to state 18
    array_slice                    shift and go to state 36
    conditional_expression         shift and go to state 88
    boolean_literal                shift and go to state 102
    integer_mode                   shift and go to state 138
    lower_bound                    shift and go to state 263
    primitive_value                shift and go to state 107
    discrete_range_mode            shift and go to state 134
    index_mode                     shift and go to state 259
    value_array_element            shift and go to state 98
    literal_range                  shift and go to state 258
    operand4                       shift and go to state 112
    string_element                 shift and go to state 32
    monadic_operator               shift and go to state 114
    character_mode                 shift and go to state 142
    referenced_location            shift and go to state 111
    location                       shift and go to state 41
    builtin_name                   shift and go to state 29
    integer_literal                shift and go to state 115
    character_string_literal       shift and go to state 113
    string_slice                   shift and go to state 45
    identifier                     shift and go to state 260

state 208

    (50) discrete_range_mode -> discrete_mode_name LPAREN . literal_range RPAREN
    (52) literal_range -> . lower_bound COLON upper_bound
    (53) lower_bound -> . expression
    (84) expression -> . operand0
    (85) expression -> . boolean_expression
    (86) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (88) boolean_expression -> . expression AND expression
    (89) boolean_expression -> . expression OR expression
    (90) boolean_expression -> . expression EQUAL expression
    (91) boolean_expression -> . expression NOTEQ expression
    (92) boolean_expression -> . expression GREATER expression
    (93) boolean_expression -> . expression GTEQUAL expression
    (94) boolean_expression -> . expression LESS expression
    (95) boolean_expression -> . expression LTEQUAL expression
    (96) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (97) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (104) operand1 -> . operand2
    (105) operand1 -> . operand1 operator2 operand2
    (106) operand2 -> . operand3
    (107) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (108) operand3 -> . monadic_operator operand4
    (109) operand3 -> . operand4
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    IF              shift and go to state 110
    MINUS           shift and go to state 100
    NOT             shift and go to state 104
    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ID              shift and go to state 56
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    integer_literal                shift and go to state 115
    empty_literal                  shift and go to state 83
    operand0                       shift and go to state 84
    expression                     shift and go to state 261
    call_action                    shift and go to state 86
    operand1                       shift and go to state 87
    conditional_expression         shift and go to state 88
    value_array_slice              shift and go to state 89
    parenthesized_expression       shift and go to state 91
    boolean_expression             shift and go to state 120
    character_literal              shift and go to state 93
    operand3                       shift and go to state 94
    literal                        shift and go to state 96
    dereferenced_reference         shift and go to state 16
    array_location                 shift and go to state 101
    operand2                       shift and go to state 103
    builtin_call                   shift and go to state 12
    array_element                  shift and go to state 18
    array_slice                    shift and go to state 36
    boolean_literal                shift and go to state 102
    referenced_location            shift and go to state 111
    lower_bound                    shift and go to state 263
    primitive_value                shift and go to state 107
    identifier                     shift and go to state 109
    value_array_element            shift and go to state 98
    literal_range                  shift and go to state 264
    operand4                       shift and go to state 112
    string_element                 shift and go to state 32
    monadic_operator               shift and go to state 114
    location                       shift and go to state 41
    builtin_name                   shift and go to state 29
    character_string_literal       shift and go to state 113
    string_slice                   shift and go to state 45

state 209

    (18) declaration -> identifier_list mode initialization .

    COMMA           reduce using rule 18 (declaration -> identifier_list mode initialization .)
    SEMI            reduce using rule 18 (declaration -> identifier_list mode initialization .)


state 210

    (20) initialization -> ASSIGN . expression
    (84) expression -> . operand0
    (85) expression -> . boolean_expression
    (86) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (88) boolean_expression -> . expression AND expression
    (89) boolean_expression -> . expression OR expression
    (90) boolean_expression -> . expression EQUAL expression
    (91) boolean_expression -> . expression NOTEQ expression
    (92) boolean_expression -> . expression GREATER expression
    (93) boolean_expression -> . expression GTEQUAL expression
    (94) boolean_expression -> . expression LESS expression
    (95) boolean_expression -> . expression LTEQUAL expression
    (96) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (97) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (104) operand1 -> . operand2
    (105) operand1 -> . operand1 operator2 operand2
    (106) operand2 -> . operand3
    (107) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (108) operand3 -> . monadic_operator operand4
    (109) operand3 -> . operand4
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    IF              shift and go to state 110
    MINUS           shift and go to state 100
    NOT             shift and go to state 104
    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ID              shift and go to state 56
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    empty_literal                  shift and go to state 83
    operand0                       shift and go to state 84
    expression                     shift and go to state 265
    call_action                    shift and go to state 86
    operand1                       shift and go to state 87
    value_array_slice              shift and go to state 89
    monadic_operator               shift and go to state 114
    parenthesized_expression       shift and go to state 91
    boolean_expression             shift and go to state 120
    character_literal              shift and go to state 93
    operand3                       shift and go to state 94
    literal                        shift and go to state 96
    builtin_call                   shift and go to state 12
    array_location                 shift and go to state 101
    operand2                       shift and go to state 103
    array_element                  shift and go to state 18
    array_slice                    shift and go to state 36
    conditional_expression         shift and go to state 88
    boolean_literal                shift and go to state 102
    builtin_name                   shift and go to state 29
    primitive_value                shift and go to state 107
    value_array_element            shift and go to state 98
    referenced_location            shift and go to state 111
    operand4                       shift and go to state 112
    dereferenced_reference         shift and go to state 16
    string_element                 shift and go to state 32
    character_string_literal       shift and go to state 113
    identifier                     shift and go to state 109
    location                       shift and go to state 41
    integer_literal                shift and go to state 115
    string_slice                   shift and go to state 45

state 211

    (51) discrete_range_mode -> discrete_mode LPAREN . literal_range RPAREN
    (52) literal_range -> . lower_bound COLON upper_bound
    (53) lower_bound -> . expression
    (84) expression -> . operand0
    (85) expression -> . boolean_expression
    (86) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (88) boolean_expression -> . expression AND expression
    (89) boolean_expression -> . expression OR expression
    (90) boolean_expression -> . expression EQUAL expression
    (91) boolean_expression -> . expression NOTEQ expression
    (92) boolean_expression -> . expression GREATER expression
    (93) boolean_expression -> . expression GTEQUAL expression
    (94) boolean_expression -> . expression LESS expression
    (95) boolean_expression -> . expression LTEQUAL expression
    (96) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (97) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (104) operand1 -> . operand2
    (105) operand1 -> . operand1 operator2 operand2
    (106) operand2 -> . operand3
    (107) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (108) operand3 -> . monadic_operator operand4
    (109) operand3 -> . operand4
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    IF              shift and go to state 110
    MINUS           shift and go to state 100
    NOT             shift and go to state 104
    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ID              shift and go to state 56
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    integer_literal                shift and go to state 115
    empty_literal                  shift and go to state 83
    operand0                       shift and go to state 84
    expression                     shift and go to state 261
    call_action                    shift and go to state 86
    operand1                       shift and go to state 87
    conditional_expression         shift and go to state 88
    value_array_slice              shift and go to state 89
    parenthesized_expression       shift and go to state 91
    boolean_expression             shift and go to state 120
    character_literal              shift and go to state 93
    operand3                       shift and go to state 94
    literal                        shift and go to state 96
    builtin_call                   shift and go to state 12
    dereferenced_reference         shift and go to state 16
    array_location                 shift and go to state 101
    operand2                       shift and go to state 103
    array_element                  shift and go to state 18
    array_slice                    shift and go to state 36
    boolean_literal                shift and go to state 102
    referenced_location            shift and go to state 111
    lower_bound                    shift and go to state 263
    primitive_value                shift and go to state 107
    identifier                     shift and go to state 109
    value_array_element            shift and go to state 98
    literal_range                  shift and go to state 266
    operand4                       shift and go to state 112
    string_element                 shift and go to state 32
    monadic_operator               shift and go to state 114
    location                       shift and go to state 41
    builtin_name                   shift and go to state 29
    character_string_literal       shift and go to state 113
    string_slice                   shift and go to state 45

state 212

    (55) reference_mode -> REF mode .

    LOC             reduce using rule 55 (reference_mode -> REF mode .)
    COMMA           reduce using rule 55 (reference_mode -> REF mode .)
    RPAREN          reduce using rule 55 (reference_mode -> REF mode .)
    ASSIGN          reduce using rule 55 (reference_mode -> REF mode .)
    SEMI            reduce using rule 55 (reference_mode -> REF mode .)


state 213

    (58) string_mode -> CHARS LBRACKET . string_length RBRACKET
    (59) string_length -> . integer_literal
    (137) integer_literal -> . ICONST

    ICONST          shift and go to state 106

    integer_literal                shift and go to state 267
    string_length                  shift and go to state 268

state 214

    (17) declaration_list -> declaration COMMA declaration_list .

    SEMI            reduce using rule 17 (declaration_list -> declaration COMMA declaration_list .)


state 215

    (22) identifier_list -> identifier COMMA identifier_list .

    REF             reduce using rule 22 (identifier_list -> identifier COMMA identifier_list .)
    ID              reduce using rule 22 (identifier_list -> identifier COMMA identifier_list .)
    INT             reduce using rule 22 (identifier_list -> identifier COMMA identifier_list .)
    BOOL            reduce using rule 22 (identifier_list -> identifier COMMA identifier_list .)
    CHAR            reduce using rule 22 (identifier_list -> identifier COMMA identifier_list .)
    CHARS           reduce using rule 22 (identifier_list -> identifier COMMA identifier_list .)
    ARRAY           reduce using rule 22 (identifier_list -> identifier COMMA identifier_list .)
    ASSIGN          reduce using rule 22 (identifier_list -> identifier COMMA identifier_list .)


state 216

    (189) do_action -> DO control_part SEMI action_statement_nullable . OD

    OD              shift and go to state 269


state 217

    (204) range_enumeration -> identifier IN . discrete_mode
    (42) discrete_mode -> . integer_mode
    (43) discrete_mode -> . boolean_mode
    (44) discrete_mode -> . character_mode
    (45) discrete_mode -> . discrete_range_mode
    (47) integer_mode -> . INT
    (48) boolean_mode -> . BOOL
    (49) character_mode -> . CHAR
    (50) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (51) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (46) discrete_mode_name -> . identifier
    (23) identifier -> . ID

    INT             shift and go to state 131
    BOOL            shift and go to state 130
    CHAR            shift and go to state 129
    ID              shift and go to state 47

    integer_mode                   shift and go to state 138
    discrete_range_mode            shift and go to state 134
    discrete_mode                  shift and go to state 271
    identifier                     shift and go to state 270
    discrete_mode_name             shift and go to state 135
    character_mode                 shift and go to state 142
    boolean_mode                   shift and go to state 143

state 218

    (203) range_enumeration -> identifier DOWN . IN discrete_mode

    IN              shift and go to state 272


state 219

    (197) step_enumeration -> identifier ASSIGN . expression step_value DOWN end_value
    (198) step_enumeration -> identifier ASSIGN . expression step_value end_value
    (199) step_enumeration -> identifier ASSIGN . expression DOWN end_value
    (200) step_enumeration -> identifier ASSIGN . expression end_value
    (84) expression -> . operand0
    (85) expression -> . boolean_expression
    (86) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (88) boolean_expression -> . expression AND expression
    (89) boolean_expression -> . expression OR expression
    (90) boolean_expression -> . expression EQUAL expression
    (91) boolean_expression -> . expression NOTEQ expression
    (92) boolean_expression -> . expression GREATER expression
    (93) boolean_expression -> . expression GTEQUAL expression
    (94) boolean_expression -> . expression LESS expression
    (95) boolean_expression -> . expression LTEQUAL expression
    (96) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (97) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (104) operand1 -> . operand2
    (105) operand1 -> . operand1 operator2 operand2
    (106) operand2 -> . operand3
    (107) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (108) operand3 -> . monadic_operator operand4
    (109) operand3 -> . operand4
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    IF              shift and go to state 110
    MINUS           shift and go to state 100
    NOT             shift and go to state 104
    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ID              shift and go to state 56
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    empty_literal                  shift and go to state 83
    operand0                       shift and go to state 84
    expression                     shift and go to state 273
    call_action                    shift and go to state 86
    operand1                       shift and go to state 87
    value_array_slice              shift and go to state 89
    monadic_operator               shift and go to state 114
    parenthesized_expression       shift and go to state 91
    boolean_expression             shift and go to state 120
    character_literal              shift and go to state 93
    operand3                       shift and go to state 94
    literal                        shift and go to state 96
    dereferenced_reference         shift and go to state 16
    array_location                 shift and go to state 101
    operand2                       shift and go to state 103
    builtin_call                   shift and go to state 12
    array_element                  shift and go to state 18
    array_slice                    shift and go to state 36
    conditional_expression         shift and go to state 88
    boolean_literal                shift and go to state 102
    referenced_location            shift and go to state 111
    builtin_name                   shift and go to state 29
    primitive_value                shift and go to state 107
    value_array_element            shift and go to state 98
    operand4                       shift and go to state 112
    string_element                 shift and go to state 32
    character_string_literal       shift and go to state 113
    identifier                     shift and go to state 109
    location                       shift and go to state 41
    integer_literal                shift and go to state 115
    string_slice                   shift and go to state 45

state 220

    (81) expression_list -> expression COMMA . expression_list
    (80) expression_list -> . expression
    (81) expression_list -> . expression COMMA expression_list
    (84) expression -> . operand0
    (85) expression -> . boolean_expression
    (86) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (88) boolean_expression -> . expression AND expression
    (89) boolean_expression -> . expression OR expression
    (90) boolean_expression -> . expression EQUAL expression
    (91) boolean_expression -> . expression NOTEQ expression
    (92) boolean_expression -> . expression GREATER expression
    (93) boolean_expression -> . expression GTEQUAL expression
    (94) boolean_expression -> . expression LESS expression
    (95) boolean_expression -> . expression LTEQUAL expression
    (96) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (97) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (104) operand1 -> . operand2
    (105) operand1 -> . operand1 operator2 operand2
    (106) operand2 -> . operand3
    (107) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (108) operand3 -> . monadic_operator operand4
    (109) operand3 -> . operand4
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    IF              shift and go to state 110
    MINUS           shift and go to state 100
    NOT             shift and go to state 104
    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ID              shift and go to state 56
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    integer_literal                shift and go to state 115
    empty_literal                  shift and go to state 83
    operand0                       shift and go to state 84
    expression                     shift and go to state 274
    call_action                    shift and go to state 86
    operand1                       shift and go to state 87
    conditional_expression         shift and go to state 88
    value_array_slice              shift and go to state 89
    parenthesized_expression       shift and go to state 91
    boolean_expression             shift and go to state 120
    character_literal              shift and go to state 93
    operand3                       shift and go to state 94
    literal                        shift and go to state 96
    value_array_element            shift and go to state 98
    array_location                 shift and go to state 101
    operand2                       shift and go to state 103
    builtin_call                   shift and go to state 12
    array_element                  shift and go to state 18
    array_slice                    shift and go to state 36
    boolean_literal                shift and go to state 102
    builtin_name                   shift and go to state 29
    primitive_value                shift and go to state 107
    identifier                     shift and go to state 109
    referenced_location            shift and go to state 111
    expression_list                shift and go to state 275
    operand4                       shift and go to state 112
    dereferenced_reference         shift and go to state 16
    string_element                 shift and go to state 32
    character_string_literal       shift and go to state 113
    monadic_operator               shift and go to state 114
    location                       shift and go to state 41
    string_slice                   shift and go to state 45

state 221

    (82) array_slice -> array_location LBRACKET lower_bound COLON . upper_bound RBRACKET
    (54) upper_bound -> . expression
    (84) expression -> . operand0
    (85) expression -> . boolean_expression
    (86) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (88) boolean_expression -> . expression AND expression
    (89) boolean_expression -> . expression OR expression
    (90) boolean_expression -> . expression EQUAL expression
    (91) boolean_expression -> . expression NOTEQ expression
    (92) boolean_expression -> . expression GREATER expression
    (93) boolean_expression -> . expression GTEQUAL expression
    (94) boolean_expression -> . expression LESS expression
    (95) boolean_expression -> . expression LTEQUAL expression
    (96) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (97) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (104) operand1 -> . operand2
    (105) operand1 -> . operand1 operator2 operand2
    (106) operand2 -> . operand3
    (107) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (108) operand3 -> . monadic_operator operand4
    (109) operand3 -> . operand4
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    IF              shift and go to state 110
    MINUS           shift and go to state 100
    NOT             shift and go to state 104
    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ID              shift and go to state 56
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    integer_literal                shift and go to state 115
    empty_literal                  shift and go to state 83
    operand0                       shift and go to state 84
    expression                     shift and go to state 276
    call_action                    shift and go to state 86
    operand1                       shift and go to state 87
    value_array_slice              shift and go to state 89
    parenthesized_expression       shift and go to state 91
    boolean_expression             shift and go to state 120
    character_literal              shift and go to state 93
    operand3                       shift and go to state 94
    literal                        shift and go to state 96
    dereferenced_reference         shift and go to state 16
    array_location                 shift and go to state 101
    operand2                       shift and go to state 103
    builtin_call                   shift and go to state 12
    array_element                  shift and go to state 18
    array_slice                    shift and go to state 36
    conditional_expression         shift and go to state 88
    boolean_literal                shift and go to state 102
    referenced_location            shift and go to state 111
    primitive_value                shift and go to state 107
    identifier                     shift and go to state 109
    value_array_element            shift and go to state 98
    operand4                       shift and go to state 112
    string_element                 shift and go to state 32
    upper_bound                    shift and go to state 277
    monadic_operator               shift and go to state 114
    location                       shift and go to state 41
    builtin_name                   shift and go to state 29
    character_string_literal       shift and go to state 113
    string_slice                   shift and go to state 45

state 222

    (79) array_element -> array_location LBRACKET expression_list RBRACKET .

    ARROW           reduce using rule 79 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    LBRACKET        reduce using rule 79 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    TIMES           reduce using rule 79 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    DIVIDE          reduce using rule 79 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    MODULO          reduce using rule 79 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    PLUS            reduce using rule 79 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    MINUS           reduce using rule 79 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    CONCAT          reduce using rule 79 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    IN              reduce using rule 79 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    AND             reduce using rule 79 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    OR              reduce using rule 79 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    EQUAL           reduce using rule 79 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    NOTEQ           reduce using rule 79 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    GREATER         reduce using rule 79 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    GTEQUAL         reduce using rule 79 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    LESS            reduce using rule 79 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    LTEQUAL         reduce using rule 79 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    THEN            reduce using rule 79 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    SEMI            reduce using rule 79 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    COMMA           reduce using rule 79 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    RBRACKET        reduce using rule 79 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    COLON           reduce using rule 79 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    RPAREN          reduce using rule 79 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    DOWN            reduce using rule 79 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    BY              reduce using rule 79 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    TO              reduce using rule 79 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    ELSE            reduce using rule 79 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    ELSIF           reduce using rule 79 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    FI              reduce using rule 79 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    WHILE           reduce using rule 79 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    ASSIGN          reduce using rule 79 (array_element -> array_location LBRACKET expression_list RBRACKET .)


state 223

    (29) procedure_definition -> PROC LPAREN . formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI
    (30) procedure_definition -> PROC LPAREN . formal_parameter_list RPAREN SEMI statement_nullable END SEMI
    (31) formal_parameter_list -> . formal_parameter
    (32) formal_parameter_list -> . formal_parameter COMMA formal_parameter_list
    (33) formal_parameter -> . identifier_list mode LOC
    (34) formal_parameter -> . identifier_list mode
    (21) identifier_list -> . identifier
    (22) identifier_list -> . identifier COMMA identifier_list
    (23) identifier -> . ID

    ID              shift and go to state 47

    identifier                     shift and go to state 50
    formal_parameter_list          shift and go to state 278
    identifier_list                shift and go to state 279
    formal_parameter               shift and go to state 280

state 224

    (183) parameter_list -> expression COMMA . parameter_list
    (182) parameter_list -> . expression
    (183) parameter_list -> . expression COMMA parameter_list
    (84) expression -> . operand0
    (85) expression -> . boolean_expression
    (86) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (88) boolean_expression -> . expression AND expression
    (89) boolean_expression -> . expression OR expression
    (90) boolean_expression -> . expression EQUAL expression
    (91) boolean_expression -> . expression NOTEQ expression
    (92) boolean_expression -> . expression GREATER expression
    (93) boolean_expression -> . expression GTEQUAL expression
    (94) boolean_expression -> . expression LESS expression
    (95) boolean_expression -> . expression LTEQUAL expression
    (96) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (97) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (104) operand1 -> . operand2
    (105) operand1 -> . operand1 operator2 operand2
    (106) operand2 -> . operand3
    (107) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (108) operand3 -> . monadic_operator operand4
    (109) operand3 -> . operand4
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    IF              shift and go to state 110
    MINUS           shift and go to state 100
    NOT             shift and go to state 104
    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ID              shift and go to state 56
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    empty_literal                  shift and go to state 83
    operand0                       shift and go to state 84
    expression                     shift and go to state 167
    call_action                    shift and go to state 86
    operand1                       shift and go to state 87
    conditional_expression         shift and go to state 88
    value_array_slice              shift and go to state 89
    parenthesized_expression       shift and go to state 91
    integer_literal                shift and go to state 115
    character_literal              shift and go to state 93
    operand3                       shift and go to state 94
    literal                        shift and go to state 96
    dereferenced_reference         shift and go to state 16
    array_location                 shift and go to state 101
    operand2                       shift and go to state 103
    builtin_call                   shift and go to state 12
    array_element                  shift and go to state 18
    array_slice                    shift and go to state 36
    boolean_expression             shift and go to state 120
    boolean_literal                shift and go to state 102
    referenced_location            shift and go to state 111
    builtin_name                   shift and go to state 29
    primitive_value                shift and go to state 107
    parameter_list                 shift and go to state 281
    identifier                     shift and go to state 109
    value_array_element            shift and go to state 98
    operand4                       shift and go to state 112
    string_element                 shift and go to state 32
    character_string_literal       shift and go to state 113
    monadic_operator               shift and go to state 114
    location                       shift and go to state 41
    string_slice                   shift and go to state 45

state 225

    (180) procedure_call -> ID LPAREN parameter_list RPAREN .

    ARROW           reduce using rule 180 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    LBRACKET        reduce using rule 180 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    TIMES           reduce using rule 180 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    DIVIDE          reduce using rule 180 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    MODULO          reduce using rule 180 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    PLUS            reduce using rule 180 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    MINUS           reduce using rule 180 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    CONCAT          reduce using rule 180 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    IN              reduce using rule 180 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    AND             reduce using rule 180 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    OR              reduce using rule 180 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    EQUAL           reduce using rule 180 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    NOTEQ           reduce using rule 180 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    GREATER         reduce using rule 180 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    GTEQUAL         reduce using rule 180 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    LESS            reduce using rule 180 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    LTEQUAL         reduce using rule 180 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    COLON           reduce using rule 180 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    SEMI            reduce using rule 180 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 180 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    RBRACKET        reduce using rule 180 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 180 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    THEN            reduce using rule 180 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    DOWN            reduce using rule 180 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    BY              reduce using rule 180 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    TO              reduce using rule 180 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    ELSE            reduce using rule 180 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    ELSIF           reduce using rule 180 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    FI              reduce using rule 180 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    WHILE           reduce using rule 180 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    ASSIGN          reduce using rule 180 (procedure_call -> ID LPAREN parameter_list RPAREN .)


state 226

    (12) synonym_list -> synonym_definition COMMA synonym_list .

    SEMI            reduce using rule 12 (synonym_list -> synonym_definition COMMA synonym_list .)


state 227

    (14) synonym_definition -> identifier_list ASSIGN expression .
    (88) boolean_expression -> expression . AND expression
    (89) boolean_expression -> expression . OR expression
    (90) boolean_expression -> expression . EQUAL expression
    (91) boolean_expression -> expression . NOTEQ expression
    (92) boolean_expression -> expression . GREATER expression
    (93) boolean_expression -> expression . GTEQUAL expression
    (94) boolean_expression -> expression . LESS expression
    (95) boolean_expression -> expression . LTEQUAL expression

    COMMA           reduce using rule 14 (synonym_definition -> identifier_list ASSIGN expression .)
    SEMI            reduce using rule 14 (synonym_definition -> identifier_list ASSIGN expression .)
    AND             shift and go to state 184
    OR              shift and go to state 188
    EQUAL           shift and go to state 186
    NOTEQ           shift and go to state 189
    GREATER         shift and go to state 185
    GTEQUAL         shift and go to state 182
    LESS            shift and go to state 183
    LTEQUAL         shift and go to state 187


state 228

    (13) synonym_definition -> identifier_list mode ASSIGN . expression
    (84) expression -> . operand0
    (85) expression -> . boolean_expression
    (86) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (88) boolean_expression -> . expression AND expression
    (89) boolean_expression -> . expression OR expression
    (90) boolean_expression -> . expression EQUAL expression
    (91) boolean_expression -> . expression NOTEQ expression
    (92) boolean_expression -> . expression GREATER expression
    (93) boolean_expression -> . expression GTEQUAL expression
    (94) boolean_expression -> . expression LESS expression
    (95) boolean_expression -> . expression LTEQUAL expression
    (96) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (97) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (104) operand1 -> . operand2
    (105) operand1 -> . operand1 operator2 operand2
    (106) operand2 -> . operand3
    (107) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (108) operand3 -> . monadic_operator operand4
    (109) operand3 -> . operand4
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    IF              shift and go to state 110
    MINUS           shift and go to state 100
    NOT             shift and go to state 104
    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ID              shift and go to state 56
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    integer_literal                shift and go to state 115
    empty_literal                  shift and go to state 83
    operand0                       shift and go to state 84
    expression                     shift and go to state 282
    call_action                    shift and go to state 86
    operand1                       shift and go to state 87
    conditional_expression         shift and go to state 88
    value_array_slice              shift and go to state 89
    parenthesized_expression       shift and go to state 91
    boolean_expression             shift and go to state 120
    character_literal              shift and go to state 93
    operand3                       shift and go to state 94
    literal                        shift and go to state 96
    dereferenced_reference         shift and go to state 16
    array_location                 shift and go to state 101
    operand2                       shift and go to state 103
    builtin_call                   shift and go to state 12
    array_element                  shift and go to state 18
    array_slice                    shift and go to state 36
    boolean_literal                shift and go to state 102
    referenced_location            shift and go to state 111
    builtin_name                   shift and go to state 29
    primitive_value                shift and go to state 107
    identifier                     shift and go to state 109
    value_array_element            shift and go to state 98
    operand4                       shift and go to state 112
    string_element                 shift and go to state 32
    character_string_literal       shift and go to state 113
    monadic_operator               shift and go to state 114
    location                       shift and go to state 41
    string_slice                   shift and go to state 45

state 229

    (26) newmode_list -> mode_definition COMMA newmode_list .

    SEMI            reduce using rule 26 (newmode_list -> mode_definition COMMA newmode_list .)


state 230

    (27) mode_definition -> identifier_list ASSIGN mode .

    COMMA           reduce using rule 27 (mode_definition -> identifier_list ASSIGN mode .)
    SEMI            reduce using rule 27 (mode_definition -> identifier_list ASSIGN mode .)


state 231

    (170) builtin_call -> builtin_name LPAREN parameter_list RPAREN .

    ARROW           reduce using rule 170 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    LBRACKET        reduce using rule 170 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    TIMES           reduce using rule 170 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    DIVIDE          reduce using rule 170 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    MODULO          reduce using rule 170 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    PLUS            reduce using rule 170 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    MINUS           reduce using rule 170 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    CONCAT          reduce using rule 170 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    IN              reduce using rule 170 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    AND             reduce using rule 170 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    OR              reduce using rule 170 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    EQUAL           reduce using rule 170 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    NOTEQ           reduce using rule 170 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    GREATER         reduce using rule 170 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    GTEQUAL         reduce using rule 170 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    LESS            reduce using rule 170 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    LTEQUAL         reduce using rule 170 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    THEN            reduce using rule 170 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    SEMI            reduce using rule 170 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 170 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    RBRACKET        reduce using rule 170 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    COLON           reduce using rule 170 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 170 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    DOWN            reduce using rule 170 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    BY              reduce using rule 170 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    TO              reduce using rule 170 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    ELSE            reduce using rule 170 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    ELSIF           reduce using rule 170 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    FI              reduce using rule 170 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    WHILE           reduce using rule 170 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    ASSIGN          reduce using rule 170 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)


state 232

    (103) operand0 -> operand0 operator1 operand1 .
    (105) operand1 -> operand1 . operator2 operand2
    (120) operator2 -> . arithmetic_additive_operator
    (121) operator2 -> . string_concatenation_operator
    (122) arithmetic_additive_operator -> . PLUS
    (123) arithmetic_additive_operator -> . MINUS
    (124) string_concatenation_operator -> . CONCAT

    IN              reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    COMMA           reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    AND             reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    OR              reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    EQUAL           reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    NOTEQ           reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    GREATER         reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    GTEQUAL         reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    LESS            reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    LTEQUAL         reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    RPAREN          reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    RBRACKET        reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    COLON           reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    ELSE            reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    ELSIF           reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    SEMI            reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    DOWN            reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    BY              reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    TO              reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    THEN            reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    FI              reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    WHILE           reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 70
    CONCAT          shift and go to state 65

    string_concatenation_operator  shift and go to state 190
    arithmetic_additive_operator   shift and go to state 192
    operator2                      shift and go to state 191

state 233

    (93) boolean_expression -> expression GTEQUAL expression .
    (88) boolean_expression -> expression . AND expression
    (89) boolean_expression -> expression . OR expression
    (90) boolean_expression -> expression . EQUAL expression
    (91) boolean_expression -> expression . NOTEQ expression
    (92) boolean_expression -> expression . GREATER expression
    (93) boolean_expression -> expression . GTEQUAL expression
    (94) boolean_expression -> expression . LESS expression
    (95) boolean_expression -> expression . LTEQUAL expression

    AND             reduce using rule 93 (boolean_expression -> expression GTEQUAL expression .)
    OR              reduce using rule 93 (boolean_expression -> expression GTEQUAL expression .)
    EQUAL           reduce using rule 93 (boolean_expression -> expression GTEQUAL expression .)
    NOTEQ           reduce using rule 93 (boolean_expression -> expression GTEQUAL expression .)
    GREATER         reduce using rule 93 (boolean_expression -> expression GTEQUAL expression .)
    GTEQUAL         reduce using rule 93 (boolean_expression -> expression GTEQUAL expression .)
    LESS            reduce using rule 93 (boolean_expression -> expression GTEQUAL expression .)
    LTEQUAL         reduce using rule 93 (boolean_expression -> expression GTEQUAL expression .)
    SEMI            reduce using rule 93 (boolean_expression -> expression GTEQUAL expression .)
    THEN            reduce using rule 93 (boolean_expression -> expression GTEQUAL expression .)
    COMMA           reduce using rule 93 (boolean_expression -> expression GTEQUAL expression .)
    RBRACKET        reduce using rule 93 (boolean_expression -> expression GTEQUAL expression .)
    COLON           reduce using rule 93 (boolean_expression -> expression GTEQUAL expression .)
    RPAREN          reduce using rule 93 (boolean_expression -> expression GTEQUAL expression .)
    DOWN            reduce using rule 93 (boolean_expression -> expression GTEQUAL expression .)
    BY              reduce using rule 93 (boolean_expression -> expression GTEQUAL expression .)
    TO              reduce using rule 93 (boolean_expression -> expression GTEQUAL expression .)
    ELSE            reduce using rule 93 (boolean_expression -> expression GTEQUAL expression .)
    ELSIF           reduce using rule 93 (boolean_expression -> expression GTEQUAL expression .)
    FI              reduce using rule 93 (boolean_expression -> expression GTEQUAL expression .)
    WHILE           reduce using rule 93 (boolean_expression -> expression GTEQUAL expression .)

  ! AND             [ shift and go to state 184 ]
  ! OR              [ shift and go to state 188 ]
  ! EQUAL           [ shift and go to state 186 ]
  ! NOTEQ           [ shift and go to state 189 ]
  ! GREATER         [ shift and go to state 185 ]
  ! GTEQUAL         [ shift and go to state 182 ]
  ! LESS            [ shift and go to state 183 ]
  ! LTEQUAL         [ shift and go to state 187 ]


state 234

    (94) boolean_expression -> expression LESS expression .
    (88) boolean_expression -> expression . AND expression
    (89) boolean_expression -> expression . OR expression
    (90) boolean_expression -> expression . EQUAL expression
    (91) boolean_expression -> expression . NOTEQ expression
    (92) boolean_expression -> expression . GREATER expression
    (93) boolean_expression -> expression . GTEQUAL expression
    (94) boolean_expression -> expression . LESS expression
    (95) boolean_expression -> expression . LTEQUAL expression

    AND             reduce using rule 94 (boolean_expression -> expression LESS expression .)
    OR              reduce using rule 94 (boolean_expression -> expression LESS expression .)
    EQUAL           reduce using rule 94 (boolean_expression -> expression LESS expression .)
    NOTEQ           reduce using rule 94 (boolean_expression -> expression LESS expression .)
    GREATER         reduce using rule 94 (boolean_expression -> expression LESS expression .)
    GTEQUAL         reduce using rule 94 (boolean_expression -> expression LESS expression .)
    LESS            reduce using rule 94 (boolean_expression -> expression LESS expression .)
    LTEQUAL         reduce using rule 94 (boolean_expression -> expression LESS expression .)
    SEMI            reduce using rule 94 (boolean_expression -> expression LESS expression .)
    THEN            reduce using rule 94 (boolean_expression -> expression LESS expression .)
    COMMA           reduce using rule 94 (boolean_expression -> expression LESS expression .)
    RBRACKET        reduce using rule 94 (boolean_expression -> expression LESS expression .)
    COLON           reduce using rule 94 (boolean_expression -> expression LESS expression .)
    RPAREN          reduce using rule 94 (boolean_expression -> expression LESS expression .)
    DOWN            reduce using rule 94 (boolean_expression -> expression LESS expression .)
    BY              reduce using rule 94 (boolean_expression -> expression LESS expression .)
    TO              reduce using rule 94 (boolean_expression -> expression LESS expression .)
    ELSE            reduce using rule 94 (boolean_expression -> expression LESS expression .)
    ELSIF           reduce using rule 94 (boolean_expression -> expression LESS expression .)
    FI              reduce using rule 94 (boolean_expression -> expression LESS expression .)
    WHILE           reduce using rule 94 (boolean_expression -> expression LESS expression .)

  ! AND             [ shift and go to state 184 ]
  ! OR              [ shift and go to state 188 ]
  ! EQUAL           [ shift and go to state 186 ]
  ! NOTEQ           [ shift and go to state 189 ]
  ! GREATER         [ shift and go to state 185 ]
  ! GTEQUAL         [ shift and go to state 182 ]
  ! LESS            [ shift and go to state 183 ]
  ! LTEQUAL         [ shift and go to state 187 ]


state 235

    (88) boolean_expression -> expression AND expression .
    (88) boolean_expression -> expression . AND expression
    (89) boolean_expression -> expression . OR expression
    (90) boolean_expression -> expression . EQUAL expression
    (91) boolean_expression -> expression . NOTEQ expression
    (92) boolean_expression -> expression . GREATER expression
    (93) boolean_expression -> expression . GTEQUAL expression
    (94) boolean_expression -> expression . LESS expression
    (95) boolean_expression -> expression . LTEQUAL expression

    AND             reduce using rule 88 (boolean_expression -> expression AND expression .)
    OR              reduce using rule 88 (boolean_expression -> expression AND expression .)
    SEMI            reduce using rule 88 (boolean_expression -> expression AND expression .)
    THEN            reduce using rule 88 (boolean_expression -> expression AND expression .)
    COMMA           reduce using rule 88 (boolean_expression -> expression AND expression .)
    RBRACKET        reduce using rule 88 (boolean_expression -> expression AND expression .)
    COLON           reduce using rule 88 (boolean_expression -> expression AND expression .)
    RPAREN          reduce using rule 88 (boolean_expression -> expression AND expression .)
    DOWN            reduce using rule 88 (boolean_expression -> expression AND expression .)
    BY              reduce using rule 88 (boolean_expression -> expression AND expression .)
    TO              reduce using rule 88 (boolean_expression -> expression AND expression .)
    ELSE            reduce using rule 88 (boolean_expression -> expression AND expression .)
    ELSIF           reduce using rule 88 (boolean_expression -> expression AND expression .)
    FI              reduce using rule 88 (boolean_expression -> expression AND expression .)
    WHILE           reduce using rule 88 (boolean_expression -> expression AND expression .)
    EQUAL           shift and go to state 186
    NOTEQ           shift and go to state 189
    GREATER         shift and go to state 185
    GTEQUAL         shift and go to state 182
    LESS            shift and go to state 183
    LTEQUAL         shift and go to state 187

  ! EQUAL           [ reduce using rule 88 (boolean_expression -> expression AND expression .) ]
  ! NOTEQ           [ reduce using rule 88 (boolean_expression -> expression AND expression .) ]
  ! GREATER         [ reduce using rule 88 (boolean_expression -> expression AND expression .) ]
  ! GTEQUAL         [ reduce using rule 88 (boolean_expression -> expression AND expression .) ]
  ! LESS            [ reduce using rule 88 (boolean_expression -> expression AND expression .) ]
  ! LTEQUAL         [ reduce using rule 88 (boolean_expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 184 ]
  ! OR              [ shift and go to state 188 ]


state 236

    (92) boolean_expression -> expression GREATER expression .
    (88) boolean_expression -> expression . AND expression
    (89) boolean_expression -> expression . OR expression
    (90) boolean_expression -> expression . EQUAL expression
    (91) boolean_expression -> expression . NOTEQ expression
    (92) boolean_expression -> expression . GREATER expression
    (93) boolean_expression -> expression . GTEQUAL expression
    (94) boolean_expression -> expression . LESS expression
    (95) boolean_expression -> expression . LTEQUAL expression

    AND             reduce using rule 92 (boolean_expression -> expression GREATER expression .)
    OR              reduce using rule 92 (boolean_expression -> expression GREATER expression .)
    EQUAL           reduce using rule 92 (boolean_expression -> expression GREATER expression .)
    NOTEQ           reduce using rule 92 (boolean_expression -> expression GREATER expression .)
    GREATER         reduce using rule 92 (boolean_expression -> expression GREATER expression .)
    GTEQUAL         reduce using rule 92 (boolean_expression -> expression GREATER expression .)
    LESS            reduce using rule 92 (boolean_expression -> expression GREATER expression .)
    LTEQUAL         reduce using rule 92 (boolean_expression -> expression GREATER expression .)
    SEMI            reduce using rule 92 (boolean_expression -> expression GREATER expression .)
    THEN            reduce using rule 92 (boolean_expression -> expression GREATER expression .)
    COMMA           reduce using rule 92 (boolean_expression -> expression GREATER expression .)
    RBRACKET        reduce using rule 92 (boolean_expression -> expression GREATER expression .)
    COLON           reduce using rule 92 (boolean_expression -> expression GREATER expression .)
    RPAREN          reduce using rule 92 (boolean_expression -> expression GREATER expression .)
    DOWN            reduce using rule 92 (boolean_expression -> expression GREATER expression .)
    BY              reduce using rule 92 (boolean_expression -> expression GREATER expression .)
    TO              reduce using rule 92 (boolean_expression -> expression GREATER expression .)
    ELSE            reduce using rule 92 (boolean_expression -> expression GREATER expression .)
    ELSIF           reduce using rule 92 (boolean_expression -> expression GREATER expression .)
    FI              reduce using rule 92 (boolean_expression -> expression GREATER expression .)
    WHILE           reduce using rule 92 (boolean_expression -> expression GREATER expression .)

  ! AND             [ shift and go to state 184 ]
  ! OR              [ shift and go to state 188 ]
  ! EQUAL           [ shift and go to state 186 ]
  ! NOTEQ           [ shift and go to state 189 ]
  ! GREATER         [ shift and go to state 185 ]
  ! GTEQUAL         [ shift and go to state 182 ]
  ! LESS            [ shift and go to state 183 ]
  ! LTEQUAL         [ shift and go to state 187 ]


state 237

    (90) boolean_expression -> expression EQUAL expression .
    (88) boolean_expression -> expression . AND expression
    (89) boolean_expression -> expression . OR expression
    (90) boolean_expression -> expression . EQUAL expression
    (91) boolean_expression -> expression . NOTEQ expression
    (92) boolean_expression -> expression . GREATER expression
    (93) boolean_expression -> expression . GTEQUAL expression
    (94) boolean_expression -> expression . LESS expression
    (95) boolean_expression -> expression . LTEQUAL expression

    AND             reduce using rule 90 (boolean_expression -> expression EQUAL expression .)
    OR              reduce using rule 90 (boolean_expression -> expression EQUAL expression .)
    EQUAL           reduce using rule 90 (boolean_expression -> expression EQUAL expression .)
    NOTEQ           reduce using rule 90 (boolean_expression -> expression EQUAL expression .)
    SEMI            reduce using rule 90 (boolean_expression -> expression EQUAL expression .)
    THEN            reduce using rule 90 (boolean_expression -> expression EQUAL expression .)
    COMMA           reduce using rule 90 (boolean_expression -> expression EQUAL expression .)
    RBRACKET        reduce using rule 90 (boolean_expression -> expression EQUAL expression .)
    COLON           reduce using rule 90 (boolean_expression -> expression EQUAL expression .)
    RPAREN          reduce using rule 90 (boolean_expression -> expression EQUAL expression .)
    DOWN            reduce using rule 90 (boolean_expression -> expression EQUAL expression .)
    BY              reduce using rule 90 (boolean_expression -> expression EQUAL expression .)
    TO              reduce using rule 90 (boolean_expression -> expression EQUAL expression .)
    ELSE            reduce using rule 90 (boolean_expression -> expression EQUAL expression .)
    ELSIF           reduce using rule 90 (boolean_expression -> expression EQUAL expression .)
    FI              reduce using rule 90 (boolean_expression -> expression EQUAL expression .)
    WHILE           reduce using rule 90 (boolean_expression -> expression EQUAL expression .)
    GREATER         shift and go to state 185
    GTEQUAL         shift and go to state 182
    LESS            shift and go to state 183
    LTEQUAL         shift and go to state 187

  ! GREATER         [ reduce using rule 90 (boolean_expression -> expression EQUAL expression .) ]
  ! GTEQUAL         [ reduce using rule 90 (boolean_expression -> expression EQUAL expression .) ]
  ! LESS            [ reduce using rule 90 (boolean_expression -> expression EQUAL expression .) ]
  ! LTEQUAL         [ reduce using rule 90 (boolean_expression -> expression EQUAL expression .) ]
  ! AND             [ shift and go to state 184 ]
  ! OR              [ shift and go to state 188 ]
  ! EQUAL           [ shift and go to state 186 ]
  ! NOTEQ           [ shift and go to state 189 ]


state 238

    (95) boolean_expression -> expression LTEQUAL expression .
    (88) boolean_expression -> expression . AND expression
    (89) boolean_expression -> expression . OR expression
    (90) boolean_expression -> expression . EQUAL expression
    (91) boolean_expression -> expression . NOTEQ expression
    (92) boolean_expression -> expression . GREATER expression
    (93) boolean_expression -> expression . GTEQUAL expression
    (94) boolean_expression -> expression . LESS expression
    (95) boolean_expression -> expression . LTEQUAL expression

    AND             reduce using rule 95 (boolean_expression -> expression LTEQUAL expression .)
    OR              reduce using rule 95 (boolean_expression -> expression LTEQUAL expression .)
    EQUAL           reduce using rule 95 (boolean_expression -> expression LTEQUAL expression .)
    NOTEQ           reduce using rule 95 (boolean_expression -> expression LTEQUAL expression .)
    GREATER         reduce using rule 95 (boolean_expression -> expression LTEQUAL expression .)
    GTEQUAL         reduce using rule 95 (boolean_expression -> expression LTEQUAL expression .)
    LESS            reduce using rule 95 (boolean_expression -> expression LTEQUAL expression .)
    LTEQUAL         reduce using rule 95 (boolean_expression -> expression LTEQUAL expression .)
    SEMI            reduce using rule 95 (boolean_expression -> expression LTEQUAL expression .)
    THEN            reduce using rule 95 (boolean_expression -> expression LTEQUAL expression .)
    COMMA           reduce using rule 95 (boolean_expression -> expression LTEQUAL expression .)
    RBRACKET        reduce using rule 95 (boolean_expression -> expression LTEQUAL expression .)
    COLON           reduce using rule 95 (boolean_expression -> expression LTEQUAL expression .)
    RPAREN          reduce using rule 95 (boolean_expression -> expression LTEQUAL expression .)
    DOWN            reduce using rule 95 (boolean_expression -> expression LTEQUAL expression .)
    BY              reduce using rule 95 (boolean_expression -> expression LTEQUAL expression .)
    TO              reduce using rule 95 (boolean_expression -> expression LTEQUAL expression .)
    ELSE            reduce using rule 95 (boolean_expression -> expression LTEQUAL expression .)
    ELSIF           reduce using rule 95 (boolean_expression -> expression LTEQUAL expression .)
    FI              reduce using rule 95 (boolean_expression -> expression LTEQUAL expression .)
    WHILE           reduce using rule 95 (boolean_expression -> expression LTEQUAL expression .)

  ! AND             [ shift and go to state 184 ]
  ! OR              [ shift and go to state 188 ]
  ! EQUAL           [ shift and go to state 186 ]
  ! NOTEQ           [ shift and go to state 189 ]
  ! GREATER         [ shift and go to state 185 ]
  ! GTEQUAL         [ shift and go to state 182 ]
  ! LESS            [ shift and go to state 183 ]
  ! LTEQUAL         [ shift and go to state 187 ]


state 239

    (89) boolean_expression -> expression OR expression .
    (88) boolean_expression -> expression . AND expression
    (89) boolean_expression -> expression . OR expression
    (90) boolean_expression -> expression . EQUAL expression
    (91) boolean_expression -> expression . NOTEQ expression
    (92) boolean_expression -> expression . GREATER expression
    (93) boolean_expression -> expression . GTEQUAL expression
    (94) boolean_expression -> expression . LESS expression
    (95) boolean_expression -> expression . LTEQUAL expression

    AND             reduce using rule 89 (boolean_expression -> expression OR expression .)
    OR              reduce using rule 89 (boolean_expression -> expression OR expression .)
    SEMI            reduce using rule 89 (boolean_expression -> expression OR expression .)
    THEN            reduce using rule 89 (boolean_expression -> expression OR expression .)
    COMMA           reduce using rule 89 (boolean_expression -> expression OR expression .)
    RBRACKET        reduce using rule 89 (boolean_expression -> expression OR expression .)
    COLON           reduce using rule 89 (boolean_expression -> expression OR expression .)
    RPAREN          reduce using rule 89 (boolean_expression -> expression OR expression .)
    DOWN            reduce using rule 89 (boolean_expression -> expression OR expression .)
    BY              reduce using rule 89 (boolean_expression -> expression OR expression .)
    TO              reduce using rule 89 (boolean_expression -> expression OR expression .)
    ELSE            reduce using rule 89 (boolean_expression -> expression OR expression .)
    ELSIF           reduce using rule 89 (boolean_expression -> expression OR expression .)
    FI              reduce using rule 89 (boolean_expression -> expression OR expression .)
    WHILE           reduce using rule 89 (boolean_expression -> expression OR expression .)
    EQUAL           shift and go to state 186
    NOTEQ           shift and go to state 189
    GREATER         shift and go to state 185
    GTEQUAL         shift and go to state 182
    LESS            shift and go to state 183
    LTEQUAL         shift and go to state 187

  ! EQUAL           [ reduce using rule 89 (boolean_expression -> expression OR expression .) ]
  ! NOTEQ           [ reduce using rule 89 (boolean_expression -> expression OR expression .) ]
  ! GREATER         [ reduce using rule 89 (boolean_expression -> expression OR expression .) ]
  ! GTEQUAL         [ reduce using rule 89 (boolean_expression -> expression OR expression .) ]
  ! LESS            [ reduce using rule 89 (boolean_expression -> expression OR expression .) ]
  ! LTEQUAL         [ reduce using rule 89 (boolean_expression -> expression OR expression .) ]
  ! AND             [ shift and go to state 184 ]
  ! OR              [ shift and go to state 188 ]


state 240

    (91) boolean_expression -> expression NOTEQ expression .
    (88) boolean_expression -> expression . AND expression
    (89) boolean_expression -> expression . OR expression
    (90) boolean_expression -> expression . EQUAL expression
    (91) boolean_expression -> expression . NOTEQ expression
    (92) boolean_expression -> expression . GREATER expression
    (93) boolean_expression -> expression . GTEQUAL expression
    (94) boolean_expression -> expression . LESS expression
    (95) boolean_expression -> expression . LTEQUAL expression

    AND             reduce using rule 91 (boolean_expression -> expression NOTEQ expression .)
    OR              reduce using rule 91 (boolean_expression -> expression NOTEQ expression .)
    EQUAL           reduce using rule 91 (boolean_expression -> expression NOTEQ expression .)
    NOTEQ           reduce using rule 91 (boolean_expression -> expression NOTEQ expression .)
    SEMI            reduce using rule 91 (boolean_expression -> expression NOTEQ expression .)
    THEN            reduce using rule 91 (boolean_expression -> expression NOTEQ expression .)
    COMMA           reduce using rule 91 (boolean_expression -> expression NOTEQ expression .)
    RBRACKET        reduce using rule 91 (boolean_expression -> expression NOTEQ expression .)
    COLON           reduce using rule 91 (boolean_expression -> expression NOTEQ expression .)
    RPAREN          reduce using rule 91 (boolean_expression -> expression NOTEQ expression .)
    DOWN            reduce using rule 91 (boolean_expression -> expression NOTEQ expression .)
    BY              reduce using rule 91 (boolean_expression -> expression NOTEQ expression .)
    TO              reduce using rule 91 (boolean_expression -> expression NOTEQ expression .)
    ELSE            reduce using rule 91 (boolean_expression -> expression NOTEQ expression .)
    ELSIF           reduce using rule 91 (boolean_expression -> expression NOTEQ expression .)
    FI              reduce using rule 91 (boolean_expression -> expression NOTEQ expression .)
    WHILE           reduce using rule 91 (boolean_expression -> expression NOTEQ expression .)
    GREATER         shift and go to state 185
    GTEQUAL         shift and go to state 182
    LESS            shift and go to state 183
    LTEQUAL         shift and go to state 187

  ! GREATER         [ reduce using rule 91 (boolean_expression -> expression NOTEQ expression .) ]
  ! GTEQUAL         [ reduce using rule 91 (boolean_expression -> expression NOTEQ expression .) ]
  ! LESS            [ reduce using rule 91 (boolean_expression -> expression NOTEQ expression .) ]
  ! LTEQUAL         [ reduce using rule 91 (boolean_expression -> expression NOTEQ expression .) ]
  ! AND             [ shift and go to state 184 ]
  ! OR              [ shift and go to state 188 ]
  ! EQUAL           [ shift and go to state 186 ]
  ! NOTEQ           [ shift and go to state 189 ]


state 241

    (105) operand1 -> operand1 operator2 operand2 .
    (107) operand2 -> operand2 . arithmetic_multiplicative_operator operand3
    (113) arithmetic_multiplicative_operator -> . TIMES
    (114) arithmetic_multiplicative_operator -> . DIVIDE
    (115) arithmetic_multiplicative_operator -> . MODULO

    PLUS            reduce using rule 105 (operand1 -> operand1 operator2 operand2 .)
    MINUS           reduce using rule 105 (operand1 -> operand1 operator2 operand2 .)
    CONCAT          reduce using rule 105 (operand1 -> operand1 operator2 operand2 .)
    IN              reduce using rule 105 (operand1 -> operand1 operator2 operand2 .)
    AND             reduce using rule 105 (operand1 -> operand1 operator2 operand2 .)
    OR              reduce using rule 105 (operand1 -> operand1 operator2 operand2 .)
    EQUAL           reduce using rule 105 (operand1 -> operand1 operator2 operand2 .)
    NOTEQ           reduce using rule 105 (operand1 -> operand1 operator2 operand2 .)
    GREATER         reduce using rule 105 (operand1 -> operand1 operator2 operand2 .)
    GTEQUAL         reduce using rule 105 (operand1 -> operand1 operator2 operand2 .)
    LESS            reduce using rule 105 (operand1 -> operand1 operator2 operand2 .)
    LTEQUAL         reduce using rule 105 (operand1 -> operand1 operator2 operand2 .)
    RBRACKET        reduce using rule 105 (operand1 -> operand1 operator2 operand2 .)
    COLON           reduce using rule 105 (operand1 -> operand1 operator2 operand2 .)
    THEN            reduce using rule 105 (operand1 -> operand1 operator2 operand2 .)
    SEMI            reduce using rule 105 (operand1 -> operand1 operator2 operand2 .)
    COMMA           reduce using rule 105 (operand1 -> operand1 operator2 operand2 .)
    RPAREN          reduce using rule 105 (operand1 -> operand1 operator2 operand2 .)
    DOWN            reduce using rule 105 (operand1 -> operand1 operator2 operand2 .)
    BY              reduce using rule 105 (operand1 -> operand1 operator2 operand2 .)
    TO              reduce using rule 105 (operand1 -> operand1 operator2 operand2 .)
    ELSE            reduce using rule 105 (operand1 -> operand1 operator2 operand2 .)
    ELSIF           reduce using rule 105 (operand1 -> operand1 operator2 operand2 .)
    FI              reduce using rule 105 (operand1 -> operand1 operator2 operand2 .)
    WHILE           reduce using rule 105 (operand1 -> operand1 operator2 operand2 .)
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 73
    MODULO          shift and go to state 66

    arithmetic_multiplicative_operator shift and go to state 196

state 242

    (161) then_clause -> THEN action_statement_list .

    FI              reduce using rule 161 (then_clause -> THEN action_statement_list .)
    ELSE            reduce using rule 161 (then_clause -> THEN action_statement_list .)
    ELSIF           reduce using rule 161 (then_clause -> THEN action_statement_list .)


state 243

    (165) action_statement_list -> action_statement . action_statement_nullable
    (166) action_statement_nullable -> . action_statement action_statement_nullable
    (167) action_statement_nullable -> . empty
    (143) action_statement -> . identifier COLON action SEMI
    (144) action_statement -> . action SEMI
    (206) empty -> .
    (23) identifier -> . ID
    (145) action -> . bracketed_action
    (146) action -> . assignment_action
    (147) action -> . call_action
    (148) action -> . exit_action
    (149) action -> . result_action
    (150) action -> . return_action
    (151) bracketed_action -> . if_action
    (152) bracketed_action -> . do_action
    (153) assignment_action -> . array_location assigning_operator expression
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (184) exit_action -> . EXIT identifier
    (188) result_action -> . RESULT expression
    (185) return_action -> . RETURN result
    (159) if_action -> . IF boolean_expression then_clause else_clause FI
    (160) if_action -> . IF boolean_expression then_clause FI
    (189) do_action -> . DO control_part SEMI action_statement_nullable OD
    (190) do_action -> . DO action_statement_nullable OD
    (83) array_location -> . location
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    FI              reduce using rule 206 (empty -> .)
    ELSE            reduce using rule 206 (empty -> .)
    ELSIF           reduce using rule 206 (empty -> .)
    ID              shift and go to state 56
    EXIT            shift and go to state 42
    RESULT          shift and go to state 44
    RETURN          shift and go to state 34
    IF              shift and go to state 31
    DO              shift and go to state 10
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    call_action                    shift and go to state 2
    empty                          shift and go to state 51
    action_statement               shift and go to state 53
    return_action                  shift and go to state 43
    if_action                      shift and go to state 28
    builtin_name                   shift and go to state 29
    bracketed_action               shift and go to state 30
    assignment_action              shift and go to state 4
    result_action                  shift and go to state 11
    action                         shift and go to state 33
    string_element                 shift and go to state 32
    string_slice                   shift and go to state 45
    identifier                     shift and go to state 35
    array_location                 shift and go to state 13
    dereferenced_reference         shift and go to state 16
    array_slice                    shift and go to state 36
    do_action                      shift and go to state 40
    builtin_call                   shift and go to state 12
    exit_action                    shift and go to state 25
    array_element                  shift and go to state 18
    action_statement_nullable      shift and go to state 283
    location                       shift and go to state 41

state 244

    (160) if_action -> IF boolean_expression then_clause FI .

    SEMI            reduce using rule 160 (if_action -> IF boolean_expression then_clause FI .)


state 245

    (163) else_clause -> ELSIF . boolean_expression then_clause else_clause
    (164) else_clause -> ELSIF . boolean_expression then_clause
    (88) boolean_expression -> . expression AND expression
    (89) boolean_expression -> . expression OR expression
    (90) boolean_expression -> . expression EQUAL expression
    (91) boolean_expression -> . expression NOTEQ expression
    (92) boolean_expression -> . expression GREATER expression
    (93) boolean_expression -> . expression GTEQUAL expression
    (94) boolean_expression -> . expression LESS expression
    (95) boolean_expression -> . expression LTEQUAL expression
    (84) expression -> . operand0
    (85) expression -> . boolean_expression
    (86) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (96) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (97) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (104) operand1 -> . operand2
    (105) operand1 -> . operand1 operator2 operand2
    (106) operand2 -> . operand3
    (107) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (108) operand3 -> . monadic_operator operand4
    (109) operand3 -> . operand4
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    IF              shift and go to state 110
    MINUS           shift and go to state 100
    NOT             shift and go to state 104
    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ID              shift and go to state 56
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    integer_literal                shift and go to state 115
    empty_literal                  shift and go to state 83
    operand0                       shift and go to state 84
    expression                     shift and go to state 85
    call_action                    shift and go to state 86
    operand1                       shift and go to state 87
    value_array_slice              shift and go to state 89
    parenthesized_expression       shift and go to state 91
    boolean_expression             shift and go to state 284
    character_literal              shift and go to state 93
    operand3                       shift and go to state 94
    literal                        shift and go to state 96
    dereferenced_reference         shift and go to state 16
    array_location                 shift and go to state 101
    operand2                       shift and go to state 103
    builtin_call                   shift and go to state 12
    array_element                  shift and go to state 18
    array_slice                    shift and go to state 36
    conditional_expression         shift and go to state 88
    boolean_literal                shift and go to state 102
    referenced_location            shift and go to state 111
    builtin_name                   shift and go to state 29
    primitive_value                shift and go to state 107
    identifier                     shift and go to state 109
    value_array_element            shift and go to state 98
    operand4                       shift and go to state 112
    string_element                 shift and go to state 32
    character_string_literal       shift and go to state 113
    monadic_operator               shift and go to state 114
    location                       shift and go to state 41
    string_slice                   shift and go to state 45

state 246

    (162) else_clause -> ELSE . action_statement_list
    (165) action_statement_list -> . action_statement action_statement_nullable
    (143) action_statement -> . identifier COLON action SEMI
    (144) action_statement -> . action SEMI
    (23) identifier -> . ID
    (145) action -> . bracketed_action
    (146) action -> . assignment_action
    (147) action -> . call_action
    (148) action -> . exit_action
    (149) action -> . result_action
    (150) action -> . return_action
    (151) bracketed_action -> . if_action
    (152) bracketed_action -> . do_action
    (153) assignment_action -> . array_location assigning_operator expression
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (184) exit_action -> . EXIT identifier
    (188) result_action -> . RESULT expression
    (185) return_action -> . RETURN result
    (159) if_action -> . IF boolean_expression then_clause else_clause FI
    (160) if_action -> . IF boolean_expression then_clause FI
    (189) do_action -> . DO control_part SEMI action_statement_nullable OD
    (190) do_action -> . DO action_statement_nullable OD
    (83) array_location -> . location
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    ID              shift and go to state 56
    EXIT            shift and go to state 42
    RESULT          shift and go to state 44
    RETURN          shift and go to state 34
    IF              shift and go to state 31
    DO              shift and go to state 10
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    call_action                    shift and go to state 2
    assignment_action              shift and go to state 4
    action_statement_list          shift and go to state 285
    action_statement               shift and go to state 243
    return_action                  shift and go to state 43
    if_action                      shift and go to state 28
    builtin_name                   shift and go to state 29
    bracketed_action               shift and go to state 30
    result_action                  shift and go to state 11
    action                         shift and go to state 33
    string_element                 shift and go to state 32
    string_slice                   shift and go to state 45
    identifier                     shift and go to state 35
    array_location                 shift and go to state 13
    dereferenced_reference         shift and go to state 16
    array_slice                    shift and go to state 36
    do_action                      shift and go to state 40
    builtin_call                   shift and go to state 12
    exit_action                    shift and go to state 25
    array_element                  shift and go to state 18
    location                       shift and go to state 41

state 247

    (159) if_action -> IF boolean_expression then_clause else_clause . FI

    FI              shift and go to state 286


state 248

    (107) operand2 -> operand2 arithmetic_multiplicative_operator operand3 .

    TIMES           reduce using rule 107 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    DIVIDE          reduce using rule 107 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    MODULO          reduce using rule 107 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    PLUS            reduce using rule 107 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    MINUS           reduce using rule 107 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    CONCAT          reduce using rule 107 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    IN              reduce using rule 107 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    AND             reduce using rule 107 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    OR              reduce using rule 107 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    EQUAL           reduce using rule 107 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    NOTEQ           reduce using rule 107 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    GREATER         reduce using rule 107 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    GTEQUAL         reduce using rule 107 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LESS            reduce using rule 107 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LTEQUAL         reduce using rule 107 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    THEN            reduce using rule 107 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    SEMI            reduce using rule 107 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    COMMA           reduce using rule 107 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    RBRACKET        reduce using rule 107 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    COLON           reduce using rule 107 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    RPAREN          reduce using rule 107 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    DOWN            reduce using rule 107 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    BY              reduce using rule 107 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    TO              reduce using rule 107 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    ELSE            reduce using rule 107 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    ELSIF           reduce using rule 107 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    FI              reduce using rule 107 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    WHILE           reduce using rule 107 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)


state 249

    (136) value_array_slice -> primitive_value LBRACKET expression . COLON expression RBRACKET
    (80) expression_list -> expression .
    (81) expression_list -> expression . COMMA expression_list
    (88) boolean_expression -> expression . AND expression
    (89) boolean_expression -> expression . OR expression
    (90) boolean_expression -> expression . EQUAL expression
    (91) boolean_expression -> expression . NOTEQ expression
    (92) boolean_expression -> expression . GREATER expression
    (93) boolean_expression -> expression . GTEQUAL expression
    (94) boolean_expression -> expression . LESS expression
    (95) boolean_expression -> expression . LTEQUAL expression

    COLON           shift and go to state 287
    RBRACKET        reduce using rule 80 (expression_list -> expression .)
    COMMA           shift and go to state 220
    AND             shift and go to state 184
    OR              shift and go to state 188
    EQUAL           shift and go to state 186
    NOTEQ           shift and go to state 189
    GREATER         shift and go to state 185
    GTEQUAL         shift and go to state 182
    LESS            shift and go to state 183
    LTEQUAL         shift and go to state 187


state 250

    (135) value_array_element -> primitive_value LBRACKET expression_list . RBRACKET

    RBRACKET        shift and go to state 288


state 251

    (87) parenthesized_expression -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    CONCAT          reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    IN              reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    NOTEQ           reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    GTEQUAL         reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    LESS            reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    LTEQUAL         reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    DOWN            reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    BY              reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    TO              reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    ELSIF           reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    FI              reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 87 (parenthesized_expression -> LPAREN expression RPAREN .)


state 252

    (96) conditional_expression -> IF boolean_expression then_expression . else_expression FI
    (97) conditional_expression -> IF boolean_expression then_expression . elsif_expression else_expression FI
    (99) else_expression -> . ELSE expression
    (100) elsif_expression -> . ELSIF boolean_expression then_expression
    (101) elsif_expression -> . elsif_expression ELSIF boolean_expression then_expression

    ELSE            shift and go to state 290
    ELSIF           shift and go to state 289

    else_expression                shift and go to state 291
    elsif_expression               shift and go to state 292

state 253

    (98) then_expression -> THEN . expression
    (84) expression -> . operand0
    (85) expression -> . boolean_expression
    (86) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (88) boolean_expression -> . expression AND expression
    (89) boolean_expression -> . expression OR expression
    (90) boolean_expression -> . expression EQUAL expression
    (91) boolean_expression -> . expression NOTEQ expression
    (92) boolean_expression -> . expression GREATER expression
    (93) boolean_expression -> . expression GTEQUAL expression
    (94) boolean_expression -> . expression LESS expression
    (95) boolean_expression -> . expression LTEQUAL expression
    (96) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (97) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (104) operand1 -> . operand2
    (105) operand1 -> . operand1 operator2 operand2
    (106) operand2 -> . operand3
    (107) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (108) operand3 -> . monadic_operator operand4
    (109) operand3 -> . operand4
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    IF              shift and go to state 110
    MINUS           shift and go to state 100
    NOT             shift and go to state 104
    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ID              shift and go to state 56
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    empty_literal                  shift and go to state 83
    operand0                       shift and go to state 84
    expression                     shift and go to state 293
    call_action                    shift and go to state 86
    operand1                       shift and go to state 87
    value_array_slice              shift and go to state 89
    monadic_operator               shift and go to state 114
    parenthesized_expression       shift and go to state 91
    boolean_expression             shift and go to state 120
    character_literal              shift and go to state 93
    operand3                       shift and go to state 94
    literal                        shift and go to state 96
    builtin_call                   shift and go to state 12
    array_location                 shift and go to state 101
    operand2                       shift and go to state 103
    array_element                  shift and go to state 18
    array_slice                    shift and go to state 36
    conditional_expression         shift and go to state 88
    boolean_literal                shift and go to state 102
    builtin_name                   shift and go to state 29
    primitive_value                shift and go to state 107
    value_array_element            shift and go to state 98
    referenced_location            shift and go to state 111
    operand4                       shift and go to state 112
    dereferenced_reference         shift and go to state 16
    string_element                 shift and go to state 32
    character_string_literal       shift and go to state 113
    identifier                     shift and go to state 109
    location                       shift and go to state 41
    integer_literal                shift and go to state 115
    string_slice                   shift and go to state 45

state 254

    (76) string_slice -> identifier LBRACKET left_element COLON . right_element RBRACKET
    (78) right_element -> . expression
    (84) expression -> . operand0
    (85) expression -> . boolean_expression
    (86) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (88) boolean_expression -> . expression AND expression
    (89) boolean_expression -> . expression OR expression
    (90) boolean_expression -> . expression EQUAL expression
    (91) boolean_expression -> . expression NOTEQ expression
    (92) boolean_expression -> . expression GREATER expression
    (93) boolean_expression -> . expression GTEQUAL expression
    (94) boolean_expression -> . expression LESS expression
    (95) boolean_expression -> . expression LTEQUAL expression
    (96) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (97) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (104) operand1 -> . operand2
    (105) operand1 -> . operand1 operator2 operand2
    (106) operand2 -> . operand3
    (107) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (108) operand3 -> . monadic_operator operand4
    (109) operand3 -> . operand4
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    IF              shift and go to state 110
    MINUS           shift and go to state 100
    NOT             shift and go to state 104
    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ID              shift and go to state 56
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    empty_literal                  shift and go to state 83
    operand0                       shift and go to state 84
    expression                     shift and go to state 294
    call_action                    shift and go to state 86
    operand1                       shift and go to state 87
    value_array_slice              shift and go to state 89
    monadic_operator               shift and go to state 114
    parenthesized_expression       shift and go to state 91
    integer_literal                shift and go to state 115
    character_literal              shift and go to state 93
    operand3                       shift and go to state 94
    literal                        shift and go to state 96
    builtin_call                   shift and go to state 12
    array_location                 shift and go to state 101
    operand2                       shift and go to state 103
    array_element                  shift and go to state 18
    array_slice                    shift and go to state 36
    conditional_expression         shift and go to state 88
    boolean_literal                shift and go to state 102
    referenced_location            shift and go to state 111
    builtin_name                   shift and go to state 29
    primitive_value                shift and go to state 107
    right_element                  shift and go to state 295
    value_array_element            shift and go to state 98
    operand4                       shift and go to state 112
    dereferenced_reference         shift and go to state 16
    string_element                 shift and go to state 32
    character_string_literal       shift and go to state 113
    identifier                     shift and go to state 109
    location                       shift and go to state 41
    boolean_expression             shift and go to state 120
    string_slice                   shift and go to state 45

state 255

    (74) string_element -> identifier LBRACKET start_element RBRACKET .

    ARROW           reduce using rule 74 (string_element -> identifier LBRACKET start_element RBRACKET .)
    LBRACKET        reduce using rule 74 (string_element -> identifier LBRACKET start_element RBRACKET .)
    TIMES           reduce using rule 74 (string_element -> identifier LBRACKET start_element RBRACKET .)
    DIVIDE          reduce using rule 74 (string_element -> identifier LBRACKET start_element RBRACKET .)
    MODULO          reduce using rule 74 (string_element -> identifier LBRACKET start_element RBRACKET .)
    PLUS            reduce using rule 74 (string_element -> identifier LBRACKET start_element RBRACKET .)
    MINUS           reduce using rule 74 (string_element -> identifier LBRACKET start_element RBRACKET .)
    CONCAT          reduce using rule 74 (string_element -> identifier LBRACKET start_element RBRACKET .)
    IN              reduce using rule 74 (string_element -> identifier LBRACKET start_element RBRACKET .)
    AND             reduce using rule 74 (string_element -> identifier LBRACKET start_element RBRACKET .)
    OR              reduce using rule 74 (string_element -> identifier LBRACKET start_element RBRACKET .)
    EQUAL           reduce using rule 74 (string_element -> identifier LBRACKET start_element RBRACKET .)
    NOTEQ           reduce using rule 74 (string_element -> identifier LBRACKET start_element RBRACKET .)
    GREATER         reduce using rule 74 (string_element -> identifier LBRACKET start_element RBRACKET .)
    GTEQUAL         reduce using rule 74 (string_element -> identifier LBRACKET start_element RBRACKET .)
    LESS            reduce using rule 74 (string_element -> identifier LBRACKET start_element RBRACKET .)
    LTEQUAL         reduce using rule 74 (string_element -> identifier LBRACKET start_element RBRACKET .)
    THEN            reduce using rule 74 (string_element -> identifier LBRACKET start_element RBRACKET .)
    SEMI            reduce using rule 74 (string_element -> identifier LBRACKET start_element RBRACKET .)
    COMMA           reduce using rule 74 (string_element -> identifier LBRACKET start_element RBRACKET .)
    RBRACKET        reduce using rule 74 (string_element -> identifier LBRACKET start_element RBRACKET .)
    COLON           reduce using rule 74 (string_element -> identifier LBRACKET start_element RBRACKET .)
    RPAREN          reduce using rule 74 (string_element -> identifier LBRACKET start_element RBRACKET .)
    DOWN            reduce using rule 74 (string_element -> identifier LBRACKET start_element RBRACKET .)
    BY              reduce using rule 74 (string_element -> identifier LBRACKET start_element RBRACKET .)
    TO              reduce using rule 74 (string_element -> identifier LBRACKET start_element RBRACKET .)
    ELSE            reduce using rule 74 (string_element -> identifier LBRACKET start_element RBRACKET .)
    ELSIF           reduce using rule 74 (string_element -> identifier LBRACKET start_element RBRACKET .)
    FI              reduce using rule 74 (string_element -> identifier LBRACKET start_element RBRACKET .)
    WHILE           reduce using rule 74 (string_element -> identifier LBRACKET start_element RBRACKET .)
    ASSIGN          reduce using rule 74 (string_element -> identifier LBRACKET start_element RBRACKET .)


state 256

    (143) action_statement -> identifier COLON action SEMI .

    ID              reduce using rule 143 (action_statement -> identifier COLON action SEMI .)
    EXIT            reduce using rule 143 (action_statement -> identifier COLON action SEMI .)
    RESULT          reduce using rule 143 (action_statement -> identifier COLON action SEMI .)
    RETURN          reduce using rule 143 (action_statement -> identifier COLON action SEMI .)
    IF              reduce using rule 143 (action_statement -> identifier COLON action SEMI .)
    DO              reduce using rule 143 (action_statement -> identifier COLON action SEMI .)
    ABS             reduce using rule 143 (action_statement -> identifier COLON action SEMI .)
    ASC             reduce using rule 143 (action_statement -> identifier COLON action SEMI .)
    NUM             reduce using rule 143 (action_statement -> identifier COLON action SEMI .)
    UPPER           reduce using rule 143 (action_statement -> identifier COLON action SEMI .)
    LOWER           reduce using rule 143 (action_statement -> identifier COLON action SEMI .)
    LENGTH          reduce using rule 143 (action_statement -> identifier COLON action SEMI .)
    READ            reduce using rule 143 (action_statement -> identifier COLON action SEMI .)
    PRINT           reduce using rule 143 (action_statement -> identifier COLON action SEMI .)
    FI              reduce using rule 143 (action_statement -> identifier COLON action SEMI .)
    ELSE            reduce using rule 143 (action_statement -> identifier COLON action SEMI .)
    ELSIF           reduce using rule 143 (action_statement -> identifier COLON action SEMI .)
    OD              reduce using rule 143 (action_statement -> identifier COLON action SEMI .)
    DCL             reduce using rule 143 (action_statement -> identifier COLON action SEMI .)
    SYN             reduce using rule 143 (action_statement -> identifier COLON action SEMI .)
    TYPE            reduce using rule 143 (action_statement -> identifier COLON action SEMI .)
    $end            reduce using rule 143 (action_statement -> identifier COLON action SEMI .)
    END             reduce using rule 143 (action_statement -> identifier COLON action SEMI .)


state 257

    (60) array_mode -> ARRAY LBRACKET index_mode_list . RBRACKET element_mode

    RBRACKET        shift and go to state 296


state 258

    (64) index_mode -> literal_range .

    COMMA           reduce using rule 64 (index_mode -> literal_range .)
    RBRACKET        reduce using rule 64 (index_mode -> literal_range .)


state 259

    (61) index_mode_list -> index_mode .
    (62) index_mode_list -> index_mode . COMMA index_mode_list

    RBRACKET        reduce using rule 61 (index_mode_list -> index_mode .)
    COMMA           shift and go to state 297


state 260

    (46) discrete_mode_name -> identifier .
    (66) location -> identifier .
    (74) string_element -> identifier . LBRACKET start_element RBRACKET
    (76) string_slice -> identifier . LBRACKET left_element COLON right_element RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    LPAREN          reduce using rule 46 (discrete_mode_name -> identifier .)
    ARROW           reduce using rule 66 (location -> identifier .)
    TIMES           reduce using rule 66 (location -> identifier .)
    DIVIDE          reduce using rule 66 (location -> identifier .)
    MODULO          reduce using rule 66 (location -> identifier .)
    PLUS            reduce using rule 66 (location -> identifier .)
    MINUS           reduce using rule 66 (location -> identifier .)
    CONCAT          reduce using rule 66 (location -> identifier .)
    IN              reduce using rule 66 (location -> identifier .)
    AND             reduce using rule 66 (location -> identifier .)
    OR              reduce using rule 66 (location -> identifier .)
    EQUAL           reduce using rule 66 (location -> identifier .)
    NOTEQ           reduce using rule 66 (location -> identifier .)
    GREATER         reduce using rule 66 (location -> identifier .)
    GTEQUAL         reduce using rule 66 (location -> identifier .)
    LESS            reduce using rule 66 (location -> identifier .)
    LTEQUAL         reduce using rule 66 (location -> identifier .)
    COLON           reduce using rule 66 (location -> identifier .)
    LBRACKET        shift and go to state 122

  ! LBRACKET        [ reduce using rule 66 (location -> identifier .) ]


state 261

    (53) lower_bound -> expression .
    (88) boolean_expression -> expression . AND expression
    (89) boolean_expression -> expression . OR expression
    (90) boolean_expression -> expression . EQUAL expression
    (91) boolean_expression -> expression . NOTEQ expression
    (92) boolean_expression -> expression . GREATER expression
    (93) boolean_expression -> expression . GTEQUAL expression
    (94) boolean_expression -> expression . LESS expression
    (95) boolean_expression -> expression . LTEQUAL expression

    COLON           reduce using rule 53 (lower_bound -> expression .)
    AND             shift and go to state 184
    OR              shift and go to state 188
    EQUAL           shift and go to state 186
    NOTEQ           shift and go to state 189
    GREATER         shift and go to state 185
    GTEQUAL         shift and go to state 182
    LESS            shift and go to state 183
    LTEQUAL         shift and go to state 187


state 262

    (63) index_mode -> discrete_mode .
    (51) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    COMMA           reduce using rule 63 (index_mode -> discrete_mode .)
    RBRACKET        reduce using rule 63 (index_mode -> discrete_mode .)
    LPAREN          shift and go to state 211


state 263

    (52) literal_range -> lower_bound . COLON upper_bound

    COLON           shift and go to state 298


state 264

    (50) discrete_range_mode -> discrete_mode_name LPAREN literal_range . RPAREN

    RPAREN          shift and go to state 299


state 265

    (20) initialization -> ASSIGN expression .
    (88) boolean_expression -> expression . AND expression
    (89) boolean_expression -> expression . OR expression
    (90) boolean_expression -> expression . EQUAL expression
    (91) boolean_expression -> expression . NOTEQ expression
    (92) boolean_expression -> expression . GREATER expression
    (93) boolean_expression -> expression . GTEQUAL expression
    (94) boolean_expression -> expression . LESS expression
    (95) boolean_expression -> expression . LTEQUAL expression

    COMMA           reduce using rule 20 (initialization -> ASSIGN expression .)
    SEMI            reduce using rule 20 (initialization -> ASSIGN expression .)
    AND             shift and go to state 184
    OR              shift and go to state 188
    EQUAL           shift and go to state 186
    NOTEQ           shift and go to state 189
    GREATER         shift and go to state 185
    GTEQUAL         shift and go to state 182
    LESS            shift and go to state 183
    LTEQUAL         shift and go to state 187


state 266

    (51) discrete_range_mode -> discrete_mode LPAREN literal_range . RPAREN

    RPAREN          shift and go to state 300


state 267

    (59) string_length -> integer_literal .

    RBRACKET        reduce using rule 59 (string_length -> integer_literal .)


state 268

    (58) string_mode -> CHARS LBRACKET string_length . RBRACKET

    RBRACKET        shift and go to state 301


state 269

    (189) do_action -> DO control_part SEMI action_statement_nullable OD .

    SEMI            reduce using rule 189 (do_action -> DO control_part SEMI action_statement_nullable OD .)


state 270

    (46) discrete_mode_name -> identifier .

    LPAREN          reduce using rule 46 (discrete_mode_name -> identifier .)


state 271

    (204) range_enumeration -> identifier IN discrete_mode .
    (51) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    WHILE           reduce using rule 204 (range_enumeration -> identifier IN discrete_mode .)
    SEMI            reduce using rule 204 (range_enumeration -> identifier IN discrete_mode .)
    LPAREN          shift and go to state 211


state 272

    (203) range_enumeration -> identifier DOWN IN . discrete_mode
    (42) discrete_mode -> . integer_mode
    (43) discrete_mode -> . boolean_mode
    (44) discrete_mode -> . character_mode
    (45) discrete_mode -> . discrete_range_mode
    (47) integer_mode -> . INT
    (48) boolean_mode -> . BOOL
    (49) character_mode -> . CHAR
    (50) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (51) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (46) discrete_mode_name -> . identifier
    (23) identifier -> . ID

    INT             shift and go to state 131
    BOOL            shift and go to state 130
    CHAR            shift and go to state 129
    ID              shift and go to state 47

    integer_mode                   shift and go to state 138
    discrete_range_mode            shift and go to state 134
    discrete_mode                  shift and go to state 302
    identifier                     shift and go to state 270
    discrete_mode_name             shift and go to state 135
    character_mode                 shift and go to state 142
    boolean_mode                   shift and go to state 143

state 273

    (197) step_enumeration -> identifier ASSIGN expression . step_value DOWN end_value
    (198) step_enumeration -> identifier ASSIGN expression . step_value end_value
    (199) step_enumeration -> identifier ASSIGN expression . DOWN end_value
    (200) step_enumeration -> identifier ASSIGN expression . end_value
    (88) boolean_expression -> expression . AND expression
    (89) boolean_expression -> expression . OR expression
    (90) boolean_expression -> expression . EQUAL expression
    (91) boolean_expression -> expression . NOTEQ expression
    (92) boolean_expression -> expression . GREATER expression
    (93) boolean_expression -> expression . GTEQUAL expression
    (94) boolean_expression -> expression . LESS expression
    (95) boolean_expression -> expression . LTEQUAL expression
    (201) step_value -> . BY expression
    (202) end_value -> . TO expression

    DOWN            shift and go to state 304
    AND             shift and go to state 184
    OR              shift and go to state 188
    EQUAL           shift and go to state 186
    NOTEQ           shift and go to state 189
    GREATER         shift and go to state 185
    GTEQUAL         shift and go to state 182
    LESS            shift and go to state 183
    LTEQUAL         shift and go to state 187
    BY              shift and go to state 306
    TO              shift and go to state 307

    end_value                      shift and go to state 305
    step_value                     shift and go to state 303

state 274

    (80) expression_list -> expression .
    (81) expression_list -> expression . COMMA expression_list
    (88) boolean_expression -> expression . AND expression
    (89) boolean_expression -> expression . OR expression
    (90) boolean_expression -> expression . EQUAL expression
    (91) boolean_expression -> expression . NOTEQ expression
    (92) boolean_expression -> expression . GREATER expression
    (93) boolean_expression -> expression . GTEQUAL expression
    (94) boolean_expression -> expression . LESS expression
    (95) boolean_expression -> expression . LTEQUAL expression

    RBRACKET        reduce using rule 80 (expression_list -> expression .)
    COMMA           shift and go to state 220
    AND             shift and go to state 184
    OR              shift and go to state 188
    EQUAL           shift and go to state 186
    NOTEQ           shift and go to state 189
    GREATER         shift and go to state 185
    GTEQUAL         shift and go to state 182
    LESS            shift and go to state 183
    LTEQUAL         shift and go to state 187


state 275

    (81) expression_list -> expression COMMA expression_list .

    RBRACKET        reduce using rule 81 (expression_list -> expression COMMA expression_list .)


state 276

    (54) upper_bound -> expression .
    (88) boolean_expression -> expression . AND expression
    (89) boolean_expression -> expression . OR expression
    (90) boolean_expression -> expression . EQUAL expression
    (91) boolean_expression -> expression . NOTEQ expression
    (92) boolean_expression -> expression . GREATER expression
    (93) boolean_expression -> expression . GTEQUAL expression
    (94) boolean_expression -> expression . LESS expression
    (95) boolean_expression -> expression . LTEQUAL expression

    COMMA           reduce using rule 54 (upper_bound -> expression .)
    RBRACKET        reduce using rule 54 (upper_bound -> expression .)
    RPAREN          reduce using rule 54 (upper_bound -> expression .)
    AND             shift and go to state 184
    OR              shift and go to state 188
    EQUAL           shift and go to state 186
    NOTEQ           shift and go to state 189
    GREATER         shift and go to state 185
    GTEQUAL         shift and go to state 182
    LESS            shift and go to state 183
    LTEQUAL         shift and go to state 187


state 277

    (82) array_slice -> array_location LBRACKET lower_bound COLON upper_bound . RBRACKET

    RBRACKET        shift and go to state 308


state 278

    (29) procedure_definition -> PROC LPAREN formal_parameter_list . RPAREN result_spec SEMI statement_nullable END SEMI
    (30) procedure_definition -> PROC LPAREN formal_parameter_list . RPAREN SEMI statement_nullable END SEMI

    RPAREN          shift and go to state 309


state 279

    (33) formal_parameter -> identifier_list . mode LOC
    (34) formal_parameter -> identifier_list . mode
    (37) mode -> . mode_name
    (38) mode -> . discrete_mode
    (39) mode -> . reference_mode
    (40) mode -> . composite_mode
    (41) mode_name -> . identifier
    (42) discrete_mode -> . integer_mode
    (43) discrete_mode -> . boolean_mode
    (44) discrete_mode -> . character_mode
    (45) discrete_mode -> . discrete_range_mode
    (55) reference_mode -> . REF mode
    (56) composite_mode -> . string_mode
    (57) composite_mode -> . array_mode
    (23) identifier -> . ID
    (47) integer_mode -> . INT
    (48) boolean_mode -> . BOOL
    (49) character_mode -> . CHAR
    (50) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (51) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (58) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (60) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (46) discrete_mode_name -> . identifier

    REF             shift and go to state 146
    ID              shift and go to state 47
    INT             shift and go to state 131
    BOOL            shift and go to state 130
    CHAR            shift and go to state 129
    CHARS           shift and go to state 147
    ARRAY           shift and go to state 132

    integer_mode                   shift and go to state 138
    reference_mode                 shift and go to state 139
    string_mode                    shift and go to state 137
    identifier                     shift and go to state 140
    composite_mode                 shift and go to state 133
    array_mode                     shift and go to state 141
    discrete_range_mode            shift and go to state 134
    boolean_mode                   shift and go to state 143
    discrete_mode_name             shift and go to state 135
    mode_name                      shift and go to state 136
    character_mode                 shift and go to state 142
    mode                           shift and go to state 310
    discrete_mode                  shift and go to state 145

state 280

    (31) formal_parameter_list -> formal_parameter .
    (32) formal_parameter_list -> formal_parameter . COMMA formal_parameter_list

    RPAREN          reduce using rule 31 (formal_parameter_list -> formal_parameter .)
    COMMA           shift and go to state 311


state 281

    (183) parameter_list -> expression COMMA parameter_list .

    RPAREN          reduce using rule 183 (parameter_list -> expression COMMA parameter_list .)


state 282

    (13) synonym_definition -> identifier_list mode ASSIGN expression .
    (88) boolean_expression -> expression . AND expression
    (89) boolean_expression -> expression . OR expression
    (90) boolean_expression -> expression . EQUAL expression
    (91) boolean_expression -> expression . NOTEQ expression
    (92) boolean_expression -> expression . GREATER expression
    (93) boolean_expression -> expression . GTEQUAL expression
    (94) boolean_expression -> expression . LESS expression
    (95) boolean_expression -> expression . LTEQUAL expression

    COMMA           reduce using rule 13 (synonym_definition -> identifier_list mode ASSIGN expression .)
    SEMI            reduce using rule 13 (synonym_definition -> identifier_list mode ASSIGN expression .)
    AND             shift and go to state 184
    OR              shift and go to state 188
    EQUAL           shift and go to state 186
    NOTEQ           shift and go to state 189
    GREATER         shift and go to state 185
    GTEQUAL         shift and go to state 182
    LESS            shift and go to state 183
    LTEQUAL         shift and go to state 187


state 283

    (165) action_statement_list -> action_statement action_statement_nullable .

    FI              reduce using rule 165 (action_statement_list -> action_statement action_statement_nullable .)
    ELSE            reduce using rule 165 (action_statement_list -> action_statement action_statement_nullable .)
    ELSIF           reduce using rule 165 (action_statement_list -> action_statement action_statement_nullable .)


state 284

    (163) else_clause -> ELSIF boolean_expression . then_clause else_clause
    (164) else_clause -> ELSIF boolean_expression . then_clause
    (85) expression -> boolean_expression .
    (161) then_clause -> . THEN action_statement_list

    AND             reduce using rule 85 (expression -> boolean_expression .)
    OR              reduce using rule 85 (expression -> boolean_expression .)
    EQUAL           reduce using rule 85 (expression -> boolean_expression .)
    NOTEQ           reduce using rule 85 (expression -> boolean_expression .)
    GREATER         reduce using rule 85 (expression -> boolean_expression .)
    GTEQUAL         reduce using rule 85 (expression -> boolean_expression .)
    LESS            reduce using rule 85 (expression -> boolean_expression .)
    LTEQUAL         reduce using rule 85 (expression -> boolean_expression .)
    THEN            shift and go to state 193

    then_clause                    shift and go to state 312

state 285

    (162) else_clause -> ELSE action_statement_list .

    FI              reduce using rule 162 (else_clause -> ELSE action_statement_list .)


state 286

    (159) if_action -> IF boolean_expression then_clause else_clause FI .

    SEMI            reduce using rule 159 (if_action -> IF boolean_expression then_clause else_clause FI .)


state 287

    (136) value_array_slice -> primitive_value LBRACKET expression COLON . expression RBRACKET
    (84) expression -> . operand0
    (85) expression -> . boolean_expression
    (86) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (88) boolean_expression -> . expression AND expression
    (89) boolean_expression -> . expression OR expression
    (90) boolean_expression -> . expression EQUAL expression
    (91) boolean_expression -> . expression NOTEQ expression
    (92) boolean_expression -> . expression GREATER expression
    (93) boolean_expression -> . expression GTEQUAL expression
    (94) boolean_expression -> . expression LESS expression
    (95) boolean_expression -> . expression LTEQUAL expression
    (96) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (97) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (104) operand1 -> . operand2
    (105) operand1 -> . operand1 operator2 operand2
    (106) operand2 -> . operand3
    (107) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (108) operand3 -> . monadic_operator operand4
    (109) operand3 -> . operand4
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    IF              shift and go to state 110
    MINUS           shift and go to state 100
    NOT             shift and go to state 104
    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ID              shift and go to state 56
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    empty_literal                  shift and go to state 83
    operand0                       shift and go to state 84
    expression                     shift and go to state 313
    call_action                    shift and go to state 86
    operand1                       shift and go to state 87
    value_array_slice              shift and go to state 89
    monadic_operator               shift and go to state 114
    parenthesized_expression       shift and go to state 91
    boolean_expression             shift and go to state 120
    character_literal              shift and go to state 93
    operand3                       shift and go to state 94
    literal                        shift and go to state 96
    builtin_call                   shift and go to state 12
    array_location                 shift and go to state 101
    operand2                       shift and go to state 103
    array_element                  shift and go to state 18
    array_slice                    shift and go to state 36
    conditional_expression         shift and go to state 88
    boolean_literal                shift and go to state 102
    builtin_name                   shift and go to state 29
    primitive_value                shift and go to state 107
    value_array_element            shift and go to state 98
    referenced_location            shift and go to state 111
    operand4                       shift and go to state 112
    dereferenced_reference         shift and go to state 16
    string_element                 shift and go to state 32
    character_string_literal       shift and go to state 113
    identifier                     shift and go to state 109
    location                       shift and go to state 41
    integer_literal                shift and go to state 115
    string_slice                   shift and go to state 45

state 288

    (135) value_array_element -> primitive_value LBRACKET expression_list RBRACKET .

    LBRACKET        reduce using rule 135 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    TIMES           reduce using rule 135 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    DIVIDE          reduce using rule 135 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    MODULO          reduce using rule 135 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    PLUS            reduce using rule 135 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    MINUS           reduce using rule 135 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    CONCAT          reduce using rule 135 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    IN              reduce using rule 135 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    COMMA           reduce using rule 135 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    AND             reduce using rule 135 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    OR              reduce using rule 135 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    EQUAL           reduce using rule 135 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    NOTEQ           reduce using rule 135 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    GREATER         reduce using rule 135 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    GTEQUAL         reduce using rule 135 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    LESS            reduce using rule 135 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    LTEQUAL         reduce using rule 135 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    RBRACKET        reduce using rule 135 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    COLON           reduce using rule 135 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    RPAREN          reduce using rule 135 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    ELSE            reduce using rule 135 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    ELSIF           reduce using rule 135 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    SEMI            reduce using rule 135 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    THEN            reduce using rule 135 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    DOWN            reduce using rule 135 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    BY              reduce using rule 135 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    TO              reduce using rule 135 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    FI              reduce using rule 135 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    WHILE           reduce using rule 135 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)


state 289

    (100) elsif_expression -> ELSIF . boolean_expression then_expression
    (88) boolean_expression -> . expression AND expression
    (89) boolean_expression -> . expression OR expression
    (90) boolean_expression -> . expression EQUAL expression
    (91) boolean_expression -> . expression NOTEQ expression
    (92) boolean_expression -> . expression GREATER expression
    (93) boolean_expression -> . expression GTEQUAL expression
    (94) boolean_expression -> . expression LESS expression
    (95) boolean_expression -> . expression LTEQUAL expression
    (84) expression -> . operand0
    (85) expression -> . boolean_expression
    (86) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (96) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (97) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (104) operand1 -> . operand2
    (105) operand1 -> . operand1 operator2 operand2
    (106) operand2 -> . operand3
    (107) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (108) operand3 -> . monadic_operator operand4
    (109) operand3 -> . operand4
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    IF              shift and go to state 110
    MINUS           shift and go to state 100
    NOT             shift and go to state 104
    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ID              shift and go to state 56
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    empty_literal                  shift and go to state 83
    operand0                       shift and go to state 84
    expression                     shift and go to state 85
    call_action                    shift and go to state 86
    operand1                       shift and go to state 87
    value_array_slice              shift and go to state 89
    monadic_operator               shift and go to state 114
    parenthesized_expression       shift and go to state 91
    boolean_expression             shift and go to state 314
    character_literal              shift and go to state 93
    operand3                       shift and go to state 94
    literal                        shift and go to state 96
    builtin_call                   shift and go to state 12
    array_location                 shift and go to state 101
    operand2                       shift and go to state 103
    array_element                  shift and go to state 18
    array_slice                    shift and go to state 36
    conditional_expression         shift and go to state 88
    boolean_literal                shift and go to state 102
    builtin_name                   shift and go to state 29
    primitive_value                shift and go to state 107
    value_array_element            shift and go to state 98
    referenced_location            shift and go to state 111
    operand4                       shift and go to state 112
    dereferenced_reference         shift and go to state 16
    string_element                 shift and go to state 32
    character_string_literal       shift and go to state 113
    identifier                     shift and go to state 109
    location                       shift and go to state 41
    integer_literal                shift and go to state 115
    string_slice                   shift and go to state 45

state 290

    (99) else_expression -> ELSE . expression
    (84) expression -> . operand0
    (85) expression -> . boolean_expression
    (86) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (88) boolean_expression -> . expression AND expression
    (89) boolean_expression -> . expression OR expression
    (90) boolean_expression -> . expression EQUAL expression
    (91) boolean_expression -> . expression NOTEQ expression
    (92) boolean_expression -> . expression GREATER expression
    (93) boolean_expression -> . expression GTEQUAL expression
    (94) boolean_expression -> . expression LESS expression
    (95) boolean_expression -> . expression LTEQUAL expression
    (96) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (97) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (104) operand1 -> . operand2
    (105) operand1 -> . operand1 operator2 operand2
    (106) operand2 -> . operand3
    (107) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (108) operand3 -> . monadic_operator operand4
    (109) operand3 -> . operand4
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    IF              shift and go to state 110
    MINUS           shift and go to state 100
    NOT             shift and go to state 104
    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ID              shift and go to state 56
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    empty_literal                  shift and go to state 83
    operand0                       shift and go to state 84
    expression                     shift and go to state 315
    call_action                    shift and go to state 86
    operand1                       shift and go to state 87
    value_array_slice              shift and go to state 89
    monadic_operator               shift and go to state 114
    parenthesized_expression       shift and go to state 91
    boolean_expression             shift and go to state 120
    character_literal              shift and go to state 93
    operand3                       shift and go to state 94
    literal                        shift and go to state 96
    builtin_call                   shift and go to state 12
    array_location                 shift and go to state 101
    operand2                       shift and go to state 103
    array_element                  shift and go to state 18
    array_slice                    shift and go to state 36
    conditional_expression         shift and go to state 88
    boolean_literal                shift and go to state 102
    builtin_name                   shift and go to state 29
    primitive_value                shift and go to state 107
    value_array_element            shift and go to state 98
    referenced_location            shift and go to state 111
    operand4                       shift and go to state 112
    dereferenced_reference         shift and go to state 16
    string_element                 shift and go to state 32
    character_string_literal       shift and go to state 113
    identifier                     shift and go to state 109
    location                       shift and go to state 41
    integer_literal                shift and go to state 115
    string_slice                   shift and go to state 45

state 291

    (96) conditional_expression -> IF boolean_expression then_expression else_expression . FI

    FI              shift and go to state 316


state 292

    (97) conditional_expression -> IF boolean_expression then_expression elsif_expression . else_expression FI
    (101) elsif_expression -> elsif_expression . ELSIF boolean_expression then_expression
    (99) else_expression -> . ELSE expression

    ELSIF           shift and go to state 317
    ELSE            shift and go to state 290

    else_expression                shift and go to state 318

state 293

    (98) then_expression -> THEN expression .
    (88) boolean_expression -> expression . AND expression
    (89) boolean_expression -> expression . OR expression
    (90) boolean_expression -> expression . EQUAL expression
    (91) boolean_expression -> expression . NOTEQ expression
    (92) boolean_expression -> expression . GREATER expression
    (93) boolean_expression -> expression . GTEQUAL expression
    (94) boolean_expression -> expression . LESS expression
    (95) boolean_expression -> expression . LTEQUAL expression

    ELSIF           reduce using rule 98 (then_expression -> THEN expression .)
    ELSE            reduce using rule 98 (then_expression -> THEN expression .)
    AND             shift and go to state 184
    OR              shift and go to state 188
    EQUAL           shift and go to state 186
    NOTEQ           shift and go to state 189
    GREATER         shift and go to state 185
    GTEQUAL         shift and go to state 182
    LESS            shift and go to state 183
    LTEQUAL         shift and go to state 187


state 294

    (78) right_element -> expression .
    (88) boolean_expression -> expression . AND expression
    (89) boolean_expression -> expression . OR expression
    (90) boolean_expression -> expression . EQUAL expression
    (91) boolean_expression -> expression . NOTEQ expression
    (92) boolean_expression -> expression . GREATER expression
    (93) boolean_expression -> expression . GTEQUAL expression
    (94) boolean_expression -> expression . LESS expression
    (95) boolean_expression -> expression . LTEQUAL expression

    RBRACKET        reduce using rule 78 (right_element -> expression .)
    AND             shift and go to state 184
    OR              shift and go to state 188
    EQUAL           shift and go to state 186
    NOTEQ           shift and go to state 189
    GREATER         shift and go to state 185
    GTEQUAL         shift and go to state 182
    LESS            shift and go to state 183
    LTEQUAL         shift and go to state 187


state 295

    (76) string_slice -> identifier LBRACKET left_element COLON right_element . RBRACKET

    RBRACKET        shift and go to state 319


state 296

    (60) array_mode -> ARRAY LBRACKET index_mode_list RBRACKET . element_mode
    (65) element_mode -> . mode
    (37) mode -> . mode_name
    (38) mode -> . discrete_mode
    (39) mode -> . reference_mode
    (40) mode -> . composite_mode
    (41) mode_name -> . identifier
    (42) discrete_mode -> . integer_mode
    (43) discrete_mode -> . boolean_mode
    (44) discrete_mode -> . character_mode
    (45) discrete_mode -> . discrete_range_mode
    (55) reference_mode -> . REF mode
    (56) composite_mode -> . string_mode
    (57) composite_mode -> . array_mode
    (23) identifier -> . ID
    (47) integer_mode -> . INT
    (48) boolean_mode -> . BOOL
    (49) character_mode -> . CHAR
    (50) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (51) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (58) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (60) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (46) discrete_mode_name -> . identifier

    REF             shift and go to state 146
    ID              shift and go to state 47
    INT             shift and go to state 131
    BOOL            shift and go to state 130
    CHAR            shift and go to state 129
    CHARS           shift and go to state 147
    ARRAY           shift and go to state 132

    integer_mode                   shift and go to state 138
    reference_mode                 shift and go to state 139
    string_mode                    shift and go to state 137
    identifier                     shift and go to state 140
    composite_mode                 shift and go to state 133
    array_mode                     shift and go to state 141
    character_mode                 shift and go to state 142
    boolean_mode                   shift and go to state 143
    discrete_mode_name             shift and go to state 135
    mode_name                      shift and go to state 136
    element_mode                   shift and go to state 320
    discrete_range_mode            shift and go to state 134
    mode                           shift and go to state 321
    discrete_mode                  shift and go to state 145

state 297

    (62) index_mode_list -> index_mode COMMA . index_mode_list
    (61) index_mode_list -> . index_mode
    (62) index_mode_list -> . index_mode COMMA index_mode_list
    (63) index_mode -> . discrete_mode
    (64) index_mode -> . literal_range
    (42) discrete_mode -> . integer_mode
    (43) discrete_mode -> . boolean_mode
    (44) discrete_mode -> . character_mode
    (45) discrete_mode -> . discrete_range_mode
    (52) literal_range -> . lower_bound COLON upper_bound
    (47) integer_mode -> . INT
    (48) boolean_mode -> . BOOL
    (49) character_mode -> . CHAR
    (50) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (51) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (53) lower_bound -> . expression
    (46) discrete_mode_name -> . identifier
    (84) expression -> . operand0
    (85) expression -> . boolean_expression
    (86) expression -> . conditional_expression
    (23) identifier -> . ID
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (88) boolean_expression -> . expression AND expression
    (89) boolean_expression -> . expression OR expression
    (90) boolean_expression -> . expression EQUAL expression
    (91) boolean_expression -> . expression NOTEQ expression
    (92) boolean_expression -> . expression GREATER expression
    (93) boolean_expression -> . expression GTEQUAL expression
    (94) boolean_expression -> . expression LESS expression
    (95) boolean_expression -> . expression LTEQUAL expression
    (96) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (97) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (104) operand1 -> . operand2
    (105) operand1 -> . operand1 operator2 operand2
    (106) operand2 -> . operand3
    (107) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (108) operand3 -> . monadic_operator operand4
    (109) operand3 -> . operand4
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    INT             shift and go to state 131
    BOOL            shift and go to state 130
    CHAR            shift and go to state 129
    ID              shift and go to state 56
    IF              shift and go to state 110
    MINUS           shift and go to state 100
    NOT             shift and go to state 104
    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    empty_literal                  shift and go to state 83
    operand0                       shift and go to state 84
    expression                     shift and go to state 261
    call_action                    shift and go to state 86
    operand1                       shift and go to state 87
    value_array_slice              shift and go to state 89
    parenthesized_expression       shift and go to state 91
    discrete_mode_name             shift and go to state 135
    boolean_expression             shift and go to state 120
    character_literal              shift and go to state 93
    operand3                       shift and go to state 94
    literal                        shift and go to state 96
    builtin_call                   shift and go to state 12
    dereferenced_reference         shift and go to state 16
    index_mode_list                shift and go to state 322
    array_location                 shift and go to state 101
    boolean_mode                   shift and go to state 143
    operand2                       shift and go to state 103
    discrete_mode                  shift and go to state 262
    array_element                  shift and go to state 18
    array_slice                    shift and go to state 36
    conditional_expression         shift and go to state 88
    boolean_literal                shift and go to state 102
    integer_mode                   shift and go to state 138
    lower_bound                    shift and go to state 263
    primitive_value                shift and go to state 107
    discrete_range_mode            shift and go to state 134
    index_mode                     shift and go to state 259
    value_array_element            shift and go to state 98
    literal_range                  shift and go to state 258
    operand4                       shift and go to state 112
    string_element                 shift and go to state 32
    monadic_operator               shift and go to state 114
    character_mode                 shift and go to state 142
    referenced_location            shift and go to state 111
    location                       shift and go to state 41
    builtin_name                   shift and go to state 29
    integer_literal                shift and go to state 115
    character_string_literal       shift and go to state 113
    string_slice                   shift and go to state 45
    identifier                     shift and go to state 260

state 298

    (52) literal_range -> lower_bound COLON . upper_bound
    (54) upper_bound -> . expression
    (84) expression -> . operand0
    (85) expression -> . boolean_expression
    (86) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (88) boolean_expression -> . expression AND expression
    (89) boolean_expression -> . expression OR expression
    (90) boolean_expression -> . expression EQUAL expression
    (91) boolean_expression -> . expression NOTEQ expression
    (92) boolean_expression -> . expression GREATER expression
    (93) boolean_expression -> . expression GTEQUAL expression
    (94) boolean_expression -> . expression LESS expression
    (95) boolean_expression -> . expression LTEQUAL expression
    (96) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (97) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (104) operand1 -> . operand2
    (105) operand1 -> . operand1 operator2 operand2
    (106) operand2 -> . operand3
    (107) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (108) operand3 -> . monadic_operator operand4
    (109) operand3 -> . operand4
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    IF              shift and go to state 110
    MINUS           shift and go to state 100
    NOT             shift and go to state 104
    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ID              shift and go to state 56
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    integer_literal                shift and go to state 115
    empty_literal                  shift and go to state 83
    operand0                       shift and go to state 84
    expression                     shift and go to state 276
    call_action                    shift and go to state 86
    operand1                       shift and go to state 87
    conditional_expression         shift and go to state 88
    value_array_slice              shift and go to state 89
    parenthesized_expression       shift and go to state 91
    boolean_expression             shift and go to state 120
    character_literal              shift and go to state 93
    operand3                       shift and go to state 94
    literal                        shift and go to state 96
    dereferenced_reference         shift and go to state 16
    array_location                 shift and go to state 101
    operand2                       shift and go to state 103
    builtin_call                   shift and go to state 12
    array_element                  shift and go to state 18
    array_slice                    shift and go to state 36
    boolean_literal                shift and go to state 102
    referenced_location            shift and go to state 111
    primitive_value                shift and go to state 107
    identifier                     shift and go to state 109
    value_array_element            shift and go to state 98
    operand4                       shift and go to state 112
    string_element                 shift and go to state 32
    upper_bound                    shift and go to state 323
    monadic_operator               shift and go to state 114
    location                       shift and go to state 41
    builtin_name                   shift and go to state 29
    character_string_literal       shift and go to state 113
    string_slice                   shift and go to state 45

state 299

    (50) discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .

    LPAREN          reduce using rule 50 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    ASSIGN          reduce using rule 50 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    COMMA           reduce using rule 50 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    SEMI            reduce using rule 50 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    LOC             reduce using rule 50 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    RPAREN          reduce using rule 50 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    WHILE           reduce using rule 50 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    RBRACKET        reduce using rule 50 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)


state 300

    (51) discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .

    LPAREN          reduce using rule 51 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    ASSIGN          reduce using rule 51 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    COMMA           reduce using rule 51 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    SEMI            reduce using rule 51 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    LOC             reduce using rule 51 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    RPAREN          reduce using rule 51 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    WHILE           reduce using rule 51 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    RBRACKET        reduce using rule 51 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)


state 301

    (58) string_mode -> CHARS LBRACKET string_length RBRACKET .

    LOC             reduce using rule 58 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    RPAREN          reduce using rule 58 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    COMMA           reduce using rule 58 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    SEMI            reduce using rule 58 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    ASSIGN          reduce using rule 58 (string_mode -> CHARS LBRACKET string_length RBRACKET .)


state 302

    (203) range_enumeration -> identifier DOWN IN discrete_mode .
    (51) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    WHILE           reduce using rule 203 (range_enumeration -> identifier DOWN IN discrete_mode .)
    SEMI            reduce using rule 203 (range_enumeration -> identifier DOWN IN discrete_mode .)
    LPAREN          shift and go to state 211


state 303

    (197) step_enumeration -> identifier ASSIGN expression step_value . DOWN end_value
    (198) step_enumeration -> identifier ASSIGN expression step_value . end_value
    (202) end_value -> . TO expression

    DOWN            shift and go to state 324
    TO              shift and go to state 307

    end_value                      shift and go to state 325

state 304

    (199) step_enumeration -> identifier ASSIGN expression DOWN . end_value
    (202) end_value -> . TO expression

    TO              shift and go to state 307

    end_value                      shift and go to state 326

state 305

    (200) step_enumeration -> identifier ASSIGN expression end_value .

    WHILE           reduce using rule 200 (step_enumeration -> identifier ASSIGN expression end_value .)
    SEMI            reduce using rule 200 (step_enumeration -> identifier ASSIGN expression end_value .)


state 306

    (201) step_value -> BY . expression
    (84) expression -> . operand0
    (85) expression -> . boolean_expression
    (86) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (88) boolean_expression -> . expression AND expression
    (89) boolean_expression -> . expression OR expression
    (90) boolean_expression -> . expression EQUAL expression
    (91) boolean_expression -> . expression NOTEQ expression
    (92) boolean_expression -> . expression GREATER expression
    (93) boolean_expression -> . expression GTEQUAL expression
    (94) boolean_expression -> . expression LESS expression
    (95) boolean_expression -> . expression LTEQUAL expression
    (96) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (97) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (104) operand1 -> . operand2
    (105) operand1 -> . operand1 operator2 operand2
    (106) operand2 -> . operand3
    (107) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (108) operand3 -> . monadic_operator operand4
    (109) operand3 -> . operand4
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    IF              shift and go to state 110
    MINUS           shift and go to state 100
    NOT             shift and go to state 104
    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ID              shift and go to state 56
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    empty_literal                  shift and go to state 83
    operand0                       shift and go to state 84
    expression                     shift and go to state 327
    call_action                    shift and go to state 86
    operand1                       shift and go to state 87
    value_array_slice              shift and go to state 89
    monadic_operator               shift and go to state 114
    parenthesized_expression       shift and go to state 91
    boolean_expression             shift and go to state 120
    character_literal              shift and go to state 93
    operand3                       shift and go to state 94
    literal                        shift and go to state 96
    builtin_call                   shift and go to state 12
    array_location                 shift and go to state 101
    operand2                       shift and go to state 103
    array_element                  shift and go to state 18
    array_slice                    shift and go to state 36
    conditional_expression         shift and go to state 88
    boolean_literal                shift and go to state 102
    builtin_name                   shift and go to state 29
    primitive_value                shift and go to state 107
    value_array_element            shift and go to state 98
    referenced_location            shift and go to state 111
    operand4                       shift and go to state 112
    dereferenced_reference         shift and go to state 16
    string_element                 shift and go to state 32
    character_string_literal       shift and go to state 113
    identifier                     shift and go to state 109
    location                       shift and go to state 41
    integer_literal                shift and go to state 115
    string_slice                   shift and go to state 45

state 307

    (202) end_value -> TO . expression
    (84) expression -> . operand0
    (85) expression -> . boolean_expression
    (86) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (88) boolean_expression -> . expression AND expression
    (89) boolean_expression -> . expression OR expression
    (90) boolean_expression -> . expression EQUAL expression
    (91) boolean_expression -> . expression NOTEQ expression
    (92) boolean_expression -> . expression GREATER expression
    (93) boolean_expression -> . expression GTEQUAL expression
    (94) boolean_expression -> . expression LESS expression
    (95) boolean_expression -> . expression LTEQUAL expression
    (96) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (97) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (104) operand1 -> . operand2
    (105) operand1 -> . operand1 operator2 operand2
    (106) operand2 -> . operand3
    (107) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (108) operand3 -> . monadic_operator operand4
    (109) operand3 -> . operand4
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    IF              shift and go to state 110
    MINUS           shift and go to state 100
    NOT             shift and go to state 104
    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ID              shift and go to state 56
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    empty_literal                  shift and go to state 83
    operand0                       shift and go to state 84
    expression                     shift and go to state 328
    call_action                    shift and go to state 86
    operand1                       shift and go to state 87
    value_array_slice              shift and go to state 89
    monadic_operator               shift and go to state 114
    parenthesized_expression       shift and go to state 91
    boolean_expression             shift and go to state 120
    character_literal              shift and go to state 93
    operand3                       shift and go to state 94
    literal                        shift and go to state 96
    builtin_call                   shift and go to state 12
    array_location                 shift and go to state 101
    operand2                       shift and go to state 103
    array_element                  shift and go to state 18
    array_slice                    shift and go to state 36
    conditional_expression         shift and go to state 88
    boolean_literal                shift and go to state 102
    builtin_name                   shift and go to state 29
    primitive_value                shift and go to state 107
    value_array_element            shift and go to state 98
    referenced_location            shift and go to state 111
    operand4                       shift and go to state 112
    dereferenced_reference         shift and go to state 16
    string_element                 shift and go to state 32
    character_string_literal       shift and go to state 113
    identifier                     shift and go to state 109
    location                       shift and go to state 41
    integer_literal                shift and go to state 115
    string_slice                   shift and go to state 45

state 308

    (82) array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .

    ARROW           reduce using rule 82 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LBRACKET        reduce using rule 82 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    ASSIGN          reduce using rule 82 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    PLUS            reduce using rule 82 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    MINUS           reduce using rule 82 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    TIMES           reduce using rule 82 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    DIVIDE          reduce using rule 82 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    MODULO          reduce using rule 82 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    CONCAT          reduce using rule 82 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    IN              reduce using rule 82 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    COMMA           reduce using rule 82 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    AND             reduce using rule 82 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    OR              reduce using rule 82 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    EQUAL           reduce using rule 82 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    NOTEQ           reduce using rule 82 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    GREATER         reduce using rule 82 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    GTEQUAL         reduce using rule 82 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LESS            reduce using rule 82 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LTEQUAL         reduce using rule 82 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    RPAREN          reduce using rule 82 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    RBRACKET        reduce using rule 82 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    COLON           reduce using rule 82 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    THEN            reduce using rule 82 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    SEMI            reduce using rule 82 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    DOWN            reduce using rule 82 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    BY              reduce using rule 82 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    TO              reduce using rule 82 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    ELSE            reduce using rule 82 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    ELSIF           reduce using rule 82 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    FI              reduce using rule 82 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    WHILE           reduce using rule 82 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)


state 309

    (29) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN . result_spec SEMI statement_nullable END SEMI
    (30) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN . SEMI statement_nullable END SEMI
    (35) result_spec -> . RETURNS LPAREN mode LOC RPAREN
    (36) result_spec -> . RETURNS LPAREN mode RPAREN

    SEMI            shift and go to state 331
    RETURNS         shift and go to state 329

    result_spec                    shift and go to state 330

state 310

    (33) formal_parameter -> identifier_list mode . LOC
    (34) formal_parameter -> identifier_list mode .

    LOC             shift and go to state 332
    COMMA           reduce using rule 34 (formal_parameter -> identifier_list mode .)
    RPAREN          reduce using rule 34 (formal_parameter -> identifier_list mode .)


state 311

    (32) formal_parameter_list -> formal_parameter COMMA . formal_parameter_list
    (31) formal_parameter_list -> . formal_parameter
    (32) formal_parameter_list -> . formal_parameter COMMA formal_parameter_list
    (33) formal_parameter -> . identifier_list mode LOC
    (34) formal_parameter -> . identifier_list mode
    (21) identifier_list -> . identifier
    (22) identifier_list -> . identifier COMMA identifier_list
    (23) identifier -> . ID

    ID              shift and go to state 47

    identifier_list                shift and go to state 279
    formal_parameter               shift and go to state 280
    identifier                     shift and go to state 50
    formal_parameter_list          shift and go to state 333

state 312

    (163) else_clause -> ELSIF boolean_expression then_clause . else_clause
    (164) else_clause -> ELSIF boolean_expression then_clause .
    (162) else_clause -> . ELSE action_statement_list
    (163) else_clause -> . ELSIF boolean_expression then_clause else_clause
    (164) else_clause -> . ELSIF boolean_expression then_clause

    FI              reduce using rule 164 (else_clause -> ELSIF boolean_expression then_clause .)
    ELSE            shift and go to state 246
    ELSIF           shift and go to state 245

    else_clause                    shift and go to state 334

state 313

    (136) value_array_slice -> primitive_value LBRACKET expression COLON expression . RBRACKET
    (88) boolean_expression -> expression . AND expression
    (89) boolean_expression -> expression . OR expression
    (90) boolean_expression -> expression . EQUAL expression
    (91) boolean_expression -> expression . NOTEQ expression
    (92) boolean_expression -> expression . GREATER expression
    (93) boolean_expression -> expression . GTEQUAL expression
    (94) boolean_expression -> expression . LESS expression
    (95) boolean_expression -> expression . LTEQUAL expression

    RBRACKET        shift and go to state 335
    AND             shift and go to state 184
    OR              shift and go to state 188
    EQUAL           shift and go to state 186
    NOTEQ           shift and go to state 189
    GREATER         shift and go to state 185
    GTEQUAL         shift and go to state 182
    LESS            shift and go to state 183
    LTEQUAL         shift and go to state 187


state 314

    (100) elsif_expression -> ELSIF boolean_expression . then_expression
    (85) expression -> boolean_expression .
    (98) then_expression -> . THEN expression

    AND             reduce using rule 85 (expression -> boolean_expression .)
    OR              reduce using rule 85 (expression -> boolean_expression .)
    EQUAL           reduce using rule 85 (expression -> boolean_expression .)
    NOTEQ           reduce using rule 85 (expression -> boolean_expression .)
    GREATER         reduce using rule 85 (expression -> boolean_expression .)
    GTEQUAL         reduce using rule 85 (expression -> boolean_expression .)
    LESS            reduce using rule 85 (expression -> boolean_expression .)
    LTEQUAL         reduce using rule 85 (expression -> boolean_expression .)
    THEN            shift and go to state 253

    then_expression                shift and go to state 336

state 315

    (99) else_expression -> ELSE expression .
    (88) boolean_expression -> expression . AND expression
    (89) boolean_expression -> expression . OR expression
    (90) boolean_expression -> expression . EQUAL expression
    (91) boolean_expression -> expression . NOTEQ expression
    (92) boolean_expression -> expression . GREATER expression
    (93) boolean_expression -> expression . GTEQUAL expression
    (94) boolean_expression -> expression . LESS expression
    (95) boolean_expression -> expression . LTEQUAL expression

    FI              reduce using rule 99 (else_expression -> ELSE expression .)
    AND             shift and go to state 184
    OR              shift and go to state 188
    EQUAL           shift and go to state 186
    NOTEQ           shift and go to state 189
    GREATER         shift and go to state 185
    GTEQUAL         shift and go to state 182
    LESS            shift and go to state 183
    LTEQUAL         shift and go to state 187


state 316

    (96) conditional_expression -> IF boolean_expression then_expression else_expression FI .

    AND             reduce using rule 96 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    OR              reduce using rule 96 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    EQUAL           reduce using rule 96 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    NOTEQ           reduce using rule 96 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    GREATER         reduce using rule 96 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    GTEQUAL         reduce using rule 96 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    LESS            reduce using rule 96 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    LTEQUAL         reduce using rule 96 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    THEN            reduce using rule 96 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    SEMI            reduce using rule 96 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    COMMA           reduce using rule 96 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    RBRACKET        reduce using rule 96 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    COLON           reduce using rule 96 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    RPAREN          reduce using rule 96 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    DOWN            reduce using rule 96 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    BY              reduce using rule 96 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    TO              reduce using rule 96 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    ELSE            reduce using rule 96 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    ELSIF           reduce using rule 96 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    FI              reduce using rule 96 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    WHILE           reduce using rule 96 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)


state 317

    (101) elsif_expression -> elsif_expression ELSIF . boolean_expression then_expression
    (88) boolean_expression -> . expression AND expression
    (89) boolean_expression -> . expression OR expression
    (90) boolean_expression -> . expression EQUAL expression
    (91) boolean_expression -> . expression NOTEQ expression
    (92) boolean_expression -> . expression GREATER expression
    (93) boolean_expression -> . expression GTEQUAL expression
    (94) boolean_expression -> . expression LESS expression
    (95) boolean_expression -> . expression LTEQUAL expression
    (84) expression -> . operand0
    (85) expression -> . boolean_expression
    (86) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (96) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (97) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (104) operand1 -> . operand2
    (105) operand1 -> . operand1 operator2 operand2
    (106) operand2 -> . operand3
    (107) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (108) operand3 -> . monadic_operator operand4
    (109) operand3 -> . operand4
    (116) monadic_operator -> . MINUS
    (117) monadic_operator -> . NOT
    (110) operand4 -> . array_location
    (111) operand4 -> . referenced_location
    (112) operand4 -> . primitive_value
    (83) array_location -> . location
    (118) referenced_location -> . ARROW array_location
    (126) primitive_value -> . literal
    (127) primitive_value -> . value_array_element
    (128) primitive_value -> . value_array_slice
    (129) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (130) literal -> . integer_literal
    (131) literal -> . boolean_literal
    (132) literal -> . character_literal
    (133) literal -> . empty_literal
    (134) literal -> . character_string_literal
    (135) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (136) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (87) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (137) integer_literal -> . ICONST
    (138) boolean_literal -> . TRUE
    (139) boolean_literal -> . FALSE
    (140) character_literal -> . CCONST
    (141) empty_literal -> . NULL
    (142) character_string_literal -> . SCONST
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT

    IF              shift and go to state 110
    MINUS           shift and go to state 100
    NOT             shift and go to state 104
    ARROW           shift and go to state 99
    LPAREN          shift and go to state 108
    ID              shift and go to state 56
    ICONST          shift and go to state 106
    TRUE            shift and go to state 95
    FALSE           shift and go to state 116
    CCONST          shift and go to state 97
    NULL            shift and go to state 90
    SCONST          shift and go to state 105
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    empty_literal                  shift and go to state 83
    operand0                       shift and go to state 84
    expression                     shift and go to state 85
    call_action                    shift and go to state 86
    operand1                       shift and go to state 87
    value_array_slice              shift and go to state 89
    monadic_operator               shift and go to state 114
    parenthesized_expression       shift and go to state 91
    boolean_expression             shift and go to state 337
    character_literal              shift and go to state 93
    operand3                       shift and go to state 94
    literal                        shift and go to state 96
    builtin_call                   shift and go to state 12
    array_location                 shift and go to state 101
    operand2                       shift and go to state 103
    array_element                  shift and go to state 18
    array_slice                    shift and go to state 36
    conditional_expression         shift and go to state 88
    boolean_literal                shift and go to state 102
    builtin_name                   shift and go to state 29
    primitive_value                shift and go to state 107
    value_array_element            shift and go to state 98
    referenced_location            shift and go to state 111
    operand4                       shift and go to state 112
    dereferenced_reference         shift and go to state 16
    string_element                 shift and go to state 32
    character_string_literal       shift and go to state 113
    identifier                     shift and go to state 109
    location                       shift and go to state 41
    integer_literal                shift and go to state 115
    string_slice                   shift and go to state 45

state 318

    (97) conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression . FI

    FI              shift and go to state 338


state 319

    (76) string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .

    ARROW           reduce using rule 76 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    LBRACKET        reduce using rule 76 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    TIMES           reduce using rule 76 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    DIVIDE          reduce using rule 76 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    MODULO          reduce using rule 76 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    PLUS            reduce using rule 76 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    MINUS           reduce using rule 76 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    CONCAT          reduce using rule 76 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    IN              reduce using rule 76 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    AND             reduce using rule 76 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    OR              reduce using rule 76 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    EQUAL           reduce using rule 76 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    NOTEQ           reduce using rule 76 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    GREATER         reduce using rule 76 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    GTEQUAL         reduce using rule 76 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    LESS            reduce using rule 76 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    LTEQUAL         reduce using rule 76 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    DOWN            reduce using rule 76 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    BY              reduce using rule 76 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    TO              reduce using rule 76 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    ASSIGN          reduce using rule 76 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    COMMA           reduce using rule 76 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    SEMI            reduce using rule 76 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    ELSE            reduce using rule 76 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    ELSIF           reduce using rule 76 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    RBRACKET        reduce using rule 76 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    COLON           reduce using rule 76 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    RPAREN          reduce using rule 76 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    THEN            reduce using rule 76 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    FI              reduce using rule 76 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    WHILE           reduce using rule 76 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)


state 320

    (60) array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .

    ASSIGN          reduce using rule 60 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)
    COMMA           reduce using rule 60 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)
    SEMI            reduce using rule 60 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)
    LOC             reduce using rule 60 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)
    RPAREN          reduce using rule 60 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)


state 321

    (65) element_mode -> mode .

    ASSIGN          reduce using rule 65 (element_mode -> mode .)
    COMMA           reduce using rule 65 (element_mode -> mode .)
    SEMI            reduce using rule 65 (element_mode -> mode .)
    LOC             reduce using rule 65 (element_mode -> mode .)
    RPAREN          reduce using rule 65 (element_mode -> mode .)


state 322

    (62) index_mode_list -> index_mode COMMA index_mode_list .

    RBRACKET        reduce using rule 62 (index_mode_list -> index_mode COMMA index_mode_list .)


state 323

    (52) literal_range -> lower_bound COLON upper_bound .

    RPAREN          reduce using rule 52 (literal_range -> lower_bound COLON upper_bound .)
    COMMA           reduce using rule 52 (literal_range -> lower_bound COLON upper_bound .)
    RBRACKET        reduce using rule 52 (literal_range -> lower_bound COLON upper_bound .)


state 324

    (197) step_enumeration -> identifier ASSIGN expression step_value DOWN . end_value
    (202) end_value -> . TO expression

    TO              shift and go to state 307

    end_value                      shift and go to state 339

state 325

    (198) step_enumeration -> identifier ASSIGN expression step_value end_value .

    WHILE           reduce using rule 198 (step_enumeration -> identifier ASSIGN expression step_value end_value .)
    SEMI            reduce using rule 198 (step_enumeration -> identifier ASSIGN expression step_value end_value .)


state 326

    (199) step_enumeration -> identifier ASSIGN expression DOWN end_value .

    WHILE           reduce using rule 199 (step_enumeration -> identifier ASSIGN expression DOWN end_value .)
    SEMI            reduce using rule 199 (step_enumeration -> identifier ASSIGN expression DOWN end_value .)


state 327

    (201) step_value -> BY expression .
    (88) boolean_expression -> expression . AND expression
    (89) boolean_expression -> expression . OR expression
    (90) boolean_expression -> expression . EQUAL expression
    (91) boolean_expression -> expression . NOTEQ expression
    (92) boolean_expression -> expression . GREATER expression
    (93) boolean_expression -> expression . GTEQUAL expression
    (94) boolean_expression -> expression . LESS expression
    (95) boolean_expression -> expression . LTEQUAL expression

    DOWN            reduce using rule 201 (step_value -> BY expression .)
    TO              reduce using rule 201 (step_value -> BY expression .)
    AND             shift and go to state 184
    OR              shift and go to state 188
    EQUAL           shift and go to state 186
    NOTEQ           shift and go to state 189
    GREATER         shift and go to state 185
    GTEQUAL         shift and go to state 182
    LESS            shift and go to state 183
    LTEQUAL         shift and go to state 187


state 328

    (202) end_value -> TO expression .
    (88) boolean_expression -> expression . AND expression
    (89) boolean_expression -> expression . OR expression
    (90) boolean_expression -> expression . EQUAL expression
    (91) boolean_expression -> expression . NOTEQ expression
    (92) boolean_expression -> expression . GREATER expression
    (93) boolean_expression -> expression . GTEQUAL expression
    (94) boolean_expression -> expression . LESS expression
    (95) boolean_expression -> expression . LTEQUAL expression

    WHILE           reduce using rule 202 (end_value -> TO expression .)
    SEMI            reduce using rule 202 (end_value -> TO expression .)
    AND             shift and go to state 184
    OR              shift and go to state 188
    EQUAL           shift and go to state 186
    NOTEQ           shift and go to state 189
    GREATER         shift and go to state 185
    GTEQUAL         shift and go to state 182
    LESS            shift and go to state 183
    LTEQUAL         shift and go to state 187


state 329

    (35) result_spec -> RETURNS . LPAREN mode LOC RPAREN
    (36) result_spec -> RETURNS . LPAREN mode RPAREN

    LPAREN          shift and go to state 340


state 330

    (29) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec . SEMI statement_nullable END SEMI

    SEMI            shift and go to state 341


state 331

    (30) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI . statement_nullable END SEMI
    (3) statement_nullable -> . statement statement_nullable
    (4) statement_nullable -> . empty
    (5) statement -> . declaration_statement
    (6) statement -> . synonym_statement
    (7) statement -> . newmode_statement
    (8) statement -> . action_statement
    (9) statement -> . procedure_statement
    (206) empty -> .
    (15) declaration_statement -> . DCL declaration_list SEMI
    (10) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (143) action_statement -> . identifier COLON action SEMI
    (144) action_statement -> . action SEMI
    (28) procedure_statement -> . ID COLON procedure_definition
    (23) identifier -> . ID
    (145) action -> . bracketed_action
    (146) action -> . assignment_action
    (147) action -> . call_action
    (148) action -> . exit_action
    (149) action -> . result_action
    (150) action -> . return_action
    (151) bracketed_action -> . if_action
    (152) bracketed_action -> . do_action
    (153) assignment_action -> . array_location assigning_operator expression
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (184) exit_action -> . EXIT identifier
    (188) result_action -> . RESULT expression
    (185) return_action -> . RETURN result
    (159) if_action -> . IF boolean_expression then_clause else_clause FI
    (160) if_action -> . IF boolean_expression then_clause FI
    (189) do_action -> . DO control_part SEMI action_statement_nullable OD
    (190) do_action -> . DO action_statement_nullable OD
    (83) array_location -> . location
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    END             reduce using rule 206 (empty -> .)
    DCL             shift and go to state 5
    SYN             shift and go to state 19
    TYPE            shift and go to state 26
    ID              shift and go to state 17
    EXIT            shift and go to state 42
    RESULT          shift and go to state 44
    RETURN          shift and go to state 34
    IF              shift and go to state 31
    DO              shift and go to state 10
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    call_action                    shift and go to state 2
    statement                      shift and go to state 126
    declaration_statement          shift and go to state 3
    empty                          shift and go to state 124
    action_statement               shift and go to state 9
    assignment_action              shift and go to state 4
    result_action                  shift and go to state 11
    dereferenced_reference         shift and go to state 16
    array_location                 shift and go to state 13
    statement_nullable             shift and go to state 342
    procedure_statement            shift and go to state 15
    builtin_call                   shift and go to state 12
    array_element                  shift and go to state 18
    synonym_statement              shift and go to state 23
    exit_action                    shift and go to state 25
    return_action                  shift and go to state 43
    newmode_statement              shift and go to state 27
    if_action                      shift and go to state 28
    bracketed_action               shift and go to state 30
    action                         shift and go to state 33
    string_element                 shift and go to state 32
    array_slice                    shift and go to state 36
    identifier                     shift and go to state 35
    do_action                      shift and go to state 40
    location                       shift and go to state 41
    builtin_name                   shift and go to state 29
    string_slice                   shift and go to state 45

state 332

    (33) formal_parameter -> identifier_list mode LOC .

    COMMA           reduce using rule 33 (formal_parameter -> identifier_list mode LOC .)
    RPAREN          reduce using rule 33 (formal_parameter -> identifier_list mode LOC .)


state 333

    (32) formal_parameter_list -> formal_parameter COMMA formal_parameter_list .

    RPAREN          reduce using rule 32 (formal_parameter_list -> formal_parameter COMMA formal_parameter_list .)


state 334

    (163) else_clause -> ELSIF boolean_expression then_clause else_clause .

    FI              reduce using rule 163 (else_clause -> ELSIF boolean_expression then_clause else_clause .)


state 335

    (136) value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .

    LBRACKET        reduce using rule 136 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    TIMES           reduce using rule 136 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    DIVIDE          reduce using rule 136 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    MODULO          reduce using rule 136 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    PLUS            reduce using rule 136 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    MINUS           reduce using rule 136 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    CONCAT          reduce using rule 136 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    IN              reduce using rule 136 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    AND             reduce using rule 136 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    OR              reduce using rule 136 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    EQUAL           reduce using rule 136 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    NOTEQ           reduce using rule 136 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    GREATER         reduce using rule 136 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    GTEQUAL         reduce using rule 136 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    LESS            reduce using rule 136 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    LTEQUAL         reduce using rule 136 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    SEMI            reduce using rule 136 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    THEN            reduce using rule 136 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    COMMA           reduce using rule 136 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    RBRACKET        reduce using rule 136 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    COLON           reduce using rule 136 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    RPAREN          reduce using rule 136 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    DOWN            reduce using rule 136 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    BY              reduce using rule 136 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    TO              reduce using rule 136 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    ELSE            reduce using rule 136 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    ELSIF           reduce using rule 136 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    FI              reduce using rule 136 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    WHILE           reduce using rule 136 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)


state 336

    (100) elsif_expression -> ELSIF boolean_expression then_expression .

    ELSIF           reduce using rule 100 (elsif_expression -> ELSIF boolean_expression then_expression .)
    ELSE            reduce using rule 100 (elsif_expression -> ELSIF boolean_expression then_expression .)


state 337

    (101) elsif_expression -> elsif_expression ELSIF boolean_expression . then_expression
    (85) expression -> boolean_expression .
    (98) then_expression -> . THEN expression

    AND             reduce using rule 85 (expression -> boolean_expression .)
    OR              reduce using rule 85 (expression -> boolean_expression .)
    EQUAL           reduce using rule 85 (expression -> boolean_expression .)
    NOTEQ           reduce using rule 85 (expression -> boolean_expression .)
    GREATER         reduce using rule 85 (expression -> boolean_expression .)
    GTEQUAL         reduce using rule 85 (expression -> boolean_expression .)
    LESS            reduce using rule 85 (expression -> boolean_expression .)
    LTEQUAL         reduce using rule 85 (expression -> boolean_expression .)
    THEN            shift and go to state 253

    then_expression                shift and go to state 343

state 338

    (97) conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .

    AND             reduce using rule 97 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    OR              reduce using rule 97 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    EQUAL           reduce using rule 97 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    NOTEQ           reduce using rule 97 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    GREATER         reduce using rule 97 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    GTEQUAL         reduce using rule 97 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    LESS            reduce using rule 97 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    LTEQUAL         reduce using rule 97 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    THEN            reduce using rule 97 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    SEMI            reduce using rule 97 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    COMMA           reduce using rule 97 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    RBRACKET        reduce using rule 97 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    COLON           reduce using rule 97 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    RPAREN          reduce using rule 97 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    DOWN            reduce using rule 97 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    BY              reduce using rule 97 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    TO              reduce using rule 97 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    ELSE            reduce using rule 97 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    ELSIF           reduce using rule 97 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    FI              reduce using rule 97 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    WHILE           reduce using rule 97 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)


state 339

    (197) step_enumeration -> identifier ASSIGN expression step_value DOWN end_value .

    WHILE           reduce using rule 197 (step_enumeration -> identifier ASSIGN expression step_value DOWN end_value .)
    SEMI            reduce using rule 197 (step_enumeration -> identifier ASSIGN expression step_value DOWN end_value .)


state 340

    (35) result_spec -> RETURNS LPAREN . mode LOC RPAREN
    (36) result_spec -> RETURNS LPAREN . mode RPAREN
    (37) mode -> . mode_name
    (38) mode -> . discrete_mode
    (39) mode -> . reference_mode
    (40) mode -> . composite_mode
    (41) mode_name -> . identifier
    (42) discrete_mode -> . integer_mode
    (43) discrete_mode -> . boolean_mode
    (44) discrete_mode -> . character_mode
    (45) discrete_mode -> . discrete_range_mode
    (55) reference_mode -> . REF mode
    (56) composite_mode -> . string_mode
    (57) composite_mode -> . array_mode
    (23) identifier -> . ID
    (47) integer_mode -> . INT
    (48) boolean_mode -> . BOOL
    (49) character_mode -> . CHAR
    (50) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (51) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (58) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (60) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (46) discrete_mode_name -> . identifier

    REF             shift and go to state 146
    ID              shift and go to state 47
    INT             shift and go to state 131
    BOOL            shift and go to state 130
    CHAR            shift and go to state 129
    CHARS           shift and go to state 147
    ARRAY           shift and go to state 132

    integer_mode                   shift and go to state 138
    reference_mode                 shift and go to state 139
    mode                           shift and go to state 344
    identifier                     shift and go to state 140
    composite_mode                 shift and go to state 133
    array_mode                     shift and go to state 141
    discrete_range_mode            shift and go to state 134
    boolean_mode                   shift and go to state 143
    discrete_mode_name             shift and go to state 135
    mode_name                      shift and go to state 136
    character_mode                 shift and go to state 142
    string_mode                    shift and go to state 137
    discrete_mode                  shift and go to state 145

state 341

    (29) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI . statement_nullable END SEMI
    (3) statement_nullable -> . statement statement_nullable
    (4) statement_nullable -> . empty
    (5) statement -> . declaration_statement
    (6) statement -> . synonym_statement
    (7) statement -> . newmode_statement
    (8) statement -> . action_statement
    (9) statement -> . procedure_statement
    (206) empty -> .
    (15) declaration_statement -> . DCL declaration_list SEMI
    (10) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (143) action_statement -> . identifier COLON action SEMI
    (144) action_statement -> . action SEMI
    (28) procedure_statement -> . ID COLON procedure_definition
    (23) identifier -> . ID
    (145) action -> . bracketed_action
    (146) action -> . assignment_action
    (147) action -> . call_action
    (148) action -> . exit_action
    (149) action -> . result_action
    (150) action -> . return_action
    (151) bracketed_action -> . if_action
    (152) bracketed_action -> . do_action
    (153) assignment_action -> . array_location assigning_operator expression
    (168) call_action -> . procedure_call
    (169) call_action -> . builtin_call
    (184) exit_action -> . EXIT identifier
    (188) result_action -> . RESULT expression
    (185) return_action -> . RETURN result
    (159) if_action -> . IF boolean_expression then_clause else_clause FI
    (160) if_action -> . IF boolean_expression then_clause FI
    (189) do_action -> . DO control_part SEMI action_statement_nullable OD
    (190) do_action -> . DO action_statement_nullable OD
    (83) array_location -> . location
    (180) procedure_call -> . ID LPAREN parameter_list RPAREN
    (181) procedure_call -> . ID LPAREN RPAREN
    (170) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (171) builtin_call -> . builtin_name LPAREN RPAREN
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (172) builtin_name -> . ABS
    (173) builtin_name -> . ASC
    (174) builtin_name -> . NUM
    (175) builtin_name -> . UPPER
    (176) builtin_name -> . LOWER
    (177) builtin_name -> . LENGTH
    (178) builtin_name -> . READ
    (179) builtin_name -> . PRINT
    (73) dereferenced_reference -> . array_location ARROW
    (74) string_element -> . identifier LBRACKET start_element RBRACKET
    (76) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (79) array_element -> . array_location LBRACKET expression_list RBRACKET
    (82) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    END             reduce using rule 206 (empty -> .)
    DCL             shift and go to state 5
    SYN             shift and go to state 19
    TYPE            shift and go to state 26
    ID              shift and go to state 17
    EXIT            shift and go to state 42
    RESULT          shift and go to state 44
    RETURN          shift and go to state 34
    IF              shift and go to state 31
    DO              shift and go to state 10
    ABS             shift and go to state 39
    ASC             shift and go to state 6
    NUM             shift and go to state 14
    UPPER           shift and go to state 20
    LOWER           shift and go to state 7
    LENGTH          shift and go to state 22
    READ            shift and go to state 8
    PRINT           shift and go to state 24

    procedure_call                 shift and go to state 1
    call_action                    shift and go to state 2
    declaration_statement          shift and go to state 3
    empty                          shift and go to state 124
    action_statement               shift and go to state 9
    assignment_action              shift and go to state 4
    result_action                  shift and go to state 11
    dereferenced_reference         shift and go to state 16
    array_location                 shift and go to state 13
    statement_nullable             shift and go to state 345
    array_slice                    shift and go to state 36
    builtin_call                   shift and go to state 12
    array_element                  shift and go to state 18
    synonym_statement              shift and go to state 23
    exit_action                    shift and go to state 25
    return_action                  shift and go to state 43
    newmode_statement              shift and go to state 27
    procedure_statement            shift and go to state 15
    if_action                      shift and go to state 28
    identifier                     shift and go to state 35
    bracketed_action               shift and go to state 30
    action                         shift and go to state 33
    string_element                 shift and go to state 32
    statement                      shift and go to state 126
    do_action                      shift and go to state 40
    location                       shift and go to state 41
    builtin_name                   shift and go to state 29
    string_slice                   shift and go to state 45

state 342

    (30) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable . END SEMI

    END             shift and go to state 346


state 343

    (101) elsif_expression -> elsif_expression ELSIF boolean_expression then_expression .

    ELSIF           reduce using rule 101 (elsif_expression -> elsif_expression ELSIF boolean_expression then_expression .)
    ELSE            reduce using rule 101 (elsif_expression -> elsif_expression ELSIF boolean_expression then_expression .)


state 344

    (35) result_spec -> RETURNS LPAREN mode . LOC RPAREN
    (36) result_spec -> RETURNS LPAREN mode . RPAREN

    LOC             shift and go to state 348
    RPAREN          shift and go to state 347


state 345

    (29) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable . END SEMI

    END             shift and go to state 349


state 346

    (30) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END . SEMI

    SEMI            shift and go to state 350


state 347

    (36) result_spec -> RETURNS LPAREN mode RPAREN .

    SEMI            reduce using rule 36 (result_spec -> RETURNS LPAREN mode RPAREN .)


state 348

    (35) result_spec -> RETURNS LPAREN mode LOC . RPAREN

    RPAREN          shift and go to state 351


state 349

    (29) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END . SEMI

    SEMI            shift and go to state 352


state 350

    (30) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .

    DCL             reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    SYN             reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    TYPE            reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    ID              reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    EXIT            reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    RESULT          reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    RETURN          reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    IF              reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    DO              reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    ABS             reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    ASC             reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    NUM             reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    UPPER           reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    LOWER           reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    LENGTH          reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    READ            reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    PRINT           reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    $end            reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    END             reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)


state 351

    (35) result_spec -> RETURNS LPAREN mode LOC RPAREN .

    SEMI            reduce using rule 35 (result_spec -> RETURNS LPAREN mode LOC RPAREN .)


state 352

    (29) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .

    DCL             reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    SYN             reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    TYPE            reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    ID              reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    EXIT            reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    RESULT          reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    RETURN          reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    IF              reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    DO              reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    ABS             reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    ASC             reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    NUM             reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    UPPER           reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    LOWER           reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    LENGTH          reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    READ            reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    PRINT           reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    $end            reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    END             reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COLON in state 17 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 35 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 56 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 109 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 260 resolved as shift
