Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement statement_nullable
Rule 3     statement_nullable -> statement statement_nullable
Rule 4     statement_nullable -> empty
Rule 5     statement -> declaration_statement
Rule 6     statement -> synonym_statement
Rule 7     statement -> newmode_statement
Rule 8     statement -> action_statement
Rule 9     statement -> procedure_statement
Rule 10    synonym_statement -> SYN synonym_list SEMI
Rule 11    synonym_list -> synonym_definition
Rule 12    synonym_list -> synonym_definition COMMA synonym_list
Rule 13    synonym_definition -> identifier_list mode ASSIGN expression
Rule 14    synonym_definition -> identifier_list ASSIGN expression
Rule 15    declaration_statement -> DCL declaration_list SEMI
Rule 16    declaration_list -> declaration
Rule 17    declaration_list -> declaration COMMA declaration_list
Rule 18    declaration -> identifier_list mode initialization
Rule 19    declaration -> identifier_list mode
Rule 20    initialization -> ASSIGN expression
Rule 21    identifier_list -> identifier
Rule 22    identifier_list -> identifier COMMA identifier_list
Rule 23    identifier -> ID
Rule 24    newmode_statement -> TYPE newmode_list SEMI
Rule 25    newmode_list -> mode_definition
Rule 26    newmode_list -> mode_definition COMMA newmode_list
Rule 27    mode_definition -> identifier_list ASSIGN mode
Rule 28    procedure_statement -> ID COLON procedure_definition
Rule 29    procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI
Rule 30    procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI
Rule 31    procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI
Rule 32    procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI
Rule 33    formal_parameter_list -> formal_parameter
Rule 34    formal_parameter_list -> formal_parameter COMMA formal_parameter_list
Rule 35    formal_parameter -> identifier_list mode LOC
Rule 36    formal_parameter -> identifier_list mode
Rule 37    result_spec -> RETURNS LPAREN mode LOC RPAREN
Rule 38    result_spec -> RETURNS LPAREN mode RPAREN
Rule 39    mode -> mode_name
Rule 40    mode -> discrete_mode
Rule 41    mode -> reference_mode
Rule 42    mode -> composite_mode
Rule 43    mode_name -> identifier
Rule 44    discrete_mode -> integer_mode
Rule 45    discrete_mode -> boolean_mode
Rule 46    discrete_mode -> character_mode
Rule 47    discrete_mode -> discrete_range_mode
Rule 48    discrete_mode_name -> identifier
Rule 49    integer_mode -> INT
Rule 50    boolean_mode -> BOOL
Rule 51    character_mode -> CHAR
Rule 52    discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN
Rule 53    discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN
Rule 54    literal_range -> lower_bound COLON upper_bound
Rule 55    lower_bound -> expression
Rule 56    upper_bound -> expression
Rule 57    reference_mode -> REF mode
Rule 58    composite_mode -> string_mode
Rule 59    composite_mode -> array_mode
Rule 60    string_mode -> CHARS LBRACKET string_length RBRACKET
Rule 61    string_length -> integer_literal
Rule 62    array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode
Rule 63    index_mode_list -> index_mode
Rule 64    index_mode_list -> index_mode COMMA index_mode_list
Rule 65    index_mode -> discrete_mode
Rule 66    index_mode -> literal_range
Rule 67    element_mode -> mode
Rule 68    location -> identifier
Rule 69    location -> dereferenced_reference
Rule 70    location -> string_element
Rule 71    location -> string_slice
Rule 72    location -> array_element
Rule 73    location -> array_slice
Rule 74    location -> call_action
Rule 75    dereferenced_reference -> array_location ARROW
Rule 76    string_element -> identifier LBRACKET start_element RBRACKET
Rule 77    start_element -> expression
Rule 78    string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET
Rule 79    left_element -> expression
Rule 80    right_element -> expression
Rule 81    array_element -> array_location LBRACKET expression_list RBRACKET
Rule 82    expression_list -> expression
Rule 83    expression_list -> expression COMMA expression_list
Rule 84    array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET
Rule 85    array_location -> location
Rule 86    expression -> operand0
Rule 87    expression -> conditional_expression
Rule 88    parenthesized_expression -> LPAREN expression RPAREN
Rule 89    conditional_expression -> IF expression then_expression else_expression FI
Rule 90    conditional_expression -> IF expression then_expression elsif_expression else_expression FI
Rule 91    then_expression -> THEN expression
Rule 92    else_expression -> ELSE expression
Rule 93    elsif_expression -> ELSIF expression then_expression
Rule 94    elsif_expression -> elsif_expression ELSIF expression then_expression
Rule 95    operand0 -> operand1
Rule 96    operand0 -> operand0 operator1 operand1
Rule 97    operand1 -> operand2
Rule 98    operand1 -> operand1 operator2 operand2
Rule 99    operand2 -> operand3
Rule 100   operand2 -> operand2 arithmetic_multiplicative_operator operand3
Rule 101   operand3 -> monadic_operator operand4
Rule 102   operand3 -> operand4
Rule 103   operand4 -> array_location
Rule 104   operand4 -> referenced_location
Rule 105   operand4 -> primitive_value
Rule 106   arithmetic_multiplicative_operator -> TIMES
Rule 107   arithmetic_multiplicative_operator -> DIVIDE
Rule 108   arithmetic_multiplicative_operator -> MODULO
Rule 109   monadic_operator -> MINUS
Rule 110   monadic_operator -> NOT
Rule 111   referenced_location -> ARROW array_location
Rule 112   operator1 -> membership_operator
Rule 113   operator1 -> relational_operator
Rule 114   relational_operator -> AND
Rule 115   relational_operator -> OR
Rule 116   relational_operator -> EQUAL
Rule 117   relational_operator -> NOTEQ
Rule 118   relational_operator -> GREATER
Rule 119   relational_operator -> GTEQUAL
Rule 120   relational_operator -> LESS
Rule 121   relational_operator -> LTEQUAL
Rule 122   operator2 -> arithmetic_additive_operator
Rule 123   operator2 -> string_concatenation_operator
Rule 124   arithmetic_additive_operator -> PLUS
Rule 125   arithmetic_additive_operator -> MINUS
Rule 126   string_concatenation_operator -> CONCAT
Rule 127   membership_operator -> IN
Rule 128   primitive_value -> literal
Rule 129   primitive_value -> value_array_element
Rule 130   primitive_value -> value_array_slice
Rule 131   primitive_value -> parenthesized_expression
Rule 132   literal -> integer_literal
Rule 133   literal -> boolean_literal
Rule 134   literal -> character_literal
Rule 135   literal -> empty_literal
Rule 136   literal -> character_string_literal
Rule 137   value_array_element -> primitive_value LBRACKET expression_list RBRACKET
Rule 138   value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET
Rule 139   integer_literal -> ICONST
Rule 140   boolean_literal -> TRUE
Rule 141   boolean_literal -> FALSE
Rule 142   character_literal -> CCONST
Rule 143   character_literal -> HAT LPAREN ICONST RPAREN
Rule 144   empty_literal -> NULL
Rule 145   character_string_literal -> SCONST
Rule 146   action_statement -> identifier COLON action SEMI
Rule 147   action_statement -> action SEMI
Rule 148   action -> bracketed_action
Rule 149   action -> assignment_action
Rule 150   action -> call_action
Rule 151   action -> exit_action
Rule 152   action -> result_action
Rule 153   action -> return_action
Rule 154   bracketed_action -> if_action
Rule 155   bracketed_action -> do_action
Rule 156   assignment_action -> array_location assigning_operator expression
Rule 157   assigning_operator -> closed_dyadic_operator ASSIGN
Rule 158   assigning_operator -> ASSIGN
Rule 159   closed_dyadic_operator -> arithmetic_additive_operator
Rule 160   closed_dyadic_operator -> arithmetic_multiplicative_operator
Rule 161   closed_dyadic_operator -> string_concatenation_operator
Rule 162   if_action -> IF expression then_clause else_clause FI
Rule 163   if_action -> IF expression then_clause FI
Rule 164   then_clause -> THEN action_statement_list
Rule 165   else_clause -> ELSE action_statement_list
Rule 166   else_clause -> ELSIF expression then_clause else_clause
Rule 167   else_clause -> ELSIF expression then_clause
Rule 168   action_statement_list -> action_statement action_statement_nullable
Rule 169   action_statement_nullable -> action_statement action_statement_nullable
Rule 170   action_statement_nullable -> empty
Rule 171   call_action -> procedure_call
Rule 172   call_action -> builtin_call
Rule 173   builtin_call -> builtin_name LPAREN parameter_list RPAREN
Rule 174   builtin_call -> builtin_name LPAREN RPAREN
Rule 175   builtin_name -> ABS
Rule 176   builtin_name -> ASC
Rule 177   builtin_name -> NUM
Rule 178   builtin_name -> UPPER
Rule 179   builtin_name -> LOWER
Rule 180   builtin_name -> LENGTH
Rule 181   builtin_name -> READ
Rule 182   builtin_name -> PRINT
Rule 183   procedure_call -> ID LPAREN parameter_list RPAREN
Rule 184   procedure_call -> ID LPAREN RPAREN
Rule 185   parameter_list -> expression
Rule 186   parameter_list -> expression COMMA parameter_list
Rule 187   exit_action -> EXIT identifier
Rule 188   return_action -> RETURN result
Rule 189   result -> expression
Rule 190   result -> empty
Rule 191   result_action -> RESULT expression
Rule 192   do_action -> DO control_part SEMI action_statement_nullable OD
Rule 193   do_action -> DO action_statement_nullable OD
Rule 194   control_part -> for_control while_control
Rule 195   control_part -> for_control
Rule 196   control_part -> while_control
Rule 197   for_control -> FOR iteration
Rule 198   iteration -> step_enumeration
Rule 199   iteration -> range_enumeration
Rule 200   step_enumeration -> identifier ASSIGN expression step_value DOWN end_value
Rule 201   step_enumeration -> identifier ASSIGN expression step_value end_value
Rule 202   step_enumeration -> identifier ASSIGN expression DOWN end_value
Rule 203   step_enumeration -> identifier ASSIGN expression end_value
Rule 204   step_value -> BY expression
Rule 205   end_value -> TO expression
Rule 206   range_enumeration -> identifier DOWN IN discrete_mode
Rule 207   range_enumeration -> identifier IN discrete_mode
Rule 208   while_control -> WHILE expression
Rule 209   empty -> <empty>

Terminals, with rules where they appear

ABS                  : 175
AND                  : 114
ARRAY                : 62
ARROW                : 75 111
ASC                  : 176
ASSIGN               : 13 14 20 27 157 158 200 201 202 203
BOOL                 : 50
BY                   : 204
CCONST               : 142
CHAR                 : 51
CHARS                : 60
COLON                : 28 54 78 84 138 146
COMMA                : 12 17 22 26 34 64 83 186
CONCAT               : 126
DCL                  : 15
DIVIDE               : 107
DO                   : 192 193
DOWN                 : 200 202 206
ELSE                 : 92 165
ELSIF                : 93 94 166 167
END                  : 29 30 31 32
EQUAL                : 116
EXIT                 : 187
FALSE                : 141
FI                   : 89 90 162 163
FOR                  : 197
GREATER              : 118
GTEQUAL              : 119
HAT                  : 143
ICONST               : 139 143
ID                   : 23 28 183 184
IF                   : 89 90 162 163
IN                   : 127 206 207
INT                  : 49
LBRACKET             : 60 62 76 78 81 84 137 138
LENGTH               : 180
LESS                 : 120
LOC                  : 35 37
LOWER                : 179
LPAREN               : 29 30 31 32 37 38 52 53 88 143 173 174 183 184
LTEQUAL              : 121
MINUS                : 109 125
MODULO               : 108
NOT                  : 110
NOTEQ                : 117
NULL                 : 144
NUM                  : 177
OD                   : 192 193
OR                   : 115
PLUS                 : 124
PRINT                : 182
PROC                 : 29 30 31 32
RBRACKET             : 60 62 76 78 81 84 137 138
READ                 : 181
REF                  : 57
RESULT               : 191
RETURN               : 188
RETURNS              : 37 38
RPAREN               : 29 30 31 32 37 38 52 53 88 143 173 174 183 184
SCONST               : 145
SEMI                 : 10 15 24 29 29 30 30 31 31 32 32 146 147 192
SYN                  : 10
THEN                 : 91 164
TIMES                : 106
TO                   : 205
TRUE                 : 140
TYPE                 : 24
UPPER                : 178
WHILE                : 208
error                : 

Nonterminals, with rules where they appear

action               : 146 147
action_statement     : 8 168 169
action_statement_list : 164 165
action_statement_nullable : 168 169 192 193
arithmetic_additive_operator : 122 159
arithmetic_multiplicative_operator : 100 160
array_element        : 72
array_location       : 75 81 84 103 111 156
array_mode           : 59
array_slice          : 73
assigning_operator   : 156
assignment_action    : 149
boolean_literal      : 133
boolean_mode         : 45
bracketed_action     : 148
builtin_call         : 172
builtin_name         : 173 174
call_action          : 74 150
character_literal    : 134
character_mode       : 46
character_string_literal : 136
closed_dyadic_operator : 157
composite_mode       : 42
conditional_expression : 87
control_part         : 192
declaration          : 16 17
declaration_list     : 15 17
declaration_statement : 5
dereferenced_reference : 69
discrete_mode        : 40 53 65 206 207
discrete_mode_name   : 52
discrete_range_mode  : 47
do_action            : 155
element_mode         : 62
else_clause          : 162 166
else_expression      : 89 90
elsif_expression     : 90 94
empty                : 4 170 190
empty_literal        : 135
end_value            : 200 201 202 203
exit_action          : 151
expression           : 13 14 20 55 56 77 79 80 82 83 88 89 90 91 92 93 94 138 138 156 162 163 166 167 185 186 189 191 200 201 202 203 204 205 208
expression_list      : 81 83 137
for_control          : 194 195
formal_parameter     : 33 34
formal_parameter_list : 29 30 34
identifier           : 21 22 43 48 68 76 78 146 187 200 201 202 203 206 207
identifier_list      : 13 14 18 19 22 27 35 36
if_action            : 154
index_mode           : 63 64
index_mode_list      : 62 64
initialization       : 18
integer_literal      : 61 132
integer_mode         : 44
iteration            : 197
left_element         : 78
literal              : 128
literal_range        : 52 53 66
location             : 85
lower_bound          : 54 84
membership_operator  : 112
mode                 : 13 18 19 27 35 36 37 38 57 67
mode_definition      : 25 26
mode_name            : 39
monadic_operator     : 101
newmode_list         : 24 26
newmode_statement    : 7
operand0             : 86 96
operand1             : 95 96 98
operand2             : 97 98 100
operand3             : 99 100
operand4             : 101 102
operator1            : 96
operator2            : 98
parameter_list       : 173 183 186
parenthesized_expression : 131
primitive_value      : 105 137 138
procedure_call       : 171
procedure_definition : 28
procedure_statement  : 9
program              : 0
range_enumeration    : 199
reference_mode       : 41
referenced_location  : 104
relational_operator  : 113
result               : 188
result_action        : 152
result_spec          : 29 31
return_action        : 153
right_element        : 78
start_element        : 76
statement            : 2 3
statement_list       : 1
statement_nullable   : 2 3 29 30 31 32
step_enumeration     : 198
step_value           : 200 201
string_concatenation_operator : 123 161
string_element       : 70
string_length        : 60
string_mode          : 58
string_slice         : 71
synonym_definition   : 11 12
synonym_list         : 10 12
synonym_statement    : 6
then_clause          : 162 163 166 167
then_expression      : 89 90 93 94
upper_bound          : 54 84
value_array_element  : 129
value_array_slice    : 130
while_control        : 194 196

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement statement_nullable
    (5) statement -> . declaration_statement
    (6) statement -> . synonym_statement
    (7) statement -> . newmode_statement
    (8) statement -> . action_statement
    (9) statement -> . procedure_statement
    (15) declaration_statement -> . DCL declaration_list SEMI
    (10) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (146) action_statement -> . identifier COLON action SEMI
    (147) action_statement -> . action SEMI
    (28) procedure_statement -> . ID COLON procedure_definition
    (23) identifier -> . ID
    (148) action -> . bracketed_action
    (149) action -> . assignment_action
    (150) action -> . call_action
    (151) action -> . exit_action
    (152) action -> . result_action
    (153) action -> . return_action
    (154) bracketed_action -> . if_action
    (155) bracketed_action -> . do_action
    (156) assignment_action -> . array_location assigning_operator expression
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (187) exit_action -> . EXIT identifier
    (191) result_action -> . RESULT expression
    (188) return_action -> . RETURN result
    (162) if_action -> . IF expression then_clause else_clause FI
    (163) if_action -> . IF expression then_clause FI
    (192) do_action -> . DO control_part SEMI action_statement_nullable OD
    (193) do_action -> . DO action_statement_nullable OD
    (85) array_location -> . location
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    DCL             shift and go to state 3
    SYN             shift and go to state 29
    TYPE            shift and go to state 18
    ID              shift and go to state 2
    EXIT            shift and go to state 30
    RESULT          shift and go to state 22
    RETURN          shift and go to state 12
    IF              shift and go to state 45
    DO              shift and go to state 26
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    action                         shift and go to state 1
    result_action                  shift and go to state 15
    array_location                 shift and go to state 6
    return_action                  shift and go to state 7
    dereferenced_reference         shift and go to state 8
    declaration_statement          shift and go to state 9
    exit_action                    shift and go to state 37
    bracketed_action               shift and go to state 17
    builtin_call                   shift and go to state 14
    array_element                  shift and go to state 5
    newmode_statement              shift and go to state 16
    statement                      shift and go to state 13
    procedure_statement            shift and go to state 19
    do_action                      shift and go to state 21
    identifier                     shift and go to state 41
    call_action                    shift and go to state 23
    string_slice                   shift and go to state 24
    statement_list                 shift and go to state 25
    action_statement               shift and go to state 31
    location                       shift and go to state 34
    if_action                      shift and go to state 35
    builtin_name                   shift and go to state 36
    assignment_action              shift and go to state 11
    array_slice                    shift and go to state 38
    synonym_statement              shift and go to state 39
    program                        shift and go to state 40
    procedure_call                 shift and go to state 42
    string_element                 shift and go to state 44

state 1

    (147) action_statement -> action . SEMI

    SEMI            shift and go to state 46


state 2

    (28) procedure_statement -> ID . COLON procedure_definition
    (23) identifier -> ID .
    (183) procedure_call -> ID . LPAREN parameter_list RPAREN
    (184) procedure_call -> ID . LPAREN RPAREN

  ! shift/reduce conflict for COLON resolved as shift
    COLON           shift and go to state 47
    LBRACKET        reduce using rule 23 (identifier -> ID .)
    ARROW           reduce using rule 23 (identifier -> ID .)
    ASSIGN          reduce using rule 23 (identifier -> ID .)
    PLUS            reduce using rule 23 (identifier -> ID .)
    MINUS           reduce using rule 23 (identifier -> ID .)
    TIMES           reduce using rule 23 (identifier -> ID .)
    DIVIDE          reduce using rule 23 (identifier -> ID .)
    MODULO          reduce using rule 23 (identifier -> ID .)
    CONCAT          reduce using rule 23 (identifier -> ID .)
    LPAREN          shift and go to state 48

  ! COLON           [ reduce using rule 23 (identifier -> ID .) ]


state 3

    (15) declaration_statement -> DCL . declaration_list SEMI
    (16) declaration_list -> . declaration
    (17) declaration_list -> . declaration COMMA declaration_list
    (18) declaration -> . identifier_list mode initialization
    (19) declaration -> . identifier_list mode
    (21) identifier_list -> . identifier
    (22) identifier_list -> . identifier COMMA identifier_list
    (23) identifier -> . ID

    ID              shift and go to state 53

    identifier_list                shift and go to state 49
    identifier                     shift and go to state 51
    declaration                    shift and go to state 52
    declaration_list               shift and go to state 50

state 4

    (180) builtin_name -> LENGTH .

    LPAREN          reduce using rule 180 (builtin_name -> LENGTH .)


state 5

    (72) location -> array_element .

    ARROW           reduce using rule 72 (location -> array_element .)
    LBRACKET        reduce using rule 72 (location -> array_element .)
    ASSIGN          reduce using rule 72 (location -> array_element .)
    PLUS            reduce using rule 72 (location -> array_element .)
    MINUS           reduce using rule 72 (location -> array_element .)
    TIMES           reduce using rule 72 (location -> array_element .)
    DIVIDE          reduce using rule 72 (location -> array_element .)
    MODULO          reduce using rule 72 (location -> array_element .)
    CONCAT          reduce using rule 72 (location -> array_element .)
    IN              reduce using rule 72 (location -> array_element .)
    AND             reduce using rule 72 (location -> array_element .)
    OR              reduce using rule 72 (location -> array_element .)
    EQUAL           reduce using rule 72 (location -> array_element .)
    NOTEQ           reduce using rule 72 (location -> array_element .)
    GREATER         reduce using rule 72 (location -> array_element .)
    GTEQUAL         reduce using rule 72 (location -> array_element .)
    LESS            reduce using rule 72 (location -> array_element .)
    LTEQUAL         reduce using rule 72 (location -> array_element .)
    RBRACKET        reduce using rule 72 (location -> array_element .)
    COLON           reduce using rule 72 (location -> array_element .)
    SEMI            reduce using rule 72 (location -> array_element .)
    THEN            reduce using rule 72 (location -> array_element .)
    COMMA           reduce using rule 72 (location -> array_element .)
    RPAREN          reduce using rule 72 (location -> array_element .)
    ELSE            reduce using rule 72 (location -> array_element .)
    ELSIF           reduce using rule 72 (location -> array_element .)
    DOWN            reduce using rule 72 (location -> array_element .)
    BY              reduce using rule 72 (location -> array_element .)
    TO              reduce using rule 72 (location -> array_element .)
    FI              reduce using rule 72 (location -> array_element .)
    WHILE           reduce using rule 72 (location -> array_element .)


state 6

    (156) assignment_action -> array_location . assigning_operator expression
    (75) dereferenced_reference -> array_location . ARROW
    (81) array_element -> array_location . LBRACKET expression_list RBRACKET
    (84) array_slice -> array_location . LBRACKET lower_bound COLON upper_bound RBRACKET
    (157) assigning_operator -> . closed_dyadic_operator ASSIGN
    (158) assigning_operator -> . ASSIGN
    (159) closed_dyadic_operator -> . arithmetic_additive_operator
    (160) closed_dyadic_operator -> . arithmetic_multiplicative_operator
    (161) closed_dyadic_operator -> . string_concatenation_operator
    (124) arithmetic_additive_operator -> . PLUS
    (125) arithmetic_additive_operator -> . MINUS
    (106) arithmetic_multiplicative_operator -> . TIMES
    (107) arithmetic_multiplicative_operator -> . DIVIDE
    (108) arithmetic_multiplicative_operator -> . MODULO
    (126) string_concatenation_operator -> . CONCAT

    ARROW           shift and go to state 56
    LBRACKET        shift and go to state 54
    ASSIGN          shift and go to state 65
    PLUS            shift and go to state 57
    MINUS           shift and go to state 61
    TIMES           shift and go to state 58
    DIVIDE          shift and go to state 60
    MODULO          shift and go to state 64
    CONCAT          shift and go to state 67

    arithmetic_multiplicative_operator shift and go to state 63
    string_concatenation_operator  shift and go to state 55
    arithmetic_additive_operator   shift and go to state 62
    closed_dyadic_operator         shift and go to state 66
    assigning_operator             shift and go to state 59

state 7

    (153) action -> return_action .

    SEMI            reduce using rule 153 (action -> return_action .)


state 8

    (69) location -> dereferenced_reference .

    ARROW           reduce using rule 69 (location -> dereferenced_reference .)
    LBRACKET        reduce using rule 69 (location -> dereferenced_reference .)
    ASSIGN          reduce using rule 69 (location -> dereferenced_reference .)
    PLUS            reduce using rule 69 (location -> dereferenced_reference .)
    MINUS           reduce using rule 69 (location -> dereferenced_reference .)
    TIMES           reduce using rule 69 (location -> dereferenced_reference .)
    DIVIDE          reduce using rule 69 (location -> dereferenced_reference .)
    MODULO          reduce using rule 69 (location -> dereferenced_reference .)
    CONCAT          reduce using rule 69 (location -> dereferenced_reference .)
    IN              reduce using rule 69 (location -> dereferenced_reference .)
    AND             reduce using rule 69 (location -> dereferenced_reference .)
    OR              reduce using rule 69 (location -> dereferenced_reference .)
    EQUAL           reduce using rule 69 (location -> dereferenced_reference .)
    NOTEQ           reduce using rule 69 (location -> dereferenced_reference .)
    GREATER         reduce using rule 69 (location -> dereferenced_reference .)
    GTEQUAL         reduce using rule 69 (location -> dereferenced_reference .)
    LESS            reduce using rule 69 (location -> dereferenced_reference .)
    LTEQUAL         reduce using rule 69 (location -> dereferenced_reference .)
    RBRACKET        reduce using rule 69 (location -> dereferenced_reference .)
    COLON           reduce using rule 69 (location -> dereferenced_reference .)
    SEMI            reduce using rule 69 (location -> dereferenced_reference .)
    THEN            reduce using rule 69 (location -> dereferenced_reference .)
    COMMA           reduce using rule 69 (location -> dereferenced_reference .)
    RPAREN          reduce using rule 69 (location -> dereferenced_reference .)
    ELSE            reduce using rule 69 (location -> dereferenced_reference .)
    ELSIF           reduce using rule 69 (location -> dereferenced_reference .)
    DOWN            reduce using rule 69 (location -> dereferenced_reference .)
    BY              reduce using rule 69 (location -> dereferenced_reference .)
    TO              reduce using rule 69 (location -> dereferenced_reference .)
    FI              reduce using rule 69 (location -> dereferenced_reference .)
    WHILE           reduce using rule 69 (location -> dereferenced_reference .)


state 9

    (5) statement -> declaration_statement .

    DCL             reduce using rule 5 (statement -> declaration_statement .)
    SYN             reduce using rule 5 (statement -> declaration_statement .)
    TYPE            reduce using rule 5 (statement -> declaration_statement .)
    ID              reduce using rule 5 (statement -> declaration_statement .)
    EXIT            reduce using rule 5 (statement -> declaration_statement .)
    RESULT          reduce using rule 5 (statement -> declaration_statement .)
    RETURN          reduce using rule 5 (statement -> declaration_statement .)
    IF              reduce using rule 5 (statement -> declaration_statement .)
    DO              reduce using rule 5 (statement -> declaration_statement .)
    ABS             reduce using rule 5 (statement -> declaration_statement .)
    ASC             reduce using rule 5 (statement -> declaration_statement .)
    NUM             reduce using rule 5 (statement -> declaration_statement .)
    UPPER           reduce using rule 5 (statement -> declaration_statement .)
    LOWER           reduce using rule 5 (statement -> declaration_statement .)
    LENGTH          reduce using rule 5 (statement -> declaration_statement .)
    READ            reduce using rule 5 (statement -> declaration_statement .)
    PRINT           reduce using rule 5 (statement -> declaration_statement .)
    $end            reduce using rule 5 (statement -> declaration_statement .)
    END             reduce using rule 5 (statement -> declaration_statement .)


state 10

    (181) builtin_name -> READ .

    LPAREN          reduce using rule 181 (builtin_name -> READ .)


state 11

    (149) action -> assignment_action .

    SEMI            reduce using rule 149 (action -> assignment_action .)


state 12

    (188) return_action -> RETURN . result
    (189) result -> . expression
    (190) result -> . empty
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (209) empty -> .
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (89) conditional_expression -> . IF expression then_expression else_expression FI
    (90) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (97) operand1 -> . operand2
    (98) operand1 -> . operand1 operator2 operand2
    (99) operand2 -> . operand3
    (100) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (101) operand3 -> . monadic_operator operand4
    (102) operand3 -> . operand4
    (109) monadic_operator -> . MINUS
    (110) monadic_operator -> . NOT
    (103) operand4 -> . array_location
    (104) operand4 -> . referenced_location
    (105) operand4 -> . primitive_value
    (85) array_location -> . location
    (111) referenced_location -> . ARROW array_location
    (128) primitive_value -> . literal
    (129) primitive_value -> . value_array_element
    (130) primitive_value -> . value_array_slice
    (131) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (132) literal -> . integer_literal
    (133) literal -> . boolean_literal
    (134) literal -> . character_literal
    (135) literal -> . empty_literal
    (136) literal -> . character_string_literal
    (137) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (138) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (88) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (139) integer_literal -> . ICONST
    (140) boolean_literal -> . TRUE
    (141) boolean_literal -> . FALSE
    (142) character_literal -> . CCONST
    (143) character_literal -> . HAT LPAREN ICONST RPAREN
    (144) empty_literal -> . NULL
    (145) character_string_literal -> . SCONST
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT

    SEMI            reduce using rule 209 (empty -> .)
    IF              shift and go to state 104
    MINUS           shift and go to state 75
    NOT             shift and go to state 100
    ARROW           shift and go to state 71
    LPAREN          shift and go to state 85
    ID              shift and go to state 70
    ICONST          shift and go to state 80
    TRUE            shift and go to state 96
    FALSE           shift and go to state 78
    CCONST          shift and go to state 86
    HAT             shift and go to state 74
    NULL            shift and go to state 97
    SCONST          shift and go to state 94
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    literal                        shift and go to state 68
    monadic_operator               shift and go to state 69
    result                         shift and go to state 87
    empty                          shift and go to state 73
    dereferenced_reference         shift and go to state 8
    parenthesized_expression       shift and go to state 76
    character_literal              shift and go to state 77
    value_array_slice              shift and go to state 79
    builtin_call                   shift and go to state 14
    array_element                  shift and go to state 5
    operand0                       shift and go to state 81
    operand1                       shift and go to state 83
    operand4                       shift and go to state 84
    array_location                 shift and go to state 72
    primitive_value                shift and go to state 82
    empty_literal                  shift and go to state 88
    call_action                    shift and go to state 89
    string_slice                   shift and go to state 24
    referenced_location            shift and go to state 90
    expression                     shift and go to state 91
    conditional_expression         shift and go to state 92
    integer_literal                shift and go to state 93
    value_array_element            shift and go to state 95
    operand2                       shift and go to state 98
    location                       shift and go to state 34
    operand3                       shift and go to state 99
    builtin_name                   shift and go to state 36
    array_slice                    shift and go to state 38
    character_string_literal       shift and go to state 101
    identifier                     shift and go to state 102
    procedure_call                 shift and go to state 42
    boolean_literal                shift and go to state 103
    string_element                 shift and go to state 44

state 13

    (2) statement_list -> statement . statement_nullable
    (3) statement_nullable -> . statement statement_nullable
    (4) statement_nullable -> . empty
    (5) statement -> . declaration_statement
    (6) statement -> . synonym_statement
    (7) statement -> . newmode_statement
    (8) statement -> . action_statement
    (9) statement -> . procedure_statement
    (209) empty -> .
    (15) declaration_statement -> . DCL declaration_list SEMI
    (10) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (146) action_statement -> . identifier COLON action SEMI
    (147) action_statement -> . action SEMI
    (28) procedure_statement -> . ID COLON procedure_definition
    (23) identifier -> . ID
    (148) action -> . bracketed_action
    (149) action -> . assignment_action
    (150) action -> . call_action
    (151) action -> . exit_action
    (152) action -> . result_action
    (153) action -> . return_action
    (154) bracketed_action -> . if_action
    (155) bracketed_action -> . do_action
    (156) assignment_action -> . array_location assigning_operator expression
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (187) exit_action -> . EXIT identifier
    (191) result_action -> . RESULT expression
    (188) return_action -> . RETURN result
    (162) if_action -> . IF expression then_clause else_clause FI
    (163) if_action -> . IF expression then_clause FI
    (192) do_action -> . DO control_part SEMI action_statement_nullable OD
    (193) do_action -> . DO action_statement_nullable OD
    (85) array_location -> . location
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    $end            reduce using rule 209 (empty -> .)
    DCL             shift and go to state 3
    SYN             shift and go to state 29
    TYPE            shift and go to state 18
    ID              shift and go to state 2
    EXIT            shift and go to state 30
    RESULT          shift and go to state 22
    RETURN          shift and go to state 12
    IF              shift and go to state 45
    DO              shift and go to state 26
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    action                         shift and go to state 1
    result_action                  shift and go to state 15
    array_location                 shift and go to state 6
    empty                          shift and go to state 105
    return_action                  shift and go to state 7
    dereferenced_reference         shift and go to state 8
    declaration_statement          shift and go to state 9
    exit_action                    shift and go to state 37
    bracketed_action               shift and go to state 17
    builtin_call                   shift and go to state 14
    array_element                  shift and go to state 5
    newmode_statement              shift and go to state 16
    statement                      shift and go to state 106
    procedure_statement            shift and go to state 19
    do_action                      shift and go to state 21
    identifier                     shift and go to state 41
    call_action                    shift and go to state 23
    string_slice                   shift and go to state 24
    action_statement               shift and go to state 31
    statement_nullable             shift and go to state 107
    location                       shift and go to state 34
    if_action                      shift and go to state 35
    builtin_name                   shift and go to state 36
    assignment_action              shift and go to state 11
    array_slice                    shift and go to state 38
    synonym_statement              shift and go to state 39
    procedure_call                 shift and go to state 42
    string_element                 shift and go to state 44

state 14

    (172) call_action -> builtin_call .

    ARROW           reduce using rule 172 (call_action -> builtin_call .)
    LBRACKET        reduce using rule 172 (call_action -> builtin_call .)
    TIMES           reduce using rule 172 (call_action -> builtin_call .)
    DIVIDE          reduce using rule 172 (call_action -> builtin_call .)
    MODULO          reduce using rule 172 (call_action -> builtin_call .)
    PLUS            reduce using rule 172 (call_action -> builtin_call .)
    MINUS           reduce using rule 172 (call_action -> builtin_call .)
    CONCAT          reduce using rule 172 (call_action -> builtin_call .)
    IN              reduce using rule 172 (call_action -> builtin_call .)
    AND             reduce using rule 172 (call_action -> builtin_call .)
    OR              reduce using rule 172 (call_action -> builtin_call .)
    EQUAL           reduce using rule 172 (call_action -> builtin_call .)
    NOTEQ           reduce using rule 172 (call_action -> builtin_call .)
    GREATER         reduce using rule 172 (call_action -> builtin_call .)
    GTEQUAL         reduce using rule 172 (call_action -> builtin_call .)
    LESS            reduce using rule 172 (call_action -> builtin_call .)
    LTEQUAL         reduce using rule 172 (call_action -> builtin_call .)
    DOWN            reduce using rule 172 (call_action -> builtin_call .)
    BY              reduce using rule 172 (call_action -> builtin_call .)
    TO              reduce using rule 172 (call_action -> builtin_call .)
    SEMI            reduce using rule 172 (call_action -> builtin_call .)
    THEN            reduce using rule 172 (call_action -> builtin_call .)
    COMMA           reduce using rule 172 (call_action -> builtin_call .)
    RPAREN          reduce using rule 172 (call_action -> builtin_call .)
    RBRACKET        reduce using rule 172 (call_action -> builtin_call .)
    COLON           reduce using rule 172 (call_action -> builtin_call .)
    ELSE            reduce using rule 172 (call_action -> builtin_call .)
    ELSIF           reduce using rule 172 (call_action -> builtin_call .)
    FI              reduce using rule 172 (call_action -> builtin_call .)
    WHILE           reduce using rule 172 (call_action -> builtin_call .)
    ASSIGN          reduce using rule 172 (call_action -> builtin_call .)


state 15

    (152) action -> result_action .

    SEMI            reduce using rule 152 (action -> result_action .)


state 16

    (7) statement -> newmode_statement .

    DCL             reduce using rule 7 (statement -> newmode_statement .)
    SYN             reduce using rule 7 (statement -> newmode_statement .)
    TYPE            reduce using rule 7 (statement -> newmode_statement .)
    ID              reduce using rule 7 (statement -> newmode_statement .)
    EXIT            reduce using rule 7 (statement -> newmode_statement .)
    RESULT          reduce using rule 7 (statement -> newmode_statement .)
    RETURN          reduce using rule 7 (statement -> newmode_statement .)
    IF              reduce using rule 7 (statement -> newmode_statement .)
    DO              reduce using rule 7 (statement -> newmode_statement .)
    ABS             reduce using rule 7 (statement -> newmode_statement .)
    ASC             reduce using rule 7 (statement -> newmode_statement .)
    NUM             reduce using rule 7 (statement -> newmode_statement .)
    UPPER           reduce using rule 7 (statement -> newmode_statement .)
    LOWER           reduce using rule 7 (statement -> newmode_statement .)
    LENGTH          reduce using rule 7 (statement -> newmode_statement .)
    READ            reduce using rule 7 (statement -> newmode_statement .)
    PRINT           reduce using rule 7 (statement -> newmode_statement .)
    $end            reduce using rule 7 (statement -> newmode_statement .)
    END             reduce using rule 7 (statement -> newmode_statement .)


state 17

    (148) action -> bracketed_action .

    SEMI            reduce using rule 148 (action -> bracketed_action .)


state 18

    (24) newmode_statement -> TYPE . newmode_list SEMI
    (25) newmode_list -> . mode_definition
    (26) newmode_list -> . mode_definition COMMA newmode_list
    (27) mode_definition -> . identifier_list ASSIGN mode
    (21) identifier_list -> . identifier
    (22) identifier_list -> . identifier COMMA identifier_list
    (23) identifier -> . ID

    ID              shift and go to state 53

    identifier_list                shift and go to state 108
    identifier                     shift and go to state 51
    mode_definition                shift and go to state 109
    newmode_list                   shift and go to state 110

state 19

    (9) statement -> procedure_statement .

    DCL             reduce using rule 9 (statement -> procedure_statement .)
    SYN             reduce using rule 9 (statement -> procedure_statement .)
    TYPE            reduce using rule 9 (statement -> procedure_statement .)
    ID              reduce using rule 9 (statement -> procedure_statement .)
    EXIT            reduce using rule 9 (statement -> procedure_statement .)
    RESULT          reduce using rule 9 (statement -> procedure_statement .)
    RETURN          reduce using rule 9 (statement -> procedure_statement .)
    IF              reduce using rule 9 (statement -> procedure_statement .)
    DO              reduce using rule 9 (statement -> procedure_statement .)
    ABS             reduce using rule 9 (statement -> procedure_statement .)
    ASC             reduce using rule 9 (statement -> procedure_statement .)
    NUM             reduce using rule 9 (statement -> procedure_statement .)
    UPPER           reduce using rule 9 (statement -> procedure_statement .)
    LOWER           reduce using rule 9 (statement -> procedure_statement .)
    LENGTH          reduce using rule 9 (statement -> procedure_statement .)
    READ            reduce using rule 9 (statement -> procedure_statement .)
    PRINT           reduce using rule 9 (statement -> procedure_statement .)
    $end            reduce using rule 9 (statement -> procedure_statement .)
    END             reduce using rule 9 (statement -> procedure_statement .)


state 20

    (177) builtin_name -> NUM .

    LPAREN          reduce using rule 177 (builtin_name -> NUM .)


state 21

    (155) bracketed_action -> do_action .

    SEMI            reduce using rule 155 (bracketed_action -> do_action .)


state 22

    (191) result_action -> RESULT . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (89) conditional_expression -> . IF expression then_expression else_expression FI
    (90) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (97) operand1 -> . operand2
    (98) operand1 -> . operand1 operator2 operand2
    (99) operand2 -> . operand3
    (100) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (101) operand3 -> . monadic_operator operand4
    (102) operand3 -> . operand4
    (109) monadic_operator -> . MINUS
    (110) monadic_operator -> . NOT
    (103) operand4 -> . array_location
    (104) operand4 -> . referenced_location
    (105) operand4 -> . primitive_value
    (85) array_location -> . location
    (111) referenced_location -> . ARROW array_location
    (128) primitive_value -> . literal
    (129) primitive_value -> . value_array_element
    (130) primitive_value -> . value_array_slice
    (131) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (132) literal -> . integer_literal
    (133) literal -> . boolean_literal
    (134) literal -> . character_literal
    (135) literal -> . empty_literal
    (136) literal -> . character_string_literal
    (137) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (138) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (88) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (139) integer_literal -> . ICONST
    (140) boolean_literal -> . TRUE
    (141) boolean_literal -> . FALSE
    (142) character_literal -> . CCONST
    (143) character_literal -> . HAT LPAREN ICONST RPAREN
    (144) empty_literal -> . NULL
    (145) character_string_literal -> . SCONST
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT

    IF              shift and go to state 104
    MINUS           shift and go to state 75
    NOT             shift and go to state 100
    ARROW           shift and go to state 71
    LPAREN          shift and go to state 85
    ID              shift and go to state 70
    ICONST          shift and go to state 80
    TRUE            shift and go to state 96
    FALSE           shift and go to state 78
    CCONST          shift and go to state 86
    HAT             shift and go to state 74
    NULL            shift and go to state 97
    SCONST          shift and go to state 94
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    literal                        shift and go to state 68
    operand2                       shift and go to state 98
    array_location                 shift and go to state 72
    dereferenced_reference         shift and go to state 8
    parenthesized_expression       shift and go to state 76
    character_literal              shift and go to state 77
    value_array_slice              shift and go to state 79
    builtin_call                   shift and go to state 14
    array_element                  shift and go to state 5
    operand0                       shift and go to state 81
    operand1                       shift and go to state 83
    value_array_element            shift and go to state 95
    primitive_value                shift and go to state 82
    empty_literal                  shift and go to state 88
    call_action                    shift and go to state 89
    string_slice                   shift and go to state 24
    referenced_location            shift and go to state 90
    operand4                       shift and go to state 84
    expression                     shift and go to state 111
    conditional_expression         shift and go to state 92
    integer_literal                shift and go to state 93
    monadic_operator               shift and go to state 69
    location                       shift and go to state 34
    operand3                       shift and go to state 99
    builtin_name                   shift and go to state 36
    array_slice                    shift and go to state 38
    character_string_literal       shift and go to state 101
    identifier                     shift and go to state 102
    procedure_call                 shift and go to state 42
    boolean_literal                shift and go to state 103
    string_element                 shift and go to state 44

state 23

    (150) action -> call_action .
    (74) location -> call_action .

    SEMI            reduce using rule 150 (action -> call_action .)
    ARROW           reduce using rule 74 (location -> call_action .)
    LBRACKET        reduce using rule 74 (location -> call_action .)
    ASSIGN          reduce using rule 74 (location -> call_action .)
    PLUS            reduce using rule 74 (location -> call_action .)
    MINUS           reduce using rule 74 (location -> call_action .)
    TIMES           reduce using rule 74 (location -> call_action .)
    DIVIDE          reduce using rule 74 (location -> call_action .)
    MODULO          reduce using rule 74 (location -> call_action .)
    CONCAT          reduce using rule 74 (location -> call_action .)


state 24

    (71) location -> string_slice .

    ARROW           reduce using rule 71 (location -> string_slice .)
    LBRACKET        reduce using rule 71 (location -> string_slice .)
    ASSIGN          reduce using rule 71 (location -> string_slice .)
    PLUS            reduce using rule 71 (location -> string_slice .)
    MINUS           reduce using rule 71 (location -> string_slice .)
    TIMES           reduce using rule 71 (location -> string_slice .)
    DIVIDE          reduce using rule 71 (location -> string_slice .)
    MODULO          reduce using rule 71 (location -> string_slice .)
    CONCAT          reduce using rule 71 (location -> string_slice .)
    IN              reduce using rule 71 (location -> string_slice .)
    AND             reduce using rule 71 (location -> string_slice .)
    OR              reduce using rule 71 (location -> string_slice .)
    EQUAL           reduce using rule 71 (location -> string_slice .)
    NOTEQ           reduce using rule 71 (location -> string_slice .)
    GREATER         reduce using rule 71 (location -> string_slice .)
    GTEQUAL         reduce using rule 71 (location -> string_slice .)
    LESS            reduce using rule 71 (location -> string_slice .)
    LTEQUAL         reduce using rule 71 (location -> string_slice .)
    RBRACKET        reduce using rule 71 (location -> string_slice .)
    COLON           reduce using rule 71 (location -> string_slice .)
    SEMI            reduce using rule 71 (location -> string_slice .)
    THEN            reduce using rule 71 (location -> string_slice .)
    COMMA           reduce using rule 71 (location -> string_slice .)
    RPAREN          reduce using rule 71 (location -> string_slice .)
    ELSE            reduce using rule 71 (location -> string_slice .)
    ELSIF           reduce using rule 71 (location -> string_slice .)
    DOWN            reduce using rule 71 (location -> string_slice .)
    BY              reduce using rule 71 (location -> string_slice .)
    TO              reduce using rule 71 (location -> string_slice .)
    FI              reduce using rule 71 (location -> string_slice .)
    WHILE           reduce using rule 71 (location -> string_slice .)


state 25

    (1) program -> statement_list .

    $end            reduce using rule 1 (program -> statement_list .)


state 26

    (192) do_action -> DO . control_part SEMI action_statement_nullable OD
    (193) do_action -> DO . action_statement_nullable OD
    (194) control_part -> . for_control while_control
    (195) control_part -> . for_control
    (196) control_part -> . while_control
    (169) action_statement_nullable -> . action_statement action_statement_nullable
    (170) action_statement_nullable -> . empty
    (197) for_control -> . FOR iteration
    (208) while_control -> . WHILE expression
    (146) action_statement -> . identifier COLON action SEMI
    (147) action_statement -> . action SEMI
    (209) empty -> .
    (23) identifier -> . ID
    (148) action -> . bracketed_action
    (149) action -> . assignment_action
    (150) action -> . call_action
    (151) action -> . exit_action
    (152) action -> . result_action
    (153) action -> . return_action
    (154) bracketed_action -> . if_action
    (155) bracketed_action -> . do_action
    (156) assignment_action -> . array_location assigning_operator expression
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (187) exit_action -> . EXIT identifier
    (191) result_action -> . RESULT expression
    (188) return_action -> . RETURN result
    (162) if_action -> . IF expression then_clause else_clause FI
    (163) if_action -> . IF expression then_clause FI
    (192) do_action -> . DO control_part SEMI action_statement_nullable OD
    (193) do_action -> . DO action_statement_nullable OD
    (85) array_location -> . location
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    FOR             shift and go to state 118
    WHILE           shift and go to state 117
    OD              reduce using rule 209 (empty -> .)
    ID              shift and go to state 70
    EXIT            shift and go to state 30
    RESULT          shift and go to state 22
    RETURN          shift and go to state 12
    IF              shift and go to state 45
    DO              shift and go to state 26
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    array_location                 shift and go to state 6
    array_element                  shift and go to state 5
    while_control                  shift and go to state 114
    builtin_call                   shift and go to state 14
    for_control                    shift and go to state 115
    empty                          shift and go to state 112
    return_action                  shift and go to state 7
    call_action                    shift and go to state 23
    action_statement               shift and go to state 116
    dereferenced_reference         shift and go to state 8
    action_statement_nullable      shift and go to state 113
    assignment_action              shift and go to state 11
    array_slice                    shift and go to state 38
    location                       shift and go to state 34
    if_action                      shift and go to state 35
    action                         shift and go to state 1
    result_action                  shift and go to state 15
    builtin_name                   shift and go to state 36
    exit_action                    shift and go to state 37
    bracketed_action               shift and go to state 17
    control_part                   shift and go to state 119
    string_slice                   shift and go to state 24
    procedure_call                 shift and go to state 42
    do_action                      shift and go to state 21
    string_element                 shift and go to state 44
    identifier                     shift and go to state 41

state 27

    (182) builtin_name -> PRINT .

    LPAREN          reduce using rule 182 (builtin_name -> PRINT .)


state 28

    (179) builtin_name -> LOWER .

    LPAREN          reduce using rule 179 (builtin_name -> LOWER .)


state 29

    (10) synonym_statement -> SYN . synonym_list SEMI
    (11) synonym_list -> . synonym_definition
    (12) synonym_list -> . synonym_definition COMMA synonym_list
    (13) synonym_definition -> . identifier_list mode ASSIGN expression
    (14) synonym_definition -> . identifier_list ASSIGN expression
    (21) identifier_list -> . identifier
    (22) identifier_list -> . identifier COMMA identifier_list
    (23) identifier -> . ID

    ID              shift and go to state 53

    identifier_list                shift and go to state 120
    synonym_list                   shift and go to state 121
    synonym_definition             shift and go to state 122
    identifier                     shift and go to state 51

state 30

    (187) exit_action -> EXIT . identifier
    (23) identifier -> . ID

    ID              shift and go to state 53

    identifier                     shift and go to state 123

state 31

    (8) statement -> action_statement .

    DCL             reduce using rule 8 (statement -> action_statement .)
    SYN             reduce using rule 8 (statement -> action_statement .)
    TYPE            reduce using rule 8 (statement -> action_statement .)
    ID              reduce using rule 8 (statement -> action_statement .)
    EXIT            reduce using rule 8 (statement -> action_statement .)
    RESULT          reduce using rule 8 (statement -> action_statement .)
    RETURN          reduce using rule 8 (statement -> action_statement .)
    IF              reduce using rule 8 (statement -> action_statement .)
    DO              reduce using rule 8 (statement -> action_statement .)
    ABS             reduce using rule 8 (statement -> action_statement .)
    ASC             reduce using rule 8 (statement -> action_statement .)
    NUM             reduce using rule 8 (statement -> action_statement .)
    UPPER           reduce using rule 8 (statement -> action_statement .)
    LOWER           reduce using rule 8 (statement -> action_statement .)
    LENGTH          reduce using rule 8 (statement -> action_statement .)
    READ            reduce using rule 8 (statement -> action_statement .)
    PRINT           reduce using rule 8 (statement -> action_statement .)
    $end            reduce using rule 8 (statement -> action_statement .)
    END             reduce using rule 8 (statement -> action_statement .)


state 32

    (176) builtin_name -> ASC .

    LPAREN          reduce using rule 176 (builtin_name -> ASC .)


state 33

    (175) builtin_name -> ABS .

    LPAREN          reduce using rule 175 (builtin_name -> ABS .)


state 34

    (85) array_location -> location .

    ARROW           reduce using rule 85 (array_location -> location .)
    LBRACKET        reduce using rule 85 (array_location -> location .)
    ASSIGN          reduce using rule 85 (array_location -> location .)
    PLUS            reduce using rule 85 (array_location -> location .)
    MINUS           reduce using rule 85 (array_location -> location .)
    TIMES           reduce using rule 85 (array_location -> location .)
    DIVIDE          reduce using rule 85 (array_location -> location .)
    MODULO          reduce using rule 85 (array_location -> location .)
    CONCAT          reduce using rule 85 (array_location -> location .)
    IN              reduce using rule 85 (array_location -> location .)
    AND             reduce using rule 85 (array_location -> location .)
    OR              reduce using rule 85 (array_location -> location .)
    EQUAL           reduce using rule 85 (array_location -> location .)
    NOTEQ           reduce using rule 85 (array_location -> location .)
    GREATER         reduce using rule 85 (array_location -> location .)
    GTEQUAL         reduce using rule 85 (array_location -> location .)
    LESS            reduce using rule 85 (array_location -> location .)
    LTEQUAL         reduce using rule 85 (array_location -> location .)
    DOWN            reduce using rule 85 (array_location -> location .)
    BY              reduce using rule 85 (array_location -> location .)
    TO              reduce using rule 85 (array_location -> location .)
    COMMA           reduce using rule 85 (array_location -> location .)
    SEMI            reduce using rule 85 (array_location -> location .)
    RPAREN          reduce using rule 85 (array_location -> location .)
    WHILE           reduce using rule 85 (array_location -> location .)
    THEN            reduce using rule 85 (array_location -> location .)
    RBRACKET        reduce using rule 85 (array_location -> location .)
    ELSE            reduce using rule 85 (array_location -> location .)
    ELSIF           reduce using rule 85 (array_location -> location .)
    COLON           reduce using rule 85 (array_location -> location .)
    FI              reduce using rule 85 (array_location -> location .)


state 35

    (154) bracketed_action -> if_action .

    SEMI            reduce using rule 154 (bracketed_action -> if_action .)


state 36

    (173) builtin_call -> builtin_name . LPAREN parameter_list RPAREN
    (174) builtin_call -> builtin_name . LPAREN RPAREN

    LPAREN          shift and go to state 124


state 37

    (151) action -> exit_action .

    SEMI            reduce using rule 151 (action -> exit_action .)


state 38

    (73) location -> array_slice .

    ARROW           reduce using rule 73 (location -> array_slice .)
    LBRACKET        reduce using rule 73 (location -> array_slice .)
    ASSIGN          reduce using rule 73 (location -> array_slice .)
    PLUS            reduce using rule 73 (location -> array_slice .)
    MINUS           reduce using rule 73 (location -> array_slice .)
    TIMES           reduce using rule 73 (location -> array_slice .)
    DIVIDE          reduce using rule 73 (location -> array_slice .)
    MODULO          reduce using rule 73 (location -> array_slice .)
    CONCAT          reduce using rule 73 (location -> array_slice .)
    IN              reduce using rule 73 (location -> array_slice .)
    AND             reduce using rule 73 (location -> array_slice .)
    OR              reduce using rule 73 (location -> array_slice .)
    EQUAL           reduce using rule 73 (location -> array_slice .)
    NOTEQ           reduce using rule 73 (location -> array_slice .)
    GREATER         reduce using rule 73 (location -> array_slice .)
    GTEQUAL         reduce using rule 73 (location -> array_slice .)
    LESS            reduce using rule 73 (location -> array_slice .)
    LTEQUAL         reduce using rule 73 (location -> array_slice .)
    RBRACKET        reduce using rule 73 (location -> array_slice .)
    COLON           reduce using rule 73 (location -> array_slice .)
    SEMI            reduce using rule 73 (location -> array_slice .)
    THEN            reduce using rule 73 (location -> array_slice .)
    COMMA           reduce using rule 73 (location -> array_slice .)
    RPAREN          reduce using rule 73 (location -> array_slice .)
    ELSE            reduce using rule 73 (location -> array_slice .)
    ELSIF           reduce using rule 73 (location -> array_slice .)
    DOWN            reduce using rule 73 (location -> array_slice .)
    BY              reduce using rule 73 (location -> array_slice .)
    TO              reduce using rule 73 (location -> array_slice .)
    FI              reduce using rule 73 (location -> array_slice .)
    WHILE           reduce using rule 73 (location -> array_slice .)


state 39

    (6) statement -> synonym_statement .

    DCL             reduce using rule 6 (statement -> synonym_statement .)
    SYN             reduce using rule 6 (statement -> synonym_statement .)
    TYPE            reduce using rule 6 (statement -> synonym_statement .)
    ID              reduce using rule 6 (statement -> synonym_statement .)
    EXIT            reduce using rule 6 (statement -> synonym_statement .)
    RESULT          reduce using rule 6 (statement -> synonym_statement .)
    RETURN          reduce using rule 6 (statement -> synonym_statement .)
    IF              reduce using rule 6 (statement -> synonym_statement .)
    DO              reduce using rule 6 (statement -> synonym_statement .)
    ABS             reduce using rule 6 (statement -> synonym_statement .)
    ASC             reduce using rule 6 (statement -> synonym_statement .)
    NUM             reduce using rule 6 (statement -> synonym_statement .)
    UPPER           reduce using rule 6 (statement -> synonym_statement .)
    LOWER           reduce using rule 6 (statement -> synonym_statement .)
    LENGTH          reduce using rule 6 (statement -> synonym_statement .)
    READ            reduce using rule 6 (statement -> synonym_statement .)
    PRINT           reduce using rule 6 (statement -> synonym_statement .)
    $end            reduce using rule 6 (statement -> synonym_statement .)
    END             reduce using rule 6 (statement -> synonym_statement .)


state 40

    (0) S' -> program .



state 41

    (146) action_statement -> identifier . COLON action SEMI
    (68) location -> identifier .
    (76) string_element -> identifier . LBRACKET start_element RBRACKET
    (78) string_slice -> identifier . LBRACKET left_element COLON right_element RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    COLON           shift and go to state 126
    ARROW           reduce using rule 68 (location -> identifier .)
    ASSIGN          reduce using rule 68 (location -> identifier .)
    PLUS            reduce using rule 68 (location -> identifier .)
    MINUS           reduce using rule 68 (location -> identifier .)
    TIMES           reduce using rule 68 (location -> identifier .)
    DIVIDE          reduce using rule 68 (location -> identifier .)
    MODULO          reduce using rule 68 (location -> identifier .)
    CONCAT          reduce using rule 68 (location -> identifier .)
    LBRACKET        shift and go to state 125

  ! LBRACKET        [ reduce using rule 68 (location -> identifier .) ]


state 42

    (171) call_action -> procedure_call .

    ARROW           reduce using rule 171 (call_action -> procedure_call .)
    LBRACKET        reduce using rule 171 (call_action -> procedure_call .)
    TIMES           reduce using rule 171 (call_action -> procedure_call .)
    DIVIDE          reduce using rule 171 (call_action -> procedure_call .)
    MODULO          reduce using rule 171 (call_action -> procedure_call .)
    PLUS            reduce using rule 171 (call_action -> procedure_call .)
    MINUS           reduce using rule 171 (call_action -> procedure_call .)
    CONCAT          reduce using rule 171 (call_action -> procedure_call .)
    IN              reduce using rule 171 (call_action -> procedure_call .)
    AND             reduce using rule 171 (call_action -> procedure_call .)
    OR              reduce using rule 171 (call_action -> procedure_call .)
    EQUAL           reduce using rule 171 (call_action -> procedure_call .)
    NOTEQ           reduce using rule 171 (call_action -> procedure_call .)
    GREATER         reduce using rule 171 (call_action -> procedure_call .)
    GTEQUAL         reduce using rule 171 (call_action -> procedure_call .)
    LESS            reduce using rule 171 (call_action -> procedure_call .)
    LTEQUAL         reduce using rule 171 (call_action -> procedure_call .)
    DOWN            reduce using rule 171 (call_action -> procedure_call .)
    BY              reduce using rule 171 (call_action -> procedure_call .)
    TO              reduce using rule 171 (call_action -> procedure_call .)
    SEMI            reduce using rule 171 (call_action -> procedure_call .)
    THEN            reduce using rule 171 (call_action -> procedure_call .)
    COMMA           reduce using rule 171 (call_action -> procedure_call .)
    RPAREN          reduce using rule 171 (call_action -> procedure_call .)
    RBRACKET        reduce using rule 171 (call_action -> procedure_call .)
    COLON           reduce using rule 171 (call_action -> procedure_call .)
    ELSE            reduce using rule 171 (call_action -> procedure_call .)
    ELSIF           reduce using rule 171 (call_action -> procedure_call .)
    FI              reduce using rule 171 (call_action -> procedure_call .)
    WHILE           reduce using rule 171 (call_action -> procedure_call .)
    ASSIGN          reduce using rule 171 (call_action -> procedure_call .)


state 43

    (178) builtin_name -> UPPER .

    LPAREN          reduce using rule 178 (builtin_name -> UPPER .)


state 44

    (70) location -> string_element .

    ARROW           reduce using rule 70 (location -> string_element .)
    LBRACKET        reduce using rule 70 (location -> string_element .)
    ASSIGN          reduce using rule 70 (location -> string_element .)
    PLUS            reduce using rule 70 (location -> string_element .)
    MINUS           reduce using rule 70 (location -> string_element .)
    TIMES           reduce using rule 70 (location -> string_element .)
    DIVIDE          reduce using rule 70 (location -> string_element .)
    MODULO          reduce using rule 70 (location -> string_element .)
    CONCAT          reduce using rule 70 (location -> string_element .)
    IN              reduce using rule 70 (location -> string_element .)
    AND             reduce using rule 70 (location -> string_element .)
    OR              reduce using rule 70 (location -> string_element .)
    EQUAL           reduce using rule 70 (location -> string_element .)
    NOTEQ           reduce using rule 70 (location -> string_element .)
    GREATER         reduce using rule 70 (location -> string_element .)
    GTEQUAL         reduce using rule 70 (location -> string_element .)
    LESS            reduce using rule 70 (location -> string_element .)
    LTEQUAL         reduce using rule 70 (location -> string_element .)
    RBRACKET        reduce using rule 70 (location -> string_element .)
    COLON           reduce using rule 70 (location -> string_element .)
    SEMI            reduce using rule 70 (location -> string_element .)
    THEN            reduce using rule 70 (location -> string_element .)
    COMMA           reduce using rule 70 (location -> string_element .)
    RPAREN          reduce using rule 70 (location -> string_element .)
    ELSE            reduce using rule 70 (location -> string_element .)
    ELSIF           reduce using rule 70 (location -> string_element .)
    DOWN            reduce using rule 70 (location -> string_element .)
    BY              reduce using rule 70 (location -> string_element .)
    TO              reduce using rule 70 (location -> string_element .)
    FI              reduce using rule 70 (location -> string_element .)
    WHILE           reduce using rule 70 (location -> string_element .)


state 45

    (162) if_action -> IF . expression then_clause else_clause FI
    (163) if_action -> IF . expression then_clause FI
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (89) conditional_expression -> . IF expression then_expression else_expression FI
    (90) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (97) operand1 -> . operand2
    (98) operand1 -> . operand1 operator2 operand2
    (99) operand2 -> . operand3
    (100) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (101) operand3 -> . monadic_operator operand4
    (102) operand3 -> . operand4
    (109) monadic_operator -> . MINUS
    (110) monadic_operator -> . NOT
    (103) operand4 -> . array_location
    (104) operand4 -> . referenced_location
    (105) operand4 -> . primitive_value
    (85) array_location -> . location
    (111) referenced_location -> . ARROW array_location
    (128) primitive_value -> . literal
    (129) primitive_value -> . value_array_element
    (130) primitive_value -> . value_array_slice
    (131) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (132) literal -> . integer_literal
    (133) literal -> . boolean_literal
    (134) literal -> . character_literal
    (135) literal -> . empty_literal
    (136) literal -> . character_string_literal
    (137) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (138) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (88) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (139) integer_literal -> . ICONST
    (140) boolean_literal -> . TRUE
    (141) boolean_literal -> . FALSE
    (142) character_literal -> . CCONST
    (143) character_literal -> . HAT LPAREN ICONST RPAREN
    (144) empty_literal -> . NULL
    (145) character_string_literal -> . SCONST
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT

    IF              shift and go to state 104
    MINUS           shift and go to state 75
    NOT             shift and go to state 100
    ARROW           shift and go to state 71
    LPAREN          shift and go to state 85
    ID              shift and go to state 70
    ICONST          shift and go to state 80
    TRUE            shift and go to state 96
    FALSE           shift and go to state 78
    CCONST          shift and go to state 86
    HAT             shift and go to state 74
    NULL            shift and go to state 97
    SCONST          shift and go to state 94
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    literal                        shift and go to state 68
    monadic_operator               shift and go to state 69
    array_location                 shift and go to state 72
    dereferenced_reference         shift and go to state 8
    parenthesized_expression       shift and go to state 76
    character_literal              shift and go to state 77
    value_array_slice              shift and go to state 79
    builtin_call                   shift and go to state 14
    array_element                  shift and go to state 5
    operand0                       shift and go to state 81
    operand1                       shift and go to state 83
    operand4                       shift and go to state 84
    primitive_value                shift and go to state 82
    empty_literal                  shift and go to state 88
    call_action                    shift and go to state 89
    string_slice                   shift and go to state 24
    referenced_location            shift and go to state 90
    expression                     shift and go to state 127
    conditional_expression         shift and go to state 92
    integer_literal                shift and go to state 93
    value_array_element            shift and go to state 95
    operand2                       shift and go to state 98
    location                       shift and go to state 34
    operand3                       shift and go to state 99
    builtin_name                   shift and go to state 36
    array_slice                    shift and go to state 38
    character_string_literal       shift and go to state 101
    identifier                     shift and go to state 102
    procedure_call                 shift and go to state 42
    boolean_literal                shift and go to state 103
    string_element                 shift and go to state 44

state 46

    (147) action_statement -> action SEMI .

    ID              reduce using rule 147 (action_statement -> action SEMI .)
    EXIT            reduce using rule 147 (action_statement -> action SEMI .)
    RESULT          reduce using rule 147 (action_statement -> action SEMI .)
    RETURN          reduce using rule 147 (action_statement -> action SEMI .)
    IF              reduce using rule 147 (action_statement -> action SEMI .)
    DO              reduce using rule 147 (action_statement -> action SEMI .)
    ABS             reduce using rule 147 (action_statement -> action SEMI .)
    ASC             reduce using rule 147 (action_statement -> action SEMI .)
    NUM             reduce using rule 147 (action_statement -> action SEMI .)
    UPPER           reduce using rule 147 (action_statement -> action SEMI .)
    LOWER           reduce using rule 147 (action_statement -> action SEMI .)
    LENGTH          reduce using rule 147 (action_statement -> action SEMI .)
    READ            reduce using rule 147 (action_statement -> action SEMI .)
    PRINT           reduce using rule 147 (action_statement -> action SEMI .)
    FI              reduce using rule 147 (action_statement -> action SEMI .)
    ELSE            reduce using rule 147 (action_statement -> action SEMI .)
    ELSIF           reduce using rule 147 (action_statement -> action SEMI .)
    DCL             reduce using rule 147 (action_statement -> action SEMI .)
    SYN             reduce using rule 147 (action_statement -> action SEMI .)
    TYPE            reduce using rule 147 (action_statement -> action SEMI .)
    END             reduce using rule 147 (action_statement -> action SEMI .)
    $end            reduce using rule 147 (action_statement -> action SEMI .)
    OD              reduce using rule 147 (action_statement -> action SEMI .)


state 47

    (28) procedure_statement -> ID COLON . procedure_definition
    (29) procedure_definition -> . PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI
    (30) procedure_definition -> . PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI
    (31) procedure_definition -> . PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI
    (32) procedure_definition -> . PROC LPAREN RPAREN SEMI statement_nullable END SEMI

    PROC            shift and go to state 128

    procedure_definition           shift and go to state 129

state 48

    (183) procedure_call -> ID LPAREN . parameter_list RPAREN
    (184) procedure_call -> ID LPAREN . RPAREN
    (185) parameter_list -> . expression
    (186) parameter_list -> . expression COMMA parameter_list
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (89) conditional_expression -> . IF expression then_expression else_expression FI
    (90) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (97) operand1 -> . operand2
    (98) operand1 -> . operand1 operator2 operand2
    (99) operand2 -> . operand3
    (100) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (101) operand3 -> . monadic_operator operand4
    (102) operand3 -> . operand4
    (109) monadic_operator -> . MINUS
    (110) monadic_operator -> . NOT
    (103) operand4 -> . array_location
    (104) operand4 -> . referenced_location
    (105) operand4 -> . primitive_value
    (85) array_location -> . location
    (111) referenced_location -> . ARROW array_location
    (128) primitive_value -> . literal
    (129) primitive_value -> . value_array_element
    (130) primitive_value -> . value_array_slice
    (131) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (132) literal -> . integer_literal
    (133) literal -> . boolean_literal
    (134) literal -> . character_literal
    (135) literal -> . empty_literal
    (136) literal -> . character_string_literal
    (137) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (138) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (88) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (139) integer_literal -> . ICONST
    (140) boolean_literal -> . TRUE
    (141) boolean_literal -> . FALSE
    (142) character_literal -> . CCONST
    (143) character_literal -> . HAT LPAREN ICONST RPAREN
    (144) empty_literal -> . NULL
    (145) character_string_literal -> . SCONST
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT

    RPAREN          shift and go to state 130
    IF              shift and go to state 104
    MINUS           shift and go to state 75
    NOT             shift and go to state 100
    ARROW           shift and go to state 71
    LPAREN          shift and go to state 85
    ID              shift and go to state 70
    ICONST          shift and go to state 80
    TRUE            shift and go to state 96
    FALSE           shift and go to state 78
    CCONST          shift and go to state 86
    HAT             shift and go to state 74
    NULL            shift and go to state 97
    SCONST          shift and go to state 94
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    literal                        shift and go to state 68
    operand2                       shift and go to state 98
    array_location                 shift and go to state 72
    dereferenced_reference         shift and go to state 8
    parenthesized_expression       shift and go to state 76
    character_literal              shift and go to state 77
    parameter_list                 shift and go to state 132
    value_array_slice              shift and go to state 79
    builtin_call                   shift and go to state 14
    array_element                  shift and go to state 5
    operand0                       shift and go to state 81
    operand1                       shift and go to state 83
    value_array_element            shift and go to state 95
    primitive_value                shift and go to state 82
    empty_literal                  shift and go to state 88
    call_action                    shift and go to state 89
    string_slice                   shift and go to state 24
    referenced_location            shift and go to state 90
    operand4                       shift and go to state 84
    expression                     shift and go to state 131
    conditional_expression         shift and go to state 92
    integer_literal                shift and go to state 93
    monadic_operator               shift and go to state 69
    location                       shift and go to state 34
    operand3                       shift and go to state 99
    builtin_name                   shift and go to state 36
    array_slice                    shift and go to state 38
    character_string_literal       shift and go to state 101
    identifier                     shift and go to state 102
    procedure_call                 shift and go to state 42
    boolean_literal                shift and go to state 103
    string_element                 shift and go to state 44

state 49

    (18) declaration -> identifier_list . mode initialization
    (19) declaration -> identifier_list . mode
    (39) mode -> . mode_name
    (40) mode -> . discrete_mode
    (41) mode -> . reference_mode
    (42) mode -> . composite_mode
    (43) mode_name -> . identifier
    (44) discrete_mode -> . integer_mode
    (45) discrete_mode -> . boolean_mode
    (46) discrete_mode -> . character_mode
    (47) discrete_mode -> . discrete_range_mode
    (57) reference_mode -> . REF mode
    (58) composite_mode -> . string_mode
    (59) composite_mode -> . array_mode
    (23) identifier -> . ID
    (49) integer_mode -> . INT
    (50) boolean_mode -> . BOOL
    (51) character_mode -> . CHAR
    (52) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (53) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (60) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (62) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (48) discrete_mode_name -> . identifier

    REF             shift and go to state 139
    ID              shift and go to state 53
    INT             shift and go to state 142
    BOOL            shift and go to state 146
    CHAR            shift and go to state 137
    CHARS           shift and go to state 141
    ARRAY           shift and go to state 145

    boolean_mode                   shift and go to state 133
    array_mode                     shift and go to state 140
    string_mode                    shift and go to state 134
    integer_mode                   shift and go to state 135
    discrete_range_mode            shift and go to state 147
    reference_mode                 shift and go to state 136
    composite_mode                 shift and go to state 138
    mode                           shift and go to state 148
    identifier                     shift and go to state 149
    discrete_mode_name             shift and go to state 143
    discrete_mode                  shift and go to state 144
    mode_name                      shift and go to state 150
    character_mode                 shift and go to state 151

state 50

    (15) declaration_statement -> DCL declaration_list . SEMI

    SEMI            shift and go to state 152


state 51

    (21) identifier_list -> identifier .
    (22) identifier_list -> identifier . COMMA identifier_list

    REF             reduce using rule 21 (identifier_list -> identifier .)
    ID              reduce using rule 21 (identifier_list -> identifier .)
    INT             reduce using rule 21 (identifier_list -> identifier .)
    BOOL            reduce using rule 21 (identifier_list -> identifier .)
    CHAR            reduce using rule 21 (identifier_list -> identifier .)
    CHARS           reduce using rule 21 (identifier_list -> identifier .)
    ARRAY           reduce using rule 21 (identifier_list -> identifier .)
    ASSIGN          reduce using rule 21 (identifier_list -> identifier .)
    COMMA           shift and go to state 153


state 52

    (16) declaration_list -> declaration .
    (17) declaration_list -> declaration . COMMA declaration_list

    SEMI            reduce using rule 16 (declaration_list -> declaration .)
    COMMA           shift and go to state 154


state 53

    (23) identifier -> ID .

    COMMA           reduce using rule 23 (identifier -> ID .)
    REF             reduce using rule 23 (identifier -> ID .)
    ID              reduce using rule 23 (identifier -> ID .)
    INT             reduce using rule 23 (identifier -> ID .)
    BOOL            reduce using rule 23 (identifier -> ID .)
    CHAR            reduce using rule 23 (identifier -> ID .)
    CHARS           reduce using rule 23 (identifier -> ID .)
    ARRAY           reduce using rule 23 (identifier -> ID .)
    LPAREN          reduce using rule 23 (identifier -> ID .)
    SEMI            reduce using rule 23 (identifier -> ID .)
    ASSIGN          reduce using rule 23 (identifier -> ID .)
    LOC             reduce using rule 23 (identifier -> ID .)
    RPAREN          reduce using rule 23 (identifier -> ID .)
    DOWN            reduce using rule 23 (identifier -> ID .)
    IN              reduce using rule 23 (identifier -> ID .)


state 54

    (81) array_element -> array_location LBRACKET . expression_list RBRACKET
    (84) array_slice -> array_location LBRACKET . lower_bound COLON upper_bound RBRACKET
    (82) expression_list -> . expression
    (83) expression_list -> . expression COMMA expression_list
    (55) lower_bound -> . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (89) conditional_expression -> . IF expression then_expression else_expression FI
    (90) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (97) operand1 -> . operand2
    (98) operand1 -> . operand1 operator2 operand2
    (99) operand2 -> . operand3
    (100) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (101) operand3 -> . monadic_operator operand4
    (102) operand3 -> . operand4
    (109) monadic_operator -> . MINUS
    (110) monadic_operator -> . NOT
    (103) operand4 -> . array_location
    (104) operand4 -> . referenced_location
    (105) operand4 -> . primitive_value
    (85) array_location -> . location
    (111) referenced_location -> . ARROW array_location
    (128) primitive_value -> . literal
    (129) primitive_value -> . value_array_element
    (130) primitive_value -> . value_array_slice
    (131) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (132) literal -> . integer_literal
    (133) literal -> . boolean_literal
    (134) literal -> . character_literal
    (135) literal -> . empty_literal
    (136) literal -> . character_string_literal
    (137) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (138) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (88) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (139) integer_literal -> . ICONST
    (140) boolean_literal -> . TRUE
    (141) boolean_literal -> . FALSE
    (142) character_literal -> . CCONST
    (143) character_literal -> . HAT LPAREN ICONST RPAREN
    (144) empty_literal -> . NULL
    (145) character_string_literal -> . SCONST
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT

    IF              shift and go to state 104
    MINUS           shift and go to state 75
    NOT             shift and go to state 100
    ARROW           shift and go to state 71
    LPAREN          shift and go to state 85
    ID              shift and go to state 70
    ICONST          shift and go to state 80
    TRUE            shift and go to state 96
    FALSE           shift and go to state 78
    CCONST          shift and go to state 86
    HAT             shift and go to state 74
    NULL            shift and go to state 97
    SCONST          shift and go to state 94
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    literal                        shift and go to state 68
    monadic_operator               shift and go to state 69
    array_location                 shift and go to state 72
    dereferenced_reference         shift and go to state 8
    parenthesized_expression       shift and go to state 76
    character_literal              shift and go to state 77
    value_array_slice              shift and go to state 79
    builtin_call                   shift and go to state 14
    array_element                  shift and go to state 5
    operand0                       shift and go to state 81
    operand1                       shift and go to state 83
    operand4                       shift and go to state 84
    primitive_value                shift and go to state 82
    empty_literal                  shift and go to state 88
    call_action                    shift and go to state 89
    string_slice                   shift and go to state 24
    referenced_location            shift and go to state 90
    expression                     shift and go to state 155
    conditional_expression         shift and go to state 92
    integer_literal                shift and go to state 93
    character_string_literal       shift and go to state 101
    value_array_element            shift and go to state 95
    operand2                       shift and go to state 98
    expression_list                shift and go to state 156
    location                       shift and go to state 34
    operand3                       shift and go to state 99
    lower_bound                    shift and go to state 157
    builtin_name                   shift and go to state 36
    array_slice                    shift and go to state 38
    identifier                     shift and go to state 102
    procedure_call                 shift and go to state 42
    boolean_literal                shift and go to state 103
    string_element                 shift and go to state 44

state 55

    (161) closed_dyadic_operator -> string_concatenation_operator .

    ASSIGN          reduce using rule 161 (closed_dyadic_operator -> string_concatenation_operator .)


state 56

    (75) dereferenced_reference -> array_location ARROW .

    ARROW           reduce using rule 75 (dereferenced_reference -> array_location ARROW .)
    LBRACKET        reduce using rule 75 (dereferenced_reference -> array_location ARROW .)
    ASSIGN          reduce using rule 75 (dereferenced_reference -> array_location ARROW .)
    PLUS            reduce using rule 75 (dereferenced_reference -> array_location ARROW .)
    MINUS           reduce using rule 75 (dereferenced_reference -> array_location ARROW .)
    TIMES           reduce using rule 75 (dereferenced_reference -> array_location ARROW .)
    DIVIDE          reduce using rule 75 (dereferenced_reference -> array_location ARROW .)
    MODULO          reduce using rule 75 (dereferenced_reference -> array_location ARROW .)
    CONCAT          reduce using rule 75 (dereferenced_reference -> array_location ARROW .)
    IN              reduce using rule 75 (dereferenced_reference -> array_location ARROW .)
    AND             reduce using rule 75 (dereferenced_reference -> array_location ARROW .)
    OR              reduce using rule 75 (dereferenced_reference -> array_location ARROW .)
    EQUAL           reduce using rule 75 (dereferenced_reference -> array_location ARROW .)
    NOTEQ           reduce using rule 75 (dereferenced_reference -> array_location ARROW .)
    GREATER         reduce using rule 75 (dereferenced_reference -> array_location ARROW .)
    GTEQUAL         reduce using rule 75 (dereferenced_reference -> array_location ARROW .)
    LESS            reduce using rule 75 (dereferenced_reference -> array_location ARROW .)
    LTEQUAL         reduce using rule 75 (dereferenced_reference -> array_location ARROW .)
    COMMA           reduce using rule 75 (dereferenced_reference -> array_location ARROW .)
    SEMI            reduce using rule 75 (dereferenced_reference -> array_location ARROW .)
    COLON           reduce using rule 75 (dereferenced_reference -> array_location ARROW .)
    RBRACKET        reduce using rule 75 (dereferenced_reference -> array_location ARROW .)
    THEN            reduce using rule 75 (dereferenced_reference -> array_location ARROW .)
    RPAREN          reduce using rule 75 (dereferenced_reference -> array_location ARROW .)
    ELSE            reduce using rule 75 (dereferenced_reference -> array_location ARROW .)
    ELSIF           reduce using rule 75 (dereferenced_reference -> array_location ARROW .)
    DOWN            reduce using rule 75 (dereferenced_reference -> array_location ARROW .)
    BY              reduce using rule 75 (dereferenced_reference -> array_location ARROW .)
    TO              reduce using rule 75 (dereferenced_reference -> array_location ARROW .)
    FI              reduce using rule 75 (dereferenced_reference -> array_location ARROW .)
    WHILE           reduce using rule 75 (dereferenced_reference -> array_location ARROW .)


state 57

    (124) arithmetic_additive_operator -> PLUS .

    MINUS           reduce using rule 124 (arithmetic_additive_operator -> PLUS .)
    NOT             reduce using rule 124 (arithmetic_additive_operator -> PLUS .)
    ARROW           reduce using rule 124 (arithmetic_additive_operator -> PLUS .)
    LPAREN          reduce using rule 124 (arithmetic_additive_operator -> PLUS .)
    ID              reduce using rule 124 (arithmetic_additive_operator -> PLUS .)
    ICONST          reduce using rule 124 (arithmetic_additive_operator -> PLUS .)
    TRUE            reduce using rule 124 (arithmetic_additive_operator -> PLUS .)
    FALSE           reduce using rule 124 (arithmetic_additive_operator -> PLUS .)
    CCONST          reduce using rule 124 (arithmetic_additive_operator -> PLUS .)
    HAT             reduce using rule 124 (arithmetic_additive_operator -> PLUS .)
    NULL            reduce using rule 124 (arithmetic_additive_operator -> PLUS .)
    SCONST          reduce using rule 124 (arithmetic_additive_operator -> PLUS .)
    ABS             reduce using rule 124 (arithmetic_additive_operator -> PLUS .)
    ASC             reduce using rule 124 (arithmetic_additive_operator -> PLUS .)
    NUM             reduce using rule 124 (arithmetic_additive_operator -> PLUS .)
    UPPER           reduce using rule 124 (arithmetic_additive_operator -> PLUS .)
    LOWER           reduce using rule 124 (arithmetic_additive_operator -> PLUS .)
    LENGTH          reduce using rule 124 (arithmetic_additive_operator -> PLUS .)
    READ            reduce using rule 124 (arithmetic_additive_operator -> PLUS .)
    PRINT           reduce using rule 124 (arithmetic_additive_operator -> PLUS .)
    ASSIGN          reduce using rule 124 (arithmetic_additive_operator -> PLUS .)


state 58

    (106) arithmetic_multiplicative_operator -> TIMES .

    MINUS           reduce using rule 106 (arithmetic_multiplicative_operator -> TIMES .)
    NOT             reduce using rule 106 (arithmetic_multiplicative_operator -> TIMES .)
    ARROW           reduce using rule 106 (arithmetic_multiplicative_operator -> TIMES .)
    LPAREN          reduce using rule 106 (arithmetic_multiplicative_operator -> TIMES .)
    ID              reduce using rule 106 (arithmetic_multiplicative_operator -> TIMES .)
    ICONST          reduce using rule 106 (arithmetic_multiplicative_operator -> TIMES .)
    TRUE            reduce using rule 106 (arithmetic_multiplicative_operator -> TIMES .)
    FALSE           reduce using rule 106 (arithmetic_multiplicative_operator -> TIMES .)
    CCONST          reduce using rule 106 (arithmetic_multiplicative_operator -> TIMES .)
    HAT             reduce using rule 106 (arithmetic_multiplicative_operator -> TIMES .)
    NULL            reduce using rule 106 (arithmetic_multiplicative_operator -> TIMES .)
    SCONST          reduce using rule 106 (arithmetic_multiplicative_operator -> TIMES .)
    ABS             reduce using rule 106 (arithmetic_multiplicative_operator -> TIMES .)
    ASC             reduce using rule 106 (arithmetic_multiplicative_operator -> TIMES .)
    NUM             reduce using rule 106 (arithmetic_multiplicative_operator -> TIMES .)
    UPPER           reduce using rule 106 (arithmetic_multiplicative_operator -> TIMES .)
    LOWER           reduce using rule 106 (arithmetic_multiplicative_operator -> TIMES .)
    LENGTH          reduce using rule 106 (arithmetic_multiplicative_operator -> TIMES .)
    READ            reduce using rule 106 (arithmetic_multiplicative_operator -> TIMES .)
    PRINT           reduce using rule 106 (arithmetic_multiplicative_operator -> TIMES .)
    ASSIGN          reduce using rule 106 (arithmetic_multiplicative_operator -> TIMES .)


state 59

    (156) assignment_action -> array_location assigning_operator . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (89) conditional_expression -> . IF expression then_expression else_expression FI
    (90) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (97) operand1 -> . operand2
    (98) operand1 -> . operand1 operator2 operand2
    (99) operand2 -> . operand3
    (100) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (101) operand3 -> . monadic_operator operand4
    (102) operand3 -> . operand4
    (109) monadic_operator -> . MINUS
    (110) monadic_operator -> . NOT
    (103) operand4 -> . array_location
    (104) operand4 -> . referenced_location
    (105) operand4 -> . primitive_value
    (85) array_location -> . location
    (111) referenced_location -> . ARROW array_location
    (128) primitive_value -> . literal
    (129) primitive_value -> . value_array_element
    (130) primitive_value -> . value_array_slice
    (131) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (132) literal -> . integer_literal
    (133) literal -> . boolean_literal
    (134) literal -> . character_literal
    (135) literal -> . empty_literal
    (136) literal -> . character_string_literal
    (137) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (138) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (88) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (139) integer_literal -> . ICONST
    (140) boolean_literal -> . TRUE
    (141) boolean_literal -> . FALSE
    (142) character_literal -> . CCONST
    (143) character_literal -> . HAT LPAREN ICONST RPAREN
    (144) empty_literal -> . NULL
    (145) character_string_literal -> . SCONST
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT

    IF              shift and go to state 104
    MINUS           shift and go to state 75
    NOT             shift and go to state 100
    ARROW           shift and go to state 71
    LPAREN          shift and go to state 85
    ID              shift and go to state 70
    ICONST          shift and go to state 80
    TRUE            shift and go to state 96
    FALSE           shift and go to state 78
    CCONST          shift and go to state 86
    HAT             shift and go to state 74
    NULL            shift and go to state 97
    SCONST          shift and go to state 94
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    literal                        shift and go to state 68
    operand2                       shift and go to state 98
    array_location                 shift and go to state 72
    dereferenced_reference         shift and go to state 8
    parenthesized_expression       shift and go to state 76
    character_literal              shift and go to state 77
    value_array_slice              shift and go to state 79
    builtin_call                   shift and go to state 14
    array_element                  shift and go to state 5
    operand0                       shift and go to state 81
    operand1                       shift and go to state 83
    value_array_element            shift and go to state 95
    primitive_value                shift and go to state 82
    empty_literal                  shift and go to state 88
    call_action                    shift and go to state 89
    string_slice                   shift and go to state 24
    referenced_location            shift and go to state 90
    operand4                       shift and go to state 84
    expression                     shift and go to state 158
    conditional_expression         shift and go to state 92
    integer_literal                shift and go to state 93
    monadic_operator               shift and go to state 69
    location                       shift and go to state 34
    operand3                       shift and go to state 99
    builtin_name                   shift and go to state 36
    array_slice                    shift and go to state 38
    character_string_literal       shift and go to state 101
    identifier                     shift and go to state 102
    procedure_call                 shift and go to state 42
    boolean_literal                shift and go to state 103
    string_element                 shift and go to state 44

state 60

    (107) arithmetic_multiplicative_operator -> DIVIDE .

    MINUS           reduce using rule 107 (arithmetic_multiplicative_operator -> DIVIDE .)
    NOT             reduce using rule 107 (arithmetic_multiplicative_operator -> DIVIDE .)
    ARROW           reduce using rule 107 (arithmetic_multiplicative_operator -> DIVIDE .)
    LPAREN          reduce using rule 107 (arithmetic_multiplicative_operator -> DIVIDE .)
    ID              reduce using rule 107 (arithmetic_multiplicative_operator -> DIVIDE .)
    ICONST          reduce using rule 107 (arithmetic_multiplicative_operator -> DIVIDE .)
    TRUE            reduce using rule 107 (arithmetic_multiplicative_operator -> DIVIDE .)
    FALSE           reduce using rule 107 (arithmetic_multiplicative_operator -> DIVIDE .)
    CCONST          reduce using rule 107 (arithmetic_multiplicative_operator -> DIVIDE .)
    HAT             reduce using rule 107 (arithmetic_multiplicative_operator -> DIVIDE .)
    NULL            reduce using rule 107 (arithmetic_multiplicative_operator -> DIVIDE .)
    SCONST          reduce using rule 107 (arithmetic_multiplicative_operator -> DIVIDE .)
    ABS             reduce using rule 107 (arithmetic_multiplicative_operator -> DIVIDE .)
    ASC             reduce using rule 107 (arithmetic_multiplicative_operator -> DIVIDE .)
    NUM             reduce using rule 107 (arithmetic_multiplicative_operator -> DIVIDE .)
    UPPER           reduce using rule 107 (arithmetic_multiplicative_operator -> DIVIDE .)
    LOWER           reduce using rule 107 (arithmetic_multiplicative_operator -> DIVIDE .)
    LENGTH          reduce using rule 107 (arithmetic_multiplicative_operator -> DIVIDE .)
    READ            reduce using rule 107 (arithmetic_multiplicative_operator -> DIVIDE .)
    PRINT           reduce using rule 107 (arithmetic_multiplicative_operator -> DIVIDE .)
    ASSIGN          reduce using rule 107 (arithmetic_multiplicative_operator -> DIVIDE .)


state 61

    (125) arithmetic_additive_operator -> MINUS .

    MINUS           reduce using rule 125 (arithmetic_additive_operator -> MINUS .)
    NOT             reduce using rule 125 (arithmetic_additive_operator -> MINUS .)
    ARROW           reduce using rule 125 (arithmetic_additive_operator -> MINUS .)
    LPAREN          reduce using rule 125 (arithmetic_additive_operator -> MINUS .)
    ID              reduce using rule 125 (arithmetic_additive_operator -> MINUS .)
    ICONST          reduce using rule 125 (arithmetic_additive_operator -> MINUS .)
    TRUE            reduce using rule 125 (arithmetic_additive_operator -> MINUS .)
    FALSE           reduce using rule 125 (arithmetic_additive_operator -> MINUS .)
    CCONST          reduce using rule 125 (arithmetic_additive_operator -> MINUS .)
    HAT             reduce using rule 125 (arithmetic_additive_operator -> MINUS .)
    NULL            reduce using rule 125 (arithmetic_additive_operator -> MINUS .)
    SCONST          reduce using rule 125 (arithmetic_additive_operator -> MINUS .)
    ABS             reduce using rule 125 (arithmetic_additive_operator -> MINUS .)
    ASC             reduce using rule 125 (arithmetic_additive_operator -> MINUS .)
    NUM             reduce using rule 125 (arithmetic_additive_operator -> MINUS .)
    UPPER           reduce using rule 125 (arithmetic_additive_operator -> MINUS .)
    LOWER           reduce using rule 125 (arithmetic_additive_operator -> MINUS .)
    LENGTH          reduce using rule 125 (arithmetic_additive_operator -> MINUS .)
    READ            reduce using rule 125 (arithmetic_additive_operator -> MINUS .)
    PRINT           reduce using rule 125 (arithmetic_additive_operator -> MINUS .)
    ASSIGN          reduce using rule 125 (arithmetic_additive_operator -> MINUS .)


state 62

    (159) closed_dyadic_operator -> arithmetic_additive_operator .

    ASSIGN          reduce using rule 159 (closed_dyadic_operator -> arithmetic_additive_operator .)


state 63

    (160) closed_dyadic_operator -> arithmetic_multiplicative_operator .

    ASSIGN          reduce using rule 160 (closed_dyadic_operator -> arithmetic_multiplicative_operator .)


state 64

    (108) arithmetic_multiplicative_operator -> MODULO .

    MINUS           reduce using rule 108 (arithmetic_multiplicative_operator -> MODULO .)
    NOT             reduce using rule 108 (arithmetic_multiplicative_operator -> MODULO .)
    ARROW           reduce using rule 108 (arithmetic_multiplicative_operator -> MODULO .)
    LPAREN          reduce using rule 108 (arithmetic_multiplicative_operator -> MODULO .)
    ID              reduce using rule 108 (arithmetic_multiplicative_operator -> MODULO .)
    ICONST          reduce using rule 108 (arithmetic_multiplicative_operator -> MODULO .)
    TRUE            reduce using rule 108 (arithmetic_multiplicative_operator -> MODULO .)
    FALSE           reduce using rule 108 (arithmetic_multiplicative_operator -> MODULO .)
    CCONST          reduce using rule 108 (arithmetic_multiplicative_operator -> MODULO .)
    HAT             reduce using rule 108 (arithmetic_multiplicative_operator -> MODULO .)
    NULL            reduce using rule 108 (arithmetic_multiplicative_operator -> MODULO .)
    SCONST          reduce using rule 108 (arithmetic_multiplicative_operator -> MODULO .)
    ABS             reduce using rule 108 (arithmetic_multiplicative_operator -> MODULO .)
    ASC             reduce using rule 108 (arithmetic_multiplicative_operator -> MODULO .)
    NUM             reduce using rule 108 (arithmetic_multiplicative_operator -> MODULO .)
    UPPER           reduce using rule 108 (arithmetic_multiplicative_operator -> MODULO .)
    LOWER           reduce using rule 108 (arithmetic_multiplicative_operator -> MODULO .)
    LENGTH          reduce using rule 108 (arithmetic_multiplicative_operator -> MODULO .)
    READ            reduce using rule 108 (arithmetic_multiplicative_operator -> MODULO .)
    PRINT           reduce using rule 108 (arithmetic_multiplicative_operator -> MODULO .)
    ASSIGN          reduce using rule 108 (arithmetic_multiplicative_operator -> MODULO .)


state 65

    (158) assigning_operator -> ASSIGN .

    IF              reduce using rule 158 (assigning_operator -> ASSIGN .)
    MINUS           reduce using rule 158 (assigning_operator -> ASSIGN .)
    NOT             reduce using rule 158 (assigning_operator -> ASSIGN .)
    ARROW           reduce using rule 158 (assigning_operator -> ASSIGN .)
    LPAREN          reduce using rule 158 (assigning_operator -> ASSIGN .)
    ID              reduce using rule 158 (assigning_operator -> ASSIGN .)
    ICONST          reduce using rule 158 (assigning_operator -> ASSIGN .)
    TRUE            reduce using rule 158 (assigning_operator -> ASSIGN .)
    FALSE           reduce using rule 158 (assigning_operator -> ASSIGN .)
    CCONST          reduce using rule 158 (assigning_operator -> ASSIGN .)
    HAT             reduce using rule 158 (assigning_operator -> ASSIGN .)
    NULL            reduce using rule 158 (assigning_operator -> ASSIGN .)
    SCONST          reduce using rule 158 (assigning_operator -> ASSIGN .)
    ABS             reduce using rule 158 (assigning_operator -> ASSIGN .)
    ASC             reduce using rule 158 (assigning_operator -> ASSIGN .)
    NUM             reduce using rule 158 (assigning_operator -> ASSIGN .)
    UPPER           reduce using rule 158 (assigning_operator -> ASSIGN .)
    LOWER           reduce using rule 158 (assigning_operator -> ASSIGN .)
    LENGTH          reduce using rule 158 (assigning_operator -> ASSIGN .)
    READ            reduce using rule 158 (assigning_operator -> ASSIGN .)
    PRINT           reduce using rule 158 (assigning_operator -> ASSIGN .)


state 66

    (157) assigning_operator -> closed_dyadic_operator . ASSIGN

    ASSIGN          shift and go to state 159


state 67

    (126) string_concatenation_operator -> CONCAT .

    ASSIGN          reduce using rule 126 (string_concatenation_operator -> CONCAT .)
    MINUS           reduce using rule 126 (string_concatenation_operator -> CONCAT .)
    NOT             reduce using rule 126 (string_concatenation_operator -> CONCAT .)
    ARROW           reduce using rule 126 (string_concatenation_operator -> CONCAT .)
    LPAREN          reduce using rule 126 (string_concatenation_operator -> CONCAT .)
    ID              reduce using rule 126 (string_concatenation_operator -> CONCAT .)
    ICONST          reduce using rule 126 (string_concatenation_operator -> CONCAT .)
    TRUE            reduce using rule 126 (string_concatenation_operator -> CONCAT .)
    FALSE           reduce using rule 126 (string_concatenation_operator -> CONCAT .)
    CCONST          reduce using rule 126 (string_concatenation_operator -> CONCAT .)
    HAT             reduce using rule 126 (string_concatenation_operator -> CONCAT .)
    NULL            reduce using rule 126 (string_concatenation_operator -> CONCAT .)
    SCONST          reduce using rule 126 (string_concatenation_operator -> CONCAT .)
    ABS             reduce using rule 126 (string_concatenation_operator -> CONCAT .)
    ASC             reduce using rule 126 (string_concatenation_operator -> CONCAT .)
    NUM             reduce using rule 126 (string_concatenation_operator -> CONCAT .)
    UPPER           reduce using rule 126 (string_concatenation_operator -> CONCAT .)
    LOWER           reduce using rule 126 (string_concatenation_operator -> CONCAT .)
    LENGTH          reduce using rule 126 (string_concatenation_operator -> CONCAT .)
    READ            reduce using rule 126 (string_concatenation_operator -> CONCAT .)
    PRINT           reduce using rule 126 (string_concatenation_operator -> CONCAT .)


state 68

    (128) primitive_value -> literal .

    LBRACKET        reduce using rule 128 (primitive_value -> literal .)
    TIMES           reduce using rule 128 (primitive_value -> literal .)
    DIVIDE          reduce using rule 128 (primitive_value -> literal .)
    MODULO          reduce using rule 128 (primitive_value -> literal .)
    PLUS            reduce using rule 128 (primitive_value -> literal .)
    MINUS           reduce using rule 128 (primitive_value -> literal .)
    CONCAT          reduce using rule 128 (primitive_value -> literal .)
    IN              reduce using rule 128 (primitive_value -> literal .)
    AND             reduce using rule 128 (primitive_value -> literal .)
    OR              reduce using rule 128 (primitive_value -> literal .)
    EQUAL           reduce using rule 128 (primitive_value -> literal .)
    NOTEQ           reduce using rule 128 (primitive_value -> literal .)
    GREATER         reduce using rule 128 (primitive_value -> literal .)
    GTEQUAL         reduce using rule 128 (primitive_value -> literal .)
    LESS            reduce using rule 128 (primitive_value -> literal .)
    LTEQUAL         reduce using rule 128 (primitive_value -> literal .)
    THEN            reduce using rule 128 (primitive_value -> literal .)
    RPAREN          reduce using rule 128 (primitive_value -> literal .)
    COMMA           reduce using rule 128 (primitive_value -> literal .)
    RBRACKET        reduce using rule 128 (primitive_value -> literal .)
    SEMI            reduce using rule 128 (primitive_value -> literal .)
    COLON           reduce using rule 128 (primitive_value -> literal .)
    ELSE            reduce using rule 128 (primitive_value -> literal .)
    ELSIF           reduce using rule 128 (primitive_value -> literal .)
    DOWN            reduce using rule 128 (primitive_value -> literal .)
    BY              reduce using rule 128 (primitive_value -> literal .)
    TO              reduce using rule 128 (primitive_value -> literal .)
    FI              reduce using rule 128 (primitive_value -> literal .)
    WHILE           reduce using rule 128 (primitive_value -> literal .)


state 69

    (101) operand3 -> monadic_operator . operand4
    (103) operand4 -> . array_location
    (104) operand4 -> . referenced_location
    (105) operand4 -> . primitive_value
    (85) array_location -> . location
    (111) referenced_location -> . ARROW array_location
    (128) primitive_value -> . literal
    (129) primitive_value -> . value_array_element
    (130) primitive_value -> . value_array_slice
    (131) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (132) literal -> . integer_literal
    (133) literal -> . boolean_literal
    (134) literal -> . character_literal
    (135) literal -> . empty_literal
    (136) literal -> . character_string_literal
    (137) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (138) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (88) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (139) integer_literal -> . ICONST
    (140) boolean_literal -> . TRUE
    (141) boolean_literal -> . FALSE
    (142) character_literal -> . CCONST
    (143) character_literal -> . HAT LPAREN ICONST RPAREN
    (144) empty_literal -> . NULL
    (145) character_string_literal -> . SCONST
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT

    ARROW           shift and go to state 71
    LPAREN          shift and go to state 85
    ID              shift and go to state 70
    ICONST          shift and go to state 80
    TRUE            shift and go to state 96
    FALSE           shift and go to state 78
    CCONST          shift and go to state 86
    HAT             shift and go to state 74
    NULL            shift and go to state 97
    SCONST          shift and go to state 94
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    literal                        shift and go to state 68
    primitive_value                shift and go to state 82
    empty_literal                  shift and go to state 88
    call_action                    shift and go to state 89
    array_location                 shift and go to state 72
    value_array_slice              shift and go to state 79
    dereferenced_reference         shift and go to state 8
    location                       shift and go to state 34
    integer_literal                shift and go to state 93
    value_array_element            shift and go to state 95
    parenthesized_expression       shift and go to state 76
    character_literal              shift and go to state 77
    referenced_location            shift and go to state 90
    builtin_call                   shift and go to state 14
    array_element                  shift and go to state 5
    builtin_name                   shift and go to state 36
    array_slice                    shift and go to state 38
    character_string_literal       shift and go to state 101
    operand4                       shift and go to state 160
    string_slice                   shift and go to state 24
    procedure_call                 shift and go to state 42
    boolean_literal                shift and go to state 103
    string_element                 shift and go to state 44
    identifier                     shift and go to state 102

state 70

    (23) identifier -> ID .
    (183) procedure_call -> ID . LPAREN parameter_list RPAREN
    (184) procedure_call -> ID . LPAREN RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    LBRACKET        reduce using rule 23 (identifier -> ID .)
    ARROW           reduce using rule 23 (identifier -> ID .)
    TIMES           reduce using rule 23 (identifier -> ID .)
    DIVIDE          reduce using rule 23 (identifier -> ID .)
    MODULO          reduce using rule 23 (identifier -> ID .)
    PLUS            reduce using rule 23 (identifier -> ID .)
    MINUS           reduce using rule 23 (identifier -> ID .)
    CONCAT          reduce using rule 23 (identifier -> ID .)
    IN              reduce using rule 23 (identifier -> ID .)
    AND             reduce using rule 23 (identifier -> ID .)
    OR              reduce using rule 23 (identifier -> ID .)
    EQUAL           reduce using rule 23 (identifier -> ID .)
    NOTEQ           reduce using rule 23 (identifier -> ID .)
    GREATER         reduce using rule 23 (identifier -> ID .)
    GTEQUAL         reduce using rule 23 (identifier -> ID .)
    LESS            reduce using rule 23 (identifier -> ID .)
    LTEQUAL         reduce using rule 23 (identifier -> ID .)
    COLON           reduce using rule 23 (identifier -> ID .)
    COMMA           reduce using rule 23 (identifier -> ID .)
    RPAREN          reduce using rule 23 (identifier -> ID .)
    FI              reduce using rule 23 (identifier -> ID .)
    THEN            reduce using rule 23 (identifier -> ID .)
    ASSIGN          reduce using rule 23 (identifier -> ID .)
    SEMI            reduce using rule 23 (identifier -> ID .)
    RBRACKET        reduce using rule 23 (identifier -> ID .)
    ELSE            reduce using rule 23 (identifier -> ID .)
    ELSIF           reduce using rule 23 (identifier -> ID .)
    DOWN            reduce using rule 23 (identifier -> ID .)
    BY              reduce using rule 23 (identifier -> ID .)
    TO              reduce using rule 23 (identifier -> ID .)
    WHILE           reduce using rule 23 (identifier -> ID .)
    LPAREN          shift and go to state 48

  ! LPAREN          [ reduce using rule 23 (identifier -> ID .) ]


state 71

    (111) referenced_location -> ARROW . array_location
    (85) array_location -> . location
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (23) identifier -> . ID
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT

    ID              shift and go to state 70
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    array_location                 shift and go to state 161
    array_slice                    shift and go to state 38
    call_action                    shift and go to state 89
    builtin_call                   shift and go to state 14
    string_slice                   shift and go to state 24
    array_element                  shift and go to state 5
    dereferenced_reference         shift and go to state 8
    location                       shift and go to state 34
    identifier                     shift and go to state 102
    procedure_call                 shift and go to state 42
    builtin_name                   shift and go to state 36
    string_element                 shift and go to state 44

state 72

    (103) operand4 -> array_location .
    (75) dereferenced_reference -> array_location . ARROW
    (81) array_element -> array_location . LBRACKET expression_list RBRACKET
    (84) array_slice -> array_location . LBRACKET lower_bound COLON upper_bound RBRACKET

    TIMES           reduce using rule 103 (operand4 -> array_location .)
    DIVIDE          reduce using rule 103 (operand4 -> array_location .)
    MODULO          reduce using rule 103 (operand4 -> array_location .)
    PLUS            reduce using rule 103 (operand4 -> array_location .)
    MINUS           reduce using rule 103 (operand4 -> array_location .)
    CONCAT          reduce using rule 103 (operand4 -> array_location .)
    IN              reduce using rule 103 (operand4 -> array_location .)
    AND             reduce using rule 103 (operand4 -> array_location .)
    OR              reduce using rule 103 (operand4 -> array_location .)
    EQUAL           reduce using rule 103 (operand4 -> array_location .)
    NOTEQ           reduce using rule 103 (operand4 -> array_location .)
    GREATER         reduce using rule 103 (operand4 -> array_location .)
    GTEQUAL         reduce using rule 103 (operand4 -> array_location .)
    LESS            reduce using rule 103 (operand4 -> array_location .)
    LTEQUAL         reduce using rule 103 (operand4 -> array_location .)
    RPAREN          reduce using rule 103 (operand4 -> array_location .)
    COMMA           reduce using rule 103 (operand4 -> array_location .)
    RBRACKET        reduce using rule 103 (operand4 -> array_location .)
    DOWN            reduce using rule 103 (operand4 -> array_location .)
    TO              reduce using rule 103 (operand4 -> array_location .)
    ELSE            reduce using rule 103 (operand4 -> array_location .)
    ELSIF           reduce using rule 103 (operand4 -> array_location .)
    SEMI            reduce using rule 103 (operand4 -> array_location .)
    THEN            reduce using rule 103 (operand4 -> array_location .)
    COLON           reduce using rule 103 (operand4 -> array_location .)
    BY              reduce using rule 103 (operand4 -> array_location .)
    FI              reduce using rule 103 (operand4 -> array_location .)
    WHILE           reduce using rule 103 (operand4 -> array_location .)
    ARROW           shift and go to state 56
    LBRACKET        shift and go to state 54


state 73

    (190) result -> empty .

    SEMI            reduce using rule 190 (result -> empty .)


state 74

    (143) character_literal -> HAT . LPAREN ICONST RPAREN

    LPAREN          shift and go to state 162


state 75

    (109) monadic_operator -> MINUS .

    ARROW           reduce using rule 109 (monadic_operator -> MINUS .)
    LPAREN          reduce using rule 109 (monadic_operator -> MINUS .)
    ID              reduce using rule 109 (monadic_operator -> MINUS .)
    ICONST          reduce using rule 109 (monadic_operator -> MINUS .)
    TRUE            reduce using rule 109 (monadic_operator -> MINUS .)
    FALSE           reduce using rule 109 (monadic_operator -> MINUS .)
    CCONST          reduce using rule 109 (monadic_operator -> MINUS .)
    HAT             reduce using rule 109 (monadic_operator -> MINUS .)
    NULL            reduce using rule 109 (monadic_operator -> MINUS .)
    SCONST          reduce using rule 109 (monadic_operator -> MINUS .)
    ABS             reduce using rule 109 (monadic_operator -> MINUS .)
    ASC             reduce using rule 109 (monadic_operator -> MINUS .)
    NUM             reduce using rule 109 (monadic_operator -> MINUS .)
    UPPER           reduce using rule 109 (monadic_operator -> MINUS .)
    LOWER           reduce using rule 109 (monadic_operator -> MINUS .)
    LENGTH          reduce using rule 109 (monadic_operator -> MINUS .)
    READ            reduce using rule 109 (monadic_operator -> MINUS .)
    PRINT           reduce using rule 109 (monadic_operator -> MINUS .)


state 76

    (131) primitive_value -> parenthesized_expression .

    LBRACKET        reduce using rule 131 (primitive_value -> parenthesized_expression .)
    TIMES           reduce using rule 131 (primitive_value -> parenthesized_expression .)
    DIVIDE          reduce using rule 131 (primitive_value -> parenthesized_expression .)
    MODULO          reduce using rule 131 (primitive_value -> parenthesized_expression .)
    PLUS            reduce using rule 131 (primitive_value -> parenthesized_expression .)
    MINUS           reduce using rule 131 (primitive_value -> parenthesized_expression .)
    CONCAT          reduce using rule 131 (primitive_value -> parenthesized_expression .)
    IN              reduce using rule 131 (primitive_value -> parenthesized_expression .)
    AND             reduce using rule 131 (primitive_value -> parenthesized_expression .)
    OR              reduce using rule 131 (primitive_value -> parenthesized_expression .)
    EQUAL           reduce using rule 131 (primitive_value -> parenthesized_expression .)
    NOTEQ           reduce using rule 131 (primitive_value -> parenthesized_expression .)
    GREATER         reduce using rule 131 (primitive_value -> parenthesized_expression .)
    GTEQUAL         reduce using rule 131 (primitive_value -> parenthesized_expression .)
    LESS            reduce using rule 131 (primitive_value -> parenthesized_expression .)
    LTEQUAL         reduce using rule 131 (primitive_value -> parenthesized_expression .)
    THEN            reduce using rule 131 (primitive_value -> parenthesized_expression .)
    RPAREN          reduce using rule 131 (primitive_value -> parenthesized_expression .)
    COMMA           reduce using rule 131 (primitive_value -> parenthesized_expression .)
    RBRACKET        reduce using rule 131 (primitive_value -> parenthesized_expression .)
    SEMI            reduce using rule 131 (primitive_value -> parenthesized_expression .)
    COLON           reduce using rule 131 (primitive_value -> parenthesized_expression .)
    ELSE            reduce using rule 131 (primitive_value -> parenthesized_expression .)
    ELSIF           reduce using rule 131 (primitive_value -> parenthesized_expression .)
    DOWN            reduce using rule 131 (primitive_value -> parenthesized_expression .)
    BY              reduce using rule 131 (primitive_value -> parenthesized_expression .)
    TO              reduce using rule 131 (primitive_value -> parenthesized_expression .)
    FI              reduce using rule 131 (primitive_value -> parenthesized_expression .)
    WHILE           reduce using rule 131 (primitive_value -> parenthesized_expression .)


state 77

    (134) literal -> character_literal .

    LBRACKET        reduce using rule 134 (literal -> character_literal .)
    TIMES           reduce using rule 134 (literal -> character_literal .)
    DIVIDE          reduce using rule 134 (literal -> character_literal .)
    MODULO          reduce using rule 134 (literal -> character_literal .)
    PLUS            reduce using rule 134 (literal -> character_literal .)
    MINUS           reduce using rule 134 (literal -> character_literal .)
    CONCAT          reduce using rule 134 (literal -> character_literal .)
    IN              reduce using rule 134 (literal -> character_literal .)
    AND             reduce using rule 134 (literal -> character_literal .)
    OR              reduce using rule 134 (literal -> character_literal .)
    EQUAL           reduce using rule 134 (literal -> character_literal .)
    NOTEQ           reduce using rule 134 (literal -> character_literal .)
    GREATER         reduce using rule 134 (literal -> character_literal .)
    GTEQUAL         reduce using rule 134 (literal -> character_literal .)
    LESS            reduce using rule 134 (literal -> character_literal .)
    LTEQUAL         reduce using rule 134 (literal -> character_literal .)
    SEMI            reduce using rule 134 (literal -> character_literal .)
    THEN            reduce using rule 134 (literal -> character_literal .)
    COMMA           reduce using rule 134 (literal -> character_literal .)
    RPAREN          reduce using rule 134 (literal -> character_literal .)
    RBRACKET        reduce using rule 134 (literal -> character_literal .)
    COLON           reduce using rule 134 (literal -> character_literal .)
    ELSE            reduce using rule 134 (literal -> character_literal .)
    ELSIF           reduce using rule 134 (literal -> character_literal .)
    DOWN            reduce using rule 134 (literal -> character_literal .)
    BY              reduce using rule 134 (literal -> character_literal .)
    TO              reduce using rule 134 (literal -> character_literal .)
    FI              reduce using rule 134 (literal -> character_literal .)
    WHILE           reduce using rule 134 (literal -> character_literal .)


state 78

    (141) boolean_literal -> FALSE .

    LBRACKET        reduce using rule 141 (boolean_literal -> FALSE .)
    TIMES           reduce using rule 141 (boolean_literal -> FALSE .)
    DIVIDE          reduce using rule 141 (boolean_literal -> FALSE .)
    MODULO          reduce using rule 141 (boolean_literal -> FALSE .)
    PLUS            reduce using rule 141 (boolean_literal -> FALSE .)
    MINUS           reduce using rule 141 (boolean_literal -> FALSE .)
    CONCAT          reduce using rule 141 (boolean_literal -> FALSE .)
    IN              reduce using rule 141 (boolean_literal -> FALSE .)
    AND             reduce using rule 141 (boolean_literal -> FALSE .)
    OR              reduce using rule 141 (boolean_literal -> FALSE .)
    EQUAL           reduce using rule 141 (boolean_literal -> FALSE .)
    NOTEQ           reduce using rule 141 (boolean_literal -> FALSE .)
    GREATER         reduce using rule 141 (boolean_literal -> FALSE .)
    GTEQUAL         reduce using rule 141 (boolean_literal -> FALSE .)
    LESS            reduce using rule 141 (boolean_literal -> FALSE .)
    LTEQUAL         reduce using rule 141 (boolean_literal -> FALSE .)
    THEN            reduce using rule 141 (boolean_literal -> FALSE .)
    RBRACKET        reduce using rule 141 (boolean_literal -> FALSE .)
    SEMI            reduce using rule 141 (boolean_literal -> FALSE .)
    COMMA           reduce using rule 141 (boolean_literal -> FALSE .)
    RPAREN          reduce using rule 141 (boolean_literal -> FALSE .)
    COLON           reduce using rule 141 (boolean_literal -> FALSE .)
    ELSE            reduce using rule 141 (boolean_literal -> FALSE .)
    ELSIF           reduce using rule 141 (boolean_literal -> FALSE .)
    DOWN            reduce using rule 141 (boolean_literal -> FALSE .)
    BY              reduce using rule 141 (boolean_literal -> FALSE .)
    TO              reduce using rule 141 (boolean_literal -> FALSE .)
    FI              reduce using rule 141 (boolean_literal -> FALSE .)
    WHILE           reduce using rule 141 (boolean_literal -> FALSE .)


state 79

    (130) primitive_value -> value_array_slice .

    LBRACKET        reduce using rule 130 (primitive_value -> value_array_slice .)
    TIMES           reduce using rule 130 (primitive_value -> value_array_slice .)
    DIVIDE          reduce using rule 130 (primitive_value -> value_array_slice .)
    MODULO          reduce using rule 130 (primitive_value -> value_array_slice .)
    PLUS            reduce using rule 130 (primitive_value -> value_array_slice .)
    MINUS           reduce using rule 130 (primitive_value -> value_array_slice .)
    CONCAT          reduce using rule 130 (primitive_value -> value_array_slice .)
    IN              reduce using rule 130 (primitive_value -> value_array_slice .)
    AND             reduce using rule 130 (primitive_value -> value_array_slice .)
    OR              reduce using rule 130 (primitive_value -> value_array_slice .)
    EQUAL           reduce using rule 130 (primitive_value -> value_array_slice .)
    NOTEQ           reduce using rule 130 (primitive_value -> value_array_slice .)
    GREATER         reduce using rule 130 (primitive_value -> value_array_slice .)
    GTEQUAL         reduce using rule 130 (primitive_value -> value_array_slice .)
    LESS            reduce using rule 130 (primitive_value -> value_array_slice .)
    LTEQUAL         reduce using rule 130 (primitive_value -> value_array_slice .)
    THEN            reduce using rule 130 (primitive_value -> value_array_slice .)
    RPAREN          reduce using rule 130 (primitive_value -> value_array_slice .)
    COMMA           reduce using rule 130 (primitive_value -> value_array_slice .)
    RBRACKET        reduce using rule 130 (primitive_value -> value_array_slice .)
    SEMI            reduce using rule 130 (primitive_value -> value_array_slice .)
    COLON           reduce using rule 130 (primitive_value -> value_array_slice .)
    ELSE            reduce using rule 130 (primitive_value -> value_array_slice .)
    ELSIF           reduce using rule 130 (primitive_value -> value_array_slice .)
    DOWN            reduce using rule 130 (primitive_value -> value_array_slice .)
    BY              reduce using rule 130 (primitive_value -> value_array_slice .)
    TO              reduce using rule 130 (primitive_value -> value_array_slice .)
    FI              reduce using rule 130 (primitive_value -> value_array_slice .)
    WHILE           reduce using rule 130 (primitive_value -> value_array_slice .)


state 80

    (139) integer_literal -> ICONST .

    LBRACKET        reduce using rule 139 (integer_literal -> ICONST .)
    TIMES           reduce using rule 139 (integer_literal -> ICONST .)
    DIVIDE          reduce using rule 139 (integer_literal -> ICONST .)
    MODULO          reduce using rule 139 (integer_literal -> ICONST .)
    PLUS            reduce using rule 139 (integer_literal -> ICONST .)
    MINUS           reduce using rule 139 (integer_literal -> ICONST .)
    CONCAT          reduce using rule 139 (integer_literal -> ICONST .)
    IN              reduce using rule 139 (integer_literal -> ICONST .)
    AND             reduce using rule 139 (integer_literal -> ICONST .)
    OR              reduce using rule 139 (integer_literal -> ICONST .)
    EQUAL           reduce using rule 139 (integer_literal -> ICONST .)
    NOTEQ           reduce using rule 139 (integer_literal -> ICONST .)
    GREATER         reduce using rule 139 (integer_literal -> ICONST .)
    GTEQUAL         reduce using rule 139 (integer_literal -> ICONST .)
    LESS            reduce using rule 139 (integer_literal -> ICONST .)
    LTEQUAL         reduce using rule 139 (integer_literal -> ICONST .)
    COMMA           reduce using rule 139 (integer_literal -> ICONST .)
    RBRACKET        reduce using rule 139 (integer_literal -> ICONST .)
    COLON           reduce using rule 139 (integer_literal -> ICONST .)
    SEMI            reduce using rule 139 (integer_literal -> ICONST .)
    RPAREN          reduce using rule 139 (integer_literal -> ICONST .)
    DOWN            reduce using rule 139 (integer_literal -> ICONST .)
    TO              reduce using rule 139 (integer_literal -> ICONST .)
    THEN            reduce using rule 139 (integer_literal -> ICONST .)
    ELSE            reduce using rule 139 (integer_literal -> ICONST .)
    ELSIF           reduce using rule 139 (integer_literal -> ICONST .)
    BY              reduce using rule 139 (integer_literal -> ICONST .)
    FI              reduce using rule 139 (integer_literal -> ICONST .)
    WHILE           reduce using rule 139 (integer_literal -> ICONST .)


state 81

    (86) expression -> operand0 .
    (96) operand0 -> operand0 . operator1 operand1
    (112) operator1 -> . membership_operator
    (113) operator1 -> . relational_operator
    (127) membership_operator -> . IN
    (114) relational_operator -> . AND
    (115) relational_operator -> . OR
    (116) relational_operator -> . EQUAL
    (117) relational_operator -> . NOTEQ
    (118) relational_operator -> . GREATER
    (119) relational_operator -> . GTEQUAL
    (120) relational_operator -> . LESS
    (121) relational_operator -> . LTEQUAL

    THEN            reduce using rule 86 (expression -> operand0 .)
    RBRACKET        reduce using rule 86 (expression -> operand0 .)
    COLON           reduce using rule 86 (expression -> operand0 .)
    SEMI            reduce using rule 86 (expression -> operand0 .)
    COMMA           reduce using rule 86 (expression -> operand0 .)
    FI              reduce using rule 86 (expression -> operand0 .)
    RPAREN          reduce using rule 86 (expression -> operand0 .)
    WHILE           reduce using rule 86 (expression -> operand0 .)
    ELSE            reduce using rule 86 (expression -> operand0 .)
    ELSIF           reduce using rule 86 (expression -> operand0 .)
    DOWN            reduce using rule 86 (expression -> operand0 .)
    BY              reduce using rule 86 (expression -> operand0 .)
    TO              reduce using rule 86 (expression -> operand0 .)
    IN              shift and go to state 165
    AND             shift and go to state 166
    OR              shift and go to state 171
    EQUAL           shift and go to state 170
    NOTEQ           shift and go to state 172
    GREATER         shift and go to state 164
    GTEQUAL         shift and go to state 167
    LESS            shift and go to state 168
    LTEQUAL         shift and go to state 169

    relational_operator            shift and go to state 163
    operator1                      shift and go to state 174
    membership_operator            shift and go to state 173

state 82

    (105) operand4 -> primitive_value .
    (137) value_array_element -> primitive_value . LBRACKET expression_list RBRACKET
    (138) value_array_slice -> primitive_value . LBRACKET expression COLON expression RBRACKET

    TIMES           reduce using rule 105 (operand4 -> primitive_value .)
    DIVIDE          reduce using rule 105 (operand4 -> primitive_value .)
    MODULO          reduce using rule 105 (operand4 -> primitive_value .)
    PLUS            reduce using rule 105 (operand4 -> primitive_value .)
    MINUS           reduce using rule 105 (operand4 -> primitive_value .)
    CONCAT          reduce using rule 105 (operand4 -> primitive_value .)
    IN              reduce using rule 105 (operand4 -> primitive_value .)
    AND             reduce using rule 105 (operand4 -> primitive_value .)
    OR              reduce using rule 105 (operand4 -> primitive_value .)
    EQUAL           reduce using rule 105 (operand4 -> primitive_value .)
    NOTEQ           reduce using rule 105 (operand4 -> primitive_value .)
    GREATER         reduce using rule 105 (operand4 -> primitive_value .)
    GTEQUAL         reduce using rule 105 (operand4 -> primitive_value .)
    LESS            reduce using rule 105 (operand4 -> primitive_value .)
    LTEQUAL         reduce using rule 105 (operand4 -> primitive_value .)
    RPAREN          reduce using rule 105 (operand4 -> primitive_value .)
    COMMA           reduce using rule 105 (operand4 -> primitive_value .)
    RBRACKET        reduce using rule 105 (operand4 -> primitive_value .)
    DOWN            reduce using rule 105 (operand4 -> primitive_value .)
    TO              reduce using rule 105 (operand4 -> primitive_value .)
    ELSE            reduce using rule 105 (operand4 -> primitive_value .)
    ELSIF           reduce using rule 105 (operand4 -> primitive_value .)
    SEMI            reduce using rule 105 (operand4 -> primitive_value .)
    THEN            reduce using rule 105 (operand4 -> primitive_value .)
    COLON           reduce using rule 105 (operand4 -> primitive_value .)
    BY              reduce using rule 105 (operand4 -> primitive_value .)
    FI              reduce using rule 105 (operand4 -> primitive_value .)
    WHILE           reduce using rule 105 (operand4 -> primitive_value .)
    LBRACKET        shift and go to state 175


state 83

    (95) operand0 -> operand1 .
    (98) operand1 -> operand1 . operator2 operand2
    (122) operator2 -> . arithmetic_additive_operator
    (123) operator2 -> . string_concatenation_operator
    (124) arithmetic_additive_operator -> . PLUS
    (125) arithmetic_additive_operator -> . MINUS
    (126) string_concatenation_operator -> . CONCAT

    IN              reduce using rule 95 (operand0 -> operand1 .)
    AND             reduce using rule 95 (operand0 -> operand1 .)
    OR              reduce using rule 95 (operand0 -> operand1 .)
    EQUAL           reduce using rule 95 (operand0 -> operand1 .)
    NOTEQ           reduce using rule 95 (operand0 -> operand1 .)
    GREATER         reduce using rule 95 (operand0 -> operand1 .)
    GTEQUAL         reduce using rule 95 (operand0 -> operand1 .)
    LESS            reduce using rule 95 (operand0 -> operand1 .)
    LTEQUAL         reduce using rule 95 (operand0 -> operand1 .)
    COMMA           reduce using rule 95 (operand0 -> operand1 .)
    SEMI            reduce using rule 95 (operand0 -> operand1 .)
    COLON           reduce using rule 95 (operand0 -> operand1 .)
    DOWN            reduce using rule 95 (operand0 -> operand1 .)
    BY              reduce using rule 95 (operand0 -> operand1 .)
    TO              reduce using rule 95 (operand0 -> operand1 .)
    THEN            reduce using rule 95 (operand0 -> operand1 .)
    RBRACKET        reduce using rule 95 (operand0 -> operand1 .)
    RPAREN          reduce using rule 95 (operand0 -> operand1 .)
    WHILE           reduce using rule 95 (operand0 -> operand1 .)
    FI              reduce using rule 95 (operand0 -> operand1 .)
    ELSE            reduce using rule 95 (operand0 -> operand1 .)
    ELSIF           reduce using rule 95 (operand0 -> operand1 .)
    PLUS            shift and go to state 57
    MINUS           shift and go to state 61
    CONCAT          shift and go to state 67

    string_concatenation_operator  shift and go to state 176
    arithmetic_additive_operator   shift and go to state 178
    operator2                      shift and go to state 177

state 84

    (102) operand3 -> operand4 .

    TIMES           reduce using rule 102 (operand3 -> operand4 .)
    DIVIDE          reduce using rule 102 (operand3 -> operand4 .)
    MODULO          reduce using rule 102 (operand3 -> operand4 .)
    PLUS            reduce using rule 102 (operand3 -> operand4 .)
    MINUS           reduce using rule 102 (operand3 -> operand4 .)
    CONCAT          reduce using rule 102 (operand3 -> operand4 .)
    IN              reduce using rule 102 (operand3 -> operand4 .)
    AND             reduce using rule 102 (operand3 -> operand4 .)
    OR              reduce using rule 102 (operand3 -> operand4 .)
    EQUAL           reduce using rule 102 (operand3 -> operand4 .)
    NOTEQ           reduce using rule 102 (operand3 -> operand4 .)
    GREATER         reduce using rule 102 (operand3 -> operand4 .)
    GTEQUAL         reduce using rule 102 (operand3 -> operand4 .)
    LESS            reduce using rule 102 (operand3 -> operand4 .)
    LTEQUAL         reduce using rule 102 (operand3 -> operand4 .)
    COMMA           reduce using rule 102 (operand3 -> operand4 .)
    RPAREN          reduce using rule 102 (operand3 -> operand4 .)
    RBRACKET        reduce using rule 102 (operand3 -> operand4 .)
    COLON           reduce using rule 102 (operand3 -> operand4 .)
    THEN            reduce using rule 102 (operand3 -> operand4 .)
    WHILE           reduce using rule 102 (operand3 -> operand4 .)
    SEMI            reduce using rule 102 (operand3 -> operand4 .)
    FI              reduce using rule 102 (operand3 -> operand4 .)
    DOWN            reduce using rule 102 (operand3 -> operand4 .)
    TO              reduce using rule 102 (operand3 -> operand4 .)
    ELSE            reduce using rule 102 (operand3 -> operand4 .)
    ELSIF           reduce using rule 102 (operand3 -> operand4 .)
    BY              reduce using rule 102 (operand3 -> operand4 .)


state 85

    (88) parenthesized_expression -> LPAREN . expression RPAREN
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (89) conditional_expression -> . IF expression then_expression else_expression FI
    (90) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (97) operand1 -> . operand2
    (98) operand1 -> . operand1 operator2 operand2
    (99) operand2 -> . operand3
    (100) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (101) operand3 -> . monadic_operator operand4
    (102) operand3 -> . operand4
    (109) monadic_operator -> . MINUS
    (110) monadic_operator -> . NOT
    (103) operand4 -> . array_location
    (104) operand4 -> . referenced_location
    (105) operand4 -> . primitive_value
    (85) array_location -> . location
    (111) referenced_location -> . ARROW array_location
    (128) primitive_value -> . literal
    (129) primitive_value -> . value_array_element
    (130) primitive_value -> . value_array_slice
    (131) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (132) literal -> . integer_literal
    (133) literal -> . boolean_literal
    (134) literal -> . character_literal
    (135) literal -> . empty_literal
    (136) literal -> . character_string_literal
    (137) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (138) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (88) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (139) integer_literal -> . ICONST
    (140) boolean_literal -> . TRUE
    (141) boolean_literal -> . FALSE
    (142) character_literal -> . CCONST
    (143) character_literal -> . HAT LPAREN ICONST RPAREN
    (144) empty_literal -> . NULL
    (145) character_string_literal -> . SCONST
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT

    IF              shift and go to state 104
    MINUS           shift and go to state 75
    NOT             shift and go to state 100
    ARROW           shift and go to state 71
    LPAREN          shift and go to state 85
    ID              shift and go to state 70
    ICONST          shift and go to state 80
    TRUE            shift and go to state 96
    FALSE           shift and go to state 78
    CCONST          shift and go to state 86
    HAT             shift and go to state 74
    NULL            shift and go to state 97
    SCONST          shift and go to state 94
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    literal                        shift and go to state 68
    operand2                       shift and go to state 98
    array_location                 shift and go to state 72
    dereferenced_reference         shift and go to state 8
    parenthesized_expression       shift and go to state 76
    character_literal              shift and go to state 77
    value_array_slice              shift and go to state 79
    builtin_call                   shift and go to state 14
    array_element                  shift and go to state 5
    operand0                       shift and go to state 81
    operand1                       shift and go to state 83
    value_array_element            shift and go to state 95
    primitive_value                shift and go to state 82
    empty_literal                  shift and go to state 88
    call_action                    shift and go to state 89
    string_slice                   shift and go to state 24
    referenced_location            shift and go to state 90
    operand4                       shift and go to state 84
    expression                     shift and go to state 179
    conditional_expression         shift and go to state 92
    integer_literal                shift and go to state 93
    monadic_operator               shift and go to state 69
    location                       shift and go to state 34
    operand3                       shift and go to state 99
    builtin_name                   shift and go to state 36
    array_slice                    shift and go to state 38
    character_string_literal       shift and go to state 101
    identifier                     shift and go to state 102
    procedure_call                 shift and go to state 42
    boolean_literal                shift and go to state 103
    string_element                 shift and go to state 44

state 86

    (142) character_literal -> CCONST .

    LBRACKET        reduce using rule 142 (character_literal -> CCONST .)
    TIMES           reduce using rule 142 (character_literal -> CCONST .)
    DIVIDE          reduce using rule 142 (character_literal -> CCONST .)
    MODULO          reduce using rule 142 (character_literal -> CCONST .)
    PLUS            reduce using rule 142 (character_literal -> CCONST .)
    MINUS           reduce using rule 142 (character_literal -> CCONST .)
    CONCAT          reduce using rule 142 (character_literal -> CCONST .)
    IN              reduce using rule 142 (character_literal -> CCONST .)
    AND             reduce using rule 142 (character_literal -> CCONST .)
    OR              reduce using rule 142 (character_literal -> CCONST .)
    EQUAL           reduce using rule 142 (character_literal -> CCONST .)
    NOTEQ           reduce using rule 142 (character_literal -> CCONST .)
    GREATER         reduce using rule 142 (character_literal -> CCONST .)
    GTEQUAL         reduce using rule 142 (character_literal -> CCONST .)
    LESS            reduce using rule 142 (character_literal -> CCONST .)
    LTEQUAL         reduce using rule 142 (character_literal -> CCONST .)
    COLON           reduce using rule 142 (character_literal -> CCONST .)
    RBRACKET        reduce using rule 142 (character_literal -> CCONST .)
    SEMI            reduce using rule 142 (character_literal -> CCONST .)
    THEN            reduce using rule 142 (character_literal -> CCONST .)
    COMMA           reduce using rule 142 (character_literal -> CCONST .)
    RPAREN          reduce using rule 142 (character_literal -> CCONST .)
    ELSE            reduce using rule 142 (character_literal -> CCONST .)
    ELSIF           reduce using rule 142 (character_literal -> CCONST .)
    DOWN            reduce using rule 142 (character_literal -> CCONST .)
    BY              reduce using rule 142 (character_literal -> CCONST .)
    TO              reduce using rule 142 (character_literal -> CCONST .)
    FI              reduce using rule 142 (character_literal -> CCONST .)
    WHILE           reduce using rule 142 (character_literal -> CCONST .)


state 87

    (188) return_action -> RETURN result .

    SEMI            reduce using rule 188 (return_action -> RETURN result .)


state 88

    (135) literal -> empty_literal .

    LBRACKET        reduce using rule 135 (literal -> empty_literal .)
    TIMES           reduce using rule 135 (literal -> empty_literal .)
    DIVIDE          reduce using rule 135 (literal -> empty_literal .)
    MODULO          reduce using rule 135 (literal -> empty_literal .)
    PLUS            reduce using rule 135 (literal -> empty_literal .)
    MINUS           reduce using rule 135 (literal -> empty_literal .)
    CONCAT          reduce using rule 135 (literal -> empty_literal .)
    IN              reduce using rule 135 (literal -> empty_literal .)
    AND             reduce using rule 135 (literal -> empty_literal .)
    OR              reduce using rule 135 (literal -> empty_literal .)
    EQUAL           reduce using rule 135 (literal -> empty_literal .)
    NOTEQ           reduce using rule 135 (literal -> empty_literal .)
    GREATER         reduce using rule 135 (literal -> empty_literal .)
    GTEQUAL         reduce using rule 135 (literal -> empty_literal .)
    LESS            reduce using rule 135 (literal -> empty_literal .)
    LTEQUAL         reduce using rule 135 (literal -> empty_literal .)
    SEMI            reduce using rule 135 (literal -> empty_literal .)
    THEN            reduce using rule 135 (literal -> empty_literal .)
    COMMA           reduce using rule 135 (literal -> empty_literal .)
    RPAREN          reduce using rule 135 (literal -> empty_literal .)
    RBRACKET        reduce using rule 135 (literal -> empty_literal .)
    COLON           reduce using rule 135 (literal -> empty_literal .)
    ELSE            reduce using rule 135 (literal -> empty_literal .)
    ELSIF           reduce using rule 135 (literal -> empty_literal .)
    DOWN            reduce using rule 135 (literal -> empty_literal .)
    BY              reduce using rule 135 (literal -> empty_literal .)
    TO              reduce using rule 135 (literal -> empty_literal .)
    FI              reduce using rule 135 (literal -> empty_literal .)
    WHILE           reduce using rule 135 (literal -> empty_literal .)


state 89

    (74) location -> call_action .

    ARROW           reduce using rule 74 (location -> call_action .)
    LBRACKET        reduce using rule 74 (location -> call_action .)
    TIMES           reduce using rule 74 (location -> call_action .)
    DIVIDE          reduce using rule 74 (location -> call_action .)
    MODULO          reduce using rule 74 (location -> call_action .)
    PLUS            reduce using rule 74 (location -> call_action .)
    MINUS           reduce using rule 74 (location -> call_action .)
    CONCAT          reduce using rule 74 (location -> call_action .)
    IN              reduce using rule 74 (location -> call_action .)
    AND             reduce using rule 74 (location -> call_action .)
    OR              reduce using rule 74 (location -> call_action .)
    EQUAL           reduce using rule 74 (location -> call_action .)
    NOTEQ           reduce using rule 74 (location -> call_action .)
    GREATER         reduce using rule 74 (location -> call_action .)
    GTEQUAL         reduce using rule 74 (location -> call_action .)
    LESS            reduce using rule 74 (location -> call_action .)
    LTEQUAL         reduce using rule 74 (location -> call_action .)
    RBRACKET        reduce using rule 74 (location -> call_action .)
    COLON           reduce using rule 74 (location -> call_action .)
    SEMI            reduce using rule 74 (location -> call_action .)
    THEN            reduce using rule 74 (location -> call_action .)
    COMMA           reduce using rule 74 (location -> call_action .)
    RPAREN          reduce using rule 74 (location -> call_action .)
    ELSE            reduce using rule 74 (location -> call_action .)
    ELSIF           reduce using rule 74 (location -> call_action .)
    DOWN            reduce using rule 74 (location -> call_action .)
    BY              reduce using rule 74 (location -> call_action .)
    TO              reduce using rule 74 (location -> call_action .)
    FI              reduce using rule 74 (location -> call_action .)
    WHILE           reduce using rule 74 (location -> call_action .)


state 90

    (104) operand4 -> referenced_location .

    TIMES           reduce using rule 104 (operand4 -> referenced_location .)
    DIVIDE          reduce using rule 104 (operand4 -> referenced_location .)
    MODULO          reduce using rule 104 (operand4 -> referenced_location .)
    PLUS            reduce using rule 104 (operand4 -> referenced_location .)
    MINUS           reduce using rule 104 (operand4 -> referenced_location .)
    CONCAT          reduce using rule 104 (operand4 -> referenced_location .)
    IN              reduce using rule 104 (operand4 -> referenced_location .)
    AND             reduce using rule 104 (operand4 -> referenced_location .)
    OR              reduce using rule 104 (operand4 -> referenced_location .)
    EQUAL           reduce using rule 104 (operand4 -> referenced_location .)
    NOTEQ           reduce using rule 104 (operand4 -> referenced_location .)
    GREATER         reduce using rule 104 (operand4 -> referenced_location .)
    GTEQUAL         reduce using rule 104 (operand4 -> referenced_location .)
    LESS            reduce using rule 104 (operand4 -> referenced_location .)
    LTEQUAL         reduce using rule 104 (operand4 -> referenced_location .)
    RPAREN          reduce using rule 104 (operand4 -> referenced_location .)
    COMMA           reduce using rule 104 (operand4 -> referenced_location .)
    RBRACKET        reduce using rule 104 (operand4 -> referenced_location .)
    DOWN            reduce using rule 104 (operand4 -> referenced_location .)
    TO              reduce using rule 104 (operand4 -> referenced_location .)
    ELSE            reduce using rule 104 (operand4 -> referenced_location .)
    ELSIF           reduce using rule 104 (operand4 -> referenced_location .)
    SEMI            reduce using rule 104 (operand4 -> referenced_location .)
    THEN            reduce using rule 104 (operand4 -> referenced_location .)
    COLON           reduce using rule 104 (operand4 -> referenced_location .)
    BY              reduce using rule 104 (operand4 -> referenced_location .)
    FI              reduce using rule 104 (operand4 -> referenced_location .)
    WHILE           reduce using rule 104 (operand4 -> referenced_location .)


state 91

    (189) result -> expression .

    SEMI            reduce using rule 189 (result -> expression .)


state 92

    (87) expression -> conditional_expression .

    THEN            reduce using rule 87 (expression -> conditional_expression .)
    RBRACKET        reduce using rule 87 (expression -> conditional_expression .)
    COLON           reduce using rule 87 (expression -> conditional_expression .)
    SEMI            reduce using rule 87 (expression -> conditional_expression .)
    COMMA           reduce using rule 87 (expression -> conditional_expression .)
    FI              reduce using rule 87 (expression -> conditional_expression .)
    RPAREN          reduce using rule 87 (expression -> conditional_expression .)
    WHILE           reduce using rule 87 (expression -> conditional_expression .)
    ELSE            reduce using rule 87 (expression -> conditional_expression .)
    ELSIF           reduce using rule 87 (expression -> conditional_expression .)
    DOWN            reduce using rule 87 (expression -> conditional_expression .)
    BY              reduce using rule 87 (expression -> conditional_expression .)
    TO              reduce using rule 87 (expression -> conditional_expression .)


state 93

    (132) literal -> integer_literal .

    LBRACKET        reduce using rule 132 (literal -> integer_literal .)
    TIMES           reduce using rule 132 (literal -> integer_literal .)
    DIVIDE          reduce using rule 132 (literal -> integer_literal .)
    MODULO          reduce using rule 132 (literal -> integer_literal .)
    PLUS            reduce using rule 132 (literal -> integer_literal .)
    MINUS           reduce using rule 132 (literal -> integer_literal .)
    CONCAT          reduce using rule 132 (literal -> integer_literal .)
    IN              reduce using rule 132 (literal -> integer_literal .)
    AND             reduce using rule 132 (literal -> integer_literal .)
    OR              reduce using rule 132 (literal -> integer_literal .)
    EQUAL           reduce using rule 132 (literal -> integer_literal .)
    NOTEQ           reduce using rule 132 (literal -> integer_literal .)
    GREATER         reduce using rule 132 (literal -> integer_literal .)
    GTEQUAL         reduce using rule 132 (literal -> integer_literal .)
    LESS            reduce using rule 132 (literal -> integer_literal .)
    LTEQUAL         reduce using rule 132 (literal -> integer_literal .)
    SEMI            reduce using rule 132 (literal -> integer_literal .)
    THEN            reduce using rule 132 (literal -> integer_literal .)
    COMMA           reduce using rule 132 (literal -> integer_literal .)
    RPAREN          reduce using rule 132 (literal -> integer_literal .)
    RBRACKET        reduce using rule 132 (literal -> integer_literal .)
    COLON           reduce using rule 132 (literal -> integer_literal .)
    ELSE            reduce using rule 132 (literal -> integer_literal .)
    ELSIF           reduce using rule 132 (literal -> integer_literal .)
    DOWN            reduce using rule 132 (literal -> integer_literal .)
    BY              reduce using rule 132 (literal -> integer_literal .)
    TO              reduce using rule 132 (literal -> integer_literal .)
    FI              reduce using rule 132 (literal -> integer_literal .)
    WHILE           reduce using rule 132 (literal -> integer_literal .)


state 94

    (145) character_string_literal -> SCONST .

    LBRACKET        reduce using rule 145 (character_string_literal -> SCONST .)
    TIMES           reduce using rule 145 (character_string_literal -> SCONST .)
    DIVIDE          reduce using rule 145 (character_string_literal -> SCONST .)
    MODULO          reduce using rule 145 (character_string_literal -> SCONST .)
    PLUS            reduce using rule 145 (character_string_literal -> SCONST .)
    MINUS           reduce using rule 145 (character_string_literal -> SCONST .)
    CONCAT          reduce using rule 145 (character_string_literal -> SCONST .)
    IN              reduce using rule 145 (character_string_literal -> SCONST .)
    AND             reduce using rule 145 (character_string_literal -> SCONST .)
    OR              reduce using rule 145 (character_string_literal -> SCONST .)
    EQUAL           reduce using rule 145 (character_string_literal -> SCONST .)
    NOTEQ           reduce using rule 145 (character_string_literal -> SCONST .)
    GREATER         reduce using rule 145 (character_string_literal -> SCONST .)
    GTEQUAL         reduce using rule 145 (character_string_literal -> SCONST .)
    LESS            reduce using rule 145 (character_string_literal -> SCONST .)
    LTEQUAL         reduce using rule 145 (character_string_literal -> SCONST .)
    COMMA           reduce using rule 145 (character_string_literal -> SCONST .)
    SEMI            reduce using rule 145 (character_string_literal -> SCONST .)
    ELSE            reduce using rule 145 (character_string_literal -> SCONST .)
    ELSIF           reduce using rule 145 (character_string_literal -> SCONST .)
    THEN            reduce using rule 145 (character_string_literal -> SCONST .)
    RPAREN          reduce using rule 145 (character_string_literal -> SCONST .)
    RBRACKET        reduce using rule 145 (character_string_literal -> SCONST .)
    COLON           reduce using rule 145 (character_string_literal -> SCONST .)
    DOWN            reduce using rule 145 (character_string_literal -> SCONST .)
    BY              reduce using rule 145 (character_string_literal -> SCONST .)
    TO              reduce using rule 145 (character_string_literal -> SCONST .)
    FI              reduce using rule 145 (character_string_literal -> SCONST .)
    WHILE           reduce using rule 145 (character_string_literal -> SCONST .)


state 95

    (129) primitive_value -> value_array_element .

    LBRACKET        reduce using rule 129 (primitive_value -> value_array_element .)
    TIMES           reduce using rule 129 (primitive_value -> value_array_element .)
    DIVIDE          reduce using rule 129 (primitive_value -> value_array_element .)
    MODULO          reduce using rule 129 (primitive_value -> value_array_element .)
    PLUS            reduce using rule 129 (primitive_value -> value_array_element .)
    MINUS           reduce using rule 129 (primitive_value -> value_array_element .)
    CONCAT          reduce using rule 129 (primitive_value -> value_array_element .)
    IN              reduce using rule 129 (primitive_value -> value_array_element .)
    AND             reduce using rule 129 (primitive_value -> value_array_element .)
    OR              reduce using rule 129 (primitive_value -> value_array_element .)
    EQUAL           reduce using rule 129 (primitive_value -> value_array_element .)
    NOTEQ           reduce using rule 129 (primitive_value -> value_array_element .)
    GREATER         reduce using rule 129 (primitive_value -> value_array_element .)
    GTEQUAL         reduce using rule 129 (primitive_value -> value_array_element .)
    LESS            reduce using rule 129 (primitive_value -> value_array_element .)
    LTEQUAL         reduce using rule 129 (primitive_value -> value_array_element .)
    THEN            reduce using rule 129 (primitive_value -> value_array_element .)
    RPAREN          reduce using rule 129 (primitive_value -> value_array_element .)
    COMMA           reduce using rule 129 (primitive_value -> value_array_element .)
    RBRACKET        reduce using rule 129 (primitive_value -> value_array_element .)
    SEMI            reduce using rule 129 (primitive_value -> value_array_element .)
    COLON           reduce using rule 129 (primitive_value -> value_array_element .)
    ELSE            reduce using rule 129 (primitive_value -> value_array_element .)
    ELSIF           reduce using rule 129 (primitive_value -> value_array_element .)
    DOWN            reduce using rule 129 (primitive_value -> value_array_element .)
    BY              reduce using rule 129 (primitive_value -> value_array_element .)
    TO              reduce using rule 129 (primitive_value -> value_array_element .)
    FI              reduce using rule 129 (primitive_value -> value_array_element .)
    WHILE           reduce using rule 129 (primitive_value -> value_array_element .)


state 96

    (140) boolean_literal -> TRUE .

    LBRACKET        reduce using rule 140 (boolean_literal -> TRUE .)
    TIMES           reduce using rule 140 (boolean_literal -> TRUE .)
    DIVIDE          reduce using rule 140 (boolean_literal -> TRUE .)
    MODULO          reduce using rule 140 (boolean_literal -> TRUE .)
    PLUS            reduce using rule 140 (boolean_literal -> TRUE .)
    MINUS           reduce using rule 140 (boolean_literal -> TRUE .)
    CONCAT          reduce using rule 140 (boolean_literal -> TRUE .)
    IN              reduce using rule 140 (boolean_literal -> TRUE .)
    AND             reduce using rule 140 (boolean_literal -> TRUE .)
    OR              reduce using rule 140 (boolean_literal -> TRUE .)
    EQUAL           reduce using rule 140 (boolean_literal -> TRUE .)
    NOTEQ           reduce using rule 140 (boolean_literal -> TRUE .)
    GREATER         reduce using rule 140 (boolean_literal -> TRUE .)
    GTEQUAL         reduce using rule 140 (boolean_literal -> TRUE .)
    LESS            reduce using rule 140 (boolean_literal -> TRUE .)
    LTEQUAL         reduce using rule 140 (boolean_literal -> TRUE .)
    THEN            reduce using rule 140 (boolean_literal -> TRUE .)
    RBRACKET        reduce using rule 140 (boolean_literal -> TRUE .)
    SEMI            reduce using rule 140 (boolean_literal -> TRUE .)
    COMMA           reduce using rule 140 (boolean_literal -> TRUE .)
    RPAREN          reduce using rule 140 (boolean_literal -> TRUE .)
    COLON           reduce using rule 140 (boolean_literal -> TRUE .)
    ELSE            reduce using rule 140 (boolean_literal -> TRUE .)
    ELSIF           reduce using rule 140 (boolean_literal -> TRUE .)
    DOWN            reduce using rule 140 (boolean_literal -> TRUE .)
    BY              reduce using rule 140 (boolean_literal -> TRUE .)
    TO              reduce using rule 140 (boolean_literal -> TRUE .)
    FI              reduce using rule 140 (boolean_literal -> TRUE .)
    WHILE           reduce using rule 140 (boolean_literal -> TRUE .)


state 97

    (144) empty_literal -> NULL .

    LBRACKET        reduce using rule 144 (empty_literal -> NULL .)
    TIMES           reduce using rule 144 (empty_literal -> NULL .)
    DIVIDE          reduce using rule 144 (empty_literal -> NULL .)
    MODULO          reduce using rule 144 (empty_literal -> NULL .)
    PLUS            reduce using rule 144 (empty_literal -> NULL .)
    MINUS           reduce using rule 144 (empty_literal -> NULL .)
    CONCAT          reduce using rule 144 (empty_literal -> NULL .)
    IN              reduce using rule 144 (empty_literal -> NULL .)
    AND             reduce using rule 144 (empty_literal -> NULL .)
    OR              reduce using rule 144 (empty_literal -> NULL .)
    EQUAL           reduce using rule 144 (empty_literal -> NULL .)
    NOTEQ           reduce using rule 144 (empty_literal -> NULL .)
    GREATER         reduce using rule 144 (empty_literal -> NULL .)
    GTEQUAL         reduce using rule 144 (empty_literal -> NULL .)
    LESS            reduce using rule 144 (empty_literal -> NULL .)
    LTEQUAL         reduce using rule 144 (empty_literal -> NULL .)
    COLON           reduce using rule 144 (empty_literal -> NULL .)
    RPAREN          reduce using rule 144 (empty_literal -> NULL .)
    THEN            reduce using rule 144 (empty_literal -> NULL .)
    COMMA           reduce using rule 144 (empty_literal -> NULL .)
    SEMI            reduce using rule 144 (empty_literal -> NULL .)
    RBRACKET        reduce using rule 144 (empty_literal -> NULL .)
    ELSE            reduce using rule 144 (empty_literal -> NULL .)
    ELSIF           reduce using rule 144 (empty_literal -> NULL .)
    DOWN            reduce using rule 144 (empty_literal -> NULL .)
    BY              reduce using rule 144 (empty_literal -> NULL .)
    TO              reduce using rule 144 (empty_literal -> NULL .)
    FI              reduce using rule 144 (empty_literal -> NULL .)
    WHILE           reduce using rule 144 (empty_literal -> NULL .)


state 98

    (97) operand1 -> operand2 .
    (100) operand2 -> operand2 . arithmetic_multiplicative_operator operand3
    (106) arithmetic_multiplicative_operator -> . TIMES
    (107) arithmetic_multiplicative_operator -> . DIVIDE
    (108) arithmetic_multiplicative_operator -> . MODULO

    PLUS            reduce using rule 97 (operand1 -> operand2 .)
    MINUS           reduce using rule 97 (operand1 -> operand2 .)
    CONCAT          reduce using rule 97 (operand1 -> operand2 .)
    IN              reduce using rule 97 (operand1 -> operand2 .)
    AND             reduce using rule 97 (operand1 -> operand2 .)
    OR              reduce using rule 97 (operand1 -> operand2 .)
    EQUAL           reduce using rule 97 (operand1 -> operand2 .)
    NOTEQ           reduce using rule 97 (operand1 -> operand2 .)
    GREATER         reduce using rule 97 (operand1 -> operand2 .)
    GTEQUAL         reduce using rule 97 (operand1 -> operand2 .)
    LESS            reduce using rule 97 (operand1 -> operand2 .)
    LTEQUAL         reduce using rule 97 (operand1 -> operand2 .)
    THEN            reduce using rule 97 (operand1 -> operand2 .)
    RBRACKET        reduce using rule 97 (operand1 -> operand2 .)
    COMMA           reduce using rule 97 (operand1 -> operand2 .)
    RPAREN          reduce using rule 97 (operand1 -> operand2 .)
    SEMI            reduce using rule 97 (operand1 -> operand2 .)
    DOWN            reduce using rule 97 (operand1 -> operand2 .)
    BY              reduce using rule 97 (operand1 -> operand2 .)
    TO              reduce using rule 97 (operand1 -> operand2 .)
    COLON           reduce using rule 97 (operand1 -> operand2 .)
    ELSE            reduce using rule 97 (operand1 -> operand2 .)
    ELSIF           reduce using rule 97 (operand1 -> operand2 .)
    FI              reduce using rule 97 (operand1 -> operand2 .)
    WHILE           reduce using rule 97 (operand1 -> operand2 .)
    TIMES           shift and go to state 58
    DIVIDE          shift and go to state 60
    MODULO          shift and go to state 64

    arithmetic_multiplicative_operator shift and go to state 180

state 99

    (99) operand2 -> operand3 .

    TIMES           reduce using rule 99 (operand2 -> operand3 .)
    DIVIDE          reduce using rule 99 (operand2 -> operand3 .)
    MODULO          reduce using rule 99 (operand2 -> operand3 .)
    PLUS            reduce using rule 99 (operand2 -> operand3 .)
    MINUS           reduce using rule 99 (operand2 -> operand3 .)
    CONCAT          reduce using rule 99 (operand2 -> operand3 .)
    IN              reduce using rule 99 (operand2 -> operand3 .)
    AND             reduce using rule 99 (operand2 -> operand3 .)
    OR              reduce using rule 99 (operand2 -> operand3 .)
    EQUAL           reduce using rule 99 (operand2 -> operand3 .)
    NOTEQ           reduce using rule 99 (operand2 -> operand3 .)
    GREATER         reduce using rule 99 (operand2 -> operand3 .)
    GTEQUAL         reduce using rule 99 (operand2 -> operand3 .)
    LESS            reduce using rule 99 (operand2 -> operand3 .)
    LTEQUAL         reduce using rule 99 (operand2 -> operand3 .)
    RBRACKET        reduce using rule 99 (operand2 -> operand3 .)
    COMMA           reduce using rule 99 (operand2 -> operand3 .)
    RPAREN          reduce using rule 99 (operand2 -> operand3 .)
    THEN            reduce using rule 99 (operand2 -> operand3 .)
    COLON           reduce using rule 99 (operand2 -> operand3 .)
    SEMI            reduce using rule 99 (operand2 -> operand3 .)
    ELSE            reduce using rule 99 (operand2 -> operand3 .)
    ELSIF           reduce using rule 99 (operand2 -> operand3 .)
    DOWN            reduce using rule 99 (operand2 -> operand3 .)
    BY              reduce using rule 99 (operand2 -> operand3 .)
    TO              reduce using rule 99 (operand2 -> operand3 .)
    FI              reduce using rule 99 (operand2 -> operand3 .)
    WHILE           reduce using rule 99 (operand2 -> operand3 .)


state 100

    (110) monadic_operator -> NOT .

    ARROW           reduce using rule 110 (monadic_operator -> NOT .)
    LPAREN          reduce using rule 110 (monadic_operator -> NOT .)
    ID              reduce using rule 110 (monadic_operator -> NOT .)
    ICONST          reduce using rule 110 (monadic_operator -> NOT .)
    TRUE            reduce using rule 110 (monadic_operator -> NOT .)
    FALSE           reduce using rule 110 (monadic_operator -> NOT .)
    CCONST          reduce using rule 110 (monadic_operator -> NOT .)
    HAT             reduce using rule 110 (monadic_operator -> NOT .)
    NULL            reduce using rule 110 (monadic_operator -> NOT .)
    SCONST          reduce using rule 110 (monadic_operator -> NOT .)
    ABS             reduce using rule 110 (monadic_operator -> NOT .)
    ASC             reduce using rule 110 (monadic_operator -> NOT .)
    NUM             reduce using rule 110 (monadic_operator -> NOT .)
    UPPER           reduce using rule 110 (monadic_operator -> NOT .)
    LOWER           reduce using rule 110 (monadic_operator -> NOT .)
    LENGTH          reduce using rule 110 (monadic_operator -> NOT .)
    READ            reduce using rule 110 (monadic_operator -> NOT .)
    PRINT           reduce using rule 110 (monadic_operator -> NOT .)


state 101

    (136) literal -> character_string_literal .

    LBRACKET        reduce using rule 136 (literal -> character_string_literal .)
    TIMES           reduce using rule 136 (literal -> character_string_literal .)
    DIVIDE          reduce using rule 136 (literal -> character_string_literal .)
    MODULO          reduce using rule 136 (literal -> character_string_literal .)
    PLUS            reduce using rule 136 (literal -> character_string_literal .)
    MINUS           reduce using rule 136 (literal -> character_string_literal .)
    CONCAT          reduce using rule 136 (literal -> character_string_literal .)
    IN              reduce using rule 136 (literal -> character_string_literal .)
    AND             reduce using rule 136 (literal -> character_string_literal .)
    OR              reduce using rule 136 (literal -> character_string_literal .)
    EQUAL           reduce using rule 136 (literal -> character_string_literal .)
    NOTEQ           reduce using rule 136 (literal -> character_string_literal .)
    GREATER         reduce using rule 136 (literal -> character_string_literal .)
    GTEQUAL         reduce using rule 136 (literal -> character_string_literal .)
    LESS            reduce using rule 136 (literal -> character_string_literal .)
    LTEQUAL         reduce using rule 136 (literal -> character_string_literal .)
    SEMI            reduce using rule 136 (literal -> character_string_literal .)
    THEN            reduce using rule 136 (literal -> character_string_literal .)
    COMMA           reduce using rule 136 (literal -> character_string_literal .)
    RPAREN          reduce using rule 136 (literal -> character_string_literal .)
    RBRACKET        reduce using rule 136 (literal -> character_string_literal .)
    COLON           reduce using rule 136 (literal -> character_string_literal .)
    ELSE            reduce using rule 136 (literal -> character_string_literal .)
    ELSIF           reduce using rule 136 (literal -> character_string_literal .)
    DOWN            reduce using rule 136 (literal -> character_string_literal .)
    BY              reduce using rule 136 (literal -> character_string_literal .)
    TO              reduce using rule 136 (literal -> character_string_literal .)
    FI              reduce using rule 136 (literal -> character_string_literal .)
    WHILE           reduce using rule 136 (literal -> character_string_literal .)


state 102

    (68) location -> identifier .
    (76) string_element -> identifier . LBRACKET start_element RBRACKET
    (78) string_slice -> identifier . LBRACKET left_element COLON right_element RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    ARROW           reduce using rule 68 (location -> identifier .)
    TIMES           reduce using rule 68 (location -> identifier .)
    DIVIDE          reduce using rule 68 (location -> identifier .)
    MODULO          reduce using rule 68 (location -> identifier .)
    PLUS            reduce using rule 68 (location -> identifier .)
    MINUS           reduce using rule 68 (location -> identifier .)
    CONCAT          reduce using rule 68 (location -> identifier .)
    IN              reduce using rule 68 (location -> identifier .)
    AND             reduce using rule 68 (location -> identifier .)
    OR              reduce using rule 68 (location -> identifier .)
    EQUAL           reduce using rule 68 (location -> identifier .)
    NOTEQ           reduce using rule 68 (location -> identifier .)
    GREATER         reduce using rule 68 (location -> identifier .)
    GTEQUAL         reduce using rule 68 (location -> identifier .)
    LESS            reduce using rule 68 (location -> identifier .)
    LTEQUAL         reduce using rule 68 (location -> identifier .)
    RBRACKET        reduce using rule 68 (location -> identifier .)
    COLON           reduce using rule 68 (location -> identifier .)
    SEMI            reduce using rule 68 (location -> identifier .)
    THEN            reduce using rule 68 (location -> identifier .)
    COMMA           reduce using rule 68 (location -> identifier .)
    RPAREN          reduce using rule 68 (location -> identifier .)
    ELSE            reduce using rule 68 (location -> identifier .)
    ELSIF           reduce using rule 68 (location -> identifier .)
    DOWN            reduce using rule 68 (location -> identifier .)
    BY              reduce using rule 68 (location -> identifier .)
    TO              reduce using rule 68 (location -> identifier .)
    FI              reduce using rule 68 (location -> identifier .)
    WHILE           reduce using rule 68 (location -> identifier .)
    ASSIGN          reduce using rule 68 (location -> identifier .)
    LBRACKET        shift and go to state 125

  ! LBRACKET        [ reduce using rule 68 (location -> identifier .) ]


state 103

    (133) literal -> boolean_literal .

    LBRACKET        reduce using rule 133 (literal -> boolean_literal .)
    TIMES           reduce using rule 133 (literal -> boolean_literal .)
    DIVIDE          reduce using rule 133 (literal -> boolean_literal .)
    MODULO          reduce using rule 133 (literal -> boolean_literal .)
    PLUS            reduce using rule 133 (literal -> boolean_literal .)
    MINUS           reduce using rule 133 (literal -> boolean_literal .)
    CONCAT          reduce using rule 133 (literal -> boolean_literal .)
    IN              reduce using rule 133 (literal -> boolean_literal .)
    AND             reduce using rule 133 (literal -> boolean_literal .)
    OR              reduce using rule 133 (literal -> boolean_literal .)
    EQUAL           reduce using rule 133 (literal -> boolean_literal .)
    NOTEQ           reduce using rule 133 (literal -> boolean_literal .)
    GREATER         reduce using rule 133 (literal -> boolean_literal .)
    GTEQUAL         reduce using rule 133 (literal -> boolean_literal .)
    LESS            reduce using rule 133 (literal -> boolean_literal .)
    LTEQUAL         reduce using rule 133 (literal -> boolean_literal .)
    SEMI            reduce using rule 133 (literal -> boolean_literal .)
    THEN            reduce using rule 133 (literal -> boolean_literal .)
    COMMA           reduce using rule 133 (literal -> boolean_literal .)
    RPAREN          reduce using rule 133 (literal -> boolean_literal .)
    RBRACKET        reduce using rule 133 (literal -> boolean_literal .)
    COLON           reduce using rule 133 (literal -> boolean_literal .)
    ELSE            reduce using rule 133 (literal -> boolean_literal .)
    ELSIF           reduce using rule 133 (literal -> boolean_literal .)
    DOWN            reduce using rule 133 (literal -> boolean_literal .)
    BY              reduce using rule 133 (literal -> boolean_literal .)
    TO              reduce using rule 133 (literal -> boolean_literal .)
    FI              reduce using rule 133 (literal -> boolean_literal .)
    WHILE           reduce using rule 133 (literal -> boolean_literal .)


state 104

    (89) conditional_expression -> IF . expression then_expression else_expression FI
    (90) conditional_expression -> IF . expression then_expression elsif_expression else_expression FI
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (89) conditional_expression -> . IF expression then_expression else_expression FI
    (90) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (97) operand1 -> . operand2
    (98) operand1 -> . operand1 operator2 operand2
    (99) operand2 -> . operand3
    (100) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (101) operand3 -> . monadic_operator operand4
    (102) operand3 -> . operand4
    (109) monadic_operator -> . MINUS
    (110) monadic_operator -> . NOT
    (103) operand4 -> . array_location
    (104) operand4 -> . referenced_location
    (105) operand4 -> . primitive_value
    (85) array_location -> . location
    (111) referenced_location -> . ARROW array_location
    (128) primitive_value -> . literal
    (129) primitive_value -> . value_array_element
    (130) primitive_value -> . value_array_slice
    (131) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (132) literal -> . integer_literal
    (133) literal -> . boolean_literal
    (134) literal -> . character_literal
    (135) literal -> . empty_literal
    (136) literal -> . character_string_literal
    (137) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (138) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (88) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (139) integer_literal -> . ICONST
    (140) boolean_literal -> . TRUE
    (141) boolean_literal -> . FALSE
    (142) character_literal -> . CCONST
    (143) character_literal -> . HAT LPAREN ICONST RPAREN
    (144) empty_literal -> . NULL
    (145) character_string_literal -> . SCONST
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT

    IF              shift and go to state 104
    MINUS           shift and go to state 75
    NOT             shift and go to state 100
    ARROW           shift and go to state 71
    LPAREN          shift and go to state 85
    ID              shift and go to state 70
    ICONST          shift and go to state 80
    TRUE            shift and go to state 96
    FALSE           shift and go to state 78
    CCONST          shift and go to state 86
    HAT             shift and go to state 74
    NULL            shift and go to state 97
    SCONST          shift and go to state 94
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    literal                        shift and go to state 68
    operand2                       shift and go to state 98
    array_location                 shift and go to state 72
    dereferenced_reference         shift and go to state 8
    parenthesized_expression       shift and go to state 76
    character_literal              shift and go to state 77
    value_array_slice              shift and go to state 79
    builtin_call                   shift and go to state 14
    array_element                  shift and go to state 5
    operand0                       shift and go to state 81
    operand1                       shift and go to state 83
    value_array_element            shift and go to state 95
    primitive_value                shift and go to state 82
    empty_literal                  shift and go to state 88
    call_action                    shift and go to state 89
    string_slice                   shift and go to state 24
    referenced_location            shift and go to state 90
    operand4                       shift and go to state 84
    expression                     shift and go to state 181
    conditional_expression         shift and go to state 92
    integer_literal                shift and go to state 93
    monadic_operator               shift and go to state 69
    location                       shift and go to state 34
    operand3                       shift and go to state 99
    builtin_name                   shift and go to state 36
    array_slice                    shift and go to state 38
    character_string_literal       shift and go to state 101
    identifier                     shift and go to state 102
    procedure_call                 shift and go to state 42
    boolean_literal                shift and go to state 103
    string_element                 shift and go to state 44

state 105

    (4) statement_nullable -> empty .

    END             reduce using rule 4 (statement_nullable -> empty .)
    $end            reduce using rule 4 (statement_nullable -> empty .)


state 106

    (3) statement_nullable -> statement . statement_nullable
    (3) statement_nullable -> . statement statement_nullable
    (4) statement_nullable -> . empty
    (5) statement -> . declaration_statement
    (6) statement -> . synonym_statement
    (7) statement -> . newmode_statement
    (8) statement -> . action_statement
    (9) statement -> . procedure_statement
    (209) empty -> .
    (15) declaration_statement -> . DCL declaration_list SEMI
    (10) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (146) action_statement -> . identifier COLON action SEMI
    (147) action_statement -> . action SEMI
    (28) procedure_statement -> . ID COLON procedure_definition
    (23) identifier -> . ID
    (148) action -> . bracketed_action
    (149) action -> . assignment_action
    (150) action -> . call_action
    (151) action -> . exit_action
    (152) action -> . result_action
    (153) action -> . return_action
    (154) bracketed_action -> . if_action
    (155) bracketed_action -> . do_action
    (156) assignment_action -> . array_location assigning_operator expression
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (187) exit_action -> . EXIT identifier
    (191) result_action -> . RESULT expression
    (188) return_action -> . RETURN result
    (162) if_action -> . IF expression then_clause else_clause FI
    (163) if_action -> . IF expression then_clause FI
    (192) do_action -> . DO control_part SEMI action_statement_nullable OD
    (193) do_action -> . DO action_statement_nullable OD
    (85) array_location -> . location
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    $end            reduce using rule 209 (empty -> .)
    END             reduce using rule 209 (empty -> .)
    DCL             shift and go to state 3
    SYN             shift and go to state 29
    TYPE            shift and go to state 18
    ID              shift and go to state 2
    EXIT            shift and go to state 30
    RESULT          shift and go to state 22
    RETURN          shift and go to state 12
    IF              shift and go to state 45
    DO              shift and go to state 26
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    action                         shift and go to state 1
    result_action                  shift and go to state 15
    array_location                 shift and go to state 6
    empty                          shift and go to state 105
    return_action                  shift and go to state 7
    dereferenced_reference         shift and go to state 8
    declaration_statement          shift and go to state 9
    exit_action                    shift and go to state 37
    bracketed_action               shift and go to state 17
    builtin_call                   shift and go to state 14
    array_element                  shift and go to state 5
    newmode_statement              shift and go to state 16
    statement                      shift and go to state 106
    procedure_statement            shift and go to state 19
    do_action                      shift and go to state 21
    identifier                     shift and go to state 41
    call_action                    shift and go to state 23
    string_slice                   shift and go to state 24
    action_statement               shift and go to state 31
    statement_nullable             shift and go to state 182
    location                       shift and go to state 34
    if_action                      shift and go to state 35
    builtin_name                   shift and go to state 36
    assignment_action              shift and go to state 11
    array_slice                    shift and go to state 38
    synonym_statement              shift and go to state 39
    procedure_call                 shift and go to state 42
    string_element                 shift and go to state 44

state 107

    (2) statement_list -> statement statement_nullable .

    $end            reduce using rule 2 (statement_list -> statement statement_nullable .)


state 108

    (27) mode_definition -> identifier_list . ASSIGN mode

    ASSIGN          shift and go to state 183


state 109

    (25) newmode_list -> mode_definition .
    (26) newmode_list -> mode_definition . COMMA newmode_list

    SEMI            reduce using rule 25 (newmode_list -> mode_definition .)
    COMMA           shift and go to state 184


state 110

    (24) newmode_statement -> TYPE newmode_list . SEMI

    SEMI            shift and go to state 185


state 111

    (191) result_action -> RESULT expression .

    SEMI            reduce using rule 191 (result_action -> RESULT expression .)


state 112

    (170) action_statement_nullable -> empty .

    OD              reduce using rule 170 (action_statement_nullable -> empty .)
    FI              reduce using rule 170 (action_statement_nullable -> empty .)
    ELSE            reduce using rule 170 (action_statement_nullable -> empty .)
    ELSIF           reduce using rule 170 (action_statement_nullable -> empty .)


state 113

    (193) do_action -> DO action_statement_nullable . OD

    OD              shift and go to state 186


state 114

    (196) control_part -> while_control .

    SEMI            reduce using rule 196 (control_part -> while_control .)


state 115

    (194) control_part -> for_control . while_control
    (195) control_part -> for_control .
    (208) while_control -> . WHILE expression

    SEMI            reduce using rule 195 (control_part -> for_control .)
    WHILE           shift and go to state 117

    while_control                  shift and go to state 187

state 116

    (169) action_statement_nullable -> action_statement . action_statement_nullable
    (169) action_statement_nullable -> . action_statement action_statement_nullable
    (170) action_statement_nullable -> . empty
    (146) action_statement -> . identifier COLON action SEMI
    (147) action_statement -> . action SEMI
    (209) empty -> .
    (23) identifier -> . ID
    (148) action -> . bracketed_action
    (149) action -> . assignment_action
    (150) action -> . call_action
    (151) action -> . exit_action
    (152) action -> . result_action
    (153) action -> . return_action
    (154) bracketed_action -> . if_action
    (155) bracketed_action -> . do_action
    (156) assignment_action -> . array_location assigning_operator expression
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (187) exit_action -> . EXIT identifier
    (191) result_action -> . RESULT expression
    (188) return_action -> . RETURN result
    (162) if_action -> . IF expression then_clause else_clause FI
    (163) if_action -> . IF expression then_clause FI
    (192) do_action -> . DO control_part SEMI action_statement_nullable OD
    (193) do_action -> . DO action_statement_nullable OD
    (85) array_location -> . location
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    OD              reduce using rule 209 (empty -> .)
    FI              reduce using rule 209 (empty -> .)
    ELSE            reduce using rule 209 (empty -> .)
    ELSIF           reduce using rule 209 (empty -> .)
    ID              shift and go to state 70
    EXIT            shift and go to state 30
    RESULT          shift and go to state 22
    RETURN          shift and go to state 12
    IF              shift and go to state 45
    DO              shift and go to state 26
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    array_location                 shift and go to state 6
    call_action                    shift and go to state 23
    array_element                  shift and go to state 5
    empty                          shift and go to state 112
    return_action                  shift and go to state 7
    action_statement               shift and go to state 116
    dereferenced_reference         shift and go to state 8
    action_statement_nullable      shift and go to state 188
    assignment_action              shift and go to state 11
    array_slice                    shift and go to state 38
    location                       shift and go to state 34
    if_action                      shift and go to state 35
    builtin_call                   shift and go to state 14
    result_action                  shift and go to state 15
    builtin_name                   shift and go to state 36
    action                         shift and go to state 1
    exit_action                    shift and go to state 37
    bracketed_action               shift and go to state 17
    identifier                     shift and go to state 41
    string_slice                   shift and go to state 24
    procedure_call                 shift and go to state 42
    do_action                      shift and go to state 21
    string_element                 shift and go to state 44

state 117

    (208) while_control -> WHILE . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (89) conditional_expression -> . IF expression then_expression else_expression FI
    (90) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (97) operand1 -> . operand2
    (98) operand1 -> . operand1 operator2 operand2
    (99) operand2 -> . operand3
    (100) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (101) operand3 -> . monadic_operator operand4
    (102) operand3 -> . operand4
    (109) monadic_operator -> . MINUS
    (110) monadic_operator -> . NOT
    (103) operand4 -> . array_location
    (104) operand4 -> . referenced_location
    (105) operand4 -> . primitive_value
    (85) array_location -> . location
    (111) referenced_location -> . ARROW array_location
    (128) primitive_value -> . literal
    (129) primitive_value -> . value_array_element
    (130) primitive_value -> . value_array_slice
    (131) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (132) literal -> . integer_literal
    (133) literal -> . boolean_literal
    (134) literal -> . character_literal
    (135) literal -> . empty_literal
    (136) literal -> . character_string_literal
    (137) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (138) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (88) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (139) integer_literal -> . ICONST
    (140) boolean_literal -> . TRUE
    (141) boolean_literal -> . FALSE
    (142) character_literal -> . CCONST
    (143) character_literal -> . HAT LPAREN ICONST RPAREN
    (144) empty_literal -> . NULL
    (145) character_string_literal -> . SCONST
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT

    IF              shift and go to state 104
    MINUS           shift and go to state 75
    NOT             shift and go to state 100
    ARROW           shift and go to state 71
    LPAREN          shift and go to state 85
    ID              shift and go to state 70
    ICONST          shift and go to state 80
    TRUE            shift and go to state 96
    FALSE           shift and go to state 78
    CCONST          shift and go to state 86
    HAT             shift and go to state 74
    NULL            shift and go to state 97
    SCONST          shift and go to state 94
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    literal                        shift and go to state 68
    operand2                       shift and go to state 98
    array_location                 shift and go to state 72
    dereferenced_reference         shift and go to state 8
    parenthesized_expression       shift and go to state 76
    character_literal              shift and go to state 77
    value_array_slice              shift and go to state 79
    builtin_call                   shift and go to state 14
    array_element                  shift and go to state 5
    operand0                       shift and go to state 81
    operand1                       shift and go to state 83
    value_array_element            shift and go to state 95
    primitive_value                shift and go to state 82
    empty_literal                  shift and go to state 88
    call_action                    shift and go to state 89
    string_slice                   shift and go to state 24
    referenced_location            shift and go to state 90
    operand4                       shift and go to state 84
    expression                     shift and go to state 189
    conditional_expression         shift and go to state 92
    integer_literal                shift and go to state 93
    monadic_operator               shift and go to state 69
    location                       shift and go to state 34
    operand3                       shift and go to state 99
    builtin_name                   shift and go to state 36
    array_slice                    shift and go to state 38
    character_string_literal       shift and go to state 101
    identifier                     shift and go to state 102
    procedure_call                 shift and go to state 42
    boolean_literal                shift and go to state 103
    string_element                 shift and go to state 44

state 118

    (197) for_control -> FOR . iteration
    (198) iteration -> . step_enumeration
    (199) iteration -> . range_enumeration
    (200) step_enumeration -> . identifier ASSIGN expression step_value DOWN end_value
    (201) step_enumeration -> . identifier ASSIGN expression step_value end_value
    (202) step_enumeration -> . identifier ASSIGN expression DOWN end_value
    (203) step_enumeration -> . identifier ASSIGN expression end_value
    (206) range_enumeration -> . identifier DOWN IN discrete_mode
    (207) range_enumeration -> . identifier IN discrete_mode
    (23) identifier -> . ID

    ID              shift and go to state 53

    identifier                     shift and go to state 190
    range_enumeration              shift and go to state 191
    iteration                      shift and go to state 192
    step_enumeration               shift and go to state 193

state 119

    (192) do_action -> DO control_part . SEMI action_statement_nullable OD

    SEMI            shift and go to state 194


state 120

    (13) synonym_definition -> identifier_list . mode ASSIGN expression
    (14) synonym_definition -> identifier_list . ASSIGN expression
    (39) mode -> . mode_name
    (40) mode -> . discrete_mode
    (41) mode -> . reference_mode
    (42) mode -> . composite_mode
    (43) mode_name -> . identifier
    (44) discrete_mode -> . integer_mode
    (45) discrete_mode -> . boolean_mode
    (46) discrete_mode -> . character_mode
    (47) discrete_mode -> . discrete_range_mode
    (57) reference_mode -> . REF mode
    (58) composite_mode -> . string_mode
    (59) composite_mode -> . array_mode
    (23) identifier -> . ID
    (49) integer_mode -> . INT
    (50) boolean_mode -> . BOOL
    (51) character_mode -> . CHAR
    (52) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (53) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (60) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (62) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (48) discrete_mode_name -> . identifier

    ASSIGN          shift and go to state 195
    REF             shift and go to state 139
    ID              shift and go to state 53
    INT             shift and go to state 142
    BOOL            shift and go to state 146
    CHAR            shift and go to state 137
    CHARS           shift and go to state 141
    ARRAY           shift and go to state 145

    boolean_mode                   shift and go to state 133
    array_mode                     shift and go to state 140
    composite_mode                 shift and go to state 138
    string_mode                    shift and go to state 134
    integer_mode                   shift and go to state 135
    discrete_range_mode            shift and go to state 147
    reference_mode                 shift and go to state 136
    discrete_mode                  shift and go to state 144
    mode                           shift and go to state 196
    identifier                     shift and go to state 149
    discrete_mode_name             shift and go to state 143
    mode_name                      shift and go to state 150
    character_mode                 shift and go to state 151

state 121

    (10) synonym_statement -> SYN synonym_list . SEMI

    SEMI            shift and go to state 197


state 122

    (11) synonym_list -> synonym_definition .
    (12) synonym_list -> synonym_definition . COMMA synonym_list

    SEMI            reduce using rule 11 (synonym_list -> synonym_definition .)
    COMMA           shift and go to state 198


state 123

    (187) exit_action -> EXIT identifier .

    SEMI            reduce using rule 187 (exit_action -> EXIT identifier .)


state 124

    (173) builtin_call -> builtin_name LPAREN . parameter_list RPAREN
    (174) builtin_call -> builtin_name LPAREN . RPAREN
    (185) parameter_list -> . expression
    (186) parameter_list -> . expression COMMA parameter_list
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (89) conditional_expression -> . IF expression then_expression else_expression FI
    (90) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (97) operand1 -> . operand2
    (98) operand1 -> . operand1 operator2 operand2
    (99) operand2 -> . operand3
    (100) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (101) operand3 -> . monadic_operator operand4
    (102) operand3 -> . operand4
    (109) monadic_operator -> . MINUS
    (110) monadic_operator -> . NOT
    (103) operand4 -> . array_location
    (104) operand4 -> . referenced_location
    (105) operand4 -> . primitive_value
    (85) array_location -> . location
    (111) referenced_location -> . ARROW array_location
    (128) primitive_value -> . literal
    (129) primitive_value -> . value_array_element
    (130) primitive_value -> . value_array_slice
    (131) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (132) literal -> . integer_literal
    (133) literal -> . boolean_literal
    (134) literal -> . character_literal
    (135) literal -> . empty_literal
    (136) literal -> . character_string_literal
    (137) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (138) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (88) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (139) integer_literal -> . ICONST
    (140) boolean_literal -> . TRUE
    (141) boolean_literal -> . FALSE
    (142) character_literal -> . CCONST
    (143) character_literal -> . HAT LPAREN ICONST RPAREN
    (144) empty_literal -> . NULL
    (145) character_string_literal -> . SCONST
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT

    RPAREN          shift and go to state 199
    IF              shift and go to state 104
    MINUS           shift and go to state 75
    NOT             shift and go to state 100
    ARROW           shift and go to state 71
    LPAREN          shift and go to state 85
    ID              shift and go to state 70
    ICONST          shift and go to state 80
    TRUE            shift and go to state 96
    FALSE           shift and go to state 78
    CCONST          shift and go to state 86
    HAT             shift and go to state 74
    NULL            shift and go to state 97
    SCONST          shift and go to state 94
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    literal                        shift and go to state 68
    monadic_operator               shift and go to state 69
    array_location                 shift and go to state 72
    dereferenced_reference         shift and go to state 8
    parenthesized_expression       shift and go to state 76
    character_literal              shift and go to state 77
    parameter_list                 shift and go to state 200
    value_array_slice              shift and go to state 79
    builtin_call                   shift and go to state 14
    array_element                  shift and go to state 5
    operand0                       shift and go to state 81
    operand1                       shift and go to state 83
    operand4                       shift and go to state 84
    primitive_value                shift and go to state 82
    empty_literal                  shift and go to state 88
    call_action                    shift and go to state 89
    string_slice                   shift and go to state 24
    referenced_location            shift and go to state 90
    expression                     shift and go to state 131
    conditional_expression         shift and go to state 92
    integer_literal                shift and go to state 93
    value_array_element            shift and go to state 95
    operand2                       shift and go to state 98
    location                       shift and go to state 34
    operand3                       shift and go to state 99
    builtin_name                   shift and go to state 36
    array_slice                    shift and go to state 38
    character_string_literal       shift and go to state 101
    identifier                     shift and go to state 102
    procedure_call                 shift and go to state 42
    boolean_literal                shift and go to state 103
    string_element                 shift and go to state 44

state 125

    (76) string_element -> identifier LBRACKET . start_element RBRACKET
    (78) string_slice -> identifier LBRACKET . left_element COLON right_element RBRACKET
    (77) start_element -> . expression
    (79) left_element -> . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (89) conditional_expression -> . IF expression then_expression else_expression FI
    (90) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (97) operand1 -> . operand2
    (98) operand1 -> . operand1 operator2 operand2
    (99) operand2 -> . operand3
    (100) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (101) operand3 -> . monadic_operator operand4
    (102) operand3 -> . operand4
    (109) monadic_operator -> . MINUS
    (110) monadic_operator -> . NOT
    (103) operand4 -> . array_location
    (104) operand4 -> . referenced_location
    (105) operand4 -> . primitive_value
    (85) array_location -> . location
    (111) referenced_location -> . ARROW array_location
    (128) primitive_value -> . literal
    (129) primitive_value -> . value_array_element
    (130) primitive_value -> . value_array_slice
    (131) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (132) literal -> . integer_literal
    (133) literal -> . boolean_literal
    (134) literal -> . character_literal
    (135) literal -> . empty_literal
    (136) literal -> . character_string_literal
    (137) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (138) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (88) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (139) integer_literal -> . ICONST
    (140) boolean_literal -> . TRUE
    (141) boolean_literal -> . FALSE
    (142) character_literal -> . CCONST
    (143) character_literal -> . HAT LPAREN ICONST RPAREN
    (144) empty_literal -> . NULL
    (145) character_string_literal -> . SCONST
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT

    IF              shift and go to state 104
    MINUS           shift and go to state 75
    NOT             shift and go to state 100
    ARROW           shift and go to state 71
    LPAREN          shift and go to state 85
    ID              shift and go to state 70
    ICONST          shift and go to state 80
    TRUE            shift and go to state 96
    FALSE           shift and go to state 78
    CCONST          shift and go to state 86
    HAT             shift and go to state 74
    NULL            shift and go to state 97
    SCONST          shift and go to state 94
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    literal                        shift and go to state 68
    operand2                       shift and go to state 98
    array_location                 shift and go to state 72
    dereferenced_reference         shift and go to state 8
    parenthesized_expression       shift and go to state 76
    character_literal              shift and go to state 77
    referenced_location            shift and go to state 90
    builtin_call                   shift and go to state 14
    array_element                  shift and go to state 5
    operand0                       shift and go to state 81
    operand1                       shift and go to state 83
    value_array_element            shift and go to state 95
    primitive_value                shift and go to state 82
    empty_literal                  shift and go to state 88
    call_action                    shift and go to state 89
    string_slice                   shift and go to state 24
    value_array_slice              shift and go to state 79
    left_element                   shift and go to state 201
    operand4                       shift and go to state 84
    expression                     shift and go to state 202
    conditional_expression         shift and go to state 92
    integer_literal                shift and go to state 93
    monadic_operator               shift and go to state 69
    start_element                  shift and go to state 203
    location                       shift and go to state 34
    operand3                       shift and go to state 99
    builtin_name                   shift and go to state 36
    array_slice                    shift and go to state 38
    character_string_literal       shift and go to state 101
    identifier                     shift and go to state 102
    procedure_call                 shift and go to state 42
    boolean_literal                shift and go to state 103
    string_element                 shift and go to state 44

state 126

    (146) action_statement -> identifier COLON . action SEMI
    (148) action -> . bracketed_action
    (149) action -> . assignment_action
    (150) action -> . call_action
    (151) action -> . exit_action
    (152) action -> . result_action
    (153) action -> . return_action
    (154) bracketed_action -> . if_action
    (155) bracketed_action -> . do_action
    (156) assignment_action -> . array_location assigning_operator expression
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (187) exit_action -> . EXIT identifier
    (191) result_action -> . RESULT expression
    (188) return_action -> . RETURN result
    (162) if_action -> . IF expression then_clause else_clause FI
    (163) if_action -> . IF expression then_clause FI
    (192) do_action -> . DO control_part SEMI action_statement_nullable OD
    (193) do_action -> . DO action_statement_nullable OD
    (85) array_location -> . location
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT
    (23) identifier -> . ID
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    EXIT            shift and go to state 30
    RESULT          shift and go to state 22
    RETURN          shift and go to state 12
    IF              shift and go to state 45
    DO              shift and go to state 26
    ID              shift and go to state 204
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    builtin_call                   shift and go to state 14
    call_action                    shift and go to state 23
    array_element                  shift and go to state 5
    array_location                 shift and go to state 6
    return_action                  shift and go to state 7
    dereferenced_reference         shift and go to state 8
    assignment_action              shift and go to state 11
    array_slice                    shift and go to state 38
    location                       shift and go to state 34
    if_action                      shift and go to state 35
    action                         shift and go to state 205
    result_action                  shift and go to state 15
    builtin_name                   shift and go to state 36
    exit_action                    shift and go to state 37
    bracketed_action               shift and go to state 17
    string_slice                   shift and go to state 24
    procedure_call                 shift and go to state 42
    do_action                      shift and go to state 21
    string_element                 shift and go to state 44
    identifier                     shift and go to state 102

state 127

    (162) if_action -> IF expression . then_clause else_clause FI
    (163) if_action -> IF expression . then_clause FI
    (164) then_clause -> . THEN action_statement_list

    THEN            shift and go to state 206

    then_clause                    shift and go to state 207

state 128

    (29) procedure_definition -> PROC . LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI
    (30) procedure_definition -> PROC . LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI
    (31) procedure_definition -> PROC . LPAREN RPAREN result_spec SEMI statement_nullable END SEMI
    (32) procedure_definition -> PROC . LPAREN RPAREN SEMI statement_nullable END SEMI

    LPAREN          shift and go to state 208


state 129

    (28) procedure_statement -> ID COLON procedure_definition .

    DCL             reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    SYN             reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    TYPE            reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    ID              reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    EXIT            reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    RESULT          reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    RETURN          reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    IF              reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    DO              reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    ABS             reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    ASC             reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    NUM             reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    UPPER           reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    LOWER           reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    LENGTH          reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    READ            reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    PRINT           reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    $end            reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    END             reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)


state 130

    (184) procedure_call -> ID LPAREN RPAREN .

    ARROW           reduce using rule 184 (procedure_call -> ID LPAREN RPAREN .)
    LBRACKET        reduce using rule 184 (procedure_call -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 184 (procedure_call -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 184 (procedure_call -> ID LPAREN RPAREN .)
    MODULO          reduce using rule 184 (procedure_call -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 184 (procedure_call -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 184 (procedure_call -> ID LPAREN RPAREN .)
    CONCAT          reduce using rule 184 (procedure_call -> ID LPAREN RPAREN .)
    IN              reduce using rule 184 (procedure_call -> ID LPAREN RPAREN .)
    AND             reduce using rule 184 (procedure_call -> ID LPAREN RPAREN .)
    OR              reduce using rule 184 (procedure_call -> ID LPAREN RPAREN .)
    EQUAL           reduce using rule 184 (procedure_call -> ID LPAREN RPAREN .)
    NOTEQ           reduce using rule 184 (procedure_call -> ID LPAREN RPAREN .)
    GREATER         reduce using rule 184 (procedure_call -> ID LPAREN RPAREN .)
    GTEQUAL         reduce using rule 184 (procedure_call -> ID LPAREN RPAREN .)
    LESS            reduce using rule 184 (procedure_call -> ID LPAREN RPAREN .)
    LTEQUAL         reduce using rule 184 (procedure_call -> ID LPAREN RPAREN .)
    COLON           reduce using rule 184 (procedure_call -> ID LPAREN RPAREN .)
    WHILE           reduce using rule 184 (procedure_call -> ID LPAREN RPAREN .)
    SEMI            reduce using rule 184 (procedure_call -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 184 (procedure_call -> ID LPAREN RPAREN .)
    ASSIGN          reduce using rule 184 (procedure_call -> ID LPAREN RPAREN .)
    THEN            reduce using rule 184 (procedure_call -> ID LPAREN RPAREN .)
    FI              reduce using rule 184 (procedure_call -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 184 (procedure_call -> ID LPAREN RPAREN .)
    RBRACKET        reduce using rule 184 (procedure_call -> ID LPAREN RPAREN .)
    ELSE            reduce using rule 184 (procedure_call -> ID LPAREN RPAREN .)
    ELSIF           reduce using rule 184 (procedure_call -> ID LPAREN RPAREN .)
    DOWN            reduce using rule 184 (procedure_call -> ID LPAREN RPAREN .)
    BY              reduce using rule 184 (procedure_call -> ID LPAREN RPAREN .)
    TO              reduce using rule 184 (procedure_call -> ID LPAREN RPAREN .)


state 131

    (185) parameter_list -> expression .
    (186) parameter_list -> expression . COMMA parameter_list

    RPAREN          reduce using rule 185 (parameter_list -> expression .)
    COMMA           shift and go to state 209


state 132

    (183) procedure_call -> ID LPAREN parameter_list . RPAREN

    RPAREN          shift and go to state 210


state 133

    (45) discrete_mode -> boolean_mode .

    LPAREN          reduce using rule 45 (discrete_mode -> boolean_mode .)
    COMMA           reduce using rule 45 (discrete_mode -> boolean_mode .)
    SEMI            reduce using rule 45 (discrete_mode -> boolean_mode .)
    RBRACKET        reduce using rule 45 (discrete_mode -> boolean_mode .)
    WHILE           reduce using rule 45 (discrete_mode -> boolean_mode .)
    ASSIGN          reduce using rule 45 (discrete_mode -> boolean_mode .)
    LOC             reduce using rule 45 (discrete_mode -> boolean_mode .)
    RPAREN          reduce using rule 45 (discrete_mode -> boolean_mode .)


state 134

    (58) composite_mode -> string_mode .

    COMMA           reduce using rule 58 (composite_mode -> string_mode .)
    SEMI            reduce using rule 58 (composite_mode -> string_mode .)
    ASSIGN          reduce using rule 58 (composite_mode -> string_mode .)
    LOC             reduce using rule 58 (composite_mode -> string_mode .)
    RPAREN          reduce using rule 58 (composite_mode -> string_mode .)


state 135

    (44) discrete_mode -> integer_mode .

    LPAREN          reduce using rule 44 (discrete_mode -> integer_mode .)
    COMMA           reduce using rule 44 (discrete_mode -> integer_mode .)
    SEMI            reduce using rule 44 (discrete_mode -> integer_mode .)
    RBRACKET        reduce using rule 44 (discrete_mode -> integer_mode .)
    WHILE           reduce using rule 44 (discrete_mode -> integer_mode .)
    ASSIGN          reduce using rule 44 (discrete_mode -> integer_mode .)
    LOC             reduce using rule 44 (discrete_mode -> integer_mode .)
    RPAREN          reduce using rule 44 (discrete_mode -> integer_mode .)


state 136

    (41) mode -> reference_mode .

    ASSIGN          reduce using rule 41 (mode -> reference_mode .)
    COMMA           reduce using rule 41 (mode -> reference_mode .)
    SEMI            reduce using rule 41 (mode -> reference_mode .)
    LOC             reduce using rule 41 (mode -> reference_mode .)
    RPAREN          reduce using rule 41 (mode -> reference_mode .)


state 137

    (51) character_mode -> CHAR .

    LPAREN          reduce using rule 51 (character_mode -> CHAR .)
    LOC             reduce using rule 51 (character_mode -> CHAR .)
    RPAREN          reduce using rule 51 (character_mode -> CHAR .)
    COMMA           reduce using rule 51 (character_mode -> CHAR .)
    RBRACKET        reduce using rule 51 (character_mode -> CHAR .)
    ASSIGN          reduce using rule 51 (character_mode -> CHAR .)
    SEMI            reduce using rule 51 (character_mode -> CHAR .)
    WHILE           reduce using rule 51 (character_mode -> CHAR .)


state 138

    (42) mode -> composite_mode .

    ASSIGN          reduce using rule 42 (mode -> composite_mode .)
    COMMA           reduce using rule 42 (mode -> composite_mode .)
    SEMI            reduce using rule 42 (mode -> composite_mode .)
    LOC             reduce using rule 42 (mode -> composite_mode .)
    RPAREN          reduce using rule 42 (mode -> composite_mode .)


state 139

    (57) reference_mode -> REF . mode
    (39) mode -> . mode_name
    (40) mode -> . discrete_mode
    (41) mode -> . reference_mode
    (42) mode -> . composite_mode
    (43) mode_name -> . identifier
    (44) discrete_mode -> . integer_mode
    (45) discrete_mode -> . boolean_mode
    (46) discrete_mode -> . character_mode
    (47) discrete_mode -> . discrete_range_mode
    (57) reference_mode -> . REF mode
    (58) composite_mode -> . string_mode
    (59) composite_mode -> . array_mode
    (23) identifier -> . ID
    (49) integer_mode -> . INT
    (50) boolean_mode -> . BOOL
    (51) character_mode -> . CHAR
    (52) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (53) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (60) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (62) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (48) discrete_mode_name -> . identifier

    REF             shift and go to state 139
    ID              shift and go to state 53
    INT             shift and go to state 142
    BOOL            shift and go to state 146
    CHAR            shift and go to state 137
    CHARS           shift and go to state 141
    ARRAY           shift and go to state 145

    boolean_mode                   shift and go to state 133
    array_mode                     shift and go to state 140
    string_mode                    shift and go to state 134
    integer_mode                   shift and go to state 135
    discrete_range_mode            shift and go to state 147
    reference_mode                 shift and go to state 136
    discrete_mode                  shift and go to state 144
    composite_mode                 shift and go to state 138
    mode                           shift and go to state 211
    identifier                     shift and go to state 149
    discrete_mode_name             shift and go to state 143
    mode_name                      shift and go to state 150
    character_mode                 shift and go to state 151

state 140

    (59) composite_mode -> array_mode .

    COMMA           reduce using rule 59 (composite_mode -> array_mode .)
    SEMI            reduce using rule 59 (composite_mode -> array_mode .)
    ASSIGN          reduce using rule 59 (composite_mode -> array_mode .)
    LOC             reduce using rule 59 (composite_mode -> array_mode .)
    RPAREN          reduce using rule 59 (composite_mode -> array_mode .)


state 141

    (60) string_mode -> CHARS . LBRACKET string_length RBRACKET

    LBRACKET        shift and go to state 212


state 142

    (49) integer_mode -> INT .

    LPAREN          reduce using rule 49 (integer_mode -> INT .)
    COMMA           reduce using rule 49 (integer_mode -> INT .)
    SEMI            reduce using rule 49 (integer_mode -> INT .)
    ASSIGN          reduce using rule 49 (integer_mode -> INT .)
    LOC             reduce using rule 49 (integer_mode -> INT .)
    RPAREN          reduce using rule 49 (integer_mode -> INT .)
    WHILE           reduce using rule 49 (integer_mode -> INT .)
    RBRACKET        reduce using rule 49 (integer_mode -> INT .)


state 143

    (52) discrete_range_mode -> discrete_mode_name . LPAREN literal_range RPAREN

    LPAREN          shift and go to state 213


state 144

    (40) mode -> discrete_mode .
    (53) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    ASSIGN          reduce using rule 40 (mode -> discrete_mode .)
    COMMA           reduce using rule 40 (mode -> discrete_mode .)
    SEMI            reduce using rule 40 (mode -> discrete_mode .)
    LOC             reduce using rule 40 (mode -> discrete_mode .)
    RPAREN          reduce using rule 40 (mode -> discrete_mode .)
    LPAREN          shift and go to state 214


state 145

    (62) array_mode -> ARRAY . LBRACKET index_mode_list RBRACKET element_mode

    LBRACKET        shift and go to state 215


state 146

    (50) boolean_mode -> BOOL .

    LPAREN          reduce using rule 50 (boolean_mode -> BOOL .)
    LOC             reduce using rule 50 (boolean_mode -> BOOL .)
    RPAREN          reduce using rule 50 (boolean_mode -> BOOL .)
    WHILE           reduce using rule 50 (boolean_mode -> BOOL .)
    SEMI            reduce using rule 50 (boolean_mode -> BOOL .)
    ASSIGN          reduce using rule 50 (boolean_mode -> BOOL .)
    COMMA           reduce using rule 50 (boolean_mode -> BOOL .)
    RBRACKET        reduce using rule 50 (boolean_mode -> BOOL .)


state 147

    (47) discrete_mode -> discrete_range_mode .

    LPAREN          reduce using rule 47 (discrete_mode -> discrete_range_mode .)
    COMMA           reduce using rule 47 (discrete_mode -> discrete_range_mode .)
    SEMI            reduce using rule 47 (discrete_mode -> discrete_range_mode .)
    RBRACKET        reduce using rule 47 (discrete_mode -> discrete_range_mode .)
    WHILE           reduce using rule 47 (discrete_mode -> discrete_range_mode .)
    ASSIGN          reduce using rule 47 (discrete_mode -> discrete_range_mode .)
    LOC             reduce using rule 47 (discrete_mode -> discrete_range_mode .)
    RPAREN          reduce using rule 47 (discrete_mode -> discrete_range_mode .)


state 148

    (18) declaration -> identifier_list mode . initialization
    (19) declaration -> identifier_list mode .
    (20) initialization -> . ASSIGN expression

    COMMA           reduce using rule 19 (declaration -> identifier_list mode .)
    SEMI            reduce using rule 19 (declaration -> identifier_list mode .)
    ASSIGN          shift and go to state 216

    initialization                 shift and go to state 217

state 149

    (43) mode_name -> identifier .
    (48) discrete_mode_name -> identifier .

    ASSIGN          reduce using rule 43 (mode_name -> identifier .)
    COMMA           reduce using rule 43 (mode_name -> identifier .)
    SEMI            reduce using rule 43 (mode_name -> identifier .)
    LOC             reduce using rule 43 (mode_name -> identifier .)
    RPAREN          reduce using rule 43 (mode_name -> identifier .)
    LPAREN          reduce using rule 48 (discrete_mode_name -> identifier .)


state 150

    (39) mode -> mode_name .

    ASSIGN          reduce using rule 39 (mode -> mode_name .)
    COMMA           reduce using rule 39 (mode -> mode_name .)
    SEMI            reduce using rule 39 (mode -> mode_name .)
    LOC             reduce using rule 39 (mode -> mode_name .)
    RPAREN          reduce using rule 39 (mode -> mode_name .)


state 151

    (46) discrete_mode -> character_mode .

    LPAREN          reduce using rule 46 (discrete_mode -> character_mode .)
    COMMA           reduce using rule 46 (discrete_mode -> character_mode .)
    SEMI            reduce using rule 46 (discrete_mode -> character_mode .)
    RBRACKET        reduce using rule 46 (discrete_mode -> character_mode .)
    WHILE           reduce using rule 46 (discrete_mode -> character_mode .)
    ASSIGN          reduce using rule 46 (discrete_mode -> character_mode .)
    LOC             reduce using rule 46 (discrete_mode -> character_mode .)
    RPAREN          reduce using rule 46 (discrete_mode -> character_mode .)


state 152

    (15) declaration_statement -> DCL declaration_list SEMI .

    DCL             reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    SYN             reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    TYPE            reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    ID              reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    EXIT            reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    RESULT          reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    RETURN          reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    IF              reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    DO              reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    ABS             reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    ASC             reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    NUM             reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    UPPER           reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    LOWER           reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    LENGTH          reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    READ            reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    PRINT           reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    END             reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    $end            reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)


state 153

    (22) identifier_list -> identifier COMMA . identifier_list
    (21) identifier_list -> . identifier
    (22) identifier_list -> . identifier COMMA identifier_list
    (23) identifier -> . ID

    ID              shift and go to state 53

    identifier_list                shift and go to state 218
    identifier                     shift and go to state 51

state 154

    (17) declaration_list -> declaration COMMA . declaration_list
    (16) declaration_list -> . declaration
    (17) declaration_list -> . declaration COMMA declaration_list
    (18) declaration -> . identifier_list mode initialization
    (19) declaration -> . identifier_list mode
    (21) identifier_list -> . identifier
    (22) identifier_list -> . identifier COMMA identifier_list
    (23) identifier -> . ID

    ID              shift and go to state 53

    identifier_list                shift and go to state 49
    identifier                     shift and go to state 51
    declaration                    shift and go to state 52
    declaration_list               shift and go to state 219

state 155

    (82) expression_list -> expression .
    (83) expression_list -> expression . COMMA expression_list
    (55) lower_bound -> expression .

    RBRACKET        reduce using rule 82 (expression_list -> expression .)
    COMMA           shift and go to state 220
    COLON           reduce using rule 55 (lower_bound -> expression .)


state 156

    (81) array_element -> array_location LBRACKET expression_list . RBRACKET

    RBRACKET        shift and go to state 221


state 157

    (84) array_slice -> array_location LBRACKET lower_bound . COLON upper_bound RBRACKET

    COLON           shift and go to state 222


state 158

    (156) assignment_action -> array_location assigning_operator expression .

    SEMI            reduce using rule 156 (assignment_action -> array_location assigning_operator expression .)


state 159

    (157) assigning_operator -> closed_dyadic_operator ASSIGN .

    IF              reduce using rule 157 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    MINUS           reduce using rule 157 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    NOT             reduce using rule 157 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    ARROW           reduce using rule 157 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    LPAREN          reduce using rule 157 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    ID              reduce using rule 157 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    ICONST          reduce using rule 157 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    TRUE            reduce using rule 157 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    FALSE           reduce using rule 157 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    CCONST          reduce using rule 157 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    HAT             reduce using rule 157 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    NULL            reduce using rule 157 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    SCONST          reduce using rule 157 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    ABS             reduce using rule 157 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    ASC             reduce using rule 157 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    NUM             reduce using rule 157 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    UPPER           reduce using rule 157 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    LOWER           reduce using rule 157 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    LENGTH          reduce using rule 157 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    READ            reduce using rule 157 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    PRINT           reduce using rule 157 (assigning_operator -> closed_dyadic_operator ASSIGN .)


state 160

    (101) operand3 -> monadic_operator operand4 .

    TIMES           reduce using rule 101 (operand3 -> monadic_operator operand4 .)
    DIVIDE          reduce using rule 101 (operand3 -> monadic_operator operand4 .)
    MODULO          reduce using rule 101 (operand3 -> monadic_operator operand4 .)
    PLUS            reduce using rule 101 (operand3 -> monadic_operator operand4 .)
    MINUS           reduce using rule 101 (operand3 -> monadic_operator operand4 .)
    CONCAT          reduce using rule 101 (operand3 -> monadic_operator operand4 .)
    IN              reduce using rule 101 (operand3 -> monadic_operator operand4 .)
    AND             reduce using rule 101 (operand3 -> monadic_operator operand4 .)
    OR              reduce using rule 101 (operand3 -> monadic_operator operand4 .)
    EQUAL           reduce using rule 101 (operand3 -> monadic_operator operand4 .)
    NOTEQ           reduce using rule 101 (operand3 -> monadic_operator operand4 .)
    GREATER         reduce using rule 101 (operand3 -> monadic_operator operand4 .)
    GTEQUAL         reduce using rule 101 (operand3 -> monadic_operator operand4 .)
    LESS            reduce using rule 101 (operand3 -> monadic_operator operand4 .)
    LTEQUAL         reduce using rule 101 (operand3 -> monadic_operator operand4 .)
    COMMA           reduce using rule 101 (operand3 -> monadic_operator operand4 .)
    RPAREN          reduce using rule 101 (operand3 -> monadic_operator operand4 .)
    RBRACKET        reduce using rule 101 (operand3 -> monadic_operator operand4 .)
    COLON           reduce using rule 101 (operand3 -> monadic_operator operand4 .)
    THEN            reduce using rule 101 (operand3 -> monadic_operator operand4 .)
    WHILE           reduce using rule 101 (operand3 -> monadic_operator operand4 .)
    SEMI            reduce using rule 101 (operand3 -> monadic_operator operand4 .)
    FI              reduce using rule 101 (operand3 -> monadic_operator operand4 .)
    DOWN            reduce using rule 101 (operand3 -> monadic_operator operand4 .)
    TO              reduce using rule 101 (operand3 -> monadic_operator operand4 .)
    ELSE            reduce using rule 101 (operand3 -> monadic_operator operand4 .)
    ELSIF           reduce using rule 101 (operand3 -> monadic_operator operand4 .)
    BY              reduce using rule 101 (operand3 -> monadic_operator operand4 .)


state 161

    (111) referenced_location -> ARROW array_location .
    (75) dereferenced_reference -> array_location . ARROW
    (81) array_element -> array_location . LBRACKET expression_list RBRACKET
    (84) array_slice -> array_location . LBRACKET lower_bound COLON upper_bound RBRACKET

    TIMES           reduce using rule 111 (referenced_location -> ARROW array_location .)
    DIVIDE          reduce using rule 111 (referenced_location -> ARROW array_location .)
    MODULO          reduce using rule 111 (referenced_location -> ARROW array_location .)
    PLUS            reduce using rule 111 (referenced_location -> ARROW array_location .)
    MINUS           reduce using rule 111 (referenced_location -> ARROW array_location .)
    CONCAT          reduce using rule 111 (referenced_location -> ARROW array_location .)
    IN              reduce using rule 111 (referenced_location -> ARROW array_location .)
    AND             reduce using rule 111 (referenced_location -> ARROW array_location .)
    OR              reduce using rule 111 (referenced_location -> ARROW array_location .)
    EQUAL           reduce using rule 111 (referenced_location -> ARROW array_location .)
    NOTEQ           reduce using rule 111 (referenced_location -> ARROW array_location .)
    GREATER         reduce using rule 111 (referenced_location -> ARROW array_location .)
    GTEQUAL         reduce using rule 111 (referenced_location -> ARROW array_location .)
    LESS            reduce using rule 111 (referenced_location -> ARROW array_location .)
    LTEQUAL         reduce using rule 111 (referenced_location -> ARROW array_location .)
    RBRACKET        reduce using rule 111 (referenced_location -> ARROW array_location .)
    RPAREN          reduce using rule 111 (referenced_location -> ARROW array_location .)
    SEMI            reduce using rule 111 (referenced_location -> ARROW array_location .)
    COLON           reduce using rule 111 (referenced_location -> ARROW array_location .)
    COMMA           reduce using rule 111 (referenced_location -> ARROW array_location .)
    THEN            reduce using rule 111 (referenced_location -> ARROW array_location .)
    ELSE            reduce using rule 111 (referenced_location -> ARROW array_location .)
    ELSIF           reduce using rule 111 (referenced_location -> ARROW array_location .)
    DOWN            reduce using rule 111 (referenced_location -> ARROW array_location .)
    BY              reduce using rule 111 (referenced_location -> ARROW array_location .)
    TO              reduce using rule 111 (referenced_location -> ARROW array_location .)
    FI              reduce using rule 111 (referenced_location -> ARROW array_location .)
    WHILE           reduce using rule 111 (referenced_location -> ARROW array_location .)
    ARROW           shift and go to state 56
    LBRACKET        shift and go to state 54


state 162

    (143) character_literal -> HAT LPAREN . ICONST RPAREN

    ICONST          shift and go to state 223


state 163

    (113) operator1 -> relational_operator .

    MINUS           reduce using rule 113 (operator1 -> relational_operator .)
    NOT             reduce using rule 113 (operator1 -> relational_operator .)
    ARROW           reduce using rule 113 (operator1 -> relational_operator .)
    LPAREN          reduce using rule 113 (operator1 -> relational_operator .)
    ID              reduce using rule 113 (operator1 -> relational_operator .)
    ICONST          reduce using rule 113 (operator1 -> relational_operator .)
    TRUE            reduce using rule 113 (operator1 -> relational_operator .)
    FALSE           reduce using rule 113 (operator1 -> relational_operator .)
    CCONST          reduce using rule 113 (operator1 -> relational_operator .)
    HAT             reduce using rule 113 (operator1 -> relational_operator .)
    NULL            reduce using rule 113 (operator1 -> relational_operator .)
    SCONST          reduce using rule 113 (operator1 -> relational_operator .)
    ABS             reduce using rule 113 (operator1 -> relational_operator .)
    ASC             reduce using rule 113 (operator1 -> relational_operator .)
    NUM             reduce using rule 113 (operator1 -> relational_operator .)
    UPPER           reduce using rule 113 (operator1 -> relational_operator .)
    LOWER           reduce using rule 113 (operator1 -> relational_operator .)
    LENGTH          reduce using rule 113 (operator1 -> relational_operator .)
    READ            reduce using rule 113 (operator1 -> relational_operator .)
    PRINT           reduce using rule 113 (operator1 -> relational_operator .)


state 164

    (118) relational_operator -> GREATER .

    MINUS           reduce using rule 118 (relational_operator -> GREATER .)
    NOT             reduce using rule 118 (relational_operator -> GREATER .)
    ARROW           reduce using rule 118 (relational_operator -> GREATER .)
    LPAREN          reduce using rule 118 (relational_operator -> GREATER .)
    ID              reduce using rule 118 (relational_operator -> GREATER .)
    ICONST          reduce using rule 118 (relational_operator -> GREATER .)
    TRUE            reduce using rule 118 (relational_operator -> GREATER .)
    FALSE           reduce using rule 118 (relational_operator -> GREATER .)
    CCONST          reduce using rule 118 (relational_operator -> GREATER .)
    HAT             reduce using rule 118 (relational_operator -> GREATER .)
    NULL            reduce using rule 118 (relational_operator -> GREATER .)
    SCONST          reduce using rule 118 (relational_operator -> GREATER .)
    ABS             reduce using rule 118 (relational_operator -> GREATER .)
    ASC             reduce using rule 118 (relational_operator -> GREATER .)
    NUM             reduce using rule 118 (relational_operator -> GREATER .)
    UPPER           reduce using rule 118 (relational_operator -> GREATER .)
    LOWER           reduce using rule 118 (relational_operator -> GREATER .)
    LENGTH          reduce using rule 118 (relational_operator -> GREATER .)
    READ            reduce using rule 118 (relational_operator -> GREATER .)
    PRINT           reduce using rule 118 (relational_operator -> GREATER .)


state 165

    (127) membership_operator -> IN .

    MINUS           reduce using rule 127 (membership_operator -> IN .)
    NOT             reduce using rule 127 (membership_operator -> IN .)
    ARROW           reduce using rule 127 (membership_operator -> IN .)
    LPAREN          reduce using rule 127 (membership_operator -> IN .)
    ID              reduce using rule 127 (membership_operator -> IN .)
    ICONST          reduce using rule 127 (membership_operator -> IN .)
    TRUE            reduce using rule 127 (membership_operator -> IN .)
    FALSE           reduce using rule 127 (membership_operator -> IN .)
    CCONST          reduce using rule 127 (membership_operator -> IN .)
    HAT             reduce using rule 127 (membership_operator -> IN .)
    NULL            reduce using rule 127 (membership_operator -> IN .)
    SCONST          reduce using rule 127 (membership_operator -> IN .)
    ABS             reduce using rule 127 (membership_operator -> IN .)
    ASC             reduce using rule 127 (membership_operator -> IN .)
    NUM             reduce using rule 127 (membership_operator -> IN .)
    UPPER           reduce using rule 127 (membership_operator -> IN .)
    LOWER           reduce using rule 127 (membership_operator -> IN .)
    LENGTH          reduce using rule 127 (membership_operator -> IN .)
    READ            reduce using rule 127 (membership_operator -> IN .)
    PRINT           reduce using rule 127 (membership_operator -> IN .)


state 166

    (114) relational_operator -> AND .

    MINUS           reduce using rule 114 (relational_operator -> AND .)
    NOT             reduce using rule 114 (relational_operator -> AND .)
    ARROW           reduce using rule 114 (relational_operator -> AND .)
    LPAREN          reduce using rule 114 (relational_operator -> AND .)
    ID              reduce using rule 114 (relational_operator -> AND .)
    ICONST          reduce using rule 114 (relational_operator -> AND .)
    TRUE            reduce using rule 114 (relational_operator -> AND .)
    FALSE           reduce using rule 114 (relational_operator -> AND .)
    CCONST          reduce using rule 114 (relational_operator -> AND .)
    HAT             reduce using rule 114 (relational_operator -> AND .)
    NULL            reduce using rule 114 (relational_operator -> AND .)
    SCONST          reduce using rule 114 (relational_operator -> AND .)
    ABS             reduce using rule 114 (relational_operator -> AND .)
    ASC             reduce using rule 114 (relational_operator -> AND .)
    NUM             reduce using rule 114 (relational_operator -> AND .)
    UPPER           reduce using rule 114 (relational_operator -> AND .)
    LOWER           reduce using rule 114 (relational_operator -> AND .)
    LENGTH          reduce using rule 114 (relational_operator -> AND .)
    READ            reduce using rule 114 (relational_operator -> AND .)
    PRINT           reduce using rule 114 (relational_operator -> AND .)


state 167

    (119) relational_operator -> GTEQUAL .

    MINUS           reduce using rule 119 (relational_operator -> GTEQUAL .)
    NOT             reduce using rule 119 (relational_operator -> GTEQUAL .)
    ARROW           reduce using rule 119 (relational_operator -> GTEQUAL .)
    LPAREN          reduce using rule 119 (relational_operator -> GTEQUAL .)
    ID              reduce using rule 119 (relational_operator -> GTEQUAL .)
    ICONST          reduce using rule 119 (relational_operator -> GTEQUAL .)
    TRUE            reduce using rule 119 (relational_operator -> GTEQUAL .)
    FALSE           reduce using rule 119 (relational_operator -> GTEQUAL .)
    CCONST          reduce using rule 119 (relational_operator -> GTEQUAL .)
    HAT             reduce using rule 119 (relational_operator -> GTEQUAL .)
    NULL            reduce using rule 119 (relational_operator -> GTEQUAL .)
    SCONST          reduce using rule 119 (relational_operator -> GTEQUAL .)
    ABS             reduce using rule 119 (relational_operator -> GTEQUAL .)
    ASC             reduce using rule 119 (relational_operator -> GTEQUAL .)
    NUM             reduce using rule 119 (relational_operator -> GTEQUAL .)
    UPPER           reduce using rule 119 (relational_operator -> GTEQUAL .)
    LOWER           reduce using rule 119 (relational_operator -> GTEQUAL .)
    LENGTH          reduce using rule 119 (relational_operator -> GTEQUAL .)
    READ            reduce using rule 119 (relational_operator -> GTEQUAL .)
    PRINT           reduce using rule 119 (relational_operator -> GTEQUAL .)


state 168

    (120) relational_operator -> LESS .

    MINUS           reduce using rule 120 (relational_operator -> LESS .)
    NOT             reduce using rule 120 (relational_operator -> LESS .)
    ARROW           reduce using rule 120 (relational_operator -> LESS .)
    LPAREN          reduce using rule 120 (relational_operator -> LESS .)
    ID              reduce using rule 120 (relational_operator -> LESS .)
    ICONST          reduce using rule 120 (relational_operator -> LESS .)
    TRUE            reduce using rule 120 (relational_operator -> LESS .)
    FALSE           reduce using rule 120 (relational_operator -> LESS .)
    CCONST          reduce using rule 120 (relational_operator -> LESS .)
    HAT             reduce using rule 120 (relational_operator -> LESS .)
    NULL            reduce using rule 120 (relational_operator -> LESS .)
    SCONST          reduce using rule 120 (relational_operator -> LESS .)
    ABS             reduce using rule 120 (relational_operator -> LESS .)
    ASC             reduce using rule 120 (relational_operator -> LESS .)
    NUM             reduce using rule 120 (relational_operator -> LESS .)
    UPPER           reduce using rule 120 (relational_operator -> LESS .)
    LOWER           reduce using rule 120 (relational_operator -> LESS .)
    LENGTH          reduce using rule 120 (relational_operator -> LESS .)
    READ            reduce using rule 120 (relational_operator -> LESS .)
    PRINT           reduce using rule 120 (relational_operator -> LESS .)


state 169

    (121) relational_operator -> LTEQUAL .

    MINUS           reduce using rule 121 (relational_operator -> LTEQUAL .)
    NOT             reduce using rule 121 (relational_operator -> LTEQUAL .)
    ARROW           reduce using rule 121 (relational_operator -> LTEQUAL .)
    LPAREN          reduce using rule 121 (relational_operator -> LTEQUAL .)
    ID              reduce using rule 121 (relational_operator -> LTEQUAL .)
    ICONST          reduce using rule 121 (relational_operator -> LTEQUAL .)
    TRUE            reduce using rule 121 (relational_operator -> LTEQUAL .)
    FALSE           reduce using rule 121 (relational_operator -> LTEQUAL .)
    CCONST          reduce using rule 121 (relational_operator -> LTEQUAL .)
    HAT             reduce using rule 121 (relational_operator -> LTEQUAL .)
    NULL            reduce using rule 121 (relational_operator -> LTEQUAL .)
    SCONST          reduce using rule 121 (relational_operator -> LTEQUAL .)
    ABS             reduce using rule 121 (relational_operator -> LTEQUAL .)
    ASC             reduce using rule 121 (relational_operator -> LTEQUAL .)
    NUM             reduce using rule 121 (relational_operator -> LTEQUAL .)
    UPPER           reduce using rule 121 (relational_operator -> LTEQUAL .)
    LOWER           reduce using rule 121 (relational_operator -> LTEQUAL .)
    LENGTH          reduce using rule 121 (relational_operator -> LTEQUAL .)
    READ            reduce using rule 121 (relational_operator -> LTEQUAL .)
    PRINT           reduce using rule 121 (relational_operator -> LTEQUAL .)


state 170

    (116) relational_operator -> EQUAL .

    MINUS           reduce using rule 116 (relational_operator -> EQUAL .)
    NOT             reduce using rule 116 (relational_operator -> EQUAL .)
    ARROW           reduce using rule 116 (relational_operator -> EQUAL .)
    LPAREN          reduce using rule 116 (relational_operator -> EQUAL .)
    ID              reduce using rule 116 (relational_operator -> EQUAL .)
    ICONST          reduce using rule 116 (relational_operator -> EQUAL .)
    TRUE            reduce using rule 116 (relational_operator -> EQUAL .)
    FALSE           reduce using rule 116 (relational_operator -> EQUAL .)
    CCONST          reduce using rule 116 (relational_operator -> EQUAL .)
    HAT             reduce using rule 116 (relational_operator -> EQUAL .)
    NULL            reduce using rule 116 (relational_operator -> EQUAL .)
    SCONST          reduce using rule 116 (relational_operator -> EQUAL .)
    ABS             reduce using rule 116 (relational_operator -> EQUAL .)
    ASC             reduce using rule 116 (relational_operator -> EQUAL .)
    NUM             reduce using rule 116 (relational_operator -> EQUAL .)
    UPPER           reduce using rule 116 (relational_operator -> EQUAL .)
    LOWER           reduce using rule 116 (relational_operator -> EQUAL .)
    LENGTH          reduce using rule 116 (relational_operator -> EQUAL .)
    READ            reduce using rule 116 (relational_operator -> EQUAL .)
    PRINT           reduce using rule 116 (relational_operator -> EQUAL .)


state 171

    (115) relational_operator -> OR .

    MINUS           reduce using rule 115 (relational_operator -> OR .)
    NOT             reduce using rule 115 (relational_operator -> OR .)
    ARROW           reduce using rule 115 (relational_operator -> OR .)
    LPAREN          reduce using rule 115 (relational_operator -> OR .)
    ID              reduce using rule 115 (relational_operator -> OR .)
    ICONST          reduce using rule 115 (relational_operator -> OR .)
    TRUE            reduce using rule 115 (relational_operator -> OR .)
    FALSE           reduce using rule 115 (relational_operator -> OR .)
    CCONST          reduce using rule 115 (relational_operator -> OR .)
    HAT             reduce using rule 115 (relational_operator -> OR .)
    NULL            reduce using rule 115 (relational_operator -> OR .)
    SCONST          reduce using rule 115 (relational_operator -> OR .)
    ABS             reduce using rule 115 (relational_operator -> OR .)
    ASC             reduce using rule 115 (relational_operator -> OR .)
    NUM             reduce using rule 115 (relational_operator -> OR .)
    UPPER           reduce using rule 115 (relational_operator -> OR .)
    LOWER           reduce using rule 115 (relational_operator -> OR .)
    LENGTH          reduce using rule 115 (relational_operator -> OR .)
    READ            reduce using rule 115 (relational_operator -> OR .)
    PRINT           reduce using rule 115 (relational_operator -> OR .)


state 172

    (117) relational_operator -> NOTEQ .

    MINUS           reduce using rule 117 (relational_operator -> NOTEQ .)
    NOT             reduce using rule 117 (relational_operator -> NOTEQ .)
    ARROW           reduce using rule 117 (relational_operator -> NOTEQ .)
    LPAREN          reduce using rule 117 (relational_operator -> NOTEQ .)
    ID              reduce using rule 117 (relational_operator -> NOTEQ .)
    ICONST          reduce using rule 117 (relational_operator -> NOTEQ .)
    TRUE            reduce using rule 117 (relational_operator -> NOTEQ .)
    FALSE           reduce using rule 117 (relational_operator -> NOTEQ .)
    CCONST          reduce using rule 117 (relational_operator -> NOTEQ .)
    HAT             reduce using rule 117 (relational_operator -> NOTEQ .)
    NULL            reduce using rule 117 (relational_operator -> NOTEQ .)
    SCONST          reduce using rule 117 (relational_operator -> NOTEQ .)
    ABS             reduce using rule 117 (relational_operator -> NOTEQ .)
    ASC             reduce using rule 117 (relational_operator -> NOTEQ .)
    NUM             reduce using rule 117 (relational_operator -> NOTEQ .)
    UPPER           reduce using rule 117 (relational_operator -> NOTEQ .)
    LOWER           reduce using rule 117 (relational_operator -> NOTEQ .)
    LENGTH          reduce using rule 117 (relational_operator -> NOTEQ .)
    READ            reduce using rule 117 (relational_operator -> NOTEQ .)
    PRINT           reduce using rule 117 (relational_operator -> NOTEQ .)


state 173

    (112) operator1 -> membership_operator .

    MINUS           reduce using rule 112 (operator1 -> membership_operator .)
    NOT             reduce using rule 112 (operator1 -> membership_operator .)
    ARROW           reduce using rule 112 (operator1 -> membership_operator .)
    LPAREN          reduce using rule 112 (operator1 -> membership_operator .)
    ID              reduce using rule 112 (operator1 -> membership_operator .)
    ICONST          reduce using rule 112 (operator1 -> membership_operator .)
    TRUE            reduce using rule 112 (operator1 -> membership_operator .)
    FALSE           reduce using rule 112 (operator1 -> membership_operator .)
    CCONST          reduce using rule 112 (operator1 -> membership_operator .)
    HAT             reduce using rule 112 (operator1 -> membership_operator .)
    NULL            reduce using rule 112 (operator1 -> membership_operator .)
    SCONST          reduce using rule 112 (operator1 -> membership_operator .)
    ABS             reduce using rule 112 (operator1 -> membership_operator .)
    ASC             reduce using rule 112 (operator1 -> membership_operator .)
    NUM             reduce using rule 112 (operator1 -> membership_operator .)
    UPPER           reduce using rule 112 (operator1 -> membership_operator .)
    LOWER           reduce using rule 112 (operator1 -> membership_operator .)
    LENGTH          reduce using rule 112 (operator1 -> membership_operator .)
    READ            reduce using rule 112 (operator1 -> membership_operator .)
    PRINT           reduce using rule 112 (operator1 -> membership_operator .)


state 174

    (96) operand0 -> operand0 operator1 . operand1
    (97) operand1 -> . operand2
    (98) operand1 -> . operand1 operator2 operand2
    (99) operand2 -> . operand3
    (100) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (101) operand3 -> . monadic_operator operand4
    (102) operand3 -> . operand4
    (109) monadic_operator -> . MINUS
    (110) monadic_operator -> . NOT
    (103) operand4 -> . array_location
    (104) operand4 -> . referenced_location
    (105) operand4 -> . primitive_value
    (85) array_location -> . location
    (111) referenced_location -> . ARROW array_location
    (128) primitive_value -> . literal
    (129) primitive_value -> . value_array_element
    (130) primitive_value -> . value_array_slice
    (131) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (132) literal -> . integer_literal
    (133) literal -> . boolean_literal
    (134) literal -> . character_literal
    (135) literal -> . empty_literal
    (136) literal -> . character_string_literal
    (137) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (138) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (88) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (139) integer_literal -> . ICONST
    (140) boolean_literal -> . TRUE
    (141) boolean_literal -> . FALSE
    (142) character_literal -> . CCONST
    (143) character_literal -> . HAT LPAREN ICONST RPAREN
    (144) empty_literal -> . NULL
    (145) character_string_literal -> . SCONST
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT

    MINUS           shift and go to state 75
    NOT             shift and go to state 100
    ARROW           shift and go to state 71
    LPAREN          shift and go to state 85
    ID              shift and go to state 70
    ICONST          shift and go to state 80
    TRUE            shift and go to state 96
    FALSE           shift and go to state 78
    CCONST          shift and go to state 86
    HAT             shift and go to state 74
    NULL            shift and go to state 97
    SCONST          shift and go to state 94
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    literal                        shift and go to state 68
    primitive_value                shift and go to state 82
    empty_literal                  shift and go to state 88
    call_action                    shift and go to state 89
    array_location                 shift and go to state 72
    value_array_slice              shift and go to state 79
    character_literal              shift and go to state 77
    dereferenced_reference         shift and go to state 8
    operand4                       shift and go to state 84
    location                       shift and go to state 34
    integer_literal                shift and go to state 93
    parenthesized_expression       shift and go to state 76
    character_string_literal       shift and go to state 101
    value_array_element            shift and go to state 95
    referenced_location            shift and go to state 90
    boolean_literal                shift and go to state 103
    operand3                       shift and go to state 99
    builtin_call                   shift and go to state 14
    array_element                  shift and go to state 5
    builtin_name                   shift and go to state 36
    array_slice                    shift and go to state 38
    operand1                       shift and go to state 224
    monadic_operator               shift and go to state 69
    string_slice                   shift and go to state 24
    procedure_call                 shift and go to state 42
    operand2                       shift and go to state 98
    string_element                 shift and go to state 44
    identifier                     shift and go to state 102

state 175

    (137) value_array_element -> primitive_value LBRACKET . expression_list RBRACKET
    (138) value_array_slice -> primitive_value LBRACKET . expression COLON expression RBRACKET
    (82) expression_list -> . expression
    (83) expression_list -> . expression COMMA expression_list
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (89) conditional_expression -> . IF expression then_expression else_expression FI
    (90) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (97) operand1 -> . operand2
    (98) operand1 -> . operand1 operator2 operand2
    (99) operand2 -> . operand3
    (100) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (101) operand3 -> . monadic_operator operand4
    (102) operand3 -> . operand4
    (109) monadic_operator -> . MINUS
    (110) monadic_operator -> . NOT
    (103) operand4 -> . array_location
    (104) operand4 -> . referenced_location
    (105) operand4 -> . primitive_value
    (85) array_location -> . location
    (111) referenced_location -> . ARROW array_location
    (128) primitive_value -> . literal
    (129) primitive_value -> . value_array_element
    (130) primitive_value -> . value_array_slice
    (131) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (132) literal -> . integer_literal
    (133) literal -> . boolean_literal
    (134) literal -> . character_literal
    (135) literal -> . empty_literal
    (136) literal -> . character_string_literal
    (137) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (138) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (88) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (139) integer_literal -> . ICONST
    (140) boolean_literal -> . TRUE
    (141) boolean_literal -> . FALSE
    (142) character_literal -> . CCONST
    (143) character_literal -> . HAT LPAREN ICONST RPAREN
    (144) empty_literal -> . NULL
    (145) character_string_literal -> . SCONST
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT

    IF              shift and go to state 104
    MINUS           shift and go to state 75
    NOT             shift and go to state 100
    ARROW           shift and go to state 71
    LPAREN          shift and go to state 85
    ID              shift and go to state 70
    ICONST          shift and go to state 80
    TRUE            shift and go to state 96
    FALSE           shift and go to state 78
    CCONST          shift and go to state 86
    HAT             shift and go to state 74
    NULL            shift and go to state 97
    SCONST          shift and go to state 94
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    literal                        shift and go to state 68
    operand2                       shift and go to state 98
    array_location                 shift and go to state 72
    dereferenced_reference         shift and go to state 8
    parenthesized_expression       shift and go to state 76
    character_literal              shift and go to state 77
    value_array_slice              shift and go to state 79
    builtin_call                   shift and go to state 14
    array_element                  shift and go to state 5
    operand0                       shift and go to state 81
    operand1                       shift and go to state 83
    value_array_element            shift and go to state 95
    primitive_value                shift and go to state 82
    empty_literal                  shift and go to state 88
    call_action                    shift and go to state 89
    string_slice                   shift and go to state 24
    referenced_location            shift and go to state 90
    operand4                       shift and go to state 84
    expression                     shift and go to state 225
    conditional_expression         shift and go to state 92
    integer_literal                shift and go to state 93
    monadic_operator               shift and go to state 69
    expression_list                shift and go to state 226
    location                       shift and go to state 34
    operand3                       shift and go to state 99
    builtin_name                   shift and go to state 36
    array_slice                    shift and go to state 38
    character_string_literal       shift and go to state 101
    identifier                     shift and go to state 102
    procedure_call                 shift and go to state 42
    boolean_literal                shift and go to state 103
    string_element                 shift and go to state 44

state 176

    (123) operator2 -> string_concatenation_operator .

    MINUS           reduce using rule 123 (operator2 -> string_concatenation_operator .)
    NOT             reduce using rule 123 (operator2 -> string_concatenation_operator .)
    ARROW           reduce using rule 123 (operator2 -> string_concatenation_operator .)
    LPAREN          reduce using rule 123 (operator2 -> string_concatenation_operator .)
    ID              reduce using rule 123 (operator2 -> string_concatenation_operator .)
    ICONST          reduce using rule 123 (operator2 -> string_concatenation_operator .)
    TRUE            reduce using rule 123 (operator2 -> string_concatenation_operator .)
    FALSE           reduce using rule 123 (operator2 -> string_concatenation_operator .)
    CCONST          reduce using rule 123 (operator2 -> string_concatenation_operator .)
    HAT             reduce using rule 123 (operator2 -> string_concatenation_operator .)
    NULL            reduce using rule 123 (operator2 -> string_concatenation_operator .)
    SCONST          reduce using rule 123 (operator2 -> string_concatenation_operator .)
    ABS             reduce using rule 123 (operator2 -> string_concatenation_operator .)
    ASC             reduce using rule 123 (operator2 -> string_concatenation_operator .)
    NUM             reduce using rule 123 (operator2 -> string_concatenation_operator .)
    UPPER           reduce using rule 123 (operator2 -> string_concatenation_operator .)
    LOWER           reduce using rule 123 (operator2 -> string_concatenation_operator .)
    LENGTH          reduce using rule 123 (operator2 -> string_concatenation_operator .)
    READ            reduce using rule 123 (operator2 -> string_concatenation_operator .)
    PRINT           reduce using rule 123 (operator2 -> string_concatenation_operator .)


state 177

    (98) operand1 -> operand1 operator2 . operand2
    (99) operand2 -> . operand3
    (100) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (101) operand3 -> . monadic_operator operand4
    (102) operand3 -> . operand4
    (109) monadic_operator -> . MINUS
    (110) monadic_operator -> . NOT
    (103) operand4 -> . array_location
    (104) operand4 -> . referenced_location
    (105) operand4 -> . primitive_value
    (85) array_location -> . location
    (111) referenced_location -> . ARROW array_location
    (128) primitive_value -> . literal
    (129) primitive_value -> . value_array_element
    (130) primitive_value -> . value_array_slice
    (131) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (132) literal -> . integer_literal
    (133) literal -> . boolean_literal
    (134) literal -> . character_literal
    (135) literal -> . empty_literal
    (136) literal -> . character_string_literal
    (137) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (138) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (88) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (139) integer_literal -> . ICONST
    (140) boolean_literal -> . TRUE
    (141) boolean_literal -> . FALSE
    (142) character_literal -> . CCONST
    (143) character_literal -> . HAT LPAREN ICONST RPAREN
    (144) empty_literal -> . NULL
    (145) character_string_literal -> . SCONST
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT

    MINUS           shift and go to state 75
    NOT             shift and go to state 100
    ARROW           shift and go to state 71
    LPAREN          shift and go to state 85
    ID              shift and go to state 70
    ICONST          shift and go to state 80
    TRUE            shift and go to state 96
    FALSE           shift and go to state 78
    CCONST          shift and go to state 86
    HAT             shift and go to state 74
    NULL            shift and go to state 97
    SCONST          shift and go to state 94
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    literal                        shift and go to state 68
    primitive_value                shift and go to state 82
    empty_literal                  shift and go to state 88
    call_action                    shift and go to state 89
    array_location                 shift and go to state 72
    value_array_slice              shift and go to state 79
    character_literal              shift and go to state 77
    dereferenced_reference         shift and go to state 8
    operand4                       shift and go to state 84
    location                       shift and go to state 34
    integer_literal                shift and go to state 93
    parenthesized_expression       shift and go to state 76
    character_string_literal       shift and go to state 101
    value_array_element            shift and go to state 95
    referenced_location            shift and go to state 90
    boolean_literal                shift and go to state 103
    operand3                       shift and go to state 99
    builtin_call                   shift and go to state 14
    array_element                  shift and go to state 5
    builtin_name                   shift and go to state 36
    array_slice                    shift and go to state 38
    monadic_operator               shift and go to state 69
    string_slice                   shift and go to state 24
    procedure_call                 shift and go to state 42
    operand2                       shift and go to state 227
    string_element                 shift and go to state 44
    identifier                     shift and go to state 102

state 178

    (122) operator2 -> arithmetic_additive_operator .

    MINUS           reduce using rule 122 (operator2 -> arithmetic_additive_operator .)
    NOT             reduce using rule 122 (operator2 -> arithmetic_additive_operator .)
    ARROW           reduce using rule 122 (operator2 -> arithmetic_additive_operator .)
    LPAREN          reduce using rule 122 (operator2 -> arithmetic_additive_operator .)
    ID              reduce using rule 122 (operator2 -> arithmetic_additive_operator .)
    ICONST          reduce using rule 122 (operator2 -> arithmetic_additive_operator .)
    TRUE            reduce using rule 122 (operator2 -> arithmetic_additive_operator .)
    FALSE           reduce using rule 122 (operator2 -> arithmetic_additive_operator .)
    CCONST          reduce using rule 122 (operator2 -> arithmetic_additive_operator .)
    HAT             reduce using rule 122 (operator2 -> arithmetic_additive_operator .)
    NULL            reduce using rule 122 (operator2 -> arithmetic_additive_operator .)
    SCONST          reduce using rule 122 (operator2 -> arithmetic_additive_operator .)
    ABS             reduce using rule 122 (operator2 -> arithmetic_additive_operator .)
    ASC             reduce using rule 122 (operator2 -> arithmetic_additive_operator .)
    NUM             reduce using rule 122 (operator2 -> arithmetic_additive_operator .)
    UPPER           reduce using rule 122 (operator2 -> arithmetic_additive_operator .)
    LOWER           reduce using rule 122 (operator2 -> arithmetic_additive_operator .)
    LENGTH          reduce using rule 122 (operator2 -> arithmetic_additive_operator .)
    READ            reduce using rule 122 (operator2 -> arithmetic_additive_operator .)
    PRINT           reduce using rule 122 (operator2 -> arithmetic_additive_operator .)


state 179

    (88) parenthesized_expression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 228


state 180

    (100) operand2 -> operand2 arithmetic_multiplicative_operator . operand3
    (101) operand3 -> . monadic_operator operand4
    (102) operand3 -> . operand4
    (109) monadic_operator -> . MINUS
    (110) monadic_operator -> . NOT
    (103) operand4 -> . array_location
    (104) operand4 -> . referenced_location
    (105) operand4 -> . primitive_value
    (85) array_location -> . location
    (111) referenced_location -> . ARROW array_location
    (128) primitive_value -> . literal
    (129) primitive_value -> . value_array_element
    (130) primitive_value -> . value_array_slice
    (131) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (132) literal -> . integer_literal
    (133) literal -> . boolean_literal
    (134) literal -> . character_literal
    (135) literal -> . empty_literal
    (136) literal -> . character_string_literal
    (137) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (138) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (88) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (139) integer_literal -> . ICONST
    (140) boolean_literal -> . TRUE
    (141) boolean_literal -> . FALSE
    (142) character_literal -> . CCONST
    (143) character_literal -> . HAT LPAREN ICONST RPAREN
    (144) empty_literal -> . NULL
    (145) character_string_literal -> . SCONST
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT

    MINUS           shift and go to state 75
    NOT             shift and go to state 100
    ARROW           shift and go to state 71
    LPAREN          shift and go to state 85
    ID              shift and go to state 70
    ICONST          shift and go to state 80
    TRUE            shift and go to state 96
    FALSE           shift and go to state 78
    CCONST          shift and go to state 86
    HAT             shift and go to state 74
    NULL            shift and go to state 97
    SCONST          shift and go to state 94
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    literal                        shift and go to state 68
    primitive_value                shift and go to state 82
    empty_literal                  shift and go to state 88
    call_action                    shift and go to state 89
    array_location                 shift and go to state 72
    value_array_slice              shift and go to state 79
    character_literal              shift and go to state 77
    dereferenced_reference         shift and go to state 8
    location                       shift and go to state 34
    integer_literal                shift and go to state 93
    value_array_element            shift and go to state 95
    parenthesized_expression       shift and go to state 76
    operand4                       shift and go to state 84
    referenced_location            shift and go to state 90
    boolean_literal                shift and go to state 103
    operand3                       shift and go to state 229
    builtin_call                   shift and go to state 14
    array_element                  shift and go to state 5
    builtin_name                   shift and go to state 36
    array_slice                    shift and go to state 38
    character_string_literal       shift and go to state 101
    monadic_operator               shift and go to state 69
    string_slice                   shift and go to state 24
    procedure_call                 shift and go to state 42
    string_element                 shift and go to state 44
    identifier                     shift and go to state 102

state 181

    (89) conditional_expression -> IF expression . then_expression else_expression FI
    (90) conditional_expression -> IF expression . then_expression elsif_expression else_expression FI
    (91) then_expression -> . THEN expression

    THEN            shift and go to state 230

    then_expression                shift and go to state 231

state 182

    (3) statement_nullable -> statement statement_nullable .

    END             reduce using rule 3 (statement_nullable -> statement statement_nullable .)
    $end            reduce using rule 3 (statement_nullable -> statement statement_nullable .)


state 183

    (27) mode_definition -> identifier_list ASSIGN . mode
    (39) mode -> . mode_name
    (40) mode -> . discrete_mode
    (41) mode -> . reference_mode
    (42) mode -> . composite_mode
    (43) mode_name -> . identifier
    (44) discrete_mode -> . integer_mode
    (45) discrete_mode -> . boolean_mode
    (46) discrete_mode -> . character_mode
    (47) discrete_mode -> . discrete_range_mode
    (57) reference_mode -> . REF mode
    (58) composite_mode -> . string_mode
    (59) composite_mode -> . array_mode
    (23) identifier -> . ID
    (49) integer_mode -> . INT
    (50) boolean_mode -> . BOOL
    (51) character_mode -> . CHAR
    (52) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (53) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (60) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (62) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (48) discrete_mode_name -> . identifier

    REF             shift and go to state 139
    ID              shift and go to state 53
    INT             shift and go to state 142
    BOOL            shift and go to state 146
    CHAR            shift and go to state 137
    CHARS           shift and go to state 141
    ARRAY           shift and go to state 145

    boolean_mode                   shift and go to state 133
    array_mode                     shift and go to state 140
    string_mode                    shift and go to state 134
    integer_mode                   shift and go to state 135
    discrete_range_mode            shift and go to state 147
    reference_mode                 shift and go to state 136
    discrete_mode                  shift and go to state 144
    composite_mode                 shift and go to state 138
    mode                           shift and go to state 232
    identifier                     shift and go to state 149
    discrete_mode_name             shift and go to state 143
    mode_name                      shift and go to state 150
    character_mode                 shift and go to state 151

state 184

    (26) newmode_list -> mode_definition COMMA . newmode_list
    (25) newmode_list -> . mode_definition
    (26) newmode_list -> . mode_definition COMMA newmode_list
    (27) mode_definition -> . identifier_list ASSIGN mode
    (21) identifier_list -> . identifier
    (22) identifier_list -> . identifier COMMA identifier_list
    (23) identifier -> . ID

    ID              shift and go to state 53

    identifier_list                shift and go to state 108
    identifier                     shift and go to state 51
    mode_definition                shift and go to state 109
    newmode_list                   shift and go to state 233

state 185

    (24) newmode_statement -> TYPE newmode_list SEMI .

    DCL             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    SYN             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    TYPE            reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    ID              reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    EXIT            reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    RESULT          reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    RETURN          reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    IF              reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    DO              reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    ABS             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    ASC             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    NUM             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    UPPER           reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    LOWER           reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    LENGTH          reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    READ            reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    PRINT           reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    END             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    $end            reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)


state 186

    (193) do_action -> DO action_statement_nullable OD .

    SEMI            reduce using rule 193 (do_action -> DO action_statement_nullable OD .)


state 187

    (194) control_part -> for_control while_control .

    SEMI            reduce using rule 194 (control_part -> for_control while_control .)


state 188

    (169) action_statement_nullable -> action_statement action_statement_nullable .

    OD              reduce using rule 169 (action_statement_nullable -> action_statement action_statement_nullable .)
    FI              reduce using rule 169 (action_statement_nullable -> action_statement action_statement_nullable .)
    ELSE            reduce using rule 169 (action_statement_nullable -> action_statement action_statement_nullable .)
    ELSIF           reduce using rule 169 (action_statement_nullable -> action_statement action_statement_nullable .)


state 189

    (208) while_control -> WHILE expression .

    SEMI            reduce using rule 208 (while_control -> WHILE expression .)


state 190

    (200) step_enumeration -> identifier . ASSIGN expression step_value DOWN end_value
    (201) step_enumeration -> identifier . ASSIGN expression step_value end_value
    (202) step_enumeration -> identifier . ASSIGN expression DOWN end_value
    (203) step_enumeration -> identifier . ASSIGN expression end_value
    (206) range_enumeration -> identifier . DOWN IN discrete_mode
    (207) range_enumeration -> identifier . IN discrete_mode

    ASSIGN          shift and go to state 235
    DOWN            shift and go to state 236
    IN              shift and go to state 234


state 191

    (199) iteration -> range_enumeration .

    WHILE           reduce using rule 199 (iteration -> range_enumeration .)
    SEMI            reduce using rule 199 (iteration -> range_enumeration .)


state 192

    (197) for_control -> FOR iteration .

    WHILE           reduce using rule 197 (for_control -> FOR iteration .)
    SEMI            reduce using rule 197 (for_control -> FOR iteration .)


state 193

    (198) iteration -> step_enumeration .

    WHILE           reduce using rule 198 (iteration -> step_enumeration .)
    SEMI            reduce using rule 198 (iteration -> step_enumeration .)


state 194

    (192) do_action -> DO control_part SEMI . action_statement_nullable OD
    (169) action_statement_nullable -> . action_statement action_statement_nullable
    (170) action_statement_nullable -> . empty
    (146) action_statement -> . identifier COLON action SEMI
    (147) action_statement -> . action SEMI
    (209) empty -> .
    (23) identifier -> . ID
    (148) action -> . bracketed_action
    (149) action -> . assignment_action
    (150) action -> . call_action
    (151) action -> . exit_action
    (152) action -> . result_action
    (153) action -> . return_action
    (154) bracketed_action -> . if_action
    (155) bracketed_action -> . do_action
    (156) assignment_action -> . array_location assigning_operator expression
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (187) exit_action -> . EXIT identifier
    (191) result_action -> . RESULT expression
    (188) return_action -> . RETURN result
    (162) if_action -> . IF expression then_clause else_clause FI
    (163) if_action -> . IF expression then_clause FI
    (192) do_action -> . DO control_part SEMI action_statement_nullable OD
    (193) do_action -> . DO action_statement_nullable OD
    (85) array_location -> . location
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    OD              reduce using rule 209 (empty -> .)
    ID              shift and go to state 70
    EXIT            shift and go to state 30
    RESULT          shift and go to state 22
    RETURN          shift and go to state 12
    IF              shift and go to state 45
    DO              shift and go to state 26
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    array_location                 shift and go to state 6
    call_action                    shift and go to state 23
    array_element                  shift and go to state 5
    empty                          shift and go to state 112
    return_action                  shift and go to state 7
    action_statement               shift and go to state 116
    dereferenced_reference         shift and go to state 8
    action_statement_nullable      shift and go to state 237
    assignment_action              shift and go to state 11
    array_slice                    shift and go to state 38
    location                       shift and go to state 34
    if_action                      shift and go to state 35
    builtin_call                   shift and go to state 14
    result_action                  shift and go to state 15
    builtin_name                   shift and go to state 36
    action                         shift and go to state 1
    exit_action                    shift and go to state 37
    bracketed_action               shift and go to state 17
    string_slice                   shift and go to state 24
    procedure_call                 shift and go to state 42
    do_action                      shift and go to state 21
    string_element                 shift and go to state 44
    identifier                     shift and go to state 41

state 195

    (14) synonym_definition -> identifier_list ASSIGN . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (89) conditional_expression -> . IF expression then_expression else_expression FI
    (90) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (97) operand1 -> . operand2
    (98) operand1 -> . operand1 operator2 operand2
    (99) operand2 -> . operand3
    (100) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (101) operand3 -> . monadic_operator operand4
    (102) operand3 -> . operand4
    (109) monadic_operator -> . MINUS
    (110) monadic_operator -> . NOT
    (103) operand4 -> . array_location
    (104) operand4 -> . referenced_location
    (105) operand4 -> . primitive_value
    (85) array_location -> . location
    (111) referenced_location -> . ARROW array_location
    (128) primitive_value -> . literal
    (129) primitive_value -> . value_array_element
    (130) primitive_value -> . value_array_slice
    (131) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (132) literal -> . integer_literal
    (133) literal -> . boolean_literal
    (134) literal -> . character_literal
    (135) literal -> . empty_literal
    (136) literal -> . character_string_literal
    (137) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (138) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (88) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (139) integer_literal -> . ICONST
    (140) boolean_literal -> . TRUE
    (141) boolean_literal -> . FALSE
    (142) character_literal -> . CCONST
    (143) character_literal -> . HAT LPAREN ICONST RPAREN
    (144) empty_literal -> . NULL
    (145) character_string_literal -> . SCONST
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT

    IF              shift and go to state 104
    MINUS           shift and go to state 75
    NOT             shift and go to state 100
    ARROW           shift and go to state 71
    LPAREN          shift and go to state 85
    ID              shift and go to state 70
    ICONST          shift and go to state 80
    TRUE            shift and go to state 96
    FALSE           shift and go to state 78
    CCONST          shift and go to state 86
    HAT             shift and go to state 74
    NULL            shift and go to state 97
    SCONST          shift and go to state 94
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    literal                        shift and go to state 68
    operand2                       shift and go to state 98
    array_location                 shift and go to state 72
    dereferenced_reference         shift and go to state 8
    parenthesized_expression       shift and go to state 76
    character_literal              shift and go to state 77
    value_array_slice              shift and go to state 79
    builtin_call                   shift and go to state 14
    array_element                  shift and go to state 5
    operand0                       shift and go to state 81
    operand1                       shift and go to state 83
    operand4                       shift and go to state 84
    primitive_value                shift and go to state 82
    empty_literal                  shift and go to state 88
    call_action                    shift and go to state 89
    string_slice                   shift and go to state 24
    referenced_location            shift and go to state 90
    expression                     shift and go to state 238
    conditional_expression         shift and go to state 92
    integer_literal                shift and go to state 93
    value_array_element            shift and go to state 95
    monadic_operator               shift and go to state 69
    location                       shift and go to state 34
    operand3                       shift and go to state 99
    builtin_name                   shift and go to state 36
    array_slice                    shift and go to state 38
    character_string_literal       shift and go to state 101
    identifier                     shift and go to state 102
    procedure_call                 shift and go to state 42
    boolean_literal                shift and go to state 103
    string_element                 shift and go to state 44

state 196

    (13) synonym_definition -> identifier_list mode . ASSIGN expression

    ASSIGN          shift and go to state 239


state 197

    (10) synonym_statement -> SYN synonym_list SEMI .

    DCL             reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    SYN             reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    TYPE            reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    ID              reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    EXIT            reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    RESULT          reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    RETURN          reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    IF              reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    DO              reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    ABS             reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    ASC             reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    NUM             reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    UPPER           reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    LOWER           reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    LENGTH          reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    READ            reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    PRINT           reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    END             reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    $end            reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)


state 198

    (12) synonym_list -> synonym_definition COMMA . synonym_list
    (11) synonym_list -> . synonym_definition
    (12) synonym_list -> . synonym_definition COMMA synonym_list
    (13) synonym_definition -> . identifier_list mode ASSIGN expression
    (14) synonym_definition -> . identifier_list ASSIGN expression
    (21) identifier_list -> . identifier
    (22) identifier_list -> . identifier COMMA identifier_list
    (23) identifier -> . ID

    ID              shift and go to state 53

    identifier_list                shift and go to state 120
    synonym_list                   shift and go to state 240
    synonym_definition             shift and go to state 122
    identifier                     shift and go to state 51

state 199

    (174) builtin_call -> builtin_name LPAREN RPAREN .

    SEMI            reduce using rule 174 (builtin_call -> builtin_name LPAREN RPAREN .)
    ARROW           reduce using rule 174 (builtin_call -> builtin_name LPAREN RPAREN .)
    LBRACKET        reduce using rule 174 (builtin_call -> builtin_name LPAREN RPAREN .)
    ASSIGN          reduce using rule 174 (builtin_call -> builtin_name LPAREN RPAREN .)
    PLUS            reduce using rule 174 (builtin_call -> builtin_name LPAREN RPAREN .)
    MINUS           reduce using rule 174 (builtin_call -> builtin_name LPAREN RPAREN .)
    TIMES           reduce using rule 174 (builtin_call -> builtin_name LPAREN RPAREN .)
    DIVIDE          reduce using rule 174 (builtin_call -> builtin_name LPAREN RPAREN .)
    MODULO          reduce using rule 174 (builtin_call -> builtin_name LPAREN RPAREN .)
    CONCAT          reduce using rule 174 (builtin_call -> builtin_name LPAREN RPAREN .)
    IN              reduce using rule 174 (builtin_call -> builtin_name LPAREN RPAREN .)
    AND             reduce using rule 174 (builtin_call -> builtin_name LPAREN RPAREN .)
    OR              reduce using rule 174 (builtin_call -> builtin_name LPAREN RPAREN .)
    EQUAL           reduce using rule 174 (builtin_call -> builtin_name LPAREN RPAREN .)
    NOTEQ           reduce using rule 174 (builtin_call -> builtin_name LPAREN RPAREN .)
    GREATER         reduce using rule 174 (builtin_call -> builtin_name LPAREN RPAREN .)
    GTEQUAL         reduce using rule 174 (builtin_call -> builtin_name LPAREN RPAREN .)
    LESS            reduce using rule 174 (builtin_call -> builtin_name LPAREN RPAREN .)
    LTEQUAL         reduce using rule 174 (builtin_call -> builtin_name LPAREN RPAREN .)
    WHILE           reduce using rule 174 (builtin_call -> builtin_name LPAREN RPAREN .)
    THEN            reduce using rule 174 (builtin_call -> builtin_name LPAREN RPAREN .)
    RPAREN          reduce using rule 174 (builtin_call -> builtin_name LPAREN RPAREN .)
    COMMA           reduce using rule 174 (builtin_call -> builtin_name LPAREN RPAREN .)
    RBRACKET        reduce using rule 174 (builtin_call -> builtin_name LPAREN RPAREN .)
    COLON           reduce using rule 174 (builtin_call -> builtin_name LPAREN RPAREN .)
    ELSE            reduce using rule 174 (builtin_call -> builtin_name LPAREN RPAREN .)
    ELSIF           reduce using rule 174 (builtin_call -> builtin_name LPAREN RPAREN .)
    DOWN            reduce using rule 174 (builtin_call -> builtin_name LPAREN RPAREN .)
    BY              reduce using rule 174 (builtin_call -> builtin_name LPAREN RPAREN .)
    TO              reduce using rule 174 (builtin_call -> builtin_name LPAREN RPAREN .)
    FI              reduce using rule 174 (builtin_call -> builtin_name LPAREN RPAREN .)


state 200

    (173) builtin_call -> builtin_name LPAREN parameter_list . RPAREN

    RPAREN          shift and go to state 241


state 201

    (78) string_slice -> identifier LBRACKET left_element . COLON right_element RBRACKET

    COLON           shift and go to state 242


state 202

    (77) start_element -> expression .
    (79) left_element -> expression .

    RBRACKET        reduce using rule 77 (start_element -> expression .)
    COLON           reduce using rule 79 (left_element -> expression .)


state 203

    (76) string_element -> identifier LBRACKET start_element . RBRACKET

    RBRACKET        shift and go to state 243


state 204

    (183) procedure_call -> ID . LPAREN parameter_list RPAREN
    (184) procedure_call -> ID . LPAREN RPAREN
    (23) identifier -> ID .

    LPAREN          shift and go to state 48
    LBRACKET        reduce using rule 23 (identifier -> ID .)
    ARROW           reduce using rule 23 (identifier -> ID .)
    ASSIGN          reduce using rule 23 (identifier -> ID .)
    PLUS            reduce using rule 23 (identifier -> ID .)
    MINUS           reduce using rule 23 (identifier -> ID .)
    TIMES           reduce using rule 23 (identifier -> ID .)
    DIVIDE          reduce using rule 23 (identifier -> ID .)
    MODULO          reduce using rule 23 (identifier -> ID .)
    CONCAT          reduce using rule 23 (identifier -> ID .)


state 205

    (146) action_statement -> identifier COLON action . SEMI

    SEMI            shift and go to state 244


state 206

    (164) then_clause -> THEN . action_statement_list
    (168) action_statement_list -> . action_statement action_statement_nullable
    (146) action_statement -> . identifier COLON action SEMI
    (147) action_statement -> . action SEMI
    (23) identifier -> . ID
    (148) action -> . bracketed_action
    (149) action -> . assignment_action
    (150) action -> . call_action
    (151) action -> . exit_action
    (152) action -> . result_action
    (153) action -> . return_action
    (154) bracketed_action -> . if_action
    (155) bracketed_action -> . do_action
    (156) assignment_action -> . array_location assigning_operator expression
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (187) exit_action -> . EXIT identifier
    (191) result_action -> . RESULT expression
    (188) return_action -> . RETURN result
    (162) if_action -> . IF expression then_clause else_clause FI
    (163) if_action -> . IF expression then_clause FI
    (192) do_action -> . DO control_part SEMI action_statement_nullable OD
    (193) do_action -> . DO action_statement_nullable OD
    (85) array_location -> . location
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    ID              shift and go to state 70
    EXIT            shift and go to state 30
    RESULT          shift and go to state 22
    RETURN          shift and go to state 12
    IF              shift and go to state 45
    DO              shift and go to state 26
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    array_location                 shift and go to state 6
    call_action                    shift and go to state 23
    array_element                  shift and go to state 5
    return_action                  shift and go to state 7
    action_statement               shift and go to state 245
    dereferenced_reference         shift and go to state 8
    assignment_action              shift and go to state 11
    array_slice                    shift and go to state 38
    location                       shift and go to state 34
    if_action                      shift and go to state 35
    builtin_call                   shift and go to state 14
    result_action                  shift and go to state 15
    builtin_name                   shift and go to state 36
    action                         shift and go to state 1
    exit_action                    shift and go to state 37
    bracketed_action               shift and go to state 17
    identifier                     shift and go to state 41
    string_slice                   shift and go to state 24
    procedure_call                 shift and go to state 42
    do_action                      shift and go to state 21
    action_statement_list          shift and go to state 246
    string_element                 shift and go to state 44

state 207

    (162) if_action -> IF expression then_clause . else_clause FI
    (163) if_action -> IF expression then_clause . FI
    (165) else_clause -> . ELSE action_statement_list
    (166) else_clause -> . ELSIF expression then_clause else_clause
    (167) else_clause -> . ELSIF expression then_clause

    FI              shift and go to state 249
    ELSE            shift and go to state 247
    ELSIF           shift and go to state 248

    else_clause                    shift and go to state 250

state 208

    (29) procedure_definition -> PROC LPAREN . formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI
    (30) procedure_definition -> PROC LPAREN . formal_parameter_list RPAREN SEMI statement_nullable END SEMI
    (31) procedure_definition -> PROC LPAREN . RPAREN result_spec SEMI statement_nullable END SEMI
    (32) procedure_definition -> PROC LPAREN . RPAREN SEMI statement_nullable END SEMI
    (33) formal_parameter_list -> . formal_parameter
    (34) formal_parameter_list -> . formal_parameter COMMA formal_parameter_list
    (35) formal_parameter -> . identifier_list mode LOC
    (36) formal_parameter -> . identifier_list mode
    (21) identifier_list -> . identifier
    (22) identifier_list -> . identifier COMMA identifier_list
    (23) identifier -> . ID

    RPAREN          shift and go to state 252
    ID              shift and go to state 53

    identifier_list                shift and go to state 251
    identifier                     shift and go to state 51
    formal_parameter               shift and go to state 253
    formal_parameter_list          shift and go to state 254

state 209

    (186) parameter_list -> expression COMMA . parameter_list
    (185) parameter_list -> . expression
    (186) parameter_list -> . expression COMMA parameter_list
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (89) conditional_expression -> . IF expression then_expression else_expression FI
    (90) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (97) operand1 -> . operand2
    (98) operand1 -> . operand1 operator2 operand2
    (99) operand2 -> . operand3
    (100) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (101) operand3 -> . monadic_operator operand4
    (102) operand3 -> . operand4
    (109) monadic_operator -> . MINUS
    (110) monadic_operator -> . NOT
    (103) operand4 -> . array_location
    (104) operand4 -> . referenced_location
    (105) operand4 -> . primitive_value
    (85) array_location -> . location
    (111) referenced_location -> . ARROW array_location
    (128) primitive_value -> . literal
    (129) primitive_value -> . value_array_element
    (130) primitive_value -> . value_array_slice
    (131) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (132) literal -> . integer_literal
    (133) literal -> . boolean_literal
    (134) literal -> . character_literal
    (135) literal -> . empty_literal
    (136) literal -> . character_string_literal
    (137) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (138) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (88) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (139) integer_literal -> . ICONST
    (140) boolean_literal -> . TRUE
    (141) boolean_literal -> . FALSE
    (142) character_literal -> . CCONST
    (143) character_literal -> . HAT LPAREN ICONST RPAREN
    (144) empty_literal -> . NULL
    (145) character_string_literal -> . SCONST
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT

    IF              shift and go to state 104
    MINUS           shift and go to state 75
    NOT             shift and go to state 100
    ARROW           shift and go to state 71
    LPAREN          shift and go to state 85
    ID              shift and go to state 70
    ICONST          shift and go to state 80
    TRUE            shift and go to state 96
    FALSE           shift and go to state 78
    CCONST          shift and go to state 86
    HAT             shift and go to state 74
    NULL            shift and go to state 97
    SCONST          shift and go to state 94
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    literal                        shift and go to state 68
    operand2                       shift and go to state 98
    array_location                 shift and go to state 72
    dereferenced_reference         shift and go to state 8
    parenthesized_expression       shift and go to state 76
    character_literal              shift and go to state 77
    parameter_list                 shift and go to state 255
    value_array_slice              shift and go to state 79
    builtin_call                   shift and go to state 14
    array_element                  shift and go to state 5
    operand0                       shift and go to state 81
    operand1                       shift and go to state 83
    value_array_element            shift and go to state 95
    primitive_value                shift and go to state 82
    empty_literal                  shift and go to state 88
    call_action                    shift and go to state 89
    string_slice                   shift and go to state 24
    referenced_location            shift and go to state 90
    operand4                       shift and go to state 84
    expression                     shift and go to state 131
    conditional_expression         shift and go to state 92
    integer_literal                shift and go to state 93
    monadic_operator               shift and go to state 69
    location                       shift and go to state 34
    operand3                       shift and go to state 99
    builtin_name                   shift and go to state 36
    array_slice                    shift and go to state 38
    character_string_literal       shift and go to state 101
    identifier                     shift and go to state 102
    procedure_call                 shift and go to state 42
    boolean_literal                shift and go to state 103
    string_element                 shift and go to state 44

state 210

    (183) procedure_call -> ID LPAREN parameter_list RPAREN .

    ARROW           reduce using rule 183 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    LBRACKET        reduce using rule 183 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    TIMES           reduce using rule 183 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    DIVIDE          reduce using rule 183 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    MODULO          reduce using rule 183 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    PLUS            reduce using rule 183 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    MINUS           reduce using rule 183 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    CONCAT          reduce using rule 183 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    IN              reduce using rule 183 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    AND             reduce using rule 183 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    OR              reduce using rule 183 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    EQUAL           reduce using rule 183 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    NOTEQ           reduce using rule 183 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    GREATER         reduce using rule 183 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    GTEQUAL         reduce using rule 183 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    LESS            reduce using rule 183 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    LTEQUAL         reduce using rule 183 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    COLON           reduce using rule 183 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    WHILE           reduce using rule 183 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    SEMI            reduce using rule 183 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 183 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    ASSIGN          reduce using rule 183 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    THEN            reduce using rule 183 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    FI              reduce using rule 183 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 183 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    RBRACKET        reduce using rule 183 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    ELSE            reduce using rule 183 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    ELSIF           reduce using rule 183 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    DOWN            reduce using rule 183 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    BY              reduce using rule 183 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    TO              reduce using rule 183 (procedure_call -> ID LPAREN parameter_list RPAREN .)


state 211

    (57) reference_mode -> REF mode .

    LOC             reduce using rule 57 (reference_mode -> REF mode .)
    COMMA           reduce using rule 57 (reference_mode -> REF mode .)
    RPAREN          reduce using rule 57 (reference_mode -> REF mode .)
    ASSIGN          reduce using rule 57 (reference_mode -> REF mode .)
    SEMI            reduce using rule 57 (reference_mode -> REF mode .)


state 212

    (60) string_mode -> CHARS LBRACKET . string_length RBRACKET
    (61) string_length -> . integer_literal
    (139) integer_literal -> . ICONST

    ICONST          shift and go to state 80

    string_length                  shift and go to state 257
    integer_literal                shift and go to state 256

state 213

    (52) discrete_range_mode -> discrete_mode_name LPAREN . literal_range RPAREN
    (54) literal_range -> . lower_bound COLON upper_bound
    (55) lower_bound -> . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (89) conditional_expression -> . IF expression then_expression else_expression FI
    (90) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (97) operand1 -> . operand2
    (98) operand1 -> . operand1 operator2 operand2
    (99) operand2 -> . operand3
    (100) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (101) operand3 -> . monadic_operator operand4
    (102) operand3 -> . operand4
    (109) monadic_operator -> . MINUS
    (110) monadic_operator -> . NOT
    (103) operand4 -> . array_location
    (104) operand4 -> . referenced_location
    (105) operand4 -> . primitive_value
    (85) array_location -> . location
    (111) referenced_location -> . ARROW array_location
    (128) primitive_value -> . literal
    (129) primitive_value -> . value_array_element
    (130) primitive_value -> . value_array_slice
    (131) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (132) literal -> . integer_literal
    (133) literal -> . boolean_literal
    (134) literal -> . character_literal
    (135) literal -> . empty_literal
    (136) literal -> . character_string_literal
    (137) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (138) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (88) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (139) integer_literal -> . ICONST
    (140) boolean_literal -> . TRUE
    (141) boolean_literal -> . FALSE
    (142) character_literal -> . CCONST
    (143) character_literal -> . HAT LPAREN ICONST RPAREN
    (144) empty_literal -> . NULL
    (145) character_string_literal -> . SCONST
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT

    IF              shift and go to state 104
    MINUS           shift and go to state 75
    NOT             shift and go to state 100
    ARROW           shift and go to state 71
    LPAREN          shift and go to state 85
    ID              shift and go to state 70
    ICONST          shift and go to state 80
    TRUE            shift and go to state 96
    FALSE           shift and go to state 78
    CCONST          shift and go to state 86
    HAT             shift and go to state 74
    NULL            shift and go to state 97
    SCONST          shift and go to state 94
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    literal                        shift and go to state 68
    monadic_operator               shift and go to state 69
    array_location                 shift and go to state 72
    dereferenced_reference         shift and go to state 8
    parenthesized_expression       shift and go to state 76
    character_literal              shift and go to state 77
    value_array_slice              shift and go to state 79
    builtin_call                   shift and go to state 14
    array_element                  shift and go to state 5
    operand0                       shift and go to state 81
    operand1                       shift and go to state 83
    operand4                       shift and go to state 84
    primitive_value                shift and go to state 82
    empty_literal                  shift and go to state 88
    call_action                    shift and go to state 89
    string_slice                   shift and go to state 24
    referenced_location            shift and go to state 90
    expression                     shift and go to state 258
    conditional_expression         shift and go to state 92
    integer_literal                shift and go to state 93
    value_array_element            shift and go to state 95
    operand2                       shift and go to state 98
    location                       shift and go to state 34
    operand3                       shift and go to state 99
    lower_bound                    shift and go to state 259
    builtin_name                   shift and go to state 36
    literal_range                  shift and go to state 260
    array_slice                    shift and go to state 38
    character_string_literal       shift and go to state 101
    identifier                     shift and go to state 102
    procedure_call                 shift and go to state 42
    boolean_literal                shift and go to state 103
    string_element                 shift and go to state 44

state 214

    (53) discrete_range_mode -> discrete_mode LPAREN . literal_range RPAREN
    (54) literal_range -> . lower_bound COLON upper_bound
    (55) lower_bound -> . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (89) conditional_expression -> . IF expression then_expression else_expression FI
    (90) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (97) operand1 -> . operand2
    (98) operand1 -> . operand1 operator2 operand2
    (99) operand2 -> . operand3
    (100) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (101) operand3 -> . monadic_operator operand4
    (102) operand3 -> . operand4
    (109) monadic_operator -> . MINUS
    (110) monadic_operator -> . NOT
    (103) operand4 -> . array_location
    (104) operand4 -> . referenced_location
    (105) operand4 -> . primitive_value
    (85) array_location -> . location
    (111) referenced_location -> . ARROW array_location
    (128) primitive_value -> . literal
    (129) primitive_value -> . value_array_element
    (130) primitive_value -> . value_array_slice
    (131) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (132) literal -> . integer_literal
    (133) literal -> . boolean_literal
    (134) literal -> . character_literal
    (135) literal -> . empty_literal
    (136) literal -> . character_string_literal
    (137) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (138) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (88) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (139) integer_literal -> . ICONST
    (140) boolean_literal -> . TRUE
    (141) boolean_literal -> . FALSE
    (142) character_literal -> . CCONST
    (143) character_literal -> . HAT LPAREN ICONST RPAREN
    (144) empty_literal -> . NULL
    (145) character_string_literal -> . SCONST
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT

    IF              shift and go to state 104
    MINUS           shift and go to state 75
    NOT             shift and go to state 100
    ARROW           shift and go to state 71
    LPAREN          shift and go to state 85
    ID              shift and go to state 70
    ICONST          shift and go to state 80
    TRUE            shift and go to state 96
    FALSE           shift and go to state 78
    CCONST          shift and go to state 86
    HAT             shift and go to state 74
    NULL            shift and go to state 97
    SCONST          shift and go to state 94
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    literal                        shift and go to state 68
    monadic_operator               shift and go to state 69
    array_location                 shift and go to state 72
    dereferenced_reference         shift and go to state 8
    parenthesized_expression       shift and go to state 76
    character_literal              shift and go to state 77
    value_array_slice              shift and go to state 79
    builtin_call                   shift and go to state 14
    array_element                  shift and go to state 5
    operand0                       shift and go to state 81
    operand1                       shift and go to state 83
    operand4                       shift and go to state 84
    primitive_value                shift and go to state 82
    empty_literal                  shift and go to state 88
    call_action                    shift and go to state 89
    string_slice                   shift and go to state 24
    referenced_location            shift and go to state 90
    expression                     shift and go to state 258
    conditional_expression         shift and go to state 92
    integer_literal                shift and go to state 93
    value_array_element            shift and go to state 95
    operand2                       shift and go to state 98
    location                       shift and go to state 34
    operand3                       shift and go to state 99
    lower_bound                    shift and go to state 259
    builtin_name                   shift and go to state 36
    literal_range                  shift and go to state 261
    array_slice                    shift and go to state 38
    character_string_literal       shift and go to state 101
    identifier                     shift and go to state 102
    procedure_call                 shift and go to state 42
    boolean_literal                shift and go to state 103
    string_element                 shift and go to state 44

state 215

    (62) array_mode -> ARRAY LBRACKET . index_mode_list RBRACKET element_mode
    (63) index_mode_list -> . index_mode
    (64) index_mode_list -> . index_mode COMMA index_mode_list
    (65) index_mode -> . discrete_mode
    (66) index_mode -> . literal_range
    (44) discrete_mode -> . integer_mode
    (45) discrete_mode -> . boolean_mode
    (46) discrete_mode -> . character_mode
    (47) discrete_mode -> . discrete_range_mode
    (54) literal_range -> . lower_bound COLON upper_bound
    (49) integer_mode -> . INT
    (50) boolean_mode -> . BOOL
    (51) character_mode -> . CHAR
    (52) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (53) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (55) lower_bound -> . expression
    (48) discrete_mode_name -> . identifier
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (23) identifier -> . ID
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (89) conditional_expression -> . IF expression then_expression else_expression FI
    (90) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (97) operand1 -> . operand2
    (98) operand1 -> . operand1 operator2 operand2
    (99) operand2 -> . operand3
    (100) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (101) operand3 -> . monadic_operator operand4
    (102) operand3 -> . operand4
    (109) monadic_operator -> . MINUS
    (110) monadic_operator -> . NOT
    (103) operand4 -> . array_location
    (104) operand4 -> . referenced_location
    (105) operand4 -> . primitive_value
    (85) array_location -> . location
    (111) referenced_location -> . ARROW array_location
    (128) primitive_value -> . literal
    (129) primitive_value -> . value_array_element
    (130) primitive_value -> . value_array_slice
    (131) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (132) literal -> . integer_literal
    (133) literal -> . boolean_literal
    (134) literal -> . character_literal
    (135) literal -> . empty_literal
    (136) literal -> . character_string_literal
    (137) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (138) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (88) parenthesized_expression -> . LPAREN expression RPAREN
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (139) integer_literal -> . ICONST
    (140) boolean_literal -> . TRUE
    (141) boolean_literal -> . FALSE
    (142) character_literal -> . CCONST
    (143) character_literal -> . HAT LPAREN ICONST RPAREN
    (144) empty_literal -> . NULL
    (145) character_string_literal -> . SCONST
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT

    INT             shift and go to state 142
    BOOL            shift and go to state 146
    CHAR            shift and go to state 137
    ID              shift and go to state 70
    IF              shift and go to state 104
    MINUS           shift and go to state 75
    NOT             shift and go to state 100
    ARROW           shift and go to state 71
    LPAREN          shift and go to state 85
    ICONST          shift and go to state 80
    TRUE            shift and go to state 96
    FALSE           shift and go to state 78
    CCONST          shift and go to state 86
    HAT             shift and go to state 74
    NULL            shift and go to state 97
    SCONST          shift and go to state 94
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    literal                        shift and go to state 68
    boolean_mode                   shift and go to state 133
    monadic_operator               shift and go to state 69
    discrete_range_mode            shift and go to state 147
    operand2                       shift and go to state 98
    index_mode                     shift and go to state 262
    dereferenced_reference         shift and go to state 8
    index_mode_list                shift and go to state 263
    parenthesized_expression       shift and go to state 76
    character_literal              shift and go to state 77
    referenced_location            shift and go to state 90
    builtin_call                   shift and go to state 14
    array_element                  shift and go to state 5
    discrete_mode                  shift and go to state 264
    operand0                       shift and go to state 81
    operand1                       shift and go to state 83
    value_array_element            shift and go to state 95
    string_slice                   shift and go to state 24
    array_location                 shift and go to state 72
    character_mode                 shift and go to state 151
    primitive_value                shift and go to state 82
    empty_literal                  shift and go to state 88
    call_action                    shift and go to state 89
    integer_mode                   shift and go to state 135
    value_array_slice              shift and go to state 79
    expression                     shift and go to state 258
    conditional_expression         shift and go to state 92
    integer_literal                shift and go to state 93
    discrete_mode_name             shift and go to state 143
    operand4                       shift and go to state 84
    location                       shift and go to state 34
    operand3                       shift and go to state 99
    lower_bound                    shift and go to state 259
    builtin_name                   shift and go to state 36
    literal_range                  shift and go to state 266
    array_slice                    shift and go to state 38
    character_string_literal       shift and go to state 101
    identifier                     shift and go to state 265
    procedure_call                 shift and go to state 42
    boolean_literal                shift and go to state 103
    string_element                 shift and go to state 44

state 216

    (20) initialization -> ASSIGN . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (89) conditional_expression -> . IF expression then_expression else_expression FI
    (90) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (97) operand1 -> . operand2
    (98) operand1 -> . operand1 operator2 operand2
    (99) operand2 -> . operand3
    (100) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (101) operand3 -> . monadic_operator operand4
    (102) operand3 -> . operand4
    (109) monadic_operator -> . MINUS
    (110) monadic_operator -> . NOT
    (103) operand4 -> . array_location
    (104) operand4 -> . referenced_location
    (105) operand4 -> . primitive_value
    (85) array_location -> . location
    (111) referenced_location -> . ARROW array_location
    (128) primitive_value -> . literal
    (129) primitive_value -> . value_array_element
    (130) primitive_value -> . value_array_slice
    (131) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (132) literal -> . integer_literal
    (133) literal -> . boolean_literal
    (134) literal -> . character_literal
    (135) literal -> . empty_literal
    (136) literal -> . character_string_literal
    (137) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (138) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (88) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (139) integer_literal -> . ICONST
    (140) boolean_literal -> . TRUE
    (141) boolean_literal -> . FALSE
    (142) character_literal -> . CCONST
    (143) character_literal -> . HAT LPAREN ICONST RPAREN
    (144) empty_literal -> . NULL
    (145) character_string_literal -> . SCONST
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT

    IF              shift and go to state 104
    MINUS           shift and go to state 75
    NOT             shift and go to state 100
    ARROW           shift and go to state 71
    LPAREN          shift and go to state 85
    ID              shift and go to state 70
    ICONST          shift and go to state 80
    TRUE            shift and go to state 96
    FALSE           shift and go to state 78
    CCONST          shift and go to state 86
    HAT             shift and go to state 74
    NULL            shift and go to state 97
    SCONST          shift and go to state 94
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    literal                        shift and go to state 68
    operand2                       shift and go to state 98
    array_location                 shift and go to state 72
    dereferenced_reference         shift and go to state 8
    parenthesized_expression       shift and go to state 76
    character_literal              shift and go to state 77
    value_array_slice              shift and go to state 79
    builtin_call                   shift and go to state 14
    array_element                  shift and go to state 5
    operand0                       shift and go to state 81
    operand1                       shift and go to state 83
    value_array_element            shift and go to state 95
    primitive_value                shift and go to state 82
    empty_literal                  shift and go to state 88
    call_action                    shift and go to state 89
    string_slice                   shift and go to state 24
    referenced_location            shift and go to state 90
    operand4                       shift and go to state 84
    expression                     shift and go to state 267
    conditional_expression         shift and go to state 92
    integer_literal                shift and go to state 93
    monadic_operator               shift and go to state 69
    location                       shift and go to state 34
    operand3                       shift and go to state 99
    builtin_name                   shift and go to state 36
    array_slice                    shift and go to state 38
    character_string_literal       shift and go to state 101
    identifier                     shift and go to state 102
    procedure_call                 shift and go to state 42
    boolean_literal                shift and go to state 103
    string_element                 shift and go to state 44

state 217

    (18) declaration -> identifier_list mode initialization .

    COMMA           reduce using rule 18 (declaration -> identifier_list mode initialization .)
    SEMI            reduce using rule 18 (declaration -> identifier_list mode initialization .)


state 218

    (22) identifier_list -> identifier COMMA identifier_list .

    REF             reduce using rule 22 (identifier_list -> identifier COMMA identifier_list .)
    ID              reduce using rule 22 (identifier_list -> identifier COMMA identifier_list .)
    INT             reduce using rule 22 (identifier_list -> identifier COMMA identifier_list .)
    BOOL            reduce using rule 22 (identifier_list -> identifier COMMA identifier_list .)
    CHAR            reduce using rule 22 (identifier_list -> identifier COMMA identifier_list .)
    CHARS           reduce using rule 22 (identifier_list -> identifier COMMA identifier_list .)
    ARRAY           reduce using rule 22 (identifier_list -> identifier COMMA identifier_list .)
    ASSIGN          reduce using rule 22 (identifier_list -> identifier COMMA identifier_list .)


state 219

    (17) declaration_list -> declaration COMMA declaration_list .

    SEMI            reduce using rule 17 (declaration_list -> declaration COMMA declaration_list .)


state 220

    (83) expression_list -> expression COMMA . expression_list
    (82) expression_list -> . expression
    (83) expression_list -> . expression COMMA expression_list
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (89) conditional_expression -> . IF expression then_expression else_expression FI
    (90) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (97) operand1 -> . operand2
    (98) operand1 -> . operand1 operator2 operand2
    (99) operand2 -> . operand3
    (100) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (101) operand3 -> . monadic_operator operand4
    (102) operand3 -> . operand4
    (109) monadic_operator -> . MINUS
    (110) monadic_operator -> . NOT
    (103) operand4 -> . array_location
    (104) operand4 -> . referenced_location
    (105) operand4 -> . primitive_value
    (85) array_location -> . location
    (111) referenced_location -> . ARROW array_location
    (128) primitive_value -> . literal
    (129) primitive_value -> . value_array_element
    (130) primitive_value -> . value_array_slice
    (131) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (132) literal -> . integer_literal
    (133) literal -> . boolean_literal
    (134) literal -> . character_literal
    (135) literal -> . empty_literal
    (136) literal -> . character_string_literal
    (137) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (138) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (88) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (139) integer_literal -> . ICONST
    (140) boolean_literal -> . TRUE
    (141) boolean_literal -> . FALSE
    (142) character_literal -> . CCONST
    (143) character_literal -> . HAT LPAREN ICONST RPAREN
    (144) empty_literal -> . NULL
    (145) character_string_literal -> . SCONST
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT

    IF              shift and go to state 104
    MINUS           shift and go to state 75
    NOT             shift and go to state 100
    ARROW           shift and go to state 71
    LPAREN          shift and go to state 85
    ID              shift and go to state 70
    ICONST          shift and go to state 80
    TRUE            shift and go to state 96
    FALSE           shift and go to state 78
    CCONST          shift and go to state 86
    HAT             shift and go to state 74
    NULL            shift and go to state 97
    SCONST          shift and go to state 94
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    literal                        shift and go to state 68
    operand2                       shift and go to state 98
    array_location                 shift and go to state 72
    dereferenced_reference         shift and go to state 8
    parenthesized_expression       shift and go to state 76
    character_literal              shift and go to state 77
    value_array_slice              shift and go to state 79
    builtin_call                   shift and go to state 14
    array_element                  shift and go to state 5
    operand0                       shift and go to state 81
    operand1                       shift and go to state 83
    value_array_element            shift and go to state 95
    primitive_value                shift and go to state 82
    empty_literal                  shift and go to state 88
    call_action                    shift and go to state 89
    string_slice                   shift and go to state 24
    referenced_location            shift and go to state 90
    operand4                       shift and go to state 84
    expression                     shift and go to state 268
    conditional_expression         shift and go to state 92
    integer_literal                shift and go to state 93
    monadic_operator               shift and go to state 69
    expression_list                shift and go to state 269
    location                       shift and go to state 34
    operand3                       shift and go to state 99
    builtin_name                   shift and go to state 36
    array_slice                    shift and go to state 38
    character_string_literal       shift and go to state 101
    identifier                     shift and go to state 102
    procedure_call                 shift and go to state 42
    boolean_literal                shift and go to state 103
    string_element                 shift and go to state 44

state 221

    (81) array_element -> array_location LBRACKET expression_list RBRACKET .

    ARROW           reduce using rule 81 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    LBRACKET        reduce using rule 81 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    TIMES           reduce using rule 81 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    DIVIDE          reduce using rule 81 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    MODULO          reduce using rule 81 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    PLUS            reduce using rule 81 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    MINUS           reduce using rule 81 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    CONCAT          reduce using rule 81 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    IN              reduce using rule 81 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    AND             reduce using rule 81 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    OR              reduce using rule 81 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    EQUAL           reduce using rule 81 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    NOTEQ           reduce using rule 81 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    GREATER         reduce using rule 81 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    GTEQUAL         reduce using rule 81 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    LESS            reduce using rule 81 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    LTEQUAL         reduce using rule 81 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    SEMI            reduce using rule 81 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    THEN            reduce using rule 81 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    COMMA           reduce using rule 81 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    RPAREN          reduce using rule 81 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    RBRACKET        reduce using rule 81 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    COLON           reduce using rule 81 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    ELSE            reduce using rule 81 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    ELSIF           reduce using rule 81 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    DOWN            reduce using rule 81 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    BY              reduce using rule 81 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    TO              reduce using rule 81 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    FI              reduce using rule 81 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    WHILE           reduce using rule 81 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    ASSIGN          reduce using rule 81 (array_element -> array_location LBRACKET expression_list RBRACKET .)


state 222

    (84) array_slice -> array_location LBRACKET lower_bound COLON . upper_bound RBRACKET
    (56) upper_bound -> . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (89) conditional_expression -> . IF expression then_expression else_expression FI
    (90) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (97) operand1 -> . operand2
    (98) operand1 -> . operand1 operator2 operand2
    (99) operand2 -> . operand3
    (100) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (101) operand3 -> . monadic_operator operand4
    (102) operand3 -> . operand4
    (109) monadic_operator -> . MINUS
    (110) monadic_operator -> . NOT
    (103) operand4 -> . array_location
    (104) operand4 -> . referenced_location
    (105) operand4 -> . primitive_value
    (85) array_location -> . location
    (111) referenced_location -> . ARROW array_location
    (128) primitive_value -> . literal
    (129) primitive_value -> . value_array_element
    (130) primitive_value -> . value_array_slice
    (131) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (132) literal -> . integer_literal
    (133) literal -> . boolean_literal
    (134) literal -> . character_literal
    (135) literal -> . empty_literal
    (136) literal -> . character_string_literal
    (137) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (138) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (88) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (139) integer_literal -> . ICONST
    (140) boolean_literal -> . TRUE
    (141) boolean_literal -> . FALSE
    (142) character_literal -> . CCONST
    (143) character_literal -> . HAT LPAREN ICONST RPAREN
    (144) empty_literal -> . NULL
    (145) character_string_literal -> . SCONST
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT

    IF              shift and go to state 104
    MINUS           shift and go to state 75
    NOT             shift and go to state 100
    ARROW           shift and go to state 71
    LPAREN          shift and go to state 85
    ID              shift and go to state 70
    ICONST          shift and go to state 80
    TRUE            shift and go to state 96
    FALSE           shift and go to state 78
    CCONST          shift and go to state 86
    HAT             shift and go to state 74
    NULL            shift and go to state 97
    SCONST          shift and go to state 94
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    literal                        shift and go to state 68
    monadic_operator               shift and go to state 69
    array_location                 shift and go to state 72
    dereferenced_reference         shift and go to state 8
    parenthesized_expression       shift and go to state 76
    character_literal              shift and go to state 77
    value_array_slice              shift and go to state 79
    builtin_call                   shift and go to state 14
    array_element                  shift and go to state 5
    operand0                       shift and go to state 81
    operand1                       shift and go to state 83
    operand4                       shift and go to state 84
    primitive_value                shift and go to state 82
    empty_literal                  shift and go to state 88
    call_action                    shift and go to state 89
    string_slice                   shift and go to state 24
    referenced_location            shift and go to state 90
    expression                     shift and go to state 270
    conditional_expression         shift and go to state 92
    integer_literal                shift and go to state 93
    character_string_literal       shift and go to state 101
    value_array_element            shift and go to state 95
    operand2                       shift and go to state 98
    upper_bound                    shift and go to state 271
    location                       shift and go to state 34
    operand3                       shift and go to state 99
    builtin_name                   shift and go to state 36
    array_slice                    shift and go to state 38
    identifier                     shift and go to state 102
    procedure_call                 shift and go to state 42
    boolean_literal                shift and go to state 103
    string_element                 shift and go to state 44

state 223

    (143) character_literal -> HAT LPAREN ICONST . RPAREN

    RPAREN          shift and go to state 272


state 224

    (96) operand0 -> operand0 operator1 operand1 .
    (98) operand1 -> operand1 . operator2 operand2
    (122) operator2 -> . arithmetic_additive_operator
    (123) operator2 -> . string_concatenation_operator
    (124) arithmetic_additive_operator -> . PLUS
    (125) arithmetic_additive_operator -> . MINUS
    (126) string_concatenation_operator -> . CONCAT

    IN              reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    AND             reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    OR              reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    EQUAL           reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    NOTEQ           reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    GREATER         reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    GTEQUAL         reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    LESS            reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    LTEQUAL         reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    COMMA           reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    SEMI            reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    COLON           reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    DOWN            reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    BY              reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    TO              reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    THEN            reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    RBRACKET        reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    RPAREN          reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    WHILE           reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    FI              reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    ELSE            reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    ELSIF           reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    PLUS            shift and go to state 57
    MINUS           shift and go to state 61
    CONCAT          shift and go to state 67

    string_concatenation_operator  shift and go to state 176
    operator2                      shift and go to state 177
    arithmetic_additive_operator   shift and go to state 178

state 225

    (138) value_array_slice -> primitive_value LBRACKET expression . COLON expression RBRACKET
    (82) expression_list -> expression .
    (83) expression_list -> expression . COMMA expression_list

    COLON           shift and go to state 273
    RBRACKET        reduce using rule 82 (expression_list -> expression .)
    COMMA           shift and go to state 220


state 226

    (137) value_array_element -> primitive_value LBRACKET expression_list . RBRACKET

    RBRACKET        shift and go to state 274


state 227

    (98) operand1 -> operand1 operator2 operand2 .
    (100) operand2 -> operand2 . arithmetic_multiplicative_operator operand3
    (106) arithmetic_multiplicative_operator -> . TIMES
    (107) arithmetic_multiplicative_operator -> . DIVIDE
    (108) arithmetic_multiplicative_operator -> . MODULO

    PLUS            reduce using rule 98 (operand1 -> operand1 operator2 operand2 .)
    MINUS           reduce using rule 98 (operand1 -> operand1 operator2 operand2 .)
    CONCAT          reduce using rule 98 (operand1 -> operand1 operator2 operand2 .)
    IN              reduce using rule 98 (operand1 -> operand1 operator2 operand2 .)
    AND             reduce using rule 98 (operand1 -> operand1 operator2 operand2 .)
    OR              reduce using rule 98 (operand1 -> operand1 operator2 operand2 .)
    EQUAL           reduce using rule 98 (operand1 -> operand1 operator2 operand2 .)
    NOTEQ           reduce using rule 98 (operand1 -> operand1 operator2 operand2 .)
    GREATER         reduce using rule 98 (operand1 -> operand1 operator2 operand2 .)
    GTEQUAL         reduce using rule 98 (operand1 -> operand1 operator2 operand2 .)
    LESS            reduce using rule 98 (operand1 -> operand1 operator2 operand2 .)
    LTEQUAL         reduce using rule 98 (operand1 -> operand1 operator2 operand2 .)
    THEN            reduce using rule 98 (operand1 -> operand1 operator2 operand2 .)
    RBRACKET        reduce using rule 98 (operand1 -> operand1 operator2 operand2 .)
    COMMA           reduce using rule 98 (operand1 -> operand1 operator2 operand2 .)
    RPAREN          reduce using rule 98 (operand1 -> operand1 operator2 operand2 .)
    SEMI            reduce using rule 98 (operand1 -> operand1 operator2 operand2 .)
    DOWN            reduce using rule 98 (operand1 -> operand1 operator2 operand2 .)
    BY              reduce using rule 98 (operand1 -> operand1 operator2 operand2 .)
    TO              reduce using rule 98 (operand1 -> operand1 operator2 operand2 .)
    COLON           reduce using rule 98 (operand1 -> operand1 operator2 operand2 .)
    ELSE            reduce using rule 98 (operand1 -> operand1 operator2 operand2 .)
    ELSIF           reduce using rule 98 (operand1 -> operand1 operator2 operand2 .)
    FI              reduce using rule 98 (operand1 -> operand1 operator2 operand2 .)
    WHILE           reduce using rule 98 (operand1 -> operand1 operator2 operand2 .)
    TIMES           shift and go to state 58
    DIVIDE          shift and go to state 60
    MODULO          shift and go to state 64

    arithmetic_multiplicative_operator shift and go to state 180

state 228

    (88) parenthesized_expression -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 88 (parenthesized_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 88 (parenthesized_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 88 (parenthesized_expression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 88 (parenthesized_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 88 (parenthesized_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 88 (parenthesized_expression -> LPAREN expression RPAREN .)
    CONCAT          reduce using rule 88 (parenthesized_expression -> LPAREN expression RPAREN .)
    IN              reduce using rule 88 (parenthesized_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 88 (parenthesized_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 88 (parenthesized_expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 88 (parenthesized_expression -> LPAREN expression RPAREN .)
    NOTEQ           reduce using rule 88 (parenthesized_expression -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 88 (parenthesized_expression -> LPAREN expression RPAREN .)
    GTEQUAL         reduce using rule 88 (parenthesized_expression -> LPAREN expression RPAREN .)
    LESS            reduce using rule 88 (parenthesized_expression -> LPAREN expression RPAREN .)
    LTEQUAL         reduce using rule 88 (parenthesized_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 88 (parenthesized_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 88 (parenthesized_expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 88 (parenthesized_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 88 (parenthesized_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 88 (parenthesized_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 88 (parenthesized_expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 88 (parenthesized_expression -> LPAREN expression RPAREN .)
    ELSIF           reduce using rule 88 (parenthesized_expression -> LPAREN expression RPAREN .)
    DOWN            reduce using rule 88 (parenthesized_expression -> LPAREN expression RPAREN .)
    BY              reduce using rule 88 (parenthesized_expression -> LPAREN expression RPAREN .)
    TO              reduce using rule 88 (parenthesized_expression -> LPAREN expression RPAREN .)
    FI              reduce using rule 88 (parenthesized_expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 88 (parenthesized_expression -> LPAREN expression RPAREN .)


state 229

    (100) operand2 -> operand2 arithmetic_multiplicative_operator operand3 .

    TIMES           reduce using rule 100 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    DIVIDE          reduce using rule 100 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    MODULO          reduce using rule 100 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    PLUS            reduce using rule 100 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    MINUS           reduce using rule 100 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    CONCAT          reduce using rule 100 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    IN              reduce using rule 100 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    AND             reduce using rule 100 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    OR              reduce using rule 100 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    EQUAL           reduce using rule 100 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    NOTEQ           reduce using rule 100 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    GREATER         reduce using rule 100 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    GTEQUAL         reduce using rule 100 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LESS            reduce using rule 100 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LTEQUAL         reduce using rule 100 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    RBRACKET        reduce using rule 100 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    COMMA           reduce using rule 100 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    RPAREN          reduce using rule 100 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    THEN            reduce using rule 100 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    COLON           reduce using rule 100 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    SEMI            reduce using rule 100 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    ELSE            reduce using rule 100 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    ELSIF           reduce using rule 100 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    DOWN            reduce using rule 100 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    BY              reduce using rule 100 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    TO              reduce using rule 100 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    FI              reduce using rule 100 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    WHILE           reduce using rule 100 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)


state 230

    (91) then_expression -> THEN . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (89) conditional_expression -> . IF expression then_expression else_expression FI
    (90) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (97) operand1 -> . operand2
    (98) operand1 -> . operand1 operator2 operand2
    (99) operand2 -> . operand3
    (100) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (101) operand3 -> . monadic_operator operand4
    (102) operand3 -> . operand4
    (109) monadic_operator -> . MINUS
    (110) monadic_operator -> . NOT
    (103) operand4 -> . array_location
    (104) operand4 -> . referenced_location
    (105) operand4 -> . primitive_value
    (85) array_location -> . location
    (111) referenced_location -> . ARROW array_location
    (128) primitive_value -> . literal
    (129) primitive_value -> . value_array_element
    (130) primitive_value -> . value_array_slice
    (131) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (132) literal -> . integer_literal
    (133) literal -> . boolean_literal
    (134) literal -> . character_literal
    (135) literal -> . empty_literal
    (136) literal -> . character_string_literal
    (137) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (138) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (88) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (139) integer_literal -> . ICONST
    (140) boolean_literal -> . TRUE
    (141) boolean_literal -> . FALSE
    (142) character_literal -> . CCONST
    (143) character_literal -> . HAT LPAREN ICONST RPAREN
    (144) empty_literal -> . NULL
    (145) character_string_literal -> . SCONST
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT

    IF              shift and go to state 104
    MINUS           shift and go to state 75
    NOT             shift and go to state 100
    ARROW           shift and go to state 71
    LPAREN          shift and go to state 85
    ID              shift and go to state 70
    ICONST          shift and go to state 80
    TRUE            shift and go to state 96
    FALSE           shift and go to state 78
    CCONST          shift and go to state 86
    HAT             shift and go to state 74
    NULL            shift and go to state 97
    SCONST          shift and go to state 94
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    literal                        shift and go to state 68
    operand2                       shift and go to state 98
    array_location                 shift and go to state 72
    dereferenced_reference         shift and go to state 8
    parenthesized_expression       shift and go to state 76
    character_literal              shift and go to state 77
    value_array_slice              shift and go to state 79
    builtin_call                   shift and go to state 14
    array_element                  shift and go to state 5
    operand0                       shift and go to state 81
    operand1                       shift and go to state 83
    value_array_element            shift and go to state 95
    primitive_value                shift and go to state 82
    empty_literal                  shift and go to state 88
    call_action                    shift and go to state 89
    string_slice                   shift and go to state 24
    referenced_location            shift and go to state 90
    operand4                       shift and go to state 84
    expression                     shift and go to state 275
    conditional_expression         shift and go to state 92
    integer_literal                shift and go to state 93
    monadic_operator               shift and go to state 69
    location                       shift and go to state 34
    operand3                       shift and go to state 99
    builtin_name                   shift and go to state 36
    array_slice                    shift and go to state 38
    character_string_literal       shift and go to state 101
    identifier                     shift and go to state 102
    procedure_call                 shift and go to state 42
    boolean_literal                shift and go to state 103
    string_element                 shift and go to state 44

state 231

    (89) conditional_expression -> IF expression then_expression . else_expression FI
    (90) conditional_expression -> IF expression then_expression . elsif_expression else_expression FI
    (92) else_expression -> . ELSE expression
    (93) elsif_expression -> . ELSIF expression then_expression
    (94) elsif_expression -> . elsif_expression ELSIF expression then_expression

    ELSE            shift and go to state 276
    ELSIF           shift and go to state 278

    elsif_expression               shift and go to state 279
    else_expression                shift and go to state 277

state 232

    (27) mode_definition -> identifier_list ASSIGN mode .

    COMMA           reduce using rule 27 (mode_definition -> identifier_list ASSIGN mode .)
    SEMI            reduce using rule 27 (mode_definition -> identifier_list ASSIGN mode .)


state 233

    (26) newmode_list -> mode_definition COMMA newmode_list .

    SEMI            reduce using rule 26 (newmode_list -> mode_definition COMMA newmode_list .)


state 234

    (207) range_enumeration -> identifier IN . discrete_mode
    (44) discrete_mode -> . integer_mode
    (45) discrete_mode -> . boolean_mode
    (46) discrete_mode -> . character_mode
    (47) discrete_mode -> . discrete_range_mode
    (49) integer_mode -> . INT
    (50) boolean_mode -> . BOOL
    (51) character_mode -> . CHAR
    (52) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (53) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (48) discrete_mode_name -> . identifier
    (23) identifier -> . ID

    INT             shift and go to state 142
    BOOL            shift and go to state 146
    CHAR            shift and go to state 137
    ID              shift and go to state 53

    boolean_mode                   shift and go to state 133
    identifier                     shift and go to state 280
    discrete_mode_name             shift and go to state 143
    integer_mode                   shift and go to state 135
    discrete_range_mode            shift and go to state 147
    discrete_mode                  shift and go to state 281
    character_mode                 shift and go to state 151

state 235

    (200) step_enumeration -> identifier ASSIGN . expression step_value DOWN end_value
    (201) step_enumeration -> identifier ASSIGN . expression step_value end_value
    (202) step_enumeration -> identifier ASSIGN . expression DOWN end_value
    (203) step_enumeration -> identifier ASSIGN . expression end_value
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (89) conditional_expression -> . IF expression then_expression else_expression FI
    (90) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (97) operand1 -> . operand2
    (98) operand1 -> . operand1 operator2 operand2
    (99) operand2 -> . operand3
    (100) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (101) operand3 -> . monadic_operator operand4
    (102) operand3 -> . operand4
    (109) monadic_operator -> . MINUS
    (110) monadic_operator -> . NOT
    (103) operand4 -> . array_location
    (104) operand4 -> . referenced_location
    (105) operand4 -> . primitive_value
    (85) array_location -> . location
    (111) referenced_location -> . ARROW array_location
    (128) primitive_value -> . literal
    (129) primitive_value -> . value_array_element
    (130) primitive_value -> . value_array_slice
    (131) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (132) literal -> . integer_literal
    (133) literal -> . boolean_literal
    (134) literal -> . character_literal
    (135) literal -> . empty_literal
    (136) literal -> . character_string_literal
    (137) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (138) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (88) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (139) integer_literal -> . ICONST
    (140) boolean_literal -> . TRUE
    (141) boolean_literal -> . FALSE
    (142) character_literal -> . CCONST
    (143) character_literal -> . HAT LPAREN ICONST RPAREN
    (144) empty_literal -> . NULL
    (145) character_string_literal -> . SCONST
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT

    IF              shift and go to state 104
    MINUS           shift and go to state 75
    NOT             shift and go to state 100
    ARROW           shift and go to state 71
    LPAREN          shift and go to state 85
    ID              shift and go to state 70
    ICONST          shift and go to state 80
    TRUE            shift and go to state 96
    FALSE           shift and go to state 78
    CCONST          shift and go to state 86
    HAT             shift and go to state 74
    NULL            shift and go to state 97
    SCONST          shift and go to state 94
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    literal                        shift and go to state 68
    operand2                       shift and go to state 98
    array_location                 shift and go to state 72
    dereferenced_reference         shift and go to state 8
    character_string_literal       shift and go to state 101
    parenthesized_expression       shift and go to state 76
    character_literal              shift and go to state 77
    value_array_slice              shift and go to state 79
    builtin_call                   shift and go to state 14
    array_element                  shift and go to state 5
    operand0                       shift and go to state 81
    operand1                       shift and go to state 83
    value_array_element            shift and go to state 95
    primitive_value                shift and go to state 82
    empty_literal                  shift and go to state 88
    call_action                    shift and go to state 89
    string_slice                   shift and go to state 24
    referenced_location            shift and go to state 90
    operand4                       shift and go to state 84
    expression                     shift and go to state 282
    conditional_expression         shift and go to state 92
    integer_literal                shift and go to state 93
    monadic_operator               shift and go to state 69
    location                       shift and go to state 34
    operand3                       shift and go to state 99
    builtin_name                   shift and go to state 36
    array_slice                    shift and go to state 38
    identifier                     shift and go to state 102
    procedure_call                 shift and go to state 42
    boolean_literal                shift and go to state 103
    string_element                 shift and go to state 44

state 236

    (206) range_enumeration -> identifier DOWN . IN discrete_mode

    IN              shift and go to state 283


state 237

    (192) do_action -> DO control_part SEMI action_statement_nullable . OD

    OD              shift and go to state 284


state 238

    (14) synonym_definition -> identifier_list ASSIGN expression .

    COMMA           reduce using rule 14 (synonym_definition -> identifier_list ASSIGN expression .)
    SEMI            reduce using rule 14 (synonym_definition -> identifier_list ASSIGN expression .)


state 239

    (13) synonym_definition -> identifier_list mode ASSIGN . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (89) conditional_expression -> . IF expression then_expression else_expression FI
    (90) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (97) operand1 -> . operand2
    (98) operand1 -> . operand1 operator2 operand2
    (99) operand2 -> . operand3
    (100) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (101) operand3 -> . monadic_operator operand4
    (102) operand3 -> . operand4
    (109) monadic_operator -> . MINUS
    (110) monadic_operator -> . NOT
    (103) operand4 -> . array_location
    (104) operand4 -> . referenced_location
    (105) operand4 -> . primitive_value
    (85) array_location -> . location
    (111) referenced_location -> . ARROW array_location
    (128) primitive_value -> . literal
    (129) primitive_value -> . value_array_element
    (130) primitive_value -> . value_array_slice
    (131) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (132) literal -> . integer_literal
    (133) literal -> . boolean_literal
    (134) literal -> . character_literal
    (135) literal -> . empty_literal
    (136) literal -> . character_string_literal
    (137) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (138) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (88) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (139) integer_literal -> . ICONST
    (140) boolean_literal -> . TRUE
    (141) boolean_literal -> . FALSE
    (142) character_literal -> . CCONST
    (143) character_literal -> . HAT LPAREN ICONST RPAREN
    (144) empty_literal -> . NULL
    (145) character_string_literal -> . SCONST
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT

    IF              shift and go to state 104
    MINUS           shift and go to state 75
    NOT             shift and go to state 100
    ARROW           shift and go to state 71
    LPAREN          shift and go to state 85
    ID              shift and go to state 70
    ICONST          shift and go to state 80
    TRUE            shift and go to state 96
    FALSE           shift and go to state 78
    CCONST          shift and go to state 86
    HAT             shift and go to state 74
    NULL            shift and go to state 97
    SCONST          shift and go to state 94
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    literal                        shift and go to state 68
    monadic_operator               shift and go to state 69
    array_location                 shift and go to state 72
    dereferenced_reference         shift and go to state 8
    parenthesized_expression       shift and go to state 76
    character_literal              shift and go to state 77
    value_array_slice              shift and go to state 79
    builtin_call                   shift and go to state 14
    array_element                  shift and go to state 5
    operand0                       shift and go to state 81
    operand1                       shift and go to state 83
    operand4                       shift and go to state 84
    primitive_value                shift and go to state 82
    empty_literal                  shift and go to state 88
    call_action                    shift and go to state 89
    string_slice                   shift and go to state 24
    referenced_location            shift and go to state 90
    expression                     shift and go to state 285
    conditional_expression         shift and go to state 92
    integer_literal                shift and go to state 93
    value_array_element            shift and go to state 95
    operand2                       shift and go to state 98
    boolean_literal                shift and go to state 103
    location                       shift and go to state 34
    operand3                       shift and go to state 99
    builtin_name                   shift and go to state 36
    array_slice                    shift and go to state 38
    character_string_literal       shift and go to state 101
    identifier                     shift and go to state 102
    procedure_call                 shift and go to state 42
    string_element                 shift and go to state 44

state 240

    (12) synonym_list -> synonym_definition COMMA synonym_list .

    SEMI            reduce using rule 12 (synonym_list -> synonym_definition COMMA synonym_list .)


state 241

    (173) builtin_call -> builtin_name LPAREN parameter_list RPAREN .

    SEMI            reduce using rule 173 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    ARROW           reduce using rule 173 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    LBRACKET        reduce using rule 173 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    ASSIGN          reduce using rule 173 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    PLUS            reduce using rule 173 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    MINUS           reduce using rule 173 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    TIMES           reduce using rule 173 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    DIVIDE          reduce using rule 173 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    MODULO          reduce using rule 173 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    CONCAT          reduce using rule 173 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    IN              reduce using rule 173 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    AND             reduce using rule 173 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    OR              reduce using rule 173 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    EQUAL           reduce using rule 173 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    NOTEQ           reduce using rule 173 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    GREATER         reduce using rule 173 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    GTEQUAL         reduce using rule 173 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    LESS            reduce using rule 173 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    LTEQUAL         reduce using rule 173 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    WHILE           reduce using rule 173 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    THEN            reduce using rule 173 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 173 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 173 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    RBRACKET        reduce using rule 173 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    COLON           reduce using rule 173 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    ELSE            reduce using rule 173 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    ELSIF           reduce using rule 173 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    DOWN            reduce using rule 173 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    BY              reduce using rule 173 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    TO              reduce using rule 173 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    FI              reduce using rule 173 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)


state 242

    (78) string_slice -> identifier LBRACKET left_element COLON . right_element RBRACKET
    (80) right_element -> . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (89) conditional_expression -> . IF expression then_expression else_expression FI
    (90) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (97) operand1 -> . operand2
    (98) operand1 -> . operand1 operator2 operand2
    (99) operand2 -> . operand3
    (100) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (101) operand3 -> . monadic_operator operand4
    (102) operand3 -> . operand4
    (109) monadic_operator -> . MINUS
    (110) monadic_operator -> . NOT
    (103) operand4 -> . array_location
    (104) operand4 -> . referenced_location
    (105) operand4 -> . primitive_value
    (85) array_location -> . location
    (111) referenced_location -> . ARROW array_location
    (128) primitive_value -> . literal
    (129) primitive_value -> . value_array_element
    (130) primitive_value -> . value_array_slice
    (131) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (132) literal -> . integer_literal
    (133) literal -> . boolean_literal
    (134) literal -> . character_literal
    (135) literal -> . empty_literal
    (136) literal -> . character_string_literal
    (137) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (138) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (88) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (139) integer_literal -> . ICONST
    (140) boolean_literal -> . TRUE
    (141) boolean_literal -> . FALSE
    (142) character_literal -> . CCONST
    (143) character_literal -> . HAT LPAREN ICONST RPAREN
    (144) empty_literal -> . NULL
    (145) character_string_literal -> . SCONST
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT

    IF              shift and go to state 104
    MINUS           shift and go to state 75
    NOT             shift and go to state 100
    ARROW           shift and go to state 71
    LPAREN          shift and go to state 85
    ID              shift and go to state 70
    ICONST          shift and go to state 80
    TRUE            shift and go to state 96
    FALSE           shift and go to state 78
    CCONST          shift and go to state 86
    HAT             shift and go to state 74
    NULL            shift and go to state 97
    SCONST          shift and go to state 94
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    literal                        shift and go to state 68
    operand2                       shift and go to state 98
    array_location                 shift and go to state 72
    dereferenced_reference         shift and go to state 8
    parenthesized_expression       shift and go to state 76
    character_literal              shift and go to state 77
    value_array_slice              shift and go to state 79
    builtin_call                   shift and go to state 14
    array_element                  shift and go to state 5
    operand0                       shift and go to state 81
    operand1                       shift and go to state 83
    value_array_element            shift and go to state 95
    right_element                  shift and go to state 286
    primitive_value                shift and go to state 82
    empty_literal                  shift and go to state 88
    call_action                    shift and go to state 89
    string_slice                   shift and go to state 24
    referenced_location            shift and go to state 90
    operand4                       shift and go to state 84
    expression                     shift and go to state 287
    conditional_expression         shift and go to state 92
    integer_literal                shift and go to state 93
    monadic_operator               shift and go to state 69
    location                       shift and go to state 34
    operand3                       shift and go to state 99
    builtin_name                   shift and go to state 36
    array_slice                    shift and go to state 38
    character_string_literal       shift and go to state 101
    identifier                     shift and go to state 102
    procedure_call                 shift and go to state 42
    boolean_literal                shift and go to state 103
    string_element                 shift and go to state 44

state 243

    (76) string_element -> identifier LBRACKET start_element RBRACKET .

    ARROW           reduce using rule 76 (string_element -> identifier LBRACKET start_element RBRACKET .)
    LBRACKET        reduce using rule 76 (string_element -> identifier LBRACKET start_element RBRACKET .)
    TIMES           reduce using rule 76 (string_element -> identifier LBRACKET start_element RBRACKET .)
    DIVIDE          reduce using rule 76 (string_element -> identifier LBRACKET start_element RBRACKET .)
    MODULO          reduce using rule 76 (string_element -> identifier LBRACKET start_element RBRACKET .)
    PLUS            reduce using rule 76 (string_element -> identifier LBRACKET start_element RBRACKET .)
    MINUS           reduce using rule 76 (string_element -> identifier LBRACKET start_element RBRACKET .)
    CONCAT          reduce using rule 76 (string_element -> identifier LBRACKET start_element RBRACKET .)
    IN              reduce using rule 76 (string_element -> identifier LBRACKET start_element RBRACKET .)
    AND             reduce using rule 76 (string_element -> identifier LBRACKET start_element RBRACKET .)
    OR              reduce using rule 76 (string_element -> identifier LBRACKET start_element RBRACKET .)
    EQUAL           reduce using rule 76 (string_element -> identifier LBRACKET start_element RBRACKET .)
    NOTEQ           reduce using rule 76 (string_element -> identifier LBRACKET start_element RBRACKET .)
    GREATER         reduce using rule 76 (string_element -> identifier LBRACKET start_element RBRACKET .)
    GTEQUAL         reduce using rule 76 (string_element -> identifier LBRACKET start_element RBRACKET .)
    LESS            reduce using rule 76 (string_element -> identifier LBRACKET start_element RBRACKET .)
    LTEQUAL         reduce using rule 76 (string_element -> identifier LBRACKET start_element RBRACKET .)
    RBRACKET        reduce using rule 76 (string_element -> identifier LBRACKET start_element RBRACKET .)
    COLON           reduce using rule 76 (string_element -> identifier LBRACKET start_element RBRACKET .)
    COMMA           reduce using rule 76 (string_element -> identifier LBRACKET start_element RBRACKET .)
    RPAREN          reduce using rule 76 (string_element -> identifier LBRACKET start_element RBRACKET .)
    ASSIGN          reduce using rule 76 (string_element -> identifier LBRACKET start_element RBRACKET .)
    THEN            reduce using rule 76 (string_element -> identifier LBRACKET start_element RBRACKET .)
    SEMI            reduce using rule 76 (string_element -> identifier LBRACKET start_element RBRACKET .)
    ELSE            reduce using rule 76 (string_element -> identifier LBRACKET start_element RBRACKET .)
    ELSIF           reduce using rule 76 (string_element -> identifier LBRACKET start_element RBRACKET .)
    DOWN            reduce using rule 76 (string_element -> identifier LBRACKET start_element RBRACKET .)
    BY              reduce using rule 76 (string_element -> identifier LBRACKET start_element RBRACKET .)
    TO              reduce using rule 76 (string_element -> identifier LBRACKET start_element RBRACKET .)
    FI              reduce using rule 76 (string_element -> identifier LBRACKET start_element RBRACKET .)
    WHILE           reduce using rule 76 (string_element -> identifier LBRACKET start_element RBRACKET .)


state 244

    (146) action_statement -> identifier COLON action SEMI .

    ID              reduce using rule 146 (action_statement -> identifier COLON action SEMI .)
    EXIT            reduce using rule 146 (action_statement -> identifier COLON action SEMI .)
    RESULT          reduce using rule 146 (action_statement -> identifier COLON action SEMI .)
    RETURN          reduce using rule 146 (action_statement -> identifier COLON action SEMI .)
    IF              reduce using rule 146 (action_statement -> identifier COLON action SEMI .)
    DO              reduce using rule 146 (action_statement -> identifier COLON action SEMI .)
    ABS             reduce using rule 146 (action_statement -> identifier COLON action SEMI .)
    ASC             reduce using rule 146 (action_statement -> identifier COLON action SEMI .)
    NUM             reduce using rule 146 (action_statement -> identifier COLON action SEMI .)
    UPPER           reduce using rule 146 (action_statement -> identifier COLON action SEMI .)
    LOWER           reduce using rule 146 (action_statement -> identifier COLON action SEMI .)
    LENGTH          reduce using rule 146 (action_statement -> identifier COLON action SEMI .)
    READ            reduce using rule 146 (action_statement -> identifier COLON action SEMI .)
    PRINT           reduce using rule 146 (action_statement -> identifier COLON action SEMI .)
    FI              reduce using rule 146 (action_statement -> identifier COLON action SEMI .)
    ELSE            reduce using rule 146 (action_statement -> identifier COLON action SEMI .)
    ELSIF           reduce using rule 146 (action_statement -> identifier COLON action SEMI .)
    DCL             reduce using rule 146 (action_statement -> identifier COLON action SEMI .)
    SYN             reduce using rule 146 (action_statement -> identifier COLON action SEMI .)
    TYPE            reduce using rule 146 (action_statement -> identifier COLON action SEMI .)
    END             reduce using rule 146 (action_statement -> identifier COLON action SEMI .)
    $end            reduce using rule 146 (action_statement -> identifier COLON action SEMI .)
    OD              reduce using rule 146 (action_statement -> identifier COLON action SEMI .)


state 245

    (168) action_statement_list -> action_statement . action_statement_nullable
    (169) action_statement_nullable -> . action_statement action_statement_nullable
    (170) action_statement_nullable -> . empty
    (146) action_statement -> . identifier COLON action SEMI
    (147) action_statement -> . action SEMI
    (209) empty -> .
    (23) identifier -> . ID
    (148) action -> . bracketed_action
    (149) action -> . assignment_action
    (150) action -> . call_action
    (151) action -> . exit_action
    (152) action -> . result_action
    (153) action -> . return_action
    (154) bracketed_action -> . if_action
    (155) bracketed_action -> . do_action
    (156) assignment_action -> . array_location assigning_operator expression
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (187) exit_action -> . EXIT identifier
    (191) result_action -> . RESULT expression
    (188) return_action -> . RETURN result
    (162) if_action -> . IF expression then_clause else_clause FI
    (163) if_action -> . IF expression then_clause FI
    (192) do_action -> . DO control_part SEMI action_statement_nullable OD
    (193) do_action -> . DO action_statement_nullable OD
    (85) array_location -> . location
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    FI              reduce using rule 209 (empty -> .)
    ELSE            reduce using rule 209 (empty -> .)
    ELSIF           reduce using rule 209 (empty -> .)
    ID              shift and go to state 70
    EXIT            shift and go to state 30
    RESULT          shift and go to state 22
    RETURN          shift and go to state 12
    IF              shift and go to state 45
    DO              shift and go to state 26
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    array_location                 shift and go to state 6
    call_action                    shift and go to state 23
    array_element                  shift and go to state 5
    empty                          shift and go to state 112
    return_action                  shift and go to state 7
    action_statement               shift and go to state 116
    dereferenced_reference         shift and go to state 8
    action_statement_nullable      shift and go to state 288
    assignment_action              shift and go to state 11
    array_slice                    shift and go to state 38
    location                       shift and go to state 34
    if_action                      shift and go to state 35
    builtin_call                   shift and go to state 14
    result_action                  shift and go to state 15
    builtin_name                   shift and go to state 36
    action                         shift and go to state 1
    exit_action                    shift and go to state 37
    bracketed_action               shift and go to state 17
    identifier                     shift and go to state 41
    string_slice                   shift and go to state 24
    procedure_call                 shift and go to state 42
    do_action                      shift and go to state 21
    string_element                 shift and go to state 44

state 246

    (164) then_clause -> THEN action_statement_list .

    ELSE            reduce using rule 164 (then_clause -> THEN action_statement_list .)
    ELSIF           reduce using rule 164 (then_clause -> THEN action_statement_list .)
    FI              reduce using rule 164 (then_clause -> THEN action_statement_list .)


state 247

    (165) else_clause -> ELSE . action_statement_list
    (168) action_statement_list -> . action_statement action_statement_nullable
    (146) action_statement -> . identifier COLON action SEMI
    (147) action_statement -> . action SEMI
    (23) identifier -> . ID
    (148) action -> . bracketed_action
    (149) action -> . assignment_action
    (150) action -> . call_action
    (151) action -> . exit_action
    (152) action -> . result_action
    (153) action -> . return_action
    (154) bracketed_action -> . if_action
    (155) bracketed_action -> . do_action
    (156) assignment_action -> . array_location assigning_operator expression
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (187) exit_action -> . EXIT identifier
    (191) result_action -> . RESULT expression
    (188) return_action -> . RETURN result
    (162) if_action -> . IF expression then_clause else_clause FI
    (163) if_action -> . IF expression then_clause FI
    (192) do_action -> . DO control_part SEMI action_statement_nullable OD
    (193) do_action -> . DO action_statement_nullable OD
    (85) array_location -> . location
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    ID              shift and go to state 70
    EXIT            shift and go to state 30
    RESULT          shift and go to state 22
    RETURN          shift and go to state 12
    IF              shift and go to state 45
    DO              shift and go to state 26
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    array_location                 shift and go to state 6
    call_action                    shift and go to state 23
    array_element                  shift and go to state 5
    return_action                  shift and go to state 7
    action_statement               shift and go to state 245
    dereferenced_reference         shift and go to state 8
    assignment_action              shift and go to state 11
    array_slice                    shift and go to state 38
    location                       shift and go to state 34
    if_action                      shift and go to state 35
    builtin_call                   shift and go to state 14
    result_action                  shift and go to state 15
    builtin_name                   shift and go to state 36
    action                         shift and go to state 1
    exit_action                    shift and go to state 37
    bracketed_action               shift and go to state 17
    identifier                     shift and go to state 41
    string_slice                   shift and go to state 24
    procedure_call                 shift and go to state 42
    do_action                      shift and go to state 21
    action_statement_list          shift and go to state 289
    string_element                 shift and go to state 44

state 248

    (166) else_clause -> ELSIF . expression then_clause else_clause
    (167) else_clause -> ELSIF . expression then_clause
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (89) conditional_expression -> . IF expression then_expression else_expression FI
    (90) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (97) operand1 -> . operand2
    (98) operand1 -> . operand1 operator2 operand2
    (99) operand2 -> . operand3
    (100) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (101) operand3 -> . monadic_operator operand4
    (102) operand3 -> . operand4
    (109) monadic_operator -> . MINUS
    (110) monadic_operator -> . NOT
    (103) operand4 -> . array_location
    (104) operand4 -> . referenced_location
    (105) operand4 -> . primitive_value
    (85) array_location -> . location
    (111) referenced_location -> . ARROW array_location
    (128) primitive_value -> . literal
    (129) primitive_value -> . value_array_element
    (130) primitive_value -> . value_array_slice
    (131) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (132) literal -> . integer_literal
    (133) literal -> . boolean_literal
    (134) literal -> . character_literal
    (135) literal -> . empty_literal
    (136) literal -> . character_string_literal
    (137) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (138) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (88) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (139) integer_literal -> . ICONST
    (140) boolean_literal -> . TRUE
    (141) boolean_literal -> . FALSE
    (142) character_literal -> . CCONST
    (143) character_literal -> . HAT LPAREN ICONST RPAREN
    (144) empty_literal -> . NULL
    (145) character_string_literal -> . SCONST
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT

    IF              shift and go to state 104
    MINUS           shift and go to state 75
    NOT             shift and go to state 100
    ARROW           shift and go to state 71
    LPAREN          shift and go to state 85
    ID              shift and go to state 70
    ICONST          shift and go to state 80
    TRUE            shift and go to state 96
    FALSE           shift and go to state 78
    CCONST          shift and go to state 86
    HAT             shift and go to state 74
    NULL            shift and go to state 97
    SCONST          shift and go to state 94
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    literal                        shift and go to state 68
    monadic_operator               shift and go to state 69
    array_location                 shift and go to state 72
    dereferenced_reference         shift and go to state 8
    parenthesized_expression       shift and go to state 76
    character_literal              shift and go to state 77
    value_array_slice              shift and go to state 79
    builtin_call                   shift and go to state 14
    array_element                  shift and go to state 5
    operand0                       shift and go to state 81
    operand1                       shift and go to state 83
    operand4                       shift and go to state 84
    primitive_value                shift and go to state 82
    empty_literal                  shift and go to state 88
    call_action                    shift and go to state 89
    string_slice                   shift and go to state 24
    referenced_location            shift and go to state 90
    expression                     shift and go to state 290
    conditional_expression         shift and go to state 92
    integer_literal                shift and go to state 93
    value_array_element            shift and go to state 95
    operand2                       shift and go to state 98
    location                       shift and go to state 34
    operand3                       shift and go to state 99
    builtin_name                   shift and go to state 36
    array_slice                    shift and go to state 38
    character_string_literal       shift and go to state 101
    identifier                     shift and go to state 102
    procedure_call                 shift and go to state 42
    boolean_literal                shift and go to state 103
    string_element                 shift and go to state 44

state 249

    (163) if_action -> IF expression then_clause FI .

    SEMI            reduce using rule 163 (if_action -> IF expression then_clause FI .)


state 250

    (162) if_action -> IF expression then_clause else_clause . FI

    FI              shift and go to state 291


state 251

    (35) formal_parameter -> identifier_list . mode LOC
    (36) formal_parameter -> identifier_list . mode
    (39) mode -> . mode_name
    (40) mode -> . discrete_mode
    (41) mode -> . reference_mode
    (42) mode -> . composite_mode
    (43) mode_name -> . identifier
    (44) discrete_mode -> . integer_mode
    (45) discrete_mode -> . boolean_mode
    (46) discrete_mode -> . character_mode
    (47) discrete_mode -> . discrete_range_mode
    (57) reference_mode -> . REF mode
    (58) composite_mode -> . string_mode
    (59) composite_mode -> . array_mode
    (23) identifier -> . ID
    (49) integer_mode -> . INT
    (50) boolean_mode -> . BOOL
    (51) character_mode -> . CHAR
    (52) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (53) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (60) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (62) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (48) discrete_mode_name -> . identifier

    REF             shift and go to state 139
    ID              shift and go to state 53
    INT             shift and go to state 142
    BOOL            shift and go to state 146
    CHAR            shift and go to state 137
    CHARS           shift and go to state 141
    ARRAY           shift and go to state 145

    boolean_mode                   shift and go to state 133
    array_mode                     shift and go to state 140
    string_mode                    shift and go to state 134
    integer_mode                   shift and go to state 135
    discrete_range_mode            shift and go to state 147
    reference_mode                 shift and go to state 136
    discrete_mode                  shift and go to state 144
    composite_mode                 shift and go to state 138
    mode                           shift and go to state 292
    identifier                     shift and go to state 149
    discrete_mode_name             shift and go to state 143
    mode_name                      shift and go to state 150
    character_mode                 shift and go to state 151

state 252

    (31) procedure_definition -> PROC LPAREN RPAREN . result_spec SEMI statement_nullable END SEMI
    (32) procedure_definition -> PROC LPAREN RPAREN . SEMI statement_nullable END SEMI
    (37) result_spec -> . RETURNS LPAREN mode LOC RPAREN
    (38) result_spec -> . RETURNS LPAREN mode RPAREN

    SEMI            shift and go to state 295
    RETURNS         shift and go to state 293

    result_spec                    shift and go to state 294

state 253

    (33) formal_parameter_list -> formal_parameter .
    (34) formal_parameter_list -> formal_parameter . COMMA formal_parameter_list

    RPAREN          reduce using rule 33 (formal_parameter_list -> formal_parameter .)
    COMMA           shift and go to state 296


state 254

    (29) procedure_definition -> PROC LPAREN formal_parameter_list . RPAREN result_spec SEMI statement_nullable END SEMI
    (30) procedure_definition -> PROC LPAREN formal_parameter_list . RPAREN SEMI statement_nullable END SEMI

    RPAREN          shift and go to state 297


state 255

    (186) parameter_list -> expression COMMA parameter_list .

    RPAREN          reduce using rule 186 (parameter_list -> expression COMMA parameter_list .)


state 256

    (61) string_length -> integer_literal .

    RBRACKET        reduce using rule 61 (string_length -> integer_literal .)


state 257

    (60) string_mode -> CHARS LBRACKET string_length . RBRACKET

    RBRACKET        shift and go to state 298


state 258

    (55) lower_bound -> expression .

    COLON           reduce using rule 55 (lower_bound -> expression .)


state 259

    (54) literal_range -> lower_bound . COLON upper_bound

    COLON           shift and go to state 299


state 260

    (52) discrete_range_mode -> discrete_mode_name LPAREN literal_range . RPAREN

    RPAREN          shift and go to state 300


state 261

    (53) discrete_range_mode -> discrete_mode LPAREN literal_range . RPAREN

    RPAREN          shift and go to state 301


state 262

    (63) index_mode_list -> index_mode .
    (64) index_mode_list -> index_mode . COMMA index_mode_list

    RBRACKET        reduce using rule 63 (index_mode_list -> index_mode .)
    COMMA           shift and go to state 302


state 263

    (62) array_mode -> ARRAY LBRACKET index_mode_list . RBRACKET element_mode

    RBRACKET        shift and go to state 303


state 264

    (65) index_mode -> discrete_mode .
    (53) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    COMMA           reduce using rule 65 (index_mode -> discrete_mode .)
    RBRACKET        reduce using rule 65 (index_mode -> discrete_mode .)
    LPAREN          shift and go to state 214


state 265

    (48) discrete_mode_name -> identifier .
    (68) location -> identifier .
    (76) string_element -> identifier . LBRACKET start_element RBRACKET
    (78) string_slice -> identifier . LBRACKET left_element COLON right_element RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    LPAREN          reduce using rule 48 (discrete_mode_name -> identifier .)
    ARROW           reduce using rule 68 (location -> identifier .)
    TIMES           reduce using rule 68 (location -> identifier .)
    DIVIDE          reduce using rule 68 (location -> identifier .)
    MODULO          reduce using rule 68 (location -> identifier .)
    PLUS            reduce using rule 68 (location -> identifier .)
    MINUS           reduce using rule 68 (location -> identifier .)
    CONCAT          reduce using rule 68 (location -> identifier .)
    IN              reduce using rule 68 (location -> identifier .)
    AND             reduce using rule 68 (location -> identifier .)
    OR              reduce using rule 68 (location -> identifier .)
    EQUAL           reduce using rule 68 (location -> identifier .)
    NOTEQ           reduce using rule 68 (location -> identifier .)
    GREATER         reduce using rule 68 (location -> identifier .)
    GTEQUAL         reduce using rule 68 (location -> identifier .)
    LESS            reduce using rule 68 (location -> identifier .)
    LTEQUAL         reduce using rule 68 (location -> identifier .)
    COLON           reduce using rule 68 (location -> identifier .)
    LBRACKET        shift and go to state 125

  ! LBRACKET        [ reduce using rule 68 (location -> identifier .) ]


state 266

    (66) index_mode -> literal_range .

    COMMA           reduce using rule 66 (index_mode -> literal_range .)
    RBRACKET        reduce using rule 66 (index_mode -> literal_range .)


state 267

    (20) initialization -> ASSIGN expression .

    COMMA           reduce using rule 20 (initialization -> ASSIGN expression .)
    SEMI            reduce using rule 20 (initialization -> ASSIGN expression .)


state 268

    (82) expression_list -> expression .
    (83) expression_list -> expression . COMMA expression_list

    RBRACKET        reduce using rule 82 (expression_list -> expression .)
    COMMA           shift and go to state 220


state 269

    (83) expression_list -> expression COMMA expression_list .

    RBRACKET        reduce using rule 83 (expression_list -> expression COMMA expression_list .)


state 270

    (56) upper_bound -> expression .

    RPAREN          reduce using rule 56 (upper_bound -> expression .)
    COMMA           reduce using rule 56 (upper_bound -> expression .)
    RBRACKET        reduce using rule 56 (upper_bound -> expression .)


state 271

    (84) array_slice -> array_location LBRACKET lower_bound COLON upper_bound . RBRACKET

    RBRACKET        shift and go to state 304


state 272

    (143) character_literal -> HAT LPAREN ICONST RPAREN .

    LBRACKET        reduce using rule 143 (character_literal -> HAT LPAREN ICONST RPAREN .)
    TIMES           reduce using rule 143 (character_literal -> HAT LPAREN ICONST RPAREN .)
    DIVIDE          reduce using rule 143 (character_literal -> HAT LPAREN ICONST RPAREN .)
    MODULO          reduce using rule 143 (character_literal -> HAT LPAREN ICONST RPAREN .)
    PLUS            reduce using rule 143 (character_literal -> HAT LPAREN ICONST RPAREN .)
    MINUS           reduce using rule 143 (character_literal -> HAT LPAREN ICONST RPAREN .)
    CONCAT          reduce using rule 143 (character_literal -> HAT LPAREN ICONST RPAREN .)
    IN              reduce using rule 143 (character_literal -> HAT LPAREN ICONST RPAREN .)
    AND             reduce using rule 143 (character_literal -> HAT LPAREN ICONST RPAREN .)
    OR              reduce using rule 143 (character_literal -> HAT LPAREN ICONST RPAREN .)
    EQUAL           reduce using rule 143 (character_literal -> HAT LPAREN ICONST RPAREN .)
    NOTEQ           reduce using rule 143 (character_literal -> HAT LPAREN ICONST RPAREN .)
    GREATER         reduce using rule 143 (character_literal -> HAT LPAREN ICONST RPAREN .)
    GTEQUAL         reduce using rule 143 (character_literal -> HAT LPAREN ICONST RPAREN .)
    LESS            reduce using rule 143 (character_literal -> HAT LPAREN ICONST RPAREN .)
    LTEQUAL         reduce using rule 143 (character_literal -> HAT LPAREN ICONST RPAREN .)
    COLON           reduce using rule 143 (character_literal -> HAT LPAREN ICONST RPAREN .)
    RBRACKET        reduce using rule 143 (character_literal -> HAT LPAREN ICONST RPAREN .)
    SEMI            reduce using rule 143 (character_literal -> HAT LPAREN ICONST RPAREN .)
    THEN            reduce using rule 143 (character_literal -> HAT LPAREN ICONST RPAREN .)
    COMMA           reduce using rule 143 (character_literal -> HAT LPAREN ICONST RPAREN .)
    RPAREN          reduce using rule 143 (character_literal -> HAT LPAREN ICONST RPAREN .)
    ELSE            reduce using rule 143 (character_literal -> HAT LPAREN ICONST RPAREN .)
    ELSIF           reduce using rule 143 (character_literal -> HAT LPAREN ICONST RPAREN .)
    DOWN            reduce using rule 143 (character_literal -> HAT LPAREN ICONST RPAREN .)
    BY              reduce using rule 143 (character_literal -> HAT LPAREN ICONST RPAREN .)
    TO              reduce using rule 143 (character_literal -> HAT LPAREN ICONST RPAREN .)
    FI              reduce using rule 143 (character_literal -> HAT LPAREN ICONST RPAREN .)
    WHILE           reduce using rule 143 (character_literal -> HAT LPAREN ICONST RPAREN .)


state 273

    (138) value_array_slice -> primitive_value LBRACKET expression COLON . expression RBRACKET
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (89) conditional_expression -> . IF expression then_expression else_expression FI
    (90) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (97) operand1 -> . operand2
    (98) operand1 -> . operand1 operator2 operand2
    (99) operand2 -> . operand3
    (100) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (101) operand3 -> . monadic_operator operand4
    (102) operand3 -> . operand4
    (109) monadic_operator -> . MINUS
    (110) monadic_operator -> . NOT
    (103) operand4 -> . array_location
    (104) operand4 -> . referenced_location
    (105) operand4 -> . primitive_value
    (85) array_location -> . location
    (111) referenced_location -> . ARROW array_location
    (128) primitive_value -> . literal
    (129) primitive_value -> . value_array_element
    (130) primitive_value -> . value_array_slice
    (131) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (132) literal -> . integer_literal
    (133) literal -> . boolean_literal
    (134) literal -> . character_literal
    (135) literal -> . empty_literal
    (136) literal -> . character_string_literal
    (137) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (138) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (88) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (139) integer_literal -> . ICONST
    (140) boolean_literal -> . TRUE
    (141) boolean_literal -> . FALSE
    (142) character_literal -> . CCONST
    (143) character_literal -> . HAT LPAREN ICONST RPAREN
    (144) empty_literal -> . NULL
    (145) character_string_literal -> . SCONST
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT

    IF              shift and go to state 104
    MINUS           shift and go to state 75
    NOT             shift and go to state 100
    ARROW           shift and go to state 71
    LPAREN          shift and go to state 85
    ID              shift and go to state 70
    ICONST          shift and go to state 80
    TRUE            shift and go to state 96
    FALSE           shift and go to state 78
    CCONST          shift and go to state 86
    HAT             shift and go to state 74
    NULL            shift and go to state 97
    SCONST          shift and go to state 94
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    literal                        shift and go to state 68
    operand2                       shift and go to state 98
    array_location                 shift and go to state 72
    dereferenced_reference         shift and go to state 8
    parenthesized_expression       shift and go to state 76
    character_literal              shift and go to state 77
    value_array_slice              shift and go to state 79
    builtin_call                   shift and go to state 14
    array_element                  shift and go to state 5
    operand0                       shift and go to state 81
    operand1                       shift and go to state 83
    value_array_element            shift and go to state 95
    primitive_value                shift and go to state 82
    empty_literal                  shift and go to state 88
    call_action                    shift and go to state 89
    string_slice                   shift and go to state 24
    referenced_location            shift and go to state 90
    operand4                       shift and go to state 84
    expression                     shift and go to state 305
    conditional_expression         shift and go to state 92
    integer_literal                shift and go to state 93
    monadic_operator               shift and go to state 69
    location                       shift and go to state 34
    operand3                       shift and go to state 99
    builtin_name                   shift and go to state 36
    array_slice                    shift and go to state 38
    character_string_literal       shift and go to state 101
    identifier                     shift and go to state 102
    procedure_call                 shift and go to state 42
    boolean_literal                shift and go to state 103
    string_element                 shift and go to state 44

state 274

    (137) value_array_element -> primitive_value LBRACKET expression_list RBRACKET .

    LBRACKET        reduce using rule 137 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    TIMES           reduce using rule 137 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    DIVIDE          reduce using rule 137 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    MODULO          reduce using rule 137 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    PLUS            reduce using rule 137 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    MINUS           reduce using rule 137 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    CONCAT          reduce using rule 137 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    IN              reduce using rule 137 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    AND             reduce using rule 137 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    OR              reduce using rule 137 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    EQUAL           reduce using rule 137 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    NOTEQ           reduce using rule 137 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    GREATER         reduce using rule 137 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    GTEQUAL         reduce using rule 137 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    LESS            reduce using rule 137 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    LTEQUAL         reduce using rule 137 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    COMMA           reduce using rule 137 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    RPAREN          reduce using rule 137 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    COLON           reduce using rule 137 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    THEN            reduce using rule 137 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    SEMI            reduce using rule 137 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    DOWN            reduce using rule 137 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    TO              reduce using rule 137 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    RBRACKET        reduce using rule 137 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    ELSE            reduce using rule 137 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    ELSIF           reduce using rule 137 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    BY              reduce using rule 137 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    FI              reduce using rule 137 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    WHILE           reduce using rule 137 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)


state 275

    (91) then_expression -> THEN expression .

    ELSIF           reduce using rule 91 (then_expression -> THEN expression .)
    ELSE            reduce using rule 91 (then_expression -> THEN expression .)


state 276

    (92) else_expression -> ELSE . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (89) conditional_expression -> . IF expression then_expression else_expression FI
    (90) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (97) operand1 -> . operand2
    (98) operand1 -> . operand1 operator2 operand2
    (99) operand2 -> . operand3
    (100) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (101) operand3 -> . monadic_operator operand4
    (102) operand3 -> . operand4
    (109) monadic_operator -> . MINUS
    (110) monadic_operator -> . NOT
    (103) operand4 -> . array_location
    (104) operand4 -> . referenced_location
    (105) operand4 -> . primitive_value
    (85) array_location -> . location
    (111) referenced_location -> . ARROW array_location
    (128) primitive_value -> . literal
    (129) primitive_value -> . value_array_element
    (130) primitive_value -> . value_array_slice
    (131) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (132) literal -> . integer_literal
    (133) literal -> . boolean_literal
    (134) literal -> . character_literal
    (135) literal -> . empty_literal
    (136) literal -> . character_string_literal
    (137) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (138) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (88) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (139) integer_literal -> . ICONST
    (140) boolean_literal -> . TRUE
    (141) boolean_literal -> . FALSE
    (142) character_literal -> . CCONST
    (143) character_literal -> . HAT LPAREN ICONST RPAREN
    (144) empty_literal -> . NULL
    (145) character_string_literal -> . SCONST
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT

    IF              shift and go to state 104
    MINUS           shift and go to state 75
    NOT             shift and go to state 100
    ARROW           shift and go to state 71
    LPAREN          shift and go to state 85
    ID              shift and go to state 70
    ICONST          shift and go to state 80
    TRUE            shift and go to state 96
    FALSE           shift and go to state 78
    CCONST          shift and go to state 86
    HAT             shift and go to state 74
    NULL            shift and go to state 97
    SCONST          shift and go to state 94
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    literal                        shift and go to state 68
    operand2                       shift and go to state 98
    array_location                 shift and go to state 72
    dereferenced_reference         shift and go to state 8
    parenthesized_expression       shift and go to state 76
    character_literal              shift and go to state 77
    value_array_slice              shift and go to state 79
    builtin_call                   shift and go to state 14
    array_element                  shift and go to state 5
    operand0                       shift and go to state 81
    operand1                       shift and go to state 83
    value_array_element            shift and go to state 95
    primitive_value                shift and go to state 82
    empty_literal                  shift and go to state 88
    call_action                    shift and go to state 89
    string_slice                   shift and go to state 24
    referenced_location            shift and go to state 90
    operand4                       shift and go to state 84
    expression                     shift and go to state 306
    conditional_expression         shift and go to state 92
    integer_literal                shift and go to state 93
    monadic_operator               shift and go to state 69
    location                       shift and go to state 34
    operand3                       shift and go to state 99
    builtin_name                   shift and go to state 36
    array_slice                    shift and go to state 38
    character_string_literal       shift and go to state 101
    identifier                     shift and go to state 102
    procedure_call                 shift and go to state 42
    boolean_literal                shift and go to state 103
    string_element                 shift and go to state 44

state 277

    (89) conditional_expression -> IF expression then_expression else_expression . FI

    FI              shift and go to state 307


state 278

    (93) elsif_expression -> ELSIF . expression then_expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (89) conditional_expression -> . IF expression then_expression else_expression FI
    (90) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (97) operand1 -> . operand2
    (98) operand1 -> . operand1 operator2 operand2
    (99) operand2 -> . operand3
    (100) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (101) operand3 -> . monadic_operator operand4
    (102) operand3 -> . operand4
    (109) monadic_operator -> . MINUS
    (110) monadic_operator -> . NOT
    (103) operand4 -> . array_location
    (104) operand4 -> . referenced_location
    (105) operand4 -> . primitive_value
    (85) array_location -> . location
    (111) referenced_location -> . ARROW array_location
    (128) primitive_value -> . literal
    (129) primitive_value -> . value_array_element
    (130) primitive_value -> . value_array_slice
    (131) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (132) literal -> . integer_literal
    (133) literal -> . boolean_literal
    (134) literal -> . character_literal
    (135) literal -> . empty_literal
    (136) literal -> . character_string_literal
    (137) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (138) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (88) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (139) integer_literal -> . ICONST
    (140) boolean_literal -> . TRUE
    (141) boolean_literal -> . FALSE
    (142) character_literal -> . CCONST
    (143) character_literal -> . HAT LPAREN ICONST RPAREN
    (144) empty_literal -> . NULL
    (145) character_string_literal -> . SCONST
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT

    IF              shift and go to state 104
    MINUS           shift and go to state 75
    NOT             shift and go to state 100
    ARROW           shift and go to state 71
    LPAREN          shift and go to state 85
    ID              shift and go to state 70
    ICONST          shift and go to state 80
    TRUE            shift and go to state 96
    FALSE           shift and go to state 78
    CCONST          shift and go to state 86
    HAT             shift and go to state 74
    NULL            shift and go to state 97
    SCONST          shift and go to state 94
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    literal                        shift and go to state 68
    operand2                       shift and go to state 98
    array_location                 shift and go to state 72
    dereferenced_reference         shift and go to state 8
    parenthesized_expression       shift and go to state 76
    character_literal              shift and go to state 77
    value_array_slice              shift and go to state 79
    builtin_call                   shift and go to state 14
    array_element                  shift and go to state 5
    operand0                       shift and go to state 81
    operand1                       shift and go to state 83
    value_array_element            shift and go to state 95
    primitive_value                shift and go to state 82
    empty_literal                  shift and go to state 88
    call_action                    shift and go to state 89
    string_slice                   shift and go to state 24
    referenced_location            shift and go to state 90
    operand4                       shift and go to state 84
    expression                     shift and go to state 308
    conditional_expression         shift and go to state 92
    integer_literal                shift and go to state 93
    monadic_operator               shift and go to state 69
    location                       shift and go to state 34
    operand3                       shift and go to state 99
    builtin_name                   shift and go to state 36
    array_slice                    shift and go to state 38
    character_string_literal       shift and go to state 101
    identifier                     shift and go to state 102
    procedure_call                 shift and go to state 42
    boolean_literal                shift and go to state 103
    string_element                 shift and go to state 44

state 279

    (90) conditional_expression -> IF expression then_expression elsif_expression . else_expression FI
    (94) elsif_expression -> elsif_expression . ELSIF expression then_expression
    (92) else_expression -> . ELSE expression

    ELSIF           shift and go to state 310
    ELSE            shift and go to state 276

    else_expression                shift and go to state 309

state 280

    (48) discrete_mode_name -> identifier .

    LPAREN          reduce using rule 48 (discrete_mode_name -> identifier .)


state 281

    (207) range_enumeration -> identifier IN discrete_mode .
    (53) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    WHILE           reduce using rule 207 (range_enumeration -> identifier IN discrete_mode .)
    SEMI            reduce using rule 207 (range_enumeration -> identifier IN discrete_mode .)
    LPAREN          shift and go to state 214


state 282

    (200) step_enumeration -> identifier ASSIGN expression . step_value DOWN end_value
    (201) step_enumeration -> identifier ASSIGN expression . step_value end_value
    (202) step_enumeration -> identifier ASSIGN expression . DOWN end_value
    (203) step_enumeration -> identifier ASSIGN expression . end_value
    (204) step_value -> . BY expression
    (205) end_value -> . TO expression

    DOWN            shift and go to state 315
    BY              shift and go to state 312
    TO              shift and go to state 313

    step_value                     shift and go to state 311
    end_value                      shift and go to state 314

state 283

    (206) range_enumeration -> identifier DOWN IN . discrete_mode
    (44) discrete_mode -> . integer_mode
    (45) discrete_mode -> . boolean_mode
    (46) discrete_mode -> . character_mode
    (47) discrete_mode -> . discrete_range_mode
    (49) integer_mode -> . INT
    (50) boolean_mode -> . BOOL
    (51) character_mode -> . CHAR
    (52) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (53) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (48) discrete_mode_name -> . identifier
    (23) identifier -> . ID

    INT             shift and go to state 142
    BOOL            shift and go to state 146
    CHAR            shift and go to state 137
    ID              shift and go to state 53

    boolean_mode                   shift and go to state 133
    identifier                     shift and go to state 280
    discrete_mode_name             shift and go to state 143
    integer_mode                   shift and go to state 135
    discrete_range_mode            shift and go to state 147
    discrete_mode                  shift and go to state 316
    character_mode                 shift and go to state 151

state 284

    (192) do_action -> DO control_part SEMI action_statement_nullable OD .

    SEMI            reduce using rule 192 (do_action -> DO control_part SEMI action_statement_nullable OD .)


state 285

    (13) synonym_definition -> identifier_list mode ASSIGN expression .

    COMMA           reduce using rule 13 (synonym_definition -> identifier_list mode ASSIGN expression .)
    SEMI            reduce using rule 13 (synonym_definition -> identifier_list mode ASSIGN expression .)


state 286

    (78) string_slice -> identifier LBRACKET left_element COLON right_element . RBRACKET

    RBRACKET        shift and go to state 317


state 287

    (80) right_element -> expression .

    RBRACKET        reduce using rule 80 (right_element -> expression .)


state 288

    (168) action_statement_list -> action_statement action_statement_nullable .

    FI              reduce using rule 168 (action_statement_list -> action_statement action_statement_nullable .)
    ELSE            reduce using rule 168 (action_statement_list -> action_statement action_statement_nullable .)
    ELSIF           reduce using rule 168 (action_statement_list -> action_statement action_statement_nullable .)


state 289

    (165) else_clause -> ELSE action_statement_list .

    FI              reduce using rule 165 (else_clause -> ELSE action_statement_list .)


state 290

    (166) else_clause -> ELSIF expression . then_clause else_clause
    (167) else_clause -> ELSIF expression . then_clause
    (164) then_clause -> . THEN action_statement_list

    THEN            shift and go to state 206

    then_clause                    shift and go to state 318

state 291

    (162) if_action -> IF expression then_clause else_clause FI .

    SEMI            reduce using rule 162 (if_action -> IF expression then_clause else_clause FI .)


state 292

    (35) formal_parameter -> identifier_list mode . LOC
    (36) formal_parameter -> identifier_list mode .

    LOC             shift and go to state 319
    COMMA           reduce using rule 36 (formal_parameter -> identifier_list mode .)
    RPAREN          reduce using rule 36 (formal_parameter -> identifier_list mode .)


state 293

    (37) result_spec -> RETURNS . LPAREN mode LOC RPAREN
    (38) result_spec -> RETURNS . LPAREN mode RPAREN

    LPAREN          shift and go to state 320


state 294

    (31) procedure_definition -> PROC LPAREN RPAREN result_spec . SEMI statement_nullable END SEMI

    SEMI            shift and go to state 321


state 295

    (32) procedure_definition -> PROC LPAREN RPAREN SEMI . statement_nullable END SEMI
    (3) statement_nullable -> . statement statement_nullable
    (4) statement_nullable -> . empty
    (5) statement -> . declaration_statement
    (6) statement -> . synonym_statement
    (7) statement -> . newmode_statement
    (8) statement -> . action_statement
    (9) statement -> . procedure_statement
    (209) empty -> .
    (15) declaration_statement -> . DCL declaration_list SEMI
    (10) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (146) action_statement -> . identifier COLON action SEMI
    (147) action_statement -> . action SEMI
    (28) procedure_statement -> . ID COLON procedure_definition
    (23) identifier -> . ID
    (148) action -> . bracketed_action
    (149) action -> . assignment_action
    (150) action -> . call_action
    (151) action -> . exit_action
    (152) action -> . result_action
    (153) action -> . return_action
    (154) bracketed_action -> . if_action
    (155) bracketed_action -> . do_action
    (156) assignment_action -> . array_location assigning_operator expression
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (187) exit_action -> . EXIT identifier
    (191) result_action -> . RESULT expression
    (188) return_action -> . RETURN result
    (162) if_action -> . IF expression then_clause else_clause FI
    (163) if_action -> . IF expression then_clause FI
    (192) do_action -> . DO control_part SEMI action_statement_nullable OD
    (193) do_action -> . DO action_statement_nullable OD
    (85) array_location -> . location
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    END             reduce using rule 209 (empty -> .)
    DCL             shift and go to state 3
    SYN             shift and go to state 29
    TYPE            shift and go to state 18
    ID              shift and go to state 2
    EXIT            shift and go to state 30
    RESULT          shift and go to state 22
    RETURN          shift and go to state 12
    IF              shift and go to state 45
    DO              shift and go to state 26
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    action                         shift and go to state 1
    result_action                  shift and go to state 15
    array_location                 shift and go to state 6
    empty                          shift and go to state 105
    return_action                  shift and go to state 7
    dereferenced_reference         shift and go to state 8
    declaration_statement          shift and go to state 9
    exit_action                    shift and go to state 37
    bracketed_action               shift and go to state 17
    builtin_call                   shift and go to state 14
    array_element                  shift and go to state 5
    newmode_statement              shift and go to state 16
    statement                      shift and go to state 106
    procedure_statement            shift and go to state 19
    do_action                      shift and go to state 21
    identifier                     shift and go to state 41
    call_action                    shift and go to state 23
    string_slice                   shift and go to state 24
    action_statement               shift and go to state 31
    statement_nullable             shift and go to state 322
    location                       shift and go to state 34
    if_action                      shift and go to state 35
    builtin_name                   shift and go to state 36
    assignment_action              shift and go to state 11
    array_slice                    shift and go to state 38
    synonym_statement              shift and go to state 39
    procedure_call                 shift and go to state 42
    string_element                 shift and go to state 44

state 296

    (34) formal_parameter_list -> formal_parameter COMMA . formal_parameter_list
    (33) formal_parameter_list -> . formal_parameter
    (34) formal_parameter_list -> . formal_parameter COMMA formal_parameter_list
    (35) formal_parameter -> . identifier_list mode LOC
    (36) formal_parameter -> . identifier_list mode
    (21) identifier_list -> . identifier
    (22) identifier_list -> . identifier COMMA identifier_list
    (23) identifier -> . ID

    ID              shift and go to state 53

    identifier_list                shift and go to state 251
    formal_parameter               shift and go to state 253
    formal_parameter_list          shift and go to state 323
    identifier                     shift and go to state 51

state 297

    (29) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN . result_spec SEMI statement_nullable END SEMI
    (30) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN . SEMI statement_nullable END SEMI
    (37) result_spec -> . RETURNS LPAREN mode LOC RPAREN
    (38) result_spec -> . RETURNS LPAREN mode RPAREN

    SEMI            shift and go to state 325
    RETURNS         shift and go to state 293

    result_spec                    shift and go to state 324

state 298

    (60) string_mode -> CHARS LBRACKET string_length RBRACKET .

    ASSIGN          reduce using rule 60 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    COMMA           reduce using rule 60 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    SEMI            reduce using rule 60 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    LOC             reduce using rule 60 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    RPAREN          reduce using rule 60 (string_mode -> CHARS LBRACKET string_length RBRACKET .)


state 299

    (54) literal_range -> lower_bound COLON . upper_bound
    (56) upper_bound -> . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (89) conditional_expression -> . IF expression then_expression else_expression FI
    (90) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (97) operand1 -> . operand2
    (98) operand1 -> . operand1 operator2 operand2
    (99) operand2 -> . operand3
    (100) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (101) operand3 -> . monadic_operator operand4
    (102) operand3 -> . operand4
    (109) monadic_operator -> . MINUS
    (110) monadic_operator -> . NOT
    (103) operand4 -> . array_location
    (104) operand4 -> . referenced_location
    (105) operand4 -> . primitive_value
    (85) array_location -> . location
    (111) referenced_location -> . ARROW array_location
    (128) primitive_value -> . literal
    (129) primitive_value -> . value_array_element
    (130) primitive_value -> . value_array_slice
    (131) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (132) literal -> . integer_literal
    (133) literal -> . boolean_literal
    (134) literal -> . character_literal
    (135) literal -> . empty_literal
    (136) literal -> . character_string_literal
    (137) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (138) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (88) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (139) integer_literal -> . ICONST
    (140) boolean_literal -> . TRUE
    (141) boolean_literal -> . FALSE
    (142) character_literal -> . CCONST
    (143) character_literal -> . HAT LPAREN ICONST RPAREN
    (144) empty_literal -> . NULL
    (145) character_string_literal -> . SCONST
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT

    IF              shift and go to state 104
    MINUS           shift and go to state 75
    NOT             shift and go to state 100
    ARROW           shift and go to state 71
    LPAREN          shift and go to state 85
    ID              shift and go to state 70
    ICONST          shift and go to state 80
    TRUE            shift and go to state 96
    FALSE           shift and go to state 78
    CCONST          shift and go to state 86
    HAT             shift and go to state 74
    NULL            shift and go to state 97
    SCONST          shift and go to state 94
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    literal                        shift and go to state 68
    monadic_operator               shift and go to state 69
    array_location                 shift and go to state 72
    dereferenced_reference         shift and go to state 8
    parenthesized_expression       shift and go to state 76
    character_literal              shift and go to state 77
    value_array_slice              shift and go to state 79
    builtin_call                   shift and go to state 14
    array_element                  shift and go to state 5
    operand0                       shift and go to state 81
    operand1                       shift and go to state 83
    operand4                       shift and go to state 84
    primitive_value                shift and go to state 82
    empty_literal                  shift and go to state 88
    call_action                    shift and go to state 89
    string_slice                   shift and go to state 24
    referenced_location            shift and go to state 90
    expression                     shift and go to state 270
    conditional_expression         shift and go to state 92
    integer_literal                shift and go to state 93
    character_string_literal       shift and go to state 101
    value_array_element            shift and go to state 95
    operand2                       shift and go to state 98
    upper_bound                    shift and go to state 326
    location                       shift and go to state 34
    operand3                       shift and go to state 99
    builtin_name                   shift and go to state 36
    array_slice                    shift and go to state 38
    identifier                     shift and go to state 102
    procedure_call                 shift and go to state 42
    boolean_literal                shift and go to state 103
    string_element                 shift and go to state 44

state 300

    (52) discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .

    LPAREN          reduce using rule 52 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    WHILE           reduce using rule 52 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    SEMI            reduce using rule 52 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    COMMA           reduce using rule 52 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    RBRACKET        reduce using rule 52 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    ASSIGN          reduce using rule 52 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    LOC             reduce using rule 52 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    RPAREN          reduce using rule 52 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)


state 301

    (53) discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .

    LPAREN          reduce using rule 53 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    WHILE           reduce using rule 53 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    SEMI            reduce using rule 53 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    COMMA           reduce using rule 53 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    RBRACKET        reduce using rule 53 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    ASSIGN          reduce using rule 53 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    LOC             reduce using rule 53 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    RPAREN          reduce using rule 53 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)


state 302

    (64) index_mode_list -> index_mode COMMA . index_mode_list
    (63) index_mode_list -> . index_mode
    (64) index_mode_list -> . index_mode COMMA index_mode_list
    (65) index_mode -> . discrete_mode
    (66) index_mode -> . literal_range
    (44) discrete_mode -> . integer_mode
    (45) discrete_mode -> . boolean_mode
    (46) discrete_mode -> . character_mode
    (47) discrete_mode -> . discrete_range_mode
    (54) literal_range -> . lower_bound COLON upper_bound
    (49) integer_mode -> . INT
    (50) boolean_mode -> . BOOL
    (51) character_mode -> . CHAR
    (52) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (53) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (55) lower_bound -> . expression
    (48) discrete_mode_name -> . identifier
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (23) identifier -> . ID
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (89) conditional_expression -> . IF expression then_expression else_expression FI
    (90) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (97) operand1 -> . operand2
    (98) operand1 -> . operand1 operator2 operand2
    (99) operand2 -> . operand3
    (100) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (101) operand3 -> . monadic_operator operand4
    (102) operand3 -> . operand4
    (109) monadic_operator -> . MINUS
    (110) monadic_operator -> . NOT
    (103) operand4 -> . array_location
    (104) operand4 -> . referenced_location
    (105) operand4 -> . primitive_value
    (85) array_location -> . location
    (111) referenced_location -> . ARROW array_location
    (128) primitive_value -> . literal
    (129) primitive_value -> . value_array_element
    (130) primitive_value -> . value_array_slice
    (131) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (132) literal -> . integer_literal
    (133) literal -> . boolean_literal
    (134) literal -> . character_literal
    (135) literal -> . empty_literal
    (136) literal -> . character_string_literal
    (137) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (138) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (88) parenthesized_expression -> . LPAREN expression RPAREN
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (139) integer_literal -> . ICONST
    (140) boolean_literal -> . TRUE
    (141) boolean_literal -> . FALSE
    (142) character_literal -> . CCONST
    (143) character_literal -> . HAT LPAREN ICONST RPAREN
    (144) empty_literal -> . NULL
    (145) character_string_literal -> . SCONST
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT

    INT             shift and go to state 142
    BOOL            shift and go to state 146
    CHAR            shift and go to state 137
    ID              shift and go to state 70
    IF              shift and go to state 104
    MINUS           shift and go to state 75
    NOT             shift and go to state 100
    ARROW           shift and go to state 71
    LPAREN          shift and go to state 85
    ICONST          shift and go to state 80
    TRUE            shift and go to state 96
    FALSE           shift and go to state 78
    CCONST          shift and go to state 86
    HAT             shift and go to state 74
    NULL            shift and go to state 97
    SCONST          shift and go to state 94
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    literal                        shift and go to state 68
    boolean_mode                   shift and go to state 133
    monadic_operator               shift and go to state 69
    discrete_range_mode            shift and go to state 147
    operand2                       shift and go to state 98
    index_mode                     shift and go to state 262
    dereferenced_reference         shift and go to state 8
    parenthesized_expression       shift and go to state 76
    character_literal              shift and go to state 77
    referenced_location            shift and go to state 90
    builtin_call                   shift and go to state 14
    array_element                  shift and go to state 5
    discrete_mode                  shift and go to state 264
    operand0                       shift and go to state 81
    operand1                       shift and go to state 83
    value_array_element            shift and go to state 95
    string_slice                   shift and go to state 24
    array_location                 shift and go to state 72
    character_mode                 shift and go to state 151
    primitive_value                shift and go to state 82
    empty_literal                  shift and go to state 88
    call_action                    shift and go to state 89
    integer_mode                   shift and go to state 135
    index_mode_list                shift and go to state 327
    expression                     shift and go to state 258
    conditional_expression         shift and go to state 92
    integer_literal                shift and go to state 93
    value_array_slice              shift and go to state 79
    discrete_mode_name             shift and go to state 143
    operand4                       shift and go to state 84
    location                       shift and go to state 34
    operand3                       shift and go to state 99
    lower_bound                    shift and go to state 259
    builtin_name                   shift and go to state 36
    literal_range                  shift and go to state 266
    array_slice                    shift and go to state 38
    character_string_literal       shift and go to state 101
    identifier                     shift and go to state 265
    procedure_call                 shift and go to state 42
    boolean_literal                shift and go to state 103
    string_element                 shift and go to state 44

state 303

    (62) array_mode -> ARRAY LBRACKET index_mode_list RBRACKET . element_mode
    (67) element_mode -> . mode
    (39) mode -> . mode_name
    (40) mode -> . discrete_mode
    (41) mode -> . reference_mode
    (42) mode -> . composite_mode
    (43) mode_name -> . identifier
    (44) discrete_mode -> . integer_mode
    (45) discrete_mode -> . boolean_mode
    (46) discrete_mode -> . character_mode
    (47) discrete_mode -> . discrete_range_mode
    (57) reference_mode -> . REF mode
    (58) composite_mode -> . string_mode
    (59) composite_mode -> . array_mode
    (23) identifier -> . ID
    (49) integer_mode -> . INT
    (50) boolean_mode -> . BOOL
    (51) character_mode -> . CHAR
    (52) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (53) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (60) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (62) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (48) discrete_mode_name -> . identifier

    REF             shift and go to state 139
    ID              shift and go to state 53
    INT             shift and go to state 142
    BOOL            shift and go to state 146
    CHAR            shift and go to state 137
    CHARS           shift and go to state 141
    ARRAY           shift and go to state 145

    boolean_mode                   shift and go to state 133
    array_mode                     shift and go to state 140
    string_mode                    shift and go to state 134
    integer_mode                   shift and go to state 135
    discrete_range_mode            shift and go to state 147
    reference_mode                 shift and go to state 136
    discrete_mode                  shift and go to state 144
    composite_mode                 shift and go to state 138
    element_mode                   shift and go to state 328
    mode                           shift and go to state 329
    identifier                     shift and go to state 149
    discrete_mode_name             shift and go to state 143
    mode_name                      shift and go to state 150
    character_mode                 shift and go to state 151

state 304

    (84) array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .

    ARROW           reduce using rule 84 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LBRACKET        reduce using rule 84 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    TIMES           reduce using rule 84 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    DIVIDE          reduce using rule 84 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    MODULO          reduce using rule 84 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    PLUS            reduce using rule 84 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    MINUS           reduce using rule 84 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    CONCAT          reduce using rule 84 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    IN              reduce using rule 84 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    AND             reduce using rule 84 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    OR              reduce using rule 84 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    EQUAL           reduce using rule 84 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    NOTEQ           reduce using rule 84 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    GREATER         reduce using rule 84 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    GTEQUAL         reduce using rule 84 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LESS            reduce using rule 84 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LTEQUAL         reduce using rule 84 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    SEMI            reduce using rule 84 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    THEN            reduce using rule 84 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    COMMA           reduce using rule 84 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    RPAREN          reduce using rule 84 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    RBRACKET        reduce using rule 84 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    COLON           reduce using rule 84 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    ELSE            reduce using rule 84 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    ELSIF           reduce using rule 84 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    DOWN            reduce using rule 84 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    BY              reduce using rule 84 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    TO              reduce using rule 84 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    FI              reduce using rule 84 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    WHILE           reduce using rule 84 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    ASSIGN          reduce using rule 84 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)


state 305

    (138) value_array_slice -> primitive_value LBRACKET expression COLON expression . RBRACKET

    RBRACKET        shift and go to state 330


state 306

    (92) else_expression -> ELSE expression .

    FI              reduce using rule 92 (else_expression -> ELSE expression .)


state 307

    (89) conditional_expression -> IF expression then_expression else_expression FI .

    WHILE           reduce using rule 89 (conditional_expression -> IF expression then_expression else_expression FI .)
    SEMI            reduce using rule 89 (conditional_expression -> IF expression then_expression else_expression FI .)
    THEN            reduce using rule 89 (conditional_expression -> IF expression then_expression else_expression FI .)
    COMMA           reduce using rule 89 (conditional_expression -> IF expression then_expression else_expression FI .)
    RBRACKET        reduce using rule 89 (conditional_expression -> IF expression then_expression else_expression FI .)
    COLON           reduce using rule 89 (conditional_expression -> IF expression then_expression else_expression FI .)
    RPAREN          reduce using rule 89 (conditional_expression -> IF expression then_expression else_expression FI .)
    FI              reduce using rule 89 (conditional_expression -> IF expression then_expression else_expression FI .)
    ELSE            reduce using rule 89 (conditional_expression -> IF expression then_expression else_expression FI .)
    ELSIF           reduce using rule 89 (conditional_expression -> IF expression then_expression else_expression FI .)
    DOWN            reduce using rule 89 (conditional_expression -> IF expression then_expression else_expression FI .)
    BY              reduce using rule 89 (conditional_expression -> IF expression then_expression else_expression FI .)
    TO              reduce using rule 89 (conditional_expression -> IF expression then_expression else_expression FI .)


state 308

    (93) elsif_expression -> ELSIF expression . then_expression
    (91) then_expression -> . THEN expression

    THEN            shift and go to state 230

    then_expression                shift and go to state 331

state 309

    (90) conditional_expression -> IF expression then_expression elsif_expression else_expression . FI

    FI              shift and go to state 332


state 310

    (94) elsif_expression -> elsif_expression ELSIF . expression then_expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (89) conditional_expression -> . IF expression then_expression else_expression FI
    (90) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (97) operand1 -> . operand2
    (98) operand1 -> . operand1 operator2 operand2
    (99) operand2 -> . operand3
    (100) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (101) operand3 -> . monadic_operator operand4
    (102) operand3 -> . operand4
    (109) monadic_operator -> . MINUS
    (110) monadic_operator -> . NOT
    (103) operand4 -> . array_location
    (104) operand4 -> . referenced_location
    (105) operand4 -> . primitive_value
    (85) array_location -> . location
    (111) referenced_location -> . ARROW array_location
    (128) primitive_value -> . literal
    (129) primitive_value -> . value_array_element
    (130) primitive_value -> . value_array_slice
    (131) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (132) literal -> . integer_literal
    (133) literal -> . boolean_literal
    (134) literal -> . character_literal
    (135) literal -> . empty_literal
    (136) literal -> . character_string_literal
    (137) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (138) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (88) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (139) integer_literal -> . ICONST
    (140) boolean_literal -> . TRUE
    (141) boolean_literal -> . FALSE
    (142) character_literal -> . CCONST
    (143) character_literal -> . HAT LPAREN ICONST RPAREN
    (144) empty_literal -> . NULL
    (145) character_string_literal -> . SCONST
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT

    IF              shift and go to state 104
    MINUS           shift and go to state 75
    NOT             shift and go to state 100
    ARROW           shift and go to state 71
    LPAREN          shift and go to state 85
    ID              shift and go to state 70
    ICONST          shift and go to state 80
    TRUE            shift and go to state 96
    FALSE           shift and go to state 78
    CCONST          shift and go to state 86
    HAT             shift and go to state 74
    NULL            shift and go to state 97
    SCONST          shift and go to state 94
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    literal                        shift and go to state 68
    operand2                       shift and go to state 98
    array_location                 shift and go to state 72
    dereferenced_reference         shift and go to state 8
    parenthesized_expression       shift and go to state 76
    character_literal              shift and go to state 77
    value_array_slice              shift and go to state 79
    builtin_call                   shift and go to state 14
    array_element                  shift and go to state 5
    operand0                       shift and go to state 81
    operand1                       shift and go to state 83
    value_array_element            shift and go to state 95
    primitive_value                shift and go to state 82
    empty_literal                  shift and go to state 88
    call_action                    shift and go to state 89
    string_slice                   shift and go to state 24
    referenced_location            shift and go to state 90
    operand4                       shift and go to state 84
    expression                     shift and go to state 333
    conditional_expression         shift and go to state 92
    integer_literal                shift and go to state 93
    monadic_operator               shift and go to state 69
    location                       shift and go to state 34
    operand3                       shift and go to state 99
    builtin_name                   shift and go to state 36
    array_slice                    shift and go to state 38
    character_string_literal       shift and go to state 101
    identifier                     shift and go to state 102
    procedure_call                 shift and go to state 42
    boolean_literal                shift and go to state 103
    string_element                 shift and go to state 44

state 311

    (200) step_enumeration -> identifier ASSIGN expression step_value . DOWN end_value
    (201) step_enumeration -> identifier ASSIGN expression step_value . end_value
    (205) end_value -> . TO expression

    DOWN            shift and go to state 335
    TO              shift and go to state 313

    end_value                      shift and go to state 334

state 312

    (204) step_value -> BY . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (89) conditional_expression -> . IF expression then_expression else_expression FI
    (90) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (97) operand1 -> . operand2
    (98) operand1 -> . operand1 operator2 operand2
    (99) operand2 -> . operand3
    (100) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (101) operand3 -> . monadic_operator operand4
    (102) operand3 -> . operand4
    (109) monadic_operator -> . MINUS
    (110) monadic_operator -> . NOT
    (103) operand4 -> . array_location
    (104) operand4 -> . referenced_location
    (105) operand4 -> . primitive_value
    (85) array_location -> . location
    (111) referenced_location -> . ARROW array_location
    (128) primitive_value -> . literal
    (129) primitive_value -> . value_array_element
    (130) primitive_value -> . value_array_slice
    (131) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (132) literal -> . integer_literal
    (133) literal -> . boolean_literal
    (134) literal -> . character_literal
    (135) literal -> . empty_literal
    (136) literal -> . character_string_literal
    (137) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (138) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (88) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (139) integer_literal -> . ICONST
    (140) boolean_literal -> . TRUE
    (141) boolean_literal -> . FALSE
    (142) character_literal -> . CCONST
    (143) character_literal -> . HAT LPAREN ICONST RPAREN
    (144) empty_literal -> . NULL
    (145) character_string_literal -> . SCONST
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT

    IF              shift and go to state 104
    MINUS           shift and go to state 75
    NOT             shift and go to state 100
    ARROW           shift and go to state 71
    LPAREN          shift and go to state 85
    ID              shift and go to state 70
    ICONST          shift and go to state 80
    TRUE            shift and go to state 96
    FALSE           shift and go to state 78
    CCONST          shift and go to state 86
    HAT             shift and go to state 74
    NULL            shift and go to state 97
    SCONST          shift and go to state 94
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    literal                        shift and go to state 68
    operand2                       shift and go to state 98
    array_location                 shift and go to state 72
    dereferenced_reference         shift and go to state 8
    parenthesized_expression       shift and go to state 76
    character_literal              shift and go to state 77
    value_array_slice              shift and go to state 79
    builtin_call                   shift and go to state 14
    array_element                  shift and go to state 5
    operand0                       shift and go to state 81
    operand1                       shift and go to state 83
    value_array_element            shift and go to state 95
    primitive_value                shift and go to state 82
    empty_literal                  shift and go to state 88
    call_action                    shift and go to state 89
    string_slice                   shift and go to state 24
    referenced_location            shift and go to state 90
    operand4                       shift and go to state 84
    expression                     shift and go to state 336
    conditional_expression         shift and go to state 92
    integer_literal                shift and go to state 93
    monadic_operator               shift and go to state 69
    location                       shift and go to state 34
    operand3                       shift and go to state 99
    builtin_name                   shift and go to state 36
    array_slice                    shift and go to state 38
    character_string_literal       shift and go to state 101
    identifier                     shift and go to state 102
    procedure_call                 shift and go to state 42
    boolean_literal                shift and go to state 103
    string_element                 shift and go to state 44

state 313

    (205) end_value -> TO . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (89) conditional_expression -> . IF expression then_expression else_expression FI
    (90) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (97) operand1 -> . operand2
    (98) operand1 -> . operand1 operator2 operand2
    (99) operand2 -> . operand3
    (100) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (101) operand3 -> . monadic_operator operand4
    (102) operand3 -> . operand4
    (109) monadic_operator -> . MINUS
    (110) monadic_operator -> . NOT
    (103) operand4 -> . array_location
    (104) operand4 -> . referenced_location
    (105) operand4 -> . primitive_value
    (85) array_location -> . location
    (111) referenced_location -> . ARROW array_location
    (128) primitive_value -> . literal
    (129) primitive_value -> . value_array_element
    (130) primitive_value -> . value_array_slice
    (131) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (132) literal -> . integer_literal
    (133) literal -> . boolean_literal
    (134) literal -> . character_literal
    (135) literal -> . empty_literal
    (136) literal -> . character_string_literal
    (137) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (138) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (88) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (139) integer_literal -> . ICONST
    (140) boolean_literal -> . TRUE
    (141) boolean_literal -> . FALSE
    (142) character_literal -> . CCONST
    (143) character_literal -> . HAT LPAREN ICONST RPAREN
    (144) empty_literal -> . NULL
    (145) character_string_literal -> . SCONST
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT

    IF              shift and go to state 104
    MINUS           shift and go to state 75
    NOT             shift and go to state 100
    ARROW           shift and go to state 71
    LPAREN          shift and go to state 85
    ID              shift and go to state 70
    ICONST          shift and go to state 80
    TRUE            shift and go to state 96
    FALSE           shift and go to state 78
    CCONST          shift and go to state 86
    HAT             shift and go to state 74
    NULL            shift and go to state 97
    SCONST          shift and go to state 94
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    literal                        shift and go to state 68
    operand2                       shift and go to state 98
    array_location                 shift and go to state 72
    dereferenced_reference         shift and go to state 8
    parenthesized_expression       shift and go to state 76
    character_literal              shift and go to state 77
    value_array_slice              shift and go to state 79
    builtin_call                   shift and go to state 14
    array_element                  shift and go to state 5
    operand0                       shift and go to state 81
    operand1                       shift and go to state 83
    value_array_element            shift and go to state 95
    primitive_value                shift and go to state 82
    empty_literal                  shift and go to state 88
    call_action                    shift and go to state 89
    string_slice                   shift and go to state 24
    referenced_location            shift and go to state 90
    operand4                       shift and go to state 84
    expression                     shift and go to state 337
    conditional_expression         shift and go to state 92
    integer_literal                shift and go to state 93
    monadic_operator               shift and go to state 69
    location                       shift and go to state 34
    operand3                       shift and go to state 99
    builtin_name                   shift and go to state 36
    array_slice                    shift and go to state 38
    character_string_literal       shift and go to state 101
    identifier                     shift and go to state 102
    procedure_call                 shift and go to state 42
    boolean_literal                shift and go to state 103
    string_element                 shift and go to state 44

state 314

    (203) step_enumeration -> identifier ASSIGN expression end_value .

    WHILE           reduce using rule 203 (step_enumeration -> identifier ASSIGN expression end_value .)
    SEMI            reduce using rule 203 (step_enumeration -> identifier ASSIGN expression end_value .)


state 315

    (202) step_enumeration -> identifier ASSIGN expression DOWN . end_value
    (205) end_value -> . TO expression

    TO              shift and go to state 313

    end_value                      shift and go to state 338

state 316

    (206) range_enumeration -> identifier DOWN IN discrete_mode .
    (53) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    WHILE           reduce using rule 206 (range_enumeration -> identifier DOWN IN discrete_mode .)
    SEMI            reduce using rule 206 (range_enumeration -> identifier DOWN IN discrete_mode .)
    LPAREN          shift and go to state 214


state 317

    (78) string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .

    ARROW           reduce using rule 78 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    LBRACKET        reduce using rule 78 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    TIMES           reduce using rule 78 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    DIVIDE          reduce using rule 78 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    MODULO          reduce using rule 78 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    PLUS            reduce using rule 78 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    MINUS           reduce using rule 78 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    CONCAT          reduce using rule 78 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    IN              reduce using rule 78 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    AND             reduce using rule 78 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    OR              reduce using rule 78 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    EQUAL           reduce using rule 78 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    NOTEQ           reduce using rule 78 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    GREATER         reduce using rule 78 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    GTEQUAL         reduce using rule 78 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    LESS            reduce using rule 78 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    LTEQUAL         reduce using rule 78 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    COLON           reduce using rule 78 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    COMMA           reduce using rule 78 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    RBRACKET        reduce using rule 78 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    SEMI            reduce using rule 78 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    THEN            reduce using rule 78 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    RPAREN          reduce using rule 78 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    ELSE            reduce using rule 78 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    ELSIF           reduce using rule 78 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    DOWN            reduce using rule 78 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    BY              reduce using rule 78 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    TO              reduce using rule 78 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    FI              reduce using rule 78 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    WHILE           reduce using rule 78 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    ASSIGN          reduce using rule 78 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)


state 318

    (166) else_clause -> ELSIF expression then_clause . else_clause
    (167) else_clause -> ELSIF expression then_clause .
    (165) else_clause -> . ELSE action_statement_list
    (166) else_clause -> . ELSIF expression then_clause else_clause
    (167) else_clause -> . ELSIF expression then_clause

    FI              reduce using rule 167 (else_clause -> ELSIF expression then_clause .)
    ELSE            shift and go to state 247
    ELSIF           shift and go to state 248

    else_clause                    shift and go to state 339

state 319

    (35) formal_parameter -> identifier_list mode LOC .

    COMMA           reduce using rule 35 (formal_parameter -> identifier_list mode LOC .)
    RPAREN          reduce using rule 35 (formal_parameter -> identifier_list mode LOC .)


state 320

    (37) result_spec -> RETURNS LPAREN . mode LOC RPAREN
    (38) result_spec -> RETURNS LPAREN . mode RPAREN
    (39) mode -> . mode_name
    (40) mode -> . discrete_mode
    (41) mode -> . reference_mode
    (42) mode -> . composite_mode
    (43) mode_name -> . identifier
    (44) discrete_mode -> . integer_mode
    (45) discrete_mode -> . boolean_mode
    (46) discrete_mode -> . character_mode
    (47) discrete_mode -> . discrete_range_mode
    (57) reference_mode -> . REF mode
    (58) composite_mode -> . string_mode
    (59) composite_mode -> . array_mode
    (23) identifier -> . ID
    (49) integer_mode -> . INT
    (50) boolean_mode -> . BOOL
    (51) character_mode -> . CHAR
    (52) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (53) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (60) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (62) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (48) discrete_mode_name -> . identifier

    REF             shift and go to state 139
    ID              shift and go to state 53
    INT             shift and go to state 142
    BOOL            shift and go to state 146
    CHAR            shift and go to state 137
    CHARS           shift and go to state 141
    ARRAY           shift and go to state 145

    boolean_mode                   shift and go to state 133
    array_mode                     shift and go to state 140
    string_mode                    shift and go to state 134
    integer_mode                   shift and go to state 135
    discrete_range_mode            shift and go to state 147
    reference_mode                 shift and go to state 136
    discrete_mode                  shift and go to state 144
    composite_mode                 shift and go to state 138
    mode                           shift and go to state 340
    identifier                     shift and go to state 149
    discrete_mode_name             shift and go to state 143
    mode_name                      shift and go to state 150
    character_mode                 shift and go to state 151

state 321

    (31) procedure_definition -> PROC LPAREN RPAREN result_spec SEMI . statement_nullable END SEMI
    (3) statement_nullable -> . statement statement_nullable
    (4) statement_nullable -> . empty
    (5) statement -> . declaration_statement
    (6) statement -> . synonym_statement
    (7) statement -> . newmode_statement
    (8) statement -> . action_statement
    (9) statement -> . procedure_statement
    (209) empty -> .
    (15) declaration_statement -> . DCL declaration_list SEMI
    (10) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (146) action_statement -> . identifier COLON action SEMI
    (147) action_statement -> . action SEMI
    (28) procedure_statement -> . ID COLON procedure_definition
    (23) identifier -> . ID
    (148) action -> . bracketed_action
    (149) action -> . assignment_action
    (150) action -> . call_action
    (151) action -> . exit_action
    (152) action -> . result_action
    (153) action -> . return_action
    (154) bracketed_action -> . if_action
    (155) bracketed_action -> . do_action
    (156) assignment_action -> . array_location assigning_operator expression
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (187) exit_action -> . EXIT identifier
    (191) result_action -> . RESULT expression
    (188) return_action -> . RETURN result
    (162) if_action -> . IF expression then_clause else_clause FI
    (163) if_action -> . IF expression then_clause FI
    (192) do_action -> . DO control_part SEMI action_statement_nullable OD
    (193) do_action -> . DO action_statement_nullable OD
    (85) array_location -> . location
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    END             reduce using rule 209 (empty -> .)
    DCL             shift and go to state 3
    SYN             shift and go to state 29
    TYPE            shift and go to state 18
    ID              shift and go to state 2
    EXIT            shift and go to state 30
    RESULT          shift and go to state 22
    RETURN          shift and go to state 12
    IF              shift and go to state 45
    DO              shift and go to state 26
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    action                         shift and go to state 1
    result_action                  shift and go to state 15
    array_location                 shift and go to state 6
    empty                          shift and go to state 105
    return_action                  shift and go to state 7
    dereferenced_reference         shift and go to state 8
    declaration_statement          shift and go to state 9
    exit_action                    shift and go to state 37
    bracketed_action               shift and go to state 17
    builtin_call                   shift and go to state 14
    array_element                  shift and go to state 5
    newmode_statement              shift and go to state 16
    statement                      shift and go to state 106
    procedure_statement            shift and go to state 19
    do_action                      shift and go to state 21
    identifier                     shift and go to state 41
    call_action                    shift and go to state 23
    string_slice                   shift and go to state 24
    location                       shift and go to state 34
    action_statement               shift and go to state 31
    statement_nullable             shift and go to state 341
    if_action                      shift and go to state 35
    builtin_name                   shift and go to state 36
    assignment_action              shift and go to state 11
    array_slice                    shift and go to state 38
    synonym_statement              shift and go to state 39
    procedure_call                 shift and go to state 42
    string_element                 shift and go to state 44

state 322

    (32) procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable . END SEMI

    END             shift and go to state 342


state 323

    (34) formal_parameter_list -> formal_parameter COMMA formal_parameter_list .

    RPAREN          reduce using rule 34 (formal_parameter_list -> formal_parameter COMMA formal_parameter_list .)


state 324

    (29) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec . SEMI statement_nullable END SEMI

    SEMI            shift and go to state 343


state 325

    (30) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI . statement_nullable END SEMI
    (3) statement_nullable -> . statement statement_nullable
    (4) statement_nullable -> . empty
    (5) statement -> . declaration_statement
    (6) statement -> . synonym_statement
    (7) statement -> . newmode_statement
    (8) statement -> . action_statement
    (9) statement -> . procedure_statement
    (209) empty -> .
    (15) declaration_statement -> . DCL declaration_list SEMI
    (10) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (146) action_statement -> . identifier COLON action SEMI
    (147) action_statement -> . action SEMI
    (28) procedure_statement -> . ID COLON procedure_definition
    (23) identifier -> . ID
    (148) action -> . bracketed_action
    (149) action -> . assignment_action
    (150) action -> . call_action
    (151) action -> . exit_action
    (152) action -> . result_action
    (153) action -> . return_action
    (154) bracketed_action -> . if_action
    (155) bracketed_action -> . do_action
    (156) assignment_action -> . array_location assigning_operator expression
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (187) exit_action -> . EXIT identifier
    (191) result_action -> . RESULT expression
    (188) return_action -> . RETURN result
    (162) if_action -> . IF expression then_clause else_clause FI
    (163) if_action -> . IF expression then_clause FI
    (192) do_action -> . DO control_part SEMI action_statement_nullable OD
    (193) do_action -> . DO action_statement_nullable OD
    (85) array_location -> . location
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    END             reduce using rule 209 (empty -> .)
    DCL             shift and go to state 3
    SYN             shift and go to state 29
    TYPE            shift and go to state 18
    ID              shift and go to state 2
    EXIT            shift and go to state 30
    RESULT          shift and go to state 22
    RETURN          shift and go to state 12
    IF              shift and go to state 45
    DO              shift and go to state 26
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    action                         shift and go to state 1
    result_action                  shift and go to state 15
    array_location                 shift and go to state 6
    empty                          shift and go to state 105
    return_action                  shift and go to state 7
    dereferenced_reference         shift and go to state 8
    declaration_statement          shift and go to state 9
    exit_action                    shift and go to state 37
    bracketed_action               shift and go to state 17
    builtin_call                   shift and go to state 14
    array_element                  shift and go to state 5
    newmode_statement              shift and go to state 16
    statement                      shift and go to state 106
    procedure_statement            shift and go to state 19
    do_action                      shift and go to state 21
    identifier                     shift and go to state 41
    call_action                    shift and go to state 23
    string_slice                   shift and go to state 24
    action_statement               shift and go to state 31
    statement_nullable             shift and go to state 344
    location                       shift and go to state 34
    if_action                      shift and go to state 35
    builtin_name                   shift and go to state 36
    assignment_action              shift and go to state 11
    array_slice                    shift and go to state 38
    synonym_statement              shift and go to state 39
    procedure_call                 shift and go to state 42
    string_element                 shift and go to state 44

state 326

    (54) literal_range -> lower_bound COLON upper_bound .

    COMMA           reduce using rule 54 (literal_range -> lower_bound COLON upper_bound .)
    RBRACKET        reduce using rule 54 (literal_range -> lower_bound COLON upper_bound .)
    RPAREN          reduce using rule 54 (literal_range -> lower_bound COLON upper_bound .)


state 327

    (64) index_mode_list -> index_mode COMMA index_mode_list .

    RBRACKET        reduce using rule 64 (index_mode_list -> index_mode COMMA index_mode_list .)


state 328

    (62) array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .

    ASSIGN          reduce using rule 62 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)
    COMMA           reduce using rule 62 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)
    SEMI            reduce using rule 62 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)
    LOC             reduce using rule 62 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)
    RPAREN          reduce using rule 62 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)


state 329

    (67) element_mode -> mode .

    ASSIGN          reduce using rule 67 (element_mode -> mode .)
    COMMA           reduce using rule 67 (element_mode -> mode .)
    SEMI            reduce using rule 67 (element_mode -> mode .)
    LOC             reduce using rule 67 (element_mode -> mode .)
    RPAREN          reduce using rule 67 (element_mode -> mode .)


state 330

    (138) value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .

    LBRACKET        reduce using rule 138 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    TIMES           reduce using rule 138 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    DIVIDE          reduce using rule 138 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    MODULO          reduce using rule 138 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    PLUS            reduce using rule 138 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    MINUS           reduce using rule 138 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    CONCAT          reduce using rule 138 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    IN              reduce using rule 138 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    AND             reduce using rule 138 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    OR              reduce using rule 138 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    EQUAL           reduce using rule 138 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    NOTEQ           reduce using rule 138 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    GREATER         reduce using rule 138 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    GTEQUAL         reduce using rule 138 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    LESS            reduce using rule 138 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    LTEQUAL         reduce using rule 138 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    RBRACKET        reduce using rule 138 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    COLON           reduce using rule 138 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    COMMA           reduce using rule 138 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    RPAREN          reduce using rule 138 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    WHILE           reduce using rule 138 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    SEMI            reduce using rule 138 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    DOWN            reduce using rule 138 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    BY              reduce using rule 138 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    TO              reduce using rule 138 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    FI              reduce using rule 138 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    THEN            reduce using rule 138 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    ELSE            reduce using rule 138 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    ELSIF           reduce using rule 138 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)


state 331

    (93) elsif_expression -> ELSIF expression then_expression .

    ELSIF           reduce using rule 93 (elsif_expression -> ELSIF expression then_expression .)
    ELSE            reduce using rule 93 (elsif_expression -> ELSIF expression then_expression .)


state 332

    (90) conditional_expression -> IF expression then_expression elsif_expression else_expression FI .

    WHILE           reduce using rule 90 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    SEMI            reduce using rule 90 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    THEN            reduce using rule 90 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    COMMA           reduce using rule 90 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    RBRACKET        reduce using rule 90 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    COLON           reduce using rule 90 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    RPAREN          reduce using rule 90 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    FI              reduce using rule 90 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    ELSE            reduce using rule 90 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    ELSIF           reduce using rule 90 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    DOWN            reduce using rule 90 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    BY              reduce using rule 90 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    TO              reduce using rule 90 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)


state 333

    (94) elsif_expression -> elsif_expression ELSIF expression . then_expression
    (91) then_expression -> . THEN expression

    THEN            shift and go to state 230

    then_expression                shift and go to state 345

state 334

    (201) step_enumeration -> identifier ASSIGN expression step_value end_value .

    WHILE           reduce using rule 201 (step_enumeration -> identifier ASSIGN expression step_value end_value .)
    SEMI            reduce using rule 201 (step_enumeration -> identifier ASSIGN expression step_value end_value .)


state 335

    (200) step_enumeration -> identifier ASSIGN expression step_value DOWN . end_value
    (205) end_value -> . TO expression

    TO              shift and go to state 313

    end_value                      shift and go to state 346

state 336

    (204) step_value -> BY expression .

    DOWN            reduce using rule 204 (step_value -> BY expression .)
    TO              reduce using rule 204 (step_value -> BY expression .)


state 337

    (205) end_value -> TO expression .

    WHILE           reduce using rule 205 (end_value -> TO expression .)
    SEMI            reduce using rule 205 (end_value -> TO expression .)


state 338

    (202) step_enumeration -> identifier ASSIGN expression DOWN end_value .

    WHILE           reduce using rule 202 (step_enumeration -> identifier ASSIGN expression DOWN end_value .)
    SEMI            reduce using rule 202 (step_enumeration -> identifier ASSIGN expression DOWN end_value .)


state 339

    (166) else_clause -> ELSIF expression then_clause else_clause .

    FI              reduce using rule 166 (else_clause -> ELSIF expression then_clause else_clause .)


state 340

    (37) result_spec -> RETURNS LPAREN mode . LOC RPAREN
    (38) result_spec -> RETURNS LPAREN mode . RPAREN

    LOC             shift and go to state 348
    RPAREN          shift and go to state 347


state 341

    (31) procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable . END SEMI

    END             shift and go to state 349


state 342

    (32) procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END . SEMI

    SEMI            shift and go to state 350


state 343

    (29) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI . statement_nullable END SEMI
    (3) statement_nullable -> . statement statement_nullable
    (4) statement_nullable -> . empty
    (5) statement -> . declaration_statement
    (6) statement -> . synonym_statement
    (7) statement -> . newmode_statement
    (8) statement -> . action_statement
    (9) statement -> . procedure_statement
    (209) empty -> .
    (15) declaration_statement -> . DCL declaration_list SEMI
    (10) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (146) action_statement -> . identifier COLON action SEMI
    (147) action_statement -> . action SEMI
    (28) procedure_statement -> . ID COLON procedure_definition
    (23) identifier -> . ID
    (148) action -> . bracketed_action
    (149) action -> . assignment_action
    (150) action -> . call_action
    (151) action -> . exit_action
    (152) action -> . result_action
    (153) action -> . return_action
    (154) bracketed_action -> . if_action
    (155) bracketed_action -> . do_action
    (156) assignment_action -> . array_location assigning_operator expression
    (171) call_action -> . procedure_call
    (172) call_action -> . builtin_call
    (187) exit_action -> . EXIT identifier
    (191) result_action -> . RESULT expression
    (188) return_action -> . RETURN result
    (162) if_action -> . IF expression then_clause else_clause FI
    (163) if_action -> . IF expression then_clause FI
    (192) do_action -> . DO control_part SEMI action_statement_nullable OD
    (193) do_action -> . DO action_statement_nullable OD
    (85) array_location -> . location
    (183) procedure_call -> . ID LPAREN parameter_list RPAREN
    (184) procedure_call -> . ID LPAREN RPAREN
    (173) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (174) builtin_call -> . builtin_name LPAREN RPAREN
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . string_element
    (71) location -> . string_slice
    (72) location -> . array_element
    (73) location -> . array_slice
    (74) location -> . call_action
    (175) builtin_name -> . ABS
    (176) builtin_name -> . ASC
    (177) builtin_name -> . NUM
    (178) builtin_name -> . UPPER
    (179) builtin_name -> . LOWER
    (180) builtin_name -> . LENGTH
    (181) builtin_name -> . READ
    (182) builtin_name -> . PRINT
    (75) dereferenced_reference -> . array_location ARROW
    (76) string_element -> . identifier LBRACKET start_element RBRACKET
    (78) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (81) array_element -> . array_location LBRACKET expression_list RBRACKET
    (84) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    END             reduce using rule 209 (empty -> .)
    DCL             shift and go to state 3
    SYN             shift and go to state 29
    TYPE            shift and go to state 18
    ID              shift and go to state 2
    EXIT            shift and go to state 30
    RESULT          shift and go to state 22
    RETURN          shift and go to state 12
    IF              shift and go to state 45
    DO              shift and go to state 26
    ABS             shift and go to state 33
    ASC             shift and go to state 32
    NUM             shift and go to state 20
    UPPER           shift and go to state 43
    LOWER           shift and go to state 28
    LENGTH          shift and go to state 4
    READ            shift and go to state 10
    PRINT           shift and go to state 27

    action                         shift and go to state 1
    result_action                  shift and go to state 15
    array_location                 shift and go to state 6
    empty                          shift and go to state 105
    return_action                  shift and go to state 7
    dereferenced_reference         shift and go to state 8
    declaration_statement          shift and go to state 9
    exit_action                    shift and go to state 37
    bracketed_action               shift and go to state 17
    builtin_call                   shift and go to state 14
    array_element                  shift and go to state 5
    newmode_statement              shift and go to state 16
    statement                      shift and go to state 106
    procedure_statement            shift and go to state 19
    do_action                      shift and go to state 21
    identifier                     shift and go to state 41
    call_action                    shift and go to state 23
    string_slice                   shift and go to state 24
    location                       shift and go to state 34
    action_statement               shift and go to state 31
    statement_nullable             shift and go to state 351
    if_action                      shift and go to state 35
    builtin_name                   shift and go to state 36
    assignment_action              shift and go to state 11
    array_slice                    shift and go to state 38
    synonym_statement              shift and go to state 39
    procedure_call                 shift and go to state 42
    string_element                 shift and go to state 44

state 344

    (30) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable . END SEMI

    END             shift and go to state 352


state 345

    (94) elsif_expression -> elsif_expression ELSIF expression then_expression .

    ELSIF           reduce using rule 94 (elsif_expression -> elsif_expression ELSIF expression then_expression .)
    ELSE            reduce using rule 94 (elsif_expression -> elsif_expression ELSIF expression then_expression .)


state 346

    (200) step_enumeration -> identifier ASSIGN expression step_value DOWN end_value .

    WHILE           reduce using rule 200 (step_enumeration -> identifier ASSIGN expression step_value DOWN end_value .)
    SEMI            reduce using rule 200 (step_enumeration -> identifier ASSIGN expression step_value DOWN end_value .)


state 347

    (38) result_spec -> RETURNS LPAREN mode RPAREN .

    SEMI            reduce using rule 38 (result_spec -> RETURNS LPAREN mode RPAREN .)


state 348

    (37) result_spec -> RETURNS LPAREN mode LOC . RPAREN

    RPAREN          shift and go to state 353


state 349

    (31) procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END . SEMI

    SEMI            shift and go to state 354


state 350

    (32) procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI .

    DCL             reduce using rule 32 (procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI .)
    SYN             reduce using rule 32 (procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI .)
    TYPE            reduce using rule 32 (procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI .)
    ID              reduce using rule 32 (procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI .)
    EXIT            reduce using rule 32 (procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI .)
    RESULT          reduce using rule 32 (procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI .)
    RETURN          reduce using rule 32 (procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI .)
    IF              reduce using rule 32 (procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI .)
    DO              reduce using rule 32 (procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI .)
    ABS             reduce using rule 32 (procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI .)
    ASC             reduce using rule 32 (procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI .)
    NUM             reduce using rule 32 (procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI .)
    UPPER           reduce using rule 32 (procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI .)
    LOWER           reduce using rule 32 (procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI .)
    LENGTH          reduce using rule 32 (procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI .)
    READ            reduce using rule 32 (procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI .)
    PRINT           reduce using rule 32 (procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI .)
    $end            reduce using rule 32 (procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI .)
    END             reduce using rule 32 (procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI .)


state 351

    (29) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable . END SEMI

    END             shift and go to state 355


state 352

    (30) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END . SEMI

    SEMI            shift and go to state 356


state 353

    (37) result_spec -> RETURNS LPAREN mode LOC RPAREN .

    SEMI            reduce using rule 37 (result_spec -> RETURNS LPAREN mode LOC RPAREN .)


state 354

    (31) procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI .

    DCL             reduce using rule 31 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI .)
    SYN             reduce using rule 31 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI .)
    TYPE            reduce using rule 31 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI .)
    ID              reduce using rule 31 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI .)
    EXIT            reduce using rule 31 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI .)
    RESULT          reduce using rule 31 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI .)
    RETURN          reduce using rule 31 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI .)
    IF              reduce using rule 31 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI .)
    DO              reduce using rule 31 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI .)
    ABS             reduce using rule 31 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI .)
    ASC             reduce using rule 31 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI .)
    NUM             reduce using rule 31 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI .)
    UPPER           reduce using rule 31 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI .)
    LOWER           reduce using rule 31 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI .)
    LENGTH          reduce using rule 31 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI .)
    READ            reduce using rule 31 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI .)
    PRINT           reduce using rule 31 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI .)
    $end            reduce using rule 31 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI .)
    END             reduce using rule 31 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI .)


state 355

    (29) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END . SEMI

    SEMI            shift and go to state 357


state 356

    (30) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .

    DCL             reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    SYN             reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    TYPE            reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    ID              reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    EXIT            reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    RESULT          reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    RETURN          reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    IF              reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    DO              reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    ABS             reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    ASC             reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    NUM             reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    UPPER           reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    LOWER           reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    LENGTH          reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    READ            reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    PRINT           reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    $end            reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    END             reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)


state 357

    (29) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .

    DCL             reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    SYN             reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    TYPE            reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    ID              reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    EXIT            reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    RESULT          reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    RETURN          reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    IF              reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    DO              reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    ABS             reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    ASC             reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    NUM             reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    UPPER           reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    LOWER           reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    LENGTH          reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    READ            reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    PRINT           reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    $end            reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    END             reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COLON in state 2 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 41 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 70 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 102 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 265 resolved as shift
