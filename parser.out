Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    DO
    LOWER
    RETURN
    THEN
    WHILE
    TO
    PRINT
    FI
    BY
    ASC
    READ
    NUM
    IF
    FOR
    UPPER
    END
    LOC
    RETURNS
    ABS
    RESULT
    ARROW
    ELSE
    DOWN
    OD
    ELSIF
    LENGTH
    EXIT
    PROC

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement statement_nullable
Rule 3     statement_nullable -> statement statement_nullable
Rule 4     statement_nullable -> empty
Rule 5     statement -> declaration_statement
Rule 6     statement -> synonym_statement
Rule 7     statement -> newmode_statement
Rule 8     synonym_statement -> SYN synonym_list SEMI
Rule 9     synonym_list -> synonym_definition
Rule 10    synonym_list -> synonym_definition COMMA synonym_list
Rule 11    synonym_definition -> identifier_list mode ASSIGN expression
Rule 12    synonym_definition -> identifier_list ASSIGN expression
Rule 13    newmode_statement -> TYPE newmode_list SEMI
Rule 14    newmode_list -> mode_definition
Rule 15    newmode_list -> mode_definition COMMA newmode_list
Rule 16    mode_definition -> identifier_list ASSIGN mode
Rule 17    declaration_statement -> DCL declaration_list SEMI
Rule 18    declaration_list -> declaration
Rule 19    declaration_list -> declaration COMMA declaration_list
Rule 20    declaration -> identifier_list mode initialization
Rule 21    declaration -> identifier_list mode
Rule 22    initialization -> ASSIGN expression
Rule 23    identifier_list -> ID
Rule 24    identifier_list -> ID COMMA identifier_list
Rule 25    mode -> mode_name
Rule 26    mode -> discrete_mode
Rule 27    mode -> reference_mode
Rule 28    mode -> composite_mode
Rule 29    mode_name -> ID
Rule 30    discrete_mode -> integer_mode
Rule 31    discrete_mode -> boolean_mode
Rule 32    discrete_mode -> character_mode
Rule 33    discrete_mode -> discrete_range_mode
Rule 34    integer_mode -> INT
Rule 35    boolean_mode -> BOOL
Rule 36    character_mode -> CHAR
Rule 37    discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN
Rule 38    discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN
Rule 39    literal_range -> lower_bound COLON upper_bound
Rule 40    lower_bound -> expression
Rule 41    upper_bound -> expression
Rule 42    discrete_mode_name -> ID
Rule 43    reference_mode -> REF mode
Rule 44    composite_mode -> string_mode
Rule 45    composite_mode -> array_mode
Rule 46    string_mode -> CHARS LBRACKET string_length RBRACKET
Rule 47    string_length -> integer_literal
Rule 48    array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode
Rule 49    index_mode_list -> index_mode
Rule 50    index_mode_list -> index_mode COMMA index_mode_list
Rule 51    index_mode -> discrete_mode
Rule 52    index_mode -> literal_range
Rule 53    element_mode -> mode
Rule 54    expression -> operand0
Rule 55    operand0 -> operand1
Rule 56    operand0 -> operand0 operator1 operand1
Rule 57    operand1 -> operand2
Rule 58    operand1 -> operand1 operator2 operand2
Rule 59    operand2 -> operand3
Rule 60    operand2 -> operand2 arithmetic_multiplicative_operator operand3
Rule 61    operand3 -> monadic_operator operand4
Rule 62    operand3 -> operand4
Rule 63    operand4 -> primitive_value
Rule 64    arithmetic_multiplicative_operator -> TIMES
Rule 65    arithmetic_multiplicative_operator -> DIVIDE
Rule 66    arithmetic_multiplicative_operator -> MODULO
Rule 67    monadic_operator -> MINUS
Rule 68    monadic_operator -> NOT
Rule 69    operator1 -> relational_operator
Rule 70    operator1 -> membership_operator
Rule 71    operator2 -> arithmetic_additive_operator
Rule 72    operator2 -> string_concatenation_operator
Rule 73    arithmetic_additive_operator -> PLUS
Rule 74    arithmetic_additive_operator -> MINUS
Rule 75    string_concatenation_operator -> CONCAT
Rule 76    relational_operator -> AND
Rule 77    relational_operator -> OR
Rule 78    relational_operator -> EQUAL
Rule 79    relational_operator -> NOTEQ
Rule 80    relational_operator -> GREATER
Rule 81    relational_operator -> GTEQUAL
Rule 82    relational_operator -> LESS
Rule 83    relational_operator -> LTEQUAL
Rule 84    membership_operator -> IN
Rule 85    primitive_value -> literal
Rule 86    literal -> integer_literal
Rule 87    literal -> boolean_literal
Rule 88    literal -> character_literal
Rule 89    literal -> empty_literal
Rule 90    literal -> character_string_literal
Rule 91    integer_literal -> ICONST
Rule 92    boolean_literal -> TRUE
Rule 93    boolean_literal -> FALSE
Rule 94    character_literal -> CCONST
Rule 95    empty_literal -> NULL
Rule 96    character_string_literal -> SCONST
Rule 97    empty -> <empty>

Terminals, with rules where they appear

ABS                  : 
AND                  : 76
ARRAY                : 48
ARROW                : 
ASC                  : 
ASSIGN               : 11 12 16 22
BOOL                 : 35
BY                   : 
CCONST               : 94
CHAR                 : 36
CHARS                : 46
COLON                : 39
COMMA                : 10 15 19 24 50
CONCAT               : 75
DCL                  : 17
DIVIDE               : 65
DO                   : 
DOWN                 : 
ELSE                 : 
ELSIF                : 
END                  : 
EQUAL                : 78
EXIT                 : 
FALSE                : 93
FI                   : 
FOR                  : 
GREATER              : 80
GTEQUAL              : 81
ICONST               : 91
ID                   : 23 24 29 42
IF                   : 
IN                   : 84
INT                  : 34
LBRACKET             : 46 48
LENGTH               : 
LESS                 : 82
LOC                  : 
LOWER                : 
LPAREN               : 37 38
LTEQUAL              : 83
MINUS                : 67 74
MODULO               : 66
NOT                  : 68
NOTEQ                : 79
NULL                 : 95
NUM                  : 
OD                   : 
OR                   : 77
PLUS                 : 73
PRINT                : 
PROC                 : 
RBRACKET             : 46 48
READ                 : 
REF                  : 43
RESULT               : 
RETURN               : 
RETURNS              : 
RPAREN               : 37 38
SCONST               : 96
SEMI                 : 8 13 17
SYN                  : 8
THEN                 : 
TIMES                : 64
TO                   : 
TRUE                 : 92
TYPE                 : 13
UPPER                : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

arithmetic_additive_operator : 71
arithmetic_multiplicative_operator : 60
array_mode           : 45
boolean_literal      : 87
boolean_mode         : 31
character_literal    : 88
character_mode       : 32
character_string_literal : 90
composite_mode       : 28
declaration          : 18 19
declaration_list     : 17 19
declaration_statement : 5
discrete_mode        : 26 38 51
discrete_mode_name   : 37
discrete_range_mode  : 33
element_mode         : 48
empty                : 4
empty_literal        : 89
expression           : 11 12 22 40 41
identifier_list      : 11 12 16 20 21 24
index_mode           : 49 50
index_mode_list      : 48 50
initialization       : 20
integer_literal      : 47 86
integer_mode         : 30
literal              : 85
literal_range        : 37 38 52
lower_bound          : 39
membership_operator  : 70
mode                 : 11 16 20 21 43 53
mode_definition      : 14 15
mode_name            : 25
monadic_operator     : 61
newmode_list         : 13 15
newmode_statement    : 7
operand0             : 54 56
operand1             : 55 56 58
operand2             : 57 58 60
operand3             : 59 60
operand4             : 61 62
operator1            : 56
operator2            : 58
primitive_value      : 63
program              : 0
reference_mode       : 27
relational_operator  : 69
statement            : 2 3
statement_list       : 1
statement_nullable   : 2 3
string_concatenation_operator : 72
string_length        : 46
string_mode          : 44
synonym_definition   : 9 10
synonym_list         : 8 10
synonym_statement    : 6
upper_bound          : 39

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement statement_nullable
    (5) statement -> . declaration_statement
    (6) statement -> . synonym_statement
    (7) statement -> . newmode_statement
    (17) declaration_statement -> . DCL declaration_list SEMI
    (8) synonym_statement -> . SYN synonym_list SEMI
    (13) newmode_statement -> . TYPE newmode_list SEMI

    DCL             shift and go to state 1
    SYN             shift and go to state 4
    TYPE            shift and go to state 3

    synonym_statement              shift and go to state 2
    program                        shift and go to state 5
    statement                      shift and go to state 6
    declaration_statement          shift and go to state 7
    statement_list                 shift and go to state 8
    newmode_statement              shift and go to state 9

state 1

    (17) declaration_statement -> DCL . declaration_list SEMI
    (18) declaration_list -> . declaration
    (19) declaration_list -> . declaration COMMA declaration_list
    (20) declaration -> . identifier_list mode initialization
    (21) declaration -> . identifier_list mode
    (23) identifier_list -> . ID
    (24) identifier_list -> . ID COMMA identifier_list

    ID              shift and go to state 13

    declaration                    shift and go to state 11
    identifier_list                shift and go to state 12
    declaration_list               shift and go to state 10

state 2

    (6) statement -> synonym_statement .

    DCL             reduce using rule 6 (statement -> synonym_statement .)
    SYN             reduce using rule 6 (statement -> synonym_statement .)
    TYPE            reduce using rule 6 (statement -> synonym_statement .)
    $end            reduce using rule 6 (statement -> synonym_statement .)


state 3

    (13) newmode_statement -> TYPE . newmode_list SEMI
    (14) newmode_list -> . mode_definition
    (15) newmode_list -> . mode_definition COMMA newmode_list
    (16) mode_definition -> . identifier_list ASSIGN mode
    (23) identifier_list -> . ID
    (24) identifier_list -> . ID COMMA identifier_list

    ID              shift and go to state 13

    mode_definition                shift and go to state 14
    newmode_list                   shift and go to state 15
    identifier_list                shift and go to state 16

state 4

    (8) synonym_statement -> SYN . synonym_list SEMI
    (9) synonym_list -> . synonym_definition
    (10) synonym_list -> . synonym_definition COMMA synonym_list
    (11) synonym_definition -> . identifier_list mode ASSIGN expression
    (12) synonym_definition -> . identifier_list ASSIGN expression
    (23) identifier_list -> . ID
    (24) identifier_list -> . ID COMMA identifier_list

    ID              shift and go to state 13

    synonym_definition             shift and go to state 17
    identifier_list                shift and go to state 19
    synonym_list                   shift and go to state 18

state 5

    (0) S' -> program .



state 6

    (2) statement_list -> statement . statement_nullable
    (3) statement_nullable -> . statement statement_nullable
    (4) statement_nullable -> . empty
    (5) statement -> . declaration_statement
    (6) statement -> . synonym_statement
    (7) statement -> . newmode_statement
    (97) empty -> .
    (17) declaration_statement -> . DCL declaration_list SEMI
    (8) synonym_statement -> . SYN synonym_list SEMI
    (13) newmode_statement -> . TYPE newmode_list SEMI

    $end            reduce using rule 97 (empty -> .)
    DCL             shift and go to state 1
    SYN             shift and go to state 4
    TYPE            shift and go to state 3

    statement_nullable             shift and go to state 20
    synonym_statement              shift and go to state 2
    declaration_statement          shift and go to state 7
    statement                      shift and go to state 21
    newmode_statement              shift and go to state 9
    empty                          shift and go to state 22

state 7

    (5) statement -> declaration_statement .

    DCL             reduce using rule 5 (statement -> declaration_statement .)
    SYN             reduce using rule 5 (statement -> declaration_statement .)
    TYPE            reduce using rule 5 (statement -> declaration_statement .)
    $end            reduce using rule 5 (statement -> declaration_statement .)


state 8

    (1) program -> statement_list .

    $end            reduce using rule 1 (program -> statement_list .)


state 9

    (7) statement -> newmode_statement .

    DCL             reduce using rule 7 (statement -> newmode_statement .)
    SYN             reduce using rule 7 (statement -> newmode_statement .)
    TYPE            reduce using rule 7 (statement -> newmode_statement .)
    $end            reduce using rule 7 (statement -> newmode_statement .)


state 10

    (17) declaration_statement -> DCL declaration_list . SEMI

    SEMI            shift and go to state 23


state 11

    (18) declaration_list -> declaration .
    (19) declaration_list -> declaration . COMMA declaration_list

    SEMI            reduce using rule 18 (declaration_list -> declaration .)
    COMMA           shift and go to state 24


state 12

    (20) declaration -> identifier_list . mode initialization
    (21) declaration -> identifier_list . mode
    (25) mode -> . mode_name
    (26) mode -> . discrete_mode
    (27) mode -> . reference_mode
    (28) mode -> . composite_mode
    (29) mode_name -> . ID
    (30) discrete_mode -> . integer_mode
    (31) discrete_mode -> . boolean_mode
    (32) discrete_mode -> . character_mode
    (33) discrete_mode -> . discrete_range_mode
    (43) reference_mode -> . REF mode
    (44) composite_mode -> . string_mode
    (45) composite_mode -> . array_mode
    (34) integer_mode -> . INT
    (35) boolean_mode -> . BOOL
    (36) character_mode -> . CHAR
    (37) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (38) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (46) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (48) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (42) discrete_mode_name -> . ID

    ID              shift and go to state 36
    REF             shift and go to state 30
    INT             shift and go to state 40
    BOOL            shift and go to state 42
    CHAR            shift and go to state 26
    CHARS           shift and go to state 38
    ARRAY           shift and go to state 34

    string_mode                    shift and go to state 32
    array_mode                     shift and go to state 31
    discrete_range_mode            shift and go to state 37
    discrete_mode_name             shift and go to state 28
    boolean_mode                   shift and go to state 25
    character_mode                 shift and go to state 39
    reference_mode                 shift and go to state 27
    composite_mode                 shift and go to state 41
    integer_mode                   shift and go to state 35
    mode                           shift and go to state 43
    discrete_mode                  shift and go to state 29
    mode_name                      shift and go to state 33

state 13

    (23) identifier_list -> ID .
    (24) identifier_list -> ID . COMMA identifier_list

    ID              reduce using rule 23 (identifier_list -> ID .)
    REF             reduce using rule 23 (identifier_list -> ID .)
    INT             reduce using rule 23 (identifier_list -> ID .)
    BOOL            reduce using rule 23 (identifier_list -> ID .)
    CHAR            reduce using rule 23 (identifier_list -> ID .)
    CHARS           reduce using rule 23 (identifier_list -> ID .)
    ARRAY           reduce using rule 23 (identifier_list -> ID .)
    ASSIGN          reduce using rule 23 (identifier_list -> ID .)
    COMMA           shift and go to state 44


state 14

    (14) newmode_list -> mode_definition .
    (15) newmode_list -> mode_definition . COMMA newmode_list

    SEMI            reduce using rule 14 (newmode_list -> mode_definition .)
    COMMA           shift and go to state 45


state 15

    (13) newmode_statement -> TYPE newmode_list . SEMI

    SEMI            shift and go to state 46


state 16

    (16) mode_definition -> identifier_list . ASSIGN mode

    ASSIGN          shift and go to state 47


state 17

    (9) synonym_list -> synonym_definition .
    (10) synonym_list -> synonym_definition . COMMA synonym_list

    SEMI            reduce using rule 9 (synonym_list -> synonym_definition .)
    COMMA           shift and go to state 48


state 18

    (8) synonym_statement -> SYN synonym_list . SEMI

    SEMI            shift and go to state 49


state 19

    (11) synonym_definition -> identifier_list . mode ASSIGN expression
    (12) synonym_definition -> identifier_list . ASSIGN expression
    (25) mode -> . mode_name
    (26) mode -> . discrete_mode
    (27) mode -> . reference_mode
    (28) mode -> . composite_mode
    (29) mode_name -> . ID
    (30) discrete_mode -> . integer_mode
    (31) discrete_mode -> . boolean_mode
    (32) discrete_mode -> . character_mode
    (33) discrete_mode -> . discrete_range_mode
    (43) reference_mode -> . REF mode
    (44) composite_mode -> . string_mode
    (45) composite_mode -> . array_mode
    (34) integer_mode -> . INT
    (35) boolean_mode -> . BOOL
    (36) character_mode -> . CHAR
    (37) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (38) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (46) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (48) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (42) discrete_mode_name -> . ID

    ASSIGN          shift and go to state 50
    ID              shift and go to state 36
    REF             shift and go to state 30
    INT             shift and go to state 40
    BOOL            shift and go to state 42
    CHAR            shift and go to state 26
    CHARS           shift and go to state 38
    ARRAY           shift and go to state 34

    string_mode                    shift and go to state 32
    array_mode                     shift and go to state 31
    discrete_range_mode            shift and go to state 37
    discrete_mode_name             shift and go to state 28
    boolean_mode                   shift and go to state 25
    character_mode                 shift and go to state 39
    reference_mode                 shift and go to state 27
    composite_mode                 shift and go to state 41
    integer_mode                   shift and go to state 35
    mode                           shift and go to state 51
    discrete_mode                  shift and go to state 29
    mode_name                      shift and go to state 33

state 20

    (2) statement_list -> statement statement_nullable .

    $end            reduce using rule 2 (statement_list -> statement statement_nullable .)


state 21

    (3) statement_nullable -> statement . statement_nullable
    (3) statement_nullable -> . statement statement_nullable
    (4) statement_nullable -> . empty
    (5) statement -> . declaration_statement
    (6) statement -> . synonym_statement
    (7) statement -> . newmode_statement
    (97) empty -> .
    (17) declaration_statement -> . DCL declaration_list SEMI
    (8) synonym_statement -> . SYN synonym_list SEMI
    (13) newmode_statement -> . TYPE newmode_list SEMI

    $end            reduce using rule 97 (empty -> .)
    DCL             shift and go to state 1
    SYN             shift and go to state 4
    TYPE            shift and go to state 3

    statement_nullable             shift and go to state 52
    synonym_statement              shift and go to state 2
    declaration_statement          shift and go to state 7
    statement                      shift and go to state 21
    newmode_statement              shift and go to state 9
    empty                          shift and go to state 22

state 22

    (4) statement_nullable -> empty .

    $end            reduce using rule 4 (statement_nullable -> empty .)


state 23

    (17) declaration_statement -> DCL declaration_list SEMI .

    DCL             reduce using rule 17 (declaration_statement -> DCL declaration_list SEMI .)
    SYN             reduce using rule 17 (declaration_statement -> DCL declaration_list SEMI .)
    TYPE            reduce using rule 17 (declaration_statement -> DCL declaration_list SEMI .)
    $end            reduce using rule 17 (declaration_statement -> DCL declaration_list SEMI .)


state 24

    (19) declaration_list -> declaration COMMA . declaration_list
    (18) declaration_list -> . declaration
    (19) declaration_list -> . declaration COMMA declaration_list
    (20) declaration -> . identifier_list mode initialization
    (21) declaration -> . identifier_list mode
    (23) identifier_list -> . ID
    (24) identifier_list -> . ID COMMA identifier_list

    ID              shift and go to state 13

    declaration_list               shift and go to state 53
    identifier_list                shift and go to state 12
    declaration                    shift and go to state 11

state 25

    (31) discrete_mode -> boolean_mode .

    LPAREN          reduce using rule 31 (discrete_mode -> boolean_mode .)
    ASSIGN          reduce using rule 31 (discrete_mode -> boolean_mode .)
    COMMA           reduce using rule 31 (discrete_mode -> boolean_mode .)
    SEMI            reduce using rule 31 (discrete_mode -> boolean_mode .)
    RBRACKET        reduce using rule 31 (discrete_mode -> boolean_mode .)


state 26

    (36) character_mode -> CHAR .

    LPAREN          reduce using rule 36 (character_mode -> CHAR .)
    ASSIGN          reduce using rule 36 (character_mode -> CHAR .)
    COMMA           reduce using rule 36 (character_mode -> CHAR .)
    SEMI            reduce using rule 36 (character_mode -> CHAR .)
    RBRACKET        reduce using rule 36 (character_mode -> CHAR .)


state 27

    (27) mode -> reference_mode .

    ASSIGN          reduce using rule 27 (mode -> reference_mode .)
    COMMA           reduce using rule 27 (mode -> reference_mode .)
    SEMI            reduce using rule 27 (mode -> reference_mode .)


state 28

    (37) discrete_range_mode -> discrete_mode_name . LPAREN literal_range RPAREN

    LPAREN          shift and go to state 54


state 29

    (26) mode -> discrete_mode .
    (38) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    ASSIGN          reduce using rule 26 (mode -> discrete_mode .)
    COMMA           reduce using rule 26 (mode -> discrete_mode .)
    SEMI            reduce using rule 26 (mode -> discrete_mode .)
    LPAREN          shift and go to state 55


state 30

    (43) reference_mode -> REF . mode
    (25) mode -> . mode_name
    (26) mode -> . discrete_mode
    (27) mode -> . reference_mode
    (28) mode -> . composite_mode
    (29) mode_name -> . ID
    (30) discrete_mode -> . integer_mode
    (31) discrete_mode -> . boolean_mode
    (32) discrete_mode -> . character_mode
    (33) discrete_mode -> . discrete_range_mode
    (43) reference_mode -> . REF mode
    (44) composite_mode -> . string_mode
    (45) composite_mode -> . array_mode
    (34) integer_mode -> . INT
    (35) boolean_mode -> . BOOL
    (36) character_mode -> . CHAR
    (37) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (38) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (46) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (48) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (42) discrete_mode_name -> . ID

    ID              shift and go to state 36
    REF             shift and go to state 30
    INT             shift and go to state 40
    BOOL            shift and go to state 42
    CHAR            shift and go to state 26
    CHARS           shift and go to state 38
    ARRAY           shift and go to state 34

    string_mode                    shift and go to state 32
    array_mode                     shift and go to state 31
    discrete_range_mode            shift and go to state 37
    discrete_mode_name             shift and go to state 28
    boolean_mode                   shift and go to state 25
    character_mode                 shift and go to state 39
    reference_mode                 shift and go to state 27
    composite_mode                 shift and go to state 41
    integer_mode                   shift and go to state 35
    mode                           shift and go to state 56
    discrete_mode                  shift and go to state 29
    mode_name                      shift and go to state 33

state 31

    (45) composite_mode -> array_mode .

    ASSIGN          reduce using rule 45 (composite_mode -> array_mode .)
    COMMA           reduce using rule 45 (composite_mode -> array_mode .)
    SEMI            reduce using rule 45 (composite_mode -> array_mode .)


state 32

    (44) composite_mode -> string_mode .

    ASSIGN          reduce using rule 44 (composite_mode -> string_mode .)
    COMMA           reduce using rule 44 (composite_mode -> string_mode .)
    SEMI            reduce using rule 44 (composite_mode -> string_mode .)


state 33

    (25) mode -> mode_name .

    ASSIGN          reduce using rule 25 (mode -> mode_name .)
    COMMA           reduce using rule 25 (mode -> mode_name .)
    SEMI            reduce using rule 25 (mode -> mode_name .)


state 34

    (48) array_mode -> ARRAY . LBRACKET index_mode_list RBRACKET element_mode

    LBRACKET        shift and go to state 57


state 35

    (30) discrete_mode -> integer_mode .

    LPAREN          reduce using rule 30 (discrete_mode -> integer_mode .)
    ASSIGN          reduce using rule 30 (discrete_mode -> integer_mode .)
    COMMA           reduce using rule 30 (discrete_mode -> integer_mode .)
    SEMI            reduce using rule 30 (discrete_mode -> integer_mode .)
    RBRACKET        reduce using rule 30 (discrete_mode -> integer_mode .)


state 36

    (29) mode_name -> ID .
    (42) discrete_mode_name -> ID .

    COMMA           reduce using rule 29 (mode_name -> ID .)
    SEMI            reduce using rule 29 (mode_name -> ID .)
    ASSIGN          reduce using rule 29 (mode_name -> ID .)
    LPAREN          reduce using rule 42 (discrete_mode_name -> ID .)


state 37

    (33) discrete_mode -> discrete_range_mode .

    LPAREN          reduce using rule 33 (discrete_mode -> discrete_range_mode .)
    ASSIGN          reduce using rule 33 (discrete_mode -> discrete_range_mode .)
    COMMA           reduce using rule 33 (discrete_mode -> discrete_range_mode .)
    SEMI            reduce using rule 33 (discrete_mode -> discrete_range_mode .)
    RBRACKET        reduce using rule 33 (discrete_mode -> discrete_range_mode .)


state 38

    (46) string_mode -> CHARS . LBRACKET string_length RBRACKET

    LBRACKET        shift and go to state 58


state 39

    (32) discrete_mode -> character_mode .

    LPAREN          reduce using rule 32 (discrete_mode -> character_mode .)
    ASSIGN          reduce using rule 32 (discrete_mode -> character_mode .)
    COMMA           reduce using rule 32 (discrete_mode -> character_mode .)
    SEMI            reduce using rule 32 (discrete_mode -> character_mode .)
    RBRACKET        reduce using rule 32 (discrete_mode -> character_mode .)


state 40

    (34) integer_mode -> INT .

    LPAREN          reduce using rule 34 (integer_mode -> INT .)
    ASSIGN          reduce using rule 34 (integer_mode -> INT .)
    COMMA           reduce using rule 34 (integer_mode -> INT .)
    SEMI            reduce using rule 34 (integer_mode -> INT .)
    RBRACKET        reduce using rule 34 (integer_mode -> INT .)


state 41

    (28) mode -> composite_mode .

    ASSIGN          reduce using rule 28 (mode -> composite_mode .)
    COMMA           reduce using rule 28 (mode -> composite_mode .)
    SEMI            reduce using rule 28 (mode -> composite_mode .)


state 42

    (35) boolean_mode -> BOOL .

    LPAREN          reduce using rule 35 (boolean_mode -> BOOL .)
    ASSIGN          reduce using rule 35 (boolean_mode -> BOOL .)
    COMMA           reduce using rule 35 (boolean_mode -> BOOL .)
    SEMI            reduce using rule 35 (boolean_mode -> BOOL .)
    RBRACKET        reduce using rule 35 (boolean_mode -> BOOL .)


state 43

    (20) declaration -> identifier_list mode . initialization
    (21) declaration -> identifier_list mode .
    (22) initialization -> . ASSIGN expression

    COMMA           reduce using rule 21 (declaration -> identifier_list mode .)
    SEMI            reduce using rule 21 (declaration -> identifier_list mode .)
    ASSIGN          shift and go to state 60

    initialization                 shift and go to state 59

state 44

    (24) identifier_list -> ID COMMA . identifier_list
    (23) identifier_list -> . ID
    (24) identifier_list -> . ID COMMA identifier_list

    ID              shift and go to state 13

    identifier_list                shift and go to state 61

state 45

    (15) newmode_list -> mode_definition COMMA . newmode_list
    (14) newmode_list -> . mode_definition
    (15) newmode_list -> . mode_definition COMMA newmode_list
    (16) mode_definition -> . identifier_list ASSIGN mode
    (23) identifier_list -> . ID
    (24) identifier_list -> . ID COMMA identifier_list

    ID              shift and go to state 13

    mode_definition                shift and go to state 14
    newmode_list                   shift and go to state 62
    identifier_list                shift and go to state 16

state 46

    (13) newmode_statement -> TYPE newmode_list SEMI .

    DCL             reduce using rule 13 (newmode_statement -> TYPE newmode_list SEMI .)
    SYN             reduce using rule 13 (newmode_statement -> TYPE newmode_list SEMI .)
    TYPE            reduce using rule 13 (newmode_statement -> TYPE newmode_list SEMI .)
    $end            reduce using rule 13 (newmode_statement -> TYPE newmode_list SEMI .)


state 47

    (16) mode_definition -> identifier_list ASSIGN . mode
    (25) mode -> . mode_name
    (26) mode -> . discrete_mode
    (27) mode -> . reference_mode
    (28) mode -> . composite_mode
    (29) mode_name -> . ID
    (30) discrete_mode -> . integer_mode
    (31) discrete_mode -> . boolean_mode
    (32) discrete_mode -> . character_mode
    (33) discrete_mode -> . discrete_range_mode
    (43) reference_mode -> . REF mode
    (44) composite_mode -> . string_mode
    (45) composite_mode -> . array_mode
    (34) integer_mode -> . INT
    (35) boolean_mode -> . BOOL
    (36) character_mode -> . CHAR
    (37) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (38) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (46) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (48) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (42) discrete_mode_name -> . ID

    ID              shift and go to state 36
    REF             shift and go to state 30
    INT             shift and go to state 40
    BOOL            shift and go to state 42
    CHAR            shift and go to state 26
    CHARS           shift and go to state 38
    ARRAY           shift and go to state 34

    string_mode                    shift and go to state 32
    array_mode                     shift and go to state 31
    discrete_range_mode            shift and go to state 37
    discrete_mode_name             shift and go to state 28
    boolean_mode                   shift and go to state 25
    character_mode                 shift and go to state 39
    reference_mode                 shift and go to state 27
    composite_mode                 shift and go to state 41
    integer_mode                   shift and go to state 35
    mode                           shift and go to state 63
    discrete_mode                  shift and go to state 29
    mode_name                      shift and go to state 33

state 48

    (10) synonym_list -> synonym_definition COMMA . synonym_list
    (9) synonym_list -> . synonym_definition
    (10) synonym_list -> . synonym_definition COMMA synonym_list
    (11) synonym_definition -> . identifier_list mode ASSIGN expression
    (12) synonym_definition -> . identifier_list ASSIGN expression
    (23) identifier_list -> . ID
    (24) identifier_list -> . ID COMMA identifier_list

    ID              shift and go to state 13

    synonym_definition             shift and go to state 17
    identifier_list                shift and go to state 19
    synonym_list                   shift and go to state 64

state 49

    (8) synonym_statement -> SYN synonym_list SEMI .

    DCL             reduce using rule 8 (synonym_statement -> SYN synonym_list SEMI .)
    SYN             reduce using rule 8 (synonym_statement -> SYN synonym_list SEMI .)
    TYPE            reduce using rule 8 (synonym_statement -> SYN synonym_list SEMI .)
    $end            reduce using rule 8 (synonym_statement -> SYN synonym_list SEMI .)


state 50

    (12) synonym_definition -> identifier_list ASSIGN . expression
    (54) expression -> . operand0
    (55) operand0 -> . operand1
    (56) operand0 -> . operand0 operator1 operand1
    (57) operand1 -> . operand2
    (58) operand1 -> . operand1 operator2 operand2
    (59) operand2 -> . operand3
    (60) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (61) operand3 -> . monadic_operator operand4
    (62) operand3 -> . operand4
    (67) monadic_operator -> . MINUS
    (68) monadic_operator -> . NOT
    (63) operand4 -> . primitive_value
    (85) primitive_value -> . literal
    (86) literal -> . integer_literal
    (87) literal -> . boolean_literal
    (88) literal -> . character_literal
    (89) literal -> . empty_literal
    (90) literal -> . character_string_literal
    (91) integer_literal -> . ICONST
    (92) boolean_literal -> . TRUE
    (93) boolean_literal -> . FALSE
    (94) character_literal -> . CCONST
    (95) empty_literal -> . NULL
    (96) character_string_literal -> . SCONST

    MINUS           shift and go to state 70
    NOT             shift and go to state 83
    ICONST          shift and go to state 79
    TRUE            shift and go to state 69
    FALSE           shift and go to state 82
    CCONST          shift and go to state 78
    NULL            shift and go to state 68
    SCONST          shift and go to state 76

    operand4                       shift and go to state 71
    character_string_literal       shift and go to state 81
    operand1                       shift and go to state 72
    operand0                       shift and go to state 73
    operand3                       shift and go to state 74
    operand2                       shift and go to state 75
    empty_literal                  shift and go to state 66
    boolean_literal                shift and go to state 67
    literal                        shift and go to state 77
    character_literal              shift and go to state 84
    monadic_operator               shift and go to state 65
    expression                     shift and go to state 85
    integer_literal                shift and go to state 80
    primitive_value                shift and go to state 86

state 51

    (11) synonym_definition -> identifier_list mode . ASSIGN expression

    ASSIGN          shift and go to state 87


state 52

    (3) statement_nullable -> statement statement_nullable .

    $end            reduce using rule 3 (statement_nullable -> statement statement_nullable .)


state 53

    (19) declaration_list -> declaration COMMA declaration_list .

    SEMI            reduce using rule 19 (declaration_list -> declaration COMMA declaration_list .)


state 54

    (37) discrete_range_mode -> discrete_mode_name LPAREN . literal_range RPAREN
    (39) literal_range -> . lower_bound COLON upper_bound
    (40) lower_bound -> . expression
    (54) expression -> . operand0
    (55) operand0 -> . operand1
    (56) operand0 -> . operand0 operator1 operand1
    (57) operand1 -> . operand2
    (58) operand1 -> . operand1 operator2 operand2
    (59) operand2 -> . operand3
    (60) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (61) operand3 -> . monadic_operator operand4
    (62) operand3 -> . operand4
    (67) monadic_operator -> . MINUS
    (68) monadic_operator -> . NOT
    (63) operand4 -> . primitive_value
    (85) primitive_value -> . literal
    (86) literal -> . integer_literal
    (87) literal -> . boolean_literal
    (88) literal -> . character_literal
    (89) literal -> . empty_literal
    (90) literal -> . character_string_literal
    (91) integer_literal -> . ICONST
    (92) boolean_literal -> . TRUE
    (93) boolean_literal -> . FALSE
    (94) character_literal -> . CCONST
    (95) empty_literal -> . NULL
    (96) character_string_literal -> . SCONST

    MINUS           shift and go to state 70
    NOT             shift and go to state 83
    ICONST          shift and go to state 79
    TRUE            shift and go to state 69
    FALSE           shift and go to state 82
    CCONST          shift and go to state 78
    NULL            shift and go to state 68
    SCONST          shift and go to state 76

    operand4                       shift and go to state 71
    character_string_literal       shift and go to state 81
    operand1                       shift and go to state 72
    operand0                       shift and go to state 73
    operand2                       shift and go to state 75
    lower_bound                    shift and go to state 88
    operand3                       shift and go to state 74
    empty_literal                  shift and go to state 66
    boolean_literal                shift and go to state 67
    literal                        shift and go to state 77
    character_literal              shift and go to state 84
    monadic_operator               shift and go to state 65
    literal_range                  shift and go to state 89
    expression                     shift and go to state 90
    integer_literal                shift and go to state 80
    primitive_value                shift and go to state 86

state 55

    (38) discrete_range_mode -> discrete_mode LPAREN . literal_range RPAREN
    (39) literal_range -> . lower_bound COLON upper_bound
    (40) lower_bound -> . expression
    (54) expression -> . operand0
    (55) operand0 -> . operand1
    (56) operand0 -> . operand0 operator1 operand1
    (57) operand1 -> . operand2
    (58) operand1 -> . operand1 operator2 operand2
    (59) operand2 -> . operand3
    (60) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (61) operand3 -> . monadic_operator operand4
    (62) operand3 -> . operand4
    (67) monadic_operator -> . MINUS
    (68) monadic_operator -> . NOT
    (63) operand4 -> . primitive_value
    (85) primitive_value -> . literal
    (86) literal -> . integer_literal
    (87) literal -> . boolean_literal
    (88) literal -> . character_literal
    (89) literal -> . empty_literal
    (90) literal -> . character_string_literal
    (91) integer_literal -> . ICONST
    (92) boolean_literal -> . TRUE
    (93) boolean_literal -> . FALSE
    (94) character_literal -> . CCONST
    (95) empty_literal -> . NULL
    (96) character_string_literal -> . SCONST

    MINUS           shift and go to state 70
    NOT             shift and go to state 83
    ICONST          shift and go to state 79
    TRUE            shift and go to state 69
    FALSE           shift and go to state 82
    CCONST          shift and go to state 78
    NULL            shift and go to state 68
    SCONST          shift and go to state 76

    operand4                       shift and go to state 71
    character_string_literal       shift and go to state 81
    operand1                       shift and go to state 72
    operand0                       shift and go to state 73
    operand2                       shift and go to state 75
    lower_bound                    shift and go to state 88
    operand3                       shift and go to state 74
    empty_literal                  shift and go to state 66
    boolean_literal                shift and go to state 67
    literal                        shift and go to state 77
    character_literal              shift and go to state 84
    monadic_operator               shift and go to state 65
    literal_range                  shift and go to state 91
    expression                     shift and go to state 90
    integer_literal                shift and go to state 80
    primitive_value                shift and go to state 86

state 56

    (43) reference_mode -> REF mode .

    ASSIGN          reduce using rule 43 (reference_mode -> REF mode .)
    COMMA           reduce using rule 43 (reference_mode -> REF mode .)
    SEMI            reduce using rule 43 (reference_mode -> REF mode .)


state 57

    (48) array_mode -> ARRAY LBRACKET . index_mode_list RBRACKET element_mode
    (49) index_mode_list -> . index_mode
    (50) index_mode_list -> . index_mode COMMA index_mode_list
    (51) index_mode -> . discrete_mode
    (52) index_mode -> . literal_range
    (30) discrete_mode -> . integer_mode
    (31) discrete_mode -> . boolean_mode
    (32) discrete_mode -> . character_mode
    (33) discrete_mode -> . discrete_range_mode
    (39) literal_range -> . lower_bound COLON upper_bound
    (34) integer_mode -> . INT
    (35) boolean_mode -> . BOOL
    (36) character_mode -> . CHAR
    (37) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (38) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (40) lower_bound -> . expression
    (42) discrete_mode_name -> . ID
    (54) expression -> . operand0
    (55) operand0 -> . operand1
    (56) operand0 -> . operand0 operator1 operand1
    (57) operand1 -> . operand2
    (58) operand1 -> . operand1 operator2 operand2
    (59) operand2 -> . operand3
    (60) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (61) operand3 -> . monadic_operator operand4
    (62) operand3 -> . operand4
    (67) monadic_operator -> . MINUS
    (68) monadic_operator -> . NOT
    (63) operand4 -> . primitive_value
    (85) primitive_value -> . literal
    (86) literal -> . integer_literal
    (87) literal -> . boolean_literal
    (88) literal -> . character_literal
    (89) literal -> . empty_literal
    (90) literal -> . character_string_literal
    (91) integer_literal -> . ICONST
    (92) boolean_literal -> . TRUE
    (93) boolean_literal -> . FALSE
    (94) character_literal -> . CCONST
    (95) empty_literal -> . NULL
    (96) character_string_literal -> . SCONST

    INT             shift and go to state 40
    BOOL            shift and go to state 42
    CHAR            shift and go to state 26
    ID              shift and go to state 93
    MINUS           shift and go to state 70
    NOT             shift and go to state 83
    ICONST          shift and go to state 79
    TRUE            shift and go to state 69
    FALSE           shift and go to state 82
    CCONST          shift and go to state 78
    NULL            shift and go to state 68
    SCONST          shift and go to state 76

    monadic_operator               shift and go to state 65
    boolean_mode                   shift and go to state 25
    boolean_literal                shift and go to state 67
    discrete_mode_name             shift and go to state 28
    discrete_mode                  shift and go to state 92
    operand4                       shift and go to state 71
    operand1                       shift and go to state 72
    operand0                       shift and go to state 73
    operand3                       shift and go to state 74
    operand2                       shift and go to state 75
    literal                        shift and go to state 77
    lower_bound                    shift and go to state 88
    integer_mode                   shift and go to state 35
    empty_literal                  shift and go to state 66
    index_mode                     shift and go to state 94
    integer_literal                shift and go to state 80
    index_mode_list                shift and go to state 96
    character_string_literal       shift and go to state 81
    discrete_range_mode            shift and go to state 37
    character_mode                 shift and go to state 39
    character_literal              shift and go to state 84
    literal_range                  shift and go to state 95
    expression                     shift and go to state 90
    primitive_value                shift and go to state 86

state 58

    (46) string_mode -> CHARS LBRACKET . string_length RBRACKET
    (47) string_length -> . integer_literal
    (91) integer_literal -> . ICONST

    ICONST          shift and go to state 79

    integer_literal                shift and go to state 97
    string_length                  shift and go to state 98

state 59

    (20) declaration -> identifier_list mode initialization .

    COMMA           reduce using rule 20 (declaration -> identifier_list mode initialization .)
    SEMI            reduce using rule 20 (declaration -> identifier_list mode initialization .)


state 60

    (22) initialization -> ASSIGN . expression
    (54) expression -> . operand0
    (55) operand0 -> . operand1
    (56) operand0 -> . operand0 operator1 operand1
    (57) operand1 -> . operand2
    (58) operand1 -> . operand1 operator2 operand2
    (59) operand2 -> . operand3
    (60) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (61) operand3 -> . monadic_operator operand4
    (62) operand3 -> . operand4
    (67) monadic_operator -> . MINUS
    (68) monadic_operator -> . NOT
    (63) operand4 -> . primitive_value
    (85) primitive_value -> . literal
    (86) literal -> . integer_literal
    (87) literal -> . boolean_literal
    (88) literal -> . character_literal
    (89) literal -> . empty_literal
    (90) literal -> . character_string_literal
    (91) integer_literal -> . ICONST
    (92) boolean_literal -> . TRUE
    (93) boolean_literal -> . FALSE
    (94) character_literal -> . CCONST
    (95) empty_literal -> . NULL
    (96) character_string_literal -> . SCONST

    MINUS           shift and go to state 70
    NOT             shift and go to state 83
    ICONST          shift and go to state 79
    TRUE            shift and go to state 69
    FALSE           shift and go to state 82
    CCONST          shift and go to state 78
    NULL            shift and go to state 68
    SCONST          shift and go to state 76

    operand4                       shift and go to state 71
    character_string_literal       shift and go to state 81
    operand1                       shift and go to state 72
    operand0                       shift and go to state 73
    operand3                       shift and go to state 74
    operand2                       shift and go to state 75
    empty_literal                  shift and go to state 66
    boolean_literal                shift and go to state 67
    literal                        shift and go to state 77
    character_literal              shift and go to state 84
    monadic_operator               shift and go to state 65
    expression                     shift and go to state 99
    integer_literal                shift and go to state 80
    primitive_value                shift and go to state 86

state 61

    (24) identifier_list -> ID COMMA identifier_list .

    ID              reduce using rule 24 (identifier_list -> ID COMMA identifier_list .)
    REF             reduce using rule 24 (identifier_list -> ID COMMA identifier_list .)
    INT             reduce using rule 24 (identifier_list -> ID COMMA identifier_list .)
    BOOL            reduce using rule 24 (identifier_list -> ID COMMA identifier_list .)
    CHAR            reduce using rule 24 (identifier_list -> ID COMMA identifier_list .)
    CHARS           reduce using rule 24 (identifier_list -> ID COMMA identifier_list .)
    ARRAY           reduce using rule 24 (identifier_list -> ID COMMA identifier_list .)
    ASSIGN          reduce using rule 24 (identifier_list -> ID COMMA identifier_list .)


state 62

    (15) newmode_list -> mode_definition COMMA newmode_list .

    SEMI            reduce using rule 15 (newmode_list -> mode_definition COMMA newmode_list .)


state 63

    (16) mode_definition -> identifier_list ASSIGN mode .

    COMMA           reduce using rule 16 (mode_definition -> identifier_list ASSIGN mode .)
    SEMI            reduce using rule 16 (mode_definition -> identifier_list ASSIGN mode .)


state 64

    (10) synonym_list -> synonym_definition COMMA synonym_list .

    SEMI            reduce using rule 10 (synonym_list -> synonym_definition COMMA synonym_list .)


state 65

    (61) operand3 -> monadic_operator . operand4
    (63) operand4 -> . primitive_value
    (85) primitive_value -> . literal
    (86) literal -> . integer_literal
    (87) literal -> . boolean_literal
    (88) literal -> . character_literal
    (89) literal -> . empty_literal
    (90) literal -> . character_string_literal
    (91) integer_literal -> . ICONST
    (92) boolean_literal -> . TRUE
    (93) boolean_literal -> . FALSE
    (94) character_literal -> . CCONST
    (95) empty_literal -> . NULL
    (96) character_string_literal -> . SCONST

    ICONST          shift and go to state 79
    TRUE            shift and go to state 69
    FALSE           shift and go to state 82
    CCONST          shift and go to state 78
    NULL            shift and go to state 68
    SCONST          shift and go to state 76

    operand4                       shift and go to state 100
    character_string_literal       shift and go to state 81
    empty_literal                  shift and go to state 66
    boolean_literal                shift and go to state 67
    literal                        shift and go to state 77
    character_literal              shift and go to state 84
    integer_literal                shift and go to state 80
    primitive_value                shift and go to state 86

state 66

    (89) literal -> empty_literal .

    TIMES           reduce using rule 89 (literal -> empty_literal .)
    DIVIDE          reduce using rule 89 (literal -> empty_literal .)
    MODULO          reduce using rule 89 (literal -> empty_literal .)
    PLUS            reduce using rule 89 (literal -> empty_literal .)
    MINUS           reduce using rule 89 (literal -> empty_literal .)
    CONCAT          reduce using rule 89 (literal -> empty_literal .)
    AND             reduce using rule 89 (literal -> empty_literal .)
    OR              reduce using rule 89 (literal -> empty_literal .)
    EQUAL           reduce using rule 89 (literal -> empty_literal .)
    NOTEQ           reduce using rule 89 (literal -> empty_literal .)
    GREATER         reduce using rule 89 (literal -> empty_literal .)
    GTEQUAL         reduce using rule 89 (literal -> empty_literal .)
    LESS            reduce using rule 89 (literal -> empty_literal .)
    LTEQUAL         reduce using rule 89 (literal -> empty_literal .)
    IN              reduce using rule 89 (literal -> empty_literal .)
    RPAREN          reduce using rule 89 (literal -> empty_literal .)
    COMMA           reduce using rule 89 (literal -> empty_literal .)
    RBRACKET        reduce using rule 89 (literal -> empty_literal .)
    COLON           reduce using rule 89 (literal -> empty_literal .)
    SEMI            reduce using rule 89 (literal -> empty_literal .)


state 67

    (87) literal -> boolean_literal .

    TIMES           reduce using rule 87 (literal -> boolean_literal .)
    DIVIDE          reduce using rule 87 (literal -> boolean_literal .)
    MODULO          reduce using rule 87 (literal -> boolean_literal .)
    PLUS            reduce using rule 87 (literal -> boolean_literal .)
    MINUS           reduce using rule 87 (literal -> boolean_literal .)
    CONCAT          reduce using rule 87 (literal -> boolean_literal .)
    AND             reduce using rule 87 (literal -> boolean_literal .)
    OR              reduce using rule 87 (literal -> boolean_literal .)
    EQUAL           reduce using rule 87 (literal -> boolean_literal .)
    NOTEQ           reduce using rule 87 (literal -> boolean_literal .)
    GREATER         reduce using rule 87 (literal -> boolean_literal .)
    GTEQUAL         reduce using rule 87 (literal -> boolean_literal .)
    LESS            reduce using rule 87 (literal -> boolean_literal .)
    LTEQUAL         reduce using rule 87 (literal -> boolean_literal .)
    IN              reduce using rule 87 (literal -> boolean_literal .)
    RPAREN          reduce using rule 87 (literal -> boolean_literal .)
    COMMA           reduce using rule 87 (literal -> boolean_literal .)
    RBRACKET        reduce using rule 87 (literal -> boolean_literal .)
    COLON           reduce using rule 87 (literal -> boolean_literal .)
    SEMI            reduce using rule 87 (literal -> boolean_literal .)


state 68

    (95) empty_literal -> NULL .

    TIMES           reduce using rule 95 (empty_literal -> NULL .)
    DIVIDE          reduce using rule 95 (empty_literal -> NULL .)
    MODULO          reduce using rule 95 (empty_literal -> NULL .)
    PLUS            reduce using rule 95 (empty_literal -> NULL .)
    MINUS           reduce using rule 95 (empty_literal -> NULL .)
    CONCAT          reduce using rule 95 (empty_literal -> NULL .)
    AND             reduce using rule 95 (empty_literal -> NULL .)
    OR              reduce using rule 95 (empty_literal -> NULL .)
    EQUAL           reduce using rule 95 (empty_literal -> NULL .)
    NOTEQ           reduce using rule 95 (empty_literal -> NULL .)
    GREATER         reduce using rule 95 (empty_literal -> NULL .)
    GTEQUAL         reduce using rule 95 (empty_literal -> NULL .)
    LESS            reduce using rule 95 (empty_literal -> NULL .)
    LTEQUAL         reduce using rule 95 (empty_literal -> NULL .)
    IN              reduce using rule 95 (empty_literal -> NULL .)
    COMMA           reduce using rule 95 (empty_literal -> NULL .)
    SEMI            reduce using rule 95 (empty_literal -> NULL .)
    COLON           reduce using rule 95 (empty_literal -> NULL .)
    RPAREN          reduce using rule 95 (empty_literal -> NULL .)
    RBRACKET        reduce using rule 95 (empty_literal -> NULL .)


state 69

    (92) boolean_literal -> TRUE .

    TIMES           reduce using rule 92 (boolean_literal -> TRUE .)
    DIVIDE          reduce using rule 92 (boolean_literal -> TRUE .)
    MODULO          reduce using rule 92 (boolean_literal -> TRUE .)
    PLUS            reduce using rule 92 (boolean_literal -> TRUE .)
    MINUS           reduce using rule 92 (boolean_literal -> TRUE .)
    CONCAT          reduce using rule 92 (boolean_literal -> TRUE .)
    AND             reduce using rule 92 (boolean_literal -> TRUE .)
    OR              reduce using rule 92 (boolean_literal -> TRUE .)
    EQUAL           reduce using rule 92 (boolean_literal -> TRUE .)
    NOTEQ           reduce using rule 92 (boolean_literal -> TRUE .)
    GREATER         reduce using rule 92 (boolean_literal -> TRUE .)
    GTEQUAL         reduce using rule 92 (boolean_literal -> TRUE .)
    LESS            reduce using rule 92 (boolean_literal -> TRUE .)
    LTEQUAL         reduce using rule 92 (boolean_literal -> TRUE .)
    IN              reduce using rule 92 (boolean_literal -> TRUE .)
    COMMA           reduce using rule 92 (boolean_literal -> TRUE .)
    SEMI            reduce using rule 92 (boolean_literal -> TRUE .)
    COLON           reduce using rule 92 (boolean_literal -> TRUE .)
    RPAREN          reduce using rule 92 (boolean_literal -> TRUE .)
    RBRACKET        reduce using rule 92 (boolean_literal -> TRUE .)


state 70

    (67) monadic_operator -> MINUS .

    ICONST          reduce using rule 67 (monadic_operator -> MINUS .)
    TRUE            reduce using rule 67 (monadic_operator -> MINUS .)
    FALSE           reduce using rule 67 (monadic_operator -> MINUS .)
    CCONST          reduce using rule 67 (monadic_operator -> MINUS .)
    NULL            reduce using rule 67 (monadic_operator -> MINUS .)
    SCONST          reduce using rule 67 (monadic_operator -> MINUS .)


state 71

    (62) operand3 -> operand4 .

    TIMES           reduce using rule 62 (operand3 -> operand4 .)
    DIVIDE          reduce using rule 62 (operand3 -> operand4 .)
    MODULO          reduce using rule 62 (operand3 -> operand4 .)
    PLUS            reduce using rule 62 (operand3 -> operand4 .)
    MINUS           reduce using rule 62 (operand3 -> operand4 .)
    CONCAT          reduce using rule 62 (operand3 -> operand4 .)
    AND             reduce using rule 62 (operand3 -> operand4 .)
    OR              reduce using rule 62 (operand3 -> operand4 .)
    EQUAL           reduce using rule 62 (operand3 -> operand4 .)
    NOTEQ           reduce using rule 62 (operand3 -> operand4 .)
    GREATER         reduce using rule 62 (operand3 -> operand4 .)
    GTEQUAL         reduce using rule 62 (operand3 -> operand4 .)
    LESS            reduce using rule 62 (operand3 -> operand4 .)
    LTEQUAL         reduce using rule 62 (operand3 -> operand4 .)
    IN              reduce using rule 62 (operand3 -> operand4 .)
    COLON           reduce using rule 62 (operand3 -> operand4 .)
    COMMA           reduce using rule 62 (operand3 -> operand4 .)
    SEMI            reduce using rule 62 (operand3 -> operand4 .)
    RPAREN          reduce using rule 62 (operand3 -> operand4 .)
    RBRACKET        reduce using rule 62 (operand3 -> operand4 .)


state 72

    (55) operand0 -> operand1 .
    (58) operand1 -> operand1 . operator2 operand2
    (71) operator2 -> . arithmetic_additive_operator
    (72) operator2 -> . string_concatenation_operator
    (73) arithmetic_additive_operator -> . PLUS
    (74) arithmetic_additive_operator -> . MINUS
    (75) string_concatenation_operator -> . CONCAT

    AND             reduce using rule 55 (operand0 -> operand1 .)
    OR              reduce using rule 55 (operand0 -> operand1 .)
    EQUAL           reduce using rule 55 (operand0 -> operand1 .)
    NOTEQ           reduce using rule 55 (operand0 -> operand1 .)
    GREATER         reduce using rule 55 (operand0 -> operand1 .)
    GTEQUAL         reduce using rule 55 (operand0 -> operand1 .)
    LESS            reduce using rule 55 (operand0 -> operand1 .)
    LTEQUAL         reduce using rule 55 (operand0 -> operand1 .)
    IN              reduce using rule 55 (operand0 -> operand1 .)
    COMMA           reduce using rule 55 (operand0 -> operand1 .)
    SEMI            reduce using rule 55 (operand0 -> operand1 .)
    RPAREN          reduce using rule 55 (operand0 -> operand1 .)
    RBRACKET        reduce using rule 55 (operand0 -> operand1 .)
    COLON           reduce using rule 55 (operand0 -> operand1 .)
    PLUS            shift and go to state 104
    MINUS           shift and go to state 105
    CONCAT          shift and go to state 106

    string_concatenation_operator  shift and go to state 102
    arithmetic_additive_operator   shift and go to state 101
    operator2                      shift and go to state 103

state 73

    (54) expression -> operand0 .
    (56) operand0 -> operand0 . operator1 operand1
    (69) operator1 -> . relational_operator
    (70) operator1 -> . membership_operator
    (76) relational_operator -> . AND
    (77) relational_operator -> . OR
    (78) relational_operator -> . EQUAL
    (79) relational_operator -> . NOTEQ
    (80) relational_operator -> . GREATER
    (81) relational_operator -> . GTEQUAL
    (82) relational_operator -> . LESS
    (83) relational_operator -> . LTEQUAL
    (84) membership_operator -> . IN

    COLON           reduce using rule 54 (expression -> operand0 .)
    RPAREN          reduce using rule 54 (expression -> operand0 .)
    COMMA           reduce using rule 54 (expression -> operand0 .)
    RBRACKET        reduce using rule 54 (expression -> operand0 .)
    SEMI            reduce using rule 54 (expression -> operand0 .)
    AND             shift and go to state 107
    OR              shift and go to state 117
    EQUAL           shift and go to state 112
    NOTEQ           shift and go to state 113
    GREATER         shift and go to state 115
    GTEQUAL         shift and go to state 114
    LESS            shift and go to state 108
    LTEQUAL         shift and go to state 116
    IN              shift and go to state 110

    operator1                      shift and go to state 109
    membership_operator            shift and go to state 111
    relational_operator            shift and go to state 118

state 74

    (59) operand2 -> operand3 .

    TIMES           reduce using rule 59 (operand2 -> operand3 .)
    DIVIDE          reduce using rule 59 (operand2 -> operand3 .)
    MODULO          reduce using rule 59 (operand2 -> operand3 .)
    PLUS            reduce using rule 59 (operand2 -> operand3 .)
    MINUS           reduce using rule 59 (operand2 -> operand3 .)
    CONCAT          reduce using rule 59 (operand2 -> operand3 .)
    AND             reduce using rule 59 (operand2 -> operand3 .)
    OR              reduce using rule 59 (operand2 -> operand3 .)
    EQUAL           reduce using rule 59 (operand2 -> operand3 .)
    NOTEQ           reduce using rule 59 (operand2 -> operand3 .)
    GREATER         reduce using rule 59 (operand2 -> operand3 .)
    GTEQUAL         reduce using rule 59 (operand2 -> operand3 .)
    LESS            reduce using rule 59 (operand2 -> operand3 .)
    LTEQUAL         reduce using rule 59 (operand2 -> operand3 .)
    IN              reduce using rule 59 (operand2 -> operand3 .)
    COMMA           reduce using rule 59 (operand2 -> operand3 .)
    SEMI            reduce using rule 59 (operand2 -> operand3 .)
    COLON           reduce using rule 59 (operand2 -> operand3 .)
    RPAREN          reduce using rule 59 (operand2 -> operand3 .)
    RBRACKET        reduce using rule 59 (operand2 -> operand3 .)


state 75

    (57) operand1 -> operand2 .
    (60) operand2 -> operand2 . arithmetic_multiplicative_operator operand3
    (64) arithmetic_multiplicative_operator -> . TIMES
    (65) arithmetic_multiplicative_operator -> . DIVIDE
    (66) arithmetic_multiplicative_operator -> . MODULO

    PLUS            reduce using rule 57 (operand1 -> operand2 .)
    MINUS           reduce using rule 57 (operand1 -> operand2 .)
    CONCAT          reduce using rule 57 (operand1 -> operand2 .)
    AND             reduce using rule 57 (operand1 -> operand2 .)
    OR              reduce using rule 57 (operand1 -> operand2 .)
    EQUAL           reduce using rule 57 (operand1 -> operand2 .)
    NOTEQ           reduce using rule 57 (operand1 -> operand2 .)
    GREATER         reduce using rule 57 (operand1 -> operand2 .)
    GTEQUAL         reduce using rule 57 (operand1 -> operand2 .)
    LESS            reduce using rule 57 (operand1 -> operand2 .)
    LTEQUAL         reduce using rule 57 (operand1 -> operand2 .)
    IN              reduce using rule 57 (operand1 -> operand2 .)
    RPAREN          reduce using rule 57 (operand1 -> operand2 .)
    COMMA           reduce using rule 57 (operand1 -> operand2 .)
    RBRACKET        reduce using rule 57 (operand1 -> operand2 .)
    SEMI            reduce using rule 57 (operand1 -> operand2 .)
    COLON           reduce using rule 57 (operand1 -> operand2 .)
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 120
    MODULO          shift and go to state 119

    arithmetic_multiplicative_operator shift and go to state 121

state 76

    (96) character_string_literal -> SCONST .

    TIMES           reduce using rule 96 (character_string_literal -> SCONST .)
    DIVIDE          reduce using rule 96 (character_string_literal -> SCONST .)
    MODULO          reduce using rule 96 (character_string_literal -> SCONST .)
    PLUS            reduce using rule 96 (character_string_literal -> SCONST .)
    MINUS           reduce using rule 96 (character_string_literal -> SCONST .)
    CONCAT          reduce using rule 96 (character_string_literal -> SCONST .)
    AND             reduce using rule 96 (character_string_literal -> SCONST .)
    OR              reduce using rule 96 (character_string_literal -> SCONST .)
    EQUAL           reduce using rule 96 (character_string_literal -> SCONST .)
    NOTEQ           reduce using rule 96 (character_string_literal -> SCONST .)
    GREATER         reduce using rule 96 (character_string_literal -> SCONST .)
    GTEQUAL         reduce using rule 96 (character_string_literal -> SCONST .)
    LESS            reduce using rule 96 (character_string_literal -> SCONST .)
    LTEQUAL         reduce using rule 96 (character_string_literal -> SCONST .)
    IN              reduce using rule 96 (character_string_literal -> SCONST .)
    RPAREN          reduce using rule 96 (character_string_literal -> SCONST .)
    COMMA           reduce using rule 96 (character_string_literal -> SCONST .)
    RBRACKET        reduce using rule 96 (character_string_literal -> SCONST .)
    COLON           reduce using rule 96 (character_string_literal -> SCONST .)
    SEMI            reduce using rule 96 (character_string_literal -> SCONST .)


state 77

    (85) primitive_value -> literal .

    TIMES           reduce using rule 85 (primitive_value -> literal .)
    DIVIDE          reduce using rule 85 (primitive_value -> literal .)
    MODULO          reduce using rule 85 (primitive_value -> literal .)
    PLUS            reduce using rule 85 (primitive_value -> literal .)
    MINUS           reduce using rule 85 (primitive_value -> literal .)
    CONCAT          reduce using rule 85 (primitive_value -> literal .)
    AND             reduce using rule 85 (primitive_value -> literal .)
    OR              reduce using rule 85 (primitive_value -> literal .)
    EQUAL           reduce using rule 85 (primitive_value -> literal .)
    NOTEQ           reduce using rule 85 (primitive_value -> literal .)
    GREATER         reduce using rule 85 (primitive_value -> literal .)
    GTEQUAL         reduce using rule 85 (primitive_value -> literal .)
    LESS            reduce using rule 85 (primitive_value -> literal .)
    LTEQUAL         reduce using rule 85 (primitive_value -> literal .)
    IN              reduce using rule 85 (primitive_value -> literal .)
    COMMA           reduce using rule 85 (primitive_value -> literal .)
    SEMI            reduce using rule 85 (primitive_value -> literal .)
    COLON           reduce using rule 85 (primitive_value -> literal .)
    RPAREN          reduce using rule 85 (primitive_value -> literal .)
    RBRACKET        reduce using rule 85 (primitive_value -> literal .)


state 78

    (94) character_literal -> CCONST .

    TIMES           reduce using rule 94 (character_literal -> CCONST .)
    DIVIDE          reduce using rule 94 (character_literal -> CCONST .)
    MODULO          reduce using rule 94 (character_literal -> CCONST .)
    PLUS            reduce using rule 94 (character_literal -> CCONST .)
    MINUS           reduce using rule 94 (character_literal -> CCONST .)
    CONCAT          reduce using rule 94 (character_literal -> CCONST .)
    AND             reduce using rule 94 (character_literal -> CCONST .)
    OR              reduce using rule 94 (character_literal -> CCONST .)
    EQUAL           reduce using rule 94 (character_literal -> CCONST .)
    NOTEQ           reduce using rule 94 (character_literal -> CCONST .)
    GREATER         reduce using rule 94 (character_literal -> CCONST .)
    GTEQUAL         reduce using rule 94 (character_literal -> CCONST .)
    LESS            reduce using rule 94 (character_literal -> CCONST .)
    LTEQUAL         reduce using rule 94 (character_literal -> CCONST .)
    IN              reduce using rule 94 (character_literal -> CCONST .)
    COMMA           reduce using rule 94 (character_literal -> CCONST .)
    SEMI            reduce using rule 94 (character_literal -> CCONST .)
    COLON           reduce using rule 94 (character_literal -> CCONST .)
    RPAREN          reduce using rule 94 (character_literal -> CCONST .)
    RBRACKET        reduce using rule 94 (character_literal -> CCONST .)


state 79

    (91) integer_literal -> ICONST .

    RBRACKET        reduce using rule 91 (integer_literal -> ICONST .)
    TIMES           reduce using rule 91 (integer_literal -> ICONST .)
    DIVIDE          reduce using rule 91 (integer_literal -> ICONST .)
    MODULO          reduce using rule 91 (integer_literal -> ICONST .)
    PLUS            reduce using rule 91 (integer_literal -> ICONST .)
    MINUS           reduce using rule 91 (integer_literal -> ICONST .)
    CONCAT          reduce using rule 91 (integer_literal -> ICONST .)
    AND             reduce using rule 91 (integer_literal -> ICONST .)
    OR              reduce using rule 91 (integer_literal -> ICONST .)
    EQUAL           reduce using rule 91 (integer_literal -> ICONST .)
    NOTEQ           reduce using rule 91 (integer_literal -> ICONST .)
    GREATER         reduce using rule 91 (integer_literal -> ICONST .)
    GTEQUAL         reduce using rule 91 (integer_literal -> ICONST .)
    LESS            reduce using rule 91 (integer_literal -> ICONST .)
    LTEQUAL         reduce using rule 91 (integer_literal -> ICONST .)
    IN              reduce using rule 91 (integer_literal -> ICONST .)
    COLON           reduce using rule 91 (integer_literal -> ICONST .)
    COMMA           reduce using rule 91 (integer_literal -> ICONST .)
    SEMI            reduce using rule 91 (integer_literal -> ICONST .)
    RPAREN          reduce using rule 91 (integer_literal -> ICONST .)


state 80

    (86) literal -> integer_literal .

    TIMES           reduce using rule 86 (literal -> integer_literal .)
    DIVIDE          reduce using rule 86 (literal -> integer_literal .)
    MODULO          reduce using rule 86 (literal -> integer_literal .)
    PLUS            reduce using rule 86 (literal -> integer_literal .)
    MINUS           reduce using rule 86 (literal -> integer_literal .)
    CONCAT          reduce using rule 86 (literal -> integer_literal .)
    AND             reduce using rule 86 (literal -> integer_literal .)
    OR              reduce using rule 86 (literal -> integer_literal .)
    EQUAL           reduce using rule 86 (literal -> integer_literal .)
    NOTEQ           reduce using rule 86 (literal -> integer_literal .)
    GREATER         reduce using rule 86 (literal -> integer_literal .)
    GTEQUAL         reduce using rule 86 (literal -> integer_literal .)
    LESS            reduce using rule 86 (literal -> integer_literal .)
    LTEQUAL         reduce using rule 86 (literal -> integer_literal .)
    IN              reduce using rule 86 (literal -> integer_literal .)
    RPAREN          reduce using rule 86 (literal -> integer_literal .)
    COMMA           reduce using rule 86 (literal -> integer_literal .)
    RBRACKET        reduce using rule 86 (literal -> integer_literal .)
    COLON           reduce using rule 86 (literal -> integer_literal .)
    SEMI            reduce using rule 86 (literal -> integer_literal .)


state 81

    (90) literal -> character_string_literal .

    TIMES           reduce using rule 90 (literal -> character_string_literal .)
    DIVIDE          reduce using rule 90 (literal -> character_string_literal .)
    MODULO          reduce using rule 90 (literal -> character_string_literal .)
    PLUS            reduce using rule 90 (literal -> character_string_literal .)
    MINUS           reduce using rule 90 (literal -> character_string_literal .)
    CONCAT          reduce using rule 90 (literal -> character_string_literal .)
    AND             reduce using rule 90 (literal -> character_string_literal .)
    OR              reduce using rule 90 (literal -> character_string_literal .)
    EQUAL           reduce using rule 90 (literal -> character_string_literal .)
    NOTEQ           reduce using rule 90 (literal -> character_string_literal .)
    GREATER         reduce using rule 90 (literal -> character_string_literal .)
    GTEQUAL         reduce using rule 90 (literal -> character_string_literal .)
    LESS            reduce using rule 90 (literal -> character_string_literal .)
    LTEQUAL         reduce using rule 90 (literal -> character_string_literal .)
    IN              reduce using rule 90 (literal -> character_string_literal .)
    RPAREN          reduce using rule 90 (literal -> character_string_literal .)
    COMMA           reduce using rule 90 (literal -> character_string_literal .)
    RBRACKET        reduce using rule 90 (literal -> character_string_literal .)
    COLON           reduce using rule 90 (literal -> character_string_literal .)
    SEMI            reduce using rule 90 (literal -> character_string_literal .)


state 82

    (93) boolean_literal -> FALSE .

    TIMES           reduce using rule 93 (boolean_literal -> FALSE .)
    DIVIDE          reduce using rule 93 (boolean_literal -> FALSE .)
    MODULO          reduce using rule 93 (boolean_literal -> FALSE .)
    PLUS            reduce using rule 93 (boolean_literal -> FALSE .)
    MINUS           reduce using rule 93 (boolean_literal -> FALSE .)
    CONCAT          reduce using rule 93 (boolean_literal -> FALSE .)
    AND             reduce using rule 93 (boolean_literal -> FALSE .)
    OR              reduce using rule 93 (boolean_literal -> FALSE .)
    EQUAL           reduce using rule 93 (boolean_literal -> FALSE .)
    NOTEQ           reduce using rule 93 (boolean_literal -> FALSE .)
    GREATER         reduce using rule 93 (boolean_literal -> FALSE .)
    GTEQUAL         reduce using rule 93 (boolean_literal -> FALSE .)
    LESS            reduce using rule 93 (boolean_literal -> FALSE .)
    LTEQUAL         reduce using rule 93 (boolean_literal -> FALSE .)
    IN              reduce using rule 93 (boolean_literal -> FALSE .)
    COMMA           reduce using rule 93 (boolean_literal -> FALSE .)
    SEMI            reduce using rule 93 (boolean_literal -> FALSE .)
    COLON           reduce using rule 93 (boolean_literal -> FALSE .)
    RPAREN          reduce using rule 93 (boolean_literal -> FALSE .)
    RBRACKET        reduce using rule 93 (boolean_literal -> FALSE .)


state 83

    (68) monadic_operator -> NOT .

    ICONST          reduce using rule 68 (monadic_operator -> NOT .)
    TRUE            reduce using rule 68 (monadic_operator -> NOT .)
    FALSE           reduce using rule 68 (monadic_operator -> NOT .)
    CCONST          reduce using rule 68 (monadic_operator -> NOT .)
    NULL            reduce using rule 68 (monadic_operator -> NOT .)
    SCONST          reduce using rule 68 (monadic_operator -> NOT .)


state 84

    (88) literal -> character_literal .

    TIMES           reduce using rule 88 (literal -> character_literal .)
    DIVIDE          reduce using rule 88 (literal -> character_literal .)
    MODULO          reduce using rule 88 (literal -> character_literal .)
    PLUS            reduce using rule 88 (literal -> character_literal .)
    MINUS           reduce using rule 88 (literal -> character_literal .)
    CONCAT          reduce using rule 88 (literal -> character_literal .)
    AND             reduce using rule 88 (literal -> character_literal .)
    OR              reduce using rule 88 (literal -> character_literal .)
    EQUAL           reduce using rule 88 (literal -> character_literal .)
    NOTEQ           reduce using rule 88 (literal -> character_literal .)
    GREATER         reduce using rule 88 (literal -> character_literal .)
    GTEQUAL         reduce using rule 88 (literal -> character_literal .)
    LESS            reduce using rule 88 (literal -> character_literal .)
    LTEQUAL         reduce using rule 88 (literal -> character_literal .)
    IN              reduce using rule 88 (literal -> character_literal .)
    RPAREN          reduce using rule 88 (literal -> character_literal .)
    COMMA           reduce using rule 88 (literal -> character_literal .)
    RBRACKET        reduce using rule 88 (literal -> character_literal .)
    COLON           reduce using rule 88 (literal -> character_literal .)
    SEMI            reduce using rule 88 (literal -> character_literal .)


state 85

    (12) synonym_definition -> identifier_list ASSIGN expression .

    COMMA           reduce using rule 12 (synonym_definition -> identifier_list ASSIGN expression .)
    SEMI            reduce using rule 12 (synonym_definition -> identifier_list ASSIGN expression .)


state 86

    (63) operand4 -> primitive_value .

    TIMES           reduce using rule 63 (operand4 -> primitive_value .)
    DIVIDE          reduce using rule 63 (operand4 -> primitive_value .)
    MODULO          reduce using rule 63 (operand4 -> primitive_value .)
    PLUS            reduce using rule 63 (operand4 -> primitive_value .)
    MINUS           reduce using rule 63 (operand4 -> primitive_value .)
    CONCAT          reduce using rule 63 (operand4 -> primitive_value .)
    AND             reduce using rule 63 (operand4 -> primitive_value .)
    OR              reduce using rule 63 (operand4 -> primitive_value .)
    EQUAL           reduce using rule 63 (operand4 -> primitive_value .)
    NOTEQ           reduce using rule 63 (operand4 -> primitive_value .)
    GREATER         reduce using rule 63 (operand4 -> primitive_value .)
    GTEQUAL         reduce using rule 63 (operand4 -> primitive_value .)
    LESS            reduce using rule 63 (operand4 -> primitive_value .)
    LTEQUAL         reduce using rule 63 (operand4 -> primitive_value .)
    IN              reduce using rule 63 (operand4 -> primitive_value .)
    COMMA           reduce using rule 63 (operand4 -> primitive_value .)
    SEMI            reduce using rule 63 (operand4 -> primitive_value .)
    COLON           reduce using rule 63 (operand4 -> primitive_value .)
    RPAREN          reduce using rule 63 (operand4 -> primitive_value .)
    RBRACKET        reduce using rule 63 (operand4 -> primitive_value .)


state 87

    (11) synonym_definition -> identifier_list mode ASSIGN . expression
    (54) expression -> . operand0
    (55) operand0 -> . operand1
    (56) operand0 -> . operand0 operator1 operand1
    (57) operand1 -> . operand2
    (58) operand1 -> . operand1 operator2 operand2
    (59) operand2 -> . operand3
    (60) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (61) operand3 -> . monadic_operator operand4
    (62) operand3 -> . operand4
    (67) monadic_operator -> . MINUS
    (68) monadic_operator -> . NOT
    (63) operand4 -> . primitive_value
    (85) primitive_value -> . literal
    (86) literal -> . integer_literal
    (87) literal -> . boolean_literal
    (88) literal -> . character_literal
    (89) literal -> . empty_literal
    (90) literal -> . character_string_literal
    (91) integer_literal -> . ICONST
    (92) boolean_literal -> . TRUE
    (93) boolean_literal -> . FALSE
    (94) character_literal -> . CCONST
    (95) empty_literal -> . NULL
    (96) character_string_literal -> . SCONST

    MINUS           shift and go to state 70
    NOT             shift and go to state 83
    ICONST          shift and go to state 79
    TRUE            shift and go to state 69
    FALSE           shift and go to state 82
    CCONST          shift and go to state 78
    NULL            shift and go to state 68
    SCONST          shift and go to state 76

    operand4                       shift and go to state 71
    character_string_literal       shift and go to state 81
    operand1                       shift and go to state 72
    operand0                       shift and go to state 73
    operand3                       shift and go to state 74
    operand2                       shift and go to state 75
    empty_literal                  shift and go to state 66
    boolean_literal                shift and go to state 67
    literal                        shift and go to state 77
    character_literal              shift and go to state 84
    monadic_operator               shift and go to state 65
    expression                     shift and go to state 123
    integer_literal                shift and go to state 80
    primitive_value                shift and go to state 86

state 88

    (39) literal_range -> lower_bound . COLON upper_bound

    COLON           shift and go to state 124


state 89

    (37) discrete_range_mode -> discrete_mode_name LPAREN literal_range . RPAREN

    RPAREN          shift and go to state 125


state 90

    (40) lower_bound -> expression .

    COLON           reduce using rule 40 (lower_bound -> expression .)


state 91

    (38) discrete_range_mode -> discrete_mode LPAREN literal_range . RPAREN

    RPAREN          shift and go to state 126


state 92

    (51) index_mode -> discrete_mode .
    (38) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    COMMA           reduce using rule 51 (index_mode -> discrete_mode .)
    RBRACKET        reduce using rule 51 (index_mode -> discrete_mode .)
    LPAREN          shift and go to state 55


state 93

    (42) discrete_mode_name -> ID .

    LPAREN          reduce using rule 42 (discrete_mode_name -> ID .)


state 94

    (49) index_mode_list -> index_mode .
    (50) index_mode_list -> index_mode . COMMA index_mode_list

    RBRACKET        reduce using rule 49 (index_mode_list -> index_mode .)
    COMMA           shift and go to state 127


state 95

    (52) index_mode -> literal_range .

    COMMA           reduce using rule 52 (index_mode -> literal_range .)
    RBRACKET        reduce using rule 52 (index_mode -> literal_range .)


state 96

    (48) array_mode -> ARRAY LBRACKET index_mode_list . RBRACKET element_mode

    RBRACKET        shift and go to state 128


state 97

    (47) string_length -> integer_literal .

    RBRACKET        reduce using rule 47 (string_length -> integer_literal .)


state 98

    (46) string_mode -> CHARS LBRACKET string_length . RBRACKET

    RBRACKET        shift and go to state 129


state 99

    (22) initialization -> ASSIGN expression .

    COMMA           reduce using rule 22 (initialization -> ASSIGN expression .)
    SEMI            reduce using rule 22 (initialization -> ASSIGN expression .)


state 100

    (61) operand3 -> monadic_operator operand4 .

    TIMES           reduce using rule 61 (operand3 -> monadic_operator operand4 .)
    DIVIDE          reduce using rule 61 (operand3 -> monadic_operator operand4 .)
    MODULO          reduce using rule 61 (operand3 -> monadic_operator operand4 .)
    PLUS            reduce using rule 61 (operand3 -> monadic_operator operand4 .)
    MINUS           reduce using rule 61 (operand3 -> monadic_operator operand4 .)
    CONCAT          reduce using rule 61 (operand3 -> monadic_operator operand4 .)
    AND             reduce using rule 61 (operand3 -> monadic_operator operand4 .)
    OR              reduce using rule 61 (operand3 -> monadic_operator operand4 .)
    EQUAL           reduce using rule 61 (operand3 -> monadic_operator operand4 .)
    NOTEQ           reduce using rule 61 (operand3 -> monadic_operator operand4 .)
    GREATER         reduce using rule 61 (operand3 -> monadic_operator operand4 .)
    GTEQUAL         reduce using rule 61 (operand3 -> monadic_operator operand4 .)
    LESS            reduce using rule 61 (operand3 -> monadic_operator operand4 .)
    LTEQUAL         reduce using rule 61 (operand3 -> monadic_operator operand4 .)
    IN              reduce using rule 61 (operand3 -> monadic_operator operand4 .)
    COLON           reduce using rule 61 (operand3 -> monadic_operator operand4 .)
    COMMA           reduce using rule 61 (operand3 -> monadic_operator operand4 .)
    SEMI            reduce using rule 61 (operand3 -> monadic_operator operand4 .)
    RPAREN          reduce using rule 61 (operand3 -> monadic_operator operand4 .)
    RBRACKET        reduce using rule 61 (operand3 -> monadic_operator operand4 .)


state 101

    (71) operator2 -> arithmetic_additive_operator .

    MINUS           reduce using rule 71 (operator2 -> arithmetic_additive_operator .)
    NOT             reduce using rule 71 (operator2 -> arithmetic_additive_operator .)
    ICONST          reduce using rule 71 (operator2 -> arithmetic_additive_operator .)
    TRUE            reduce using rule 71 (operator2 -> arithmetic_additive_operator .)
    FALSE           reduce using rule 71 (operator2 -> arithmetic_additive_operator .)
    CCONST          reduce using rule 71 (operator2 -> arithmetic_additive_operator .)
    NULL            reduce using rule 71 (operator2 -> arithmetic_additive_operator .)
    SCONST          reduce using rule 71 (operator2 -> arithmetic_additive_operator .)


state 102

    (72) operator2 -> string_concatenation_operator .

    MINUS           reduce using rule 72 (operator2 -> string_concatenation_operator .)
    NOT             reduce using rule 72 (operator2 -> string_concatenation_operator .)
    ICONST          reduce using rule 72 (operator2 -> string_concatenation_operator .)
    TRUE            reduce using rule 72 (operator2 -> string_concatenation_operator .)
    FALSE           reduce using rule 72 (operator2 -> string_concatenation_operator .)
    CCONST          reduce using rule 72 (operator2 -> string_concatenation_operator .)
    NULL            reduce using rule 72 (operator2 -> string_concatenation_operator .)
    SCONST          reduce using rule 72 (operator2 -> string_concatenation_operator .)


state 103

    (58) operand1 -> operand1 operator2 . operand2
    (59) operand2 -> . operand3
    (60) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (61) operand3 -> . monadic_operator operand4
    (62) operand3 -> . operand4
    (67) monadic_operator -> . MINUS
    (68) monadic_operator -> . NOT
    (63) operand4 -> . primitive_value
    (85) primitive_value -> . literal
    (86) literal -> . integer_literal
    (87) literal -> . boolean_literal
    (88) literal -> . character_literal
    (89) literal -> . empty_literal
    (90) literal -> . character_string_literal
    (91) integer_literal -> . ICONST
    (92) boolean_literal -> . TRUE
    (93) boolean_literal -> . FALSE
    (94) character_literal -> . CCONST
    (95) empty_literal -> . NULL
    (96) character_string_literal -> . SCONST

    MINUS           shift and go to state 70
    NOT             shift and go to state 83
    ICONST          shift and go to state 79
    TRUE            shift and go to state 69
    FALSE           shift and go to state 82
    CCONST          shift and go to state 78
    NULL            shift and go to state 68
    SCONST          shift and go to state 76

    operand4                       shift and go to state 71
    character_string_literal       shift and go to state 81
    monadic_operator               shift and go to state 65
    operand3                       shift and go to state 74
    operand2                       shift and go to state 130
    empty_literal                  shift and go to state 66
    boolean_literal                shift and go to state 67
    literal                        shift and go to state 77
    character_literal              shift and go to state 84
    integer_literal                shift and go to state 80
    primitive_value                shift and go to state 86

state 104

    (73) arithmetic_additive_operator -> PLUS .

    MINUS           reduce using rule 73 (arithmetic_additive_operator -> PLUS .)
    NOT             reduce using rule 73 (arithmetic_additive_operator -> PLUS .)
    ICONST          reduce using rule 73 (arithmetic_additive_operator -> PLUS .)
    TRUE            reduce using rule 73 (arithmetic_additive_operator -> PLUS .)
    FALSE           reduce using rule 73 (arithmetic_additive_operator -> PLUS .)
    CCONST          reduce using rule 73 (arithmetic_additive_operator -> PLUS .)
    NULL            reduce using rule 73 (arithmetic_additive_operator -> PLUS .)
    SCONST          reduce using rule 73 (arithmetic_additive_operator -> PLUS .)


state 105

    (74) arithmetic_additive_operator -> MINUS .

    MINUS           reduce using rule 74 (arithmetic_additive_operator -> MINUS .)
    NOT             reduce using rule 74 (arithmetic_additive_operator -> MINUS .)
    ICONST          reduce using rule 74 (arithmetic_additive_operator -> MINUS .)
    TRUE            reduce using rule 74 (arithmetic_additive_operator -> MINUS .)
    FALSE           reduce using rule 74 (arithmetic_additive_operator -> MINUS .)
    CCONST          reduce using rule 74 (arithmetic_additive_operator -> MINUS .)
    NULL            reduce using rule 74 (arithmetic_additive_operator -> MINUS .)
    SCONST          reduce using rule 74 (arithmetic_additive_operator -> MINUS .)


state 106

    (75) string_concatenation_operator -> CONCAT .

    MINUS           reduce using rule 75 (string_concatenation_operator -> CONCAT .)
    NOT             reduce using rule 75 (string_concatenation_operator -> CONCAT .)
    ICONST          reduce using rule 75 (string_concatenation_operator -> CONCAT .)
    TRUE            reduce using rule 75 (string_concatenation_operator -> CONCAT .)
    FALSE           reduce using rule 75 (string_concatenation_operator -> CONCAT .)
    CCONST          reduce using rule 75 (string_concatenation_operator -> CONCAT .)
    NULL            reduce using rule 75 (string_concatenation_operator -> CONCAT .)
    SCONST          reduce using rule 75 (string_concatenation_operator -> CONCAT .)


state 107

    (76) relational_operator -> AND .

    MINUS           reduce using rule 76 (relational_operator -> AND .)
    NOT             reduce using rule 76 (relational_operator -> AND .)
    ICONST          reduce using rule 76 (relational_operator -> AND .)
    TRUE            reduce using rule 76 (relational_operator -> AND .)
    FALSE           reduce using rule 76 (relational_operator -> AND .)
    CCONST          reduce using rule 76 (relational_operator -> AND .)
    NULL            reduce using rule 76 (relational_operator -> AND .)
    SCONST          reduce using rule 76 (relational_operator -> AND .)


state 108

    (82) relational_operator -> LESS .

    MINUS           reduce using rule 82 (relational_operator -> LESS .)
    NOT             reduce using rule 82 (relational_operator -> LESS .)
    ICONST          reduce using rule 82 (relational_operator -> LESS .)
    TRUE            reduce using rule 82 (relational_operator -> LESS .)
    FALSE           reduce using rule 82 (relational_operator -> LESS .)
    CCONST          reduce using rule 82 (relational_operator -> LESS .)
    NULL            reduce using rule 82 (relational_operator -> LESS .)
    SCONST          reduce using rule 82 (relational_operator -> LESS .)


state 109

    (56) operand0 -> operand0 operator1 . operand1
    (57) operand1 -> . operand2
    (58) operand1 -> . operand1 operator2 operand2
    (59) operand2 -> . operand3
    (60) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (61) operand3 -> . monadic_operator operand4
    (62) operand3 -> . operand4
    (67) monadic_operator -> . MINUS
    (68) monadic_operator -> . NOT
    (63) operand4 -> . primitive_value
    (85) primitive_value -> . literal
    (86) literal -> . integer_literal
    (87) literal -> . boolean_literal
    (88) literal -> . character_literal
    (89) literal -> . empty_literal
    (90) literal -> . character_string_literal
    (91) integer_literal -> . ICONST
    (92) boolean_literal -> . TRUE
    (93) boolean_literal -> . FALSE
    (94) character_literal -> . CCONST
    (95) empty_literal -> . NULL
    (96) character_string_literal -> . SCONST

    MINUS           shift and go to state 70
    NOT             shift and go to state 83
    ICONST          shift and go to state 79
    TRUE            shift and go to state 69
    FALSE           shift and go to state 82
    CCONST          shift and go to state 78
    NULL            shift and go to state 68
    SCONST          shift and go to state 76

    operand4                       shift and go to state 71
    character_string_literal       shift and go to state 81
    operand1                       shift and go to state 131
    operand3                       shift and go to state 74
    operand2                       shift and go to state 75
    empty_literal                  shift and go to state 66
    boolean_literal                shift and go to state 67
    literal                        shift and go to state 77
    character_literal              shift and go to state 84
    monadic_operator               shift and go to state 65
    integer_literal                shift and go to state 80
    primitive_value                shift and go to state 86

state 110

    (84) membership_operator -> IN .

    MINUS           reduce using rule 84 (membership_operator -> IN .)
    NOT             reduce using rule 84 (membership_operator -> IN .)
    ICONST          reduce using rule 84 (membership_operator -> IN .)
    TRUE            reduce using rule 84 (membership_operator -> IN .)
    FALSE           reduce using rule 84 (membership_operator -> IN .)
    CCONST          reduce using rule 84 (membership_operator -> IN .)
    NULL            reduce using rule 84 (membership_operator -> IN .)
    SCONST          reduce using rule 84 (membership_operator -> IN .)


state 111

    (70) operator1 -> membership_operator .

    MINUS           reduce using rule 70 (operator1 -> membership_operator .)
    NOT             reduce using rule 70 (operator1 -> membership_operator .)
    ICONST          reduce using rule 70 (operator1 -> membership_operator .)
    TRUE            reduce using rule 70 (operator1 -> membership_operator .)
    FALSE           reduce using rule 70 (operator1 -> membership_operator .)
    CCONST          reduce using rule 70 (operator1 -> membership_operator .)
    NULL            reduce using rule 70 (operator1 -> membership_operator .)
    SCONST          reduce using rule 70 (operator1 -> membership_operator .)


state 112

    (78) relational_operator -> EQUAL .

    MINUS           reduce using rule 78 (relational_operator -> EQUAL .)
    NOT             reduce using rule 78 (relational_operator -> EQUAL .)
    ICONST          reduce using rule 78 (relational_operator -> EQUAL .)
    TRUE            reduce using rule 78 (relational_operator -> EQUAL .)
    FALSE           reduce using rule 78 (relational_operator -> EQUAL .)
    CCONST          reduce using rule 78 (relational_operator -> EQUAL .)
    NULL            reduce using rule 78 (relational_operator -> EQUAL .)
    SCONST          reduce using rule 78 (relational_operator -> EQUAL .)


state 113

    (79) relational_operator -> NOTEQ .

    MINUS           reduce using rule 79 (relational_operator -> NOTEQ .)
    NOT             reduce using rule 79 (relational_operator -> NOTEQ .)
    ICONST          reduce using rule 79 (relational_operator -> NOTEQ .)
    TRUE            reduce using rule 79 (relational_operator -> NOTEQ .)
    FALSE           reduce using rule 79 (relational_operator -> NOTEQ .)
    CCONST          reduce using rule 79 (relational_operator -> NOTEQ .)
    NULL            reduce using rule 79 (relational_operator -> NOTEQ .)
    SCONST          reduce using rule 79 (relational_operator -> NOTEQ .)


state 114

    (81) relational_operator -> GTEQUAL .

    MINUS           reduce using rule 81 (relational_operator -> GTEQUAL .)
    NOT             reduce using rule 81 (relational_operator -> GTEQUAL .)
    ICONST          reduce using rule 81 (relational_operator -> GTEQUAL .)
    TRUE            reduce using rule 81 (relational_operator -> GTEQUAL .)
    FALSE           reduce using rule 81 (relational_operator -> GTEQUAL .)
    CCONST          reduce using rule 81 (relational_operator -> GTEQUAL .)
    NULL            reduce using rule 81 (relational_operator -> GTEQUAL .)
    SCONST          reduce using rule 81 (relational_operator -> GTEQUAL .)


state 115

    (80) relational_operator -> GREATER .

    MINUS           reduce using rule 80 (relational_operator -> GREATER .)
    NOT             reduce using rule 80 (relational_operator -> GREATER .)
    ICONST          reduce using rule 80 (relational_operator -> GREATER .)
    TRUE            reduce using rule 80 (relational_operator -> GREATER .)
    FALSE           reduce using rule 80 (relational_operator -> GREATER .)
    CCONST          reduce using rule 80 (relational_operator -> GREATER .)
    NULL            reduce using rule 80 (relational_operator -> GREATER .)
    SCONST          reduce using rule 80 (relational_operator -> GREATER .)


state 116

    (83) relational_operator -> LTEQUAL .

    MINUS           reduce using rule 83 (relational_operator -> LTEQUAL .)
    NOT             reduce using rule 83 (relational_operator -> LTEQUAL .)
    ICONST          reduce using rule 83 (relational_operator -> LTEQUAL .)
    TRUE            reduce using rule 83 (relational_operator -> LTEQUAL .)
    FALSE           reduce using rule 83 (relational_operator -> LTEQUAL .)
    CCONST          reduce using rule 83 (relational_operator -> LTEQUAL .)
    NULL            reduce using rule 83 (relational_operator -> LTEQUAL .)
    SCONST          reduce using rule 83 (relational_operator -> LTEQUAL .)


state 117

    (77) relational_operator -> OR .

    MINUS           reduce using rule 77 (relational_operator -> OR .)
    NOT             reduce using rule 77 (relational_operator -> OR .)
    ICONST          reduce using rule 77 (relational_operator -> OR .)
    TRUE            reduce using rule 77 (relational_operator -> OR .)
    FALSE           reduce using rule 77 (relational_operator -> OR .)
    CCONST          reduce using rule 77 (relational_operator -> OR .)
    NULL            reduce using rule 77 (relational_operator -> OR .)
    SCONST          reduce using rule 77 (relational_operator -> OR .)


state 118

    (69) operator1 -> relational_operator .

    MINUS           reduce using rule 69 (operator1 -> relational_operator .)
    NOT             reduce using rule 69 (operator1 -> relational_operator .)
    ICONST          reduce using rule 69 (operator1 -> relational_operator .)
    TRUE            reduce using rule 69 (operator1 -> relational_operator .)
    FALSE           reduce using rule 69 (operator1 -> relational_operator .)
    CCONST          reduce using rule 69 (operator1 -> relational_operator .)
    NULL            reduce using rule 69 (operator1 -> relational_operator .)
    SCONST          reduce using rule 69 (operator1 -> relational_operator .)


state 119

    (66) arithmetic_multiplicative_operator -> MODULO .

    MINUS           reduce using rule 66 (arithmetic_multiplicative_operator -> MODULO .)
    NOT             reduce using rule 66 (arithmetic_multiplicative_operator -> MODULO .)
    ICONST          reduce using rule 66 (arithmetic_multiplicative_operator -> MODULO .)
    TRUE            reduce using rule 66 (arithmetic_multiplicative_operator -> MODULO .)
    FALSE           reduce using rule 66 (arithmetic_multiplicative_operator -> MODULO .)
    CCONST          reduce using rule 66 (arithmetic_multiplicative_operator -> MODULO .)
    NULL            reduce using rule 66 (arithmetic_multiplicative_operator -> MODULO .)
    SCONST          reduce using rule 66 (arithmetic_multiplicative_operator -> MODULO .)


state 120

    (65) arithmetic_multiplicative_operator -> DIVIDE .

    MINUS           reduce using rule 65 (arithmetic_multiplicative_operator -> DIVIDE .)
    NOT             reduce using rule 65 (arithmetic_multiplicative_operator -> DIVIDE .)
    ICONST          reduce using rule 65 (arithmetic_multiplicative_operator -> DIVIDE .)
    TRUE            reduce using rule 65 (arithmetic_multiplicative_operator -> DIVIDE .)
    FALSE           reduce using rule 65 (arithmetic_multiplicative_operator -> DIVIDE .)
    CCONST          reduce using rule 65 (arithmetic_multiplicative_operator -> DIVIDE .)
    NULL            reduce using rule 65 (arithmetic_multiplicative_operator -> DIVIDE .)
    SCONST          reduce using rule 65 (arithmetic_multiplicative_operator -> DIVIDE .)


state 121

    (60) operand2 -> operand2 arithmetic_multiplicative_operator . operand3
    (61) operand3 -> . monadic_operator operand4
    (62) operand3 -> . operand4
    (67) monadic_operator -> . MINUS
    (68) monadic_operator -> . NOT
    (63) operand4 -> . primitive_value
    (85) primitive_value -> . literal
    (86) literal -> . integer_literal
    (87) literal -> . boolean_literal
    (88) literal -> . character_literal
    (89) literal -> . empty_literal
    (90) literal -> . character_string_literal
    (91) integer_literal -> . ICONST
    (92) boolean_literal -> . TRUE
    (93) boolean_literal -> . FALSE
    (94) character_literal -> . CCONST
    (95) empty_literal -> . NULL
    (96) character_string_literal -> . SCONST

    MINUS           shift and go to state 70
    NOT             shift and go to state 83
    ICONST          shift and go to state 79
    TRUE            shift and go to state 69
    FALSE           shift and go to state 82
    CCONST          shift and go to state 78
    NULL            shift and go to state 68
    SCONST          shift and go to state 76

    operand4                       shift and go to state 71
    character_string_literal       shift and go to state 81
    monadic_operator               shift and go to state 65
    operand3                       shift and go to state 132
    empty_literal                  shift and go to state 66
    boolean_literal                shift and go to state 67
    literal                        shift and go to state 77
    character_literal              shift and go to state 84
    integer_literal                shift and go to state 80
    primitive_value                shift and go to state 86

state 122

    (64) arithmetic_multiplicative_operator -> TIMES .

    MINUS           reduce using rule 64 (arithmetic_multiplicative_operator -> TIMES .)
    NOT             reduce using rule 64 (arithmetic_multiplicative_operator -> TIMES .)
    ICONST          reduce using rule 64 (arithmetic_multiplicative_operator -> TIMES .)
    TRUE            reduce using rule 64 (arithmetic_multiplicative_operator -> TIMES .)
    FALSE           reduce using rule 64 (arithmetic_multiplicative_operator -> TIMES .)
    CCONST          reduce using rule 64 (arithmetic_multiplicative_operator -> TIMES .)
    NULL            reduce using rule 64 (arithmetic_multiplicative_operator -> TIMES .)
    SCONST          reduce using rule 64 (arithmetic_multiplicative_operator -> TIMES .)


state 123

    (11) synonym_definition -> identifier_list mode ASSIGN expression .

    COMMA           reduce using rule 11 (synonym_definition -> identifier_list mode ASSIGN expression .)
    SEMI            reduce using rule 11 (synonym_definition -> identifier_list mode ASSIGN expression .)


state 124

    (39) literal_range -> lower_bound COLON . upper_bound
    (41) upper_bound -> . expression
    (54) expression -> . operand0
    (55) operand0 -> . operand1
    (56) operand0 -> . operand0 operator1 operand1
    (57) operand1 -> . operand2
    (58) operand1 -> . operand1 operator2 operand2
    (59) operand2 -> . operand3
    (60) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (61) operand3 -> . monadic_operator operand4
    (62) operand3 -> . operand4
    (67) monadic_operator -> . MINUS
    (68) monadic_operator -> . NOT
    (63) operand4 -> . primitive_value
    (85) primitive_value -> . literal
    (86) literal -> . integer_literal
    (87) literal -> . boolean_literal
    (88) literal -> . character_literal
    (89) literal -> . empty_literal
    (90) literal -> . character_string_literal
    (91) integer_literal -> . ICONST
    (92) boolean_literal -> . TRUE
    (93) boolean_literal -> . FALSE
    (94) character_literal -> . CCONST
    (95) empty_literal -> . NULL
    (96) character_string_literal -> . SCONST

    MINUS           shift and go to state 70
    NOT             shift and go to state 83
    ICONST          shift and go to state 79
    TRUE            shift and go to state 69
    FALSE           shift and go to state 82
    CCONST          shift and go to state 78
    NULL            shift and go to state 68
    SCONST          shift and go to state 76

    operand4                       shift and go to state 71
    character_string_literal       shift and go to state 81
    operand1                       shift and go to state 72
    operand0                       shift and go to state 73
    upper_bound                    shift and go to state 133
    operand2                       shift and go to state 75
    operand3                       shift and go to state 74
    empty_literal                  shift and go to state 66
    boolean_literal                shift and go to state 67
    literal                        shift and go to state 77
    character_literal              shift and go to state 84
    monadic_operator               shift and go to state 65
    expression                     shift and go to state 134
    integer_literal                shift and go to state 80
    primitive_value                shift and go to state 86

state 125

    (37) discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .

    LPAREN          reduce using rule 37 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    COMMA           reduce using rule 37 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    RBRACKET        reduce using rule 37 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    ASSIGN          reduce using rule 37 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    SEMI            reduce using rule 37 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)


state 126

    (38) discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .

    LPAREN          reduce using rule 38 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    COMMA           reduce using rule 38 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    RBRACKET        reduce using rule 38 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    ASSIGN          reduce using rule 38 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    SEMI            reduce using rule 38 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)


state 127

    (50) index_mode_list -> index_mode COMMA . index_mode_list
    (49) index_mode_list -> . index_mode
    (50) index_mode_list -> . index_mode COMMA index_mode_list
    (51) index_mode -> . discrete_mode
    (52) index_mode -> . literal_range
    (30) discrete_mode -> . integer_mode
    (31) discrete_mode -> . boolean_mode
    (32) discrete_mode -> . character_mode
    (33) discrete_mode -> . discrete_range_mode
    (39) literal_range -> . lower_bound COLON upper_bound
    (34) integer_mode -> . INT
    (35) boolean_mode -> . BOOL
    (36) character_mode -> . CHAR
    (37) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (38) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (40) lower_bound -> . expression
    (42) discrete_mode_name -> . ID
    (54) expression -> . operand0
    (55) operand0 -> . operand1
    (56) operand0 -> . operand0 operator1 operand1
    (57) operand1 -> . operand2
    (58) operand1 -> . operand1 operator2 operand2
    (59) operand2 -> . operand3
    (60) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (61) operand3 -> . monadic_operator operand4
    (62) operand3 -> . operand4
    (67) monadic_operator -> . MINUS
    (68) monadic_operator -> . NOT
    (63) operand4 -> . primitive_value
    (85) primitive_value -> . literal
    (86) literal -> . integer_literal
    (87) literal -> . boolean_literal
    (88) literal -> . character_literal
    (89) literal -> . empty_literal
    (90) literal -> . character_string_literal
    (91) integer_literal -> . ICONST
    (92) boolean_literal -> . TRUE
    (93) boolean_literal -> . FALSE
    (94) character_literal -> . CCONST
    (95) empty_literal -> . NULL
    (96) character_string_literal -> . SCONST

    INT             shift and go to state 40
    BOOL            shift and go to state 42
    CHAR            shift and go to state 26
    ID              shift and go to state 93
    MINUS           shift and go to state 70
    NOT             shift and go to state 83
    ICONST          shift and go to state 79
    TRUE            shift and go to state 69
    FALSE           shift and go to state 82
    CCONST          shift and go to state 78
    NULL            shift and go to state 68
    SCONST          shift and go to state 76

    monadic_operator               shift and go to state 65
    boolean_mode                   shift and go to state 25
    boolean_literal                shift and go to state 67
    discrete_mode_name             shift and go to state 28
    discrete_mode                  shift and go to state 92
    operand4                       shift and go to state 71
    operand1                       shift and go to state 72
    operand0                       shift and go to state 73
    operand3                       shift and go to state 74
    operand2                       shift and go to state 75
    literal                        shift and go to state 77
    lower_bound                    shift and go to state 88
    integer_mode                   shift and go to state 35
    empty_literal                  shift and go to state 66
    index_mode                     shift and go to state 94
    integer_literal                shift and go to state 80
    index_mode_list                shift and go to state 135
    character_string_literal       shift and go to state 81
    discrete_range_mode            shift and go to state 37
    character_mode                 shift and go to state 39
    character_literal              shift and go to state 84
    literal_range                  shift and go to state 95
    expression                     shift and go to state 90
    primitive_value                shift and go to state 86

state 128

    (48) array_mode -> ARRAY LBRACKET index_mode_list RBRACKET . element_mode
    (53) element_mode -> . mode
    (25) mode -> . mode_name
    (26) mode -> . discrete_mode
    (27) mode -> . reference_mode
    (28) mode -> . composite_mode
    (29) mode_name -> . ID
    (30) discrete_mode -> . integer_mode
    (31) discrete_mode -> . boolean_mode
    (32) discrete_mode -> . character_mode
    (33) discrete_mode -> . discrete_range_mode
    (43) reference_mode -> . REF mode
    (44) composite_mode -> . string_mode
    (45) composite_mode -> . array_mode
    (34) integer_mode -> . INT
    (35) boolean_mode -> . BOOL
    (36) character_mode -> . CHAR
    (37) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (38) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (46) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (48) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (42) discrete_mode_name -> . ID

    ID              shift and go to state 36
    REF             shift and go to state 30
    INT             shift and go to state 40
    BOOL            shift and go to state 42
    CHAR            shift and go to state 26
    CHARS           shift and go to state 38
    ARRAY           shift and go to state 34

    string_mode                    shift and go to state 32
    array_mode                     shift and go to state 31
    discrete_range_mode            shift and go to state 37
    discrete_mode_name             shift and go to state 28
    boolean_mode                   shift and go to state 25
    character_mode                 shift and go to state 39
    reference_mode                 shift and go to state 27
    composite_mode                 shift and go to state 41
    integer_mode                   shift and go to state 35
    mode                           shift and go to state 137
    discrete_mode                  shift and go to state 29
    element_mode                   shift and go to state 136
    mode_name                      shift and go to state 33

state 129

    (46) string_mode -> CHARS LBRACKET string_length RBRACKET .

    COMMA           reduce using rule 46 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    SEMI            reduce using rule 46 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    ASSIGN          reduce using rule 46 (string_mode -> CHARS LBRACKET string_length RBRACKET .)


state 130

    (58) operand1 -> operand1 operator2 operand2 .
    (60) operand2 -> operand2 . arithmetic_multiplicative_operator operand3
    (64) arithmetic_multiplicative_operator -> . TIMES
    (65) arithmetic_multiplicative_operator -> . DIVIDE
    (66) arithmetic_multiplicative_operator -> . MODULO

    PLUS            reduce using rule 58 (operand1 -> operand1 operator2 operand2 .)
    MINUS           reduce using rule 58 (operand1 -> operand1 operator2 operand2 .)
    CONCAT          reduce using rule 58 (operand1 -> operand1 operator2 operand2 .)
    AND             reduce using rule 58 (operand1 -> operand1 operator2 operand2 .)
    OR              reduce using rule 58 (operand1 -> operand1 operator2 operand2 .)
    EQUAL           reduce using rule 58 (operand1 -> operand1 operator2 operand2 .)
    NOTEQ           reduce using rule 58 (operand1 -> operand1 operator2 operand2 .)
    GREATER         reduce using rule 58 (operand1 -> operand1 operator2 operand2 .)
    GTEQUAL         reduce using rule 58 (operand1 -> operand1 operator2 operand2 .)
    LESS            reduce using rule 58 (operand1 -> operand1 operator2 operand2 .)
    LTEQUAL         reduce using rule 58 (operand1 -> operand1 operator2 operand2 .)
    IN              reduce using rule 58 (operand1 -> operand1 operator2 operand2 .)
    RPAREN          reduce using rule 58 (operand1 -> operand1 operator2 operand2 .)
    COMMA           reduce using rule 58 (operand1 -> operand1 operator2 operand2 .)
    RBRACKET        reduce using rule 58 (operand1 -> operand1 operator2 operand2 .)
    SEMI            reduce using rule 58 (operand1 -> operand1 operator2 operand2 .)
    COLON           reduce using rule 58 (operand1 -> operand1 operator2 operand2 .)
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 120
    MODULO          shift and go to state 119

    arithmetic_multiplicative_operator shift and go to state 121

state 131

    (56) operand0 -> operand0 operator1 operand1 .
    (58) operand1 -> operand1 . operator2 operand2
    (71) operator2 -> . arithmetic_additive_operator
    (72) operator2 -> . string_concatenation_operator
    (73) arithmetic_additive_operator -> . PLUS
    (74) arithmetic_additive_operator -> . MINUS
    (75) string_concatenation_operator -> . CONCAT

    AND             reduce using rule 56 (operand0 -> operand0 operator1 operand1 .)
    OR              reduce using rule 56 (operand0 -> operand0 operator1 operand1 .)
    EQUAL           reduce using rule 56 (operand0 -> operand0 operator1 operand1 .)
    NOTEQ           reduce using rule 56 (operand0 -> operand0 operator1 operand1 .)
    GREATER         reduce using rule 56 (operand0 -> operand0 operator1 operand1 .)
    GTEQUAL         reduce using rule 56 (operand0 -> operand0 operator1 operand1 .)
    LESS            reduce using rule 56 (operand0 -> operand0 operator1 operand1 .)
    LTEQUAL         reduce using rule 56 (operand0 -> operand0 operator1 operand1 .)
    IN              reduce using rule 56 (operand0 -> operand0 operator1 operand1 .)
    COMMA           reduce using rule 56 (operand0 -> operand0 operator1 operand1 .)
    SEMI            reduce using rule 56 (operand0 -> operand0 operator1 operand1 .)
    RPAREN          reduce using rule 56 (operand0 -> operand0 operator1 operand1 .)
    RBRACKET        reduce using rule 56 (operand0 -> operand0 operator1 operand1 .)
    COLON           reduce using rule 56 (operand0 -> operand0 operator1 operand1 .)
    PLUS            shift and go to state 104
    MINUS           shift and go to state 105
    CONCAT          shift and go to state 106

    arithmetic_additive_operator   shift and go to state 101
    operator2                      shift and go to state 103
    string_concatenation_operator  shift and go to state 102

state 132

    (60) operand2 -> operand2 arithmetic_multiplicative_operator operand3 .

    TIMES           reduce using rule 60 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    DIVIDE          reduce using rule 60 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    MODULO          reduce using rule 60 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    PLUS            reduce using rule 60 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    MINUS           reduce using rule 60 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    CONCAT          reduce using rule 60 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    AND             reduce using rule 60 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    OR              reduce using rule 60 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    EQUAL           reduce using rule 60 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    NOTEQ           reduce using rule 60 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    GREATER         reduce using rule 60 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    GTEQUAL         reduce using rule 60 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LESS            reduce using rule 60 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LTEQUAL         reduce using rule 60 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    IN              reduce using rule 60 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    COMMA           reduce using rule 60 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    SEMI            reduce using rule 60 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    COLON           reduce using rule 60 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    RPAREN          reduce using rule 60 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    RBRACKET        reduce using rule 60 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)


state 133

    (39) literal_range -> lower_bound COLON upper_bound .

    COMMA           reduce using rule 39 (literal_range -> lower_bound COLON upper_bound .)
    RBRACKET        reduce using rule 39 (literal_range -> lower_bound COLON upper_bound .)
    RPAREN          reduce using rule 39 (literal_range -> lower_bound COLON upper_bound .)


state 134

    (41) upper_bound -> expression .

    RPAREN          reduce using rule 41 (upper_bound -> expression .)
    COMMA           reduce using rule 41 (upper_bound -> expression .)
    RBRACKET        reduce using rule 41 (upper_bound -> expression .)


state 135

    (50) index_mode_list -> index_mode COMMA index_mode_list .

    RBRACKET        reduce using rule 50 (index_mode_list -> index_mode COMMA index_mode_list .)


state 136

    (48) array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .

    ASSIGN          reduce using rule 48 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)
    COMMA           reduce using rule 48 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)
    SEMI            reduce using rule 48 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)


state 137

    (53) element_mode -> mode .

    ASSIGN          reduce using rule 53 (element_mode -> mode .)
    COMMA           reduce using rule 53 (element_mode -> mode .)
    SEMI            reduce using rule 53 (element_mode -> mode .)

