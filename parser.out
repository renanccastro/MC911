Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement statement_nullable
Rule 3     statement_nullable -> statement statement_nullable
Rule 4     statement_nullable -> empty
Rule 5     statement -> declaration_statement
Rule 6     statement -> synonym_statement
Rule 7     statement -> newmode_statement
Rule 8     statement -> action_statement
Rule 9     statement -> procedure_statement
Rule 10    synonym_statement -> SYN synonym_list SEMI
Rule 11    synonym_list -> synonym_definition
Rule 12    synonym_list -> synonym_definition COMMA synonym_list
Rule 13    synonym_definition -> identifier_list mode ASSIGN expression
Rule 14    synonym_definition -> identifier_list ASSIGN expression
Rule 15    declaration_statement -> DCL declaration_list SEMI
Rule 16    declaration_list -> declaration
Rule 17    declaration_list -> declaration COMMA declaration_list
Rule 18    declaration -> identifier_list mode initialization
Rule 19    declaration -> identifier_list mode
Rule 20    initialization -> ASSIGN expression
Rule 21    identifier_list -> identifier
Rule 22    identifier_list -> identifier COMMA identifier_list
Rule 23    identifier -> ID
Rule 24    newmode_statement -> TYPE newmode_list SEMI
Rule 25    newmode_list -> mode_definition
Rule 26    newmode_list -> mode_definition COMMA newmode_list
Rule 27    mode_definition -> identifier_list ASSIGN mode
Rule 28    procedure_statement -> ID COLON procedure_definition
Rule 29    procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI
Rule 30    procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI
Rule 31    formal_parameter_list -> formal_parameter
Rule 32    formal_parameter_list -> formal_parameter COMMA formal_parameter_list
Rule 33    formal_parameter -> identifier_list mode LOC
Rule 34    formal_parameter -> identifier_list mode
Rule 35    result_spec -> RETURNS LPAREN mode LOC RPAREN
Rule 36    result_spec -> RETURNS LPAREN mode RPAREN
Rule 37    mode -> mode_name
Rule 38    mode -> discrete_mode
Rule 39    mode -> reference_mode
Rule 40    mode -> composite_mode
Rule 41    mode_name -> identifier
Rule 42    discrete_mode -> integer_mode
Rule 43    discrete_mode -> boolean_mode
Rule 44    discrete_mode -> character_mode
Rule 45    discrete_mode -> discrete_range_mode
Rule 46    discrete_mode_name -> identifier
Rule 47    integer_mode -> INT
Rule 48    boolean_mode -> BOOL
Rule 49    character_mode -> CHAR
Rule 50    discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN
Rule 51    discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN
Rule 52    literal_range -> lower_bound COLON upper_bound
Rule 53    lower_bound -> expression
Rule 54    upper_bound -> expression
Rule 55    reference_mode -> REF mode
Rule 56    composite_mode -> string_mode
Rule 57    composite_mode -> array_mode
Rule 58    string_mode -> CHARS LBRACKET string_length RBRACKET
Rule 59    string_length -> integer_literal
Rule 60    array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode
Rule 61    index_mode_list -> index_mode
Rule 62    index_mode_list -> index_mode COMMA index_mode_list
Rule 63    index_mode -> discrete_mode
Rule 64    index_mode -> literal_range
Rule 65    element_mode -> mode
Rule 66    location -> identifier
Rule 67    location -> dereferenced_reference
Rule 68    location -> string_element
Rule 69    location -> string_slice
Rule 70    location -> array_element
Rule 71    location -> array_slice
Rule 72    dereferenced_reference -> array_location ARROW
Rule 73    string_element -> identifier LBRACKET start_element LBRACKET
Rule 74    start_element -> expression
Rule 75    string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET
Rule 76    left_element -> expression
Rule 77    right_element -> expression
Rule 78    array_element -> array_location LBRACKET expression_list RBRACKET
Rule 79    expression_list -> expression
Rule 80    expression_list -> expression COMMA expression_list
Rule 81    array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET
Rule 82    array_location -> location
Rule 83    expression -> operand0
Rule 84    expression -> conditional_expression
Rule 85    parenthesized_expression -> LPAREN expression RPAREN
Rule 86    conditional_expression -> IF expression then_expression else_expression FI
Rule 87    conditional_expression -> IF expression then_expression elsif_expression else_expression FI
Rule 88    then_expression -> THEN expression
Rule 89    else_expression -> ELSE expression
Rule 90    elsif_expression -> ELSIF expression then_expression
Rule 91    elsif_expression -> elsif_expression ELSIF expression then_expression
Rule 92    operand0 -> operand1
Rule 93    operand0 -> operand0 operator1 operand1
Rule 94    operand1 -> operand2
Rule 95    operand1 -> operand1 operator2 operand2
Rule 96    operand2 -> operand3
Rule 97    operand2 -> operand2 arithmetic_multiplicative_operator operand3
Rule 98    operand3 -> monadic_operator operand4
Rule 99    operand3 -> operand4
Rule 100   operand4 -> array_location
Rule 101   operand4 -> referenced_location
Rule 102   operand4 -> primitive_value
Rule 103   arithmetic_multiplicative_operator -> TIMES
Rule 104   arithmetic_multiplicative_operator -> DIVIDE
Rule 105   arithmetic_multiplicative_operator -> MODULO
Rule 106   monadic_operator -> MINUS
Rule 107   monadic_operator -> NOT
Rule 108   referenced_location -> ARROW array_location
Rule 109   operator1 -> relational_operator
Rule 110   operator1 -> membership_operator
Rule 111   operator2 -> arithmetic_additive_operator
Rule 112   operator2 -> string_concatenation_operator
Rule 113   arithmetic_additive_operator -> PLUS
Rule 114   arithmetic_additive_operator -> MINUS
Rule 115   string_concatenation_operator -> CONCAT
Rule 116   relational_operator -> AND
Rule 117   relational_operator -> OR
Rule 118   relational_operator -> EQUAL
Rule 119   relational_operator -> NOTEQ
Rule 120   relational_operator -> GREATER
Rule 121   relational_operator -> GTEQUAL
Rule 122   relational_operator -> LESS
Rule 123   relational_operator -> LTEQUAL
Rule 124   membership_operator -> IN
Rule 125   primitive_value -> literal
Rule 126   primitive_value -> value_array_element
Rule 127   primitive_value -> value_array_slice
Rule 128   primitive_value -> parenthesized_expression
Rule 129   literal -> integer_literal
Rule 130   literal -> boolean_literal
Rule 131   literal -> character_literal
Rule 132   literal -> empty_literal
Rule 133   literal -> character_string_literal
Rule 134   value_array_element -> primitive_value LBRACKET expression_list RBRACKET
Rule 135   value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET
Rule 136   integer_literal -> ICONST
Rule 137   boolean_literal -> TRUE
Rule 138   boolean_literal -> FALSE
Rule 139   character_literal -> CCONST
Rule 140   empty_literal -> NULL
Rule 141   character_string_literal -> SCONST
Rule 142   action_statement -> identifier COLON action SEMI
Rule 143   action_statement -> action SEMI
Rule 144   action -> bracketed_action
Rule 145   action -> assignment_action
Rule 146   action -> call_action
Rule 147   action -> exit_action
Rule 148   action -> result_action
Rule 149   action -> return_action
Rule 150   bracketed_action -> if_action
Rule 151   bracketed_action -> do_action
Rule 152   assignment_action -> array_location assigning_operator expression
Rule 153   assigning_operator -> closed_dyadic_operator ASSIGN
Rule 154   assigning_operator -> ASSIGN
Rule 155   closed_dyadic_operator -> arithmetic_additive_operator
Rule 156   closed_dyadic_operator -> arithmetic_multiplicative_operator
Rule 157   closed_dyadic_operator -> string_concatenation_operator
Rule 158   if_action -> IF expression then_clause else_clause FI
Rule 159   if_action -> IF expression then_clause
Rule 160   then_clause -> THEN action_statement_list
Rule 161   else_clause -> ELSE action_statement_list
Rule 162   else_clause -> ELSIF expression then_clause else_clause
Rule 163   else_clause -> ELSIF expression then_clause
Rule 164   action_statement_list -> action_statement action_statement_nullable
Rule 165   action_statement_nullable -> action_statement action_statement_nullable
Rule 166   action_statement_nullable -> empty
Rule 167   call_action -> procedure_call
Rule 168   call_action -> builtin_call
Rule 169   builtin_call -> builtin_name LPAREN parameter_list RPAREN
Rule 170   builtin_call -> builtin_name LPAREN RPAREN
Rule 171   builtin_name -> ABS
Rule 172   builtin_name -> ASC
Rule 173   builtin_name -> NUM
Rule 174   builtin_name -> UPPER
Rule 175   builtin_name -> LOWER
Rule 176   builtin_name -> LENGTH
Rule 177   builtin_name -> READ
Rule 178   builtin_name -> PRINT
Rule 179   procedure_call -> ID LPAREN parameter_list RPAREN
Rule 180   procedure_call -> ID LPAREN RPAREN
Rule 181   parameter_list -> expression
Rule 182   parameter_list -> expression COMMA parameter_list
Rule 183   exit_action -> EXIT label_id
Rule 184   label_id -> ID
Rule 185   return_action -> RETURN result
Rule 186   result -> expression
Rule 187   result -> empty
Rule 188   result_action -> RESULT expression
Rule 189   do_action -> DO control_part SEMI action_statement_nullable OD
Rule 190   do_action -> DO action_statement_nullable OD
Rule 191   control_part -> for_control while_control
Rule 192   control_part -> for_control
Rule 193   control_part -> while_control
Rule 194   for_control -> FOR iteration
Rule 195   iteration -> step_enumeration
Rule 196   iteration -> range_enumeration
Rule 197   step_enumeration -> identifier ASSIGN expression step_value DOWN end_value
Rule 198   step_enumeration -> identifier ASSIGN expression step_value end_value
Rule 199   step_enumeration -> identifier ASSIGN expression DOWN end_value
Rule 200   step_enumeration -> identifier ASSIGN expression end_value
Rule 201   step_value -> BY expression
Rule 202   end_value -> TO expression
Rule 203   range_enumeration -> identifier DOWN IN discrete_mode
Rule 204   range_enumeration -> identifier IN discrete_mode
Rule 205   while_control -> WHILE expression
Rule 206   empty -> <empty>

Terminals, with rules where they appear

ABS                  : 171
AND                  : 116
ARRAY                : 60
ARROW                : 72 108
ASC                  : 172
ASSIGN               : 13 14 20 27 153 154 197 198 199 200
BOOL                 : 48
BY                   : 201
CCONST               : 139
CHAR                 : 49
CHARS                : 58
COLON                : 28 52 75 81 135 142
COMMA                : 12 17 22 26 32 62 80 182
CONCAT               : 115
DCL                  : 15
DIVIDE               : 104
DO                   : 189 190
DOWN                 : 197 199 203
ELSE                 : 89 161
ELSIF                : 90 91 162 163
END                  : 29 30
EQUAL                : 118
EXIT                 : 183
FALSE                : 138
FI                   : 86 87 158
FOR                  : 194
GREATER              : 120
GTEQUAL              : 121
ICONST               : 136
ID                   : 23 28 179 180 184
IF                   : 86 87 158 159
IN                   : 124 203 204
INT                  : 47
LBRACKET             : 58 60 73 73 75 78 81 134 135
LENGTH               : 176
LESS                 : 122
LOC                  : 33 35
LOWER                : 175
LPAREN               : 29 30 35 36 50 51 85 169 170 179 180
LTEQUAL              : 123
MINUS                : 106 114
MODULO               : 105
NOT                  : 107
NOTEQ                : 119
NULL                 : 140
NUM                  : 173
OD                   : 189 190
OR                   : 117
PLUS                 : 113
PRINT                : 178
PROC                 : 29 30
RBRACKET             : 58 60 75 78 81 134 135
READ                 : 177
REF                  : 55
RESULT               : 188
RETURN               : 185
RETURNS              : 35 36
RPAREN               : 29 30 35 36 50 51 85 169 170 179 180
SCONST               : 141
SEMI                 : 10 15 24 29 29 30 30 142 143 189
SYN                  : 10
THEN                 : 88 160
TIMES                : 103
TO                   : 202
TRUE                 : 137
TYPE                 : 24
UPPER                : 174
WHILE                : 205
error                : 

Nonterminals, with rules where they appear

action               : 142 143
action_statement     : 8 164 165
action_statement_list : 160 161
action_statement_nullable : 164 165 189 190
arithmetic_additive_operator : 111 155
arithmetic_multiplicative_operator : 97 156
array_element        : 70
array_location       : 72 78 81 100 108 152
array_mode           : 57
array_slice          : 71
assigning_operator   : 152
assignment_action    : 145
boolean_literal      : 130
boolean_mode         : 43
bracketed_action     : 144
builtin_call         : 168
builtin_name         : 169 170
call_action          : 146
character_literal    : 131
character_mode       : 44
character_string_literal : 133
closed_dyadic_operator : 153
composite_mode       : 40
conditional_expression : 84
control_part         : 189
declaration          : 16 17
declaration_list     : 15 17
declaration_statement : 5
dereferenced_reference : 67
discrete_mode        : 38 51 63 203 204
discrete_mode_name   : 50
discrete_range_mode  : 45
do_action            : 151
element_mode         : 60
else_clause          : 158 162
else_expression      : 86 87
elsif_expression     : 87 91
empty                : 4 166 187
empty_literal        : 132
end_value            : 197 198 199 200
exit_action          : 147
expression           : 13 14 20 53 54 74 76 77 79 80 85 86 87 88 89 90 91 135 135 152 158 159 162 163 181 182 186 188 197 198 199 200 201 202 205
expression_list      : 78 80 134
for_control          : 191 192
formal_parameter     : 31 32
formal_parameter_list : 29 30 32
identifier           : 21 22 41 46 66 73 75 142 197 198 199 200 203 204
identifier_list      : 13 14 18 19 22 27 33 34
if_action            : 150
index_mode           : 61 62
index_mode_list      : 60 62
initialization       : 18
integer_literal      : 59 129
integer_mode         : 42
iteration            : 194
label_id             : 183
left_element         : 75
literal              : 125
literal_range        : 50 51 64
location             : 82
lower_bound          : 52 81
membership_operator  : 110
mode                 : 13 18 19 27 33 34 35 36 55 65
mode_definition      : 25 26
mode_name            : 37
monadic_operator     : 98
newmode_list         : 24 26
newmode_statement    : 7
operand0             : 83 93
operand1             : 92 93 95
operand2             : 94 95 97
operand3             : 96 97
operand4             : 98 99
operator1            : 93
operator2            : 95
parameter_list       : 169 179 182
parenthesized_expression : 128
primitive_value      : 102 134 135
procedure_call       : 167
procedure_definition : 28
procedure_statement  : 9
program              : 0
range_enumeration    : 196
reference_mode       : 39
referenced_location  : 101
relational_operator  : 109
result               : 185
result_action        : 148
result_spec          : 29
return_action        : 149
right_element        : 75
start_element        : 73
statement            : 2 3
statement_list       : 1
statement_nullable   : 2 3 29 30
step_enumeration     : 195
step_value           : 197 198
string_concatenation_operator : 112 157
string_element       : 68
string_length        : 58
string_mode          : 56
string_slice         : 69
synonym_definition   : 11 12
synonym_list         : 10 12
synonym_statement    : 6
then_clause          : 158 159 162 163
then_expression      : 86 87 90 91
upper_bound          : 52 81
value_array_element  : 126
value_array_slice    : 127
while_control        : 191 193

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement statement_nullable
    (5) statement -> . declaration_statement
    (6) statement -> . synonym_statement
    (7) statement -> . newmode_statement
    (8) statement -> . action_statement
    (9) statement -> . procedure_statement
    (15) declaration_statement -> . DCL declaration_list SEMI
    (10) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (142) action_statement -> . identifier COLON action SEMI
    (143) action_statement -> . action SEMI
    (28) procedure_statement -> . ID COLON procedure_definition
    (23) identifier -> . ID
    (144) action -> . bracketed_action
    (145) action -> . assignment_action
    (146) action -> . call_action
    (147) action -> . exit_action
    (148) action -> . result_action
    (149) action -> . return_action
    (150) bracketed_action -> . if_action
    (151) bracketed_action -> . do_action
    (152) assignment_action -> . array_location assigning_operator expression
    (167) call_action -> . procedure_call
    (168) call_action -> . builtin_call
    (183) exit_action -> . EXIT label_id
    (188) result_action -> . RESULT expression
    (185) return_action -> . RETURN result
    (158) if_action -> . IF expression then_clause else_clause FI
    (159) if_action -> . IF expression then_clause
    (189) do_action -> . DO control_part SEMI action_statement_nullable OD
    (190) do_action -> . DO action_statement_nullable OD
    (82) array_location -> . location
    (179) procedure_call -> . ID LPAREN parameter_list RPAREN
    (180) procedure_call -> . ID LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (171) builtin_name -> . ABS
    (172) builtin_name -> . ASC
    (173) builtin_name -> . NUM
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    DCL             shift and go to state 29
    SYN             shift and go to state 40
    TYPE            shift and go to state 4
    ID              shift and go to state 32
    EXIT            shift and go to state 35
    RESULT          shift and go to state 34
    RETURN          shift and go to state 8
    IF              shift and go to state 23
    DO              shift and go to state 2
    ABS             shift and go to state 7
    ASC             shift and go to state 13
    NUM             shift and go to state 42
    UPPER           shift and go to state 22
    LOWER           shift and go to state 41
    LENGTH          shift and go to state 27
    READ            shift and go to state 10
    PRINT           shift and go to state 37

    action_statement               shift and go to state 1
    location                       shift and go to state 38
    result_action                  shift and go to state 11
    return_action                  shift and go to state 5
    do_action                      shift and go to state 6
    builtin_call                   shift and go to state 9
    bracketed_action               shift and go to state 3
    builtin_name                   shift and go to state 12
    procedure_statement            shift and go to state 14
    statement                      shift and go to state 15
    program                        shift and go to state 16
    string_slice                   shift and go to state 17
    array_slice                    shift and go to state 18
    array_element                  shift and go to state 19
    declaration_statement          shift and go to state 20
    newmode_statement              shift and go to state 21
    if_action                      shift and go to state 24
    call_action                    shift and go to state 25
    action                         shift and go to state 26
    procedure_call                 shift and go to state 28
    dereferenced_reference         shift and go to state 30
    array_location                 shift and go to state 31
    string_element                 shift and go to state 33
    statement_list                 shift and go to state 36
    assignment_action              shift and go to state 39
    exit_action                    shift and go to state 43
    identifier                     shift and go to state 44
    synonym_statement              shift and go to state 45

state 1

    (8) statement -> action_statement .

    DCL             reduce using rule 8 (statement -> action_statement .)
    SYN             reduce using rule 8 (statement -> action_statement .)
    TYPE            reduce using rule 8 (statement -> action_statement .)
    ID              reduce using rule 8 (statement -> action_statement .)
    EXIT            reduce using rule 8 (statement -> action_statement .)
    RESULT          reduce using rule 8 (statement -> action_statement .)
    RETURN          reduce using rule 8 (statement -> action_statement .)
    IF              reduce using rule 8 (statement -> action_statement .)
    DO              reduce using rule 8 (statement -> action_statement .)
    ABS             reduce using rule 8 (statement -> action_statement .)
    ASC             reduce using rule 8 (statement -> action_statement .)
    NUM             reduce using rule 8 (statement -> action_statement .)
    UPPER           reduce using rule 8 (statement -> action_statement .)
    LOWER           reduce using rule 8 (statement -> action_statement .)
    LENGTH          reduce using rule 8 (statement -> action_statement .)
    READ            reduce using rule 8 (statement -> action_statement .)
    PRINT           reduce using rule 8 (statement -> action_statement .)
    $end            reduce using rule 8 (statement -> action_statement .)
    END             reduce using rule 8 (statement -> action_statement .)


state 2

    (189) do_action -> DO . control_part SEMI action_statement_nullable OD
    (190) do_action -> DO . action_statement_nullable OD
    (191) control_part -> . for_control while_control
    (192) control_part -> . for_control
    (193) control_part -> . while_control
    (165) action_statement_nullable -> . action_statement action_statement_nullable
    (166) action_statement_nullable -> . empty
    (194) for_control -> . FOR iteration
    (205) while_control -> . WHILE expression
    (142) action_statement -> . identifier COLON action SEMI
    (143) action_statement -> . action SEMI
    (206) empty -> .
    (23) identifier -> . ID
    (144) action -> . bracketed_action
    (145) action -> . assignment_action
    (146) action -> . call_action
    (147) action -> . exit_action
    (148) action -> . result_action
    (149) action -> . return_action
    (150) bracketed_action -> . if_action
    (151) bracketed_action -> . do_action
    (152) assignment_action -> . array_location assigning_operator expression
    (167) call_action -> . procedure_call
    (168) call_action -> . builtin_call
    (183) exit_action -> . EXIT label_id
    (188) result_action -> . RESULT expression
    (185) return_action -> . RETURN result
    (158) if_action -> . IF expression then_clause else_clause FI
    (159) if_action -> . IF expression then_clause
    (189) do_action -> . DO control_part SEMI action_statement_nullable OD
    (190) do_action -> . DO action_statement_nullable OD
    (82) array_location -> . location
    (179) procedure_call -> . ID LPAREN parameter_list RPAREN
    (180) procedure_call -> . ID LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (171) builtin_name -> . ABS
    (172) builtin_name -> . ASC
    (173) builtin_name -> . NUM
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    FOR             shift and go to state 51
    WHILE           shift and go to state 47
    OD              reduce using rule 206 (empty -> .)
    ID              shift and go to state 54
    EXIT            shift and go to state 35
    RESULT          shift and go to state 34
    RETURN          shift and go to state 8
    IF              shift and go to state 23
    DO              shift and go to state 2
    ABS             shift and go to state 7
    ASC             shift and go to state 13
    NUM             shift and go to state 42
    UPPER           shift and go to state 22
    LOWER           shift and go to state 41
    LENGTH          shift and go to state 27
    READ            shift and go to state 10
    PRINT           shift and go to state 37

    action_statement               shift and go to state 46
    location                       shift and go to state 38
    bracketed_action               shift and go to state 3
    call_action                    shift and go to state 25
    array_element                  shift and go to state 19
    action                         shift and go to state 26
    empty                          shift and go to state 52
    do_action                      shift and go to state 6
    for_control                    shift and go to state 48
    string_slice                   shift and go to state 17
    result_action                  shift and go to state 11
    procedure_call                 shift and go to state 28
    array_slice                    shift and go to state 18
    builtin_name                   shift and go to state 12
    if_action                      shift and go to state 24
    array_location                 shift and go to state 31
    action_statement_nullable      shift and go to state 53
    control_part                   shift and go to state 49
    string_element                 shift and go to state 33
    builtin_call                   shift and go to state 9
    while_control                  shift and go to state 50
    return_action                  shift and go to state 5
    dereferenced_reference         shift and go to state 30
    assignment_action              shift and go to state 39
    exit_action                    shift and go to state 43
    identifier                     shift and go to state 44

state 3

    (144) action -> bracketed_action .

    SEMI            reduce using rule 144 (action -> bracketed_action .)


state 4

    (24) newmode_statement -> TYPE . newmode_list SEMI
    (25) newmode_list -> . mode_definition
    (26) newmode_list -> . mode_definition COMMA newmode_list
    (27) mode_definition -> . identifier_list ASSIGN mode
    (21) identifier_list -> . identifier
    (22) identifier_list -> . identifier COMMA identifier_list
    (23) identifier -> . ID

    ID              shift and go to state 56

    newmode_list                   shift and go to state 55
    identifier_list                shift and go to state 57
    mode_definition                shift and go to state 58
    identifier                     shift and go to state 59

state 5

    (149) action -> return_action .

    SEMI            reduce using rule 149 (action -> return_action .)


state 6

    (151) bracketed_action -> do_action .

    SEMI            reduce using rule 151 (bracketed_action -> do_action .)


state 7

    (171) builtin_name -> ABS .

    LPAREN          reduce using rule 171 (builtin_name -> ABS .)


state 8

    (185) return_action -> RETURN . result
    (186) result -> . expression
    (187) result -> . empty
    (83) expression -> . operand0
    (84) expression -> . conditional_expression
    (206) empty -> .
    (92) operand0 -> . operand1
    (93) operand0 -> . operand0 operator1 operand1
    (86) conditional_expression -> . IF expression then_expression else_expression FI
    (87) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (94) operand1 -> . operand2
    (95) operand1 -> . operand1 operator2 operand2
    (96) operand2 -> . operand3
    (97) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (98) operand3 -> . monadic_operator operand4
    (99) operand3 -> . operand4
    (106) monadic_operator -> . MINUS
    (107) monadic_operator -> . NOT
    (100) operand4 -> . array_location
    (101) operand4 -> . referenced_location
    (102) operand4 -> . primitive_value
    (82) array_location -> . location
    (108) referenced_location -> . ARROW array_location
    (125) primitive_value -> . literal
    (126) primitive_value -> . value_array_element
    (127) primitive_value -> . value_array_slice
    (128) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (129) literal -> . integer_literal
    (130) literal -> . boolean_literal
    (131) literal -> . character_literal
    (132) literal -> . empty_literal
    (133) literal -> . character_string_literal
    (134) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (135) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (136) integer_literal -> . ICONST
    (137) boolean_literal -> . TRUE
    (138) boolean_literal -> . FALSE
    (139) character_literal -> . CCONST
    (140) empty_literal -> . NULL
    (141) character_string_literal -> . SCONST

    SEMI            reduce using rule 206 (empty -> .)
    IF              shift and go to state 76
    MINUS           shift and go to state 79
    NOT             shift and go to state 65
    ARROW           shift and go to state 62
    LPAREN          shift and go to state 70
    ID              shift and go to state 56
    ICONST          shift and go to state 83
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    CCONST          shift and go to state 89
    NULL            shift and go to state 66
    SCONST          shift and go to state 77

    integer_literal                shift and go to state 61
    location                       shift and go to state 38
    operand0                       shift and go to state 68
    conditional_expression         shift and go to state 60
    parenthesized_expression       shift and go to state 80
    empty                          shift and go to state 81
    array_element                  shift and go to state 19
    boolean_literal                shift and go to state 64
    result                         shift and go to state 82
    monadic_operator               shift and go to state 63
    array_slice                    shift and go to state 18
    character_string_literal       shift and go to state 84
    operand1                       shift and go to state 85
    array_location                 shift and go to state 86
    referenced_location            shift and go to state 87
    character_literal              shift and go to state 67
    value_array_slice              shift and go to state 88
    string_element                 shift and go to state 33
    primitive_value                shift and go to state 69
    operand2                       shift and go to state 90
    literal                        shift and go to state 71
    string_slice                   shift and go to state 17
    dereferenced_reference         shift and go to state 30
    value_array_element            shift and go to state 72
    empty_literal                  shift and go to state 78
    operand4                       shift and go to state 73
    expression                     shift and go to state 75
    identifier                     shift and go to state 92
    operand3                       shift and go to state 93

state 9

    (168) call_action -> builtin_call .

    SEMI            reduce using rule 168 (call_action -> builtin_call .)


state 10

    (177) builtin_name -> READ .

    LPAREN          reduce using rule 177 (builtin_name -> READ .)


state 11

    (148) action -> result_action .

    SEMI            reduce using rule 148 (action -> result_action .)


state 12

    (169) builtin_call -> builtin_name . LPAREN parameter_list RPAREN
    (170) builtin_call -> builtin_name . LPAREN RPAREN

    LPAREN          shift and go to state 94


state 13

    (172) builtin_name -> ASC .

    LPAREN          reduce using rule 172 (builtin_name -> ASC .)


state 14

    (9) statement -> procedure_statement .

    DCL             reduce using rule 9 (statement -> procedure_statement .)
    SYN             reduce using rule 9 (statement -> procedure_statement .)
    TYPE            reduce using rule 9 (statement -> procedure_statement .)
    ID              reduce using rule 9 (statement -> procedure_statement .)
    EXIT            reduce using rule 9 (statement -> procedure_statement .)
    RESULT          reduce using rule 9 (statement -> procedure_statement .)
    RETURN          reduce using rule 9 (statement -> procedure_statement .)
    IF              reduce using rule 9 (statement -> procedure_statement .)
    DO              reduce using rule 9 (statement -> procedure_statement .)
    ABS             reduce using rule 9 (statement -> procedure_statement .)
    ASC             reduce using rule 9 (statement -> procedure_statement .)
    NUM             reduce using rule 9 (statement -> procedure_statement .)
    UPPER           reduce using rule 9 (statement -> procedure_statement .)
    LOWER           reduce using rule 9 (statement -> procedure_statement .)
    LENGTH          reduce using rule 9 (statement -> procedure_statement .)
    READ            reduce using rule 9 (statement -> procedure_statement .)
    PRINT           reduce using rule 9 (statement -> procedure_statement .)
    $end            reduce using rule 9 (statement -> procedure_statement .)
    END             reduce using rule 9 (statement -> procedure_statement .)


state 15

    (2) statement_list -> statement . statement_nullable
    (3) statement_nullable -> . statement statement_nullable
    (4) statement_nullable -> . empty
    (5) statement -> . declaration_statement
    (6) statement -> . synonym_statement
    (7) statement -> . newmode_statement
    (8) statement -> . action_statement
    (9) statement -> . procedure_statement
    (206) empty -> .
    (15) declaration_statement -> . DCL declaration_list SEMI
    (10) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (142) action_statement -> . identifier COLON action SEMI
    (143) action_statement -> . action SEMI
    (28) procedure_statement -> . ID COLON procedure_definition
    (23) identifier -> . ID
    (144) action -> . bracketed_action
    (145) action -> . assignment_action
    (146) action -> . call_action
    (147) action -> . exit_action
    (148) action -> . result_action
    (149) action -> . return_action
    (150) bracketed_action -> . if_action
    (151) bracketed_action -> . do_action
    (152) assignment_action -> . array_location assigning_operator expression
    (167) call_action -> . procedure_call
    (168) call_action -> . builtin_call
    (183) exit_action -> . EXIT label_id
    (188) result_action -> . RESULT expression
    (185) return_action -> . RETURN result
    (158) if_action -> . IF expression then_clause else_clause FI
    (159) if_action -> . IF expression then_clause
    (189) do_action -> . DO control_part SEMI action_statement_nullable OD
    (190) do_action -> . DO action_statement_nullable OD
    (82) array_location -> . location
    (179) procedure_call -> . ID LPAREN parameter_list RPAREN
    (180) procedure_call -> . ID LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (171) builtin_name -> . ABS
    (172) builtin_name -> . ASC
    (173) builtin_name -> . NUM
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    $end            reduce using rule 206 (empty -> .)
    DCL             shift and go to state 29
    SYN             shift and go to state 40
    TYPE            shift and go to state 4
    ID              shift and go to state 32
    EXIT            shift and go to state 35
    RESULT          shift and go to state 34
    RETURN          shift and go to state 8
    IF              shift and go to state 23
    DO              shift and go to state 2
    ABS             shift and go to state 7
    ASC             shift and go to state 13
    NUM             shift and go to state 42
    UPPER           shift and go to state 22
    LOWER           shift and go to state 41
    LENGTH          shift and go to state 27
    READ            shift and go to state 10
    PRINT           shift and go to state 37

    action_statement               shift and go to state 1
    location                       shift and go to state 38
    result_action                  shift and go to state 11
    return_action                  shift and go to state 5
    do_action                      shift and go to state 6
    builtin_call                   shift and go to state 9
    bracketed_action               shift and go to state 3
    builtin_name                   shift and go to state 12
    procedure_statement            shift and go to state 14
    statement                      shift and go to state 96
    string_slice                   shift and go to state 17
    array_slice                    shift and go to state 18
    array_element                  shift and go to state 19
    declaration_statement          shift and go to state 20
    statement_nullable             shift and go to state 95
    newmode_statement              shift and go to state 21
    if_action                      shift and go to state 24
    call_action                    shift and go to state 25
    action                         shift and go to state 26
    empty                          shift and go to state 97
    procedure_call                 shift and go to state 28
    dereferenced_reference         shift and go to state 30
    array_location                 shift and go to state 31
    string_element                 shift and go to state 33
    assignment_action              shift and go to state 39
    exit_action                    shift and go to state 43
    identifier                     shift and go to state 44
    synonym_statement              shift and go to state 45

state 16

    (0) S' -> program .



state 17

    (69) location -> string_slice .

    ARROW           reduce using rule 69 (location -> string_slice .)
    LBRACKET        reduce using rule 69 (location -> string_slice .)
    TIMES           reduce using rule 69 (location -> string_slice .)
    DIVIDE          reduce using rule 69 (location -> string_slice .)
    MODULO          reduce using rule 69 (location -> string_slice .)
    PLUS            reduce using rule 69 (location -> string_slice .)
    MINUS           reduce using rule 69 (location -> string_slice .)
    CONCAT          reduce using rule 69 (location -> string_slice .)
    AND             reduce using rule 69 (location -> string_slice .)
    OR              reduce using rule 69 (location -> string_slice .)
    EQUAL           reduce using rule 69 (location -> string_slice .)
    NOTEQ           reduce using rule 69 (location -> string_slice .)
    GREATER         reduce using rule 69 (location -> string_slice .)
    GTEQUAL         reduce using rule 69 (location -> string_slice .)
    LESS            reduce using rule 69 (location -> string_slice .)
    LTEQUAL         reduce using rule 69 (location -> string_slice .)
    IN              reduce using rule 69 (location -> string_slice .)
    THEN            reduce using rule 69 (location -> string_slice .)
    SEMI            reduce using rule 69 (location -> string_slice .)
    ASSIGN          reduce using rule 69 (location -> string_slice .)
    RPAREN          reduce using rule 69 (location -> string_slice .)
    COMMA           reduce using rule 69 (location -> string_slice .)
    RBRACKET        reduce using rule 69 (location -> string_slice .)
    COLON           reduce using rule 69 (location -> string_slice .)
    DOWN            reduce using rule 69 (location -> string_slice .)
    BY              reduce using rule 69 (location -> string_slice .)
    TO              reduce using rule 69 (location -> string_slice .)
    ELSE            reduce using rule 69 (location -> string_slice .)
    ELSIF           reduce using rule 69 (location -> string_slice .)
    FI              reduce using rule 69 (location -> string_slice .)
    WHILE           reduce using rule 69 (location -> string_slice .)


state 18

    (71) location -> array_slice .

    ARROW           reduce using rule 71 (location -> array_slice .)
    LBRACKET        reduce using rule 71 (location -> array_slice .)
    TIMES           reduce using rule 71 (location -> array_slice .)
    DIVIDE          reduce using rule 71 (location -> array_slice .)
    MODULO          reduce using rule 71 (location -> array_slice .)
    PLUS            reduce using rule 71 (location -> array_slice .)
    MINUS           reduce using rule 71 (location -> array_slice .)
    CONCAT          reduce using rule 71 (location -> array_slice .)
    AND             reduce using rule 71 (location -> array_slice .)
    OR              reduce using rule 71 (location -> array_slice .)
    EQUAL           reduce using rule 71 (location -> array_slice .)
    NOTEQ           reduce using rule 71 (location -> array_slice .)
    GREATER         reduce using rule 71 (location -> array_slice .)
    GTEQUAL         reduce using rule 71 (location -> array_slice .)
    LESS            reduce using rule 71 (location -> array_slice .)
    LTEQUAL         reduce using rule 71 (location -> array_slice .)
    IN              reduce using rule 71 (location -> array_slice .)
    THEN            reduce using rule 71 (location -> array_slice .)
    SEMI            reduce using rule 71 (location -> array_slice .)
    ASSIGN          reduce using rule 71 (location -> array_slice .)
    RPAREN          reduce using rule 71 (location -> array_slice .)
    COMMA           reduce using rule 71 (location -> array_slice .)
    RBRACKET        reduce using rule 71 (location -> array_slice .)
    COLON           reduce using rule 71 (location -> array_slice .)
    DOWN            reduce using rule 71 (location -> array_slice .)
    BY              reduce using rule 71 (location -> array_slice .)
    TO              reduce using rule 71 (location -> array_slice .)
    ELSE            reduce using rule 71 (location -> array_slice .)
    ELSIF           reduce using rule 71 (location -> array_slice .)
    FI              reduce using rule 71 (location -> array_slice .)
    WHILE           reduce using rule 71 (location -> array_slice .)


state 19

    (70) location -> array_element .

    ARROW           reduce using rule 70 (location -> array_element .)
    LBRACKET        reduce using rule 70 (location -> array_element .)
    TIMES           reduce using rule 70 (location -> array_element .)
    DIVIDE          reduce using rule 70 (location -> array_element .)
    MODULO          reduce using rule 70 (location -> array_element .)
    PLUS            reduce using rule 70 (location -> array_element .)
    MINUS           reduce using rule 70 (location -> array_element .)
    CONCAT          reduce using rule 70 (location -> array_element .)
    AND             reduce using rule 70 (location -> array_element .)
    OR              reduce using rule 70 (location -> array_element .)
    EQUAL           reduce using rule 70 (location -> array_element .)
    NOTEQ           reduce using rule 70 (location -> array_element .)
    GREATER         reduce using rule 70 (location -> array_element .)
    GTEQUAL         reduce using rule 70 (location -> array_element .)
    LESS            reduce using rule 70 (location -> array_element .)
    LTEQUAL         reduce using rule 70 (location -> array_element .)
    IN              reduce using rule 70 (location -> array_element .)
    THEN            reduce using rule 70 (location -> array_element .)
    SEMI            reduce using rule 70 (location -> array_element .)
    ASSIGN          reduce using rule 70 (location -> array_element .)
    RPAREN          reduce using rule 70 (location -> array_element .)
    COMMA           reduce using rule 70 (location -> array_element .)
    RBRACKET        reduce using rule 70 (location -> array_element .)
    COLON           reduce using rule 70 (location -> array_element .)
    DOWN            reduce using rule 70 (location -> array_element .)
    BY              reduce using rule 70 (location -> array_element .)
    TO              reduce using rule 70 (location -> array_element .)
    ELSE            reduce using rule 70 (location -> array_element .)
    ELSIF           reduce using rule 70 (location -> array_element .)
    FI              reduce using rule 70 (location -> array_element .)
    WHILE           reduce using rule 70 (location -> array_element .)


state 20

    (5) statement -> declaration_statement .

    DCL             reduce using rule 5 (statement -> declaration_statement .)
    SYN             reduce using rule 5 (statement -> declaration_statement .)
    TYPE            reduce using rule 5 (statement -> declaration_statement .)
    ID              reduce using rule 5 (statement -> declaration_statement .)
    EXIT            reduce using rule 5 (statement -> declaration_statement .)
    RESULT          reduce using rule 5 (statement -> declaration_statement .)
    RETURN          reduce using rule 5 (statement -> declaration_statement .)
    IF              reduce using rule 5 (statement -> declaration_statement .)
    DO              reduce using rule 5 (statement -> declaration_statement .)
    ABS             reduce using rule 5 (statement -> declaration_statement .)
    ASC             reduce using rule 5 (statement -> declaration_statement .)
    NUM             reduce using rule 5 (statement -> declaration_statement .)
    UPPER           reduce using rule 5 (statement -> declaration_statement .)
    LOWER           reduce using rule 5 (statement -> declaration_statement .)
    LENGTH          reduce using rule 5 (statement -> declaration_statement .)
    READ            reduce using rule 5 (statement -> declaration_statement .)
    PRINT           reduce using rule 5 (statement -> declaration_statement .)
    $end            reduce using rule 5 (statement -> declaration_statement .)
    END             reduce using rule 5 (statement -> declaration_statement .)


state 21

    (7) statement -> newmode_statement .

    DCL             reduce using rule 7 (statement -> newmode_statement .)
    SYN             reduce using rule 7 (statement -> newmode_statement .)
    TYPE            reduce using rule 7 (statement -> newmode_statement .)
    ID              reduce using rule 7 (statement -> newmode_statement .)
    EXIT            reduce using rule 7 (statement -> newmode_statement .)
    RESULT          reduce using rule 7 (statement -> newmode_statement .)
    RETURN          reduce using rule 7 (statement -> newmode_statement .)
    IF              reduce using rule 7 (statement -> newmode_statement .)
    DO              reduce using rule 7 (statement -> newmode_statement .)
    ABS             reduce using rule 7 (statement -> newmode_statement .)
    ASC             reduce using rule 7 (statement -> newmode_statement .)
    NUM             reduce using rule 7 (statement -> newmode_statement .)
    UPPER           reduce using rule 7 (statement -> newmode_statement .)
    LOWER           reduce using rule 7 (statement -> newmode_statement .)
    LENGTH          reduce using rule 7 (statement -> newmode_statement .)
    READ            reduce using rule 7 (statement -> newmode_statement .)
    PRINT           reduce using rule 7 (statement -> newmode_statement .)
    $end            reduce using rule 7 (statement -> newmode_statement .)
    END             reduce using rule 7 (statement -> newmode_statement .)


state 22

    (174) builtin_name -> UPPER .

    LPAREN          reduce using rule 174 (builtin_name -> UPPER .)


state 23

    (158) if_action -> IF . expression then_clause else_clause FI
    (159) if_action -> IF . expression then_clause
    (83) expression -> . operand0
    (84) expression -> . conditional_expression
    (92) operand0 -> . operand1
    (93) operand0 -> . operand0 operator1 operand1
    (86) conditional_expression -> . IF expression then_expression else_expression FI
    (87) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (94) operand1 -> . operand2
    (95) operand1 -> . operand1 operator2 operand2
    (96) operand2 -> . operand3
    (97) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (98) operand3 -> . monadic_operator operand4
    (99) operand3 -> . operand4
    (106) monadic_operator -> . MINUS
    (107) monadic_operator -> . NOT
    (100) operand4 -> . array_location
    (101) operand4 -> . referenced_location
    (102) operand4 -> . primitive_value
    (82) array_location -> . location
    (108) referenced_location -> . ARROW array_location
    (125) primitive_value -> . literal
    (126) primitive_value -> . value_array_element
    (127) primitive_value -> . value_array_slice
    (128) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (129) literal -> . integer_literal
    (130) literal -> . boolean_literal
    (131) literal -> . character_literal
    (132) literal -> . empty_literal
    (133) literal -> . character_string_literal
    (134) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (135) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (136) integer_literal -> . ICONST
    (137) boolean_literal -> . TRUE
    (138) boolean_literal -> . FALSE
    (139) character_literal -> . CCONST
    (140) empty_literal -> . NULL
    (141) character_string_literal -> . SCONST

    IF              shift and go to state 76
    MINUS           shift and go to state 79
    NOT             shift and go to state 65
    ARROW           shift and go to state 62
    LPAREN          shift and go to state 70
    ID              shift and go to state 56
    ICONST          shift and go to state 83
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    CCONST          shift and go to state 89
    NULL            shift and go to state 66
    SCONST          shift and go to state 77

    integer_literal                shift and go to state 61
    location                       shift and go to state 38
    operand0                       shift and go to state 68
    conditional_expression         shift and go to state 60
    parenthesized_expression       shift and go to state 80
    monadic_operator               shift and go to state 63
    array_element                  shift and go to state 19
    boolean_literal                shift and go to state 64
    character_string_literal       shift and go to state 84
    operand1                       shift and go to state 85
    array_location                 shift and go to state 86
    referenced_location            shift and go to state 87
    character_literal              shift and go to state 67
    value_array_slice              shift and go to state 88
    string_element                 shift and go to state 33
    primitive_value                shift and go to state 69
    operand2                       shift and go to state 90
    literal                        shift and go to state 71
    string_slice                   shift and go to state 17
    dereferenced_reference         shift and go to state 30
    value_array_element            shift and go to state 72
    empty_literal                  shift and go to state 78
    operand4                       shift and go to state 73
    array_slice                    shift and go to state 18
    expression                     shift and go to state 98
    identifier                     shift and go to state 92
    operand3                       shift and go to state 93

state 24

    (150) bracketed_action -> if_action .

    SEMI            reduce using rule 150 (bracketed_action -> if_action .)


state 25

    (146) action -> call_action .

    SEMI            reduce using rule 146 (action -> call_action .)


state 26

    (143) action_statement -> action . SEMI

    SEMI            shift and go to state 99


state 27

    (176) builtin_name -> LENGTH .

    LPAREN          reduce using rule 176 (builtin_name -> LENGTH .)


state 28

    (167) call_action -> procedure_call .

    SEMI            reduce using rule 167 (call_action -> procedure_call .)


state 29

    (15) declaration_statement -> DCL . declaration_list SEMI
    (16) declaration_list -> . declaration
    (17) declaration_list -> . declaration COMMA declaration_list
    (18) declaration -> . identifier_list mode initialization
    (19) declaration -> . identifier_list mode
    (21) identifier_list -> . identifier
    (22) identifier_list -> . identifier COMMA identifier_list
    (23) identifier -> . ID

    ID              shift and go to state 56

    identifier_list                shift and go to state 100
    declaration_list               shift and go to state 101
    declaration                    shift and go to state 102
    identifier                     shift and go to state 59

state 30

    (67) location -> dereferenced_reference .

    ARROW           reduce using rule 67 (location -> dereferenced_reference .)
    LBRACKET        reduce using rule 67 (location -> dereferenced_reference .)
    TIMES           reduce using rule 67 (location -> dereferenced_reference .)
    DIVIDE          reduce using rule 67 (location -> dereferenced_reference .)
    MODULO          reduce using rule 67 (location -> dereferenced_reference .)
    PLUS            reduce using rule 67 (location -> dereferenced_reference .)
    MINUS           reduce using rule 67 (location -> dereferenced_reference .)
    CONCAT          reduce using rule 67 (location -> dereferenced_reference .)
    AND             reduce using rule 67 (location -> dereferenced_reference .)
    OR              reduce using rule 67 (location -> dereferenced_reference .)
    EQUAL           reduce using rule 67 (location -> dereferenced_reference .)
    NOTEQ           reduce using rule 67 (location -> dereferenced_reference .)
    GREATER         reduce using rule 67 (location -> dereferenced_reference .)
    GTEQUAL         reduce using rule 67 (location -> dereferenced_reference .)
    LESS            reduce using rule 67 (location -> dereferenced_reference .)
    LTEQUAL         reduce using rule 67 (location -> dereferenced_reference .)
    IN              reduce using rule 67 (location -> dereferenced_reference .)
    THEN            reduce using rule 67 (location -> dereferenced_reference .)
    SEMI            reduce using rule 67 (location -> dereferenced_reference .)
    ASSIGN          reduce using rule 67 (location -> dereferenced_reference .)
    RPAREN          reduce using rule 67 (location -> dereferenced_reference .)
    COMMA           reduce using rule 67 (location -> dereferenced_reference .)
    RBRACKET        reduce using rule 67 (location -> dereferenced_reference .)
    COLON           reduce using rule 67 (location -> dereferenced_reference .)
    DOWN            reduce using rule 67 (location -> dereferenced_reference .)
    BY              reduce using rule 67 (location -> dereferenced_reference .)
    TO              reduce using rule 67 (location -> dereferenced_reference .)
    ELSE            reduce using rule 67 (location -> dereferenced_reference .)
    ELSIF           reduce using rule 67 (location -> dereferenced_reference .)
    FI              reduce using rule 67 (location -> dereferenced_reference .)
    WHILE           reduce using rule 67 (location -> dereferenced_reference .)


state 31

    (152) assignment_action -> array_location . assigning_operator expression
    (72) dereferenced_reference -> array_location . ARROW
    (78) array_element -> array_location . LBRACKET expression_list RBRACKET
    (81) array_slice -> array_location . LBRACKET lower_bound COLON upper_bound RBRACKET
    (153) assigning_operator -> . closed_dyadic_operator ASSIGN
    (154) assigning_operator -> . ASSIGN
    (155) closed_dyadic_operator -> . arithmetic_additive_operator
    (156) closed_dyadic_operator -> . arithmetic_multiplicative_operator
    (157) closed_dyadic_operator -> . string_concatenation_operator
    (113) arithmetic_additive_operator -> . PLUS
    (114) arithmetic_additive_operator -> . MINUS
    (103) arithmetic_multiplicative_operator -> . TIMES
    (104) arithmetic_multiplicative_operator -> . DIVIDE
    (105) arithmetic_multiplicative_operator -> . MODULO
    (115) string_concatenation_operator -> . CONCAT

    ARROW           shift and go to state 111
    LBRACKET        shift and go to state 109
    ASSIGN          shift and go to state 115
    PLUS            shift and go to state 103
    MINUS           shift and go to state 105
    TIMES           shift and go to state 110
    DIVIDE          shift and go to state 104
    MODULO          shift and go to state 112
    CONCAT          shift and go to state 108

    assigning_operator             shift and go to state 114
    string_concatenation_operator  shift and go to state 116
    arithmetic_additive_operator   shift and go to state 107
    arithmetic_multiplicative_operator shift and go to state 106
    closed_dyadic_operator         shift and go to state 113

state 32

    (28) procedure_statement -> ID . COLON procedure_definition
    (23) identifier -> ID .
    (179) procedure_call -> ID . LPAREN parameter_list RPAREN
    (180) procedure_call -> ID . LPAREN RPAREN

  ! shift/reduce conflict for COLON resolved as shift
    COLON           shift and go to state 117
    LBRACKET        reduce using rule 23 (identifier -> ID .)
    ARROW           reduce using rule 23 (identifier -> ID .)
    ASSIGN          reduce using rule 23 (identifier -> ID .)
    PLUS            reduce using rule 23 (identifier -> ID .)
    MINUS           reduce using rule 23 (identifier -> ID .)
    TIMES           reduce using rule 23 (identifier -> ID .)
    DIVIDE          reduce using rule 23 (identifier -> ID .)
    MODULO          reduce using rule 23 (identifier -> ID .)
    CONCAT          reduce using rule 23 (identifier -> ID .)
    LPAREN          shift and go to state 118

  ! COLON           [ reduce using rule 23 (identifier -> ID .) ]


state 33

    (68) location -> string_element .

    ARROW           reduce using rule 68 (location -> string_element .)
    LBRACKET        reduce using rule 68 (location -> string_element .)
    TIMES           reduce using rule 68 (location -> string_element .)
    DIVIDE          reduce using rule 68 (location -> string_element .)
    MODULO          reduce using rule 68 (location -> string_element .)
    PLUS            reduce using rule 68 (location -> string_element .)
    MINUS           reduce using rule 68 (location -> string_element .)
    CONCAT          reduce using rule 68 (location -> string_element .)
    AND             reduce using rule 68 (location -> string_element .)
    OR              reduce using rule 68 (location -> string_element .)
    EQUAL           reduce using rule 68 (location -> string_element .)
    NOTEQ           reduce using rule 68 (location -> string_element .)
    GREATER         reduce using rule 68 (location -> string_element .)
    GTEQUAL         reduce using rule 68 (location -> string_element .)
    LESS            reduce using rule 68 (location -> string_element .)
    LTEQUAL         reduce using rule 68 (location -> string_element .)
    IN              reduce using rule 68 (location -> string_element .)
    THEN            reduce using rule 68 (location -> string_element .)
    SEMI            reduce using rule 68 (location -> string_element .)
    ASSIGN          reduce using rule 68 (location -> string_element .)
    RPAREN          reduce using rule 68 (location -> string_element .)
    COMMA           reduce using rule 68 (location -> string_element .)
    RBRACKET        reduce using rule 68 (location -> string_element .)
    COLON           reduce using rule 68 (location -> string_element .)
    DOWN            reduce using rule 68 (location -> string_element .)
    BY              reduce using rule 68 (location -> string_element .)
    TO              reduce using rule 68 (location -> string_element .)
    ELSE            reduce using rule 68 (location -> string_element .)
    ELSIF           reduce using rule 68 (location -> string_element .)
    FI              reduce using rule 68 (location -> string_element .)
    WHILE           reduce using rule 68 (location -> string_element .)


state 34

    (188) result_action -> RESULT . expression
    (83) expression -> . operand0
    (84) expression -> . conditional_expression
    (92) operand0 -> . operand1
    (93) operand0 -> . operand0 operator1 operand1
    (86) conditional_expression -> . IF expression then_expression else_expression FI
    (87) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (94) operand1 -> . operand2
    (95) operand1 -> . operand1 operator2 operand2
    (96) operand2 -> . operand3
    (97) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (98) operand3 -> . monadic_operator operand4
    (99) operand3 -> . operand4
    (106) monadic_operator -> . MINUS
    (107) monadic_operator -> . NOT
    (100) operand4 -> . array_location
    (101) operand4 -> . referenced_location
    (102) operand4 -> . primitive_value
    (82) array_location -> . location
    (108) referenced_location -> . ARROW array_location
    (125) primitive_value -> . literal
    (126) primitive_value -> . value_array_element
    (127) primitive_value -> . value_array_slice
    (128) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (129) literal -> . integer_literal
    (130) literal -> . boolean_literal
    (131) literal -> . character_literal
    (132) literal -> . empty_literal
    (133) literal -> . character_string_literal
    (134) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (135) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (136) integer_literal -> . ICONST
    (137) boolean_literal -> . TRUE
    (138) boolean_literal -> . FALSE
    (139) character_literal -> . CCONST
    (140) empty_literal -> . NULL
    (141) character_string_literal -> . SCONST

    IF              shift and go to state 76
    MINUS           shift and go to state 79
    NOT             shift and go to state 65
    ARROW           shift and go to state 62
    LPAREN          shift and go to state 70
    ID              shift and go to state 56
    ICONST          shift and go to state 83
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    CCONST          shift and go to state 89
    NULL            shift and go to state 66
    SCONST          shift and go to state 77

    integer_literal                shift and go to state 61
    location                       shift and go to state 38
    operand0                       shift and go to state 68
    conditional_expression         shift and go to state 60
    parenthesized_expression       shift and go to state 80
    monadic_operator               shift and go to state 63
    array_element                  shift and go to state 19
    boolean_literal                shift and go to state 64
    array_slice                    shift and go to state 18
    character_string_literal       shift and go to state 84
    operand1                       shift and go to state 85
    array_location                 shift and go to state 86
    referenced_location            shift and go to state 87
    character_literal              shift and go to state 67
    value_array_slice              shift and go to state 88
    string_element                 shift and go to state 33
    primitive_value                shift and go to state 69
    operand2                       shift and go to state 90
    literal                        shift and go to state 71
    string_slice                   shift and go to state 17
    dereferenced_reference         shift and go to state 30
    value_array_element            shift and go to state 72
    empty_literal                  shift and go to state 78
    operand4                       shift and go to state 73
    expression                     shift and go to state 119
    identifier                     shift and go to state 92
    operand3                       shift and go to state 93

state 35

    (183) exit_action -> EXIT . label_id
    (184) label_id -> . ID

    ID              shift and go to state 121

    label_id                       shift and go to state 120

state 36

    (1) program -> statement_list .

    $end            reduce using rule 1 (program -> statement_list .)


state 37

    (178) builtin_name -> PRINT .

    LPAREN          reduce using rule 178 (builtin_name -> PRINT .)


state 38

    (82) array_location -> location .

    ARROW           reduce using rule 82 (array_location -> location .)
    LBRACKET        reduce using rule 82 (array_location -> location .)
    TIMES           reduce using rule 82 (array_location -> location .)
    DIVIDE          reduce using rule 82 (array_location -> location .)
    MODULO          reduce using rule 82 (array_location -> location .)
    PLUS            reduce using rule 82 (array_location -> location .)
    MINUS           reduce using rule 82 (array_location -> location .)
    CONCAT          reduce using rule 82 (array_location -> location .)
    AND             reduce using rule 82 (array_location -> location .)
    OR              reduce using rule 82 (array_location -> location .)
    EQUAL           reduce using rule 82 (array_location -> location .)
    NOTEQ           reduce using rule 82 (array_location -> location .)
    GREATER         reduce using rule 82 (array_location -> location .)
    GTEQUAL         reduce using rule 82 (array_location -> location .)
    LESS            reduce using rule 82 (array_location -> location .)
    LTEQUAL         reduce using rule 82 (array_location -> location .)
    IN              reduce using rule 82 (array_location -> location .)
    SEMI            reduce using rule 82 (array_location -> location .)
    COLON           reduce using rule 82 (array_location -> location .)
    ASSIGN          reduce using rule 82 (array_location -> location .)
    COMMA           reduce using rule 82 (array_location -> location .)
    RPAREN          reduce using rule 82 (array_location -> location .)
    THEN            reduce using rule 82 (array_location -> location .)
    RBRACKET        reduce using rule 82 (array_location -> location .)
    DOWN            reduce using rule 82 (array_location -> location .)
    BY              reduce using rule 82 (array_location -> location .)
    TO              reduce using rule 82 (array_location -> location .)
    ELSE            reduce using rule 82 (array_location -> location .)
    ELSIF           reduce using rule 82 (array_location -> location .)
    FI              reduce using rule 82 (array_location -> location .)
    WHILE           reduce using rule 82 (array_location -> location .)


state 39

    (145) action -> assignment_action .

    SEMI            reduce using rule 145 (action -> assignment_action .)


state 40

    (10) synonym_statement -> SYN . synonym_list SEMI
    (11) synonym_list -> . synonym_definition
    (12) synonym_list -> . synonym_definition COMMA synonym_list
    (13) synonym_definition -> . identifier_list mode ASSIGN expression
    (14) synonym_definition -> . identifier_list ASSIGN expression
    (21) identifier_list -> . identifier
    (22) identifier_list -> . identifier COMMA identifier_list
    (23) identifier -> . ID

    ID              shift and go to state 56

    synonym_definition             shift and go to state 122
    identifier_list                shift and go to state 123
    synonym_list                   shift and go to state 124
    identifier                     shift and go to state 59

state 41

    (175) builtin_name -> LOWER .

    LPAREN          reduce using rule 175 (builtin_name -> LOWER .)


state 42

    (173) builtin_name -> NUM .

    LPAREN          reduce using rule 173 (builtin_name -> NUM .)


state 43

    (147) action -> exit_action .

    SEMI            reduce using rule 147 (action -> exit_action .)


state 44

    (142) action_statement -> identifier . COLON action SEMI
    (66) location -> identifier .
    (73) string_element -> identifier . LBRACKET start_element LBRACKET
    (75) string_slice -> identifier . LBRACKET left_element COLON right_element RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    COLON           shift and go to state 125
    ARROW           reduce using rule 66 (location -> identifier .)
    ASSIGN          reduce using rule 66 (location -> identifier .)
    PLUS            reduce using rule 66 (location -> identifier .)
    MINUS           reduce using rule 66 (location -> identifier .)
    TIMES           reduce using rule 66 (location -> identifier .)
    DIVIDE          reduce using rule 66 (location -> identifier .)
    MODULO          reduce using rule 66 (location -> identifier .)
    CONCAT          reduce using rule 66 (location -> identifier .)
    LBRACKET        shift and go to state 126

  ! LBRACKET        [ reduce using rule 66 (location -> identifier .) ]


state 45

    (6) statement -> synonym_statement .

    DCL             reduce using rule 6 (statement -> synonym_statement .)
    SYN             reduce using rule 6 (statement -> synonym_statement .)
    TYPE            reduce using rule 6 (statement -> synonym_statement .)
    ID              reduce using rule 6 (statement -> synonym_statement .)
    EXIT            reduce using rule 6 (statement -> synonym_statement .)
    RESULT          reduce using rule 6 (statement -> synonym_statement .)
    RETURN          reduce using rule 6 (statement -> synonym_statement .)
    IF              reduce using rule 6 (statement -> synonym_statement .)
    DO              reduce using rule 6 (statement -> synonym_statement .)
    ABS             reduce using rule 6 (statement -> synonym_statement .)
    ASC             reduce using rule 6 (statement -> synonym_statement .)
    NUM             reduce using rule 6 (statement -> synonym_statement .)
    UPPER           reduce using rule 6 (statement -> synonym_statement .)
    LOWER           reduce using rule 6 (statement -> synonym_statement .)
    LENGTH          reduce using rule 6 (statement -> synonym_statement .)
    READ            reduce using rule 6 (statement -> synonym_statement .)
    PRINT           reduce using rule 6 (statement -> synonym_statement .)
    $end            reduce using rule 6 (statement -> synonym_statement .)
    END             reduce using rule 6 (statement -> synonym_statement .)


state 46

    (165) action_statement_nullable -> action_statement . action_statement_nullable
    (165) action_statement_nullable -> . action_statement action_statement_nullable
    (166) action_statement_nullable -> . empty
    (142) action_statement -> . identifier COLON action SEMI
    (143) action_statement -> . action SEMI
    (206) empty -> .
    (23) identifier -> . ID
    (144) action -> . bracketed_action
    (145) action -> . assignment_action
    (146) action -> . call_action
    (147) action -> . exit_action
    (148) action -> . result_action
    (149) action -> . return_action
    (150) bracketed_action -> . if_action
    (151) bracketed_action -> . do_action
    (152) assignment_action -> . array_location assigning_operator expression
    (167) call_action -> . procedure_call
    (168) call_action -> . builtin_call
    (183) exit_action -> . EXIT label_id
    (188) result_action -> . RESULT expression
    (185) return_action -> . RETURN result
    (158) if_action -> . IF expression then_clause else_clause FI
    (159) if_action -> . IF expression then_clause
    (189) do_action -> . DO control_part SEMI action_statement_nullable OD
    (190) do_action -> . DO action_statement_nullable OD
    (82) array_location -> . location
    (179) procedure_call -> . ID LPAREN parameter_list RPAREN
    (180) procedure_call -> . ID LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (171) builtin_name -> . ABS
    (172) builtin_name -> . ASC
    (173) builtin_name -> . NUM
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    OD              reduce using rule 206 (empty -> .)
    ELSE            reduce using rule 206 (empty -> .)
    ELSIF           reduce using rule 206 (empty -> .)
    SEMI            reduce using rule 206 (empty -> .)
    FI              reduce using rule 206 (empty -> .)
    ID              shift and go to state 54
    EXIT            shift and go to state 35
    RESULT          shift and go to state 34
    RETURN          shift and go to state 8
    IF              shift and go to state 23
    DO              shift and go to state 2
    ABS             shift and go to state 7
    ASC             shift and go to state 13
    NUM             shift and go to state 42
    UPPER           shift and go to state 22
    LOWER           shift and go to state 41
    LENGTH          shift and go to state 27
    READ            shift and go to state 10
    PRINT           shift and go to state 37

    action_statement               shift and go to state 46
    location                       shift and go to state 38
    result_action                  shift and go to state 11
    call_action                    shift and go to state 25
    array_element                  shift and go to state 19
    action                         shift and go to state 26
    return_action                  shift and go to state 5
    empty                          shift and go to state 52
    do_action                      shift and go to state 6
    builtin_call                   shift and go to state 9
    bracketed_action               shift and go to state 3
    procedure_call                 shift and go to state 28
    builtin_name                   shift and go to state 12
    if_action                      shift and go to state 24
    array_location                 shift and go to state 31
    action_statement_nullable      shift and go to state 127
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 17
    dereferenced_reference         shift and go to state 30
    assignment_action              shift and go to state 39
    array_slice                    shift and go to state 18
    exit_action                    shift and go to state 43
    identifier                     shift and go to state 44

state 47

    (205) while_control -> WHILE . expression
    (83) expression -> . operand0
    (84) expression -> . conditional_expression
    (92) operand0 -> . operand1
    (93) operand0 -> . operand0 operator1 operand1
    (86) conditional_expression -> . IF expression then_expression else_expression FI
    (87) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (94) operand1 -> . operand2
    (95) operand1 -> . operand1 operator2 operand2
    (96) operand2 -> . operand3
    (97) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (98) operand3 -> . monadic_operator operand4
    (99) operand3 -> . operand4
    (106) monadic_operator -> . MINUS
    (107) monadic_operator -> . NOT
    (100) operand4 -> . array_location
    (101) operand4 -> . referenced_location
    (102) operand4 -> . primitive_value
    (82) array_location -> . location
    (108) referenced_location -> . ARROW array_location
    (125) primitive_value -> . literal
    (126) primitive_value -> . value_array_element
    (127) primitive_value -> . value_array_slice
    (128) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (129) literal -> . integer_literal
    (130) literal -> . boolean_literal
    (131) literal -> . character_literal
    (132) literal -> . empty_literal
    (133) literal -> . character_string_literal
    (134) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (135) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (136) integer_literal -> . ICONST
    (137) boolean_literal -> . TRUE
    (138) boolean_literal -> . FALSE
    (139) character_literal -> . CCONST
    (140) empty_literal -> . NULL
    (141) character_string_literal -> . SCONST

    IF              shift and go to state 76
    MINUS           shift and go to state 79
    NOT             shift and go to state 65
    ARROW           shift and go to state 62
    LPAREN          shift and go to state 70
    ID              shift and go to state 56
    ICONST          shift and go to state 83
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    CCONST          shift and go to state 89
    NULL            shift and go to state 66
    SCONST          shift and go to state 77

    integer_literal                shift and go to state 61
    location                       shift and go to state 38
    operand0                       shift and go to state 68
    conditional_expression         shift and go to state 60
    parenthesized_expression       shift and go to state 80
    monadic_operator               shift and go to state 63
    array_element                  shift and go to state 19
    boolean_literal                shift and go to state 64
    array_slice                    shift and go to state 18
    character_string_literal       shift and go to state 84
    operand1                       shift and go to state 85
    array_location                 shift and go to state 86
    referenced_location            shift and go to state 87
    character_literal              shift and go to state 67
    value_array_slice              shift and go to state 88
    string_element                 shift and go to state 33
    primitive_value                shift and go to state 69
    operand2                       shift and go to state 90
    literal                        shift and go to state 71
    string_slice                   shift and go to state 17
    dereferenced_reference         shift and go to state 30
    value_array_element            shift and go to state 72
    empty_literal                  shift and go to state 78
    operand4                       shift and go to state 73
    expression                     shift and go to state 128
    identifier                     shift and go to state 92
    operand3                       shift and go to state 93

state 48

    (191) control_part -> for_control . while_control
    (192) control_part -> for_control .
    (205) while_control -> . WHILE expression

    SEMI            reduce using rule 192 (control_part -> for_control .)
    WHILE           shift and go to state 47

    while_control                  shift and go to state 129

state 49

    (189) do_action -> DO control_part . SEMI action_statement_nullable OD

    SEMI            shift and go to state 130


state 50

    (193) control_part -> while_control .

    SEMI            reduce using rule 193 (control_part -> while_control .)


state 51

    (194) for_control -> FOR . iteration
    (195) iteration -> . step_enumeration
    (196) iteration -> . range_enumeration
    (197) step_enumeration -> . identifier ASSIGN expression step_value DOWN end_value
    (198) step_enumeration -> . identifier ASSIGN expression step_value end_value
    (199) step_enumeration -> . identifier ASSIGN expression DOWN end_value
    (200) step_enumeration -> . identifier ASSIGN expression end_value
    (203) range_enumeration -> . identifier DOWN IN discrete_mode
    (204) range_enumeration -> . identifier IN discrete_mode
    (23) identifier -> . ID

    ID              shift and go to state 56

    iteration                      shift and go to state 131
    step_enumeration               shift and go to state 133
    range_enumeration              shift and go to state 132
    identifier                     shift and go to state 134

state 52

    (166) action_statement_nullable -> empty .

    OD              reduce using rule 166 (action_statement_nullable -> empty .)
    ELSE            reduce using rule 166 (action_statement_nullable -> empty .)
    ELSIF           reduce using rule 166 (action_statement_nullable -> empty .)
    SEMI            reduce using rule 166 (action_statement_nullable -> empty .)
    FI              reduce using rule 166 (action_statement_nullable -> empty .)


state 53

    (190) do_action -> DO action_statement_nullable . OD

    OD              shift and go to state 135


state 54

    (23) identifier -> ID .
    (179) procedure_call -> ID . LPAREN parameter_list RPAREN
    (180) procedure_call -> ID . LPAREN RPAREN

    COLON           reduce using rule 23 (identifier -> ID .)
    LBRACKET        reduce using rule 23 (identifier -> ID .)
    ARROW           reduce using rule 23 (identifier -> ID .)
    ASSIGN          reduce using rule 23 (identifier -> ID .)
    PLUS            reduce using rule 23 (identifier -> ID .)
    MINUS           reduce using rule 23 (identifier -> ID .)
    TIMES           reduce using rule 23 (identifier -> ID .)
    DIVIDE          reduce using rule 23 (identifier -> ID .)
    MODULO          reduce using rule 23 (identifier -> ID .)
    CONCAT          reduce using rule 23 (identifier -> ID .)
    LPAREN          shift and go to state 118


state 55

    (24) newmode_statement -> TYPE newmode_list . SEMI

    SEMI            shift and go to state 136


state 56

    (23) identifier -> ID .

    LBRACKET        reduce using rule 23 (identifier -> ID .)
    ARROW           reduce using rule 23 (identifier -> ID .)
    TIMES           reduce using rule 23 (identifier -> ID .)
    DIVIDE          reduce using rule 23 (identifier -> ID .)
    MODULO          reduce using rule 23 (identifier -> ID .)
    PLUS            reduce using rule 23 (identifier -> ID .)
    MINUS           reduce using rule 23 (identifier -> ID .)
    CONCAT          reduce using rule 23 (identifier -> ID .)
    AND             reduce using rule 23 (identifier -> ID .)
    OR              reduce using rule 23 (identifier -> ID .)
    EQUAL           reduce using rule 23 (identifier -> ID .)
    NOTEQ           reduce using rule 23 (identifier -> ID .)
    GREATER         reduce using rule 23 (identifier -> ID .)
    GTEQUAL         reduce using rule 23 (identifier -> ID .)
    LESS            reduce using rule 23 (identifier -> ID .)
    LTEQUAL         reduce using rule 23 (identifier -> ID .)
    IN              reduce using rule 23 (identifier -> ID .)
    COMMA           reduce using rule 23 (identifier -> ID .)
    SEMI            reduce using rule 23 (identifier -> ID .)
    REF             reduce using rule 23 (identifier -> ID .)
    ID              reduce using rule 23 (identifier -> ID .)
    INT             reduce using rule 23 (identifier -> ID .)
    BOOL            reduce using rule 23 (identifier -> ID .)
    CHAR            reduce using rule 23 (identifier -> ID .)
    CHARS           reduce using rule 23 (identifier -> ID .)
    ARRAY           reduce using rule 23 (identifier -> ID .)
    ASSIGN          reduce using rule 23 (identifier -> ID .)
    RPAREN          reduce using rule 23 (identifier -> ID .)
    LPAREN          reduce using rule 23 (identifier -> ID .)
    RBRACKET        reduce using rule 23 (identifier -> ID .)
    THEN            reduce using rule 23 (identifier -> ID .)
    COLON           reduce using rule 23 (identifier -> ID .)
    DOWN            reduce using rule 23 (identifier -> ID .)
    BY              reduce using rule 23 (identifier -> ID .)
    TO              reduce using rule 23 (identifier -> ID .)
    ELSE            reduce using rule 23 (identifier -> ID .)
    ELSIF           reduce using rule 23 (identifier -> ID .)
    FI              reduce using rule 23 (identifier -> ID .)
    WHILE           reduce using rule 23 (identifier -> ID .)
    LOC             reduce using rule 23 (identifier -> ID .)


state 57

    (27) mode_definition -> identifier_list . ASSIGN mode

    ASSIGN          shift and go to state 137


state 58

    (25) newmode_list -> mode_definition .
    (26) newmode_list -> mode_definition . COMMA newmode_list

    SEMI            reduce using rule 25 (newmode_list -> mode_definition .)
    COMMA           shift and go to state 138


state 59

    (21) identifier_list -> identifier .
    (22) identifier_list -> identifier . COMMA identifier_list

    REF             reduce using rule 21 (identifier_list -> identifier .)
    ID              reduce using rule 21 (identifier_list -> identifier .)
    INT             reduce using rule 21 (identifier_list -> identifier .)
    BOOL            reduce using rule 21 (identifier_list -> identifier .)
    CHAR            reduce using rule 21 (identifier_list -> identifier .)
    CHARS           reduce using rule 21 (identifier_list -> identifier .)
    ARRAY           reduce using rule 21 (identifier_list -> identifier .)
    ASSIGN          reduce using rule 21 (identifier_list -> identifier .)
    COMMA           shift and go to state 139


state 60

    (84) expression -> conditional_expression .

    LBRACKET        reduce using rule 84 (expression -> conditional_expression .)
    COLON           reduce using rule 84 (expression -> conditional_expression .)
    COMMA           reduce using rule 84 (expression -> conditional_expression .)
    SEMI            reduce using rule 84 (expression -> conditional_expression .)
    RBRACKET        reduce using rule 84 (expression -> conditional_expression .)
    FI              reduce using rule 84 (expression -> conditional_expression .)
    THEN            reduce using rule 84 (expression -> conditional_expression .)
    RPAREN          reduce using rule 84 (expression -> conditional_expression .)
    DOWN            reduce using rule 84 (expression -> conditional_expression .)
    BY              reduce using rule 84 (expression -> conditional_expression .)
    TO              reduce using rule 84 (expression -> conditional_expression .)
    WHILE           reduce using rule 84 (expression -> conditional_expression .)
    ELSE            reduce using rule 84 (expression -> conditional_expression .)
    ELSIF           reduce using rule 84 (expression -> conditional_expression .)


state 61

    (129) literal -> integer_literal .

    LBRACKET        reduce using rule 129 (literal -> integer_literal .)
    TIMES           reduce using rule 129 (literal -> integer_literal .)
    DIVIDE          reduce using rule 129 (literal -> integer_literal .)
    MODULO          reduce using rule 129 (literal -> integer_literal .)
    PLUS            reduce using rule 129 (literal -> integer_literal .)
    MINUS           reduce using rule 129 (literal -> integer_literal .)
    CONCAT          reduce using rule 129 (literal -> integer_literal .)
    AND             reduce using rule 129 (literal -> integer_literal .)
    OR              reduce using rule 129 (literal -> integer_literal .)
    EQUAL           reduce using rule 129 (literal -> integer_literal .)
    NOTEQ           reduce using rule 129 (literal -> integer_literal .)
    GREATER         reduce using rule 129 (literal -> integer_literal .)
    GTEQUAL         reduce using rule 129 (literal -> integer_literal .)
    LESS            reduce using rule 129 (literal -> integer_literal .)
    LTEQUAL         reduce using rule 129 (literal -> integer_literal .)
    IN              reduce using rule 129 (literal -> integer_literal .)
    COMMA           reduce using rule 129 (literal -> integer_literal .)
    SEMI            reduce using rule 129 (literal -> integer_literal .)
    RBRACKET        reduce using rule 129 (literal -> integer_literal .)
    THEN            reduce using rule 129 (literal -> integer_literal .)
    COLON           reduce using rule 129 (literal -> integer_literal .)
    RPAREN          reduce using rule 129 (literal -> integer_literal .)
    DOWN            reduce using rule 129 (literal -> integer_literal .)
    BY              reduce using rule 129 (literal -> integer_literal .)
    TO              reduce using rule 129 (literal -> integer_literal .)
    ELSE            reduce using rule 129 (literal -> integer_literal .)
    ELSIF           reduce using rule 129 (literal -> integer_literal .)
    FI              reduce using rule 129 (literal -> integer_literal .)
    WHILE           reduce using rule 129 (literal -> integer_literal .)


state 62

    (108) referenced_location -> ARROW . array_location
    (82) array_location -> . location
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (23) identifier -> . ID
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    ID              shift and go to state 56

    array_location                 shift and go to state 140
    string_element                 shift and go to state 33
    array_element                  shift and go to state 19
    string_slice                   shift and go to state 17
    array_slice                    shift and go to state 18
    location                       shift and go to state 38
    identifier                     shift and go to state 92
    dereferenced_reference         shift and go to state 30

state 63

    (98) operand3 -> monadic_operator . operand4
    (100) operand4 -> . array_location
    (101) operand4 -> . referenced_location
    (102) operand4 -> . primitive_value
    (82) array_location -> . location
    (108) referenced_location -> . ARROW array_location
    (125) primitive_value -> . literal
    (126) primitive_value -> . value_array_element
    (127) primitive_value -> . value_array_slice
    (128) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (129) literal -> . integer_literal
    (130) literal -> . boolean_literal
    (131) literal -> . character_literal
    (132) literal -> . empty_literal
    (133) literal -> . character_string_literal
    (134) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (135) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (136) integer_literal -> . ICONST
    (137) boolean_literal -> . TRUE
    (138) boolean_literal -> . FALSE
    (139) character_literal -> . CCONST
    (140) empty_literal -> . NULL
    (141) character_string_literal -> . SCONST

    ARROW           shift and go to state 62
    LPAREN          shift and go to state 70
    ID              shift and go to state 56
    ICONST          shift and go to state 83
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    CCONST          shift and go to state 89
    NULL            shift and go to state 66
    SCONST          shift and go to state 77

    integer_literal                shift and go to state 61
    location                       shift and go to state 38
    empty_literal                  shift and go to state 78
    array_element                  shift and go to state 19
    parenthesized_expression       shift and go to state 80
    boolean_literal                shift and go to state 64
    dereferenced_reference         shift and go to state 30
    character_string_literal       shift and go to state 84
    array_location                 shift and go to state 86
    referenced_location            shift and go to state 87
    character_literal              shift and go to state 67
    value_array_slice              shift and go to state 88
    primitive_value                shift and go to state 69
    string_element                 shift and go to state 33
    literal                        shift and go to state 71
    string_slice                   shift and go to state 17
    array_slice                    shift and go to state 18
    value_array_element            shift and go to state 72
    operand4                       shift and go to state 141
    identifier                     shift and go to state 92

state 64

    (130) literal -> boolean_literal .

    LBRACKET        reduce using rule 130 (literal -> boolean_literal .)
    TIMES           reduce using rule 130 (literal -> boolean_literal .)
    DIVIDE          reduce using rule 130 (literal -> boolean_literal .)
    MODULO          reduce using rule 130 (literal -> boolean_literal .)
    PLUS            reduce using rule 130 (literal -> boolean_literal .)
    MINUS           reduce using rule 130 (literal -> boolean_literal .)
    CONCAT          reduce using rule 130 (literal -> boolean_literal .)
    AND             reduce using rule 130 (literal -> boolean_literal .)
    OR              reduce using rule 130 (literal -> boolean_literal .)
    EQUAL           reduce using rule 130 (literal -> boolean_literal .)
    NOTEQ           reduce using rule 130 (literal -> boolean_literal .)
    GREATER         reduce using rule 130 (literal -> boolean_literal .)
    GTEQUAL         reduce using rule 130 (literal -> boolean_literal .)
    LESS            reduce using rule 130 (literal -> boolean_literal .)
    LTEQUAL         reduce using rule 130 (literal -> boolean_literal .)
    IN              reduce using rule 130 (literal -> boolean_literal .)
    COMMA           reduce using rule 130 (literal -> boolean_literal .)
    SEMI            reduce using rule 130 (literal -> boolean_literal .)
    RBRACKET        reduce using rule 130 (literal -> boolean_literal .)
    THEN            reduce using rule 130 (literal -> boolean_literal .)
    COLON           reduce using rule 130 (literal -> boolean_literal .)
    RPAREN          reduce using rule 130 (literal -> boolean_literal .)
    DOWN            reduce using rule 130 (literal -> boolean_literal .)
    BY              reduce using rule 130 (literal -> boolean_literal .)
    TO              reduce using rule 130 (literal -> boolean_literal .)
    ELSE            reduce using rule 130 (literal -> boolean_literal .)
    ELSIF           reduce using rule 130 (literal -> boolean_literal .)
    FI              reduce using rule 130 (literal -> boolean_literal .)
    WHILE           reduce using rule 130 (literal -> boolean_literal .)


state 65

    (107) monadic_operator -> NOT .

    ARROW           reduce using rule 107 (monadic_operator -> NOT .)
    LPAREN          reduce using rule 107 (monadic_operator -> NOT .)
    ID              reduce using rule 107 (monadic_operator -> NOT .)
    ICONST          reduce using rule 107 (monadic_operator -> NOT .)
    TRUE            reduce using rule 107 (monadic_operator -> NOT .)
    FALSE           reduce using rule 107 (monadic_operator -> NOT .)
    CCONST          reduce using rule 107 (monadic_operator -> NOT .)
    NULL            reduce using rule 107 (monadic_operator -> NOT .)
    SCONST          reduce using rule 107 (monadic_operator -> NOT .)


state 66

    (140) empty_literal -> NULL .

    LBRACKET        reduce using rule 140 (empty_literal -> NULL .)
    TIMES           reduce using rule 140 (empty_literal -> NULL .)
    DIVIDE          reduce using rule 140 (empty_literal -> NULL .)
    MODULO          reduce using rule 140 (empty_literal -> NULL .)
    PLUS            reduce using rule 140 (empty_literal -> NULL .)
    MINUS           reduce using rule 140 (empty_literal -> NULL .)
    CONCAT          reduce using rule 140 (empty_literal -> NULL .)
    AND             reduce using rule 140 (empty_literal -> NULL .)
    OR              reduce using rule 140 (empty_literal -> NULL .)
    EQUAL           reduce using rule 140 (empty_literal -> NULL .)
    NOTEQ           reduce using rule 140 (empty_literal -> NULL .)
    GREATER         reduce using rule 140 (empty_literal -> NULL .)
    GTEQUAL         reduce using rule 140 (empty_literal -> NULL .)
    LESS            reduce using rule 140 (empty_literal -> NULL .)
    LTEQUAL         reduce using rule 140 (empty_literal -> NULL .)
    IN              reduce using rule 140 (empty_literal -> NULL .)
    COMMA           reduce using rule 140 (empty_literal -> NULL .)
    RPAREN          reduce using rule 140 (empty_literal -> NULL .)
    SEMI            reduce using rule 140 (empty_literal -> NULL .)
    THEN            reduce using rule 140 (empty_literal -> NULL .)
    RBRACKET        reduce using rule 140 (empty_literal -> NULL .)
    COLON           reduce using rule 140 (empty_literal -> NULL .)
    DOWN            reduce using rule 140 (empty_literal -> NULL .)
    BY              reduce using rule 140 (empty_literal -> NULL .)
    TO              reduce using rule 140 (empty_literal -> NULL .)
    ELSE            reduce using rule 140 (empty_literal -> NULL .)
    ELSIF           reduce using rule 140 (empty_literal -> NULL .)
    FI              reduce using rule 140 (empty_literal -> NULL .)
    WHILE           reduce using rule 140 (empty_literal -> NULL .)


state 67

    (131) literal -> character_literal .

    LBRACKET        reduce using rule 131 (literal -> character_literal .)
    TIMES           reduce using rule 131 (literal -> character_literal .)
    DIVIDE          reduce using rule 131 (literal -> character_literal .)
    MODULO          reduce using rule 131 (literal -> character_literal .)
    PLUS            reduce using rule 131 (literal -> character_literal .)
    MINUS           reduce using rule 131 (literal -> character_literal .)
    CONCAT          reduce using rule 131 (literal -> character_literal .)
    AND             reduce using rule 131 (literal -> character_literal .)
    OR              reduce using rule 131 (literal -> character_literal .)
    EQUAL           reduce using rule 131 (literal -> character_literal .)
    NOTEQ           reduce using rule 131 (literal -> character_literal .)
    GREATER         reduce using rule 131 (literal -> character_literal .)
    GTEQUAL         reduce using rule 131 (literal -> character_literal .)
    LESS            reduce using rule 131 (literal -> character_literal .)
    LTEQUAL         reduce using rule 131 (literal -> character_literal .)
    IN              reduce using rule 131 (literal -> character_literal .)
    COMMA           reduce using rule 131 (literal -> character_literal .)
    SEMI            reduce using rule 131 (literal -> character_literal .)
    RBRACKET        reduce using rule 131 (literal -> character_literal .)
    THEN            reduce using rule 131 (literal -> character_literal .)
    COLON           reduce using rule 131 (literal -> character_literal .)
    RPAREN          reduce using rule 131 (literal -> character_literal .)
    DOWN            reduce using rule 131 (literal -> character_literal .)
    BY              reduce using rule 131 (literal -> character_literal .)
    TO              reduce using rule 131 (literal -> character_literal .)
    ELSE            reduce using rule 131 (literal -> character_literal .)
    ELSIF           reduce using rule 131 (literal -> character_literal .)
    FI              reduce using rule 131 (literal -> character_literal .)
    WHILE           reduce using rule 131 (literal -> character_literal .)


state 68

    (83) expression -> operand0 .
    (93) operand0 -> operand0 . operator1 operand1
    (109) operator1 -> . relational_operator
    (110) operator1 -> . membership_operator
    (116) relational_operator -> . AND
    (117) relational_operator -> . OR
    (118) relational_operator -> . EQUAL
    (119) relational_operator -> . NOTEQ
    (120) relational_operator -> . GREATER
    (121) relational_operator -> . GTEQUAL
    (122) relational_operator -> . LESS
    (123) relational_operator -> . LTEQUAL
    (124) membership_operator -> . IN

    LBRACKET        reduce using rule 83 (expression -> operand0 .)
    COLON           reduce using rule 83 (expression -> operand0 .)
    COMMA           reduce using rule 83 (expression -> operand0 .)
    SEMI            reduce using rule 83 (expression -> operand0 .)
    RBRACKET        reduce using rule 83 (expression -> operand0 .)
    FI              reduce using rule 83 (expression -> operand0 .)
    THEN            reduce using rule 83 (expression -> operand0 .)
    RPAREN          reduce using rule 83 (expression -> operand0 .)
    DOWN            reduce using rule 83 (expression -> operand0 .)
    BY              reduce using rule 83 (expression -> operand0 .)
    TO              reduce using rule 83 (expression -> operand0 .)
    WHILE           reduce using rule 83 (expression -> operand0 .)
    ELSE            reduce using rule 83 (expression -> operand0 .)
    ELSIF           reduce using rule 83 (expression -> operand0 .)
    AND             shift and go to state 151
    OR              shift and go to state 142
    EQUAL           shift and go to state 146
    NOTEQ           shift and go to state 144
    GREATER         shift and go to state 149
    GTEQUAL         shift and go to state 153
    LESS            shift and go to state 143
    LTEQUAL         shift and go to state 145
    IN              shift and go to state 148

    operator1                      shift and go to state 150
    relational_operator            shift and go to state 147
    membership_operator            shift and go to state 152

state 69

    (102) operand4 -> primitive_value .
    (134) value_array_element -> primitive_value . LBRACKET expression_list RBRACKET
    (135) value_array_slice -> primitive_value . LBRACKET expression COLON expression RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    TIMES           reduce using rule 102 (operand4 -> primitive_value .)
    DIVIDE          reduce using rule 102 (operand4 -> primitive_value .)
    MODULO          reduce using rule 102 (operand4 -> primitive_value .)
    PLUS            reduce using rule 102 (operand4 -> primitive_value .)
    MINUS           reduce using rule 102 (operand4 -> primitive_value .)
    CONCAT          reduce using rule 102 (operand4 -> primitive_value .)
    AND             reduce using rule 102 (operand4 -> primitive_value .)
    OR              reduce using rule 102 (operand4 -> primitive_value .)
    EQUAL           reduce using rule 102 (operand4 -> primitive_value .)
    NOTEQ           reduce using rule 102 (operand4 -> primitive_value .)
    GREATER         reduce using rule 102 (operand4 -> primitive_value .)
    GTEQUAL         reduce using rule 102 (operand4 -> primitive_value .)
    LESS            reduce using rule 102 (operand4 -> primitive_value .)
    LTEQUAL         reduce using rule 102 (operand4 -> primitive_value .)
    IN              reduce using rule 102 (operand4 -> primitive_value .)
    DOWN            reduce using rule 102 (operand4 -> primitive_value .)
    BY              reduce using rule 102 (operand4 -> primitive_value .)
    TO              reduce using rule 102 (operand4 -> primitive_value .)
    SEMI            reduce using rule 102 (operand4 -> primitive_value .)
    COMMA           reduce using rule 102 (operand4 -> primitive_value .)
    RBRACKET        reduce using rule 102 (operand4 -> primitive_value .)
    COLON           reduce using rule 102 (operand4 -> primitive_value .)
    THEN            reduce using rule 102 (operand4 -> primitive_value .)
    RPAREN          reduce using rule 102 (operand4 -> primitive_value .)
    ELSE            reduce using rule 102 (operand4 -> primitive_value .)
    ELSIF           reduce using rule 102 (operand4 -> primitive_value .)
    FI              reduce using rule 102 (operand4 -> primitive_value .)
    WHILE           reduce using rule 102 (operand4 -> primitive_value .)
    LBRACKET        shift and go to state 154

  ! LBRACKET        [ reduce using rule 102 (operand4 -> primitive_value .) ]


state 70

    (85) parenthesized_expression -> LPAREN . expression RPAREN
    (83) expression -> . operand0
    (84) expression -> . conditional_expression
    (92) operand0 -> . operand1
    (93) operand0 -> . operand0 operator1 operand1
    (86) conditional_expression -> . IF expression then_expression else_expression FI
    (87) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (94) operand1 -> . operand2
    (95) operand1 -> . operand1 operator2 operand2
    (96) operand2 -> . operand3
    (97) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (98) operand3 -> . monadic_operator operand4
    (99) operand3 -> . operand4
    (106) monadic_operator -> . MINUS
    (107) monadic_operator -> . NOT
    (100) operand4 -> . array_location
    (101) operand4 -> . referenced_location
    (102) operand4 -> . primitive_value
    (82) array_location -> . location
    (108) referenced_location -> . ARROW array_location
    (125) primitive_value -> . literal
    (126) primitive_value -> . value_array_element
    (127) primitive_value -> . value_array_slice
    (128) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (129) literal -> . integer_literal
    (130) literal -> . boolean_literal
    (131) literal -> . character_literal
    (132) literal -> . empty_literal
    (133) literal -> . character_string_literal
    (134) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (135) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (136) integer_literal -> . ICONST
    (137) boolean_literal -> . TRUE
    (138) boolean_literal -> . FALSE
    (139) character_literal -> . CCONST
    (140) empty_literal -> . NULL
    (141) character_string_literal -> . SCONST

    IF              shift and go to state 76
    MINUS           shift and go to state 79
    NOT             shift and go to state 65
    ARROW           shift and go to state 62
    LPAREN          shift and go to state 70
    ID              shift and go to state 56
    ICONST          shift and go to state 83
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    CCONST          shift and go to state 89
    NULL            shift and go to state 66
    SCONST          shift and go to state 77

    integer_literal                shift and go to state 61
    location                       shift and go to state 38
    operand0                       shift and go to state 68
    conditional_expression         shift and go to state 60
    parenthesized_expression       shift and go to state 80
    monadic_operator               shift and go to state 63
    array_element                  shift and go to state 19
    boolean_literal                shift and go to state 64
    array_slice                    shift and go to state 18
    character_string_literal       shift and go to state 84
    operand1                       shift and go to state 85
    array_location                 shift and go to state 86
    referenced_location            shift and go to state 87
    character_literal              shift and go to state 67
    value_array_slice              shift and go to state 88
    string_element                 shift and go to state 33
    primitive_value                shift and go to state 69
    operand2                       shift and go to state 90
    literal                        shift and go to state 71
    string_slice                   shift and go to state 17
    dereferenced_reference         shift and go to state 30
    value_array_element            shift and go to state 72
    empty_literal                  shift and go to state 78
    operand4                       shift and go to state 73
    expression                     shift and go to state 155
    identifier                     shift and go to state 92
    operand3                       shift and go to state 93

state 71

    (125) primitive_value -> literal .

    LBRACKET        reduce using rule 125 (primitive_value -> literal .)
    TIMES           reduce using rule 125 (primitive_value -> literal .)
    DIVIDE          reduce using rule 125 (primitive_value -> literal .)
    MODULO          reduce using rule 125 (primitive_value -> literal .)
    PLUS            reduce using rule 125 (primitive_value -> literal .)
    MINUS           reduce using rule 125 (primitive_value -> literal .)
    CONCAT          reduce using rule 125 (primitive_value -> literal .)
    AND             reduce using rule 125 (primitive_value -> literal .)
    OR              reduce using rule 125 (primitive_value -> literal .)
    EQUAL           reduce using rule 125 (primitive_value -> literal .)
    NOTEQ           reduce using rule 125 (primitive_value -> literal .)
    GREATER         reduce using rule 125 (primitive_value -> literal .)
    GTEQUAL         reduce using rule 125 (primitive_value -> literal .)
    LESS            reduce using rule 125 (primitive_value -> literal .)
    LTEQUAL         reduce using rule 125 (primitive_value -> literal .)
    IN              reduce using rule 125 (primitive_value -> literal .)
    SEMI            reduce using rule 125 (primitive_value -> literal .)
    THEN            reduce using rule 125 (primitive_value -> literal .)
    RPAREN          reduce using rule 125 (primitive_value -> literal .)
    COMMA           reduce using rule 125 (primitive_value -> literal .)
    RBRACKET        reduce using rule 125 (primitive_value -> literal .)
    COLON           reduce using rule 125 (primitive_value -> literal .)
    DOWN            reduce using rule 125 (primitive_value -> literal .)
    BY              reduce using rule 125 (primitive_value -> literal .)
    TO              reduce using rule 125 (primitive_value -> literal .)
    ELSE            reduce using rule 125 (primitive_value -> literal .)
    ELSIF           reduce using rule 125 (primitive_value -> literal .)
    FI              reduce using rule 125 (primitive_value -> literal .)
    WHILE           reduce using rule 125 (primitive_value -> literal .)


state 72

    (126) primitive_value -> value_array_element .

    LBRACKET        reduce using rule 126 (primitive_value -> value_array_element .)
    TIMES           reduce using rule 126 (primitive_value -> value_array_element .)
    DIVIDE          reduce using rule 126 (primitive_value -> value_array_element .)
    MODULO          reduce using rule 126 (primitive_value -> value_array_element .)
    PLUS            reduce using rule 126 (primitive_value -> value_array_element .)
    MINUS           reduce using rule 126 (primitive_value -> value_array_element .)
    CONCAT          reduce using rule 126 (primitive_value -> value_array_element .)
    AND             reduce using rule 126 (primitive_value -> value_array_element .)
    OR              reduce using rule 126 (primitive_value -> value_array_element .)
    EQUAL           reduce using rule 126 (primitive_value -> value_array_element .)
    NOTEQ           reduce using rule 126 (primitive_value -> value_array_element .)
    GREATER         reduce using rule 126 (primitive_value -> value_array_element .)
    GTEQUAL         reduce using rule 126 (primitive_value -> value_array_element .)
    LESS            reduce using rule 126 (primitive_value -> value_array_element .)
    LTEQUAL         reduce using rule 126 (primitive_value -> value_array_element .)
    IN              reduce using rule 126 (primitive_value -> value_array_element .)
    SEMI            reduce using rule 126 (primitive_value -> value_array_element .)
    THEN            reduce using rule 126 (primitive_value -> value_array_element .)
    RPAREN          reduce using rule 126 (primitive_value -> value_array_element .)
    COMMA           reduce using rule 126 (primitive_value -> value_array_element .)
    RBRACKET        reduce using rule 126 (primitive_value -> value_array_element .)
    COLON           reduce using rule 126 (primitive_value -> value_array_element .)
    DOWN            reduce using rule 126 (primitive_value -> value_array_element .)
    BY              reduce using rule 126 (primitive_value -> value_array_element .)
    TO              reduce using rule 126 (primitive_value -> value_array_element .)
    ELSE            reduce using rule 126 (primitive_value -> value_array_element .)
    ELSIF           reduce using rule 126 (primitive_value -> value_array_element .)
    FI              reduce using rule 126 (primitive_value -> value_array_element .)
    WHILE           reduce using rule 126 (primitive_value -> value_array_element .)


state 73

    (99) operand3 -> operand4 .

    TIMES           reduce using rule 99 (operand3 -> operand4 .)
    DIVIDE          reduce using rule 99 (operand3 -> operand4 .)
    MODULO          reduce using rule 99 (operand3 -> operand4 .)
    PLUS            reduce using rule 99 (operand3 -> operand4 .)
    MINUS           reduce using rule 99 (operand3 -> operand4 .)
    CONCAT          reduce using rule 99 (operand3 -> operand4 .)
    AND             reduce using rule 99 (operand3 -> operand4 .)
    OR              reduce using rule 99 (operand3 -> operand4 .)
    EQUAL           reduce using rule 99 (operand3 -> operand4 .)
    NOTEQ           reduce using rule 99 (operand3 -> operand4 .)
    GREATER         reduce using rule 99 (operand3 -> operand4 .)
    GTEQUAL         reduce using rule 99 (operand3 -> operand4 .)
    LESS            reduce using rule 99 (operand3 -> operand4 .)
    LTEQUAL         reduce using rule 99 (operand3 -> operand4 .)
    IN              reduce using rule 99 (operand3 -> operand4 .)
    COLON           reduce using rule 99 (operand3 -> operand4 .)
    COMMA           reduce using rule 99 (operand3 -> operand4 .)
    RBRACKET        reduce using rule 99 (operand3 -> operand4 .)
    SEMI            reduce using rule 99 (operand3 -> operand4 .)
    RPAREN          reduce using rule 99 (operand3 -> operand4 .)
    DOWN            reduce using rule 99 (operand3 -> operand4 .)
    BY              reduce using rule 99 (operand3 -> operand4 .)
    TO              reduce using rule 99 (operand3 -> operand4 .)
    WHILE           reduce using rule 99 (operand3 -> operand4 .)
    FI              reduce using rule 99 (operand3 -> operand4 .)
    THEN            reduce using rule 99 (operand3 -> operand4 .)
    LBRACKET        reduce using rule 99 (operand3 -> operand4 .)
    ELSE            reduce using rule 99 (operand3 -> operand4 .)
    ELSIF           reduce using rule 99 (operand3 -> operand4 .)


state 74

    (137) boolean_literal -> TRUE .

    LBRACKET        reduce using rule 137 (boolean_literal -> TRUE .)
    TIMES           reduce using rule 137 (boolean_literal -> TRUE .)
    DIVIDE          reduce using rule 137 (boolean_literal -> TRUE .)
    MODULO          reduce using rule 137 (boolean_literal -> TRUE .)
    PLUS            reduce using rule 137 (boolean_literal -> TRUE .)
    MINUS           reduce using rule 137 (boolean_literal -> TRUE .)
    CONCAT          reduce using rule 137 (boolean_literal -> TRUE .)
    AND             reduce using rule 137 (boolean_literal -> TRUE .)
    OR              reduce using rule 137 (boolean_literal -> TRUE .)
    EQUAL           reduce using rule 137 (boolean_literal -> TRUE .)
    NOTEQ           reduce using rule 137 (boolean_literal -> TRUE .)
    GREATER         reduce using rule 137 (boolean_literal -> TRUE .)
    GTEQUAL         reduce using rule 137 (boolean_literal -> TRUE .)
    LESS            reduce using rule 137 (boolean_literal -> TRUE .)
    LTEQUAL         reduce using rule 137 (boolean_literal -> TRUE .)
    IN              reduce using rule 137 (boolean_literal -> TRUE .)
    RBRACKET        reduce using rule 137 (boolean_literal -> TRUE .)
    THEN            reduce using rule 137 (boolean_literal -> TRUE .)
    SEMI            reduce using rule 137 (boolean_literal -> TRUE .)
    RPAREN          reduce using rule 137 (boolean_literal -> TRUE .)
    COMMA           reduce using rule 137 (boolean_literal -> TRUE .)
    COLON           reduce using rule 137 (boolean_literal -> TRUE .)
    DOWN            reduce using rule 137 (boolean_literal -> TRUE .)
    BY              reduce using rule 137 (boolean_literal -> TRUE .)
    TO              reduce using rule 137 (boolean_literal -> TRUE .)
    ELSE            reduce using rule 137 (boolean_literal -> TRUE .)
    ELSIF           reduce using rule 137 (boolean_literal -> TRUE .)
    FI              reduce using rule 137 (boolean_literal -> TRUE .)
    WHILE           reduce using rule 137 (boolean_literal -> TRUE .)


state 75

    (186) result -> expression .

    SEMI            reduce using rule 186 (result -> expression .)


state 76

    (86) conditional_expression -> IF . expression then_expression else_expression FI
    (87) conditional_expression -> IF . expression then_expression elsif_expression else_expression FI
    (83) expression -> . operand0
    (84) expression -> . conditional_expression
    (92) operand0 -> . operand1
    (93) operand0 -> . operand0 operator1 operand1
    (86) conditional_expression -> . IF expression then_expression else_expression FI
    (87) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (94) operand1 -> . operand2
    (95) operand1 -> . operand1 operator2 operand2
    (96) operand2 -> . operand3
    (97) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (98) operand3 -> . monadic_operator operand4
    (99) operand3 -> . operand4
    (106) monadic_operator -> . MINUS
    (107) monadic_operator -> . NOT
    (100) operand4 -> . array_location
    (101) operand4 -> . referenced_location
    (102) operand4 -> . primitive_value
    (82) array_location -> . location
    (108) referenced_location -> . ARROW array_location
    (125) primitive_value -> . literal
    (126) primitive_value -> . value_array_element
    (127) primitive_value -> . value_array_slice
    (128) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (129) literal -> . integer_literal
    (130) literal -> . boolean_literal
    (131) literal -> . character_literal
    (132) literal -> . empty_literal
    (133) literal -> . character_string_literal
    (134) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (135) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (136) integer_literal -> . ICONST
    (137) boolean_literal -> . TRUE
    (138) boolean_literal -> . FALSE
    (139) character_literal -> . CCONST
    (140) empty_literal -> . NULL
    (141) character_string_literal -> . SCONST

    IF              shift and go to state 76
    MINUS           shift and go to state 79
    NOT             shift and go to state 65
    ARROW           shift and go to state 62
    LPAREN          shift and go to state 70
    ID              shift and go to state 56
    ICONST          shift and go to state 83
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    CCONST          shift and go to state 89
    NULL            shift and go to state 66
    SCONST          shift and go to state 77

    integer_literal                shift and go to state 61
    location                       shift and go to state 38
    operand0                       shift and go to state 68
    conditional_expression         shift and go to state 60
    parenthesized_expression       shift and go to state 80
    monadic_operator               shift and go to state 63
    array_element                  shift and go to state 19
    boolean_literal                shift and go to state 64
    array_slice                    shift and go to state 18
    character_string_literal       shift and go to state 84
    operand1                       shift and go to state 85
    array_location                 shift and go to state 86
    referenced_location            shift and go to state 87
    character_literal              shift and go to state 67
    value_array_slice              shift and go to state 88
    string_element                 shift and go to state 33
    primitive_value                shift and go to state 69
    operand2                       shift and go to state 90
    literal                        shift and go to state 71
    string_slice                   shift and go to state 17
    dereferenced_reference         shift and go to state 30
    value_array_element            shift and go to state 72
    empty_literal                  shift and go to state 78
    operand4                       shift and go to state 73
    expression                     shift and go to state 156
    identifier                     shift and go to state 92
    operand3                       shift and go to state 93

state 77

    (141) character_string_literal -> SCONST .

    LBRACKET        reduce using rule 141 (character_string_literal -> SCONST .)
    TIMES           reduce using rule 141 (character_string_literal -> SCONST .)
    DIVIDE          reduce using rule 141 (character_string_literal -> SCONST .)
    MODULO          reduce using rule 141 (character_string_literal -> SCONST .)
    PLUS            reduce using rule 141 (character_string_literal -> SCONST .)
    MINUS           reduce using rule 141 (character_string_literal -> SCONST .)
    CONCAT          reduce using rule 141 (character_string_literal -> SCONST .)
    AND             reduce using rule 141 (character_string_literal -> SCONST .)
    OR              reduce using rule 141 (character_string_literal -> SCONST .)
    EQUAL           reduce using rule 141 (character_string_literal -> SCONST .)
    NOTEQ           reduce using rule 141 (character_string_literal -> SCONST .)
    GREATER         reduce using rule 141 (character_string_literal -> SCONST .)
    GTEQUAL         reduce using rule 141 (character_string_literal -> SCONST .)
    LESS            reduce using rule 141 (character_string_literal -> SCONST .)
    LTEQUAL         reduce using rule 141 (character_string_literal -> SCONST .)
    IN              reduce using rule 141 (character_string_literal -> SCONST .)
    THEN            reduce using rule 141 (character_string_literal -> SCONST .)
    COMMA           reduce using rule 141 (character_string_literal -> SCONST .)
    RPAREN          reduce using rule 141 (character_string_literal -> SCONST .)
    COLON           reduce using rule 141 (character_string_literal -> SCONST .)
    DOWN            reduce using rule 141 (character_string_literal -> SCONST .)
    BY              reduce using rule 141 (character_string_literal -> SCONST .)
    TO              reduce using rule 141 (character_string_literal -> SCONST .)
    RBRACKET        reduce using rule 141 (character_string_literal -> SCONST .)
    WHILE           reduce using rule 141 (character_string_literal -> SCONST .)
    SEMI            reduce using rule 141 (character_string_literal -> SCONST .)
    ELSE            reduce using rule 141 (character_string_literal -> SCONST .)
    ELSIF           reduce using rule 141 (character_string_literal -> SCONST .)
    FI              reduce using rule 141 (character_string_literal -> SCONST .)


state 78

    (132) literal -> empty_literal .

    LBRACKET        reduce using rule 132 (literal -> empty_literal .)
    TIMES           reduce using rule 132 (literal -> empty_literal .)
    DIVIDE          reduce using rule 132 (literal -> empty_literal .)
    MODULO          reduce using rule 132 (literal -> empty_literal .)
    PLUS            reduce using rule 132 (literal -> empty_literal .)
    MINUS           reduce using rule 132 (literal -> empty_literal .)
    CONCAT          reduce using rule 132 (literal -> empty_literal .)
    AND             reduce using rule 132 (literal -> empty_literal .)
    OR              reduce using rule 132 (literal -> empty_literal .)
    EQUAL           reduce using rule 132 (literal -> empty_literal .)
    NOTEQ           reduce using rule 132 (literal -> empty_literal .)
    GREATER         reduce using rule 132 (literal -> empty_literal .)
    GTEQUAL         reduce using rule 132 (literal -> empty_literal .)
    LESS            reduce using rule 132 (literal -> empty_literal .)
    LTEQUAL         reduce using rule 132 (literal -> empty_literal .)
    IN              reduce using rule 132 (literal -> empty_literal .)
    COMMA           reduce using rule 132 (literal -> empty_literal .)
    SEMI            reduce using rule 132 (literal -> empty_literal .)
    RBRACKET        reduce using rule 132 (literal -> empty_literal .)
    THEN            reduce using rule 132 (literal -> empty_literal .)
    COLON           reduce using rule 132 (literal -> empty_literal .)
    RPAREN          reduce using rule 132 (literal -> empty_literal .)
    DOWN            reduce using rule 132 (literal -> empty_literal .)
    BY              reduce using rule 132 (literal -> empty_literal .)
    TO              reduce using rule 132 (literal -> empty_literal .)
    ELSE            reduce using rule 132 (literal -> empty_literal .)
    ELSIF           reduce using rule 132 (literal -> empty_literal .)
    FI              reduce using rule 132 (literal -> empty_literal .)
    WHILE           reduce using rule 132 (literal -> empty_literal .)


state 79

    (106) monadic_operator -> MINUS .

    ARROW           reduce using rule 106 (monadic_operator -> MINUS .)
    LPAREN          reduce using rule 106 (monadic_operator -> MINUS .)
    ID              reduce using rule 106 (monadic_operator -> MINUS .)
    ICONST          reduce using rule 106 (monadic_operator -> MINUS .)
    TRUE            reduce using rule 106 (monadic_operator -> MINUS .)
    FALSE           reduce using rule 106 (monadic_operator -> MINUS .)
    CCONST          reduce using rule 106 (monadic_operator -> MINUS .)
    NULL            reduce using rule 106 (monadic_operator -> MINUS .)
    SCONST          reduce using rule 106 (monadic_operator -> MINUS .)


state 80

    (128) primitive_value -> parenthesized_expression .

    LBRACKET        reduce using rule 128 (primitive_value -> parenthesized_expression .)
    TIMES           reduce using rule 128 (primitive_value -> parenthesized_expression .)
    DIVIDE          reduce using rule 128 (primitive_value -> parenthesized_expression .)
    MODULO          reduce using rule 128 (primitive_value -> parenthesized_expression .)
    PLUS            reduce using rule 128 (primitive_value -> parenthesized_expression .)
    MINUS           reduce using rule 128 (primitive_value -> parenthesized_expression .)
    CONCAT          reduce using rule 128 (primitive_value -> parenthesized_expression .)
    AND             reduce using rule 128 (primitive_value -> parenthesized_expression .)
    OR              reduce using rule 128 (primitive_value -> parenthesized_expression .)
    EQUAL           reduce using rule 128 (primitive_value -> parenthesized_expression .)
    NOTEQ           reduce using rule 128 (primitive_value -> parenthesized_expression .)
    GREATER         reduce using rule 128 (primitive_value -> parenthesized_expression .)
    GTEQUAL         reduce using rule 128 (primitive_value -> parenthesized_expression .)
    LESS            reduce using rule 128 (primitive_value -> parenthesized_expression .)
    LTEQUAL         reduce using rule 128 (primitive_value -> parenthesized_expression .)
    IN              reduce using rule 128 (primitive_value -> parenthesized_expression .)
    SEMI            reduce using rule 128 (primitive_value -> parenthesized_expression .)
    THEN            reduce using rule 128 (primitive_value -> parenthesized_expression .)
    RPAREN          reduce using rule 128 (primitive_value -> parenthesized_expression .)
    COMMA           reduce using rule 128 (primitive_value -> parenthesized_expression .)
    RBRACKET        reduce using rule 128 (primitive_value -> parenthesized_expression .)
    COLON           reduce using rule 128 (primitive_value -> parenthesized_expression .)
    DOWN            reduce using rule 128 (primitive_value -> parenthesized_expression .)
    BY              reduce using rule 128 (primitive_value -> parenthesized_expression .)
    TO              reduce using rule 128 (primitive_value -> parenthesized_expression .)
    ELSE            reduce using rule 128 (primitive_value -> parenthesized_expression .)
    ELSIF           reduce using rule 128 (primitive_value -> parenthesized_expression .)
    FI              reduce using rule 128 (primitive_value -> parenthesized_expression .)
    WHILE           reduce using rule 128 (primitive_value -> parenthesized_expression .)


state 81

    (187) result -> empty .

    SEMI            reduce using rule 187 (result -> empty .)


state 82

    (185) return_action -> RETURN result .

    SEMI            reduce using rule 185 (return_action -> RETURN result .)


state 83

    (136) integer_literal -> ICONST .

    LBRACKET        reduce using rule 136 (integer_literal -> ICONST .)
    TIMES           reduce using rule 136 (integer_literal -> ICONST .)
    DIVIDE          reduce using rule 136 (integer_literal -> ICONST .)
    MODULO          reduce using rule 136 (integer_literal -> ICONST .)
    PLUS            reduce using rule 136 (integer_literal -> ICONST .)
    MINUS           reduce using rule 136 (integer_literal -> ICONST .)
    CONCAT          reduce using rule 136 (integer_literal -> ICONST .)
    AND             reduce using rule 136 (integer_literal -> ICONST .)
    OR              reduce using rule 136 (integer_literal -> ICONST .)
    EQUAL           reduce using rule 136 (integer_literal -> ICONST .)
    NOTEQ           reduce using rule 136 (integer_literal -> ICONST .)
    GREATER         reduce using rule 136 (integer_literal -> ICONST .)
    GTEQUAL         reduce using rule 136 (integer_literal -> ICONST .)
    LESS            reduce using rule 136 (integer_literal -> ICONST .)
    LTEQUAL         reduce using rule 136 (integer_literal -> ICONST .)
    IN              reduce using rule 136 (integer_literal -> ICONST .)
    COMMA           reduce using rule 136 (integer_literal -> ICONST .)
    SEMI            reduce using rule 136 (integer_literal -> ICONST .)
    RBRACKET        reduce using rule 136 (integer_literal -> ICONST .)
    THEN            reduce using rule 136 (integer_literal -> ICONST .)
    RPAREN          reduce using rule 136 (integer_literal -> ICONST .)
    COLON           reduce using rule 136 (integer_literal -> ICONST .)
    DOWN            reduce using rule 136 (integer_literal -> ICONST .)
    BY              reduce using rule 136 (integer_literal -> ICONST .)
    TO              reduce using rule 136 (integer_literal -> ICONST .)
    ELSE            reduce using rule 136 (integer_literal -> ICONST .)
    ELSIF           reduce using rule 136 (integer_literal -> ICONST .)
    FI              reduce using rule 136 (integer_literal -> ICONST .)
    WHILE           reduce using rule 136 (integer_literal -> ICONST .)


state 84

    (133) literal -> character_string_literal .

    LBRACKET        reduce using rule 133 (literal -> character_string_literal .)
    TIMES           reduce using rule 133 (literal -> character_string_literal .)
    DIVIDE          reduce using rule 133 (literal -> character_string_literal .)
    MODULO          reduce using rule 133 (literal -> character_string_literal .)
    PLUS            reduce using rule 133 (literal -> character_string_literal .)
    MINUS           reduce using rule 133 (literal -> character_string_literal .)
    CONCAT          reduce using rule 133 (literal -> character_string_literal .)
    AND             reduce using rule 133 (literal -> character_string_literal .)
    OR              reduce using rule 133 (literal -> character_string_literal .)
    EQUAL           reduce using rule 133 (literal -> character_string_literal .)
    NOTEQ           reduce using rule 133 (literal -> character_string_literal .)
    GREATER         reduce using rule 133 (literal -> character_string_literal .)
    GTEQUAL         reduce using rule 133 (literal -> character_string_literal .)
    LESS            reduce using rule 133 (literal -> character_string_literal .)
    LTEQUAL         reduce using rule 133 (literal -> character_string_literal .)
    IN              reduce using rule 133 (literal -> character_string_literal .)
    COMMA           reduce using rule 133 (literal -> character_string_literal .)
    SEMI            reduce using rule 133 (literal -> character_string_literal .)
    RBRACKET        reduce using rule 133 (literal -> character_string_literal .)
    THEN            reduce using rule 133 (literal -> character_string_literal .)
    COLON           reduce using rule 133 (literal -> character_string_literal .)
    RPAREN          reduce using rule 133 (literal -> character_string_literal .)
    DOWN            reduce using rule 133 (literal -> character_string_literal .)
    BY              reduce using rule 133 (literal -> character_string_literal .)
    TO              reduce using rule 133 (literal -> character_string_literal .)
    ELSE            reduce using rule 133 (literal -> character_string_literal .)
    ELSIF           reduce using rule 133 (literal -> character_string_literal .)
    FI              reduce using rule 133 (literal -> character_string_literal .)
    WHILE           reduce using rule 133 (literal -> character_string_literal .)


state 85

    (92) operand0 -> operand1 .
    (95) operand1 -> operand1 . operator2 operand2
    (111) operator2 -> . arithmetic_additive_operator
    (112) operator2 -> . string_concatenation_operator
    (113) arithmetic_additive_operator -> . PLUS
    (114) arithmetic_additive_operator -> . MINUS
    (115) string_concatenation_operator -> . CONCAT

    AND             reduce using rule 92 (operand0 -> operand1 .)
    OR              reduce using rule 92 (operand0 -> operand1 .)
    EQUAL           reduce using rule 92 (operand0 -> operand1 .)
    NOTEQ           reduce using rule 92 (operand0 -> operand1 .)
    GREATER         reduce using rule 92 (operand0 -> operand1 .)
    GTEQUAL         reduce using rule 92 (operand0 -> operand1 .)
    LESS            reduce using rule 92 (operand0 -> operand1 .)
    LTEQUAL         reduce using rule 92 (operand0 -> operand1 .)
    IN              reduce using rule 92 (operand0 -> operand1 .)
    THEN            reduce using rule 92 (operand0 -> operand1 .)
    COLON           reduce using rule 92 (operand0 -> operand1 .)
    COMMA           reduce using rule 92 (operand0 -> operand1 .)
    RBRACKET        reduce using rule 92 (operand0 -> operand1 .)
    RPAREN          reduce using rule 92 (operand0 -> operand1 .)
    SEMI            reduce using rule 92 (operand0 -> operand1 .)
    FI              reduce using rule 92 (operand0 -> operand1 .)
    ELSE            reduce using rule 92 (operand0 -> operand1 .)
    ELSIF           reduce using rule 92 (operand0 -> operand1 .)
    WHILE           reduce using rule 92 (operand0 -> operand1 .)
    LBRACKET        reduce using rule 92 (operand0 -> operand1 .)
    DOWN            reduce using rule 92 (operand0 -> operand1 .)
    TO              reduce using rule 92 (operand0 -> operand1 .)
    BY              reduce using rule 92 (operand0 -> operand1 .)
    PLUS            shift and go to state 103
    MINUS           shift and go to state 105
    CONCAT          shift and go to state 108

    string_concatenation_operator  shift and go to state 157
    arithmetic_additive_operator   shift and go to state 159
    operator2                      shift and go to state 158

state 86

    (100) operand4 -> array_location .
    (72) dereferenced_reference -> array_location . ARROW
    (78) array_element -> array_location . LBRACKET expression_list RBRACKET
    (81) array_slice -> array_location . LBRACKET lower_bound COLON upper_bound RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    TIMES           reduce using rule 100 (operand4 -> array_location .)
    DIVIDE          reduce using rule 100 (operand4 -> array_location .)
    MODULO          reduce using rule 100 (operand4 -> array_location .)
    PLUS            reduce using rule 100 (operand4 -> array_location .)
    MINUS           reduce using rule 100 (operand4 -> array_location .)
    CONCAT          reduce using rule 100 (operand4 -> array_location .)
    AND             reduce using rule 100 (operand4 -> array_location .)
    OR              reduce using rule 100 (operand4 -> array_location .)
    EQUAL           reduce using rule 100 (operand4 -> array_location .)
    NOTEQ           reduce using rule 100 (operand4 -> array_location .)
    GREATER         reduce using rule 100 (operand4 -> array_location .)
    GTEQUAL         reduce using rule 100 (operand4 -> array_location .)
    LESS            reduce using rule 100 (operand4 -> array_location .)
    LTEQUAL         reduce using rule 100 (operand4 -> array_location .)
    IN              reduce using rule 100 (operand4 -> array_location .)
    DOWN            reduce using rule 100 (operand4 -> array_location .)
    BY              reduce using rule 100 (operand4 -> array_location .)
    TO              reduce using rule 100 (operand4 -> array_location .)
    SEMI            reduce using rule 100 (operand4 -> array_location .)
    COMMA           reduce using rule 100 (operand4 -> array_location .)
    RBRACKET        reduce using rule 100 (operand4 -> array_location .)
    COLON           reduce using rule 100 (operand4 -> array_location .)
    THEN            reduce using rule 100 (operand4 -> array_location .)
    RPAREN          reduce using rule 100 (operand4 -> array_location .)
    ELSE            reduce using rule 100 (operand4 -> array_location .)
    ELSIF           reduce using rule 100 (operand4 -> array_location .)
    FI              reduce using rule 100 (operand4 -> array_location .)
    WHILE           reduce using rule 100 (operand4 -> array_location .)
    ARROW           shift and go to state 111
    LBRACKET        shift and go to state 109

  ! LBRACKET        [ reduce using rule 100 (operand4 -> array_location .) ]


state 87

    (101) operand4 -> referenced_location .

    TIMES           reduce using rule 101 (operand4 -> referenced_location .)
    DIVIDE          reduce using rule 101 (operand4 -> referenced_location .)
    MODULO          reduce using rule 101 (operand4 -> referenced_location .)
    PLUS            reduce using rule 101 (operand4 -> referenced_location .)
    MINUS           reduce using rule 101 (operand4 -> referenced_location .)
    CONCAT          reduce using rule 101 (operand4 -> referenced_location .)
    AND             reduce using rule 101 (operand4 -> referenced_location .)
    OR              reduce using rule 101 (operand4 -> referenced_location .)
    EQUAL           reduce using rule 101 (operand4 -> referenced_location .)
    NOTEQ           reduce using rule 101 (operand4 -> referenced_location .)
    GREATER         reduce using rule 101 (operand4 -> referenced_location .)
    GTEQUAL         reduce using rule 101 (operand4 -> referenced_location .)
    LESS            reduce using rule 101 (operand4 -> referenced_location .)
    LTEQUAL         reduce using rule 101 (operand4 -> referenced_location .)
    IN              reduce using rule 101 (operand4 -> referenced_location .)
    DOWN            reduce using rule 101 (operand4 -> referenced_location .)
    BY              reduce using rule 101 (operand4 -> referenced_location .)
    TO              reduce using rule 101 (operand4 -> referenced_location .)
    SEMI            reduce using rule 101 (operand4 -> referenced_location .)
    COMMA           reduce using rule 101 (operand4 -> referenced_location .)
    RBRACKET        reduce using rule 101 (operand4 -> referenced_location .)
    COLON           reduce using rule 101 (operand4 -> referenced_location .)
    THEN            reduce using rule 101 (operand4 -> referenced_location .)
    RPAREN          reduce using rule 101 (operand4 -> referenced_location .)
    LBRACKET        reduce using rule 101 (operand4 -> referenced_location .)
    ELSE            reduce using rule 101 (operand4 -> referenced_location .)
    ELSIF           reduce using rule 101 (operand4 -> referenced_location .)
    FI              reduce using rule 101 (operand4 -> referenced_location .)
    WHILE           reduce using rule 101 (operand4 -> referenced_location .)


state 88

    (127) primitive_value -> value_array_slice .

    LBRACKET        reduce using rule 127 (primitive_value -> value_array_slice .)
    TIMES           reduce using rule 127 (primitive_value -> value_array_slice .)
    DIVIDE          reduce using rule 127 (primitive_value -> value_array_slice .)
    MODULO          reduce using rule 127 (primitive_value -> value_array_slice .)
    PLUS            reduce using rule 127 (primitive_value -> value_array_slice .)
    MINUS           reduce using rule 127 (primitive_value -> value_array_slice .)
    CONCAT          reduce using rule 127 (primitive_value -> value_array_slice .)
    AND             reduce using rule 127 (primitive_value -> value_array_slice .)
    OR              reduce using rule 127 (primitive_value -> value_array_slice .)
    EQUAL           reduce using rule 127 (primitive_value -> value_array_slice .)
    NOTEQ           reduce using rule 127 (primitive_value -> value_array_slice .)
    GREATER         reduce using rule 127 (primitive_value -> value_array_slice .)
    GTEQUAL         reduce using rule 127 (primitive_value -> value_array_slice .)
    LESS            reduce using rule 127 (primitive_value -> value_array_slice .)
    LTEQUAL         reduce using rule 127 (primitive_value -> value_array_slice .)
    IN              reduce using rule 127 (primitive_value -> value_array_slice .)
    SEMI            reduce using rule 127 (primitive_value -> value_array_slice .)
    THEN            reduce using rule 127 (primitive_value -> value_array_slice .)
    RPAREN          reduce using rule 127 (primitive_value -> value_array_slice .)
    COMMA           reduce using rule 127 (primitive_value -> value_array_slice .)
    RBRACKET        reduce using rule 127 (primitive_value -> value_array_slice .)
    COLON           reduce using rule 127 (primitive_value -> value_array_slice .)
    DOWN            reduce using rule 127 (primitive_value -> value_array_slice .)
    BY              reduce using rule 127 (primitive_value -> value_array_slice .)
    TO              reduce using rule 127 (primitive_value -> value_array_slice .)
    ELSE            reduce using rule 127 (primitive_value -> value_array_slice .)
    ELSIF           reduce using rule 127 (primitive_value -> value_array_slice .)
    FI              reduce using rule 127 (primitive_value -> value_array_slice .)
    WHILE           reduce using rule 127 (primitive_value -> value_array_slice .)


state 89

    (139) character_literal -> CCONST .

    LBRACKET        reduce using rule 139 (character_literal -> CCONST .)
    TIMES           reduce using rule 139 (character_literal -> CCONST .)
    DIVIDE          reduce using rule 139 (character_literal -> CCONST .)
    MODULO          reduce using rule 139 (character_literal -> CCONST .)
    PLUS            reduce using rule 139 (character_literal -> CCONST .)
    MINUS           reduce using rule 139 (character_literal -> CCONST .)
    CONCAT          reduce using rule 139 (character_literal -> CCONST .)
    AND             reduce using rule 139 (character_literal -> CCONST .)
    OR              reduce using rule 139 (character_literal -> CCONST .)
    EQUAL           reduce using rule 139 (character_literal -> CCONST .)
    NOTEQ           reduce using rule 139 (character_literal -> CCONST .)
    GREATER         reduce using rule 139 (character_literal -> CCONST .)
    GTEQUAL         reduce using rule 139 (character_literal -> CCONST .)
    LESS            reduce using rule 139 (character_literal -> CCONST .)
    LTEQUAL         reduce using rule 139 (character_literal -> CCONST .)
    IN              reduce using rule 139 (character_literal -> CCONST .)
    COLON           reduce using rule 139 (character_literal -> CCONST .)
    RPAREN          reduce using rule 139 (character_literal -> CCONST .)
    COMMA           reduce using rule 139 (character_literal -> CCONST .)
    RBRACKET        reduce using rule 139 (character_literal -> CCONST .)
    ELSE            reduce using rule 139 (character_literal -> CCONST .)
    ELSIF           reduce using rule 139 (character_literal -> CCONST .)
    SEMI            reduce using rule 139 (character_literal -> CCONST .)
    THEN            reduce using rule 139 (character_literal -> CCONST .)
    DOWN            reduce using rule 139 (character_literal -> CCONST .)
    BY              reduce using rule 139 (character_literal -> CCONST .)
    TO              reduce using rule 139 (character_literal -> CCONST .)
    FI              reduce using rule 139 (character_literal -> CCONST .)
    WHILE           reduce using rule 139 (character_literal -> CCONST .)


state 90

    (94) operand1 -> operand2 .
    (97) operand2 -> operand2 . arithmetic_multiplicative_operator operand3
    (103) arithmetic_multiplicative_operator -> . TIMES
    (104) arithmetic_multiplicative_operator -> . DIVIDE
    (105) arithmetic_multiplicative_operator -> . MODULO

    PLUS            reduce using rule 94 (operand1 -> operand2 .)
    MINUS           reduce using rule 94 (operand1 -> operand2 .)
    CONCAT          reduce using rule 94 (operand1 -> operand2 .)
    AND             reduce using rule 94 (operand1 -> operand2 .)
    OR              reduce using rule 94 (operand1 -> operand2 .)
    EQUAL           reduce using rule 94 (operand1 -> operand2 .)
    NOTEQ           reduce using rule 94 (operand1 -> operand2 .)
    GREATER         reduce using rule 94 (operand1 -> operand2 .)
    GTEQUAL         reduce using rule 94 (operand1 -> operand2 .)
    LESS            reduce using rule 94 (operand1 -> operand2 .)
    LTEQUAL         reduce using rule 94 (operand1 -> operand2 .)
    IN              reduce using rule 94 (operand1 -> operand2 .)
    COMMA           reduce using rule 94 (operand1 -> operand2 .)
    RBRACKET        reduce using rule 94 (operand1 -> operand2 .)
    COLON           reduce using rule 94 (operand1 -> operand2 .)
    SEMI            reduce using rule 94 (operand1 -> operand2 .)
    RPAREN          reduce using rule 94 (operand1 -> operand2 .)
    DOWN            reduce using rule 94 (operand1 -> operand2 .)
    TO              reduce using rule 94 (operand1 -> operand2 .)
    THEN            reduce using rule 94 (operand1 -> operand2 .)
    LBRACKET        reduce using rule 94 (operand1 -> operand2 .)
    BY              reduce using rule 94 (operand1 -> operand2 .)
    ELSE            reduce using rule 94 (operand1 -> operand2 .)
    ELSIF           reduce using rule 94 (operand1 -> operand2 .)
    FI              reduce using rule 94 (operand1 -> operand2 .)
    WHILE           reduce using rule 94 (operand1 -> operand2 .)
    TIMES           shift and go to state 110
    DIVIDE          shift and go to state 104
    MODULO          shift and go to state 112

    arithmetic_multiplicative_operator shift and go to state 160

state 91

    (138) boolean_literal -> FALSE .

    LBRACKET        reduce using rule 138 (boolean_literal -> FALSE .)
    TIMES           reduce using rule 138 (boolean_literal -> FALSE .)
    DIVIDE          reduce using rule 138 (boolean_literal -> FALSE .)
    MODULO          reduce using rule 138 (boolean_literal -> FALSE .)
    PLUS            reduce using rule 138 (boolean_literal -> FALSE .)
    MINUS           reduce using rule 138 (boolean_literal -> FALSE .)
    CONCAT          reduce using rule 138 (boolean_literal -> FALSE .)
    AND             reduce using rule 138 (boolean_literal -> FALSE .)
    OR              reduce using rule 138 (boolean_literal -> FALSE .)
    EQUAL           reduce using rule 138 (boolean_literal -> FALSE .)
    NOTEQ           reduce using rule 138 (boolean_literal -> FALSE .)
    GREATER         reduce using rule 138 (boolean_literal -> FALSE .)
    GTEQUAL         reduce using rule 138 (boolean_literal -> FALSE .)
    LESS            reduce using rule 138 (boolean_literal -> FALSE .)
    LTEQUAL         reduce using rule 138 (boolean_literal -> FALSE .)
    IN              reduce using rule 138 (boolean_literal -> FALSE .)
    RBRACKET        reduce using rule 138 (boolean_literal -> FALSE .)
    THEN            reduce using rule 138 (boolean_literal -> FALSE .)
    SEMI            reduce using rule 138 (boolean_literal -> FALSE .)
    RPAREN          reduce using rule 138 (boolean_literal -> FALSE .)
    COMMA           reduce using rule 138 (boolean_literal -> FALSE .)
    COLON           reduce using rule 138 (boolean_literal -> FALSE .)
    DOWN            reduce using rule 138 (boolean_literal -> FALSE .)
    BY              reduce using rule 138 (boolean_literal -> FALSE .)
    TO              reduce using rule 138 (boolean_literal -> FALSE .)
    ELSE            reduce using rule 138 (boolean_literal -> FALSE .)
    ELSIF           reduce using rule 138 (boolean_literal -> FALSE .)
    FI              reduce using rule 138 (boolean_literal -> FALSE .)
    WHILE           reduce using rule 138 (boolean_literal -> FALSE .)


state 92

    (66) location -> identifier .
    (73) string_element -> identifier . LBRACKET start_element LBRACKET
    (75) string_slice -> identifier . LBRACKET left_element COLON right_element RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    ARROW           reduce using rule 66 (location -> identifier .)
    TIMES           reduce using rule 66 (location -> identifier .)
    DIVIDE          reduce using rule 66 (location -> identifier .)
    MODULO          reduce using rule 66 (location -> identifier .)
    PLUS            reduce using rule 66 (location -> identifier .)
    MINUS           reduce using rule 66 (location -> identifier .)
    CONCAT          reduce using rule 66 (location -> identifier .)
    AND             reduce using rule 66 (location -> identifier .)
    OR              reduce using rule 66 (location -> identifier .)
    EQUAL           reduce using rule 66 (location -> identifier .)
    NOTEQ           reduce using rule 66 (location -> identifier .)
    GREATER         reduce using rule 66 (location -> identifier .)
    GTEQUAL         reduce using rule 66 (location -> identifier .)
    LESS            reduce using rule 66 (location -> identifier .)
    LTEQUAL         reduce using rule 66 (location -> identifier .)
    IN              reduce using rule 66 (location -> identifier .)
    THEN            reduce using rule 66 (location -> identifier .)
    SEMI            reduce using rule 66 (location -> identifier .)
    RPAREN          reduce using rule 66 (location -> identifier .)
    COMMA           reduce using rule 66 (location -> identifier .)
    RBRACKET        reduce using rule 66 (location -> identifier .)
    COLON           reduce using rule 66 (location -> identifier .)
    DOWN            reduce using rule 66 (location -> identifier .)
    BY              reduce using rule 66 (location -> identifier .)
    TO              reduce using rule 66 (location -> identifier .)
    ELSE            reduce using rule 66 (location -> identifier .)
    ELSIF           reduce using rule 66 (location -> identifier .)
    FI              reduce using rule 66 (location -> identifier .)
    WHILE           reduce using rule 66 (location -> identifier .)
    ASSIGN          reduce using rule 66 (location -> identifier .)
    LBRACKET        shift and go to state 126

  ! LBRACKET        [ reduce using rule 66 (location -> identifier .) ]


state 93

    (96) operand2 -> operand3 .

    TIMES           reduce using rule 96 (operand2 -> operand3 .)
    DIVIDE          reduce using rule 96 (operand2 -> operand3 .)
    MODULO          reduce using rule 96 (operand2 -> operand3 .)
    PLUS            reduce using rule 96 (operand2 -> operand3 .)
    MINUS           reduce using rule 96 (operand2 -> operand3 .)
    CONCAT          reduce using rule 96 (operand2 -> operand3 .)
    AND             reduce using rule 96 (operand2 -> operand3 .)
    OR              reduce using rule 96 (operand2 -> operand3 .)
    EQUAL           reduce using rule 96 (operand2 -> operand3 .)
    NOTEQ           reduce using rule 96 (operand2 -> operand3 .)
    GREATER         reduce using rule 96 (operand2 -> operand3 .)
    GTEQUAL         reduce using rule 96 (operand2 -> operand3 .)
    LESS            reduce using rule 96 (operand2 -> operand3 .)
    LTEQUAL         reduce using rule 96 (operand2 -> operand3 .)
    IN              reduce using rule 96 (operand2 -> operand3 .)
    ELSE            reduce using rule 96 (operand2 -> operand3 .)
    ELSIF           reduce using rule 96 (operand2 -> operand3 .)
    RBRACKET        reduce using rule 96 (operand2 -> operand3 .)
    COLON           reduce using rule 96 (operand2 -> operand3 .)
    THEN            reduce using rule 96 (operand2 -> operand3 .)
    COMMA           reduce using rule 96 (operand2 -> operand3 .)
    SEMI            reduce using rule 96 (operand2 -> operand3 .)
    RPAREN          reduce using rule 96 (operand2 -> operand3 .)
    DOWN            reduce using rule 96 (operand2 -> operand3 .)
    TO              reduce using rule 96 (operand2 -> operand3 .)
    BY              reduce using rule 96 (operand2 -> operand3 .)
    LBRACKET        reduce using rule 96 (operand2 -> operand3 .)
    FI              reduce using rule 96 (operand2 -> operand3 .)
    WHILE           reduce using rule 96 (operand2 -> operand3 .)


state 94

    (169) builtin_call -> builtin_name LPAREN . parameter_list RPAREN
    (170) builtin_call -> builtin_name LPAREN . RPAREN
    (181) parameter_list -> . expression
    (182) parameter_list -> . expression COMMA parameter_list
    (83) expression -> . operand0
    (84) expression -> . conditional_expression
    (92) operand0 -> . operand1
    (93) operand0 -> . operand0 operator1 operand1
    (86) conditional_expression -> . IF expression then_expression else_expression FI
    (87) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (94) operand1 -> . operand2
    (95) operand1 -> . operand1 operator2 operand2
    (96) operand2 -> . operand3
    (97) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (98) operand3 -> . monadic_operator operand4
    (99) operand3 -> . operand4
    (106) monadic_operator -> . MINUS
    (107) monadic_operator -> . NOT
    (100) operand4 -> . array_location
    (101) operand4 -> . referenced_location
    (102) operand4 -> . primitive_value
    (82) array_location -> . location
    (108) referenced_location -> . ARROW array_location
    (125) primitive_value -> . literal
    (126) primitive_value -> . value_array_element
    (127) primitive_value -> . value_array_slice
    (128) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (129) literal -> . integer_literal
    (130) literal -> . boolean_literal
    (131) literal -> . character_literal
    (132) literal -> . empty_literal
    (133) literal -> . character_string_literal
    (134) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (135) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (136) integer_literal -> . ICONST
    (137) boolean_literal -> . TRUE
    (138) boolean_literal -> . FALSE
    (139) character_literal -> . CCONST
    (140) empty_literal -> . NULL
    (141) character_string_literal -> . SCONST

    RPAREN          shift and go to state 161
    IF              shift and go to state 76
    MINUS           shift and go to state 79
    NOT             shift and go to state 65
    ARROW           shift and go to state 62
    LPAREN          shift and go to state 70
    ID              shift and go to state 56
    ICONST          shift and go to state 83
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    CCONST          shift and go to state 89
    NULL            shift and go to state 66
    SCONST          shift and go to state 77

    integer_literal                shift and go to state 61
    location                       shift and go to state 38
    operand0                       shift and go to state 68
    conditional_expression         shift and go to state 60
    parenthesized_expression       shift and go to state 80
    monadic_operator               shift and go to state 63
    array_element                  shift and go to state 19
    boolean_literal                shift and go to state 64
    parameter_list                 shift and go to state 163
    array_slice                    shift and go to state 18
    operand1                       shift and go to state 85
    array_location                 shift and go to state 86
    referenced_location            shift and go to state 87
    character_literal              shift and go to state 67
    value_array_slice              shift and go to state 88
    string_element                 shift and go to state 33
    primitive_value                shift and go to state 69
    operand2                       shift and go to state 90
    literal                        shift and go to state 71
    string_slice                   shift and go to state 17
    dereferenced_reference         shift and go to state 30
    value_array_element            shift and go to state 72
    empty_literal                  shift and go to state 78
    character_string_literal       shift and go to state 84
    operand4                       shift and go to state 73
    expression                     shift and go to state 162
    identifier                     shift and go to state 92
    operand3                       shift and go to state 93

state 95

    (2) statement_list -> statement statement_nullable .

    $end            reduce using rule 2 (statement_list -> statement statement_nullable .)


state 96

    (3) statement_nullable -> statement . statement_nullable
    (3) statement_nullable -> . statement statement_nullable
    (4) statement_nullable -> . empty
    (5) statement -> . declaration_statement
    (6) statement -> . synonym_statement
    (7) statement -> . newmode_statement
    (8) statement -> . action_statement
    (9) statement -> . procedure_statement
    (206) empty -> .
    (15) declaration_statement -> . DCL declaration_list SEMI
    (10) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (142) action_statement -> . identifier COLON action SEMI
    (143) action_statement -> . action SEMI
    (28) procedure_statement -> . ID COLON procedure_definition
    (23) identifier -> . ID
    (144) action -> . bracketed_action
    (145) action -> . assignment_action
    (146) action -> . call_action
    (147) action -> . exit_action
    (148) action -> . result_action
    (149) action -> . return_action
    (150) bracketed_action -> . if_action
    (151) bracketed_action -> . do_action
    (152) assignment_action -> . array_location assigning_operator expression
    (167) call_action -> . procedure_call
    (168) call_action -> . builtin_call
    (183) exit_action -> . EXIT label_id
    (188) result_action -> . RESULT expression
    (185) return_action -> . RETURN result
    (158) if_action -> . IF expression then_clause else_clause FI
    (159) if_action -> . IF expression then_clause
    (189) do_action -> . DO control_part SEMI action_statement_nullable OD
    (190) do_action -> . DO action_statement_nullable OD
    (82) array_location -> . location
    (179) procedure_call -> . ID LPAREN parameter_list RPAREN
    (180) procedure_call -> . ID LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (171) builtin_name -> . ABS
    (172) builtin_name -> . ASC
    (173) builtin_name -> . NUM
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    $end            reduce using rule 206 (empty -> .)
    END             reduce using rule 206 (empty -> .)
    DCL             shift and go to state 29
    SYN             shift and go to state 40
    TYPE            shift and go to state 4
    ID              shift and go to state 32
    EXIT            shift and go to state 35
    RESULT          shift and go to state 34
    RETURN          shift and go to state 8
    IF              shift and go to state 23
    DO              shift and go to state 2
    ABS             shift and go to state 7
    ASC             shift and go to state 13
    NUM             shift and go to state 42
    UPPER           shift and go to state 22
    LOWER           shift and go to state 41
    LENGTH          shift and go to state 27
    READ            shift and go to state 10
    PRINT           shift and go to state 37

    action_statement               shift and go to state 1
    location                       shift and go to state 38
    result_action                  shift and go to state 11
    return_action                  shift and go to state 5
    do_action                      shift and go to state 6
    builtin_call                   shift and go to state 9
    bracketed_action               shift and go to state 3
    builtin_name                   shift and go to state 12
    procedure_statement            shift and go to state 14
    statement                      shift and go to state 96
    string_slice                   shift and go to state 17
    array_slice                    shift and go to state 18
    array_element                  shift and go to state 19
    declaration_statement          shift and go to state 20
    statement_nullable             shift and go to state 164
    newmode_statement              shift and go to state 21
    if_action                      shift and go to state 24
    call_action                    shift and go to state 25
    action                         shift and go to state 26
    empty                          shift and go to state 97
    procedure_call                 shift and go to state 28
    dereferenced_reference         shift and go to state 30
    array_location                 shift and go to state 31
    string_element                 shift and go to state 33
    assignment_action              shift and go to state 39
    exit_action                    shift and go to state 43
    identifier                     shift and go to state 44
    synonym_statement              shift and go to state 45

state 97

    (4) statement_nullable -> empty .

    END             reduce using rule 4 (statement_nullable -> empty .)
    $end            reduce using rule 4 (statement_nullable -> empty .)


state 98

    (158) if_action -> IF expression . then_clause else_clause FI
    (159) if_action -> IF expression . then_clause
    (160) then_clause -> . THEN action_statement_list

    THEN            shift and go to state 166

    then_clause                    shift and go to state 165

state 99

    (143) action_statement -> action SEMI .

    ID              reduce using rule 143 (action_statement -> action SEMI .)
    EXIT            reduce using rule 143 (action_statement -> action SEMI .)
    RESULT          reduce using rule 143 (action_statement -> action SEMI .)
    RETURN          reduce using rule 143 (action_statement -> action SEMI .)
    IF              reduce using rule 143 (action_statement -> action SEMI .)
    DO              reduce using rule 143 (action_statement -> action SEMI .)
    ABS             reduce using rule 143 (action_statement -> action SEMI .)
    ASC             reduce using rule 143 (action_statement -> action SEMI .)
    NUM             reduce using rule 143 (action_statement -> action SEMI .)
    UPPER           reduce using rule 143 (action_statement -> action SEMI .)
    LOWER           reduce using rule 143 (action_statement -> action SEMI .)
    LENGTH          reduce using rule 143 (action_statement -> action SEMI .)
    READ            reduce using rule 143 (action_statement -> action SEMI .)
    PRINT           reduce using rule 143 (action_statement -> action SEMI .)
    OD              reduce using rule 143 (action_statement -> action SEMI .)
    FI              reduce using rule 143 (action_statement -> action SEMI .)
    ELSE            reduce using rule 143 (action_statement -> action SEMI .)
    ELSIF           reduce using rule 143 (action_statement -> action SEMI .)
    SEMI            reduce using rule 143 (action_statement -> action SEMI .)
    DCL             reduce using rule 143 (action_statement -> action SEMI .)
    SYN             reduce using rule 143 (action_statement -> action SEMI .)
    TYPE            reduce using rule 143 (action_statement -> action SEMI .)
    $end            reduce using rule 143 (action_statement -> action SEMI .)
    END             reduce using rule 143 (action_statement -> action SEMI .)


state 100

    (18) declaration -> identifier_list . mode initialization
    (19) declaration -> identifier_list . mode
    (37) mode -> . mode_name
    (38) mode -> . discrete_mode
    (39) mode -> . reference_mode
    (40) mode -> . composite_mode
    (41) mode_name -> . identifier
    (42) discrete_mode -> . integer_mode
    (43) discrete_mode -> . boolean_mode
    (44) discrete_mode -> . character_mode
    (45) discrete_mode -> . discrete_range_mode
    (55) reference_mode -> . REF mode
    (56) composite_mode -> . string_mode
    (57) composite_mode -> . array_mode
    (23) identifier -> . ID
    (47) integer_mode -> . INT
    (48) boolean_mode -> . BOOL
    (49) character_mode -> . CHAR
    (50) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (51) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (58) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (60) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (46) discrete_mode_name -> . identifier

    REF             shift and go to state 180
    ID              shift and go to state 56
    INT             shift and go to state 183
    BOOL            shift and go to state 172
    CHAR            shift and go to state 168
    CHARS           shift and go to state 182
    ARRAY           shift and go to state 171

    discrete_mode                  shift and go to state 167
    composite_mode                 shift and go to state 176
    character_mode                 shift and go to state 169
    mode_name                      shift and go to state 170
    boolean_mode                   shift and go to state 177
    array_mode                     shift and go to state 178
    string_mode                    shift and go to state 179
    discrete_mode_name             shift and go to state 173
    discrete_range_mode            shift and go to state 174
    integer_mode                   shift and go to state 181
    mode                           shift and go to state 184
    identifier                     shift and go to state 185
    reference_mode                 shift and go to state 175

state 101

    (15) declaration_statement -> DCL declaration_list . SEMI

    SEMI            shift and go to state 186


state 102

    (16) declaration_list -> declaration .
    (17) declaration_list -> declaration . COMMA declaration_list

    SEMI            reduce using rule 16 (declaration_list -> declaration .)
    COMMA           shift and go to state 187


state 103

    (113) arithmetic_additive_operator -> PLUS .

    MINUS           reduce using rule 113 (arithmetic_additive_operator -> PLUS .)
    NOT             reduce using rule 113 (arithmetic_additive_operator -> PLUS .)
    ARROW           reduce using rule 113 (arithmetic_additive_operator -> PLUS .)
    LPAREN          reduce using rule 113 (arithmetic_additive_operator -> PLUS .)
    ID              reduce using rule 113 (arithmetic_additive_operator -> PLUS .)
    ICONST          reduce using rule 113 (arithmetic_additive_operator -> PLUS .)
    TRUE            reduce using rule 113 (arithmetic_additive_operator -> PLUS .)
    FALSE           reduce using rule 113 (arithmetic_additive_operator -> PLUS .)
    CCONST          reduce using rule 113 (arithmetic_additive_operator -> PLUS .)
    NULL            reduce using rule 113 (arithmetic_additive_operator -> PLUS .)
    SCONST          reduce using rule 113 (arithmetic_additive_operator -> PLUS .)
    ASSIGN          reduce using rule 113 (arithmetic_additive_operator -> PLUS .)


state 104

    (104) arithmetic_multiplicative_operator -> DIVIDE .

    ASSIGN          reduce using rule 104 (arithmetic_multiplicative_operator -> DIVIDE .)
    MINUS           reduce using rule 104 (arithmetic_multiplicative_operator -> DIVIDE .)
    NOT             reduce using rule 104 (arithmetic_multiplicative_operator -> DIVIDE .)
    ARROW           reduce using rule 104 (arithmetic_multiplicative_operator -> DIVIDE .)
    LPAREN          reduce using rule 104 (arithmetic_multiplicative_operator -> DIVIDE .)
    ID              reduce using rule 104 (arithmetic_multiplicative_operator -> DIVIDE .)
    ICONST          reduce using rule 104 (arithmetic_multiplicative_operator -> DIVIDE .)
    TRUE            reduce using rule 104 (arithmetic_multiplicative_operator -> DIVIDE .)
    FALSE           reduce using rule 104 (arithmetic_multiplicative_operator -> DIVIDE .)
    CCONST          reduce using rule 104 (arithmetic_multiplicative_operator -> DIVIDE .)
    NULL            reduce using rule 104 (arithmetic_multiplicative_operator -> DIVIDE .)
    SCONST          reduce using rule 104 (arithmetic_multiplicative_operator -> DIVIDE .)


state 105

    (114) arithmetic_additive_operator -> MINUS .

    MINUS           reduce using rule 114 (arithmetic_additive_operator -> MINUS .)
    NOT             reduce using rule 114 (arithmetic_additive_operator -> MINUS .)
    ARROW           reduce using rule 114 (arithmetic_additive_operator -> MINUS .)
    LPAREN          reduce using rule 114 (arithmetic_additive_operator -> MINUS .)
    ID              reduce using rule 114 (arithmetic_additive_operator -> MINUS .)
    ICONST          reduce using rule 114 (arithmetic_additive_operator -> MINUS .)
    TRUE            reduce using rule 114 (arithmetic_additive_operator -> MINUS .)
    FALSE           reduce using rule 114 (arithmetic_additive_operator -> MINUS .)
    CCONST          reduce using rule 114 (arithmetic_additive_operator -> MINUS .)
    NULL            reduce using rule 114 (arithmetic_additive_operator -> MINUS .)
    SCONST          reduce using rule 114 (arithmetic_additive_operator -> MINUS .)
    ASSIGN          reduce using rule 114 (arithmetic_additive_operator -> MINUS .)


state 106

    (156) closed_dyadic_operator -> arithmetic_multiplicative_operator .

    ASSIGN          reduce using rule 156 (closed_dyadic_operator -> arithmetic_multiplicative_operator .)


state 107

    (155) closed_dyadic_operator -> arithmetic_additive_operator .

    ASSIGN          reduce using rule 155 (closed_dyadic_operator -> arithmetic_additive_operator .)


state 108

    (115) string_concatenation_operator -> CONCAT .

    MINUS           reduce using rule 115 (string_concatenation_operator -> CONCAT .)
    NOT             reduce using rule 115 (string_concatenation_operator -> CONCAT .)
    ARROW           reduce using rule 115 (string_concatenation_operator -> CONCAT .)
    LPAREN          reduce using rule 115 (string_concatenation_operator -> CONCAT .)
    ID              reduce using rule 115 (string_concatenation_operator -> CONCAT .)
    ICONST          reduce using rule 115 (string_concatenation_operator -> CONCAT .)
    TRUE            reduce using rule 115 (string_concatenation_operator -> CONCAT .)
    FALSE           reduce using rule 115 (string_concatenation_operator -> CONCAT .)
    CCONST          reduce using rule 115 (string_concatenation_operator -> CONCAT .)
    NULL            reduce using rule 115 (string_concatenation_operator -> CONCAT .)
    SCONST          reduce using rule 115 (string_concatenation_operator -> CONCAT .)
    ASSIGN          reduce using rule 115 (string_concatenation_operator -> CONCAT .)


state 109

    (78) array_element -> array_location LBRACKET . expression_list RBRACKET
    (81) array_slice -> array_location LBRACKET . lower_bound COLON upper_bound RBRACKET
    (79) expression_list -> . expression
    (80) expression_list -> . expression COMMA expression_list
    (53) lower_bound -> . expression
    (83) expression -> . operand0
    (84) expression -> . conditional_expression
    (92) operand0 -> . operand1
    (93) operand0 -> . operand0 operator1 operand1
    (86) conditional_expression -> . IF expression then_expression else_expression FI
    (87) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (94) operand1 -> . operand2
    (95) operand1 -> . operand1 operator2 operand2
    (96) operand2 -> . operand3
    (97) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (98) operand3 -> . monadic_operator operand4
    (99) operand3 -> . operand4
    (106) monadic_operator -> . MINUS
    (107) monadic_operator -> . NOT
    (100) operand4 -> . array_location
    (101) operand4 -> . referenced_location
    (102) operand4 -> . primitive_value
    (82) array_location -> . location
    (108) referenced_location -> . ARROW array_location
    (125) primitive_value -> . literal
    (126) primitive_value -> . value_array_element
    (127) primitive_value -> . value_array_slice
    (128) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (129) literal -> . integer_literal
    (130) literal -> . boolean_literal
    (131) literal -> . character_literal
    (132) literal -> . empty_literal
    (133) literal -> . character_string_literal
    (134) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (135) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (136) integer_literal -> . ICONST
    (137) boolean_literal -> . TRUE
    (138) boolean_literal -> . FALSE
    (139) character_literal -> . CCONST
    (140) empty_literal -> . NULL
    (141) character_string_literal -> . SCONST

    IF              shift and go to state 76
    MINUS           shift and go to state 79
    NOT             shift and go to state 65
    ARROW           shift and go to state 62
    LPAREN          shift and go to state 70
    ID              shift and go to state 56
    ICONST          shift and go to state 83
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    CCONST          shift and go to state 89
    NULL            shift and go to state 66
    SCONST          shift and go to state 77

    integer_literal                shift and go to state 61
    location                       shift and go to state 38
    operand0                       shift and go to state 68
    conditional_expression         shift and go to state 60
    parenthesized_expression       shift and go to state 80
    monadic_operator               shift and go to state 63
    array_element                  shift and go to state 19
    boolean_literal                shift and go to state 64
    character_literal              shift and go to state 67
    array_slice                    shift and go to state 18
    character_string_literal       shift and go to state 84
    operand1                       shift and go to state 85
    array_location                 shift and go to state 86
    referenced_location            shift and go to state 87
    value_array_slice              shift and go to state 88
    string_element                 shift and go to state 33
    primitive_value                shift and go to state 69
    operand2                       shift and go to state 90
    literal                        shift and go to state 71
    lower_bound                    shift and go to state 190
    string_slice                   shift and go to state 17
    dereferenced_reference         shift and go to state 30
    expression_list                shift and go to state 188
    value_array_element            shift and go to state 72
    empty_literal                  shift and go to state 78
    operand4                       shift and go to state 73
    expression                     shift and go to state 189
    identifier                     shift and go to state 92
    operand3                       shift and go to state 93

state 110

    (103) arithmetic_multiplicative_operator -> TIMES .

    ASSIGN          reduce using rule 103 (arithmetic_multiplicative_operator -> TIMES .)
    MINUS           reduce using rule 103 (arithmetic_multiplicative_operator -> TIMES .)
    NOT             reduce using rule 103 (arithmetic_multiplicative_operator -> TIMES .)
    ARROW           reduce using rule 103 (arithmetic_multiplicative_operator -> TIMES .)
    LPAREN          reduce using rule 103 (arithmetic_multiplicative_operator -> TIMES .)
    ID              reduce using rule 103 (arithmetic_multiplicative_operator -> TIMES .)
    ICONST          reduce using rule 103 (arithmetic_multiplicative_operator -> TIMES .)
    TRUE            reduce using rule 103 (arithmetic_multiplicative_operator -> TIMES .)
    FALSE           reduce using rule 103 (arithmetic_multiplicative_operator -> TIMES .)
    CCONST          reduce using rule 103 (arithmetic_multiplicative_operator -> TIMES .)
    NULL            reduce using rule 103 (arithmetic_multiplicative_operator -> TIMES .)
    SCONST          reduce using rule 103 (arithmetic_multiplicative_operator -> TIMES .)


state 111

    (72) dereferenced_reference -> array_location ARROW .

    ARROW           reduce using rule 72 (dereferenced_reference -> array_location ARROW .)
    LBRACKET        reduce using rule 72 (dereferenced_reference -> array_location ARROW .)
    ASSIGN          reduce using rule 72 (dereferenced_reference -> array_location ARROW .)
    PLUS            reduce using rule 72 (dereferenced_reference -> array_location ARROW .)
    MINUS           reduce using rule 72 (dereferenced_reference -> array_location ARROW .)
    TIMES           reduce using rule 72 (dereferenced_reference -> array_location ARROW .)
    DIVIDE          reduce using rule 72 (dereferenced_reference -> array_location ARROW .)
    MODULO          reduce using rule 72 (dereferenced_reference -> array_location ARROW .)
    CONCAT          reduce using rule 72 (dereferenced_reference -> array_location ARROW .)
    AND             reduce using rule 72 (dereferenced_reference -> array_location ARROW .)
    OR              reduce using rule 72 (dereferenced_reference -> array_location ARROW .)
    EQUAL           reduce using rule 72 (dereferenced_reference -> array_location ARROW .)
    NOTEQ           reduce using rule 72 (dereferenced_reference -> array_location ARROW .)
    GREATER         reduce using rule 72 (dereferenced_reference -> array_location ARROW .)
    GTEQUAL         reduce using rule 72 (dereferenced_reference -> array_location ARROW .)
    LESS            reduce using rule 72 (dereferenced_reference -> array_location ARROW .)
    LTEQUAL         reduce using rule 72 (dereferenced_reference -> array_location ARROW .)
    IN              reduce using rule 72 (dereferenced_reference -> array_location ARROW .)
    RBRACKET        reduce using rule 72 (dereferenced_reference -> array_location ARROW .)
    SEMI            reduce using rule 72 (dereferenced_reference -> array_location ARROW .)
    COMMA           reduce using rule 72 (dereferenced_reference -> array_location ARROW .)
    FI              reduce using rule 72 (dereferenced_reference -> array_location ARROW .)
    THEN            reduce using rule 72 (dereferenced_reference -> array_location ARROW .)
    WHILE           reduce using rule 72 (dereferenced_reference -> array_location ARROW .)
    RPAREN          reduce using rule 72 (dereferenced_reference -> array_location ARROW .)
    COLON           reduce using rule 72 (dereferenced_reference -> array_location ARROW .)
    DOWN            reduce using rule 72 (dereferenced_reference -> array_location ARROW .)
    BY              reduce using rule 72 (dereferenced_reference -> array_location ARROW .)
    TO              reduce using rule 72 (dereferenced_reference -> array_location ARROW .)
    ELSE            reduce using rule 72 (dereferenced_reference -> array_location ARROW .)
    ELSIF           reduce using rule 72 (dereferenced_reference -> array_location ARROW .)


state 112

    (105) arithmetic_multiplicative_operator -> MODULO .

    ASSIGN          reduce using rule 105 (arithmetic_multiplicative_operator -> MODULO .)
    MINUS           reduce using rule 105 (arithmetic_multiplicative_operator -> MODULO .)
    NOT             reduce using rule 105 (arithmetic_multiplicative_operator -> MODULO .)
    ARROW           reduce using rule 105 (arithmetic_multiplicative_operator -> MODULO .)
    LPAREN          reduce using rule 105 (arithmetic_multiplicative_operator -> MODULO .)
    ID              reduce using rule 105 (arithmetic_multiplicative_operator -> MODULO .)
    ICONST          reduce using rule 105 (arithmetic_multiplicative_operator -> MODULO .)
    TRUE            reduce using rule 105 (arithmetic_multiplicative_operator -> MODULO .)
    FALSE           reduce using rule 105 (arithmetic_multiplicative_operator -> MODULO .)
    CCONST          reduce using rule 105 (arithmetic_multiplicative_operator -> MODULO .)
    NULL            reduce using rule 105 (arithmetic_multiplicative_operator -> MODULO .)
    SCONST          reduce using rule 105 (arithmetic_multiplicative_operator -> MODULO .)


state 113

    (153) assigning_operator -> closed_dyadic_operator . ASSIGN

    ASSIGN          shift and go to state 191


state 114

    (152) assignment_action -> array_location assigning_operator . expression
    (83) expression -> . operand0
    (84) expression -> . conditional_expression
    (92) operand0 -> . operand1
    (93) operand0 -> . operand0 operator1 operand1
    (86) conditional_expression -> . IF expression then_expression else_expression FI
    (87) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (94) operand1 -> . operand2
    (95) operand1 -> . operand1 operator2 operand2
    (96) operand2 -> . operand3
    (97) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (98) operand3 -> . monadic_operator operand4
    (99) operand3 -> . operand4
    (106) monadic_operator -> . MINUS
    (107) monadic_operator -> . NOT
    (100) operand4 -> . array_location
    (101) operand4 -> . referenced_location
    (102) operand4 -> . primitive_value
    (82) array_location -> . location
    (108) referenced_location -> . ARROW array_location
    (125) primitive_value -> . literal
    (126) primitive_value -> . value_array_element
    (127) primitive_value -> . value_array_slice
    (128) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (129) literal -> . integer_literal
    (130) literal -> . boolean_literal
    (131) literal -> . character_literal
    (132) literal -> . empty_literal
    (133) literal -> . character_string_literal
    (134) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (135) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (136) integer_literal -> . ICONST
    (137) boolean_literal -> . TRUE
    (138) boolean_literal -> . FALSE
    (139) character_literal -> . CCONST
    (140) empty_literal -> . NULL
    (141) character_string_literal -> . SCONST

    IF              shift and go to state 76
    MINUS           shift and go to state 79
    NOT             shift and go to state 65
    ARROW           shift and go to state 62
    LPAREN          shift and go to state 70
    ID              shift and go to state 56
    ICONST          shift and go to state 83
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    CCONST          shift and go to state 89
    NULL            shift and go to state 66
    SCONST          shift and go to state 77

    integer_literal                shift and go to state 61
    location                       shift and go to state 38
    operand0                       shift and go to state 68
    conditional_expression         shift and go to state 60
    parenthesized_expression       shift and go to state 80
    monadic_operator               shift and go to state 63
    array_element                  shift and go to state 19
    boolean_literal                shift and go to state 64
    array_slice                    shift and go to state 18
    character_string_literal       shift and go to state 84
    operand1                       shift and go to state 85
    array_location                 shift and go to state 86
    referenced_location            shift and go to state 87
    character_literal              shift and go to state 67
    value_array_slice              shift and go to state 88
    string_element                 shift and go to state 33
    primitive_value                shift and go to state 69
    operand2                       shift and go to state 90
    literal                        shift and go to state 71
    string_slice                   shift and go to state 17
    dereferenced_reference         shift and go to state 30
    value_array_element            shift and go to state 72
    empty_literal                  shift and go to state 78
    operand4                       shift and go to state 73
    expression                     shift and go to state 192
    identifier                     shift and go to state 92
    operand3                       shift and go to state 93

state 115

    (154) assigning_operator -> ASSIGN .

    IF              reduce using rule 154 (assigning_operator -> ASSIGN .)
    MINUS           reduce using rule 154 (assigning_operator -> ASSIGN .)
    NOT             reduce using rule 154 (assigning_operator -> ASSIGN .)
    ARROW           reduce using rule 154 (assigning_operator -> ASSIGN .)
    LPAREN          reduce using rule 154 (assigning_operator -> ASSIGN .)
    ID              reduce using rule 154 (assigning_operator -> ASSIGN .)
    ICONST          reduce using rule 154 (assigning_operator -> ASSIGN .)
    TRUE            reduce using rule 154 (assigning_operator -> ASSIGN .)
    FALSE           reduce using rule 154 (assigning_operator -> ASSIGN .)
    CCONST          reduce using rule 154 (assigning_operator -> ASSIGN .)
    NULL            reduce using rule 154 (assigning_operator -> ASSIGN .)
    SCONST          reduce using rule 154 (assigning_operator -> ASSIGN .)


state 116

    (157) closed_dyadic_operator -> string_concatenation_operator .

    ASSIGN          reduce using rule 157 (closed_dyadic_operator -> string_concatenation_operator .)


state 117

    (28) procedure_statement -> ID COLON . procedure_definition
    (29) procedure_definition -> . PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI
    (30) procedure_definition -> . PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI

    PROC            shift and go to state 194

    procedure_definition           shift and go to state 193

state 118

    (179) procedure_call -> ID LPAREN . parameter_list RPAREN
    (180) procedure_call -> ID LPAREN . RPAREN
    (181) parameter_list -> . expression
    (182) parameter_list -> . expression COMMA parameter_list
    (83) expression -> . operand0
    (84) expression -> . conditional_expression
    (92) operand0 -> . operand1
    (93) operand0 -> . operand0 operator1 operand1
    (86) conditional_expression -> . IF expression then_expression else_expression FI
    (87) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (94) operand1 -> . operand2
    (95) operand1 -> . operand1 operator2 operand2
    (96) operand2 -> . operand3
    (97) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (98) operand3 -> . monadic_operator operand4
    (99) operand3 -> . operand4
    (106) monadic_operator -> . MINUS
    (107) monadic_operator -> . NOT
    (100) operand4 -> . array_location
    (101) operand4 -> . referenced_location
    (102) operand4 -> . primitive_value
    (82) array_location -> . location
    (108) referenced_location -> . ARROW array_location
    (125) primitive_value -> . literal
    (126) primitive_value -> . value_array_element
    (127) primitive_value -> . value_array_slice
    (128) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (129) literal -> . integer_literal
    (130) literal -> . boolean_literal
    (131) literal -> . character_literal
    (132) literal -> . empty_literal
    (133) literal -> . character_string_literal
    (134) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (135) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (136) integer_literal -> . ICONST
    (137) boolean_literal -> . TRUE
    (138) boolean_literal -> . FALSE
    (139) character_literal -> . CCONST
    (140) empty_literal -> . NULL
    (141) character_string_literal -> . SCONST

    RPAREN          shift and go to state 195
    IF              shift and go to state 76
    MINUS           shift and go to state 79
    NOT             shift and go to state 65
    ARROW           shift and go to state 62
    LPAREN          shift and go to state 70
    ID              shift and go to state 56
    ICONST          shift and go to state 83
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    CCONST          shift and go to state 89
    NULL            shift and go to state 66
    SCONST          shift and go to state 77

    integer_literal                shift and go to state 61
    location                       shift and go to state 38
    operand0                       shift and go to state 68
    conditional_expression         shift and go to state 60
    parenthesized_expression       shift and go to state 80
    monadic_operator               shift and go to state 63
    array_element                  shift and go to state 19
    boolean_literal                shift and go to state 64
    parameter_list                 shift and go to state 196
    array_slice                    shift and go to state 18
    character_string_literal       shift and go to state 84
    operand1                       shift and go to state 85
    array_location                 shift and go to state 86
    referenced_location            shift and go to state 87
    character_literal              shift and go to state 67
    value_array_slice              shift and go to state 88
    string_element                 shift and go to state 33
    primitive_value                shift and go to state 69
    operand2                       shift and go to state 90
    literal                        shift and go to state 71
    string_slice                   shift and go to state 17
    dereferenced_reference         shift and go to state 30
    value_array_element            shift and go to state 72
    empty_literal                  shift and go to state 78
    operand4                       shift and go to state 73
    expression                     shift and go to state 162
    identifier                     shift and go to state 92
    operand3                       shift and go to state 93

state 119

    (188) result_action -> RESULT expression .

    SEMI            reduce using rule 188 (result_action -> RESULT expression .)


state 120

    (183) exit_action -> EXIT label_id .

    SEMI            reduce using rule 183 (exit_action -> EXIT label_id .)


state 121

    (184) label_id -> ID .

    SEMI            reduce using rule 184 (label_id -> ID .)


state 122

    (11) synonym_list -> synonym_definition .
    (12) synonym_list -> synonym_definition . COMMA synonym_list

    SEMI            reduce using rule 11 (synonym_list -> synonym_definition .)
    COMMA           shift and go to state 197


state 123

    (13) synonym_definition -> identifier_list . mode ASSIGN expression
    (14) synonym_definition -> identifier_list . ASSIGN expression
    (37) mode -> . mode_name
    (38) mode -> . discrete_mode
    (39) mode -> . reference_mode
    (40) mode -> . composite_mode
    (41) mode_name -> . identifier
    (42) discrete_mode -> . integer_mode
    (43) discrete_mode -> . boolean_mode
    (44) discrete_mode -> . character_mode
    (45) discrete_mode -> . discrete_range_mode
    (55) reference_mode -> . REF mode
    (56) composite_mode -> . string_mode
    (57) composite_mode -> . array_mode
    (23) identifier -> . ID
    (47) integer_mode -> . INT
    (48) boolean_mode -> . BOOL
    (49) character_mode -> . CHAR
    (50) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (51) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (58) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (60) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (46) discrete_mode_name -> . identifier

    ASSIGN          shift and go to state 198
    REF             shift and go to state 180
    ID              shift and go to state 56
    INT             shift and go to state 183
    BOOL            shift and go to state 172
    CHAR            shift and go to state 168
    CHARS           shift and go to state 182
    ARRAY           shift and go to state 171

    discrete_mode                  shift and go to state 167
    composite_mode                 shift and go to state 176
    character_mode                 shift and go to state 169
    mode_name                      shift and go to state 170
    boolean_mode                   shift and go to state 177
    array_mode                     shift and go to state 178
    string_mode                    shift and go to state 179
    discrete_mode_name             shift and go to state 173
    discrete_range_mode            shift and go to state 174
    integer_mode                   shift and go to state 181
    mode                           shift and go to state 199
    identifier                     shift and go to state 185
    reference_mode                 shift and go to state 175

state 124

    (10) synonym_statement -> SYN synonym_list . SEMI

    SEMI            shift and go to state 200


state 125

    (142) action_statement -> identifier COLON . action SEMI
    (144) action -> . bracketed_action
    (145) action -> . assignment_action
    (146) action -> . call_action
    (147) action -> . exit_action
    (148) action -> . result_action
    (149) action -> . return_action
    (150) bracketed_action -> . if_action
    (151) bracketed_action -> . do_action
    (152) assignment_action -> . array_location assigning_operator expression
    (167) call_action -> . procedure_call
    (168) call_action -> . builtin_call
    (183) exit_action -> . EXIT label_id
    (188) result_action -> . RESULT expression
    (185) return_action -> . RETURN result
    (158) if_action -> . IF expression then_clause else_clause FI
    (159) if_action -> . IF expression then_clause
    (189) do_action -> . DO control_part SEMI action_statement_nullable OD
    (190) do_action -> . DO action_statement_nullable OD
    (82) array_location -> . location
    (179) procedure_call -> . ID LPAREN parameter_list RPAREN
    (180) procedure_call -> . ID LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (171) builtin_name -> . ABS
    (172) builtin_name -> . ASC
    (173) builtin_name -> . NUM
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT
    (23) identifier -> . ID
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    EXIT            shift and go to state 35
    RESULT          shift and go to state 34
    RETURN          shift and go to state 8
    IF              shift and go to state 23
    DO              shift and go to state 2
    ID              shift and go to state 202
    ABS             shift and go to state 7
    ASC             shift and go to state 13
    NUM             shift and go to state 42
    UPPER           shift and go to state 22
    LOWER           shift and go to state 41
    LENGTH          shift and go to state 27
    READ            shift and go to state 10
    PRINT           shift and go to state 37

    return_action                  shift and go to state 5
    location                       shift and go to state 38
    result_action                  shift and go to state 11
    array_element                  shift and go to state 19
    action                         shift and go to state 201
    do_action                      shift and go to state 6
    builtin_call                   shift and go to state 9
    bracketed_action               shift and go to state 3
    procedure_call                 shift and go to state 28
    array_slice                    shift and go to state 18
    builtin_name                   shift and go to state 12
    if_action                      shift and go to state 24
    array_location                 shift and go to state 31
    call_action                    shift and go to state 25
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 17
    dereferenced_reference         shift and go to state 30
    assignment_action              shift and go to state 39
    exit_action                    shift and go to state 43
    identifier                     shift and go to state 92

state 126

    (73) string_element -> identifier LBRACKET . start_element LBRACKET
    (75) string_slice -> identifier LBRACKET . left_element COLON right_element RBRACKET
    (74) start_element -> . expression
    (76) left_element -> . expression
    (83) expression -> . operand0
    (84) expression -> . conditional_expression
    (92) operand0 -> . operand1
    (93) operand0 -> . operand0 operator1 operand1
    (86) conditional_expression -> . IF expression then_expression else_expression FI
    (87) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (94) operand1 -> . operand2
    (95) operand1 -> . operand1 operator2 operand2
    (96) operand2 -> . operand3
    (97) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (98) operand3 -> . monadic_operator operand4
    (99) operand3 -> . operand4
    (106) monadic_operator -> . MINUS
    (107) monadic_operator -> . NOT
    (100) operand4 -> . array_location
    (101) operand4 -> . referenced_location
    (102) operand4 -> . primitive_value
    (82) array_location -> . location
    (108) referenced_location -> . ARROW array_location
    (125) primitive_value -> . literal
    (126) primitive_value -> . value_array_element
    (127) primitive_value -> . value_array_slice
    (128) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (129) literal -> . integer_literal
    (130) literal -> . boolean_literal
    (131) literal -> . character_literal
    (132) literal -> . empty_literal
    (133) literal -> . character_string_literal
    (134) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (135) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (136) integer_literal -> . ICONST
    (137) boolean_literal -> . TRUE
    (138) boolean_literal -> . FALSE
    (139) character_literal -> . CCONST
    (140) empty_literal -> . NULL
    (141) character_string_literal -> . SCONST

    IF              shift and go to state 76
    MINUS           shift and go to state 79
    NOT             shift and go to state 65
    ARROW           shift and go to state 62
    LPAREN          shift and go to state 70
    ID              shift and go to state 56
    ICONST          shift and go to state 83
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    CCONST          shift and go to state 89
    NULL            shift and go to state 66
    SCONST          shift and go to state 77

    integer_literal                shift and go to state 61
    operand0                       shift and go to state 68
    conditional_expression         shift and go to state 60
    parenthesized_expression       shift and go to state 80
    monadic_operator               shift and go to state 63
    array_element                  shift and go to state 19
    boolean_literal                shift and go to state 64
    location                       shift and go to state 38
    value_array_slice              shift and go to state 88
    array_slice                    shift and go to state 18
    start_element                  shift and go to state 205
    operand1                       shift and go to state 85
    array_location                 shift and go to state 86
    referenced_location            shift and go to state 87
    character_literal              shift and go to state 67
    left_element                   shift and go to state 204
    string_element                 shift and go to state 33
    primitive_value                shift and go to state 69
    operand2                       shift and go to state 90
    literal                        shift and go to state 71
    string_slice                   shift and go to state 17
    dereferenced_reference         shift and go to state 30
    value_array_element            shift and go to state 72
    empty_literal                  shift and go to state 78
    character_string_literal       shift and go to state 84
    operand4                       shift and go to state 73
    expression                     shift and go to state 203
    identifier                     shift and go to state 92
    operand3                       shift and go to state 93

state 127

    (165) action_statement_nullable -> action_statement action_statement_nullable .

    OD              reduce using rule 165 (action_statement_nullable -> action_statement action_statement_nullable .)
    ELSE            reduce using rule 165 (action_statement_nullable -> action_statement action_statement_nullable .)
    ELSIF           reduce using rule 165 (action_statement_nullable -> action_statement action_statement_nullable .)
    SEMI            reduce using rule 165 (action_statement_nullable -> action_statement action_statement_nullable .)
    FI              reduce using rule 165 (action_statement_nullable -> action_statement action_statement_nullable .)


state 128

    (205) while_control -> WHILE expression .

    SEMI            reduce using rule 205 (while_control -> WHILE expression .)


state 129

    (191) control_part -> for_control while_control .

    SEMI            reduce using rule 191 (control_part -> for_control while_control .)


state 130

    (189) do_action -> DO control_part SEMI . action_statement_nullable OD
    (165) action_statement_nullable -> . action_statement action_statement_nullable
    (166) action_statement_nullable -> . empty
    (142) action_statement -> . identifier COLON action SEMI
    (143) action_statement -> . action SEMI
    (206) empty -> .
    (23) identifier -> . ID
    (144) action -> . bracketed_action
    (145) action -> . assignment_action
    (146) action -> . call_action
    (147) action -> . exit_action
    (148) action -> . result_action
    (149) action -> . return_action
    (150) bracketed_action -> . if_action
    (151) bracketed_action -> . do_action
    (152) assignment_action -> . array_location assigning_operator expression
    (167) call_action -> . procedure_call
    (168) call_action -> . builtin_call
    (183) exit_action -> . EXIT label_id
    (188) result_action -> . RESULT expression
    (185) return_action -> . RETURN result
    (158) if_action -> . IF expression then_clause else_clause FI
    (159) if_action -> . IF expression then_clause
    (189) do_action -> . DO control_part SEMI action_statement_nullable OD
    (190) do_action -> . DO action_statement_nullable OD
    (82) array_location -> . location
    (179) procedure_call -> . ID LPAREN parameter_list RPAREN
    (180) procedure_call -> . ID LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (171) builtin_name -> . ABS
    (172) builtin_name -> . ASC
    (173) builtin_name -> . NUM
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    OD              reduce using rule 206 (empty -> .)
    ID              shift and go to state 54
    EXIT            shift and go to state 35
    RESULT          shift and go to state 34
    RETURN          shift and go to state 8
    IF              shift and go to state 23
    DO              shift and go to state 2
    ABS             shift and go to state 7
    ASC             shift and go to state 13
    NUM             shift and go to state 42
    UPPER           shift and go to state 22
    LOWER           shift and go to state 41
    LENGTH          shift and go to state 27
    READ            shift and go to state 10
    PRINT           shift and go to state 37

    action_statement               shift and go to state 46
    location                       shift and go to state 38
    result_action                  shift and go to state 11
    array_element                  shift and go to state 19
    action                         shift and go to state 26
    empty                          shift and go to state 52
    do_action                      shift and go to state 6
    builtin_call                   shift and go to state 9
    string_slice                   shift and go to state 17
    bracketed_action               shift and go to state 3
    procedure_call                 shift and go to state 28
    array_slice                    shift and go to state 18
    builtin_name                   shift and go to state 12
    if_action                      shift and go to state 24
    array_location                 shift and go to state 31
    action_statement_nullable      shift and go to state 206
    call_action                    shift and go to state 25
    string_element                 shift and go to state 33
    return_action                  shift and go to state 5
    dereferenced_reference         shift and go to state 30
    assignment_action              shift and go to state 39
    exit_action                    shift and go to state 43
    identifier                     shift and go to state 44

state 131

    (194) for_control -> FOR iteration .

    WHILE           reduce using rule 194 (for_control -> FOR iteration .)
    SEMI            reduce using rule 194 (for_control -> FOR iteration .)


state 132

    (196) iteration -> range_enumeration .

    WHILE           reduce using rule 196 (iteration -> range_enumeration .)
    SEMI            reduce using rule 196 (iteration -> range_enumeration .)


state 133

    (195) iteration -> step_enumeration .

    WHILE           reduce using rule 195 (iteration -> step_enumeration .)
    SEMI            reduce using rule 195 (iteration -> step_enumeration .)


state 134

    (197) step_enumeration -> identifier . ASSIGN expression step_value DOWN end_value
    (198) step_enumeration -> identifier . ASSIGN expression step_value end_value
    (199) step_enumeration -> identifier . ASSIGN expression DOWN end_value
    (200) step_enumeration -> identifier . ASSIGN expression end_value
    (203) range_enumeration -> identifier . DOWN IN discrete_mode
    (204) range_enumeration -> identifier . IN discrete_mode

    ASSIGN          shift and go to state 207
    DOWN            shift and go to state 209
    IN              shift and go to state 208


state 135

    (190) do_action -> DO action_statement_nullable OD .

    SEMI            reduce using rule 190 (do_action -> DO action_statement_nullable OD .)


state 136

    (24) newmode_statement -> TYPE newmode_list SEMI .

    DCL             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    SYN             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    TYPE            reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    ID              reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    EXIT            reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    RESULT          reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    RETURN          reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    IF              reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    DO              reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    ABS             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    ASC             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    NUM             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    UPPER           reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    LOWER           reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    LENGTH          reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    READ            reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    PRINT           reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    $end            reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    END             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)


state 137

    (27) mode_definition -> identifier_list ASSIGN . mode
    (37) mode -> . mode_name
    (38) mode -> . discrete_mode
    (39) mode -> . reference_mode
    (40) mode -> . composite_mode
    (41) mode_name -> . identifier
    (42) discrete_mode -> . integer_mode
    (43) discrete_mode -> . boolean_mode
    (44) discrete_mode -> . character_mode
    (45) discrete_mode -> . discrete_range_mode
    (55) reference_mode -> . REF mode
    (56) composite_mode -> . string_mode
    (57) composite_mode -> . array_mode
    (23) identifier -> . ID
    (47) integer_mode -> . INT
    (48) boolean_mode -> . BOOL
    (49) character_mode -> . CHAR
    (50) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (51) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (58) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (60) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (46) discrete_mode_name -> . identifier

    REF             shift and go to state 180
    ID              shift and go to state 56
    INT             shift and go to state 183
    BOOL            shift and go to state 172
    CHAR            shift and go to state 168
    CHARS           shift and go to state 182
    ARRAY           shift and go to state 171

    discrete_mode                  shift and go to state 167
    composite_mode                 shift and go to state 176
    character_mode                 shift and go to state 169
    mode_name                      shift and go to state 170
    boolean_mode                   shift and go to state 177
    array_mode                     shift and go to state 178
    string_mode                    shift and go to state 179
    discrete_mode_name             shift and go to state 173
    discrete_range_mode            shift and go to state 174
    integer_mode                   shift and go to state 181
    mode                           shift and go to state 210
    identifier                     shift and go to state 185
    reference_mode                 shift and go to state 175

state 138

    (26) newmode_list -> mode_definition COMMA . newmode_list
    (25) newmode_list -> . mode_definition
    (26) newmode_list -> . mode_definition COMMA newmode_list
    (27) mode_definition -> . identifier_list ASSIGN mode
    (21) identifier_list -> . identifier
    (22) identifier_list -> . identifier COMMA identifier_list
    (23) identifier -> . ID

    ID              shift and go to state 56

    newmode_list                   shift and go to state 211
    identifier_list                shift and go to state 57
    mode_definition                shift and go to state 58
    identifier                     shift and go to state 59

state 139

    (22) identifier_list -> identifier COMMA . identifier_list
    (21) identifier_list -> . identifier
    (22) identifier_list -> . identifier COMMA identifier_list
    (23) identifier -> . ID

    ID              shift and go to state 56

    identifier_list                shift and go to state 212
    identifier                     shift and go to state 59

state 140

    (108) referenced_location -> ARROW array_location .
    (72) dereferenced_reference -> array_location . ARROW
    (78) array_element -> array_location . LBRACKET expression_list RBRACKET
    (81) array_slice -> array_location . LBRACKET lower_bound COLON upper_bound RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    TIMES           reduce using rule 108 (referenced_location -> ARROW array_location .)
    DIVIDE          reduce using rule 108 (referenced_location -> ARROW array_location .)
    MODULO          reduce using rule 108 (referenced_location -> ARROW array_location .)
    PLUS            reduce using rule 108 (referenced_location -> ARROW array_location .)
    MINUS           reduce using rule 108 (referenced_location -> ARROW array_location .)
    CONCAT          reduce using rule 108 (referenced_location -> ARROW array_location .)
    AND             reduce using rule 108 (referenced_location -> ARROW array_location .)
    OR              reduce using rule 108 (referenced_location -> ARROW array_location .)
    EQUAL           reduce using rule 108 (referenced_location -> ARROW array_location .)
    NOTEQ           reduce using rule 108 (referenced_location -> ARROW array_location .)
    GREATER         reduce using rule 108 (referenced_location -> ARROW array_location .)
    GTEQUAL         reduce using rule 108 (referenced_location -> ARROW array_location .)
    LESS            reduce using rule 108 (referenced_location -> ARROW array_location .)
    LTEQUAL         reduce using rule 108 (referenced_location -> ARROW array_location .)
    IN              reduce using rule 108 (referenced_location -> ARROW array_location .)
    SEMI            reduce using rule 108 (referenced_location -> ARROW array_location .)
    THEN            reduce using rule 108 (referenced_location -> ARROW array_location .)
    RPAREN          reduce using rule 108 (referenced_location -> ARROW array_location .)
    COMMA           reduce using rule 108 (referenced_location -> ARROW array_location .)
    RBRACKET        reduce using rule 108 (referenced_location -> ARROW array_location .)
    COLON           reduce using rule 108 (referenced_location -> ARROW array_location .)
    DOWN            reduce using rule 108 (referenced_location -> ARROW array_location .)
    BY              reduce using rule 108 (referenced_location -> ARROW array_location .)
    TO              reduce using rule 108 (referenced_location -> ARROW array_location .)
    ELSE            reduce using rule 108 (referenced_location -> ARROW array_location .)
    ELSIF           reduce using rule 108 (referenced_location -> ARROW array_location .)
    FI              reduce using rule 108 (referenced_location -> ARROW array_location .)
    WHILE           reduce using rule 108 (referenced_location -> ARROW array_location .)
    ARROW           shift and go to state 111
    LBRACKET        shift and go to state 109

  ! LBRACKET        [ reduce using rule 108 (referenced_location -> ARROW array_location .) ]


state 141

    (98) operand3 -> monadic_operator operand4 .

    TIMES           reduce using rule 98 (operand3 -> monadic_operator operand4 .)
    DIVIDE          reduce using rule 98 (operand3 -> monadic_operator operand4 .)
    MODULO          reduce using rule 98 (operand3 -> monadic_operator operand4 .)
    PLUS            reduce using rule 98 (operand3 -> monadic_operator operand4 .)
    MINUS           reduce using rule 98 (operand3 -> monadic_operator operand4 .)
    CONCAT          reduce using rule 98 (operand3 -> monadic_operator operand4 .)
    AND             reduce using rule 98 (operand3 -> monadic_operator operand4 .)
    OR              reduce using rule 98 (operand3 -> monadic_operator operand4 .)
    EQUAL           reduce using rule 98 (operand3 -> monadic_operator operand4 .)
    NOTEQ           reduce using rule 98 (operand3 -> monadic_operator operand4 .)
    GREATER         reduce using rule 98 (operand3 -> monadic_operator operand4 .)
    GTEQUAL         reduce using rule 98 (operand3 -> monadic_operator operand4 .)
    LESS            reduce using rule 98 (operand3 -> monadic_operator operand4 .)
    LTEQUAL         reduce using rule 98 (operand3 -> monadic_operator operand4 .)
    IN              reduce using rule 98 (operand3 -> monadic_operator operand4 .)
    COLON           reduce using rule 98 (operand3 -> monadic_operator operand4 .)
    COMMA           reduce using rule 98 (operand3 -> monadic_operator operand4 .)
    RBRACKET        reduce using rule 98 (operand3 -> monadic_operator operand4 .)
    SEMI            reduce using rule 98 (operand3 -> monadic_operator operand4 .)
    RPAREN          reduce using rule 98 (operand3 -> monadic_operator operand4 .)
    DOWN            reduce using rule 98 (operand3 -> monadic_operator operand4 .)
    BY              reduce using rule 98 (operand3 -> monadic_operator operand4 .)
    TO              reduce using rule 98 (operand3 -> monadic_operator operand4 .)
    WHILE           reduce using rule 98 (operand3 -> monadic_operator operand4 .)
    FI              reduce using rule 98 (operand3 -> monadic_operator operand4 .)
    THEN            reduce using rule 98 (operand3 -> monadic_operator operand4 .)
    LBRACKET        reduce using rule 98 (operand3 -> monadic_operator operand4 .)
    ELSE            reduce using rule 98 (operand3 -> monadic_operator operand4 .)
    ELSIF           reduce using rule 98 (operand3 -> monadic_operator operand4 .)


state 142

    (117) relational_operator -> OR .

    MINUS           reduce using rule 117 (relational_operator -> OR .)
    NOT             reduce using rule 117 (relational_operator -> OR .)
    ARROW           reduce using rule 117 (relational_operator -> OR .)
    LPAREN          reduce using rule 117 (relational_operator -> OR .)
    ID              reduce using rule 117 (relational_operator -> OR .)
    ICONST          reduce using rule 117 (relational_operator -> OR .)
    TRUE            reduce using rule 117 (relational_operator -> OR .)
    FALSE           reduce using rule 117 (relational_operator -> OR .)
    CCONST          reduce using rule 117 (relational_operator -> OR .)
    NULL            reduce using rule 117 (relational_operator -> OR .)
    SCONST          reduce using rule 117 (relational_operator -> OR .)


state 143

    (122) relational_operator -> LESS .

    MINUS           reduce using rule 122 (relational_operator -> LESS .)
    NOT             reduce using rule 122 (relational_operator -> LESS .)
    ARROW           reduce using rule 122 (relational_operator -> LESS .)
    LPAREN          reduce using rule 122 (relational_operator -> LESS .)
    ID              reduce using rule 122 (relational_operator -> LESS .)
    ICONST          reduce using rule 122 (relational_operator -> LESS .)
    TRUE            reduce using rule 122 (relational_operator -> LESS .)
    FALSE           reduce using rule 122 (relational_operator -> LESS .)
    CCONST          reduce using rule 122 (relational_operator -> LESS .)
    NULL            reduce using rule 122 (relational_operator -> LESS .)
    SCONST          reduce using rule 122 (relational_operator -> LESS .)


state 144

    (119) relational_operator -> NOTEQ .

    MINUS           reduce using rule 119 (relational_operator -> NOTEQ .)
    NOT             reduce using rule 119 (relational_operator -> NOTEQ .)
    ARROW           reduce using rule 119 (relational_operator -> NOTEQ .)
    LPAREN          reduce using rule 119 (relational_operator -> NOTEQ .)
    ID              reduce using rule 119 (relational_operator -> NOTEQ .)
    ICONST          reduce using rule 119 (relational_operator -> NOTEQ .)
    TRUE            reduce using rule 119 (relational_operator -> NOTEQ .)
    FALSE           reduce using rule 119 (relational_operator -> NOTEQ .)
    CCONST          reduce using rule 119 (relational_operator -> NOTEQ .)
    NULL            reduce using rule 119 (relational_operator -> NOTEQ .)
    SCONST          reduce using rule 119 (relational_operator -> NOTEQ .)


state 145

    (123) relational_operator -> LTEQUAL .

    MINUS           reduce using rule 123 (relational_operator -> LTEQUAL .)
    NOT             reduce using rule 123 (relational_operator -> LTEQUAL .)
    ARROW           reduce using rule 123 (relational_operator -> LTEQUAL .)
    LPAREN          reduce using rule 123 (relational_operator -> LTEQUAL .)
    ID              reduce using rule 123 (relational_operator -> LTEQUAL .)
    ICONST          reduce using rule 123 (relational_operator -> LTEQUAL .)
    TRUE            reduce using rule 123 (relational_operator -> LTEQUAL .)
    FALSE           reduce using rule 123 (relational_operator -> LTEQUAL .)
    CCONST          reduce using rule 123 (relational_operator -> LTEQUAL .)
    NULL            reduce using rule 123 (relational_operator -> LTEQUAL .)
    SCONST          reduce using rule 123 (relational_operator -> LTEQUAL .)


state 146

    (118) relational_operator -> EQUAL .

    MINUS           reduce using rule 118 (relational_operator -> EQUAL .)
    NOT             reduce using rule 118 (relational_operator -> EQUAL .)
    ARROW           reduce using rule 118 (relational_operator -> EQUAL .)
    LPAREN          reduce using rule 118 (relational_operator -> EQUAL .)
    ID              reduce using rule 118 (relational_operator -> EQUAL .)
    ICONST          reduce using rule 118 (relational_operator -> EQUAL .)
    TRUE            reduce using rule 118 (relational_operator -> EQUAL .)
    FALSE           reduce using rule 118 (relational_operator -> EQUAL .)
    CCONST          reduce using rule 118 (relational_operator -> EQUAL .)
    NULL            reduce using rule 118 (relational_operator -> EQUAL .)
    SCONST          reduce using rule 118 (relational_operator -> EQUAL .)


state 147

    (109) operator1 -> relational_operator .

    MINUS           reduce using rule 109 (operator1 -> relational_operator .)
    NOT             reduce using rule 109 (operator1 -> relational_operator .)
    ARROW           reduce using rule 109 (operator1 -> relational_operator .)
    LPAREN          reduce using rule 109 (operator1 -> relational_operator .)
    ID              reduce using rule 109 (operator1 -> relational_operator .)
    ICONST          reduce using rule 109 (operator1 -> relational_operator .)
    TRUE            reduce using rule 109 (operator1 -> relational_operator .)
    FALSE           reduce using rule 109 (operator1 -> relational_operator .)
    CCONST          reduce using rule 109 (operator1 -> relational_operator .)
    NULL            reduce using rule 109 (operator1 -> relational_operator .)
    SCONST          reduce using rule 109 (operator1 -> relational_operator .)


state 148

    (124) membership_operator -> IN .

    MINUS           reduce using rule 124 (membership_operator -> IN .)
    NOT             reduce using rule 124 (membership_operator -> IN .)
    ARROW           reduce using rule 124 (membership_operator -> IN .)
    LPAREN          reduce using rule 124 (membership_operator -> IN .)
    ID              reduce using rule 124 (membership_operator -> IN .)
    ICONST          reduce using rule 124 (membership_operator -> IN .)
    TRUE            reduce using rule 124 (membership_operator -> IN .)
    FALSE           reduce using rule 124 (membership_operator -> IN .)
    CCONST          reduce using rule 124 (membership_operator -> IN .)
    NULL            reduce using rule 124 (membership_operator -> IN .)
    SCONST          reduce using rule 124 (membership_operator -> IN .)


state 149

    (120) relational_operator -> GREATER .

    MINUS           reduce using rule 120 (relational_operator -> GREATER .)
    NOT             reduce using rule 120 (relational_operator -> GREATER .)
    ARROW           reduce using rule 120 (relational_operator -> GREATER .)
    LPAREN          reduce using rule 120 (relational_operator -> GREATER .)
    ID              reduce using rule 120 (relational_operator -> GREATER .)
    ICONST          reduce using rule 120 (relational_operator -> GREATER .)
    TRUE            reduce using rule 120 (relational_operator -> GREATER .)
    FALSE           reduce using rule 120 (relational_operator -> GREATER .)
    CCONST          reduce using rule 120 (relational_operator -> GREATER .)
    NULL            reduce using rule 120 (relational_operator -> GREATER .)
    SCONST          reduce using rule 120 (relational_operator -> GREATER .)


state 150

    (93) operand0 -> operand0 operator1 . operand1
    (94) operand1 -> . operand2
    (95) operand1 -> . operand1 operator2 operand2
    (96) operand2 -> . operand3
    (97) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (98) operand3 -> . monadic_operator operand4
    (99) operand3 -> . operand4
    (106) monadic_operator -> . MINUS
    (107) monadic_operator -> . NOT
    (100) operand4 -> . array_location
    (101) operand4 -> . referenced_location
    (102) operand4 -> . primitive_value
    (82) array_location -> . location
    (108) referenced_location -> . ARROW array_location
    (125) primitive_value -> . literal
    (126) primitive_value -> . value_array_element
    (127) primitive_value -> . value_array_slice
    (128) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (129) literal -> . integer_literal
    (130) literal -> . boolean_literal
    (131) literal -> . character_literal
    (132) literal -> . empty_literal
    (133) literal -> . character_string_literal
    (134) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (135) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (136) integer_literal -> . ICONST
    (137) boolean_literal -> . TRUE
    (138) boolean_literal -> . FALSE
    (139) character_literal -> . CCONST
    (140) empty_literal -> . NULL
    (141) character_string_literal -> . SCONST

    MINUS           shift and go to state 79
    NOT             shift and go to state 65
    ARROW           shift and go to state 62
    LPAREN          shift and go to state 70
    ID              shift and go to state 56
    ICONST          shift and go to state 83
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    CCONST          shift and go to state 89
    NULL            shift and go to state 66
    SCONST          shift and go to state 77

    integer_literal                shift and go to state 61
    location                       shift and go to state 38
    operand4                       shift and go to state 73
    array_element                  shift and go to state 19
    parenthesized_expression       shift and go to state 80
    monadic_operator               shift and go to state 63
    boolean_literal                shift and go to state 64
    dereferenced_reference         shift and go to state 30
    character_string_literal       shift and go to state 84
    operand1                       shift and go to state 213
    array_location                 shift and go to state 86
    referenced_location            shift and go to state 87
    character_literal              shift and go to state 67
    value_array_slice              shift and go to state 88
    string_element                 shift and go to state 33
    primitive_value                shift and go to state 69
    operand2                       shift and go to state 90
    literal                        shift and go to state 71
    string_slice                   shift and go to state 17
    array_slice                    shift and go to state 18
    value_array_element            shift and go to state 72
    empty_literal                  shift and go to state 78
    identifier                     shift and go to state 92
    operand3                       shift and go to state 93

state 151

    (116) relational_operator -> AND .

    MINUS           reduce using rule 116 (relational_operator -> AND .)
    NOT             reduce using rule 116 (relational_operator -> AND .)
    ARROW           reduce using rule 116 (relational_operator -> AND .)
    LPAREN          reduce using rule 116 (relational_operator -> AND .)
    ID              reduce using rule 116 (relational_operator -> AND .)
    ICONST          reduce using rule 116 (relational_operator -> AND .)
    TRUE            reduce using rule 116 (relational_operator -> AND .)
    FALSE           reduce using rule 116 (relational_operator -> AND .)
    CCONST          reduce using rule 116 (relational_operator -> AND .)
    NULL            reduce using rule 116 (relational_operator -> AND .)
    SCONST          reduce using rule 116 (relational_operator -> AND .)


state 152

    (110) operator1 -> membership_operator .

    MINUS           reduce using rule 110 (operator1 -> membership_operator .)
    NOT             reduce using rule 110 (operator1 -> membership_operator .)
    ARROW           reduce using rule 110 (operator1 -> membership_operator .)
    LPAREN          reduce using rule 110 (operator1 -> membership_operator .)
    ID              reduce using rule 110 (operator1 -> membership_operator .)
    ICONST          reduce using rule 110 (operator1 -> membership_operator .)
    TRUE            reduce using rule 110 (operator1 -> membership_operator .)
    FALSE           reduce using rule 110 (operator1 -> membership_operator .)
    CCONST          reduce using rule 110 (operator1 -> membership_operator .)
    NULL            reduce using rule 110 (operator1 -> membership_operator .)
    SCONST          reduce using rule 110 (operator1 -> membership_operator .)


state 153

    (121) relational_operator -> GTEQUAL .

    MINUS           reduce using rule 121 (relational_operator -> GTEQUAL .)
    NOT             reduce using rule 121 (relational_operator -> GTEQUAL .)
    ARROW           reduce using rule 121 (relational_operator -> GTEQUAL .)
    LPAREN          reduce using rule 121 (relational_operator -> GTEQUAL .)
    ID              reduce using rule 121 (relational_operator -> GTEQUAL .)
    ICONST          reduce using rule 121 (relational_operator -> GTEQUAL .)
    TRUE            reduce using rule 121 (relational_operator -> GTEQUAL .)
    FALSE           reduce using rule 121 (relational_operator -> GTEQUAL .)
    CCONST          reduce using rule 121 (relational_operator -> GTEQUAL .)
    NULL            reduce using rule 121 (relational_operator -> GTEQUAL .)
    SCONST          reduce using rule 121 (relational_operator -> GTEQUAL .)


state 154

    (134) value_array_element -> primitive_value LBRACKET . expression_list RBRACKET
    (135) value_array_slice -> primitive_value LBRACKET . expression COLON expression RBRACKET
    (79) expression_list -> . expression
    (80) expression_list -> . expression COMMA expression_list
    (83) expression -> . operand0
    (84) expression -> . conditional_expression
    (92) operand0 -> . operand1
    (93) operand0 -> . operand0 operator1 operand1
    (86) conditional_expression -> . IF expression then_expression else_expression FI
    (87) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (94) operand1 -> . operand2
    (95) operand1 -> . operand1 operator2 operand2
    (96) operand2 -> . operand3
    (97) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (98) operand3 -> . monadic_operator operand4
    (99) operand3 -> . operand4
    (106) monadic_operator -> . MINUS
    (107) monadic_operator -> . NOT
    (100) operand4 -> . array_location
    (101) operand4 -> . referenced_location
    (102) operand4 -> . primitive_value
    (82) array_location -> . location
    (108) referenced_location -> . ARROW array_location
    (125) primitive_value -> . literal
    (126) primitive_value -> . value_array_element
    (127) primitive_value -> . value_array_slice
    (128) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (129) literal -> . integer_literal
    (130) literal -> . boolean_literal
    (131) literal -> . character_literal
    (132) literal -> . empty_literal
    (133) literal -> . character_string_literal
    (134) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (135) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (136) integer_literal -> . ICONST
    (137) boolean_literal -> . TRUE
    (138) boolean_literal -> . FALSE
    (139) character_literal -> . CCONST
    (140) empty_literal -> . NULL
    (141) character_string_literal -> . SCONST

    IF              shift and go to state 76
    MINUS           shift and go to state 79
    NOT             shift and go to state 65
    ARROW           shift and go to state 62
    LPAREN          shift and go to state 70
    ID              shift and go to state 56
    ICONST          shift and go to state 83
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    CCONST          shift and go to state 89
    NULL            shift and go to state 66
    SCONST          shift and go to state 77

    integer_literal                shift and go to state 61
    location                       shift and go to state 38
    operand0                       shift and go to state 68
    conditional_expression         shift and go to state 60
    parenthesized_expression       shift and go to state 80
    monadic_operator               shift and go to state 63
    array_element                  shift and go to state 19
    boolean_literal                shift and go to state 64
    array_slice                    shift and go to state 18
    character_string_literal       shift and go to state 84
    operand1                       shift and go to state 85
    array_location                 shift and go to state 86
    referenced_location            shift and go to state 87
    character_literal              shift and go to state 67
    value_array_slice              shift and go to state 88
    string_element                 shift and go to state 33
    primitive_value                shift and go to state 69
    operand2                       shift and go to state 90
    literal                        shift and go to state 71
    string_slice                   shift and go to state 17
    dereferenced_reference         shift and go to state 30
    expression_list                shift and go to state 214
    value_array_element            shift and go to state 72
    empty_literal                  shift and go to state 78
    operand4                       shift and go to state 73
    expression                     shift and go to state 215
    identifier                     shift and go to state 92
    operand3                       shift and go to state 93

state 155

    (85) parenthesized_expression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 216


state 156

    (86) conditional_expression -> IF expression . then_expression else_expression FI
    (87) conditional_expression -> IF expression . then_expression elsif_expression else_expression FI
    (88) then_expression -> . THEN expression

    THEN            shift and go to state 217

    then_expression                shift and go to state 218

state 157

    (112) operator2 -> string_concatenation_operator .

    MINUS           reduce using rule 112 (operator2 -> string_concatenation_operator .)
    NOT             reduce using rule 112 (operator2 -> string_concatenation_operator .)
    ARROW           reduce using rule 112 (operator2 -> string_concatenation_operator .)
    LPAREN          reduce using rule 112 (operator2 -> string_concatenation_operator .)
    ID              reduce using rule 112 (operator2 -> string_concatenation_operator .)
    ICONST          reduce using rule 112 (operator2 -> string_concatenation_operator .)
    TRUE            reduce using rule 112 (operator2 -> string_concatenation_operator .)
    FALSE           reduce using rule 112 (operator2 -> string_concatenation_operator .)
    CCONST          reduce using rule 112 (operator2 -> string_concatenation_operator .)
    NULL            reduce using rule 112 (operator2 -> string_concatenation_operator .)
    SCONST          reduce using rule 112 (operator2 -> string_concatenation_operator .)


state 158

    (95) operand1 -> operand1 operator2 . operand2
    (96) operand2 -> . operand3
    (97) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (98) operand3 -> . monadic_operator operand4
    (99) operand3 -> . operand4
    (106) monadic_operator -> . MINUS
    (107) monadic_operator -> . NOT
    (100) operand4 -> . array_location
    (101) operand4 -> . referenced_location
    (102) operand4 -> . primitive_value
    (82) array_location -> . location
    (108) referenced_location -> . ARROW array_location
    (125) primitive_value -> . literal
    (126) primitive_value -> . value_array_element
    (127) primitive_value -> . value_array_slice
    (128) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (129) literal -> . integer_literal
    (130) literal -> . boolean_literal
    (131) literal -> . character_literal
    (132) literal -> . empty_literal
    (133) literal -> . character_string_literal
    (134) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (135) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (136) integer_literal -> . ICONST
    (137) boolean_literal -> . TRUE
    (138) boolean_literal -> . FALSE
    (139) character_literal -> . CCONST
    (140) empty_literal -> . NULL
    (141) character_string_literal -> . SCONST

    MINUS           shift and go to state 79
    NOT             shift and go to state 65
    ARROW           shift and go to state 62
    LPAREN          shift and go to state 70
    ID              shift and go to state 56
    ICONST          shift and go to state 83
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    CCONST          shift and go to state 89
    NULL            shift and go to state 66
    SCONST          shift and go to state 77

    integer_literal                shift and go to state 61
    location                       shift and go to state 38
    operand4                       shift and go to state 73
    array_element                  shift and go to state 19
    parenthesized_expression       shift and go to state 80
    monadic_operator               shift and go to state 63
    boolean_literal                shift and go to state 64
    dereferenced_reference         shift and go to state 30
    character_string_literal       shift and go to state 84
    array_location                 shift and go to state 86
    referenced_location            shift and go to state 87
    character_literal              shift and go to state 67
    value_array_slice              shift and go to state 88
    string_element                 shift and go to state 33
    primitive_value                shift and go to state 69
    operand2                       shift and go to state 219
    literal                        shift and go to state 71
    string_slice                   shift and go to state 17
    array_slice                    shift and go to state 18
    value_array_element            shift and go to state 72
    empty_literal                  shift and go to state 78
    identifier                     shift and go to state 92
    operand3                       shift and go to state 93

state 159

    (111) operator2 -> arithmetic_additive_operator .

    MINUS           reduce using rule 111 (operator2 -> arithmetic_additive_operator .)
    NOT             reduce using rule 111 (operator2 -> arithmetic_additive_operator .)
    ARROW           reduce using rule 111 (operator2 -> arithmetic_additive_operator .)
    LPAREN          reduce using rule 111 (operator2 -> arithmetic_additive_operator .)
    ID              reduce using rule 111 (operator2 -> arithmetic_additive_operator .)
    ICONST          reduce using rule 111 (operator2 -> arithmetic_additive_operator .)
    TRUE            reduce using rule 111 (operator2 -> arithmetic_additive_operator .)
    FALSE           reduce using rule 111 (operator2 -> arithmetic_additive_operator .)
    CCONST          reduce using rule 111 (operator2 -> arithmetic_additive_operator .)
    NULL            reduce using rule 111 (operator2 -> arithmetic_additive_operator .)
    SCONST          reduce using rule 111 (operator2 -> arithmetic_additive_operator .)


state 160

    (97) operand2 -> operand2 arithmetic_multiplicative_operator . operand3
    (98) operand3 -> . monadic_operator operand4
    (99) operand3 -> . operand4
    (106) monadic_operator -> . MINUS
    (107) monadic_operator -> . NOT
    (100) operand4 -> . array_location
    (101) operand4 -> . referenced_location
    (102) operand4 -> . primitive_value
    (82) array_location -> . location
    (108) referenced_location -> . ARROW array_location
    (125) primitive_value -> . literal
    (126) primitive_value -> . value_array_element
    (127) primitive_value -> . value_array_slice
    (128) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (129) literal -> . integer_literal
    (130) literal -> . boolean_literal
    (131) literal -> . character_literal
    (132) literal -> . empty_literal
    (133) literal -> . character_string_literal
    (134) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (135) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (136) integer_literal -> . ICONST
    (137) boolean_literal -> . TRUE
    (138) boolean_literal -> . FALSE
    (139) character_literal -> . CCONST
    (140) empty_literal -> . NULL
    (141) character_string_literal -> . SCONST

    MINUS           shift and go to state 79
    NOT             shift and go to state 65
    ARROW           shift and go to state 62
    LPAREN          shift and go to state 70
    ID              shift and go to state 56
    ICONST          shift and go to state 83
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    CCONST          shift and go to state 89
    NULL            shift and go to state 66
    SCONST          shift and go to state 77

    integer_literal                shift and go to state 61
    location                       shift and go to state 38
    empty_literal                  shift and go to state 78
    array_element                  shift and go to state 19
    parenthesized_expression       shift and go to state 80
    monadic_operator               shift and go to state 63
    boolean_literal                shift and go to state 64
    dereferenced_reference         shift and go to state 30
    character_string_literal       shift and go to state 84
    array_location                 shift and go to state 86
    referenced_location            shift and go to state 87
    character_literal              shift and go to state 67
    value_array_slice              shift and go to state 88
    primitive_value                shift and go to state 69
    string_element                 shift and go to state 33
    literal                        shift and go to state 71
    string_slice                   shift and go to state 17
    array_slice                    shift and go to state 18
    value_array_element            shift and go to state 72
    operand4                       shift and go to state 73
    identifier                     shift and go to state 92
    operand3                       shift and go to state 220

state 161

    (170) builtin_call -> builtin_name LPAREN RPAREN .

    SEMI            reduce using rule 170 (builtin_call -> builtin_name LPAREN RPAREN .)


state 162

    (181) parameter_list -> expression .
    (182) parameter_list -> expression . COMMA parameter_list

    RPAREN          reduce using rule 181 (parameter_list -> expression .)
    COMMA           shift and go to state 221


state 163

    (169) builtin_call -> builtin_name LPAREN parameter_list . RPAREN

    RPAREN          shift and go to state 222


state 164

    (3) statement_nullable -> statement statement_nullable .

    END             reduce using rule 3 (statement_nullable -> statement statement_nullable .)
    $end            reduce using rule 3 (statement_nullable -> statement statement_nullable .)


state 165

    (158) if_action -> IF expression then_clause . else_clause FI
    (159) if_action -> IF expression then_clause .
    (161) else_clause -> . ELSE action_statement_list
    (162) else_clause -> . ELSIF expression then_clause else_clause
    (163) else_clause -> . ELSIF expression then_clause

    SEMI            reduce using rule 159 (if_action -> IF expression then_clause .)
    ELSE            shift and go to state 224
    ELSIF           shift and go to state 223

    else_clause                    shift and go to state 225

state 166

    (160) then_clause -> THEN . action_statement_list
    (164) action_statement_list -> . action_statement action_statement_nullable
    (142) action_statement -> . identifier COLON action SEMI
    (143) action_statement -> . action SEMI
    (23) identifier -> . ID
    (144) action -> . bracketed_action
    (145) action -> . assignment_action
    (146) action -> . call_action
    (147) action -> . exit_action
    (148) action -> . result_action
    (149) action -> . return_action
    (150) bracketed_action -> . if_action
    (151) bracketed_action -> . do_action
    (152) assignment_action -> . array_location assigning_operator expression
    (167) call_action -> . procedure_call
    (168) call_action -> . builtin_call
    (183) exit_action -> . EXIT label_id
    (188) result_action -> . RESULT expression
    (185) return_action -> . RETURN result
    (158) if_action -> . IF expression then_clause else_clause FI
    (159) if_action -> . IF expression then_clause
    (189) do_action -> . DO control_part SEMI action_statement_nullable OD
    (190) do_action -> . DO action_statement_nullable OD
    (82) array_location -> . location
    (179) procedure_call -> . ID LPAREN parameter_list RPAREN
    (180) procedure_call -> . ID LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (171) builtin_name -> . ABS
    (172) builtin_name -> . ASC
    (173) builtin_name -> . NUM
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    ID              shift and go to state 54
    EXIT            shift and go to state 35
    RESULT          shift and go to state 34
    RETURN          shift and go to state 8
    IF              shift and go to state 23
    DO              shift and go to state 2
    ABS             shift and go to state 7
    ASC             shift and go to state 13
    NUM             shift and go to state 42
    UPPER           shift and go to state 22
    LOWER           shift and go to state 41
    LENGTH          shift and go to state 27
    READ            shift and go to state 10
    PRINT           shift and go to state 37

    action_statement_list          shift and go to state 226
    location                       shift and go to state 38
    result_action                  shift and go to state 11
    call_action                    shift and go to state 25
    array_element                  shift and go to state 19
    action                         shift and go to state 26
    return_action                  shift and go to state 5
    do_action                      shift and go to state 6
    builtin_call                   shift and go to state 9
    bracketed_action               shift and go to state 3
    procedure_call                 shift and go to state 28
    array_slice                    shift and go to state 18
    action_statement               shift and go to state 227
    if_action                      shift and go to state 24
    array_location                 shift and go to state 31
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 17
    dereferenced_reference         shift and go to state 30
    assignment_action              shift and go to state 39
    builtin_name                   shift and go to state 12
    exit_action                    shift and go to state 43
    identifier                     shift and go to state 44

state 167

    (38) mode -> discrete_mode .
    (51) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    LOC             reduce using rule 38 (mode -> discrete_mode .)
    COMMA           reduce using rule 38 (mode -> discrete_mode .)
    RPAREN          reduce using rule 38 (mode -> discrete_mode .)
    ASSIGN          reduce using rule 38 (mode -> discrete_mode .)
    SEMI            reduce using rule 38 (mode -> discrete_mode .)
    LPAREN          shift and go to state 228


state 168

    (49) character_mode -> CHAR .

    LPAREN          reduce using rule 49 (character_mode -> CHAR .)
    ASSIGN          reduce using rule 49 (character_mode -> CHAR .)
    COMMA           reduce using rule 49 (character_mode -> CHAR .)
    SEMI            reduce using rule 49 (character_mode -> CHAR .)
    LOC             reduce using rule 49 (character_mode -> CHAR .)
    RPAREN          reduce using rule 49 (character_mode -> CHAR .)
    RBRACKET        reduce using rule 49 (character_mode -> CHAR .)
    WHILE           reduce using rule 49 (character_mode -> CHAR .)


state 169

    (44) discrete_mode -> character_mode .

    LPAREN          reduce using rule 44 (discrete_mode -> character_mode .)
    ASSIGN          reduce using rule 44 (discrete_mode -> character_mode .)
    COMMA           reduce using rule 44 (discrete_mode -> character_mode .)
    SEMI            reduce using rule 44 (discrete_mode -> character_mode .)
    LOC             reduce using rule 44 (discrete_mode -> character_mode .)
    RPAREN          reduce using rule 44 (discrete_mode -> character_mode .)
    WHILE           reduce using rule 44 (discrete_mode -> character_mode .)
    RBRACKET        reduce using rule 44 (discrete_mode -> character_mode .)


state 170

    (37) mode -> mode_name .

    LOC             reduce using rule 37 (mode -> mode_name .)
    COMMA           reduce using rule 37 (mode -> mode_name .)
    RPAREN          reduce using rule 37 (mode -> mode_name .)
    ASSIGN          reduce using rule 37 (mode -> mode_name .)
    SEMI            reduce using rule 37 (mode -> mode_name .)


state 171

    (60) array_mode -> ARRAY . LBRACKET index_mode_list RBRACKET element_mode

    LBRACKET        shift and go to state 229


state 172

    (48) boolean_mode -> BOOL .

    LPAREN          reduce using rule 48 (boolean_mode -> BOOL .)
    LOC             reduce using rule 48 (boolean_mode -> BOOL .)
    COMMA           reduce using rule 48 (boolean_mode -> BOOL .)
    RPAREN          reduce using rule 48 (boolean_mode -> BOOL .)
    ASSIGN          reduce using rule 48 (boolean_mode -> BOOL .)
    SEMI            reduce using rule 48 (boolean_mode -> BOOL .)
    WHILE           reduce using rule 48 (boolean_mode -> BOOL .)
    RBRACKET        reduce using rule 48 (boolean_mode -> BOOL .)


state 173

    (50) discrete_range_mode -> discrete_mode_name . LPAREN literal_range RPAREN

    LPAREN          shift and go to state 230


state 174

    (45) discrete_mode -> discrete_range_mode .

    LPAREN          reduce using rule 45 (discrete_mode -> discrete_range_mode .)
    ASSIGN          reduce using rule 45 (discrete_mode -> discrete_range_mode .)
    COMMA           reduce using rule 45 (discrete_mode -> discrete_range_mode .)
    SEMI            reduce using rule 45 (discrete_mode -> discrete_range_mode .)
    LOC             reduce using rule 45 (discrete_mode -> discrete_range_mode .)
    RPAREN          reduce using rule 45 (discrete_mode -> discrete_range_mode .)
    WHILE           reduce using rule 45 (discrete_mode -> discrete_range_mode .)
    RBRACKET        reduce using rule 45 (discrete_mode -> discrete_range_mode .)


state 175

    (39) mode -> reference_mode .

    LOC             reduce using rule 39 (mode -> reference_mode .)
    COMMA           reduce using rule 39 (mode -> reference_mode .)
    RPAREN          reduce using rule 39 (mode -> reference_mode .)
    ASSIGN          reduce using rule 39 (mode -> reference_mode .)
    SEMI            reduce using rule 39 (mode -> reference_mode .)


state 176

    (40) mode -> composite_mode .

    LOC             reduce using rule 40 (mode -> composite_mode .)
    COMMA           reduce using rule 40 (mode -> composite_mode .)
    RPAREN          reduce using rule 40 (mode -> composite_mode .)
    ASSIGN          reduce using rule 40 (mode -> composite_mode .)
    SEMI            reduce using rule 40 (mode -> composite_mode .)


state 177

    (43) discrete_mode -> boolean_mode .

    LPAREN          reduce using rule 43 (discrete_mode -> boolean_mode .)
    ASSIGN          reduce using rule 43 (discrete_mode -> boolean_mode .)
    COMMA           reduce using rule 43 (discrete_mode -> boolean_mode .)
    SEMI            reduce using rule 43 (discrete_mode -> boolean_mode .)
    LOC             reduce using rule 43 (discrete_mode -> boolean_mode .)
    RPAREN          reduce using rule 43 (discrete_mode -> boolean_mode .)
    WHILE           reduce using rule 43 (discrete_mode -> boolean_mode .)
    RBRACKET        reduce using rule 43 (discrete_mode -> boolean_mode .)


state 178

    (57) composite_mode -> array_mode .

    ASSIGN          reduce using rule 57 (composite_mode -> array_mode .)
    COMMA           reduce using rule 57 (composite_mode -> array_mode .)
    SEMI            reduce using rule 57 (composite_mode -> array_mode .)
    LOC             reduce using rule 57 (composite_mode -> array_mode .)
    RPAREN          reduce using rule 57 (composite_mode -> array_mode .)


state 179

    (56) composite_mode -> string_mode .

    ASSIGN          reduce using rule 56 (composite_mode -> string_mode .)
    COMMA           reduce using rule 56 (composite_mode -> string_mode .)
    SEMI            reduce using rule 56 (composite_mode -> string_mode .)
    LOC             reduce using rule 56 (composite_mode -> string_mode .)
    RPAREN          reduce using rule 56 (composite_mode -> string_mode .)


state 180

    (55) reference_mode -> REF . mode
    (37) mode -> . mode_name
    (38) mode -> . discrete_mode
    (39) mode -> . reference_mode
    (40) mode -> . composite_mode
    (41) mode_name -> . identifier
    (42) discrete_mode -> . integer_mode
    (43) discrete_mode -> . boolean_mode
    (44) discrete_mode -> . character_mode
    (45) discrete_mode -> . discrete_range_mode
    (55) reference_mode -> . REF mode
    (56) composite_mode -> . string_mode
    (57) composite_mode -> . array_mode
    (23) identifier -> . ID
    (47) integer_mode -> . INT
    (48) boolean_mode -> . BOOL
    (49) character_mode -> . CHAR
    (50) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (51) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (58) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (60) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (46) discrete_mode_name -> . identifier

    REF             shift and go to state 180
    ID              shift and go to state 56
    INT             shift and go to state 183
    BOOL            shift and go to state 172
    CHAR            shift and go to state 168
    CHARS           shift and go to state 182
    ARRAY           shift and go to state 171

    discrete_mode                  shift and go to state 167
    composite_mode                 shift and go to state 176
    character_mode                 shift and go to state 169
    mode_name                      shift and go to state 170
    boolean_mode                   shift and go to state 177
    array_mode                     shift and go to state 178
    string_mode                    shift and go to state 179
    discrete_mode_name             shift and go to state 173
    discrete_range_mode            shift and go to state 174
    integer_mode                   shift and go to state 181
    mode                           shift and go to state 231
    identifier                     shift and go to state 185
    reference_mode                 shift and go to state 175

state 181

    (42) discrete_mode -> integer_mode .

    LPAREN          reduce using rule 42 (discrete_mode -> integer_mode .)
    ASSIGN          reduce using rule 42 (discrete_mode -> integer_mode .)
    COMMA           reduce using rule 42 (discrete_mode -> integer_mode .)
    SEMI            reduce using rule 42 (discrete_mode -> integer_mode .)
    LOC             reduce using rule 42 (discrete_mode -> integer_mode .)
    RPAREN          reduce using rule 42 (discrete_mode -> integer_mode .)
    WHILE           reduce using rule 42 (discrete_mode -> integer_mode .)
    RBRACKET        reduce using rule 42 (discrete_mode -> integer_mode .)


state 182

    (58) string_mode -> CHARS . LBRACKET string_length RBRACKET

    LBRACKET        shift and go to state 232


state 183

    (47) integer_mode -> INT .

    LPAREN          reduce using rule 47 (integer_mode -> INT .)
    LOC             reduce using rule 47 (integer_mode -> INT .)
    COMMA           reduce using rule 47 (integer_mode -> INT .)
    RPAREN          reduce using rule 47 (integer_mode -> INT .)
    WHILE           reduce using rule 47 (integer_mode -> INT .)
    SEMI            reduce using rule 47 (integer_mode -> INT .)
    ASSIGN          reduce using rule 47 (integer_mode -> INT .)
    RBRACKET        reduce using rule 47 (integer_mode -> INT .)


state 184

    (18) declaration -> identifier_list mode . initialization
    (19) declaration -> identifier_list mode .
    (20) initialization -> . ASSIGN expression

    COMMA           reduce using rule 19 (declaration -> identifier_list mode .)
    SEMI            reduce using rule 19 (declaration -> identifier_list mode .)
    ASSIGN          shift and go to state 234

    initialization                 shift and go to state 233

state 185

    (41) mode_name -> identifier .
    (46) discrete_mode_name -> identifier .

    ASSIGN          reduce using rule 41 (mode_name -> identifier .)
    COMMA           reduce using rule 41 (mode_name -> identifier .)
    SEMI            reduce using rule 41 (mode_name -> identifier .)
    LOC             reduce using rule 41 (mode_name -> identifier .)
    RPAREN          reduce using rule 41 (mode_name -> identifier .)
    LPAREN          reduce using rule 46 (discrete_mode_name -> identifier .)


state 186

    (15) declaration_statement -> DCL declaration_list SEMI .

    DCL             reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    SYN             reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    TYPE            reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    ID              reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    EXIT            reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    RESULT          reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    RETURN          reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    IF              reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    DO              reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    ABS             reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    ASC             reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    NUM             reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    UPPER           reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    LOWER           reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    LENGTH          reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    READ            reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    PRINT           reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    $end            reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    END             reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)


state 187

    (17) declaration_list -> declaration COMMA . declaration_list
    (16) declaration_list -> . declaration
    (17) declaration_list -> . declaration COMMA declaration_list
    (18) declaration -> . identifier_list mode initialization
    (19) declaration -> . identifier_list mode
    (21) identifier_list -> . identifier
    (22) identifier_list -> . identifier COMMA identifier_list
    (23) identifier -> . ID

    ID              shift and go to state 56

    identifier_list                shift and go to state 100
    declaration                    shift and go to state 102
    declaration_list               shift and go to state 235
    identifier                     shift and go to state 59

state 188

    (78) array_element -> array_location LBRACKET expression_list . RBRACKET

    RBRACKET        shift and go to state 236


state 189

    (79) expression_list -> expression .
    (80) expression_list -> expression . COMMA expression_list
    (53) lower_bound -> expression .

    RBRACKET        reduce using rule 79 (expression_list -> expression .)
    COMMA           shift and go to state 237
    COLON           reduce using rule 53 (lower_bound -> expression .)


state 190

    (81) array_slice -> array_location LBRACKET lower_bound . COLON upper_bound RBRACKET

    COLON           shift and go to state 238


state 191

    (153) assigning_operator -> closed_dyadic_operator ASSIGN .

    IF              reduce using rule 153 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    MINUS           reduce using rule 153 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    NOT             reduce using rule 153 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    ARROW           reduce using rule 153 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    LPAREN          reduce using rule 153 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    ID              reduce using rule 153 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    ICONST          reduce using rule 153 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    TRUE            reduce using rule 153 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    FALSE           reduce using rule 153 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    CCONST          reduce using rule 153 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    NULL            reduce using rule 153 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    SCONST          reduce using rule 153 (assigning_operator -> closed_dyadic_operator ASSIGN .)


state 192

    (152) assignment_action -> array_location assigning_operator expression .

    SEMI            reduce using rule 152 (assignment_action -> array_location assigning_operator expression .)


state 193

    (28) procedure_statement -> ID COLON procedure_definition .

    DCL             reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    SYN             reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    TYPE            reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    ID              reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    EXIT            reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    RESULT          reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    RETURN          reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    IF              reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    DO              reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    ABS             reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    ASC             reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    NUM             reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    UPPER           reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    LOWER           reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    LENGTH          reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    READ            reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    PRINT           reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    END             reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    $end            reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)


state 194

    (29) procedure_definition -> PROC . LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI
    (30) procedure_definition -> PROC . LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI

    LPAREN          shift and go to state 239


state 195

    (180) procedure_call -> ID LPAREN RPAREN .

    SEMI            reduce using rule 180 (procedure_call -> ID LPAREN RPAREN .)


state 196

    (179) procedure_call -> ID LPAREN parameter_list . RPAREN

    RPAREN          shift and go to state 240


state 197

    (12) synonym_list -> synonym_definition COMMA . synonym_list
    (11) synonym_list -> . synonym_definition
    (12) synonym_list -> . synonym_definition COMMA synonym_list
    (13) synonym_definition -> . identifier_list mode ASSIGN expression
    (14) synonym_definition -> . identifier_list ASSIGN expression
    (21) identifier_list -> . identifier
    (22) identifier_list -> . identifier COMMA identifier_list
    (23) identifier -> . ID

    ID              shift and go to state 56

    synonym_definition             shift and go to state 122
    identifier_list                shift and go to state 123
    synonym_list                   shift and go to state 241
    identifier                     shift and go to state 59

state 198

    (14) synonym_definition -> identifier_list ASSIGN . expression
    (83) expression -> . operand0
    (84) expression -> . conditional_expression
    (92) operand0 -> . operand1
    (93) operand0 -> . operand0 operator1 operand1
    (86) conditional_expression -> . IF expression then_expression else_expression FI
    (87) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (94) operand1 -> . operand2
    (95) operand1 -> . operand1 operator2 operand2
    (96) operand2 -> . operand3
    (97) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (98) operand3 -> . monadic_operator operand4
    (99) operand3 -> . operand4
    (106) monadic_operator -> . MINUS
    (107) monadic_operator -> . NOT
    (100) operand4 -> . array_location
    (101) operand4 -> . referenced_location
    (102) operand4 -> . primitive_value
    (82) array_location -> . location
    (108) referenced_location -> . ARROW array_location
    (125) primitive_value -> . literal
    (126) primitive_value -> . value_array_element
    (127) primitive_value -> . value_array_slice
    (128) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (129) literal -> . integer_literal
    (130) literal -> . boolean_literal
    (131) literal -> . character_literal
    (132) literal -> . empty_literal
    (133) literal -> . character_string_literal
    (134) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (135) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (136) integer_literal -> . ICONST
    (137) boolean_literal -> . TRUE
    (138) boolean_literal -> . FALSE
    (139) character_literal -> . CCONST
    (140) empty_literal -> . NULL
    (141) character_string_literal -> . SCONST

    IF              shift and go to state 76
    MINUS           shift and go to state 79
    NOT             shift and go to state 65
    ARROW           shift and go to state 62
    LPAREN          shift and go to state 70
    ID              shift and go to state 56
    ICONST          shift and go to state 83
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    CCONST          shift and go to state 89
    NULL            shift and go to state 66
    SCONST          shift and go to state 77

    integer_literal                shift and go to state 61
    location                       shift and go to state 38
    operand0                       shift and go to state 68
    conditional_expression         shift and go to state 60
    parenthesized_expression       shift and go to state 80
    monadic_operator               shift and go to state 63
    array_element                  shift and go to state 19
    boolean_literal                shift and go to state 64
    array_slice                    shift and go to state 18
    character_string_literal       shift and go to state 84
    operand1                       shift and go to state 85
    array_location                 shift and go to state 86
    referenced_location            shift and go to state 87
    character_literal              shift and go to state 67
    value_array_slice              shift and go to state 88
    string_element                 shift and go to state 33
    primitive_value                shift and go to state 69
    operand2                       shift and go to state 90
    literal                        shift and go to state 71
    string_slice                   shift and go to state 17
    dereferenced_reference         shift and go to state 30
    value_array_element            shift and go to state 72
    empty_literal                  shift and go to state 78
    operand4                       shift and go to state 73
    expression                     shift and go to state 242
    identifier                     shift and go to state 92
    operand3                       shift and go to state 93

state 199

    (13) synonym_definition -> identifier_list mode . ASSIGN expression

    ASSIGN          shift and go to state 243


state 200

    (10) synonym_statement -> SYN synonym_list SEMI .

    DCL             reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    SYN             reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    TYPE            reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    ID              reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    EXIT            reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    RESULT          reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    RETURN          reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    IF              reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    DO              reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    ABS             reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    ASC             reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    NUM             reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    UPPER           reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    LOWER           reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    LENGTH          reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    READ            reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    PRINT           reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    END             reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    $end            reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)


state 201

    (142) action_statement -> identifier COLON action . SEMI

    SEMI            shift and go to state 244


state 202

    (179) procedure_call -> ID . LPAREN parameter_list RPAREN
    (180) procedure_call -> ID . LPAREN RPAREN
    (23) identifier -> ID .

    LPAREN          shift and go to state 118
    LBRACKET        reduce using rule 23 (identifier -> ID .)
    ARROW           reduce using rule 23 (identifier -> ID .)
    ASSIGN          reduce using rule 23 (identifier -> ID .)
    PLUS            reduce using rule 23 (identifier -> ID .)
    MINUS           reduce using rule 23 (identifier -> ID .)
    TIMES           reduce using rule 23 (identifier -> ID .)
    DIVIDE          reduce using rule 23 (identifier -> ID .)
    MODULO          reduce using rule 23 (identifier -> ID .)
    CONCAT          reduce using rule 23 (identifier -> ID .)


state 203

    (74) start_element -> expression .
    (76) left_element -> expression .

    LBRACKET        reduce using rule 74 (start_element -> expression .)
    COLON           reduce using rule 76 (left_element -> expression .)


state 204

    (75) string_slice -> identifier LBRACKET left_element . COLON right_element RBRACKET

    COLON           shift and go to state 245


state 205

    (73) string_element -> identifier LBRACKET start_element . LBRACKET

    LBRACKET        shift and go to state 246


state 206

    (189) do_action -> DO control_part SEMI action_statement_nullable . OD

    OD              shift and go to state 247


state 207

    (197) step_enumeration -> identifier ASSIGN . expression step_value DOWN end_value
    (198) step_enumeration -> identifier ASSIGN . expression step_value end_value
    (199) step_enumeration -> identifier ASSIGN . expression DOWN end_value
    (200) step_enumeration -> identifier ASSIGN . expression end_value
    (83) expression -> . operand0
    (84) expression -> . conditional_expression
    (92) operand0 -> . operand1
    (93) operand0 -> . operand0 operator1 operand1
    (86) conditional_expression -> . IF expression then_expression else_expression FI
    (87) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (94) operand1 -> . operand2
    (95) operand1 -> . operand1 operator2 operand2
    (96) operand2 -> . operand3
    (97) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (98) operand3 -> . monadic_operator operand4
    (99) operand3 -> . operand4
    (106) monadic_operator -> . MINUS
    (107) monadic_operator -> . NOT
    (100) operand4 -> . array_location
    (101) operand4 -> . referenced_location
    (102) operand4 -> . primitive_value
    (82) array_location -> . location
    (108) referenced_location -> . ARROW array_location
    (125) primitive_value -> . literal
    (126) primitive_value -> . value_array_element
    (127) primitive_value -> . value_array_slice
    (128) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (129) literal -> . integer_literal
    (130) literal -> . boolean_literal
    (131) literal -> . character_literal
    (132) literal -> . empty_literal
    (133) literal -> . character_string_literal
    (134) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (135) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (136) integer_literal -> . ICONST
    (137) boolean_literal -> . TRUE
    (138) boolean_literal -> . FALSE
    (139) character_literal -> . CCONST
    (140) empty_literal -> . NULL
    (141) character_string_literal -> . SCONST

    IF              shift and go to state 76
    MINUS           shift and go to state 79
    NOT             shift and go to state 65
    ARROW           shift and go to state 62
    LPAREN          shift and go to state 70
    ID              shift and go to state 56
    ICONST          shift and go to state 83
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    CCONST          shift and go to state 89
    NULL            shift and go to state 66
    SCONST          shift and go to state 77

    integer_literal                shift and go to state 61
    location                       shift and go to state 38
    operand0                       shift and go to state 68
    conditional_expression         shift and go to state 60
    parenthesized_expression       shift and go to state 80
    monadic_operator               shift and go to state 63
    array_element                  shift and go to state 19
    boolean_literal                shift and go to state 64
    string_element                 shift and go to state 33
    array_slice                    shift and go to state 18
    character_string_literal       shift and go to state 84
    operand1                       shift and go to state 85
    array_location                 shift and go to state 86
    referenced_location            shift and go to state 87
    character_literal              shift and go to state 67
    value_array_slice              shift and go to state 88
    primitive_value                shift and go to state 69
    operand2                       shift and go to state 90
    literal                        shift and go to state 71
    string_slice                   shift and go to state 17
    dereferenced_reference         shift and go to state 30
    value_array_element            shift and go to state 72
    empty_literal                  shift and go to state 78
    operand4                       shift and go to state 73
    expression                     shift and go to state 248
    identifier                     shift and go to state 92
    operand3                       shift and go to state 93

state 208

    (204) range_enumeration -> identifier IN . discrete_mode
    (42) discrete_mode -> . integer_mode
    (43) discrete_mode -> . boolean_mode
    (44) discrete_mode -> . character_mode
    (45) discrete_mode -> . discrete_range_mode
    (47) integer_mode -> . INT
    (48) boolean_mode -> . BOOL
    (49) character_mode -> . CHAR
    (50) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (51) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (46) discrete_mode_name -> . identifier
    (23) identifier -> . ID

    INT             shift and go to state 183
    BOOL            shift and go to state 172
    CHAR            shift and go to state 168
    ID              shift and go to state 56

    discrete_mode                  shift and go to state 249
    character_mode                 shift and go to state 169
    boolean_mode                   shift and go to state 177
    integer_mode                   shift and go to state 181
    discrete_mode_name             shift and go to state 173
    identifier                     shift and go to state 250
    discrete_range_mode            shift and go to state 174

state 209

    (203) range_enumeration -> identifier DOWN . IN discrete_mode

    IN              shift and go to state 251


state 210

    (27) mode_definition -> identifier_list ASSIGN mode .

    COMMA           reduce using rule 27 (mode_definition -> identifier_list ASSIGN mode .)
    SEMI            reduce using rule 27 (mode_definition -> identifier_list ASSIGN mode .)


state 211

    (26) newmode_list -> mode_definition COMMA newmode_list .

    SEMI            reduce using rule 26 (newmode_list -> mode_definition COMMA newmode_list .)


state 212

    (22) identifier_list -> identifier COMMA identifier_list .

    REF             reduce using rule 22 (identifier_list -> identifier COMMA identifier_list .)
    ID              reduce using rule 22 (identifier_list -> identifier COMMA identifier_list .)
    INT             reduce using rule 22 (identifier_list -> identifier COMMA identifier_list .)
    BOOL            reduce using rule 22 (identifier_list -> identifier COMMA identifier_list .)
    CHAR            reduce using rule 22 (identifier_list -> identifier COMMA identifier_list .)
    CHARS           reduce using rule 22 (identifier_list -> identifier COMMA identifier_list .)
    ARRAY           reduce using rule 22 (identifier_list -> identifier COMMA identifier_list .)
    ASSIGN          reduce using rule 22 (identifier_list -> identifier COMMA identifier_list .)


state 213

    (93) operand0 -> operand0 operator1 operand1 .
    (95) operand1 -> operand1 . operator2 operand2
    (111) operator2 -> . arithmetic_additive_operator
    (112) operator2 -> . string_concatenation_operator
    (113) arithmetic_additive_operator -> . PLUS
    (114) arithmetic_additive_operator -> . MINUS
    (115) string_concatenation_operator -> . CONCAT

    AND             reduce using rule 93 (operand0 -> operand0 operator1 operand1 .)
    OR              reduce using rule 93 (operand0 -> operand0 operator1 operand1 .)
    EQUAL           reduce using rule 93 (operand0 -> operand0 operator1 operand1 .)
    NOTEQ           reduce using rule 93 (operand0 -> operand0 operator1 operand1 .)
    GREATER         reduce using rule 93 (operand0 -> operand0 operator1 operand1 .)
    GTEQUAL         reduce using rule 93 (operand0 -> operand0 operator1 operand1 .)
    LESS            reduce using rule 93 (operand0 -> operand0 operator1 operand1 .)
    LTEQUAL         reduce using rule 93 (operand0 -> operand0 operator1 operand1 .)
    IN              reduce using rule 93 (operand0 -> operand0 operator1 operand1 .)
    THEN            reduce using rule 93 (operand0 -> operand0 operator1 operand1 .)
    COLON           reduce using rule 93 (operand0 -> operand0 operator1 operand1 .)
    COMMA           reduce using rule 93 (operand0 -> operand0 operator1 operand1 .)
    RBRACKET        reduce using rule 93 (operand0 -> operand0 operator1 operand1 .)
    RPAREN          reduce using rule 93 (operand0 -> operand0 operator1 operand1 .)
    SEMI            reduce using rule 93 (operand0 -> operand0 operator1 operand1 .)
    FI              reduce using rule 93 (operand0 -> operand0 operator1 operand1 .)
    ELSE            reduce using rule 93 (operand0 -> operand0 operator1 operand1 .)
    ELSIF           reduce using rule 93 (operand0 -> operand0 operator1 operand1 .)
    WHILE           reduce using rule 93 (operand0 -> operand0 operator1 operand1 .)
    LBRACKET        reduce using rule 93 (operand0 -> operand0 operator1 operand1 .)
    DOWN            reduce using rule 93 (operand0 -> operand0 operator1 operand1 .)
    TO              reduce using rule 93 (operand0 -> operand0 operator1 operand1 .)
    BY              reduce using rule 93 (operand0 -> operand0 operator1 operand1 .)
    PLUS            shift and go to state 103
    MINUS           shift and go to state 105
    CONCAT          shift and go to state 108

    string_concatenation_operator  shift and go to state 157
    operator2                      shift and go to state 158
    arithmetic_additive_operator   shift and go to state 159

state 214

    (134) value_array_element -> primitive_value LBRACKET expression_list . RBRACKET

    RBRACKET        shift and go to state 252


state 215

    (135) value_array_slice -> primitive_value LBRACKET expression . COLON expression RBRACKET
    (79) expression_list -> expression .
    (80) expression_list -> expression . COMMA expression_list

    COLON           shift and go to state 253
    RBRACKET        reduce using rule 79 (expression_list -> expression .)
    COMMA           shift and go to state 237


state 216

    (85) parenthesized_expression -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    CONCAT          reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    NOTEQ           reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    GTEQUAL         reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    LESS            reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    LTEQUAL         reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    IN              reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    DOWN            reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    BY              reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    TO              reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    ELSIF           reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    FI              reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)


state 217

    (88) then_expression -> THEN . expression
    (83) expression -> . operand0
    (84) expression -> . conditional_expression
    (92) operand0 -> . operand1
    (93) operand0 -> . operand0 operator1 operand1
    (86) conditional_expression -> . IF expression then_expression else_expression FI
    (87) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (94) operand1 -> . operand2
    (95) operand1 -> . operand1 operator2 operand2
    (96) operand2 -> . operand3
    (97) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (98) operand3 -> . monadic_operator operand4
    (99) operand3 -> . operand4
    (106) monadic_operator -> . MINUS
    (107) monadic_operator -> . NOT
    (100) operand4 -> . array_location
    (101) operand4 -> . referenced_location
    (102) operand4 -> . primitive_value
    (82) array_location -> . location
    (108) referenced_location -> . ARROW array_location
    (125) primitive_value -> . literal
    (126) primitive_value -> . value_array_element
    (127) primitive_value -> . value_array_slice
    (128) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (129) literal -> . integer_literal
    (130) literal -> . boolean_literal
    (131) literal -> . character_literal
    (132) literal -> . empty_literal
    (133) literal -> . character_string_literal
    (134) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (135) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (136) integer_literal -> . ICONST
    (137) boolean_literal -> . TRUE
    (138) boolean_literal -> . FALSE
    (139) character_literal -> . CCONST
    (140) empty_literal -> . NULL
    (141) character_string_literal -> . SCONST

    IF              shift and go to state 76
    MINUS           shift and go to state 79
    NOT             shift and go to state 65
    ARROW           shift and go to state 62
    LPAREN          shift and go to state 70
    ID              shift and go to state 56
    ICONST          shift and go to state 83
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    CCONST          shift and go to state 89
    NULL            shift and go to state 66
    SCONST          shift and go to state 77

    integer_literal                shift and go to state 61
    location                       shift and go to state 38
    operand0                       shift and go to state 68
    conditional_expression         shift and go to state 60
    parenthesized_expression       shift and go to state 80
    monadic_operator               shift and go to state 63
    array_element                  shift and go to state 19
    boolean_literal                shift and go to state 64
    array_slice                    shift and go to state 18
    character_string_literal       shift and go to state 84
    operand1                       shift and go to state 85
    array_location                 shift and go to state 86
    referenced_location            shift and go to state 87
    character_literal              shift and go to state 67
    value_array_slice              shift and go to state 88
    string_element                 shift and go to state 33
    primitive_value                shift and go to state 69
    operand2                       shift and go to state 90
    literal                        shift and go to state 71
    string_slice                   shift and go to state 17
    dereferenced_reference         shift and go to state 30
    value_array_element            shift and go to state 72
    empty_literal                  shift and go to state 78
    operand4                       shift and go to state 73
    expression                     shift and go to state 254
    identifier                     shift and go to state 92
    operand3                       shift and go to state 93

state 218

    (86) conditional_expression -> IF expression then_expression . else_expression FI
    (87) conditional_expression -> IF expression then_expression . elsif_expression else_expression FI
    (89) else_expression -> . ELSE expression
    (90) elsif_expression -> . ELSIF expression then_expression
    (91) elsif_expression -> . elsif_expression ELSIF expression then_expression

    ELSE            shift and go to state 257
    ELSIF           shift and go to state 255

    else_expression                shift and go to state 256
    elsif_expression               shift and go to state 258

state 219

    (95) operand1 -> operand1 operator2 operand2 .
    (97) operand2 -> operand2 . arithmetic_multiplicative_operator operand3
    (103) arithmetic_multiplicative_operator -> . TIMES
    (104) arithmetic_multiplicative_operator -> . DIVIDE
    (105) arithmetic_multiplicative_operator -> . MODULO

    PLUS            reduce using rule 95 (operand1 -> operand1 operator2 operand2 .)
    MINUS           reduce using rule 95 (operand1 -> operand1 operator2 operand2 .)
    CONCAT          reduce using rule 95 (operand1 -> operand1 operator2 operand2 .)
    AND             reduce using rule 95 (operand1 -> operand1 operator2 operand2 .)
    OR              reduce using rule 95 (operand1 -> operand1 operator2 operand2 .)
    EQUAL           reduce using rule 95 (operand1 -> operand1 operator2 operand2 .)
    NOTEQ           reduce using rule 95 (operand1 -> operand1 operator2 operand2 .)
    GREATER         reduce using rule 95 (operand1 -> operand1 operator2 operand2 .)
    GTEQUAL         reduce using rule 95 (operand1 -> operand1 operator2 operand2 .)
    LESS            reduce using rule 95 (operand1 -> operand1 operator2 operand2 .)
    LTEQUAL         reduce using rule 95 (operand1 -> operand1 operator2 operand2 .)
    IN              reduce using rule 95 (operand1 -> operand1 operator2 operand2 .)
    COMMA           reduce using rule 95 (operand1 -> operand1 operator2 operand2 .)
    RBRACKET        reduce using rule 95 (operand1 -> operand1 operator2 operand2 .)
    COLON           reduce using rule 95 (operand1 -> operand1 operator2 operand2 .)
    SEMI            reduce using rule 95 (operand1 -> operand1 operator2 operand2 .)
    RPAREN          reduce using rule 95 (operand1 -> operand1 operator2 operand2 .)
    DOWN            reduce using rule 95 (operand1 -> operand1 operator2 operand2 .)
    TO              reduce using rule 95 (operand1 -> operand1 operator2 operand2 .)
    THEN            reduce using rule 95 (operand1 -> operand1 operator2 operand2 .)
    LBRACKET        reduce using rule 95 (operand1 -> operand1 operator2 operand2 .)
    BY              reduce using rule 95 (operand1 -> operand1 operator2 operand2 .)
    ELSE            reduce using rule 95 (operand1 -> operand1 operator2 operand2 .)
    ELSIF           reduce using rule 95 (operand1 -> operand1 operator2 operand2 .)
    FI              reduce using rule 95 (operand1 -> operand1 operator2 operand2 .)
    WHILE           reduce using rule 95 (operand1 -> operand1 operator2 operand2 .)
    TIMES           shift and go to state 110
    DIVIDE          shift and go to state 104
    MODULO          shift and go to state 112

    arithmetic_multiplicative_operator shift and go to state 160

state 220

    (97) operand2 -> operand2 arithmetic_multiplicative_operator operand3 .

    TIMES           reduce using rule 97 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    DIVIDE          reduce using rule 97 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    MODULO          reduce using rule 97 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    PLUS            reduce using rule 97 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    MINUS           reduce using rule 97 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    CONCAT          reduce using rule 97 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    AND             reduce using rule 97 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    OR              reduce using rule 97 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    EQUAL           reduce using rule 97 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    NOTEQ           reduce using rule 97 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    GREATER         reduce using rule 97 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    GTEQUAL         reduce using rule 97 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LESS            reduce using rule 97 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LTEQUAL         reduce using rule 97 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    IN              reduce using rule 97 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    ELSE            reduce using rule 97 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    ELSIF           reduce using rule 97 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    RBRACKET        reduce using rule 97 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    COLON           reduce using rule 97 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    THEN            reduce using rule 97 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    COMMA           reduce using rule 97 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    SEMI            reduce using rule 97 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    RPAREN          reduce using rule 97 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    DOWN            reduce using rule 97 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    TO              reduce using rule 97 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    BY              reduce using rule 97 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LBRACKET        reduce using rule 97 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    FI              reduce using rule 97 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    WHILE           reduce using rule 97 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)


state 221

    (182) parameter_list -> expression COMMA . parameter_list
    (181) parameter_list -> . expression
    (182) parameter_list -> . expression COMMA parameter_list
    (83) expression -> . operand0
    (84) expression -> . conditional_expression
    (92) operand0 -> . operand1
    (93) operand0 -> . operand0 operator1 operand1
    (86) conditional_expression -> . IF expression then_expression else_expression FI
    (87) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (94) operand1 -> . operand2
    (95) operand1 -> . operand1 operator2 operand2
    (96) operand2 -> . operand3
    (97) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (98) operand3 -> . monadic_operator operand4
    (99) operand3 -> . operand4
    (106) monadic_operator -> . MINUS
    (107) monadic_operator -> . NOT
    (100) operand4 -> . array_location
    (101) operand4 -> . referenced_location
    (102) operand4 -> . primitive_value
    (82) array_location -> . location
    (108) referenced_location -> . ARROW array_location
    (125) primitive_value -> . literal
    (126) primitive_value -> . value_array_element
    (127) primitive_value -> . value_array_slice
    (128) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (129) literal -> . integer_literal
    (130) literal -> . boolean_literal
    (131) literal -> . character_literal
    (132) literal -> . empty_literal
    (133) literal -> . character_string_literal
    (134) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (135) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (136) integer_literal -> . ICONST
    (137) boolean_literal -> . TRUE
    (138) boolean_literal -> . FALSE
    (139) character_literal -> . CCONST
    (140) empty_literal -> . NULL
    (141) character_string_literal -> . SCONST

    IF              shift and go to state 76
    MINUS           shift and go to state 79
    NOT             shift and go to state 65
    ARROW           shift and go to state 62
    LPAREN          shift and go to state 70
    ID              shift and go to state 56
    ICONST          shift and go to state 83
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    CCONST          shift and go to state 89
    NULL            shift and go to state 66
    SCONST          shift and go to state 77

    integer_literal                shift and go to state 61
    location                       shift and go to state 38
    operand0                       shift and go to state 68
    conditional_expression         shift and go to state 60
    parenthesized_expression       shift and go to state 80
    monadic_operator               shift and go to state 63
    array_element                  shift and go to state 19
    boolean_literal                shift and go to state 64
    parameter_list                 shift and go to state 259
    array_slice                    shift and go to state 18
    character_string_literal       shift and go to state 84
    operand1                       shift and go to state 85
    array_location                 shift and go to state 86
    referenced_location            shift and go to state 87
    character_literal              shift and go to state 67
    value_array_slice              shift and go to state 88
    string_element                 shift and go to state 33
    primitive_value                shift and go to state 69
    operand2                       shift and go to state 90
    literal                        shift and go to state 71
    string_slice                   shift and go to state 17
    dereferenced_reference         shift and go to state 30
    value_array_element            shift and go to state 72
    empty_literal                  shift and go to state 78
    operand4                       shift and go to state 73
    expression                     shift and go to state 162
    identifier                     shift and go to state 92
    operand3                       shift and go to state 93

state 222

    (169) builtin_call -> builtin_name LPAREN parameter_list RPAREN .

    SEMI            reduce using rule 169 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)


state 223

    (162) else_clause -> ELSIF . expression then_clause else_clause
    (163) else_clause -> ELSIF . expression then_clause
    (83) expression -> . operand0
    (84) expression -> . conditional_expression
    (92) operand0 -> . operand1
    (93) operand0 -> . operand0 operator1 operand1
    (86) conditional_expression -> . IF expression then_expression else_expression FI
    (87) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (94) operand1 -> . operand2
    (95) operand1 -> . operand1 operator2 operand2
    (96) operand2 -> . operand3
    (97) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (98) operand3 -> . monadic_operator operand4
    (99) operand3 -> . operand4
    (106) monadic_operator -> . MINUS
    (107) monadic_operator -> . NOT
    (100) operand4 -> . array_location
    (101) operand4 -> . referenced_location
    (102) operand4 -> . primitive_value
    (82) array_location -> . location
    (108) referenced_location -> . ARROW array_location
    (125) primitive_value -> . literal
    (126) primitive_value -> . value_array_element
    (127) primitive_value -> . value_array_slice
    (128) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (129) literal -> . integer_literal
    (130) literal -> . boolean_literal
    (131) literal -> . character_literal
    (132) literal -> . empty_literal
    (133) literal -> . character_string_literal
    (134) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (135) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (136) integer_literal -> . ICONST
    (137) boolean_literal -> . TRUE
    (138) boolean_literal -> . FALSE
    (139) character_literal -> . CCONST
    (140) empty_literal -> . NULL
    (141) character_string_literal -> . SCONST

    IF              shift and go to state 76
    MINUS           shift and go to state 79
    NOT             shift and go to state 65
    ARROW           shift and go to state 62
    LPAREN          shift and go to state 70
    ID              shift and go to state 56
    ICONST          shift and go to state 83
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    CCONST          shift and go to state 89
    NULL            shift and go to state 66
    SCONST          shift and go to state 77

    integer_literal                shift and go to state 61
    location                       shift and go to state 38
    operand0                       shift and go to state 68
    conditional_expression         shift and go to state 60
    parenthesized_expression       shift and go to state 80
    monadic_operator               shift and go to state 63
    array_element                  shift and go to state 19
    boolean_literal                shift and go to state 64
    character_string_literal       shift and go to state 84
    operand1                       shift and go to state 85
    array_location                 shift and go to state 86
    referenced_location            shift and go to state 87
    character_literal              shift and go to state 67
    value_array_slice              shift and go to state 88
    string_element                 shift and go to state 33
    primitive_value                shift and go to state 69
    operand2                       shift and go to state 90
    literal                        shift and go to state 71
    string_slice                   shift and go to state 17
    dereferenced_reference         shift and go to state 30
    value_array_element            shift and go to state 72
    empty_literal                  shift and go to state 78
    operand4                       shift and go to state 73
    array_slice                    shift and go to state 18
    expression                     shift and go to state 260
    identifier                     shift and go to state 92
    operand3                       shift and go to state 93

state 224

    (161) else_clause -> ELSE . action_statement_list
    (164) action_statement_list -> . action_statement action_statement_nullable
    (142) action_statement -> . identifier COLON action SEMI
    (143) action_statement -> . action SEMI
    (23) identifier -> . ID
    (144) action -> . bracketed_action
    (145) action -> . assignment_action
    (146) action -> . call_action
    (147) action -> . exit_action
    (148) action -> . result_action
    (149) action -> . return_action
    (150) bracketed_action -> . if_action
    (151) bracketed_action -> . do_action
    (152) assignment_action -> . array_location assigning_operator expression
    (167) call_action -> . procedure_call
    (168) call_action -> . builtin_call
    (183) exit_action -> . EXIT label_id
    (188) result_action -> . RESULT expression
    (185) return_action -> . RETURN result
    (158) if_action -> . IF expression then_clause else_clause FI
    (159) if_action -> . IF expression then_clause
    (189) do_action -> . DO control_part SEMI action_statement_nullable OD
    (190) do_action -> . DO action_statement_nullable OD
    (82) array_location -> . location
    (179) procedure_call -> . ID LPAREN parameter_list RPAREN
    (180) procedure_call -> . ID LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (171) builtin_name -> . ABS
    (172) builtin_name -> . ASC
    (173) builtin_name -> . NUM
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    ID              shift and go to state 54
    EXIT            shift and go to state 35
    RESULT          shift and go to state 34
    RETURN          shift and go to state 8
    IF              shift and go to state 23
    DO              shift and go to state 2
    ABS             shift and go to state 7
    ASC             shift and go to state 13
    NUM             shift and go to state 42
    UPPER           shift and go to state 22
    LOWER           shift and go to state 41
    LENGTH          shift and go to state 27
    READ            shift and go to state 10
    PRINT           shift and go to state 37

    action_statement_list          shift and go to state 261
    location                       shift and go to state 38
    result_action                  shift and go to state 11
    call_action                    shift and go to state 25
    array_element                  shift and go to state 19
    action                         shift and go to state 26
    return_action                  shift and go to state 5
    do_action                      shift and go to state 6
    builtin_call                   shift and go to state 9
    bracketed_action               shift and go to state 3
    procedure_call                 shift and go to state 28
    array_slice                    shift and go to state 18
    action_statement               shift and go to state 227
    if_action                      shift and go to state 24
    array_location                 shift and go to state 31
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 17
    dereferenced_reference         shift and go to state 30
    assignment_action              shift and go to state 39
    builtin_name                   shift and go to state 12
    exit_action                    shift and go to state 43
    identifier                     shift and go to state 44

state 225

    (158) if_action -> IF expression then_clause else_clause . FI

    FI              shift and go to state 262


state 226

    (160) then_clause -> THEN action_statement_list .

    ELSE            reduce using rule 160 (then_clause -> THEN action_statement_list .)
    ELSIF           reduce using rule 160 (then_clause -> THEN action_statement_list .)
    SEMI            reduce using rule 160 (then_clause -> THEN action_statement_list .)
    FI              reduce using rule 160 (then_clause -> THEN action_statement_list .)


state 227

    (164) action_statement_list -> action_statement . action_statement_nullable
    (165) action_statement_nullable -> . action_statement action_statement_nullable
    (166) action_statement_nullable -> . empty
    (142) action_statement -> . identifier COLON action SEMI
    (143) action_statement -> . action SEMI
    (206) empty -> .
    (23) identifier -> . ID
    (144) action -> . bracketed_action
    (145) action -> . assignment_action
    (146) action -> . call_action
    (147) action -> . exit_action
    (148) action -> . result_action
    (149) action -> . return_action
    (150) bracketed_action -> . if_action
    (151) bracketed_action -> . do_action
    (152) assignment_action -> . array_location assigning_operator expression
    (167) call_action -> . procedure_call
    (168) call_action -> . builtin_call
    (183) exit_action -> . EXIT label_id
    (188) result_action -> . RESULT expression
    (185) return_action -> . RETURN result
    (158) if_action -> . IF expression then_clause else_clause FI
    (159) if_action -> . IF expression then_clause
    (189) do_action -> . DO control_part SEMI action_statement_nullable OD
    (190) do_action -> . DO action_statement_nullable OD
    (82) array_location -> . location
    (179) procedure_call -> . ID LPAREN parameter_list RPAREN
    (180) procedure_call -> . ID LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (171) builtin_name -> . ABS
    (172) builtin_name -> . ASC
    (173) builtin_name -> . NUM
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    ELSE            reduce using rule 206 (empty -> .)
    ELSIF           reduce using rule 206 (empty -> .)
    SEMI            reduce using rule 206 (empty -> .)
    FI              reduce using rule 206 (empty -> .)
    ID              shift and go to state 54
    EXIT            shift and go to state 35
    RESULT          shift and go to state 34
    RETURN          shift and go to state 8
    IF              shift and go to state 23
    DO              shift and go to state 2
    ABS             shift and go to state 7
    ASC             shift and go to state 13
    NUM             shift and go to state 42
    UPPER           shift and go to state 22
    LOWER           shift and go to state 41
    LENGTH          shift and go to state 27
    READ            shift and go to state 10
    PRINT           shift and go to state 37

    action_statement               shift and go to state 46
    location                       shift and go to state 38
    result_action                  shift and go to state 11
    call_action                    shift and go to state 25
    array_element                  shift and go to state 19
    action                         shift and go to state 26
    return_action                  shift and go to state 5
    empty                          shift and go to state 52
    do_action                      shift and go to state 6
    builtin_call                   shift and go to state 9
    bracketed_action               shift and go to state 3
    procedure_call                 shift and go to state 28
    builtin_name                   shift and go to state 12
    if_action                      shift and go to state 24
    array_location                 shift and go to state 31
    action_statement_nullable      shift and go to state 263
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 17
    dereferenced_reference         shift and go to state 30
    assignment_action              shift and go to state 39
    array_slice                    shift and go to state 18
    exit_action                    shift and go to state 43
    identifier                     shift and go to state 44

state 228

    (51) discrete_range_mode -> discrete_mode LPAREN . literal_range RPAREN
    (52) literal_range -> . lower_bound COLON upper_bound
    (53) lower_bound -> . expression
    (83) expression -> . operand0
    (84) expression -> . conditional_expression
    (92) operand0 -> . operand1
    (93) operand0 -> . operand0 operator1 operand1
    (86) conditional_expression -> . IF expression then_expression else_expression FI
    (87) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (94) operand1 -> . operand2
    (95) operand1 -> . operand1 operator2 operand2
    (96) operand2 -> . operand3
    (97) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (98) operand3 -> . monadic_operator operand4
    (99) operand3 -> . operand4
    (106) monadic_operator -> . MINUS
    (107) monadic_operator -> . NOT
    (100) operand4 -> . array_location
    (101) operand4 -> . referenced_location
    (102) operand4 -> . primitive_value
    (82) array_location -> . location
    (108) referenced_location -> . ARROW array_location
    (125) primitive_value -> . literal
    (126) primitive_value -> . value_array_element
    (127) primitive_value -> . value_array_slice
    (128) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (129) literal -> . integer_literal
    (130) literal -> . boolean_literal
    (131) literal -> . character_literal
    (132) literal -> . empty_literal
    (133) literal -> . character_string_literal
    (134) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (135) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (136) integer_literal -> . ICONST
    (137) boolean_literal -> . TRUE
    (138) boolean_literal -> . FALSE
    (139) character_literal -> . CCONST
    (140) empty_literal -> . NULL
    (141) character_string_literal -> . SCONST

    IF              shift and go to state 76
    MINUS           shift and go to state 79
    NOT             shift and go to state 65
    ARROW           shift and go to state 62
    LPAREN          shift and go to state 70
    ID              shift and go to state 56
    ICONST          shift and go to state 83
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    CCONST          shift and go to state 89
    NULL            shift and go to state 66
    SCONST          shift and go to state 77

    location                       shift and go to state 38
    operand0                       shift and go to state 68
    conditional_expression         shift and go to state 60
    parenthesized_expression       shift and go to state 80
    monadic_operator               shift and go to state 63
    literal_range                  shift and go to state 264
    boolean_literal                shift and go to state 64
    character_literal              shift and go to state 67
    array_slice                    shift and go to state 18
    integer_literal                shift and go to state 61
    character_string_literal       shift and go to state 84
    operand1                       shift and go to state 85
    array_location                 shift and go to state 86
    referenced_location            shift and go to state 87
    value_array_slice              shift and go to state 88
    string_element                 shift and go to state 33
    primitive_value                shift and go to state 69
    operand2                       shift and go to state 90
    literal                        shift and go to state 71
    lower_bound                    shift and go to state 266
    string_slice                   shift and go to state 17
    dereferenced_reference         shift and go to state 30
    value_array_element            shift and go to state 72
    empty_literal                  shift and go to state 78
    array_element                  shift and go to state 19
    operand4                       shift and go to state 73
    expression                     shift and go to state 265
    identifier                     shift and go to state 92
    operand3                       shift and go to state 93

state 229

    (60) array_mode -> ARRAY LBRACKET . index_mode_list RBRACKET element_mode
    (61) index_mode_list -> . index_mode
    (62) index_mode_list -> . index_mode COMMA index_mode_list
    (63) index_mode -> . discrete_mode
    (64) index_mode -> . literal_range
    (42) discrete_mode -> . integer_mode
    (43) discrete_mode -> . boolean_mode
    (44) discrete_mode -> . character_mode
    (45) discrete_mode -> . discrete_range_mode
    (52) literal_range -> . lower_bound COLON upper_bound
    (47) integer_mode -> . INT
    (48) boolean_mode -> . BOOL
    (49) character_mode -> . CHAR
    (50) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (51) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (53) lower_bound -> . expression
    (46) discrete_mode_name -> . identifier
    (83) expression -> . operand0
    (84) expression -> . conditional_expression
    (23) identifier -> . ID
    (92) operand0 -> . operand1
    (93) operand0 -> . operand0 operator1 operand1
    (86) conditional_expression -> . IF expression then_expression else_expression FI
    (87) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (94) operand1 -> . operand2
    (95) operand1 -> . operand1 operator2 operand2
    (96) operand2 -> . operand3
    (97) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (98) operand3 -> . monadic_operator operand4
    (99) operand3 -> . operand4
    (106) monadic_operator -> . MINUS
    (107) monadic_operator -> . NOT
    (100) operand4 -> . array_location
    (101) operand4 -> . referenced_location
    (102) operand4 -> . primitive_value
    (82) array_location -> . location
    (108) referenced_location -> . ARROW array_location
    (125) primitive_value -> . literal
    (126) primitive_value -> . value_array_element
    (127) primitive_value -> . value_array_slice
    (128) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (129) literal -> . integer_literal
    (130) literal -> . boolean_literal
    (131) literal -> . character_literal
    (132) literal -> . empty_literal
    (133) literal -> . character_string_literal
    (134) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (135) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (136) integer_literal -> . ICONST
    (137) boolean_literal -> . TRUE
    (138) boolean_literal -> . FALSE
    (139) character_literal -> . CCONST
    (140) empty_literal -> . NULL
    (141) character_string_literal -> . SCONST

    INT             shift and go to state 183
    BOOL            shift and go to state 172
    CHAR            shift and go to state 168
    ID              shift and go to state 56
    IF              shift and go to state 76
    MINUS           shift and go to state 79
    NOT             shift and go to state 65
    ARROW           shift and go to state 62
    LPAREN          shift and go to state 70
    ICONST          shift and go to state 83
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    CCONST          shift and go to state 89
    NULL            shift and go to state 66
    SCONST          shift and go to state 77

    discrete_mode                  shift and go to state 267
    discrete_mode_name             shift and go to state 173
    conditional_expression         shift and go to state 60
    integer_literal                shift and go to state 61
    monadic_operator               shift and go to state 63
    index_mode_list                shift and go to state 270
    literal_range                  shift and go to state 268
    boolean_literal                shift and go to state 64
    location                       shift and go to state 38
    discrete_range_mode            shift and go to state 174
    empty_literal                  shift and go to state 78
    array_element                  shift and go to state 19
    character_literal              shift and go to state 67
    boolean_mode                   shift and go to state 177
    primitive_value                shift and go to state 69
    literal                        shift and go to state 71
    string_slice                   shift and go to state 17
    array_slice                    shift and go to state 18
    value_array_element            shift and go to state 72
    integer_mode                   shift and go to state 181
    expression                     shift and go to state 265
    character_mode                 shift and go to state 169
    operand4                       shift and go to state 73
    operand0                       shift and go to state 68
    index_mode                     shift and go to state 269
    parenthesized_expression       shift and go to state 80
    dereferenced_reference         shift and go to state 30
    character_string_literal       shift and go to state 84
    operand1                       shift and go to state 85
    array_location                 shift and go to state 86
    referenced_location            shift and go to state 87
    value_array_slice              shift and go to state 88
    string_element                 shift and go to state 33
    operand2                       shift and go to state 90
    lower_bound                    shift and go to state 266
    identifier                     shift and go to state 271
    operand3                       shift and go to state 93

state 230

    (50) discrete_range_mode -> discrete_mode_name LPAREN . literal_range RPAREN
    (52) literal_range -> . lower_bound COLON upper_bound
    (53) lower_bound -> . expression
    (83) expression -> . operand0
    (84) expression -> . conditional_expression
    (92) operand0 -> . operand1
    (93) operand0 -> . operand0 operator1 operand1
    (86) conditional_expression -> . IF expression then_expression else_expression FI
    (87) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (94) operand1 -> . operand2
    (95) operand1 -> . operand1 operator2 operand2
    (96) operand2 -> . operand3
    (97) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (98) operand3 -> . monadic_operator operand4
    (99) operand3 -> . operand4
    (106) monadic_operator -> . MINUS
    (107) monadic_operator -> . NOT
    (100) operand4 -> . array_location
    (101) operand4 -> . referenced_location
    (102) operand4 -> . primitive_value
    (82) array_location -> . location
    (108) referenced_location -> . ARROW array_location
    (125) primitive_value -> . literal
    (126) primitive_value -> . value_array_element
    (127) primitive_value -> . value_array_slice
    (128) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (129) literal -> . integer_literal
    (130) literal -> . boolean_literal
    (131) literal -> . character_literal
    (132) literal -> . empty_literal
    (133) literal -> . character_string_literal
    (134) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (135) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (136) integer_literal -> . ICONST
    (137) boolean_literal -> . TRUE
    (138) boolean_literal -> . FALSE
    (139) character_literal -> . CCONST
    (140) empty_literal -> . NULL
    (141) character_string_literal -> . SCONST

    IF              shift and go to state 76
    MINUS           shift and go to state 79
    NOT             shift and go to state 65
    ARROW           shift and go to state 62
    LPAREN          shift and go to state 70
    ID              shift and go to state 56
    ICONST          shift and go to state 83
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    CCONST          shift and go to state 89
    NULL            shift and go to state 66
    SCONST          shift and go to state 77

    integer_literal                shift and go to state 61
    operand0                       shift and go to state 68
    conditional_expression         shift and go to state 60
    parenthesized_expression       shift and go to state 80
    monadic_operator               shift and go to state 63
    literal_range                  shift and go to state 272
    boolean_literal                shift and go to state 64
    character_literal              shift and go to state 67
    location                       shift and go to state 38
    array_slice                    shift and go to state 18
    character_string_literal       shift and go to state 84
    operand1                       shift and go to state 85
    array_location                 shift and go to state 86
    referenced_location            shift and go to state 87
    value_array_slice              shift and go to state 88
    string_element                 shift and go to state 33
    primitive_value                shift and go to state 69
    operand2                       shift and go to state 90
    literal                        shift and go to state 71
    lower_bound                    shift and go to state 266
    string_slice                   shift and go to state 17
    dereferenced_reference         shift and go to state 30
    value_array_element            shift and go to state 72
    empty_literal                  shift and go to state 78
    array_element                  shift and go to state 19
    operand4                       shift and go to state 73
    expression                     shift and go to state 265
    identifier                     shift and go to state 92
    operand3                       shift and go to state 93

state 231

    (55) reference_mode -> REF mode .

    ASSIGN          reduce using rule 55 (reference_mode -> REF mode .)
    COMMA           reduce using rule 55 (reference_mode -> REF mode .)
    SEMI            reduce using rule 55 (reference_mode -> REF mode .)
    LOC             reduce using rule 55 (reference_mode -> REF mode .)
    RPAREN          reduce using rule 55 (reference_mode -> REF mode .)


state 232

    (58) string_mode -> CHARS LBRACKET . string_length RBRACKET
    (59) string_length -> . integer_literal
    (136) integer_literal -> . ICONST

    ICONST          shift and go to state 83

    integer_literal                shift and go to state 273
    string_length                  shift and go to state 274

state 233

    (18) declaration -> identifier_list mode initialization .

    COMMA           reduce using rule 18 (declaration -> identifier_list mode initialization .)
    SEMI            reduce using rule 18 (declaration -> identifier_list mode initialization .)


state 234

    (20) initialization -> ASSIGN . expression
    (83) expression -> . operand0
    (84) expression -> . conditional_expression
    (92) operand0 -> . operand1
    (93) operand0 -> . operand0 operator1 operand1
    (86) conditional_expression -> . IF expression then_expression else_expression FI
    (87) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (94) operand1 -> . operand2
    (95) operand1 -> . operand1 operator2 operand2
    (96) operand2 -> . operand3
    (97) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (98) operand3 -> . monadic_operator operand4
    (99) operand3 -> . operand4
    (106) monadic_operator -> . MINUS
    (107) monadic_operator -> . NOT
    (100) operand4 -> . array_location
    (101) operand4 -> . referenced_location
    (102) operand4 -> . primitive_value
    (82) array_location -> . location
    (108) referenced_location -> . ARROW array_location
    (125) primitive_value -> . literal
    (126) primitive_value -> . value_array_element
    (127) primitive_value -> . value_array_slice
    (128) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (129) literal -> . integer_literal
    (130) literal -> . boolean_literal
    (131) literal -> . character_literal
    (132) literal -> . empty_literal
    (133) literal -> . character_string_literal
    (134) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (135) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (136) integer_literal -> . ICONST
    (137) boolean_literal -> . TRUE
    (138) boolean_literal -> . FALSE
    (139) character_literal -> . CCONST
    (140) empty_literal -> . NULL
    (141) character_string_literal -> . SCONST

    IF              shift and go to state 76
    MINUS           shift and go to state 79
    NOT             shift and go to state 65
    ARROW           shift and go to state 62
    LPAREN          shift and go to state 70
    ID              shift and go to state 56
    ICONST          shift and go to state 83
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    CCONST          shift and go to state 89
    NULL            shift and go to state 66
    SCONST          shift and go to state 77

    integer_literal                shift and go to state 61
    location                       shift and go to state 38
    operand0                       shift and go to state 68
    conditional_expression         shift and go to state 60
    parenthesized_expression       shift and go to state 80
    monadic_operator               shift and go to state 63
    array_element                  shift and go to state 19
    boolean_literal                shift and go to state 64
    array_slice                    shift and go to state 18
    character_string_literal       shift and go to state 84
    operand1                       shift and go to state 85
    array_location                 shift and go to state 86
    referenced_location            shift and go to state 87
    character_literal              shift and go to state 67
    value_array_slice              shift and go to state 88
    string_element                 shift and go to state 33
    primitive_value                shift and go to state 69
    operand2                       shift and go to state 90
    literal                        shift and go to state 71
    string_slice                   shift and go to state 17
    dereferenced_reference         shift and go to state 30
    value_array_element            shift and go to state 72
    empty_literal                  shift and go to state 78
    operand4                       shift and go to state 73
    expression                     shift and go to state 275
    identifier                     shift and go to state 92
    operand3                       shift and go to state 93

state 235

    (17) declaration_list -> declaration COMMA declaration_list .

    SEMI            reduce using rule 17 (declaration_list -> declaration COMMA declaration_list .)


state 236

    (78) array_element -> array_location LBRACKET expression_list RBRACKET .

    ARROW           reduce using rule 78 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    LBRACKET        reduce using rule 78 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    TIMES           reduce using rule 78 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    DIVIDE          reduce using rule 78 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    MODULO          reduce using rule 78 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    PLUS            reduce using rule 78 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    MINUS           reduce using rule 78 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    CONCAT          reduce using rule 78 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    AND             reduce using rule 78 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    OR              reduce using rule 78 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    EQUAL           reduce using rule 78 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    NOTEQ           reduce using rule 78 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    GREATER         reduce using rule 78 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    GTEQUAL         reduce using rule 78 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    LESS            reduce using rule 78 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    LTEQUAL         reduce using rule 78 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    IN              reduce using rule 78 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    ELSE            reduce using rule 78 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    ELSIF           reduce using rule 78 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    RPAREN          reduce using rule 78 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    COLON           reduce using rule 78 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    ASSIGN          reduce using rule 78 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    RBRACKET        reduce using rule 78 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    SEMI            reduce using rule 78 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    THEN            reduce using rule 78 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    COMMA           reduce using rule 78 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    DOWN            reduce using rule 78 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    BY              reduce using rule 78 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    TO              reduce using rule 78 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    FI              reduce using rule 78 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    WHILE           reduce using rule 78 (array_element -> array_location LBRACKET expression_list RBRACKET .)


state 237

    (80) expression_list -> expression COMMA . expression_list
    (79) expression_list -> . expression
    (80) expression_list -> . expression COMMA expression_list
    (83) expression -> . operand0
    (84) expression -> . conditional_expression
    (92) operand0 -> . operand1
    (93) operand0 -> . operand0 operator1 operand1
    (86) conditional_expression -> . IF expression then_expression else_expression FI
    (87) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (94) operand1 -> . operand2
    (95) operand1 -> . operand1 operator2 operand2
    (96) operand2 -> . operand3
    (97) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (98) operand3 -> . monadic_operator operand4
    (99) operand3 -> . operand4
    (106) monadic_operator -> . MINUS
    (107) monadic_operator -> . NOT
    (100) operand4 -> . array_location
    (101) operand4 -> . referenced_location
    (102) operand4 -> . primitive_value
    (82) array_location -> . location
    (108) referenced_location -> . ARROW array_location
    (125) primitive_value -> . literal
    (126) primitive_value -> . value_array_element
    (127) primitive_value -> . value_array_slice
    (128) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (129) literal -> . integer_literal
    (130) literal -> . boolean_literal
    (131) literal -> . character_literal
    (132) literal -> . empty_literal
    (133) literal -> . character_string_literal
    (134) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (135) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (136) integer_literal -> . ICONST
    (137) boolean_literal -> . TRUE
    (138) boolean_literal -> . FALSE
    (139) character_literal -> . CCONST
    (140) empty_literal -> . NULL
    (141) character_string_literal -> . SCONST

    IF              shift and go to state 76
    MINUS           shift and go to state 79
    NOT             shift and go to state 65
    ARROW           shift and go to state 62
    LPAREN          shift and go to state 70
    ID              shift and go to state 56
    ICONST          shift and go to state 83
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    CCONST          shift and go to state 89
    NULL            shift and go to state 66
    SCONST          shift and go to state 77

    integer_literal                shift and go to state 61
    location                       shift and go to state 38
    operand0                       shift and go to state 68
    conditional_expression         shift and go to state 60
    parenthesized_expression       shift and go to state 80
    monadic_operator               shift and go to state 63
    array_element                  shift and go to state 19
    boolean_literal                shift and go to state 64
    array_slice                    shift and go to state 18
    character_string_literal       shift and go to state 84
    operand1                       shift and go to state 85
    array_location                 shift and go to state 86
    referenced_location            shift and go to state 87
    character_literal              shift and go to state 67
    value_array_slice              shift and go to state 88
    string_element                 shift and go to state 33
    primitive_value                shift and go to state 69
    operand2                       shift and go to state 90
    literal                        shift and go to state 71
    string_slice                   shift and go to state 17
    dereferenced_reference         shift and go to state 30
    expression_list                shift and go to state 276
    value_array_element            shift and go to state 72
    empty_literal                  shift and go to state 78
    operand4                       shift and go to state 73
    expression                     shift and go to state 277
    identifier                     shift and go to state 92
    operand3                       shift and go to state 93

state 238

    (81) array_slice -> array_location LBRACKET lower_bound COLON . upper_bound RBRACKET
    (54) upper_bound -> . expression
    (83) expression -> . operand0
    (84) expression -> . conditional_expression
    (92) operand0 -> . operand1
    (93) operand0 -> . operand0 operator1 operand1
    (86) conditional_expression -> . IF expression then_expression else_expression FI
    (87) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (94) operand1 -> . operand2
    (95) operand1 -> . operand1 operator2 operand2
    (96) operand2 -> . operand3
    (97) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (98) operand3 -> . monadic_operator operand4
    (99) operand3 -> . operand4
    (106) monadic_operator -> . MINUS
    (107) monadic_operator -> . NOT
    (100) operand4 -> . array_location
    (101) operand4 -> . referenced_location
    (102) operand4 -> . primitive_value
    (82) array_location -> . location
    (108) referenced_location -> . ARROW array_location
    (125) primitive_value -> . literal
    (126) primitive_value -> . value_array_element
    (127) primitive_value -> . value_array_slice
    (128) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (129) literal -> . integer_literal
    (130) literal -> . boolean_literal
    (131) literal -> . character_literal
    (132) literal -> . empty_literal
    (133) literal -> . character_string_literal
    (134) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (135) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (136) integer_literal -> . ICONST
    (137) boolean_literal -> . TRUE
    (138) boolean_literal -> . FALSE
    (139) character_literal -> . CCONST
    (140) empty_literal -> . NULL
    (141) character_string_literal -> . SCONST

    IF              shift and go to state 76
    MINUS           shift and go to state 79
    NOT             shift and go to state 65
    ARROW           shift and go to state 62
    LPAREN          shift and go to state 70
    ID              shift and go to state 56
    ICONST          shift and go to state 83
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    CCONST          shift and go to state 89
    NULL            shift and go to state 66
    SCONST          shift and go to state 77

    integer_literal                shift and go to state 61
    location                       shift and go to state 38
    operand0                       shift and go to state 68
    conditional_expression         shift and go to state 60
    parenthesized_expression       shift and go to state 80
    monadic_operator               shift and go to state 63
    array_element                  shift and go to state 19
    boolean_literal                shift and go to state 64
    character_literal              shift and go to state 67
    array_slice                    shift and go to state 18
    character_string_literal       shift and go to state 84
    operand1                       shift and go to state 85
    array_location                 shift and go to state 86
    referenced_location            shift and go to state 87
    upper_bound                    shift and go to state 279
    value_array_slice              shift and go to state 88
    string_element                 shift and go to state 33
    primitive_value                shift and go to state 69
    operand2                       shift and go to state 90
    literal                        shift and go to state 71
    string_slice                   shift and go to state 17
    dereferenced_reference         shift and go to state 30
    value_array_element            shift and go to state 72
    empty_literal                  shift and go to state 78
    operand4                       shift and go to state 73
    expression                     shift and go to state 278
    identifier                     shift and go to state 92
    operand3                       shift and go to state 93

state 239

    (29) procedure_definition -> PROC LPAREN . formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI
    (30) procedure_definition -> PROC LPAREN . formal_parameter_list RPAREN SEMI statement_nullable END SEMI
    (31) formal_parameter_list -> . formal_parameter
    (32) formal_parameter_list -> . formal_parameter COMMA formal_parameter_list
    (33) formal_parameter -> . identifier_list mode LOC
    (34) formal_parameter -> . identifier_list mode
    (21) identifier_list -> . identifier
    (22) identifier_list -> . identifier COMMA identifier_list
    (23) identifier -> . ID

    ID              shift and go to state 56

    formal_parameter               shift and go to state 282
    formal_parameter_list          shift and go to state 281
    identifier                     shift and go to state 59
    identifier_list                shift and go to state 280

state 240

    (179) procedure_call -> ID LPAREN parameter_list RPAREN .

    SEMI            reduce using rule 179 (procedure_call -> ID LPAREN parameter_list RPAREN .)


state 241

    (12) synonym_list -> synonym_definition COMMA synonym_list .

    SEMI            reduce using rule 12 (synonym_list -> synonym_definition COMMA synonym_list .)


state 242

    (14) synonym_definition -> identifier_list ASSIGN expression .

    COMMA           reduce using rule 14 (synonym_definition -> identifier_list ASSIGN expression .)
    SEMI            reduce using rule 14 (synonym_definition -> identifier_list ASSIGN expression .)


state 243

    (13) synonym_definition -> identifier_list mode ASSIGN . expression
    (83) expression -> . operand0
    (84) expression -> . conditional_expression
    (92) operand0 -> . operand1
    (93) operand0 -> . operand0 operator1 operand1
    (86) conditional_expression -> . IF expression then_expression else_expression FI
    (87) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (94) operand1 -> . operand2
    (95) operand1 -> . operand1 operator2 operand2
    (96) operand2 -> . operand3
    (97) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (98) operand3 -> . monadic_operator operand4
    (99) operand3 -> . operand4
    (106) monadic_operator -> . MINUS
    (107) monadic_operator -> . NOT
    (100) operand4 -> . array_location
    (101) operand4 -> . referenced_location
    (102) operand4 -> . primitive_value
    (82) array_location -> . location
    (108) referenced_location -> . ARROW array_location
    (125) primitive_value -> . literal
    (126) primitive_value -> . value_array_element
    (127) primitive_value -> . value_array_slice
    (128) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (129) literal -> . integer_literal
    (130) literal -> . boolean_literal
    (131) literal -> . character_literal
    (132) literal -> . empty_literal
    (133) literal -> . character_string_literal
    (134) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (135) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (136) integer_literal -> . ICONST
    (137) boolean_literal -> . TRUE
    (138) boolean_literal -> . FALSE
    (139) character_literal -> . CCONST
    (140) empty_literal -> . NULL
    (141) character_string_literal -> . SCONST

    IF              shift and go to state 76
    MINUS           shift and go to state 79
    NOT             shift and go to state 65
    ARROW           shift and go to state 62
    LPAREN          shift and go to state 70
    ID              shift and go to state 56
    ICONST          shift and go to state 83
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    CCONST          shift and go to state 89
    NULL            shift and go to state 66
    SCONST          shift and go to state 77

    integer_literal                shift and go to state 61
    location                       shift and go to state 38
    operand0                       shift and go to state 68
    conditional_expression         shift and go to state 60
    parenthesized_expression       shift and go to state 80
    monadic_operator               shift and go to state 63
    array_element                  shift and go to state 19
    boolean_literal                shift and go to state 64
    array_slice                    shift and go to state 18
    character_string_literal       shift and go to state 84
    operand1                       shift and go to state 85
    array_location                 shift and go to state 86
    referenced_location            shift and go to state 87
    character_literal              shift and go to state 67
    value_array_slice              shift and go to state 88
    string_element                 shift and go to state 33
    primitive_value                shift and go to state 69
    operand2                       shift and go to state 90
    literal                        shift and go to state 71
    string_slice                   shift and go to state 17
    dereferenced_reference         shift and go to state 30
    value_array_element            shift and go to state 72
    empty_literal                  shift and go to state 78
    operand4                       shift and go to state 73
    expression                     shift and go to state 283
    identifier                     shift and go to state 92
    operand3                       shift and go to state 93

state 244

    (142) action_statement -> identifier COLON action SEMI .

    ID              reduce using rule 142 (action_statement -> identifier COLON action SEMI .)
    EXIT            reduce using rule 142 (action_statement -> identifier COLON action SEMI .)
    RESULT          reduce using rule 142 (action_statement -> identifier COLON action SEMI .)
    RETURN          reduce using rule 142 (action_statement -> identifier COLON action SEMI .)
    IF              reduce using rule 142 (action_statement -> identifier COLON action SEMI .)
    DO              reduce using rule 142 (action_statement -> identifier COLON action SEMI .)
    ABS             reduce using rule 142 (action_statement -> identifier COLON action SEMI .)
    ASC             reduce using rule 142 (action_statement -> identifier COLON action SEMI .)
    NUM             reduce using rule 142 (action_statement -> identifier COLON action SEMI .)
    UPPER           reduce using rule 142 (action_statement -> identifier COLON action SEMI .)
    LOWER           reduce using rule 142 (action_statement -> identifier COLON action SEMI .)
    LENGTH          reduce using rule 142 (action_statement -> identifier COLON action SEMI .)
    READ            reduce using rule 142 (action_statement -> identifier COLON action SEMI .)
    PRINT           reduce using rule 142 (action_statement -> identifier COLON action SEMI .)
    OD              reduce using rule 142 (action_statement -> identifier COLON action SEMI .)
    FI              reduce using rule 142 (action_statement -> identifier COLON action SEMI .)
    ELSE            reduce using rule 142 (action_statement -> identifier COLON action SEMI .)
    ELSIF           reduce using rule 142 (action_statement -> identifier COLON action SEMI .)
    SEMI            reduce using rule 142 (action_statement -> identifier COLON action SEMI .)
    DCL             reduce using rule 142 (action_statement -> identifier COLON action SEMI .)
    SYN             reduce using rule 142 (action_statement -> identifier COLON action SEMI .)
    TYPE            reduce using rule 142 (action_statement -> identifier COLON action SEMI .)
    $end            reduce using rule 142 (action_statement -> identifier COLON action SEMI .)
    END             reduce using rule 142 (action_statement -> identifier COLON action SEMI .)


state 245

    (75) string_slice -> identifier LBRACKET left_element COLON . right_element RBRACKET
    (77) right_element -> . expression
    (83) expression -> . operand0
    (84) expression -> . conditional_expression
    (92) operand0 -> . operand1
    (93) operand0 -> . operand0 operator1 operand1
    (86) conditional_expression -> . IF expression then_expression else_expression FI
    (87) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (94) operand1 -> . operand2
    (95) operand1 -> . operand1 operator2 operand2
    (96) operand2 -> . operand3
    (97) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (98) operand3 -> . monadic_operator operand4
    (99) operand3 -> . operand4
    (106) monadic_operator -> . MINUS
    (107) monadic_operator -> . NOT
    (100) operand4 -> . array_location
    (101) operand4 -> . referenced_location
    (102) operand4 -> . primitive_value
    (82) array_location -> . location
    (108) referenced_location -> . ARROW array_location
    (125) primitive_value -> . literal
    (126) primitive_value -> . value_array_element
    (127) primitive_value -> . value_array_slice
    (128) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (129) literal -> . integer_literal
    (130) literal -> . boolean_literal
    (131) literal -> . character_literal
    (132) literal -> . empty_literal
    (133) literal -> . character_string_literal
    (134) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (135) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (136) integer_literal -> . ICONST
    (137) boolean_literal -> . TRUE
    (138) boolean_literal -> . FALSE
    (139) character_literal -> . CCONST
    (140) empty_literal -> . NULL
    (141) character_string_literal -> . SCONST

    IF              shift and go to state 76
    MINUS           shift and go to state 79
    NOT             shift and go to state 65
    ARROW           shift and go to state 62
    LPAREN          shift and go to state 70
    ID              shift and go to state 56
    ICONST          shift and go to state 83
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    CCONST          shift and go to state 89
    NULL            shift and go to state 66
    SCONST          shift and go to state 77

    integer_literal                shift and go to state 61
    right_element                  shift and go to state 284
    operand0                       shift and go to state 68
    conditional_expression         shift and go to state 60
    parenthesized_expression       shift and go to state 80
    monadic_operator               shift and go to state 63
    array_element                  shift and go to state 19
    boolean_literal                shift and go to state 64
    location                       shift and go to state 38
    value_array_slice              shift and go to state 88
    array_slice                    shift and go to state 18
    character_string_literal       shift and go to state 84
    operand1                       shift and go to state 85
    array_location                 shift and go to state 86
    referenced_location            shift and go to state 87
    character_literal              shift and go to state 67
    string_element                 shift and go to state 33
    primitive_value                shift and go to state 69
    operand2                       shift and go to state 90
    literal                        shift and go to state 71
    string_slice                   shift and go to state 17
    dereferenced_reference         shift and go to state 30
    value_array_element            shift and go to state 72
    empty_literal                  shift and go to state 78
    operand4                       shift and go to state 73
    expression                     shift and go to state 285
    identifier                     shift and go to state 92
    operand3                       shift and go to state 93

state 246

    (73) string_element -> identifier LBRACKET start_element LBRACKET .

    ARROW           reduce using rule 73 (string_element -> identifier LBRACKET start_element LBRACKET .)
    LBRACKET        reduce using rule 73 (string_element -> identifier LBRACKET start_element LBRACKET .)
    TIMES           reduce using rule 73 (string_element -> identifier LBRACKET start_element LBRACKET .)
    DIVIDE          reduce using rule 73 (string_element -> identifier LBRACKET start_element LBRACKET .)
    MODULO          reduce using rule 73 (string_element -> identifier LBRACKET start_element LBRACKET .)
    PLUS            reduce using rule 73 (string_element -> identifier LBRACKET start_element LBRACKET .)
    MINUS           reduce using rule 73 (string_element -> identifier LBRACKET start_element LBRACKET .)
    CONCAT          reduce using rule 73 (string_element -> identifier LBRACKET start_element LBRACKET .)
    AND             reduce using rule 73 (string_element -> identifier LBRACKET start_element LBRACKET .)
    OR              reduce using rule 73 (string_element -> identifier LBRACKET start_element LBRACKET .)
    EQUAL           reduce using rule 73 (string_element -> identifier LBRACKET start_element LBRACKET .)
    NOTEQ           reduce using rule 73 (string_element -> identifier LBRACKET start_element LBRACKET .)
    GREATER         reduce using rule 73 (string_element -> identifier LBRACKET start_element LBRACKET .)
    GTEQUAL         reduce using rule 73 (string_element -> identifier LBRACKET start_element LBRACKET .)
    LESS            reduce using rule 73 (string_element -> identifier LBRACKET start_element LBRACKET .)
    LTEQUAL         reduce using rule 73 (string_element -> identifier LBRACKET start_element LBRACKET .)
    IN              reduce using rule 73 (string_element -> identifier LBRACKET start_element LBRACKET .)
    COMMA           reduce using rule 73 (string_element -> identifier LBRACKET start_element LBRACKET .)
    RBRACKET        reduce using rule 73 (string_element -> identifier LBRACKET start_element LBRACKET .)
    COLON           reduce using rule 73 (string_element -> identifier LBRACKET start_element LBRACKET .)
    SEMI            reduce using rule 73 (string_element -> identifier LBRACKET start_element LBRACKET .)
    THEN            reduce using rule 73 (string_element -> identifier LBRACKET start_element LBRACKET .)
    RPAREN          reduce using rule 73 (string_element -> identifier LBRACKET start_element LBRACKET .)
    DOWN            reduce using rule 73 (string_element -> identifier LBRACKET start_element LBRACKET .)
    BY              reduce using rule 73 (string_element -> identifier LBRACKET start_element LBRACKET .)
    TO              reduce using rule 73 (string_element -> identifier LBRACKET start_element LBRACKET .)
    ELSE            reduce using rule 73 (string_element -> identifier LBRACKET start_element LBRACKET .)
    ELSIF           reduce using rule 73 (string_element -> identifier LBRACKET start_element LBRACKET .)
    FI              reduce using rule 73 (string_element -> identifier LBRACKET start_element LBRACKET .)
    WHILE           reduce using rule 73 (string_element -> identifier LBRACKET start_element LBRACKET .)
    ASSIGN          reduce using rule 73 (string_element -> identifier LBRACKET start_element LBRACKET .)


state 247

    (189) do_action -> DO control_part SEMI action_statement_nullable OD .

    SEMI            reduce using rule 189 (do_action -> DO control_part SEMI action_statement_nullable OD .)


state 248

    (197) step_enumeration -> identifier ASSIGN expression . step_value DOWN end_value
    (198) step_enumeration -> identifier ASSIGN expression . step_value end_value
    (199) step_enumeration -> identifier ASSIGN expression . DOWN end_value
    (200) step_enumeration -> identifier ASSIGN expression . end_value
    (201) step_value -> . BY expression
    (202) end_value -> . TO expression

    DOWN            shift and go to state 290
    BY              shift and go to state 287
    TO              shift and go to state 286

    end_value                      shift and go to state 288
    step_value                     shift and go to state 289

state 249

    (204) range_enumeration -> identifier IN discrete_mode .
    (51) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    WHILE           reduce using rule 204 (range_enumeration -> identifier IN discrete_mode .)
    SEMI            reduce using rule 204 (range_enumeration -> identifier IN discrete_mode .)
    LPAREN          shift and go to state 228


state 250

    (46) discrete_mode_name -> identifier .

    LPAREN          reduce using rule 46 (discrete_mode_name -> identifier .)


state 251

    (203) range_enumeration -> identifier DOWN IN . discrete_mode
    (42) discrete_mode -> . integer_mode
    (43) discrete_mode -> . boolean_mode
    (44) discrete_mode -> . character_mode
    (45) discrete_mode -> . discrete_range_mode
    (47) integer_mode -> . INT
    (48) boolean_mode -> . BOOL
    (49) character_mode -> . CHAR
    (50) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (51) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (46) discrete_mode_name -> . identifier
    (23) identifier -> . ID

    INT             shift and go to state 183
    BOOL            shift and go to state 172
    CHAR            shift and go to state 168
    ID              shift and go to state 56

    discrete_mode                  shift and go to state 291
    character_mode                 shift and go to state 169
    boolean_mode                   shift and go to state 177
    integer_mode                   shift and go to state 181
    discrete_mode_name             shift and go to state 173
    identifier                     shift and go to state 250
    discrete_range_mode            shift and go to state 174

state 252

    (134) value_array_element -> primitive_value LBRACKET expression_list RBRACKET .

    LBRACKET        reduce using rule 134 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    TIMES           reduce using rule 134 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    DIVIDE          reduce using rule 134 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    MODULO          reduce using rule 134 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    PLUS            reduce using rule 134 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    MINUS           reduce using rule 134 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    CONCAT          reduce using rule 134 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    AND             reduce using rule 134 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    OR              reduce using rule 134 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    EQUAL           reduce using rule 134 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    NOTEQ           reduce using rule 134 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    GREATER         reduce using rule 134 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    GTEQUAL         reduce using rule 134 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    LESS            reduce using rule 134 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    LTEQUAL         reduce using rule 134 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    IN              reduce using rule 134 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    SEMI            reduce using rule 134 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    THEN            reduce using rule 134 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    RPAREN          reduce using rule 134 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    COMMA           reduce using rule 134 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    RBRACKET        reduce using rule 134 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    COLON           reduce using rule 134 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    DOWN            reduce using rule 134 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    BY              reduce using rule 134 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    TO              reduce using rule 134 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    ELSE            reduce using rule 134 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    ELSIF           reduce using rule 134 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    FI              reduce using rule 134 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    WHILE           reduce using rule 134 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)


state 253

    (135) value_array_slice -> primitive_value LBRACKET expression COLON . expression RBRACKET
    (83) expression -> . operand0
    (84) expression -> . conditional_expression
    (92) operand0 -> . operand1
    (93) operand0 -> . operand0 operator1 operand1
    (86) conditional_expression -> . IF expression then_expression else_expression FI
    (87) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (94) operand1 -> . operand2
    (95) operand1 -> . operand1 operator2 operand2
    (96) operand2 -> . operand3
    (97) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (98) operand3 -> . monadic_operator operand4
    (99) operand3 -> . operand4
    (106) monadic_operator -> . MINUS
    (107) monadic_operator -> . NOT
    (100) operand4 -> . array_location
    (101) operand4 -> . referenced_location
    (102) operand4 -> . primitive_value
    (82) array_location -> . location
    (108) referenced_location -> . ARROW array_location
    (125) primitive_value -> . literal
    (126) primitive_value -> . value_array_element
    (127) primitive_value -> . value_array_slice
    (128) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (129) literal -> . integer_literal
    (130) literal -> . boolean_literal
    (131) literal -> . character_literal
    (132) literal -> . empty_literal
    (133) literal -> . character_string_literal
    (134) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (135) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (136) integer_literal -> . ICONST
    (137) boolean_literal -> . TRUE
    (138) boolean_literal -> . FALSE
    (139) character_literal -> . CCONST
    (140) empty_literal -> . NULL
    (141) character_string_literal -> . SCONST

    IF              shift and go to state 76
    MINUS           shift and go to state 79
    NOT             shift and go to state 65
    ARROW           shift and go to state 62
    LPAREN          shift and go to state 70
    ID              shift and go to state 56
    ICONST          shift and go to state 83
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    CCONST          shift and go to state 89
    NULL            shift and go to state 66
    SCONST          shift and go to state 77

    integer_literal                shift and go to state 61
    location                       shift and go to state 38
    operand0                       shift and go to state 68
    conditional_expression         shift and go to state 60
    parenthesized_expression       shift and go to state 80
    monadic_operator               shift and go to state 63
    array_element                  shift and go to state 19
    boolean_literal                shift and go to state 64
    array_slice                    shift and go to state 18
    character_string_literal       shift and go to state 84
    operand1                       shift and go to state 85
    array_location                 shift and go to state 86
    referenced_location            shift and go to state 87
    character_literal              shift and go to state 67
    value_array_slice              shift and go to state 88
    string_element                 shift and go to state 33
    primitive_value                shift and go to state 69
    operand2                       shift and go to state 90
    literal                        shift and go to state 71
    string_slice                   shift and go to state 17
    dereferenced_reference         shift and go to state 30
    value_array_element            shift and go to state 72
    empty_literal                  shift and go to state 78
    operand4                       shift and go to state 73
    expression                     shift and go to state 292
    identifier                     shift and go to state 92
    operand3                       shift and go to state 93

state 254

    (88) then_expression -> THEN expression .

    ELSIF           reduce using rule 88 (then_expression -> THEN expression .)
    ELSE            reduce using rule 88 (then_expression -> THEN expression .)


state 255

    (90) elsif_expression -> ELSIF . expression then_expression
    (83) expression -> . operand0
    (84) expression -> . conditional_expression
    (92) operand0 -> . operand1
    (93) operand0 -> . operand0 operator1 operand1
    (86) conditional_expression -> . IF expression then_expression else_expression FI
    (87) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (94) operand1 -> . operand2
    (95) operand1 -> . operand1 operator2 operand2
    (96) operand2 -> . operand3
    (97) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (98) operand3 -> . monadic_operator operand4
    (99) operand3 -> . operand4
    (106) monadic_operator -> . MINUS
    (107) monadic_operator -> . NOT
    (100) operand4 -> . array_location
    (101) operand4 -> . referenced_location
    (102) operand4 -> . primitive_value
    (82) array_location -> . location
    (108) referenced_location -> . ARROW array_location
    (125) primitive_value -> . literal
    (126) primitive_value -> . value_array_element
    (127) primitive_value -> . value_array_slice
    (128) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (129) literal -> . integer_literal
    (130) literal -> . boolean_literal
    (131) literal -> . character_literal
    (132) literal -> . empty_literal
    (133) literal -> . character_string_literal
    (134) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (135) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (136) integer_literal -> . ICONST
    (137) boolean_literal -> . TRUE
    (138) boolean_literal -> . FALSE
    (139) character_literal -> . CCONST
    (140) empty_literal -> . NULL
    (141) character_string_literal -> . SCONST

    IF              shift and go to state 76
    MINUS           shift and go to state 79
    NOT             shift and go to state 65
    ARROW           shift and go to state 62
    LPAREN          shift and go to state 70
    ID              shift and go to state 56
    ICONST          shift and go to state 83
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    CCONST          shift and go to state 89
    NULL            shift and go to state 66
    SCONST          shift and go to state 77

    integer_literal                shift and go to state 61
    location                       shift and go to state 38
    operand0                       shift and go to state 68
    conditional_expression         shift and go to state 60
    parenthesized_expression       shift and go to state 80
    monadic_operator               shift and go to state 63
    array_element                  shift and go to state 19
    boolean_literal                shift and go to state 64
    array_slice                    shift and go to state 18
    character_string_literal       shift and go to state 84
    operand1                       shift and go to state 85
    array_location                 shift and go to state 86
    referenced_location            shift and go to state 87
    character_literal              shift and go to state 67
    value_array_slice              shift and go to state 88
    string_element                 shift and go to state 33
    primitive_value                shift and go to state 69
    operand2                       shift and go to state 90
    literal                        shift and go to state 71
    string_slice                   shift and go to state 17
    dereferenced_reference         shift and go to state 30
    value_array_element            shift and go to state 72
    empty_literal                  shift and go to state 78
    operand4                       shift and go to state 73
    expression                     shift and go to state 293
    identifier                     shift and go to state 92
    operand3                       shift and go to state 93

state 256

    (86) conditional_expression -> IF expression then_expression else_expression . FI

    FI              shift and go to state 294


state 257

    (89) else_expression -> ELSE . expression
    (83) expression -> . operand0
    (84) expression -> . conditional_expression
    (92) operand0 -> . operand1
    (93) operand0 -> . operand0 operator1 operand1
    (86) conditional_expression -> . IF expression then_expression else_expression FI
    (87) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (94) operand1 -> . operand2
    (95) operand1 -> . operand1 operator2 operand2
    (96) operand2 -> . operand3
    (97) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (98) operand3 -> . monadic_operator operand4
    (99) operand3 -> . operand4
    (106) monadic_operator -> . MINUS
    (107) monadic_operator -> . NOT
    (100) operand4 -> . array_location
    (101) operand4 -> . referenced_location
    (102) operand4 -> . primitive_value
    (82) array_location -> . location
    (108) referenced_location -> . ARROW array_location
    (125) primitive_value -> . literal
    (126) primitive_value -> . value_array_element
    (127) primitive_value -> . value_array_slice
    (128) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (129) literal -> . integer_literal
    (130) literal -> . boolean_literal
    (131) literal -> . character_literal
    (132) literal -> . empty_literal
    (133) literal -> . character_string_literal
    (134) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (135) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (136) integer_literal -> . ICONST
    (137) boolean_literal -> . TRUE
    (138) boolean_literal -> . FALSE
    (139) character_literal -> . CCONST
    (140) empty_literal -> . NULL
    (141) character_string_literal -> . SCONST

    IF              shift and go to state 76
    MINUS           shift and go to state 79
    NOT             shift and go to state 65
    ARROW           shift and go to state 62
    LPAREN          shift and go to state 70
    ID              shift and go to state 56
    ICONST          shift and go to state 83
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    CCONST          shift and go to state 89
    NULL            shift and go to state 66
    SCONST          shift and go to state 77

    integer_literal                shift and go to state 61
    location                       shift and go to state 38
    operand0                       shift and go to state 68
    conditional_expression         shift and go to state 60
    parenthesized_expression       shift and go to state 80
    monadic_operator               shift and go to state 63
    array_element                  shift and go to state 19
    boolean_literal                shift and go to state 64
    array_slice                    shift and go to state 18
    character_string_literal       shift and go to state 84
    operand1                       shift and go to state 85
    array_location                 shift and go to state 86
    referenced_location            shift and go to state 87
    character_literal              shift and go to state 67
    value_array_slice              shift and go to state 88
    string_element                 shift and go to state 33
    primitive_value                shift and go to state 69
    operand2                       shift and go to state 90
    literal                        shift and go to state 71
    string_slice                   shift and go to state 17
    dereferenced_reference         shift and go to state 30
    value_array_element            shift and go to state 72
    empty_literal                  shift and go to state 78
    operand4                       shift and go to state 73
    expression                     shift and go to state 295
    identifier                     shift and go to state 92
    operand3                       shift and go to state 93

state 258

    (87) conditional_expression -> IF expression then_expression elsif_expression . else_expression FI
    (91) elsif_expression -> elsif_expression . ELSIF expression then_expression
    (89) else_expression -> . ELSE expression

    ELSIF           shift and go to state 296
    ELSE            shift and go to state 257

    else_expression                shift and go to state 297

state 259

    (182) parameter_list -> expression COMMA parameter_list .

    RPAREN          reduce using rule 182 (parameter_list -> expression COMMA parameter_list .)


state 260

    (162) else_clause -> ELSIF expression . then_clause else_clause
    (163) else_clause -> ELSIF expression . then_clause
    (160) then_clause -> . THEN action_statement_list

    THEN            shift and go to state 166

    then_clause                    shift and go to state 298

state 261

    (161) else_clause -> ELSE action_statement_list .

    FI              reduce using rule 161 (else_clause -> ELSE action_statement_list .)


state 262

    (158) if_action -> IF expression then_clause else_clause FI .

    SEMI            reduce using rule 158 (if_action -> IF expression then_clause else_clause FI .)


state 263

    (164) action_statement_list -> action_statement action_statement_nullable .

    FI              reduce using rule 164 (action_statement_list -> action_statement action_statement_nullable .)
    ELSE            reduce using rule 164 (action_statement_list -> action_statement action_statement_nullable .)
    ELSIF           reduce using rule 164 (action_statement_list -> action_statement action_statement_nullable .)
    SEMI            reduce using rule 164 (action_statement_list -> action_statement action_statement_nullable .)


state 264

    (51) discrete_range_mode -> discrete_mode LPAREN literal_range . RPAREN

    RPAREN          shift and go to state 299


state 265

    (53) lower_bound -> expression .

    COLON           reduce using rule 53 (lower_bound -> expression .)


state 266

    (52) literal_range -> lower_bound . COLON upper_bound

    COLON           shift and go to state 300


state 267

    (63) index_mode -> discrete_mode .
    (51) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    COMMA           reduce using rule 63 (index_mode -> discrete_mode .)
    RBRACKET        reduce using rule 63 (index_mode -> discrete_mode .)
    LPAREN          shift and go to state 228


state 268

    (64) index_mode -> literal_range .

    COMMA           reduce using rule 64 (index_mode -> literal_range .)
    RBRACKET        reduce using rule 64 (index_mode -> literal_range .)


state 269

    (61) index_mode_list -> index_mode .
    (62) index_mode_list -> index_mode . COMMA index_mode_list

    RBRACKET        reduce using rule 61 (index_mode_list -> index_mode .)
    COMMA           shift and go to state 301


state 270

    (60) array_mode -> ARRAY LBRACKET index_mode_list . RBRACKET element_mode

    RBRACKET        shift and go to state 302


state 271

    (46) discrete_mode_name -> identifier .
    (66) location -> identifier .
    (73) string_element -> identifier . LBRACKET start_element LBRACKET
    (75) string_slice -> identifier . LBRACKET left_element COLON right_element RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    LPAREN          reduce using rule 46 (discrete_mode_name -> identifier .)
    ARROW           reduce using rule 66 (location -> identifier .)
    TIMES           reduce using rule 66 (location -> identifier .)
    DIVIDE          reduce using rule 66 (location -> identifier .)
    MODULO          reduce using rule 66 (location -> identifier .)
    PLUS            reduce using rule 66 (location -> identifier .)
    MINUS           reduce using rule 66 (location -> identifier .)
    CONCAT          reduce using rule 66 (location -> identifier .)
    AND             reduce using rule 66 (location -> identifier .)
    OR              reduce using rule 66 (location -> identifier .)
    EQUAL           reduce using rule 66 (location -> identifier .)
    NOTEQ           reduce using rule 66 (location -> identifier .)
    GREATER         reduce using rule 66 (location -> identifier .)
    GTEQUAL         reduce using rule 66 (location -> identifier .)
    LESS            reduce using rule 66 (location -> identifier .)
    LTEQUAL         reduce using rule 66 (location -> identifier .)
    IN              reduce using rule 66 (location -> identifier .)
    COLON           reduce using rule 66 (location -> identifier .)
    LBRACKET        shift and go to state 126

  ! LBRACKET        [ reduce using rule 66 (location -> identifier .) ]


state 272

    (50) discrete_range_mode -> discrete_mode_name LPAREN literal_range . RPAREN

    RPAREN          shift and go to state 303


state 273

    (59) string_length -> integer_literal .

    RBRACKET        reduce using rule 59 (string_length -> integer_literal .)


state 274

    (58) string_mode -> CHARS LBRACKET string_length . RBRACKET

    RBRACKET        shift and go to state 304


state 275

    (20) initialization -> ASSIGN expression .

    COMMA           reduce using rule 20 (initialization -> ASSIGN expression .)
    SEMI            reduce using rule 20 (initialization -> ASSIGN expression .)


state 276

    (80) expression_list -> expression COMMA expression_list .

    RBRACKET        reduce using rule 80 (expression_list -> expression COMMA expression_list .)


state 277

    (79) expression_list -> expression .
    (80) expression_list -> expression . COMMA expression_list

    RBRACKET        reduce using rule 79 (expression_list -> expression .)
    COMMA           shift and go to state 237


state 278

    (54) upper_bound -> expression .

    RBRACKET        reduce using rule 54 (upper_bound -> expression .)
    RPAREN          reduce using rule 54 (upper_bound -> expression .)
    COMMA           reduce using rule 54 (upper_bound -> expression .)


state 279

    (81) array_slice -> array_location LBRACKET lower_bound COLON upper_bound . RBRACKET

    RBRACKET        shift and go to state 305


state 280

    (33) formal_parameter -> identifier_list . mode LOC
    (34) formal_parameter -> identifier_list . mode
    (37) mode -> . mode_name
    (38) mode -> . discrete_mode
    (39) mode -> . reference_mode
    (40) mode -> . composite_mode
    (41) mode_name -> . identifier
    (42) discrete_mode -> . integer_mode
    (43) discrete_mode -> . boolean_mode
    (44) discrete_mode -> . character_mode
    (45) discrete_mode -> . discrete_range_mode
    (55) reference_mode -> . REF mode
    (56) composite_mode -> . string_mode
    (57) composite_mode -> . array_mode
    (23) identifier -> . ID
    (47) integer_mode -> . INT
    (48) boolean_mode -> . BOOL
    (49) character_mode -> . CHAR
    (50) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (51) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (58) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (60) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (46) discrete_mode_name -> . identifier

    REF             shift and go to state 180
    ID              shift and go to state 56
    INT             shift and go to state 183
    BOOL            shift and go to state 172
    CHAR            shift and go to state 168
    CHARS           shift and go to state 182
    ARRAY           shift and go to state 171

    discrete_mode                  shift and go to state 167
    composite_mode                 shift and go to state 176
    character_mode                 shift and go to state 169
    mode_name                      shift and go to state 170
    boolean_mode                   shift and go to state 177
    array_mode                     shift and go to state 178
    string_mode                    shift and go to state 179
    discrete_mode_name             shift and go to state 173
    discrete_range_mode            shift and go to state 174
    integer_mode                   shift and go to state 181
    mode                           shift and go to state 306
    identifier                     shift and go to state 185
    reference_mode                 shift and go to state 175

state 281

    (29) procedure_definition -> PROC LPAREN formal_parameter_list . RPAREN result_spec SEMI statement_nullable END SEMI
    (30) procedure_definition -> PROC LPAREN formal_parameter_list . RPAREN SEMI statement_nullable END SEMI

    RPAREN          shift and go to state 307


state 282

    (31) formal_parameter_list -> formal_parameter .
    (32) formal_parameter_list -> formal_parameter . COMMA formal_parameter_list

    RPAREN          reduce using rule 31 (formal_parameter_list -> formal_parameter .)
    COMMA           shift and go to state 308


state 283

    (13) synonym_definition -> identifier_list mode ASSIGN expression .

    COMMA           reduce using rule 13 (synonym_definition -> identifier_list mode ASSIGN expression .)
    SEMI            reduce using rule 13 (synonym_definition -> identifier_list mode ASSIGN expression .)


state 284

    (75) string_slice -> identifier LBRACKET left_element COLON right_element . RBRACKET

    RBRACKET        shift and go to state 309


state 285

    (77) right_element -> expression .

    RBRACKET        reduce using rule 77 (right_element -> expression .)


state 286

    (202) end_value -> TO . expression
    (83) expression -> . operand0
    (84) expression -> . conditional_expression
    (92) operand0 -> . operand1
    (93) operand0 -> . operand0 operator1 operand1
    (86) conditional_expression -> . IF expression then_expression else_expression FI
    (87) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (94) operand1 -> . operand2
    (95) operand1 -> . operand1 operator2 operand2
    (96) operand2 -> . operand3
    (97) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (98) operand3 -> . monadic_operator operand4
    (99) operand3 -> . operand4
    (106) monadic_operator -> . MINUS
    (107) monadic_operator -> . NOT
    (100) operand4 -> . array_location
    (101) operand4 -> . referenced_location
    (102) operand4 -> . primitive_value
    (82) array_location -> . location
    (108) referenced_location -> . ARROW array_location
    (125) primitive_value -> . literal
    (126) primitive_value -> . value_array_element
    (127) primitive_value -> . value_array_slice
    (128) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (129) literal -> . integer_literal
    (130) literal -> . boolean_literal
    (131) literal -> . character_literal
    (132) literal -> . empty_literal
    (133) literal -> . character_string_literal
    (134) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (135) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (136) integer_literal -> . ICONST
    (137) boolean_literal -> . TRUE
    (138) boolean_literal -> . FALSE
    (139) character_literal -> . CCONST
    (140) empty_literal -> . NULL
    (141) character_string_literal -> . SCONST

    IF              shift and go to state 76
    MINUS           shift and go to state 79
    NOT             shift and go to state 65
    ARROW           shift and go to state 62
    LPAREN          shift and go to state 70
    ID              shift and go to state 56
    ICONST          shift and go to state 83
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    CCONST          shift and go to state 89
    NULL            shift and go to state 66
    SCONST          shift and go to state 77

    integer_literal                shift and go to state 61
    location                       shift and go to state 38
    operand0                       shift and go to state 68
    conditional_expression         shift and go to state 60
    parenthesized_expression       shift and go to state 80
    monadic_operator               shift and go to state 63
    array_element                  shift and go to state 19
    boolean_literal                shift and go to state 64
    array_slice                    shift and go to state 18
    character_string_literal       shift and go to state 84
    operand1                       shift and go to state 85
    array_location                 shift and go to state 86
    referenced_location            shift and go to state 87
    character_literal              shift and go to state 67
    value_array_slice              shift and go to state 88
    string_element                 shift and go to state 33
    primitive_value                shift and go to state 69
    operand2                       shift and go to state 90
    literal                        shift and go to state 71
    string_slice                   shift and go to state 17
    dereferenced_reference         shift and go to state 30
    value_array_element            shift and go to state 72
    empty_literal                  shift and go to state 78
    operand4                       shift and go to state 73
    expression                     shift and go to state 310
    identifier                     shift and go to state 92
    operand3                       shift and go to state 93

state 287

    (201) step_value -> BY . expression
    (83) expression -> . operand0
    (84) expression -> . conditional_expression
    (92) operand0 -> . operand1
    (93) operand0 -> . operand0 operator1 operand1
    (86) conditional_expression -> . IF expression then_expression else_expression FI
    (87) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (94) operand1 -> . operand2
    (95) operand1 -> . operand1 operator2 operand2
    (96) operand2 -> . operand3
    (97) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (98) operand3 -> . monadic_operator operand4
    (99) operand3 -> . operand4
    (106) monadic_operator -> . MINUS
    (107) monadic_operator -> . NOT
    (100) operand4 -> . array_location
    (101) operand4 -> . referenced_location
    (102) operand4 -> . primitive_value
    (82) array_location -> . location
    (108) referenced_location -> . ARROW array_location
    (125) primitive_value -> . literal
    (126) primitive_value -> . value_array_element
    (127) primitive_value -> . value_array_slice
    (128) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (129) literal -> . integer_literal
    (130) literal -> . boolean_literal
    (131) literal -> . character_literal
    (132) literal -> . empty_literal
    (133) literal -> . character_string_literal
    (134) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (135) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (136) integer_literal -> . ICONST
    (137) boolean_literal -> . TRUE
    (138) boolean_literal -> . FALSE
    (139) character_literal -> . CCONST
    (140) empty_literal -> . NULL
    (141) character_string_literal -> . SCONST

    IF              shift and go to state 76
    MINUS           shift and go to state 79
    NOT             shift and go to state 65
    ARROW           shift and go to state 62
    LPAREN          shift and go to state 70
    ID              shift and go to state 56
    ICONST          shift and go to state 83
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    CCONST          shift and go to state 89
    NULL            shift and go to state 66
    SCONST          shift and go to state 77

    integer_literal                shift and go to state 61
    location                       shift and go to state 38
    operand0                       shift and go to state 68
    conditional_expression         shift and go to state 60
    parenthesized_expression       shift and go to state 80
    monadic_operator               shift and go to state 63
    array_element                  shift and go to state 19
    boolean_literal                shift and go to state 64
    array_slice                    shift and go to state 18
    character_string_literal       shift and go to state 84
    operand1                       shift and go to state 85
    array_location                 shift and go to state 86
    referenced_location            shift and go to state 87
    character_literal              shift and go to state 67
    value_array_slice              shift and go to state 88
    string_element                 shift and go to state 33
    primitive_value                shift and go to state 69
    operand2                       shift and go to state 90
    literal                        shift and go to state 71
    string_slice                   shift and go to state 17
    dereferenced_reference         shift and go to state 30
    value_array_element            shift and go to state 72
    empty_literal                  shift and go to state 78
    operand4                       shift and go to state 73
    expression                     shift and go to state 311
    identifier                     shift and go to state 92
    operand3                       shift and go to state 93

state 288

    (200) step_enumeration -> identifier ASSIGN expression end_value .

    WHILE           reduce using rule 200 (step_enumeration -> identifier ASSIGN expression end_value .)
    SEMI            reduce using rule 200 (step_enumeration -> identifier ASSIGN expression end_value .)


state 289

    (197) step_enumeration -> identifier ASSIGN expression step_value . DOWN end_value
    (198) step_enumeration -> identifier ASSIGN expression step_value . end_value
    (202) end_value -> . TO expression

    DOWN            shift and go to state 313
    TO              shift and go to state 286

    end_value                      shift and go to state 312

state 290

    (199) step_enumeration -> identifier ASSIGN expression DOWN . end_value
    (202) end_value -> . TO expression

    TO              shift and go to state 286

    end_value                      shift and go to state 314

state 291

    (203) range_enumeration -> identifier DOWN IN discrete_mode .
    (51) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    WHILE           reduce using rule 203 (range_enumeration -> identifier DOWN IN discrete_mode .)
    SEMI            reduce using rule 203 (range_enumeration -> identifier DOWN IN discrete_mode .)
    LPAREN          shift and go to state 228


state 292

    (135) value_array_slice -> primitive_value LBRACKET expression COLON expression . RBRACKET

    RBRACKET        shift and go to state 315


state 293

    (90) elsif_expression -> ELSIF expression . then_expression
    (88) then_expression -> . THEN expression

    THEN            shift and go to state 217

    then_expression                shift and go to state 316

state 294

    (86) conditional_expression -> IF expression then_expression else_expression FI .

    WHILE           reduce using rule 86 (conditional_expression -> IF expression then_expression else_expression FI .)
    SEMI            reduce using rule 86 (conditional_expression -> IF expression then_expression else_expression FI .)
    COLON           reduce using rule 86 (conditional_expression -> IF expression then_expression else_expression FI .)
    THEN            reduce using rule 86 (conditional_expression -> IF expression then_expression else_expression FI .)
    COMMA           reduce using rule 86 (conditional_expression -> IF expression then_expression else_expression FI .)
    RPAREN          reduce using rule 86 (conditional_expression -> IF expression then_expression else_expression FI .)
    RBRACKET        reduce using rule 86 (conditional_expression -> IF expression then_expression else_expression FI .)
    LBRACKET        reduce using rule 86 (conditional_expression -> IF expression then_expression else_expression FI .)
    ELSE            reduce using rule 86 (conditional_expression -> IF expression then_expression else_expression FI .)
    ELSIF           reduce using rule 86 (conditional_expression -> IF expression then_expression else_expression FI .)
    DOWN            reduce using rule 86 (conditional_expression -> IF expression then_expression else_expression FI .)
    BY              reduce using rule 86 (conditional_expression -> IF expression then_expression else_expression FI .)
    TO              reduce using rule 86 (conditional_expression -> IF expression then_expression else_expression FI .)
    FI              reduce using rule 86 (conditional_expression -> IF expression then_expression else_expression FI .)


state 295

    (89) else_expression -> ELSE expression .

    FI              reduce using rule 89 (else_expression -> ELSE expression .)


state 296

    (91) elsif_expression -> elsif_expression ELSIF . expression then_expression
    (83) expression -> . operand0
    (84) expression -> . conditional_expression
    (92) operand0 -> . operand1
    (93) operand0 -> . operand0 operator1 operand1
    (86) conditional_expression -> . IF expression then_expression else_expression FI
    (87) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (94) operand1 -> . operand2
    (95) operand1 -> . operand1 operator2 operand2
    (96) operand2 -> . operand3
    (97) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (98) operand3 -> . monadic_operator operand4
    (99) operand3 -> . operand4
    (106) monadic_operator -> . MINUS
    (107) monadic_operator -> . NOT
    (100) operand4 -> . array_location
    (101) operand4 -> . referenced_location
    (102) operand4 -> . primitive_value
    (82) array_location -> . location
    (108) referenced_location -> . ARROW array_location
    (125) primitive_value -> . literal
    (126) primitive_value -> . value_array_element
    (127) primitive_value -> . value_array_slice
    (128) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (129) literal -> . integer_literal
    (130) literal -> . boolean_literal
    (131) literal -> . character_literal
    (132) literal -> . empty_literal
    (133) literal -> . character_string_literal
    (134) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (135) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (136) integer_literal -> . ICONST
    (137) boolean_literal -> . TRUE
    (138) boolean_literal -> . FALSE
    (139) character_literal -> . CCONST
    (140) empty_literal -> . NULL
    (141) character_string_literal -> . SCONST

    IF              shift and go to state 76
    MINUS           shift and go to state 79
    NOT             shift and go to state 65
    ARROW           shift and go to state 62
    LPAREN          shift and go to state 70
    ID              shift and go to state 56
    ICONST          shift and go to state 83
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    CCONST          shift and go to state 89
    NULL            shift and go to state 66
    SCONST          shift and go to state 77

    integer_literal                shift and go to state 61
    location                       shift and go to state 38
    operand0                       shift and go to state 68
    conditional_expression         shift and go to state 60
    parenthesized_expression       shift and go to state 80
    monadic_operator               shift and go to state 63
    array_element                  shift and go to state 19
    boolean_literal                shift and go to state 64
    array_slice                    shift and go to state 18
    character_string_literal       shift and go to state 84
    operand1                       shift and go to state 85
    array_location                 shift and go to state 86
    referenced_location            shift and go to state 87
    character_literal              shift and go to state 67
    value_array_slice              shift and go to state 88
    string_element                 shift and go to state 33
    primitive_value                shift and go to state 69
    operand2                       shift and go to state 90
    literal                        shift and go to state 71
    string_slice                   shift and go to state 17
    dereferenced_reference         shift and go to state 30
    value_array_element            shift and go to state 72
    empty_literal                  shift and go to state 78
    operand4                       shift and go to state 73
    expression                     shift and go to state 317
    identifier                     shift and go to state 92
    operand3                       shift and go to state 93

state 297

    (87) conditional_expression -> IF expression then_expression elsif_expression else_expression . FI

    FI              shift and go to state 318


state 298

    (162) else_clause -> ELSIF expression then_clause . else_clause
    (163) else_clause -> ELSIF expression then_clause .
    (161) else_clause -> . ELSE action_statement_list
    (162) else_clause -> . ELSIF expression then_clause else_clause
    (163) else_clause -> . ELSIF expression then_clause

    FI              reduce using rule 163 (else_clause -> ELSIF expression then_clause .)
    ELSE            shift and go to state 224
    ELSIF           shift and go to state 223

    else_clause                    shift and go to state 319

state 299

    (51) discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .

    LPAREN          reduce using rule 51 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    ASSIGN          reduce using rule 51 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    COMMA           reduce using rule 51 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    SEMI            reduce using rule 51 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    RBRACKET        reduce using rule 51 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    LOC             reduce using rule 51 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    RPAREN          reduce using rule 51 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    WHILE           reduce using rule 51 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)


state 300

    (52) literal_range -> lower_bound COLON . upper_bound
    (54) upper_bound -> . expression
    (83) expression -> . operand0
    (84) expression -> . conditional_expression
    (92) operand0 -> . operand1
    (93) operand0 -> . operand0 operator1 operand1
    (86) conditional_expression -> . IF expression then_expression else_expression FI
    (87) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (94) operand1 -> . operand2
    (95) operand1 -> . operand1 operator2 operand2
    (96) operand2 -> . operand3
    (97) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (98) operand3 -> . monadic_operator operand4
    (99) operand3 -> . operand4
    (106) monadic_operator -> . MINUS
    (107) monadic_operator -> . NOT
    (100) operand4 -> . array_location
    (101) operand4 -> . referenced_location
    (102) operand4 -> . primitive_value
    (82) array_location -> . location
    (108) referenced_location -> . ARROW array_location
    (125) primitive_value -> . literal
    (126) primitive_value -> . value_array_element
    (127) primitive_value -> . value_array_slice
    (128) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (129) literal -> . integer_literal
    (130) literal -> . boolean_literal
    (131) literal -> . character_literal
    (132) literal -> . empty_literal
    (133) literal -> . character_string_literal
    (134) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (135) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (136) integer_literal -> . ICONST
    (137) boolean_literal -> . TRUE
    (138) boolean_literal -> . FALSE
    (139) character_literal -> . CCONST
    (140) empty_literal -> . NULL
    (141) character_string_literal -> . SCONST

    IF              shift and go to state 76
    MINUS           shift and go to state 79
    NOT             shift and go to state 65
    ARROW           shift and go to state 62
    LPAREN          shift and go to state 70
    ID              shift and go to state 56
    ICONST          shift and go to state 83
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    CCONST          shift and go to state 89
    NULL            shift and go to state 66
    SCONST          shift and go to state 77

    integer_literal                shift and go to state 61
    location                       shift and go to state 38
    operand0                       shift and go to state 68
    conditional_expression         shift and go to state 60
    parenthesized_expression       shift and go to state 80
    monadic_operator               shift and go to state 63
    array_element                  shift and go to state 19
    boolean_literal                shift and go to state 64
    character_literal              shift and go to state 67
    array_slice                    shift and go to state 18
    character_string_literal       shift and go to state 84
    operand1                       shift and go to state 85
    array_location                 shift and go to state 86
    referenced_location            shift and go to state 87
    upper_bound                    shift and go to state 320
    value_array_slice              shift and go to state 88
    string_element                 shift and go to state 33
    primitive_value                shift and go to state 69
    operand2                       shift and go to state 90
    literal                        shift and go to state 71
    string_slice                   shift and go to state 17
    dereferenced_reference         shift and go to state 30
    value_array_element            shift and go to state 72
    empty_literal                  shift and go to state 78
    operand4                       shift and go to state 73
    expression                     shift and go to state 278
    identifier                     shift and go to state 92
    operand3                       shift and go to state 93

state 301

    (62) index_mode_list -> index_mode COMMA . index_mode_list
    (61) index_mode_list -> . index_mode
    (62) index_mode_list -> . index_mode COMMA index_mode_list
    (63) index_mode -> . discrete_mode
    (64) index_mode -> . literal_range
    (42) discrete_mode -> . integer_mode
    (43) discrete_mode -> . boolean_mode
    (44) discrete_mode -> . character_mode
    (45) discrete_mode -> . discrete_range_mode
    (52) literal_range -> . lower_bound COLON upper_bound
    (47) integer_mode -> . INT
    (48) boolean_mode -> . BOOL
    (49) character_mode -> . CHAR
    (50) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (51) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (53) lower_bound -> . expression
    (46) discrete_mode_name -> . identifier
    (83) expression -> . operand0
    (84) expression -> . conditional_expression
    (23) identifier -> . ID
    (92) operand0 -> . operand1
    (93) operand0 -> . operand0 operator1 operand1
    (86) conditional_expression -> . IF expression then_expression else_expression FI
    (87) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (94) operand1 -> . operand2
    (95) operand1 -> . operand1 operator2 operand2
    (96) operand2 -> . operand3
    (97) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (98) operand3 -> . monadic_operator operand4
    (99) operand3 -> . operand4
    (106) monadic_operator -> . MINUS
    (107) monadic_operator -> . NOT
    (100) operand4 -> . array_location
    (101) operand4 -> . referenced_location
    (102) operand4 -> . primitive_value
    (82) array_location -> . location
    (108) referenced_location -> . ARROW array_location
    (125) primitive_value -> . literal
    (126) primitive_value -> . value_array_element
    (127) primitive_value -> . value_array_slice
    (128) primitive_value -> . parenthesized_expression
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (129) literal -> . integer_literal
    (130) literal -> . boolean_literal
    (131) literal -> . character_literal
    (132) literal -> . empty_literal
    (133) literal -> . character_string_literal
    (134) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (135) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (136) integer_literal -> . ICONST
    (137) boolean_literal -> . TRUE
    (138) boolean_literal -> . FALSE
    (139) character_literal -> . CCONST
    (140) empty_literal -> . NULL
    (141) character_string_literal -> . SCONST

    INT             shift and go to state 183
    BOOL            shift and go to state 172
    CHAR            shift and go to state 168
    ID              shift and go to state 56
    IF              shift and go to state 76
    MINUS           shift and go to state 79
    NOT             shift and go to state 65
    ARROW           shift and go to state 62
    LPAREN          shift and go to state 70
    ICONST          shift and go to state 83
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    CCONST          shift and go to state 89
    NULL            shift and go to state 66
    SCONST          shift and go to state 77

    discrete_mode                  shift and go to state 267
    discrete_mode_name             shift and go to state 173
    conditional_expression         shift and go to state 60
    integer_literal                shift and go to state 61
    monadic_operator               shift and go to state 63
    index_mode_list                shift and go to state 321
    literal_range                  shift and go to state 268
    boolean_literal                shift and go to state 64
    location                       shift and go to state 38
    discrete_range_mode            shift and go to state 174
    empty_literal                  shift and go to state 78
    array_element                  shift and go to state 19
    character_literal              shift and go to state 67
    boolean_mode                   shift and go to state 177
    primitive_value                shift and go to state 69
    literal                        shift and go to state 71
    string_slice                   shift and go to state 17
    array_slice                    shift and go to state 18
    value_array_element            shift and go to state 72
    integer_mode                   shift and go to state 181
    expression                     shift and go to state 265
    character_mode                 shift and go to state 169
    operand4                       shift and go to state 73
    operand0                       shift and go to state 68
    index_mode                     shift and go to state 269
    parenthesized_expression       shift and go to state 80
    dereferenced_reference         shift and go to state 30
    character_string_literal       shift and go to state 84
    operand1                       shift and go to state 85
    array_location                 shift and go to state 86
    referenced_location            shift and go to state 87
    value_array_slice              shift and go to state 88
    string_element                 shift and go to state 33
    operand2                       shift and go to state 90
    lower_bound                    shift and go to state 266
    identifier                     shift and go to state 271
    operand3                       shift and go to state 93

state 302

    (60) array_mode -> ARRAY LBRACKET index_mode_list RBRACKET . element_mode
    (65) element_mode -> . mode
    (37) mode -> . mode_name
    (38) mode -> . discrete_mode
    (39) mode -> . reference_mode
    (40) mode -> . composite_mode
    (41) mode_name -> . identifier
    (42) discrete_mode -> . integer_mode
    (43) discrete_mode -> . boolean_mode
    (44) discrete_mode -> . character_mode
    (45) discrete_mode -> . discrete_range_mode
    (55) reference_mode -> . REF mode
    (56) composite_mode -> . string_mode
    (57) composite_mode -> . array_mode
    (23) identifier -> . ID
    (47) integer_mode -> . INT
    (48) boolean_mode -> . BOOL
    (49) character_mode -> . CHAR
    (50) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (51) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (58) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (60) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (46) discrete_mode_name -> . identifier

    REF             shift and go to state 180
    ID              shift and go to state 56
    INT             shift and go to state 183
    BOOL            shift and go to state 172
    CHAR            shift and go to state 168
    CHARS           shift and go to state 182
    ARRAY           shift and go to state 171

    element_mode                   shift and go to state 322
    discrete_mode                  shift and go to state 167
    character_mode                 shift and go to state 169
    mode_name                      shift and go to state 170
    boolean_mode                   shift and go to state 177
    composite_mode                 shift and go to state 176
    array_mode                     shift and go to state 178
    string_mode                    shift and go to state 179
    discrete_mode_name             shift and go to state 173
    discrete_range_mode            shift and go to state 174
    integer_mode                   shift and go to state 181
    mode                           shift and go to state 323
    identifier                     shift and go to state 185
    reference_mode                 shift and go to state 175

state 303

    (50) discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .

    LPAREN          reduce using rule 50 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    ASSIGN          reduce using rule 50 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    COMMA           reduce using rule 50 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    SEMI            reduce using rule 50 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    RBRACKET        reduce using rule 50 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    LOC             reduce using rule 50 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    RPAREN          reduce using rule 50 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    WHILE           reduce using rule 50 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)


state 304

    (58) string_mode -> CHARS LBRACKET string_length RBRACKET .

    LOC             reduce using rule 58 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    RPAREN          reduce using rule 58 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    COMMA           reduce using rule 58 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    SEMI            reduce using rule 58 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    ASSIGN          reduce using rule 58 (string_mode -> CHARS LBRACKET string_length RBRACKET .)


state 305

    (81) array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .

    ARROW           reduce using rule 81 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LBRACKET        reduce using rule 81 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    TIMES           reduce using rule 81 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    DIVIDE          reduce using rule 81 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    MODULO          reduce using rule 81 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    PLUS            reduce using rule 81 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    MINUS           reduce using rule 81 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    CONCAT          reduce using rule 81 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    AND             reduce using rule 81 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    OR              reduce using rule 81 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    EQUAL           reduce using rule 81 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    NOTEQ           reduce using rule 81 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    GREATER         reduce using rule 81 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    GTEQUAL         reduce using rule 81 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LESS            reduce using rule 81 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LTEQUAL         reduce using rule 81 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    IN              reduce using rule 81 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    RPAREN          reduce using rule 81 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    COMMA           reduce using rule 81 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    RBRACKET        reduce using rule 81 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    ASSIGN          reduce using rule 81 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    SEMI            reduce using rule 81 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    FI              reduce using rule 81 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    WHILE           reduce using rule 81 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    COLON           reduce using rule 81 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    ELSE            reduce using rule 81 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    ELSIF           reduce using rule 81 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    THEN            reduce using rule 81 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    DOWN            reduce using rule 81 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    BY              reduce using rule 81 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    TO              reduce using rule 81 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)


state 306

    (33) formal_parameter -> identifier_list mode . LOC
    (34) formal_parameter -> identifier_list mode .

    LOC             shift and go to state 324
    COMMA           reduce using rule 34 (formal_parameter -> identifier_list mode .)
    RPAREN          reduce using rule 34 (formal_parameter -> identifier_list mode .)


state 307

    (29) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN . result_spec SEMI statement_nullable END SEMI
    (30) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN . SEMI statement_nullable END SEMI
    (35) result_spec -> . RETURNS LPAREN mode LOC RPAREN
    (36) result_spec -> . RETURNS LPAREN mode RPAREN

    SEMI            shift and go to state 326
    RETURNS         shift and go to state 325

    result_spec                    shift and go to state 327

state 308

    (32) formal_parameter_list -> formal_parameter COMMA . formal_parameter_list
    (31) formal_parameter_list -> . formal_parameter
    (32) formal_parameter_list -> . formal_parameter COMMA formal_parameter_list
    (33) formal_parameter -> . identifier_list mode LOC
    (34) formal_parameter -> . identifier_list mode
    (21) identifier_list -> . identifier
    (22) identifier_list -> . identifier COMMA identifier_list
    (23) identifier -> . ID

    ID              shift and go to state 56

    identifier_list                shift and go to state 280
    formal_parameter               shift and go to state 282
    formal_parameter_list          shift and go to state 328
    identifier                     shift and go to state 59

state 309

    (75) string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .

    ARROW           reduce using rule 75 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    LBRACKET        reduce using rule 75 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    ASSIGN          reduce using rule 75 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    PLUS            reduce using rule 75 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    MINUS           reduce using rule 75 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    TIMES           reduce using rule 75 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    DIVIDE          reduce using rule 75 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    MODULO          reduce using rule 75 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    CONCAT          reduce using rule 75 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    AND             reduce using rule 75 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    OR              reduce using rule 75 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    EQUAL           reduce using rule 75 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    NOTEQ           reduce using rule 75 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    GREATER         reduce using rule 75 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    GTEQUAL         reduce using rule 75 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    LESS            reduce using rule 75 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    LTEQUAL         reduce using rule 75 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    IN              reduce using rule 75 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    COMMA           reduce using rule 75 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    SEMI            reduce using rule 75 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    COLON           reduce using rule 75 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    WHILE           reduce using rule 75 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    RBRACKET        reduce using rule 75 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    THEN            reduce using rule 75 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    RPAREN          reduce using rule 75 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    DOWN            reduce using rule 75 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    BY              reduce using rule 75 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    TO              reduce using rule 75 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    ELSE            reduce using rule 75 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    ELSIF           reduce using rule 75 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    FI              reduce using rule 75 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)


state 310

    (202) end_value -> TO expression .

    WHILE           reduce using rule 202 (end_value -> TO expression .)
    SEMI            reduce using rule 202 (end_value -> TO expression .)


state 311

    (201) step_value -> BY expression .

    DOWN            reduce using rule 201 (step_value -> BY expression .)
    TO              reduce using rule 201 (step_value -> BY expression .)


state 312

    (198) step_enumeration -> identifier ASSIGN expression step_value end_value .

    WHILE           reduce using rule 198 (step_enumeration -> identifier ASSIGN expression step_value end_value .)
    SEMI            reduce using rule 198 (step_enumeration -> identifier ASSIGN expression step_value end_value .)


state 313

    (197) step_enumeration -> identifier ASSIGN expression step_value DOWN . end_value
    (202) end_value -> . TO expression

    TO              shift and go to state 286

    end_value                      shift and go to state 329

state 314

    (199) step_enumeration -> identifier ASSIGN expression DOWN end_value .

    WHILE           reduce using rule 199 (step_enumeration -> identifier ASSIGN expression DOWN end_value .)
    SEMI            reduce using rule 199 (step_enumeration -> identifier ASSIGN expression DOWN end_value .)


state 315

    (135) value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .

    LBRACKET        reduce using rule 135 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    TIMES           reduce using rule 135 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    DIVIDE          reduce using rule 135 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    MODULO          reduce using rule 135 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    PLUS            reduce using rule 135 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    MINUS           reduce using rule 135 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    CONCAT          reduce using rule 135 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    AND             reduce using rule 135 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    OR              reduce using rule 135 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    EQUAL           reduce using rule 135 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    NOTEQ           reduce using rule 135 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    GREATER         reduce using rule 135 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    GTEQUAL         reduce using rule 135 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    LESS            reduce using rule 135 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    LTEQUAL         reduce using rule 135 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    IN              reduce using rule 135 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    SEMI            reduce using rule 135 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    THEN            reduce using rule 135 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    RPAREN          reduce using rule 135 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    COMMA           reduce using rule 135 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    RBRACKET        reduce using rule 135 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    COLON           reduce using rule 135 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    DOWN            reduce using rule 135 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    BY              reduce using rule 135 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    TO              reduce using rule 135 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    ELSE            reduce using rule 135 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    ELSIF           reduce using rule 135 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    FI              reduce using rule 135 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    WHILE           reduce using rule 135 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)


state 316

    (90) elsif_expression -> ELSIF expression then_expression .

    ELSIF           reduce using rule 90 (elsif_expression -> ELSIF expression then_expression .)
    ELSE            reduce using rule 90 (elsif_expression -> ELSIF expression then_expression .)


state 317

    (91) elsif_expression -> elsif_expression ELSIF expression . then_expression
    (88) then_expression -> . THEN expression

    THEN            shift and go to state 217

    then_expression                shift and go to state 330

state 318

    (87) conditional_expression -> IF expression then_expression elsif_expression else_expression FI .

    WHILE           reduce using rule 87 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    SEMI            reduce using rule 87 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    COLON           reduce using rule 87 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    THEN            reduce using rule 87 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    COMMA           reduce using rule 87 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    RPAREN          reduce using rule 87 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    RBRACKET        reduce using rule 87 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    LBRACKET        reduce using rule 87 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    ELSE            reduce using rule 87 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    ELSIF           reduce using rule 87 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    DOWN            reduce using rule 87 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    BY              reduce using rule 87 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    TO              reduce using rule 87 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    FI              reduce using rule 87 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)


state 319

    (162) else_clause -> ELSIF expression then_clause else_clause .

    FI              reduce using rule 162 (else_clause -> ELSIF expression then_clause else_clause .)


state 320

    (52) literal_range -> lower_bound COLON upper_bound .

    RPAREN          reduce using rule 52 (literal_range -> lower_bound COLON upper_bound .)
    COMMA           reduce using rule 52 (literal_range -> lower_bound COLON upper_bound .)
    RBRACKET        reduce using rule 52 (literal_range -> lower_bound COLON upper_bound .)


state 321

    (62) index_mode_list -> index_mode COMMA index_mode_list .

    RBRACKET        reduce using rule 62 (index_mode_list -> index_mode COMMA index_mode_list .)


state 322

    (60) array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .

    LOC             reduce using rule 60 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)
    RPAREN          reduce using rule 60 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)
    COMMA           reduce using rule 60 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)
    ASSIGN          reduce using rule 60 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)
    SEMI            reduce using rule 60 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)


state 323

    (65) element_mode -> mode .

    ASSIGN          reduce using rule 65 (element_mode -> mode .)
    COMMA           reduce using rule 65 (element_mode -> mode .)
    SEMI            reduce using rule 65 (element_mode -> mode .)
    LOC             reduce using rule 65 (element_mode -> mode .)
    RPAREN          reduce using rule 65 (element_mode -> mode .)


state 324

    (33) formal_parameter -> identifier_list mode LOC .

    COMMA           reduce using rule 33 (formal_parameter -> identifier_list mode LOC .)
    RPAREN          reduce using rule 33 (formal_parameter -> identifier_list mode LOC .)


state 325

    (35) result_spec -> RETURNS . LPAREN mode LOC RPAREN
    (36) result_spec -> RETURNS . LPAREN mode RPAREN

    LPAREN          shift and go to state 331


state 326

    (30) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI . statement_nullable END SEMI
    (3) statement_nullable -> . statement statement_nullable
    (4) statement_nullable -> . empty
    (5) statement -> . declaration_statement
    (6) statement -> . synonym_statement
    (7) statement -> . newmode_statement
    (8) statement -> . action_statement
    (9) statement -> . procedure_statement
    (206) empty -> .
    (15) declaration_statement -> . DCL declaration_list SEMI
    (10) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (142) action_statement -> . identifier COLON action SEMI
    (143) action_statement -> . action SEMI
    (28) procedure_statement -> . ID COLON procedure_definition
    (23) identifier -> . ID
    (144) action -> . bracketed_action
    (145) action -> . assignment_action
    (146) action -> . call_action
    (147) action -> . exit_action
    (148) action -> . result_action
    (149) action -> . return_action
    (150) bracketed_action -> . if_action
    (151) bracketed_action -> . do_action
    (152) assignment_action -> . array_location assigning_operator expression
    (167) call_action -> . procedure_call
    (168) call_action -> . builtin_call
    (183) exit_action -> . EXIT label_id
    (188) result_action -> . RESULT expression
    (185) return_action -> . RETURN result
    (158) if_action -> . IF expression then_clause else_clause FI
    (159) if_action -> . IF expression then_clause
    (189) do_action -> . DO control_part SEMI action_statement_nullable OD
    (190) do_action -> . DO action_statement_nullable OD
    (82) array_location -> . location
    (179) procedure_call -> . ID LPAREN parameter_list RPAREN
    (180) procedure_call -> . ID LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (171) builtin_name -> . ABS
    (172) builtin_name -> . ASC
    (173) builtin_name -> . NUM
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    END             reduce using rule 206 (empty -> .)
    DCL             shift and go to state 29
    SYN             shift and go to state 40
    TYPE            shift and go to state 4
    ID              shift and go to state 32
    EXIT            shift and go to state 35
    RESULT          shift and go to state 34
    RETURN          shift and go to state 8
    IF              shift and go to state 23
    DO              shift and go to state 2
    ABS             shift and go to state 7
    ASC             shift and go to state 13
    NUM             shift and go to state 42
    UPPER           shift and go to state 22
    LOWER           shift and go to state 41
    LENGTH          shift and go to state 27
    READ            shift and go to state 10
    PRINT           shift and go to state 37

    action_statement               shift and go to state 1
    location                       shift and go to state 38
    result_action                  shift and go to state 11
    return_action                  shift and go to state 5
    do_action                      shift and go to state 6
    bracketed_action               shift and go to state 3
    builtin_name                   shift and go to state 12
    procedure_statement            shift and go to state 14
    statement                      shift and go to state 96
    string_slice                   shift and go to state 17
    array_slice                    shift and go to state 18
    array_element                  shift and go to state 19
    declaration_statement          shift and go to state 20
    statement_nullable             shift and go to state 332
    newmode_statement              shift and go to state 21
    if_action                      shift and go to state 24
    call_action                    shift and go to state 25
    action                         shift and go to state 26
    empty                          shift and go to state 97
    procedure_call                 shift and go to state 28
    dereferenced_reference         shift and go to state 30
    array_location                 shift and go to state 31
    string_element                 shift and go to state 33
    assignment_action              shift and go to state 39
    builtin_call                   shift and go to state 9
    exit_action                    shift and go to state 43
    identifier                     shift and go to state 44
    synonym_statement              shift and go to state 45

state 327

    (29) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec . SEMI statement_nullable END SEMI

    SEMI            shift and go to state 333


state 328

    (32) formal_parameter_list -> formal_parameter COMMA formal_parameter_list .

    RPAREN          reduce using rule 32 (formal_parameter_list -> formal_parameter COMMA formal_parameter_list .)


state 329

    (197) step_enumeration -> identifier ASSIGN expression step_value DOWN end_value .

    WHILE           reduce using rule 197 (step_enumeration -> identifier ASSIGN expression step_value DOWN end_value .)
    SEMI            reduce using rule 197 (step_enumeration -> identifier ASSIGN expression step_value DOWN end_value .)


state 330

    (91) elsif_expression -> elsif_expression ELSIF expression then_expression .

    ELSIF           reduce using rule 91 (elsif_expression -> elsif_expression ELSIF expression then_expression .)
    ELSE            reduce using rule 91 (elsif_expression -> elsif_expression ELSIF expression then_expression .)


state 331

    (35) result_spec -> RETURNS LPAREN . mode LOC RPAREN
    (36) result_spec -> RETURNS LPAREN . mode RPAREN
    (37) mode -> . mode_name
    (38) mode -> . discrete_mode
    (39) mode -> . reference_mode
    (40) mode -> . composite_mode
    (41) mode_name -> . identifier
    (42) discrete_mode -> . integer_mode
    (43) discrete_mode -> . boolean_mode
    (44) discrete_mode -> . character_mode
    (45) discrete_mode -> . discrete_range_mode
    (55) reference_mode -> . REF mode
    (56) composite_mode -> . string_mode
    (57) composite_mode -> . array_mode
    (23) identifier -> . ID
    (47) integer_mode -> . INT
    (48) boolean_mode -> . BOOL
    (49) character_mode -> . CHAR
    (50) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (51) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (58) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (60) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (46) discrete_mode_name -> . identifier

    REF             shift and go to state 180
    ID              shift and go to state 56
    INT             shift and go to state 183
    BOOL            shift and go to state 172
    CHAR            shift and go to state 168
    CHARS           shift and go to state 182
    ARRAY           shift and go to state 171

    discrete_mode                  shift and go to state 167
    composite_mode                 shift and go to state 176
    character_mode                 shift and go to state 169
    mode_name                      shift and go to state 170
    boolean_mode                   shift and go to state 177
    array_mode                     shift and go to state 178
    string_mode                    shift and go to state 179
    discrete_mode_name             shift and go to state 173
    discrete_range_mode            shift and go to state 174
    integer_mode                   shift and go to state 181
    mode                           shift and go to state 334
    identifier                     shift and go to state 185
    reference_mode                 shift and go to state 175

state 332

    (30) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable . END SEMI

    END             shift and go to state 335


state 333

    (29) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI . statement_nullable END SEMI
    (3) statement_nullable -> . statement statement_nullable
    (4) statement_nullable -> . empty
    (5) statement -> . declaration_statement
    (6) statement -> . synonym_statement
    (7) statement -> . newmode_statement
    (8) statement -> . action_statement
    (9) statement -> . procedure_statement
    (206) empty -> .
    (15) declaration_statement -> . DCL declaration_list SEMI
    (10) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (142) action_statement -> . identifier COLON action SEMI
    (143) action_statement -> . action SEMI
    (28) procedure_statement -> . ID COLON procedure_definition
    (23) identifier -> . ID
    (144) action -> . bracketed_action
    (145) action -> . assignment_action
    (146) action -> . call_action
    (147) action -> . exit_action
    (148) action -> . result_action
    (149) action -> . return_action
    (150) bracketed_action -> . if_action
    (151) bracketed_action -> . do_action
    (152) assignment_action -> . array_location assigning_operator expression
    (167) call_action -> . procedure_call
    (168) call_action -> . builtin_call
    (183) exit_action -> . EXIT label_id
    (188) result_action -> . RESULT expression
    (185) return_action -> . RETURN result
    (158) if_action -> . IF expression then_clause else_clause FI
    (159) if_action -> . IF expression then_clause
    (189) do_action -> . DO control_part SEMI action_statement_nullable OD
    (190) do_action -> . DO action_statement_nullable OD
    (82) array_location -> . location
    (179) procedure_call -> . ID LPAREN parameter_list RPAREN
    (180) procedure_call -> . ID LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (66) location -> . identifier
    (67) location -> . dereferenced_reference
    (68) location -> . string_element
    (69) location -> . string_slice
    (70) location -> . array_element
    (71) location -> . array_slice
    (171) builtin_name -> . ABS
    (172) builtin_name -> . ASC
    (173) builtin_name -> . NUM
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT
    (72) dereferenced_reference -> . array_location ARROW
    (73) string_element -> . identifier LBRACKET start_element LBRACKET
    (75) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (78) array_element -> . array_location LBRACKET expression_list RBRACKET
    (81) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    END             reduce using rule 206 (empty -> .)
    DCL             shift and go to state 29
    SYN             shift and go to state 40
    TYPE            shift and go to state 4
    ID              shift and go to state 32
    EXIT            shift and go to state 35
    RESULT          shift and go to state 34
    RETURN          shift and go to state 8
    IF              shift and go to state 23
    DO              shift and go to state 2
    ABS             shift and go to state 7
    ASC             shift and go to state 13
    NUM             shift and go to state 42
    UPPER           shift and go to state 22
    LOWER           shift and go to state 41
    LENGTH          shift and go to state 27
    READ            shift and go to state 10
    PRINT           shift and go to state 37

    procedure_call                 shift and go to state 28
    action_statement               shift and go to state 1
    location                       shift and go to state 38
    result_action                  shift and go to state 11
    return_action                  shift and go to state 5
    do_action                      shift and go to state 6
    bracketed_action               shift and go to state 3
    builtin_name                   shift and go to state 12
    procedure_statement            shift and go to state 14
    statement                      shift and go to state 96
    string_slice                   shift and go to state 17
    array_slice                    shift and go to state 18
    array_element                  shift and go to state 19
    declaration_statement          shift and go to state 20
    statement_nullable             shift and go to state 336
    newmode_statement              shift and go to state 21
    if_action                      shift and go to state 24
    call_action                    shift and go to state 25
    action                         shift and go to state 26
    empty                          shift and go to state 97
    dereferenced_reference         shift and go to state 30
    array_location                 shift and go to state 31
    string_element                 shift and go to state 33
    assignment_action              shift and go to state 39
    builtin_call                   shift and go to state 9
    exit_action                    shift and go to state 43
    identifier                     shift and go to state 44
    synonym_statement              shift and go to state 45

state 334

    (35) result_spec -> RETURNS LPAREN mode . LOC RPAREN
    (36) result_spec -> RETURNS LPAREN mode . RPAREN

    LOC             shift and go to state 338
    RPAREN          shift and go to state 337


state 335

    (30) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END . SEMI

    SEMI            shift and go to state 339


state 336

    (29) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable . END SEMI

    END             shift and go to state 340


state 337

    (36) result_spec -> RETURNS LPAREN mode RPAREN .

    SEMI            reduce using rule 36 (result_spec -> RETURNS LPAREN mode RPAREN .)


state 338

    (35) result_spec -> RETURNS LPAREN mode LOC . RPAREN

    RPAREN          shift and go to state 341


state 339

    (30) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .

    DCL             reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    SYN             reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    TYPE            reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    ID              reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    EXIT            reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    RESULT          reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    RETURN          reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    IF              reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    DO              reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    ABS             reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    ASC             reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    NUM             reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    UPPER           reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    LOWER           reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    LENGTH          reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    READ            reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    PRINT           reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    $end            reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    END             reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)


state 340

    (29) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END . SEMI

    SEMI            shift and go to state 342


state 341

    (35) result_spec -> RETURNS LPAREN mode LOC RPAREN .

    SEMI            reduce using rule 35 (result_spec -> RETURNS LPAREN mode LOC RPAREN .)


state 342

    (29) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .

    DCL             reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    SYN             reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    TYPE            reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    ID              reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    EXIT            reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    RESULT          reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    RETURN          reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    IF              reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    DO              reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    ABS             reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    ASC             reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    NUM             reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    UPPER           reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    LOWER           reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    LENGTH          reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    READ            reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    PRINT           reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    $end            reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    END             reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COLON in state 32 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 44 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 69 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 86 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 92 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 140 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 271 resolved as shift
