Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Unused terminals:

    RESULT
    UPPER
    ABS
    FI
    BY
    RETURNS
    OD
    FOR
    DOWN
    PROC
    LENGTH
    LOWER
    ASC
    LOC
    EXIT
    IF
    DO
    ELSIF
    ELSE
    TO
    THEN
    WHILE
    PRINT
    READ
    NUM
    END
    RETURN

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement statement_nullable
Rule 3     statement_nullable -> statement statement_nullable
Rule 4     statement_nullable -> empty
Rule 5     statement -> declaration_statement
Rule 6     statement -> synonym_statement
Rule 7     statement -> newmode_statement
Rule 8     synonym_statement -> SYN synonym_list SEMI
Rule 9     synonym_list -> synonym_definition
Rule 10    synonym_list -> synonym_definition COMMA synonym_list
Rule 11    synonym_definition -> identifier_list mode ASSIGN expression
Rule 12    synonym_definition -> identifier_list ASSIGN expression
Rule 13    declaration_statement -> DCL declaration_list SEMI
Rule 14    declaration_list -> declaration
Rule 15    declaration_list -> declaration COMMA declaration_list
Rule 16    declaration -> identifier_list mode initialization
Rule 17    declaration -> identifier_list mode
Rule 18    initialization -> ASSIGN expression
Rule 19    identifier_list -> identifier
Rule 20    identifier_list -> identifier COMMA identifier_list
Rule 21    identifier -> ID
Rule 22    newmode_statement -> TYPE newmode_list SEMI
Rule 23    newmode_list -> mode_definition
Rule 24    newmode_list -> mode_definition COMMA newmode_list
Rule 25    mode_definition -> identifier_list ASSIGN mode
Rule 26    mode -> mode_name
Rule 27    mode -> discrete_mode
Rule 28    mode -> reference_mode
Rule 29    mode -> composite_mode
Rule 30    mode_name -> identifier
Rule 31    discrete_mode -> integer_mode
Rule 32    discrete_mode -> boolean_mode
Rule 33    discrete_mode -> character_mode
Rule 34    discrete_mode -> discrete_range_mode
Rule 35    discrete_mode_name -> identifier
Rule 36    integer_mode -> INT
Rule 37    boolean_mode -> BOOL
Rule 38    character_mode -> CHAR
Rule 39    discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN
Rule 40    discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN
Rule 41    literal_range -> lower_bound COLON upper_bound
Rule 42    lower_bound -> expression
Rule 43    upper_bound -> expression
Rule 44    reference_mode -> REF mode
Rule 45    composite_mode -> string_mode
Rule 46    composite_mode -> array_mode
Rule 47    string_mode -> CHARS LBRACKET string_length RBRACKET
Rule 48    string_length -> integer_literal
Rule 49    array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode
Rule 50    index_mode_list -> index_mode
Rule 51    index_mode_list -> index_mode COMMA index_mode_list
Rule 52    index_mode -> discrete_mode
Rule 53    index_mode -> literal_range
Rule 54    element_mode -> mode
Rule 55    location -> identifier
Rule 56    location -> dereferenced_reference
Rule 57    location -> string_element
Rule 58    location -> string_slice
Rule 59    location -> array_element
Rule 60    location -> array_slice
Rule 61    dereferenced_reference -> array_location ARROW
Rule 62    string_element -> identifier LBRACKET start_element LBRACKET
Rule 63    start_element -> expression
Rule 64    string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET
Rule 65    left_element -> expression
Rule 66    right_element -> expression
Rule 67    array_element -> array_location LBRACKET expression_list RBRACKET
Rule 68    expression_list -> expression
Rule 69    expression_list -> expression COMMA expression_list
Rule 70    array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET
Rule 71    array_location -> location
Rule 72    expression -> operand0
Rule 73    operand0 -> operand1
Rule 74    operand0 -> operand0 operator1 operand1
Rule 75    operand1 -> operand2
Rule 76    operand1 -> operand1 operator2 operand2
Rule 77    operand2 -> operand3
Rule 78    operand2 -> operand2 arithmetic_multiplicative_operator operand3
Rule 79    operand3 -> monadic_operator operand4
Rule 80    operand3 -> operand4
Rule 81    operand4 -> array_location
Rule 82    operand4 -> referenced_location
Rule 83    operand4 -> primitive_value
Rule 84    arithmetic_multiplicative_operator -> TIMES
Rule 85    arithmetic_multiplicative_operator -> DIVIDE
Rule 86    arithmetic_multiplicative_operator -> MODULO
Rule 87    monadic_operator -> MINUS
Rule 88    monadic_operator -> NOT
Rule 89    referenced_location -> ARROW array_location
Rule 90    operator1 -> relational_operator
Rule 91    operator1 -> membership_operator
Rule 92    operator2 -> arithmetic_additive_operator
Rule 93    operator2 -> string_concatenation_operator
Rule 94    arithmetic_additive_operator -> PLUS
Rule 95    arithmetic_additive_operator -> MINUS
Rule 96    string_concatenation_operator -> CONCAT
Rule 97    relational_operator -> AND
Rule 98    relational_operator -> OR
Rule 99    relational_operator -> EQUAL
Rule 100   relational_operator -> NOTEQ
Rule 101   relational_operator -> GREATER
Rule 102   relational_operator -> GTEQUAL
Rule 103   relational_operator -> LESS
Rule 104   relational_operator -> LTEQUAL
Rule 105   membership_operator -> IN
Rule 106   primitive_value -> literal
Rule 107   literal -> integer_literal
Rule 108   literal -> boolean_literal
Rule 109   literal -> character_literal
Rule 110   literal -> empty_literal
Rule 111   literal -> character_string_literal
Rule 112   integer_literal -> ICONST
Rule 113   boolean_literal -> TRUE
Rule 114   boolean_literal -> FALSE
Rule 115   character_literal -> CCONST
Rule 116   empty_literal -> NULL
Rule 117   character_string_literal -> SCONST
Rule 118   empty -> <empty>

Terminals, with rules where they appear

ABS                  : 
AND                  : 97
ARRAY                : 49
ARROW                : 61 89
ASC                  : 
ASSIGN               : 11 12 18 25
BOOL                 : 37
BY                   : 
CCONST               : 115
CHAR                 : 38
CHARS                : 47
COLON                : 41 64 70
COMMA                : 10 15 20 24 51 69
CONCAT               : 96
DCL                  : 13
DIVIDE               : 85
DO                   : 
DOWN                 : 
ELSE                 : 
ELSIF                : 
END                  : 
EQUAL                : 99
EXIT                 : 
FALSE                : 114
FI                   : 
FOR                  : 
GREATER              : 101
GTEQUAL              : 102
ICONST               : 112
ID                   : 21
IF                   : 
IN                   : 105
INT                  : 36
LBRACKET             : 47 49 62 62 64 67 70
LENGTH               : 
LESS                 : 103
LOC                  : 
LOWER                : 
LPAREN               : 39 40
LTEQUAL              : 104
MINUS                : 87 95
MODULO               : 86
NOT                  : 88
NOTEQ                : 100
NULL                 : 116
NUM                  : 
OD                   : 
OR                   : 98
PLUS                 : 94
PRINT                : 
PROC                 : 
RBRACKET             : 47 49 64 67 70
READ                 : 
REF                  : 44
RESULT               : 
RETURN               : 
RETURNS              : 
RPAREN               : 39 40
SCONST               : 117
SEMI                 : 8 13 22
SYN                  : 8
THEN                 : 
TIMES                : 84
TO                   : 
TRUE                 : 113
TYPE                 : 22
UPPER                : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

arithmetic_additive_operator : 92
arithmetic_multiplicative_operator : 78
array_element        : 59
array_location       : 61 67 70 81 89
array_mode           : 46
array_slice          : 60
boolean_literal      : 108
boolean_mode         : 32
character_literal    : 109
character_mode       : 33
character_string_literal : 111
composite_mode       : 29
declaration          : 14 15
declaration_list     : 13 15
declaration_statement : 5
dereferenced_reference : 56
discrete_mode        : 27 40 52
discrete_mode_name   : 39
discrete_range_mode  : 34
element_mode         : 49
empty                : 4
empty_literal        : 110
expression           : 11 12 18 42 43 63 65 66 68 69
expression_list      : 67 69
identifier           : 19 20 30 35 55 62 64
identifier_list      : 11 12 16 17 20 25
index_mode           : 50 51
index_mode_list      : 49 51
initialization       : 16
integer_literal      : 48 107
integer_mode         : 31
left_element         : 64
literal              : 106
literal_range        : 39 40 53
location             : 71
lower_bound          : 41 70
membership_operator  : 91
mode                 : 11 16 17 25 44 54
mode_definition      : 23 24
mode_name            : 26
monadic_operator     : 79
newmode_list         : 22 24
newmode_statement    : 7
operand0             : 72 74
operand1             : 73 74 76
operand2             : 75 76 78
operand3             : 77 78
operand4             : 79 80
operator1            : 74
operator2            : 76
primitive_value      : 83
program              : 0
reference_mode       : 28
referenced_location  : 82
relational_operator  : 90
right_element        : 64
start_element        : 62
statement            : 2 3
statement_list       : 1
statement_nullable   : 2 3
string_concatenation_operator : 93
string_element       : 57
string_length        : 47
string_mode          : 45
string_slice         : 58
synonym_definition   : 9 10
synonym_list         : 8 10
synonym_statement    : 6
upper_bound          : 41 70

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement statement_nullable
    (5) statement -> . declaration_statement
    (6) statement -> . synonym_statement
    (7) statement -> . newmode_statement
    (13) declaration_statement -> . DCL declaration_list SEMI
    (8) synonym_statement -> . SYN synonym_list SEMI
    (22) newmode_statement -> . TYPE newmode_list SEMI

    DCL             shift and go to state 5
    SYN             shift and go to state 3
    TYPE            shift and go to state 1

    newmode_statement              shift and go to state 2
    synonym_statement              shift and go to state 8
    statement                      shift and go to state 7
    declaration_statement          shift and go to state 6
    program                        shift and go to state 9
    statement_list                 shift and go to state 4

state 1

    (22) newmode_statement -> TYPE . newmode_list SEMI
    (23) newmode_list -> . mode_definition
    (24) newmode_list -> . mode_definition COMMA newmode_list
    (25) mode_definition -> . identifier_list ASSIGN mode
    (19) identifier_list -> . identifier
    (20) identifier_list -> . identifier COMMA identifier_list
    (21) identifier -> . ID

    ID              shift and go to state 10

    newmode_list                   shift and go to state 13
    identifier                     shift and go to state 12
    mode_definition                shift and go to state 14
    identifier_list                shift and go to state 11

state 2

    (7) statement -> newmode_statement .

    DCL             reduce using rule 7 (statement -> newmode_statement .)
    SYN             reduce using rule 7 (statement -> newmode_statement .)
    TYPE            reduce using rule 7 (statement -> newmode_statement .)
    $end            reduce using rule 7 (statement -> newmode_statement .)


state 3

    (8) synonym_statement -> SYN . synonym_list SEMI
    (9) synonym_list -> . synonym_definition
    (10) synonym_list -> . synonym_definition COMMA synonym_list
    (11) synonym_definition -> . identifier_list mode ASSIGN expression
    (12) synonym_definition -> . identifier_list ASSIGN expression
    (19) identifier_list -> . identifier
    (20) identifier_list -> . identifier COMMA identifier_list
    (21) identifier -> . ID

    ID              shift and go to state 10

    synonym_list                   shift and go to state 15
    identifier_list                shift and go to state 16
    identifier                     shift and go to state 12
    synonym_definition             shift and go to state 17

state 4

    (1) program -> statement_list .

    $end            reduce using rule 1 (program -> statement_list .)


state 5

    (13) declaration_statement -> DCL . declaration_list SEMI
    (14) declaration_list -> . declaration
    (15) declaration_list -> . declaration COMMA declaration_list
    (16) declaration -> . identifier_list mode initialization
    (17) declaration -> . identifier_list mode
    (19) identifier_list -> . identifier
    (20) identifier_list -> . identifier COMMA identifier_list
    (21) identifier -> . ID

    ID              shift and go to state 10

    declaration                    shift and go to state 19
    identifier_list                shift and go to state 20
    identifier                     shift and go to state 12
    declaration_list               shift and go to state 18

state 6

    (5) statement -> declaration_statement .

    DCL             reduce using rule 5 (statement -> declaration_statement .)
    SYN             reduce using rule 5 (statement -> declaration_statement .)
    TYPE            reduce using rule 5 (statement -> declaration_statement .)
    $end            reduce using rule 5 (statement -> declaration_statement .)


state 7

    (2) statement_list -> statement . statement_nullable
    (3) statement_nullable -> . statement statement_nullable
    (4) statement_nullable -> . empty
    (5) statement -> . declaration_statement
    (6) statement -> . synonym_statement
    (7) statement -> . newmode_statement
    (118) empty -> .
    (13) declaration_statement -> . DCL declaration_list SEMI
    (8) synonym_statement -> . SYN synonym_list SEMI
    (22) newmode_statement -> . TYPE newmode_list SEMI

    $end            reduce using rule 118 (empty -> .)
    DCL             shift and go to state 5
    SYN             shift and go to state 3
    TYPE            shift and go to state 1

    newmode_statement              shift and go to state 2
    synonym_statement              shift and go to state 8
    statement                      shift and go to state 23
    declaration_statement          shift and go to state 6
    empty                          shift and go to state 21
    statement_nullable             shift and go to state 22

state 8

    (6) statement -> synonym_statement .

    DCL             reduce using rule 6 (statement -> synonym_statement .)
    SYN             reduce using rule 6 (statement -> synonym_statement .)
    TYPE            reduce using rule 6 (statement -> synonym_statement .)
    $end            reduce using rule 6 (statement -> synonym_statement .)


state 9

    (0) S' -> program .



state 10

    (21) identifier -> ID .

    LBRACKET        reduce using rule 21 (identifier -> ID .)
    ARROW           reduce using rule 21 (identifier -> ID .)
    TIMES           reduce using rule 21 (identifier -> ID .)
    DIVIDE          reduce using rule 21 (identifier -> ID .)
    MODULO          reduce using rule 21 (identifier -> ID .)
    PLUS            reduce using rule 21 (identifier -> ID .)
    MINUS           reduce using rule 21 (identifier -> ID .)
    CONCAT          reduce using rule 21 (identifier -> ID .)
    AND             reduce using rule 21 (identifier -> ID .)
    OR              reduce using rule 21 (identifier -> ID .)
    EQUAL           reduce using rule 21 (identifier -> ID .)
    NOTEQ           reduce using rule 21 (identifier -> ID .)
    GREATER         reduce using rule 21 (identifier -> ID .)
    GTEQUAL         reduce using rule 21 (identifier -> ID .)
    LESS            reduce using rule 21 (identifier -> ID .)
    LTEQUAL         reduce using rule 21 (identifier -> ID .)
    IN              reduce using rule 21 (identifier -> ID .)
    COMMA           reduce using rule 21 (identifier -> ID .)
    RBRACKET        reduce using rule 21 (identifier -> ID .)
    COLON           reduce using rule 21 (identifier -> ID .)
    ASSIGN          reduce using rule 21 (identifier -> ID .)
    REF             reduce using rule 21 (identifier -> ID .)
    ID              reduce using rule 21 (identifier -> ID .)
    INT             reduce using rule 21 (identifier -> ID .)
    BOOL            reduce using rule 21 (identifier -> ID .)
    CHAR            reduce using rule 21 (identifier -> ID .)
    CHARS           reduce using rule 21 (identifier -> ID .)
    ARRAY           reduce using rule 21 (identifier -> ID .)
    SEMI            reduce using rule 21 (identifier -> ID .)
    LPAREN          reduce using rule 21 (identifier -> ID .)
    RPAREN          reduce using rule 21 (identifier -> ID .)


state 11

    (25) mode_definition -> identifier_list . ASSIGN mode

    ASSIGN          shift and go to state 24


state 12

    (19) identifier_list -> identifier .
    (20) identifier_list -> identifier . COMMA identifier_list

    REF             reduce using rule 19 (identifier_list -> identifier .)
    ID              reduce using rule 19 (identifier_list -> identifier .)
    INT             reduce using rule 19 (identifier_list -> identifier .)
    BOOL            reduce using rule 19 (identifier_list -> identifier .)
    CHAR            reduce using rule 19 (identifier_list -> identifier .)
    CHARS           reduce using rule 19 (identifier_list -> identifier .)
    ARRAY           reduce using rule 19 (identifier_list -> identifier .)
    ASSIGN          reduce using rule 19 (identifier_list -> identifier .)
    COMMA           shift and go to state 25


state 13

    (22) newmode_statement -> TYPE newmode_list . SEMI

    SEMI            shift and go to state 26


state 14

    (23) newmode_list -> mode_definition .
    (24) newmode_list -> mode_definition . COMMA newmode_list

    SEMI            reduce using rule 23 (newmode_list -> mode_definition .)
    COMMA           shift and go to state 27


state 15

    (8) synonym_statement -> SYN synonym_list . SEMI

    SEMI            shift and go to state 28


state 16

    (11) synonym_definition -> identifier_list . mode ASSIGN expression
    (12) synonym_definition -> identifier_list . ASSIGN expression
    (26) mode -> . mode_name
    (27) mode -> . discrete_mode
    (28) mode -> . reference_mode
    (29) mode -> . composite_mode
    (30) mode_name -> . identifier
    (31) discrete_mode -> . integer_mode
    (32) discrete_mode -> . boolean_mode
    (33) discrete_mode -> . character_mode
    (34) discrete_mode -> . discrete_range_mode
    (44) reference_mode -> . REF mode
    (45) composite_mode -> . string_mode
    (46) composite_mode -> . array_mode
    (21) identifier -> . ID
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (47) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (49) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (35) discrete_mode_name -> . identifier

    ASSIGN          shift and go to state 39
    REF             shift and go to state 34
    ID              shift and go to state 10
    INT             shift and go to state 48
    BOOL            shift and go to state 38
    CHAR            shift and go to state 35
    CHARS           shift and go to state 37
    ARRAY           shift and go to state 33

    mode_name                      shift and go to state 29
    reference_mode                 shift and go to state 30
    discrete_mode                  shift and go to state 40
    discrete_mode_name             shift and go to state 31
    discrete_range_mode            shift and go to state 41
    mode                           shift and go to state 42
    identifier                     shift and go to state 32
    character_mode                 shift and go to state 43
    boolean_mode                   shift and go to state 36
    string_mode                    shift and go to state 44
    array_mode                     shift and go to state 45
    integer_mode                   shift and go to state 46
    composite_mode                 shift and go to state 47

state 17

    (9) synonym_list -> synonym_definition .
    (10) synonym_list -> synonym_definition . COMMA synonym_list

    SEMI            reduce using rule 9 (synonym_list -> synonym_definition .)
    COMMA           shift and go to state 49


state 18

    (13) declaration_statement -> DCL declaration_list . SEMI

    SEMI            shift and go to state 50


state 19

    (14) declaration_list -> declaration .
    (15) declaration_list -> declaration . COMMA declaration_list

    SEMI            reduce using rule 14 (declaration_list -> declaration .)
    COMMA           shift and go to state 51


state 20

    (16) declaration -> identifier_list . mode initialization
    (17) declaration -> identifier_list . mode
    (26) mode -> . mode_name
    (27) mode -> . discrete_mode
    (28) mode -> . reference_mode
    (29) mode -> . composite_mode
    (30) mode_name -> . identifier
    (31) discrete_mode -> . integer_mode
    (32) discrete_mode -> . boolean_mode
    (33) discrete_mode -> . character_mode
    (34) discrete_mode -> . discrete_range_mode
    (44) reference_mode -> . REF mode
    (45) composite_mode -> . string_mode
    (46) composite_mode -> . array_mode
    (21) identifier -> . ID
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (47) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (49) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (35) discrete_mode_name -> . identifier

    REF             shift and go to state 34
    ID              shift and go to state 10
    INT             shift and go to state 48
    BOOL            shift and go to state 38
    CHAR            shift and go to state 35
    CHARS           shift and go to state 37
    ARRAY           shift and go to state 33

    mode_name                      shift and go to state 29
    reference_mode                 shift and go to state 30
    discrete_mode                  shift and go to state 40
    discrete_mode_name             shift and go to state 31
    discrete_range_mode            shift and go to state 41
    mode                           shift and go to state 52
    identifier                     shift and go to state 32
    character_mode                 shift and go to state 43
    boolean_mode                   shift and go to state 36
    string_mode                    shift and go to state 44
    array_mode                     shift and go to state 45
    integer_mode                   shift and go to state 46
    composite_mode                 shift and go to state 47

state 21

    (4) statement_nullable -> empty .

    $end            reduce using rule 4 (statement_nullable -> empty .)


state 22

    (2) statement_list -> statement statement_nullable .

    $end            reduce using rule 2 (statement_list -> statement statement_nullable .)


state 23

    (3) statement_nullable -> statement . statement_nullable
    (3) statement_nullable -> . statement statement_nullable
    (4) statement_nullable -> . empty
    (5) statement -> . declaration_statement
    (6) statement -> . synonym_statement
    (7) statement -> . newmode_statement
    (118) empty -> .
    (13) declaration_statement -> . DCL declaration_list SEMI
    (8) synonym_statement -> . SYN synonym_list SEMI
    (22) newmode_statement -> . TYPE newmode_list SEMI

    $end            reduce using rule 118 (empty -> .)
    DCL             shift and go to state 5
    SYN             shift and go to state 3
    TYPE            shift and go to state 1

    newmode_statement              shift and go to state 2
    synonym_statement              shift and go to state 8
    statement                      shift and go to state 23
    declaration_statement          shift and go to state 6
    empty                          shift and go to state 21
    statement_nullable             shift and go to state 53

state 24

    (25) mode_definition -> identifier_list ASSIGN . mode
    (26) mode -> . mode_name
    (27) mode -> . discrete_mode
    (28) mode -> . reference_mode
    (29) mode -> . composite_mode
    (30) mode_name -> . identifier
    (31) discrete_mode -> . integer_mode
    (32) discrete_mode -> . boolean_mode
    (33) discrete_mode -> . character_mode
    (34) discrete_mode -> . discrete_range_mode
    (44) reference_mode -> . REF mode
    (45) composite_mode -> . string_mode
    (46) composite_mode -> . array_mode
    (21) identifier -> . ID
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (47) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (49) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (35) discrete_mode_name -> . identifier

    REF             shift and go to state 34
    ID              shift and go to state 10
    INT             shift and go to state 48
    BOOL            shift and go to state 38
    CHAR            shift and go to state 35
    CHARS           shift and go to state 37
    ARRAY           shift and go to state 33

    mode_name                      shift and go to state 29
    reference_mode                 shift and go to state 30
    discrete_mode                  shift and go to state 40
    discrete_mode_name             shift and go to state 31
    discrete_range_mode            shift and go to state 41
    mode                           shift and go to state 54
    identifier                     shift and go to state 32
    character_mode                 shift and go to state 43
    boolean_mode                   shift and go to state 36
    string_mode                    shift and go to state 44
    array_mode                     shift and go to state 45
    integer_mode                   shift and go to state 46
    composite_mode                 shift and go to state 47

state 25

    (20) identifier_list -> identifier COMMA . identifier_list
    (19) identifier_list -> . identifier
    (20) identifier_list -> . identifier COMMA identifier_list
    (21) identifier -> . ID

    ID              shift and go to state 10

    identifier                     shift and go to state 12
    identifier_list                shift and go to state 55

state 26

    (22) newmode_statement -> TYPE newmode_list SEMI .

    DCL             reduce using rule 22 (newmode_statement -> TYPE newmode_list SEMI .)
    SYN             reduce using rule 22 (newmode_statement -> TYPE newmode_list SEMI .)
    TYPE            reduce using rule 22 (newmode_statement -> TYPE newmode_list SEMI .)
    $end            reduce using rule 22 (newmode_statement -> TYPE newmode_list SEMI .)


state 27

    (24) newmode_list -> mode_definition COMMA . newmode_list
    (23) newmode_list -> . mode_definition
    (24) newmode_list -> . mode_definition COMMA newmode_list
    (25) mode_definition -> . identifier_list ASSIGN mode
    (19) identifier_list -> . identifier
    (20) identifier_list -> . identifier COMMA identifier_list
    (21) identifier -> . ID

    ID              shift and go to state 10

    newmode_list                   shift and go to state 56
    identifier                     shift and go to state 12
    mode_definition                shift and go to state 14
    identifier_list                shift and go to state 11

state 28

    (8) synonym_statement -> SYN synonym_list SEMI .

    DCL             reduce using rule 8 (synonym_statement -> SYN synonym_list SEMI .)
    SYN             reduce using rule 8 (synonym_statement -> SYN synonym_list SEMI .)
    TYPE            reduce using rule 8 (synonym_statement -> SYN synonym_list SEMI .)
    $end            reduce using rule 8 (synonym_statement -> SYN synonym_list SEMI .)


state 29

    (26) mode -> mode_name .

    ASSIGN          reduce using rule 26 (mode -> mode_name .)
    COMMA           reduce using rule 26 (mode -> mode_name .)
    SEMI            reduce using rule 26 (mode -> mode_name .)


state 30

    (28) mode -> reference_mode .

    ASSIGN          reduce using rule 28 (mode -> reference_mode .)
    COMMA           reduce using rule 28 (mode -> reference_mode .)
    SEMI            reduce using rule 28 (mode -> reference_mode .)


state 31

    (39) discrete_range_mode -> discrete_mode_name . LPAREN literal_range RPAREN

    LPAREN          shift and go to state 57


state 32

    (30) mode_name -> identifier .
    (35) discrete_mode_name -> identifier .

    COMMA           reduce using rule 30 (mode_name -> identifier .)
    SEMI            reduce using rule 30 (mode_name -> identifier .)
    ASSIGN          reduce using rule 30 (mode_name -> identifier .)
    LPAREN          reduce using rule 35 (discrete_mode_name -> identifier .)


state 33

    (49) array_mode -> ARRAY . LBRACKET index_mode_list RBRACKET element_mode

    LBRACKET        shift and go to state 58


state 34

    (44) reference_mode -> REF . mode
    (26) mode -> . mode_name
    (27) mode -> . discrete_mode
    (28) mode -> . reference_mode
    (29) mode -> . composite_mode
    (30) mode_name -> . identifier
    (31) discrete_mode -> . integer_mode
    (32) discrete_mode -> . boolean_mode
    (33) discrete_mode -> . character_mode
    (34) discrete_mode -> . discrete_range_mode
    (44) reference_mode -> . REF mode
    (45) composite_mode -> . string_mode
    (46) composite_mode -> . array_mode
    (21) identifier -> . ID
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (47) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (49) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (35) discrete_mode_name -> . identifier

    REF             shift and go to state 34
    ID              shift and go to state 10
    INT             shift and go to state 48
    BOOL            shift and go to state 38
    CHAR            shift and go to state 35
    CHARS           shift and go to state 37
    ARRAY           shift and go to state 33

    mode_name                      shift and go to state 29
    reference_mode                 shift and go to state 30
    discrete_mode                  shift and go to state 40
    discrete_mode_name             shift and go to state 31
    discrete_range_mode            shift and go to state 41
    mode                           shift and go to state 59
    identifier                     shift and go to state 32
    character_mode                 shift and go to state 43
    boolean_mode                   shift and go to state 36
    string_mode                    shift and go to state 44
    array_mode                     shift and go to state 45
    integer_mode                   shift and go to state 46
    composite_mode                 shift and go to state 47

state 35

    (38) character_mode -> CHAR .

    LPAREN          reduce using rule 38 (character_mode -> CHAR .)
    ASSIGN          reduce using rule 38 (character_mode -> CHAR .)
    COMMA           reduce using rule 38 (character_mode -> CHAR .)
    SEMI            reduce using rule 38 (character_mode -> CHAR .)
    RBRACKET        reduce using rule 38 (character_mode -> CHAR .)


state 36

    (32) discrete_mode -> boolean_mode .

    LPAREN          reduce using rule 32 (discrete_mode -> boolean_mode .)
    COMMA           reduce using rule 32 (discrete_mode -> boolean_mode .)
    SEMI            reduce using rule 32 (discrete_mode -> boolean_mode .)
    ASSIGN          reduce using rule 32 (discrete_mode -> boolean_mode .)
    RBRACKET        reduce using rule 32 (discrete_mode -> boolean_mode .)


state 37

    (47) string_mode -> CHARS . LBRACKET string_length RBRACKET

    LBRACKET        shift and go to state 60


state 38

    (37) boolean_mode -> BOOL .

    LPAREN          reduce using rule 37 (boolean_mode -> BOOL .)
    ASSIGN          reduce using rule 37 (boolean_mode -> BOOL .)
    COMMA           reduce using rule 37 (boolean_mode -> BOOL .)
    RBRACKET        reduce using rule 37 (boolean_mode -> BOOL .)
    SEMI            reduce using rule 37 (boolean_mode -> BOOL .)


state 39

    (12) synonym_definition -> identifier_list ASSIGN . expression
    (72) expression -> . operand0
    (73) operand0 -> . operand1
    (74) operand0 -> . operand0 operator1 operand1
    (75) operand1 -> . operand2
    (76) operand1 -> . operand1 operator2 operand2
    (77) operand2 -> . operand3
    (78) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (79) operand3 -> . monadic_operator operand4
    (80) operand3 -> . operand4
    (87) monadic_operator -> . MINUS
    (88) monadic_operator -> . NOT
    (81) operand4 -> . array_location
    (82) operand4 -> . referenced_location
    (83) operand4 -> . primitive_value
    (71) array_location -> . location
    (89) referenced_location -> . ARROW array_location
    (106) primitive_value -> . literal
    (55) location -> . identifier
    (56) location -> . dereferenced_reference
    (57) location -> . string_element
    (58) location -> . string_slice
    (59) location -> . array_element
    (60) location -> . array_slice
    (107) literal -> . integer_literal
    (108) literal -> . boolean_literal
    (109) literal -> . character_literal
    (110) literal -> . empty_literal
    (111) literal -> . character_string_literal
    (21) identifier -> . ID
    (61) dereferenced_reference -> . array_location ARROW
    (62) string_element -> . identifier LBRACKET start_element LBRACKET
    (64) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (67) array_element -> . array_location LBRACKET expression_list RBRACKET
    (70) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (112) integer_literal -> . ICONST
    (113) boolean_literal -> . TRUE
    (114) boolean_literal -> . FALSE
    (115) character_literal -> . CCONST
    (116) empty_literal -> . NULL
    (117) character_string_literal -> . SCONST

    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 67
    ID              shift and go to state 10
    ICONST          shift and go to state 88
    TRUE            shift and go to state 69
    FALSE           shift and go to state 90
    CCONST          shift and go to state 86
    NULL            shift and go to state 74
    SCONST          shift and go to state 64

    operand1                       shift and go to state 77
    array_slice                    shift and go to state 71
    operand3                       shift and go to state 61
    operand4                       shift and go to state 92
    array_location                 shift and go to state 80
    boolean_literal                shift and go to state 81
    string_slice                   shift and go to state 63
    identifier                     shift and go to state 82
    location                       shift and go to state 65
    referenced_location            shift and go to state 66
    empty_literal                  shift and go to state 76
    literal                        shift and go to state 83
    string_element                 shift and go to state 78
    operand2                       shift and go to state 68
    character_string_literal       shift and go to state 87
    integer_literal                shift and go to state 85
    monadic_operator               shift and go to state 70
    operand0                       shift and go to state 79
    dereferenced_reference         shift and go to state 62
    character_literal              shift and go to state 72
    array_element                  shift and go to state 75
    expression                     shift and go to state 91
    primitive_value                shift and go to state 89

state 40

    (27) mode -> discrete_mode .
    (40) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    ASSIGN          reduce using rule 27 (mode -> discrete_mode .)
    COMMA           reduce using rule 27 (mode -> discrete_mode .)
    SEMI            reduce using rule 27 (mode -> discrete_mode .)
    LPAREN          shift and go to state 93


state 41

    (34) discrete_mode -> discrete_range_mode .

    LPAREN          reduce using rule 34 (discrete_mode -> discrete_range_mode .)
    COMMA           reduce using rule 34 (discrete_mode -> discrete_range_mode .)
    SEMI            reduce using rule 34 (discrete_mode -> discrete_range_mode .)
    ASSIGN          reduce using rule 34 (discrete_mode -> discrete_range_mode .)
    RBRACKET        reduce using rule 34 (discrete_mode -> discrete_range_mode .)


state 42

    (11) synonym_definition -> identifier_list mode . ASSIGN expression

    ASSIGN          shift and go to state 94


state 43

    (33) discrete_mode -> character_mode .

    LPAREN          reduce using rule 33 (discrete_mode -> character_mode .)
    COMMA           reduce using rule 33 (discrete_mode -> character_mode .)
    SEMI            reduce using rule 33 (discrete_mode -> character_mode .)
    ASSIGN          reduce using rule 33 (discrete_mode -> character_mode .)
    RBRACKET        reduce using rule 33 (discrete_mode -> character_mode .)


state 44

    (45) composite_mode -> string_mode .

    ASSIGN          reduce using rule 45 (composite_mode -> string_mode .)
    COMMA           reduce using rule 45 (composite_mode -> string_mode .)
    SEMI            reduce using rule 45 (composite_mode -> string_mode .)


state 45

    (46) composite_mode -> array_mode .

    ASSIGN          reduce using rule 46 (composite_mode -> array_mode .)
    COMMA           reduce using rule 46 (composite_mode -> array_mode .)
    SEMI            reduce using rule 46 (composite_mode -> array_mode .)


state 46

    (31) discrete_mode -> integer_mode .

    LPAREN          reduce using rule 31 (discrete_mode -> integer_mode .)
    COMMA           reduce using rule 31 (discrete_mode -> integer_mode .)
    SEMI            reduce using rule 31 (discrete_mode -> integer_mode .)
    ASSIGN          reduce using rule 31 (discrete_mode -> integer_mode .)
    RBRACKET        reduce using rule 31 (discrete_mode -> integer_mode .)


state 47

    (29) mode -> composite_mode .

    ASSIGN          reduce using rule 29 (mode -> composite_mode .)
    COMMA           reduce using rule 29 (mode -> composite_mode .)
    SEMI            reduce using rule 29 (mode -> composite_mode .)


state 48

    (36) integer_mode -> INT .

    LPAREN          reduce using rule 36 (integer_mode -> INT .)
    COMMA           reduce using rule 36 (integer_mode -> INT .)
    RBRACKET        reduce using rule 36 (integer_mode -> INT .)
    ASSIGN          reduce using rule 36 (integer_mode -> INT .)
    SEMI            reduce using rule 36 (integer_mode -> INT .)


state 49

    (10) synonym_list -> synonym_definition COMMA . synonym_list
    (9) synonym_list -> . synonym_definition
    (10) synonym_list -> . synonym_definition COMMA synonym_list
    (11) synonym_definition -> . identifier_list mode ASSIGN expression
    (12) synonym_definition -> . identifier_list ASSIGN expression
    (19) identifier_list -> . identifier
    (20) identifier_list -> . identifier COMMA identifier_list
    (21) identifier -> . ID

    ID              shift and go to state 10

    synonym_list                   shift and go to state 95
    identifier_list                shift and go to state 16
    identifier                     shift and go to state 12
    synonym_definition             shift and go to state 17

state 50

    (13) declaration_statement -> DCL declaration_list SEMI .

    DCL             reduce using rule 13 (declaration_statement -> DCL declaration_list SEMI .)
    SYN             reduce using rule 13 (declaration_statement -> DCL declaration_list SEMI .)
    TYPE            reduce using rule 13 (declaration_statement -> DCL declaration_list SEMI .)
    $end            reduce using rule 13 (declaration_statement -> DCL declaration_list SEMI .)


state 51

    (15) declaration_list -> declaration COMMA . declaration_list
    (14) declaration_list -> . declaration
    (15) declaration_list -> . declaration COMMA declaration_list
    (16) declaration -> . identifier_list mode initialization
    (17) declaration -> . identifier_list mode
    (19) identifier_list -> . identifier
    (20) identifier_list -> . identifier COMMA identifier_list
    (21) identifier -> . ID

    ID              shift and go to state 10

    declaration                    shift and go to state 19
    identifier_list                shift and go to state 20
    identifier                     shift and go to state 12
    declaration_list               shift and go to state 96

state 52

    (16) declaration -> identifier_list mode . initialization
    (17) declaration -> identifier_list mode .
    (18) initialization -> . ASSIGN expression

    COMMA           reduce using rule 17 (declaration -> identifier_list mode .)
    SEMI            reduce using rule 17 (declaration -> identifier_list mode .)
    ASSIGN          shift and go to state 97

    initialization                 shift and go to state 98

state 53

    (3) statement_nullable -> statement statement_nullable .

    $end            reduce using rule 3 (statement_nullable -> statement statement_nullable .)


state 54

    (25) mode_definition -> identifier_list ASSIGN mode .

    COMMA           reduce using rule 25 (mode_definition -> identifier_list ASSIGN mode .)
    SEMI            reduce using rule 25 (mode_definition -> identifier_list ASSIGN mode .)


state 55

    (20) identifier_list -> identifier COMMA identifier_list .

    REF             reduce using rule 20 (identifier_list -> identifier COMMA identifier_list .)
    ID              reduce using rule 20 (identifier_list -> identifier COMMA identifier_list .)
    INT             reduce using rule 20 (identifier_list -> identifier COMMA identifier_list .)
    BOOL            reduce using rule 20 (identifier_list -> identifier COMMA identifier_list .)
    CHAR            reduce using rule 20 (identifier_list -> identifier COMMA identifier_list .)
    CHARS           reduce using rule 20 (identifier_list -> identifier COMMA identifier_list .)
    ARRAY           reduce using rule 20 (identifier_list -> identifier COMMA identifier_list .)
    ASSIGN          reduce using rule 20 (identifier_list -> identifier COMMA identifier_list .)


state 56

    (24) newmode_list -> mode_definition COMMA newmode_list .

    SEMI            reduce using rule 24 (newmode_list -> mode_definition COMMA newmode_list .)


state 57

    (39) discrete_range_mode -> discrete_mode_name LPAREN . literal_range RPAREN
    (41) literal_range -> . lower_bound COLON upper_bound
    (42) lower_bound -> . expression
    (72) expression -> . operand0
    (73) operand0 -> . operand1
    (74) operand0 -> . operand0 operator1 operand1
    (75) operand1 -> . operand2
    (76) operand1 -> . operand1 operator2 operand2
    (77) operand2 -> . operand3
    (78) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (79) operand3 -> . monadic_operator operand4
    (80) operand3 -> . operand4
    (87) monadic_operator -> . MINUS
    (88) monadic_operator -> . NOT
    (81) operand4 -> . array_location
    (82) operand4 -> . referenced_location
    (83) operand4 -> . primitive_value
    (71) array_location -> . location
    (89) referenced_location -> . ARROW array_location
    (106) primitive_value -> . literal
    (55) location -> . identifier
    (56) location -> . dereferenced_reference
    (57) location -> . string_element
    (58) location -> . string_slice
    (59) location -> . array_element
    (60) location -> . array_slice
    (107) literal -> . integer_literal
    (108) literal -> . boolean_literal
    (109) literal -> . character_literal
    (110) literal -> . empty_literal
    (111) literal -> . character_string_literal
    (21) identifier -> . ID
    (61) dereferenced_reference -> . array_location ARROW
    (62) string_element -> . identifier LBRACKET start_element LBRACKET
    (64) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (67) array_element -> . array_location LBRACKET expression_list RBRACKET
    (70) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (112) integer_literal -> . ICONST
    (113) boolean_literal -> . TRUE
    (114) boolean_literal -> . FALSE
    (115) character_literal -> . CCONST
    (116) empty_literal -> . NULL
    (117) character_string_literal -> . SCONST

    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 67
    ID              shift and go to state 10
    ICONST          shift and go to state 88
    TRUE            shift and go to state 69
    FALSE           shift and go to state 90
    CCONST          shift and go to state 86
    NULL            shift and go to state 74
    SCONST          shift and go to state 64

    operand1                       shift and go to state 77
    array_slice                    shift and go to state 71
    operand3                       shift and go to state 61
    operand0                       shift and go to state 79
    boolean_literal                shift and go to state 81
    string_slice                   shift and go to state 63
    identifier                     shift and go to state 82
    location                       shift and go to state 65
    referenced_location            shift and go to state 66
    empty_literal                  shift and go to state 76
    literal                        shift and go to state 83
    literal_range                  shift and go to state 99
    dereferenced_reference         shift and go to state 62
    string_element                 shift and go to state 78
    operand2                       shift and go to state 68
    character_string_literal       shift and go to state 87
    integer_literal                shift and go to state 85
    monadic_operator               shift and go to state 70
    array_location                 shift and go to state 80
    character_literal              shift and go to state 72
    array_element                  shift and go to state 75
    expression                     shift and go to state 101
    operand4                       shift and go to state 92
    lower_bound                    shift and go to state 100
    primitive_value                shift and go to state 89

state 58

    (49) array_mode -> ARRAY LBRACKET . index_mode_list RBRACKET element_mode
    (50) index_mode_list -> . index_mode
    (51) index_mode_list -> . index_mode COMMA index_mode_list
    (52) index_mode -> . discrete_mode
    (53) index_mode -> . literal_range
    (31) discrete_mode -> . integer_mode
    (32) discrete_mode -> . boolean_mode
    (33) discrete_mode -> . character_mode
    (34) discrete_mode -> . discrete_range_mode
    (41) literal_range -> . lower_bound COLON upper_bound
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (42) lower_bound -> . expression
    (35) discrete_mode_name -> . identifier
    (72) expression -> . operand0
    (21) identifier -> . ID
    (73) operand0 -> . operand1
    (74) operand0 -> . operand0 operator1 operand1
    (75) operand1 -> . operand2
    (76) operand1 -> . operand1 operator2 operand2
    (77) operand2 -> . operand3
    (78) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (79) operand3 -> . monadic_operator operand4
    (80) operand3 -> . operand4
    (87) monadic_operator -> . MINUS
    (88) monadic_operator -> . NOT
    (81) operand4 -> . array_location
    (82) operand4 -> . referenced_location
    (83) operand4 -> . primitive_value
    (71) array_location -> . location
    (89) referenced_location -> . ARROW array_location
    (106) primitive_value -> . literal
    (55) location -> . identifier
    (56) location -> . dereferenced_reference
    (57) location -> . string_element
    (58) location -> . string_slice
    (59) location -> . array_element
    (60) location -> . array_slice
    (107) literal -> . integer_literal
    (108) literal -> . boolean_literal
    (109) literal -> . character_literal
    (110) literal -> . empty_literal
    (111) literal -> . character_string_literal
    (61) dereferenced_reference -> . array_location ARROW
    (62) string_element -> . identifier LBRACKET start_element LBRACKET
    (64) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (67) array_element -> . array_location LBRACKET expression_list RBRACKET
    (70) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (112) integer_literal -> . ICONST
    (113) boolean_literal -> . TRUE
    (114) boolean_literal -> . FALSE
    (115) character_literal -> . CCONST
    (116) empty_literal -> . NULL
    (117) character_string_literal -> . SCONST

    INT             shift and go to state 48
    BOOL            shift and go to state 38
    CHAR            shift and go to state 35
    ID              shift and go to state 10
    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 67
    ICONST          shift and go to state 88
    TRUE            shift and go to state 69
    FALSE           shift and go to state 90
    CCONST          shift and go to state 86
    NULL            shift and go to state 74
    SCONST          shift and go to state 64

    operand1                       shift and go to state 77
    array_slice                    shift and go to state 71
    operand3                       shift and go to state 61
    operand4                       shift and go to state 92
    discrete_mode_name             shift and go to state 31
    boolean_literal                shift and go to state 81
    string_slice                   shift and go to state 63
    identifier                     shift and go to state 103
    location                       shift and go to state 65
    referenced_location            shift and go to state 66
    empty_literal                  shift and go to state 76
    index_mode_list                shift and go to state 105
    boolean_mode                   shift and go to state 36
    dereferenced_reference         shift and go to state 62
    string_element                 shift and go to state 78
    operand2                       shift and go to state 68
    character_string_literal       shift and go to state 87
    index_mode                     shift and go to state 104
    integer_literal                shift and go to state 85
    discrete_mode                  shift and go to state 106
    monadic_operator               shift and go to state 70
    discrete_range_mode            shift and go to state 41
    primitive_value                shift and go to state 89
    literal_range                  shift and go to state 102
    array_location                 shift and go to state 80
    literal                        shift and go to state 83
    character_literal              shift and go to state 72
    array_element                  shift and go to state 75
    character_mode                 shift and go to state 43
    expression                     shift and go to state 101
    operand0                       shift and go to state 79
    lower_bound                    shift and go to state 100
    integer_mode                   shift and go to state 46

state 59

    (44) reference_mode -> REF mode .

    COMMA           reduce using rule 44 (reference_mode -> REF mode .)
    SEMI            reduce using rule 44 (reference_mode -> REF mode .)
    ASSIGN          reduce using rule 44 (reference_mode -> REF mode .)


state 60

    (47) string_mode -> CHARS LBRACKET . string_length RBRACKET
    (48) string_length -> . integer_literal
    (112) integer_literal -> . ICONST

    ICONST          shift and go to state 88

    integer_literal                shift and go to state 108
    string_length                  shift and go to state 107

state 61

    (77) operand2 -> operand3 .

    TIMES           reduce using rule 77 (operand2 -> operand3 .)
    DIVIDE          reduce using rule 77 (operand2 -> operand3 .)
    MODULO          reduce using rule 77 (operand2 -> operand3 .)
    PLUS            reduce using rule 77 (operand2 -> operand3 .)
    MINUS           reduce using rule 77 (operand2 -> operand3 .)
    CONCAT          reduce using rule 77 (operand2 -> operand3 .)
    AND             reduce using rule 77 (operand2 -> operand3 .)
    OR              reduce using rule 77 (operand2 -> operand3 .)
    EQUAL           reduce using rule 77 (operand2 -> operand3 .)
    NOTEQ           reduce using rule 77 (operand2 -> operand3 .)
    GREATER         reduce using rule 77 (operand2 -> operand3 .)
    GTEQUAL         reduce using rule 77 (operand2 -> operand3 .)
    LESS            reduce using rule 77 (operand2 -> operand3 .)
    LTEQUAL         reduce using rule 77 (operand2 -> operand3 .)
    IN              reduce using rule 77 (operand2 -> operand3 .)
    COMMA           reduce using rule 77 (operand2 -> operand3 .)
    SEMI            reduce using rule 77 (operand2 -> operand3 .)
    COLON           reduce using rule 77 (operand2 -> operand3 .)
    RBRACKET        reduce using rule 77 (operand2 -> operand3 .)
    LBRACKET        reduce using rule 77 (operand2 -> operand3 .)
    RPAREN          reduce using rule 77 (operand2 -> operand3 .)


state 62

    (56) location -> dereferenced_reference .

    ARROW           reduce using rule 56 (location -> dereferenced_reference .)
    LBRACKET        reduce using rule 56 (location -> dereferenced_reference .)
    TIMES           reduce using rule 56 (location -> dereferenced_reference .)
    DIVIDE          reduce using rule 56 (location -> dereferenced_reference .)
    MODULO          reduce using rule 56 (location -> dereferenced_reference .)
    PLUS            reduce using rule 56 (location -> dereferenced_reference .)
    MINUS           reduce using rule 56 (location -> dereferenced_reference .)
    CONCAT          reduce using rule 56 (location -> dereferenced_reference .)
    AND             reduce using rule 56 (location -> dereferenced_reference .)
    OR              reduce using rule 56 (location -> dereferenced_reference .)
    EQUAL           reduce using rule 56 (location -> dereferenced_reference .)
    NOTEQ           reduce using rule 56 (location -> dereferenced_reference .)
    GREATER         reduce using rule 56 (location -> dereferenced_reference .)
    GTEQUAL         reduce using rule 56 (location -> dereferenced_reference .)
    LESS            reduce using rule 56 (location -> dereferenced_reference .)
    LTEQUAL         reduce using rule 56 (location -> dereferenced_reference .)
    IN              reduce using rule 56 (location -> dereferenced_reference .)
    COLON           reduce using rule 56 (location -> dereferenced_reference .)
    COMMA           reduce using rule 56 (location -> dereferenced_reference .)
    SEMI            reduce using rule 56 (location -> dereferenced_reference .)
    RPAREN          reduce using rule 56 (location -> dereferenced_reference .)
    RBRACKET        reduce using rule 56 (location -> dereferenced_reference .)


state 63

    (58) location -> string_slice .

    ARROW           reduce using rule 58 (location -> string_slice .)
    LBRACKET        reduce using rule 58 (location -> string_slice .)
    TIMES           reduce using rule 58 (location -> string_slice .)
    DIVIDE          reduce using rule 58 (location -> string_slice .)
    MODULO          reduce using rule 58 (location -> string_slice .)
    PLUS            reduce using rule 58 (location -> string_slice .)
    MINUS           reduce using rule 58 (location -> string_slice .)
    CONCAT          reduce using rule 58 (location -> string_slice .)
    AND             reduce using rule 58 (location -> string_slice .)
    OR              reduce using rule 58 (location -> string_slice .)
    EQUAL           reduce using rule 58 (location -> string_slice .)
    NOTEQ           reduce using rule 58 (location -> string_slice .)
    GREATER         reduce using rule 58 (location -> string_slice .)
    GTEQUAL         reduce using rule 58 (location -> string_slice .)
    LESS            reduce using rule 58 (location -> string_slice .)
    LTEQUAL         reduce using rule 58 (location -> string_slice .)
    IN              reduce using rule 58 (location -> string_slice .)
    COLON           reduce using rule 58 (location -> string_slice .)
    COMMA           reduce using rule 58 (location -> string_slice .)
    SEMI            reduce using rule 58 (location -> string_slice .)
    RPAREN          reduce using rule 58 (location -> string_slice .)
    RBRACKET        reduce using rule 58 (location -> string_slice .)


state 64

    (117) character_string_literal -> SCONST .

    TIMES           reduce using rule 117 (character_string_literal -> SCONST .)
    DIVIDE          reduce using rule 117 (character_string_literal -> SCONST .)
    MODULO          reduce using rule 117 (character_string_literal -> SCONST .)
    PLUS            reduce using rule 117 (character_string_literal -> SCONST .)
    MINUS           reduce using rule 117 (character_string_literal -> SCONST .)
    CONCAT          reduce using rule 117 (character_string_literal -> SCONST .)
    AND             reduce using rule 117 (character_string_literal -> SCONST .)
    OR              reduce using rule 117 (character_string_literal -> SCONST .)
    EQUAL           reduce using rule 117 (character_string_literal -> SCONST .)
    NOTEQ           reduce using rule 117 (character_string_literal -> SCONST .)
    GREATER         reduce using rule 117 (character_string_literal -> SCONST .)
    GTEQUAL         reduce using rule 117 (character_string_literal -> SCONST .)
    LESS            reduce using rule 117 (character_string_literal -> SCONST .)
    LTEQUAL         reduce using rule 117 (character_string_literal -> SCONST .)
    IN              reduce using rule 117 (character_string_literal -> SCONST .)
    COMMA           reduce using rule 117 (character_string_literal -> SCONST .)
    RBRACKET        reduce using rule 117 (character_string_literal -> SCONST .)
    COLON           reduce using rule 117 (character_string_literal -> SCONST .)
    LBRACKET        reduce using rule 117 (character_string_literal -> SCONST .)
    SEMI            reduce using rule 117 (character_string_literal -> SCONST .)
    RPAREN          reduce using rule 117 (character_string_literal -> SCONST .)


state 65

    (71) array_location -> location .

    ARROW           reduce using rule 71 (array_location -> location .)
    LBRACKET        reduce using rule 71 (array_location -> location .)
    TIMES           reduce using rule 71 (array_location -> location .)
    DIVIDE          reduce using rule 71 (array_location -> location .)
    MODULO          reduce using rule 71 (array_location -> location .)
    PLUS            reduce using rule 71 (array_location -> location .)
    MINUS           reduce using rule 71 (array_location -> location .)
    CONCAT          reduce using rule 71 (array_location -> location .)
    AND             reduce using rule 71 (array_location -> location .)
    OR              reduce using rule 71 (array_location -> location .)
    EQUAL           reduce using rule 71 (array_location -> location .)
    NOTEQ           reduce using rule 71 (array_location -> location .)
    GREATER         reduce using rule 71 (array_location -> location .)
    GTEQUAL         reduce using rule 71 (array_location -> location .)
    LESS            reduce using rule 71 (array_location -> location .)
    LTEQUAL         reduce using rule 71 (array_location -> location .)
    IN              reduce using rule 71 (array_location -> location .)
    COMMA           reduce using rule 71 (array_location -> location .)
    SEMI            reduce using rule 71 (array_location -> location .)
    RBRACKET        reduce using rule 71 (array_location -> location .)
    COLON           reduce using rule 71 (array_location -> location .)
    RPAREN          reduce using rule 71 (array_location -> location .)


state 66

    (82) operand4 -> referenced_location .

    TIMES           reduce using rule 82 (operand4 -> referenced_location .)
    DIVIDE          reduce using rule 82 (operand4 -> referenced_location .)
    MODULO          reduce using rule 82 (operand4 -> referenced_location .)
    PLUS            reduce using rule 82 (operand4 -> referenced_location .)
    MINUS           reduce using rule 82 (operand4 -> referenced_location .)
    CONCAT          reduce using rule 82 (operand4 -> referenced_location .)
    AND             reduce using rule 82 (operand4 -> referenced_location .)
    OR              reduce using rule 82 (operand4 -> referenced_location .)
    EQUAL           reduce using rule 82 (operand4 -> referenced_location .)
    NOTEQ           reduce using rule 82 (operand4 -> referenced_location .)
    GREATER         reduce using rule 82 (operand4 -> referenced_location .)
    GTEQUAL         reduce using rule 82 (operand4 -> referenced_location .)
    LESS            reduce using rule 82 (operand4 -> referenced_location .)
    LTEQUAL         reduce using rule 82 (operand4 -> referenced_location .)
    IN              reduce using rule 82 (operand4 -> referenced_location .)
    LBRACKET        reduce using rule 82 (operand4 -> referenced_location .)
    COLON           reduce using rule 82 (operand4 -> referenced_location .)
    COMMA           reduce using rule 82 (operand4 -> referenced_location .)
    SEMI            reduce using rule 82 (operand4 -> referenced_location .)
    RBRACKET        reduce using rule 82 (operand4 -> referenced_location .)
    RPAREN          reduce using rule 82 (operand4 -> referenced_location .)


state 67

    (89) referenced_location -> ARROW . array_location
    (71) array_location -> . location
    (55) location -> . identifier
    (56) location -> . dereferenced_reference
    (57) location -> . string_element
    (58) location -> . string_slice
    (59) location -> . array_element
    (60) location -> . array_slice
    (21) identifier -> . ID
    (61) dereferenced_reference -> . array_location ARROW
    (62) string_element -> . identifier LBRACKET start_element LBRACKET
    (64) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (67) array_element -> . array_location LBRACKET expression_list RBRACKET
    (70) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    ID              shift and go to state 10

    identifier                     shift and go to state 82
    string_element                 shift and go to state 78
    dereferenced_reference         shift and go to state 62
    string_slice                   shift and go to state 63
    array_slice                    shift and go to state 71
    array_element                  shift and go to state 75
    location                       shift and go to state 65
    array_location                 shift and go to state 109

state 68

    (75) operand1 -> operand2 .
    (78) operand2 -> operand2 . arithmetic_multiplicative_operator operand3
    (84) arithmetic_multiplicative_operator -> . TIMES
    (85) arithmetic_multiplicative_operator -> . DIVIDE
    (86) arithmetic_multiplicative_operator -> . MODULO

    PLUS            reduce using rule 75 (operand1 -> operand2 .)
    MINUS           reduce using rule 75 (operand1 -> operand2 .)
    CONCAT          reduce using rule 75 (operand1 -> operand2 .)
    AND             reduce using rule 75 (operand1 -> operand2 .)
    OR              reduce using rule 75 (operand1 -> operand2 .)
    EQUAL           reduce using rule 75 (operand1 -> operand2 .)
    NOTEQ           reduce using rule 75 (operand1 -> operand2 .)
    GREATER         reduce using rule 75 (operand1 -> operand2 .)
    GTEQUAL         reduce using rule 75 (operand1 -> operand2 .)
    LESS            reduce using rule 75 (operand1 -> operand2 .)
    LTEQUAL         reduce using rule 75 (operand1 -> operand2 .)
    IN              reduce using rule 75 (operand1 -> operand2 .)
    COLON           reduce using rule 75 (operand1 -> operand2 .)
    COMMA           reduce using rule 75 (operand1 -> operand2 .)
    SEMI            reduce using rule 75 (operand1 -> operand2 .)
    RBRACKET        reduce using rule 75 (operand1 -> operand2 .)
    LBRACKET        reduce using rule 75 (operand1 -> operand2 .)
    RPAREN          reduce using rule 75 (operand1 -> operand2 .)
    TIMES           shift and go to state 110
    DIVIDE          shift and go to state 111
    MODULO          shift and go to state 113

    arithmetic_multiplicative_operator shift and go to state 112

state 69

    (113) boolean_literal -> TRUE .

    TIMES           reduce using rule 113 (boolean_literal -> TRUE .)
    DIVIDE          reduce using rule 113 (boolean_literal -> TRUE .)
    MODULO          reduce using rule 113 (boolean_literal -> TRUE .)
    PLUS            reduce using rule 113 (boolean_literal -> TRUE .)
    MINUS           reduce using rule 113 (boolean_literal -> TRUE .)
    CONCAT          reduce using rule 113 (boolean_literal -> TRUE .)
    AND             reduce using rule 113 (boolean_literal -> TRUE .)
    OR              reduce using rule 113 (boolean_literal -> TRUE .)
    EQUAL           reduce using rule 113 (boolean_literal -> TRUE .)
    NOTEQ           reduce using rule 113 (boolean_literal -> TRUE .)
    GREATER         reduce using rule 113 (boolean_literal -> TRUE .)
    GTEQUAL         reduce using rule 113 (boolean_literal -> TRUE .)
    LESS            reduce using rule 113 (boolean_literal -> TRUE .)
    LTEQUAL         reduce using rule 113 (boolean_literal -> TRUE .)
    IN              reduce using rule 113 (boolean_literal -> TRUE .)
    COMMA           reduce using rule 113 (boolean_literal -> TRUE .)
    SEMI            reduce using rule 113 (boolean_literal -> TRUE .)
    COLON           reduce using rule 113 (boolean_literal -> TRUE .)
    RBRACKET        reduce using rule 113 (boolean_literal -> TRUE .)
    LBRACKET        reduce using rule 113 (boolean_literal -> TRUE .)
    RPAREN          reduce using rule 113 (boolean_literal -> TRUE .)


state 70

    (79) operand3 -> monadic_operator . operand4
    (81) operand4 -> . array_location
    (82) operand4 -> . referenced_location
    (83) operand4 -> . primitive_value
    (71) array_location -> . location
    (89) referenced_location -> . ARROW array_location
    (106) primitive_value -> . literal
    (55) location -> . identifier
    (56) location -> . dereferenced_reference
    (57) location -> . string_element
    (58) location -> . string_slice
    (59) location -> . array_element
    (60) location -> . array_slice
    (107) literal -> . integer_literal
    (108) literal -> . boolean_literal
    (109) literal -> . character_literal
    (110) literal -> . empty_literal
    (111) literal -> . character_string_literal
    (21) identifier -> . ID
    (61) dereferenced_reference -> . array_location ARROW
    (62) string_element -> . identifier LBRACKET start_element LBRACKET
    (64) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (67) array_element -> . array_location LBRACKET expression_list RBRACKET
    (70) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (112) integer_literal -> . ICONST
    (113) boolean_literal -> . TRUE
    (114) boolean_literal -> . FALSE
    (115) character_literal -> . CCONST
    (116) empty_literal -> . NULL
    (117) character_string_literal -> . SCONST

    ARROW           shift and go to state 67
    ID              shift and go to state 10
    ICONST          shift and go to state 88
    TRUE            shift and go to state 69
    FALSE           shift and go to state 90
    CCONST          shift and go to state 86
    NULL            shift and go to state 74
    SCONST          shift and go to state 64

    string_element                 shift and go to state 78
    array_location                 shift and go to state 80
    boolean_literal                shift and go to state 81
    string_slice                   shift and go to state 63
    identifier                     shift and go to state 82
    referenced_location            shift and go to state 66
    literal                        shift and go to state 83
    location                       shift and go to state 65
    dereferenced_reference         shift and go to state 62
    character_string_literal       shift and go to state 87
    integer_literal                shift and go to state 85
    array_slice                    shift and go to state 71
    character_literal              shift and go to state 72
    array_element                  shift and go to state 75
    operand4                       shift and go to state 114
    primitive_value                shift and go to state 89
    empty_literal                  shift and go to state 76

state 71

    (60) location -> array_slice .

    ARROW           reduce using rule 60 (location -> array_slice .)
    LBRACKET        reduce using rule 60 (location -> array_slice .)
    TIMES           reduce using rule 60 (location -> array_slice .)
    DIVIDE          reduce using rule 60 (location -> array_slice .)
    MODULO          reduce using rule 60 (location -> array_slice .)
    PLUS            reduce using rule 60 (location -> array_slice .)
    MINUS           reduce using rule 60 (location -> array_slice .)
    CONCAT          reduce using rule 60 (location -> array_slice .)
    AND             reduce using rule 60 (location -> array_slice .)
    OR              reduce using rule 60 (location -> array_slice .)
    EQUAL           reduce using rule 60 (location -> array_slice .)
    NOTEQ           reduce using rule 60 (location -> array_slice .)
    GREATER         reduce using rule 60 (location -> array_slice .)
    GTEQUAL         reduce using rule 60 (location -> array_slice .)
    LESS            reduce using rule 60 (location -> array_slice .)
    LTEQUAL         reduce using rule 60 (location -> array_slice .)
    IN              reduce using rule 60 (location -> array_slice .)
    COLON           reduce using rule 60 (location -> array_slice .)
    COMMA           reduce using rule 60 (location -> array_slice .)
    SEMI            reduce using rule 60 (location -> array_slice .)
    RPAREN          reduce using rule 60 (location -> array_slice .)
    RBRACKET        reduce using rule 60 (location -> array_slice .)


state 72

    (109) literal -> character_literal .

    TIMES           reduce using rule 109 (literal -> character_literal .)
    DIVIDE          reduce using rule 109 (literal -> character_literal .)
    MODULO          reduce using rule 109 (literal -> character_literal .)
    PLUS            reduce using rule 109 (literal -> character_literal .)
    MINUS           reduce using rule 109 (literal -> character_literal .)
    CONCAT          reduce using rule 109 (literal -> character_literal .)
    AND             reduce using rule 109 (literal -> character_literal .)
    OR              reduce using rule 109 (literal -> character_literal .)
    EQUAL           reduce using rule 109 (literal -> character_literal .)
    NOTEQ           reduce using rule 109 (literal -> character_literal .)
    GREATER         reduce using rule 109 (literal -> character_literal .)
    GTEQUAL         reduce using rule 109 (literal -> character_literal .)
    LESS            reduce using rule 109 (literal -> character_literal .)
    LTEQUAL         reduce using rule 109 (literal -> character_literal .)
    IN              reduce using rule 109 (literal -> character_literal .)
    RBRACKET        reduce using rule 109 (literal -> character_literal .)
    COLON           reduce using rule 109 (literal -> character_literal .)
    LBRACKET        reduce using rule 109 (literal -> character_literal .)
    COMMA           reduce using rule 109 (literal -> character_literal .)
    SEMI            reduce using rule 109 (literal -> character_literal .)
    RPAREN          reduce using rule 109 (literal -> character_literal .)


state 73

    (87) monadic_operator -> MINUS .

    ARROW           reduce using rule 87 (monadic_operator -> MINUS .)
    ID              reduce using rule 87 (monadic_operator -> MINUS .)
    ICONST          reduce using rule 87 (monadic_operator -> MINUS .)
    TRUE            reduce using rule 87 (monadic_operator -> MINUS .)
    FALSE           reduce using rule 87 (monadic_operator -> MINUS .)
    CCONST          reduce using rule 87 (monadic_operator -> MINUS .)
    NULL            reduce using rule 87 (monadic_operator -> MINUS .)
    SCONST          reduce using rule 87 (monadic_operator -> MINUS .)


state 74

    (116) empty_literal -> NULL .

    TIMES           reduce using rule 116 (empty_literal -> NULL .)
    DIVIDE          reduce using rule 116 (empty_literal -> NULL .)
    MODULO          reduce using rule 116 (empty_literal -> NULL .)
    PLUS            reduce using rule 116 (empty_literal -> NULL .)
    MINUS           reduce using rule 116 (empty_literal -> NULL .)
    CONCAT          reduce using rule 116 (empty_literal -> NULL .)
    AND             reduce using rule 116 (empty_literal -> NULL .)
    OR              reduce using rule 116 (empty_literal -> NULL .)
    EQUAL           reduce using rule 116 (empty_literal -> NULL .)
    NOTEQ           reduce using rule 116 (empty_literal -> NULL .)
    GREATER         reduce using rule 116 (empty_literal -> NULL .)
    GTEQUAL         reduce using rule 116 (empty_literal -> NULL .)
    LESS            reduce using rule 116 (empty_literal -> NULL .)
    LTEQUAL         reduce using rule 116 (empty_literal -> NULL .)
    IN              reduce using rule 116 (empty_literal -> NULL .)
    COLON           reduce using rule 116 (empty_literal -> NULL .)
    COMMA           reduce using rule 116 (empty_literal -> NULL .)
    SEMI            reduce using rule 116 (empty_literal -> NULL .)
    RBRACKET        reduce using rule 116 (empty_literal -> NULL .)
    LBRACKET        reduce using rule 116 (empty_literal -> NULL .)
    RPAREN          reduce using rule 116 (empty_literal -> NULL .)


state 75

    (59) location -> array_element .

    ARROW           reduce using rule 59 (location -> array_element .)
    LBRACKET        reduce using rule 59 (location -> array_element .)
    TIMES           reduce using rule 59 (location -> array_element .)
    DIVIDE          reduce using rule 59 (location -> array_element .)
    MODULO          reduce using rule 59 (location -> array_element .)
    PLUS            reduce using rule 59 (location -> array_element .)
    MINUS           reduce using rule 59 (location -> array_element .)
    CONCAT          reduce using rule 59 (location -> array_element .)
    AND             reduce using rule 59 (location -> array_element .)
    OR              reduce using rule 59 (location -> array_element .)
    EQUAL           reduce using rule 59 (location -> array_element .)
    NOTEQ           reduce using rule 59 (location -> array_element .)
    GREATER         reduce using rule 59 (location -> array_element .)
    GTEQUAL         reduce using rule 59 (location -> array_element .)
    LESS            reduce using rule 59 (location -> array_element .)
    LTEQUAL         reduce using rule 59 (location -> array_element .)
    IN              reduce using rule 59 (location -> array_element .)
    COLON           reduce using rule 59 (location -> array_element .)
    COMMA           reduce using rule 59 (location -> array_element .)
    SEMI            reduce using rule 59 (location -> array_element .)
    RPAREN          reduce using rule 59 (location -> array_element .)
    RBRACKET        reduce using rule 59 (location -> array_element .)


state 76

    (110) literal -> empty_literal .

    TIMES           reduce using rule 110 (literal -> empty_literal .)
    DIVIDE          reduce using rule 110 (literal -> empty_literal .)
    MODULO          reduce using rule 110 (literal -> empty_literal .)
    PLUS            reduce using rule 110 (literal -> empty_literal .)
    MINUS           reduce using rule 110 (literal -> empty_literal .)
    CONCAT          reduce using rule 110 (literal -> empty_literal .)
    AND             reduce using rule 110 (literal -> empty_literal .)
    OR              reduce using rule 110 (literal -> empty_literal .)
    EQUAL           reduce using rule 110 (literal -> empty_literal .)
    NOTEQ           reduce using rule 110 (literal -> empty_literal .)
    GREATER         reduce using rule 110 (literal -> empty_literal .)
    GTEQUAL         reduce using rule 110 (literal -> empty_literal .)
    LESS            reduce using rule 110 (literal -> empty_literal .)
    LTEQUAL         reduce using rule 110 (literal -> empty_literal .)
    IN              reduce using rule 110 (literal -> empty_literal .)
    RBRACKET        reduce using rule 110 (literal -> empty_literal .)
    COLON           reduce using rule 110 (literal -> empty_literal .)
    LBRACKET        reduce using rule 110 (literal -> empty_literal .)
    COMMA           reduce using rule 110 (literal -> empty_literal .)
    SEMI            reduce using rule 110 (literal -> empty_literal .)
    RPAREN          reduce using rule 110 (literal -> empty_literal .)


state 77

    (73) operand0 -> operand1 .
    (76) operand1 -> operand1 . operator2 operand2
    (92) operator2 -> . arithmetic_additive_operator
    (93) operator2 -> . string_concatenation_operator
    (94) arithmetic_additive_operator -> . PLUS
    (95) arithmetic_additive_operator -> . MINUS
    (96) string_concatenation_operator -> . CONCAT

    AND             reduce using rule 73 (operand0 -> operand1 .)
    OR              reduce using rule 73 (operand0 -> operand1 .)
    EQUAL           reduce using rule 73 (operand0 -> operand1 .)
    NOTEQ           reduce using rule 73 (operand0 -> operand1 .)
    GREATER         reduce using rule 73 (operand0 -> operand1 .)
    GTEQUAL         reduce using rule 73 (operand0 -> operand1 .)
    LESS            reduce using rule 73 (operand0 -> operand1 .)
    LTEQUAL         reduce using rule 73 (operand0 -> operand1 .)
    IN              reduce using rule 73 (operand0 -> operand1 .)
    COMMA           reduce using rule 73 (operand0 -> operand1 .)
    SEMI            reduce using rule 73 (operand0 -> operand1 .)
    RPAREN          reduce using rule 73 (operand0 -> operand1 .)
    RBRACKET        reduce using rule 73 (operand0 -> operand1 .)
    COLON           reduce using rule 73 (operand0 -> operand1 .)
    LBRACKET        reduce using rule 73 (operand0 -> operand1 .)
    PLUS            shift and go to state 117
    MINUS           shift and go to state 120
    CONCAT          shift and go to state 116

    arithmetic_additive_operator   shift and go to state 115
    operator2                      shift and go to state 119
    string_concatenation_operator  shift and go to state 118

state 78

    (57) location -> string_element .

    ARROW           reduce using rule 57 (location -> string_element .)
    LBRACKET        reduce using rule 57 (location -> string_element .)
    TIMES           reduce using rule 57 (location -> string_element .)
    DIVIDE          reduce using rule 57 (location -> string_element .)
    MODULO          reduce using rule 57 (location -> string_element .)
    PLUS            reduce using rule 57 (location -> string_element .)
    MINUS           reduce using rule 57 (location -> string_element .)
    CONCAT          reduce using rule 57 (location -> string_element .)
    AND             reduce using rule 57 (location -> string_element .)
    OR              reduce using rule 57 (location -> string_element .)
    EQUAL           reduce using rule 57 (location -> string_element .)
    NOTEQ           reduce using rule 57 (location -> string_element .)
    GREATER         reduce using rule 57 (location -> string_element .)
    GTEQUAL         reduce using rule 57 (location -> string_element .)
    LESS            reduce using rule 57 (location -> string_element .)
    LTEQUAL         reduce using rule 57 (location -> string_element .)
    IN              reduce using rule 57 (location -> string_element .)
    COLON           reduce using rule 57 (location -> string_element .)
    COMMA           reduce using rule 57 (location -> string_element .)
    SEMI            reduce using rule 57 (location -> string_element .)
    RPAREN          reduce using rule 57 (location -> string_element .)
    RBRACKET        reduce using rule 57 (location -> string_element .)


state 79

    (72) expression -> operand0 .
    (74) operand0 -> operand0 . operator1 operand1
    (90) operator1 -> . relational_operator
    (91) operator1 -> . membership_operator
    (97) relational_operator -> . AND
    (98) relational_operator -> . OR
    (99) relational_operator -> . EQUAL
    (100) relational_operator -> . NOTEQ
    (101) relational_operator -> . GREATER
    (102) relational_operator -> . GTEQUAL
    (103) relational_operator -> . LESS
    (104) relational_operator -> . LTEQUAL
    (105) membership_operator -> . IN

    RBRACKET        reduce using rule 72 (expression -> operand0 .)
    COMMA           reduce using rule 72 (expression -> operand0 .)
    SEMI            reduce using rule 72 (expression -> operand0 .)
    COLON           reduce using rule 72 (expression -> operand0 .)
    RPAREN          reduce using rule 72 (expression -> operand0 .)
    LBRACKET        reduce using rule 72 (expression -> operand0 .)
    AND             shift and go to state 131
    OR              shift and go to state 121
    EQUAL           shift and go to state 126
    NOTEQ           shift and go to state 129
    GREATER         shift and go to state 123
    GTEQUAL         shift and go to state 128
    LESS            shift and go to state 124
    LTEQUAL         shift and go to state 132
    IN              shift and go to state 127

    membership_operator            shift and go to state 125
    relational_operator            shift and go to state 122
    operator1                      shift and go to state 130

state 80

    (81) operand4 -> array_location .
    (61) dereferenced_reference -> array_location . ARROW
    (67) array_element -> array_location . LBRACKET expression_list RBRACKET
    (70) array_slice -> array_location . LBRACKET lower_bound COLON upper_bound RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    TIMES           reduce using rule 81 (operand4 -> array_location .)
    DIVIDE          reduce using rule 81 (operand4 -> array_location .)
    MODULO          reduce using rule 81 (operand4 -> array_location .)
    PLUS            reduce using rule 81 (operand4 -> array_location .)
    MINUS           reduce using rule 81 (operand4 -> array_location .)
    CONCAT          reduce using rule 81 (operand4 -> array_location .)
    AND             reduce using rule 81 (operand4 -> array_location .)
    OR              reduce using rule 81 (operand4 -> array_location .)
    EQUAL           reduce using rule 81 (operand4 -> array_location .)
    NOTEQ           reduce using rule 81 (operand4 -> array_location .)
    GREATER         reduce using rule 81 (operand4 -> array_location .)
    GTEQUAL         reduce using rule 81 (operand4 -> array_location .)
    LESS            reduce using rule 81 (operand4 -> array_location .)
    LTEQUAL         reduce using rule 81 (operand4 -> array_location .)
    IN              reduce using rule 81 (operand4 -> array_location .)
    COLON           reduce using rule 81 (operand4 -> array_location .)
    COMMA           reduce using rule 81 (operand4 -> array_location .)
    SEMI            reduce using rule 81 (operand4 -> array_location .)
    RBRACKET        reduce using rule 81 (operand4 -> array_location .)
    RPAREN          reduce using rule 81 (operand4 -> array_location .)
    ARROW           shift and go to state 134
    LBRACKET        shift and go to state 133

  ! LBRACKET        [ reduce using rule 81 (operand4 -> array_location .) ]


state 81

    (108) literal -> boolean_literal .

    TIMES           reduce using rule 108 (literal -> boolean_literal .)
    DIVIDE          reduce using rule 108 (literal -> boolean_literal .)
    MODULO          reduce using rule 108 (literal -> boolean_literal .)
    PLUS            reduce using rule 108 (literal -> boolean_literal .)
    MINUS           reduce using rule 108 (literal -> boolean_literal .)
    CONCAT          reduce using rule 108 (literal -> boolean_literal .)
    AND             reduce using rule 108 (literal -> boolean_literal .)
    OR              reduce using rule 108 (literal -> boolean_literal .)
    EQUAL           reduce using rule 108 (literal -> boolean_literal .)
    NOTEQ           reduce using rule 108 (literal -> boolean_literal .)
    GREATER         reduce using rule 108 (literal -> boolean_literal .)
    GTEQUAL         reduce using rule 108 (literal -> boolean_literal .)
    LESS            reduce using rule 108 (literal -> boolean_literal .)
    LTEQUAL         reduce using rule 108 (literal -> boolean_literal .)
    IN              reduce using rule 108 (literal -> boolean_literal .)
    RBRACKET        reduce using rule 108 (literal -> boolean_literal .)
    COLON           reduce using rule 108 (literal -> boolean_literal .)
    LBRACKET        reduce using rule 108 (literal -> boolean_literal .)
    COMMA           reduce using rule 108 (literal -> boolean_literal .)
    SEMI            reduce using rule 108 (literal -> boolean_literal .)
    RPAREN          reduce using rule 108 (literal -> boolean_literal .)


state 82

    (55) location -> identifier .
    (62) string_element -> identifier . LBRACKET start_element LBRACKET
    (64) string_slice -> identifier . LBRACKET left_element COLON right_element RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    ARROW           reduce using rule 55 (location -> identifier .)
    TIMES           reduce using rule 55 (location -> identifier .)
    DIVIDE          reduce using rule 55 (location -> identifier .)
    MODULO          reduce using rule 55 (location -> identifier .)
    PLUS            reduce using rule 55 (location -> identifier .)
    MINUS           reduce using rule 55 (location -> identifier .)
    CONCAT          reduce using rule 55 (location -> identifier .)
    AND             reduce using rule 55 (location -> identifier .)
    OR              reduce using rule 55 (location -> identifier .)
    EQUAL           reduce using rule 55 (location -> identifier .)
    NOTEQ           reduce using rule 55 (location -> identifier .)
    GREATER         reduce using rule 55 (location -> identifier .)
    GTEQUAL         reduce using rule 55 (location -> identifier .)
    LESS            reduce using rule 55 (location -> identifier .)
    LTEQUAL         reduce using rule 55 (location -> identifier .)
    IN              reduce using rule 55 (location -> identifier .)
    COMMA           reduce using rule 55 (location -> identifier .)
    SEMI            reduce using rule 55 (location -> identifier .)
    RPAREN          reduce using rule 55 (location -> identifier .)
    RBRACKET        reduce using rule 55 (location -> identifier .)
    COLON           reduce using rule 55 (location -> identifier .)
    LBRACKET        shift and go to state 135

  ! LBRACKET        [ reduce using rule 55 (location -> identifier .) ]


state 83

    (106) primitive_value -> literal .

    TIMES           reduce using rule 106 (primitive_value -> literal .)
    DIVIDE          reduce using rule 106 (primitive_value -> literal .)
    MODULO          reduce using rule 106 (primitive_value -> literal .)
    PLUS            reduce using rule 106 (primitive_value -> literal .)
    MINUS           reduce using rule 106 (primitive_value -> literal .)
    CONCAT          reduce using rule 106 (primitive_value -> literal .)
    AND             reduce using rule 106 (primitive_value -> literal .)
    OR              reduce using rule 106 (primitive_value -> literal .)
    EQUAL           reduce using rule 106 (primitive_value -> literal .)
    NOTEQ           reduce using rule 106 (primitive_value -> literal .)
    GREATER         reduce using rule 106 (primitive_value -> literal .)
    GTEQUAL         reduce using rule 106 (primitive_value -> literal .)
    LESS            reduce using rule 106 (primitive_value -> literal .)
    LTEQUAL         reduce using rule 106 (primitive_value -> literal .)
    IN              reduce using rule 106 (primitive_value -> literal .)
    COMMA           reduce using rule 106 (primitive_value -> literal .)
    RBRACKET        reduce using rule 106 (primitive_value -> literal .)
    SEMI            reduce using rule 106 (primitive_value -> literal .)
    COLON           reduce using rule 106 (primitive_value -> literal .)
    LBRACKET        reduce using rule 106 (primitive_value -> literal .)
    RPAREN          reduce using rule 106 (primitive_value -> literal .)


state 84

    (88) monadic_operator -> NOT .

    ARROW           reduce using rule 88 (monadic_operator -> NOT .)
    ID              reduce using rule 88 (monadic_operator -> NOT .)
    ICONST          reduce using rule 88 (monadic_operator -> NOT .)
    TRUE            reduce using rule 88 (monadic_operator -> NOT .)
    FALSE           reduce using rule 88 (monadic_operator -> NOT .)
    CCONST          reduce using rule 88 (monadic_operator -> NOT .)
    NULL            reduce using rule 88 (monadic_operator -> NOT .)
    SCONST          reduce using rule 88 (monadic_operator -> NOT .)


state 85

    (107) literal -> integer_literal .

    TIMES           reduce using rule 107 (literal -> integer_literal .)
    DIVIDE          reduce using rule 107 (literal -> integer_literal .)
    MODULO          reduce using rule 107 (literal -> integer_literal .)
    PLUS            reduce using rule 107 (literal -> integer_literal .)
    MINUS           reduce using rule 107 (literal -> integer_literal .)
    CONCAT          reduce using rule 107 (literal -> integer_literal .)
    AND             reduce using rule 107 (literal -> integer_literal .)
    OR              reduce using rule 107 (literal -> integer_literal .)
    EQUAL           reduce using rule 107 (literal -> integer_literal .)
    NOTEQ           reduce using rule 107 (literal -> integer_literal .)
    GREATER         reduce using rule 107 (literal -> integer_literal .)
    GTEQUAL         reduce using rule 107 (literal -> integer_literal .)
    LESS            reduce using rule 107 (literal -> integer_literal .)
    LTEQUAL         reduce using rule 107 (literal -> integer_literal .)
    IN              reduce using rule 107 (literal -> integer_literal .)
    RBRACKET        reduce using rule 107 (literal -> integer_literal .)
    COLON           reduce using rule 107 (literal -> integer_literal .)
    LBRACKET        reduce using rule 107 (literal -> integer_literal .)
    COMMA           reduce using rule 107 (literal -> integer_literal .)
    SEMI            reduce using rule 107 (literal -> integer_literal .)
    RPAREN          reduce using rule 107 (literal -> integer_literal .)


state 86

    (115) character_literal -> CCONST .

    TIMES           reduce using rule 115 (character_literal -> CCONST .)
    DIVIDE          reduce using rule 115 (character_literal -> CCONST .)
    MODULO          reduce using rule 115 (character_literal -> CCONST .)
    PLUS            reduce using rule 115 (character_literal -> CCONST .)
    MINUS           reduce using rule 115 (character_literal -> CCONST .)
    CONCAT          reduce using rule 115 (character_literal -> CCONST .)
    AND             reduce using rule 115 (character_literal -> CCONST .)
    OR              reduce using rule 115 (character_literal -> CCONST .)
    EQUAL           reduce using rule 115 (character_literal -> CCONST .)
    NOTEQ           reduce using rule 115 (character_literal -> CCONST .)
    GREATER         reduce using rule 115 (character_literal -> CCONST .)
    GTEQUAL         reduce using rule 115 (character_literal -> CCONST .)
    LESS            reduce using rule 115 (character_literal -> CCONST .)
    LTEQUAL         reduce using rule 115 (character_literal -> CCONST .)
    IN              reduce using rule 115 (character_literal -> CCONST .)
    COMMA           reduce using rule 115 (character_literal -> CCONST .)
    SEMI            reduce using rule 115 (character_literal -> CCONST .)
    COLON           reduce using rule 115 (character_literal -> CCONST .)
    RBRACKET        reduce using rule 115 (character_literal -> CCONST .)
    LBRACKET        reduce using rule 115 (character_literal -> CCONST .)
    RPAREN          reduce using rule 115 (character_literal -> CCONST .)


state 87

    (111) literal -> character_string_literal .

    TIMES           reduce using rule 111 (literal -> character_string_literal .)
    DIVIDE          reduce using rule 111 (literal -> character_string_literal .)
    MODULO          reduce using rule 111 (literal -> character_string_literal .)
    PLUS            reduce using rule 111 (literal -> character_string_literal .)
    MINUS           reduce using rule 111 (literal -> character_string_literal .)
    CONCAT          reduce using rule 111 (literal -> character_string_literal .)
    AND             reduce using rule 111 (literal -> character_string_literal .)
    OR              reduce using rule 111 (literal -> character_string_literal .)
    EQUAL           reduce using rule 111 (literal -> character_string_literal .)
    NOTEQ           reduce using rule 111 (literal -> character_string_literal .)
    GREATER         reduce using rule 111 (literal -> character_string_literal .)
    GTEQUAL         reduce using rule 111 (literal -> character_string_literal .)
    LESS            reduce using rule 111 (literal -> character_string_literal .)
    LTEQUAL         reduce using rule 111 (literal -> character_string_literal .)
    IN              reduce using rule 111 (literal -> character_string_literal .)
    RBRACKET        reduce using rule 111 (literal -> character_string_literal .)
    COLON           reduce using rule 111 (literal -> character_string_literal .)
    LBRACKET        reduce using rule 111 (literal -> character_string_literal .)
    COMMA           reduce using rule 111 (literal -> character_string_literal .)
    SEMI            reduce using rule 111 (literal -> character_string_literal .)
    RPAREN          reduce using rule 111 (literal -> character_string_literal .)


state 88

    (112) integer_literal -> ICONST .

    TIMES           reduce using rule 112 (integer_literal -> ICONST .)
    DIVIDE          reduce using rule 112 (integer_literal -> ICONST .)
    MODULO          reduce using rule 112 (integer_literal -> ICONST .)
    PLUS            reduce using rule 112 (integer_literal -> ICONST .)
    MINUS           reduce using rule 112 (integer_literal -> ICONST .)
    CONCAT          reduce using rule 112 (integer_literal -> ICONST .)
    AND             reduce using rule 112 (integer_literal -> ICONST .)
    OR              reduce using rule 112 (integer_literal -> ICONST .)
    EQUAL           reduce using rule 112 (integer_literal -> ICONST .)
    NOTEQ           reduce using rule 112 (integer_literal -> ICONST .)
    GREATER         reduce using rule 112 (integer_literal -> ICONST .)
    GTEQUAL         reduce using rule 112 (integer_literal -> ICONST .)
    LESS            reduce using rule 112 (integer_literal -> ICONST .)
    LTEQUAL         reduce using rule 112 (integer_literal -> ICONST .)
    IN              reduce using rule 112 (integer_literal -> ICONST .)
    COMMA           reduce using rule 112 (integer_literal -> ICONST .)
    SEMI            reduce using rule 112 (integer_literal -> ICONST .)
    RBRACKET        reduce using rule 112 (integer_literal -> ICONST .)
    COLON           reduce using rule 112 (integer_literal -> ICONST .)
    LBRACKET        reduce using rule 112 (integer_literal -> ICONST .)
    RPAREN          reduce using rule 112 (integer_literal -> ICONST .)


state 89

    (83) operand4 -> primitive_value .

    TIMES           reduce using rule 83 (operand4 -> primitive_value .)
    DIVIDE          reduce using rule 83 (operand4 -> primitive_value .)
    MODULO          reduce using rule 83 (operand4 -> primitive_value .)
    PLUS            reduce using rule 83 (operand4 -> primitive_value .)
    MINUS           reduce using rule 83 (operand4 -> primitive_value .)
    CONCAT          reduce using rule 83 (operand4 -> primitive_value .)
    AND             reduce using rule 83 (operand4 -> primitive_value .)
    OR              reduce using rule 83 (operand4 -> primitive_value .)
    EQUAL           reduce using rule 83 (operand4 -> primitive_value .)
    NOTEQ           reduce using rule 83 (operand4 -> primitive_value .)
    GREATER         reduce using rule 83 (operand4 -> primitive_value .)
    GTEQUAL         reduce using rule 83 (operand4 -> primitive_value .)
    LESS            reduce using rule 83 (operand4 -> primitive_value .)
    LTEQUAL         reduce using rule 83 (operand4 -> primitive_value .)
    IN              reduce using rule 83 (operand4 -> primitive_value .)
    LBRACKET        reduce using rule 83 (operand4 -> primitive_value .)
    COLON           reduce using rule 83 (operand4 -> primitive_value .)
    COMMA           reduce using rule 83 (operand4 -> primitive_value .)
    SEMI            reduce using rule 83 (operand4 -> primitive_value .)
    RBRACKET        reduce using rule 83 (operand4 -> primitive_value .)
    RPAREN          reduce using rule 83 (operand4 -> primitive_value .)


state 90

    (114) boolean_literal -> FALSE .

    TIMES           reduce using rule 114 (boolean_literal -> FALSE .)
    DIVIDE          reduce using rule 114 (boolean_literal -> FALSE .)
    MODULO          reduce using rule 114 (boolean_literal -> FALSE .)
    PLUS            reduce using rule 114 (boolean_literal -> FALSE .)
    MINUS           reduce using rule 114 (boolean_literal -> FALSE .)
    CONCAT          reduce using rule 114 (boolean_literal -> FALSE .)
    AND             reduce using rule 114 (boolean_literal -> FALSE .)
    OR              reduce using rule 114 (boolean_literal -> FALSE .)
    EQUAL           reduce using rule 114 (boolean_literal -> FALSE .)
    NOTEQ           reduce using rule 114 (boolean_literal -> FALSE .)
    GREATER         reduce using rule 114 (boolean_literal -> FALSE .)
    GTEQUAL         reduce using rule 114 (boolean_literal -> FALSE .)
    LESS            reduce using rule 114 (boolean_literal -> FALSE .)
    LTEQUAL         reduce using rule 114 (boolean_literal -> FALSE .)
    IN              reduce using rule 114 (boolean_literal -> FALSE .)
    COMMA           reduce using rule 114 (boolean_literal -> FALSE .)
    SEMI            reduce using rule 114 (boolean_literal -> FALSE .)
    COLON           reduce using rule 114 (boolean_literal -> FALSE .)
    RBRACKET        reduce using rule 114 (boolean_literal -> FALSE .)
    LBRACKET        reduce using rule 114 (boolean_literal -> FALSE .)
    RPAREN          reduce using rule 114 (boolean_literal -> FALSE .)


state 91

    (12) synonym_definition -> identifier_list ASSIGN expression .

    COMMA           reduce using rule 12 (synonym_definition -> identifier_list ASSIGN expression .)
    SEMI            reduce using rule 12 (synonym_definition -> identifier_list ASSIGN expression .)


state 92

    (80) operand3 -> operand4 .

    TIMES           reduce using rule 80 (operand3 -> operand4 .)
    DIVIDE          reduce using rule 80 (operand3 -> operand4 .)
    MODULO          reduce using rule 80 (operand3 -> operand4 .)
    PLUS            reduce using rule 80 (operand3 -> operand4 .)
    MINUS           reduce using rule 80 (operand3 -> operand4 .)
    CONCAT          reduce using rule 80 (operand3 -> operand4 .)
    AND             reduce using rule 80 (operand3 -> operand4 .)
    OR              reduce using rule 80 (operand3 -> operand4 .)
    EQUAL           reduce using rule 80 (operand3 -> operand4 .)
    NOTEQ           reduce using rule 80 (operand3 -> operand4 .)
    GREATER         reduce using rule 80 (operand3 -> operand4 .)
    GTEQUAL         reduce using rule 80 (operand3 -> operand4 .)
    LESS            reduce using rule 80 (operand3 -> operand4 .)
    LTEQUAL         reduce using rule 80 (operand3 -> operand4 .)
    IN              reduce using rule 80 (operand3 -> operand4 .)
    RBRACKET        reduce using rule 80 (operand3 -> operand4 .)
    COLON           reduce using rule 80 (operand3 -> operand4 .)
    COMMA           reduce using rule 80 (operand3 -> operand4 .)
    SEMI            reduce using rule 80 (operand3 -> operand4 .)
    LBRACKET        reduce using rule 80 (operand3 -> operand4 .)
    RPAREN          reduce using rule 80 (operand3 -> operand4 .)


state 93

    (40) discrete_range_mode -> discrete_mode LPAREN . literal_range RPAREN
    (41) literal_range -> . lower_bound COLON upper_bound
    (42) lower_bound -> . expression
    (72) expression -> . operand0
    (73) operand0 -> . operand1
    (74) operand0 -> . operand0 operator1 operand1
    (75) operand1 -> . operand2
    (76) operand1 -> . operand1 operator2 operand2
    (77) operand2 -> . operand3
    (78) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (79) operand3 -> . monadic_operator operand4
    (80) operand3 -> . operand4
    (87) monadic_operator -> . MINUS
    (88) monadic_operator -> . NOT
    (81) operand4 -> . array_location
    (82) operand4 -> . referenced_location
    (83) operand4 -> . primitive_value
    (71) array_location -> . location
    (89) referenced_location -> . ARROW array_location
    (106) primitive_value -> . literal
    (55) location -> . identifier
    (56) location -> . dereferenced_reference
    (57) location -> . string_element
    (58) location -> . string_slice
    (59) location -> . array_element
    (60) location -> . array_slice
    (107) literal -> . integer_literal
    (108) literal -> . boolean_literal
    (109) literal -> . character_literal
    (110) literal -> . empty_literal
    (111) literal -> . character_string_literal
    (21) identifier -> . ID
    (61) dereferenced_reference -> . array_location ARROW
    (62) string_element -> . identifier LBRACKET start_element LBRACKET
    (64) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (67) array_element -> . array_location LBRACKET expression_list RBRACKET
    (70) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (112) integer_literal -> . ICONST
    (113) boolean_literal -> . TRUE
    (114) boolean_literal -> . FALSE
    (115) character_literal -> . CCONST
    (116) empty_literal -> . NULL
    (117) character_string_literal -> . SCONST

    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 67
    ID              shift and go to state 10
    ICONST          shift and go to state 88
    TRUE            shift and go to state 69
    FALSE           shift and go to state 90
    CCONST          shift and go to state 86
    NULL            shift and go to state 74
    SCONST          shift and go to state 64

    operand1                       shift and go to state 77
    array_slice                    shift and go to state 71
    operand3                       shift and go to state 61
    operand0                       shift and go to state 79
    array_location                 shift and go to state 80
    boolean_literal                shift and go to state 81
    string_slice                   shift and go to state 63
    identifier                     shift and go to state 82
    location                       shift and go to state 65
    referenced_location            shift and go to state 66
    empty_literal                  shift and go to state 76
    literal                        shift and go to state 83
    lower_bound                    shift and go to state 100
    string_element                 shift and go to state 78
    operand2                       shift and go to state 68
    character_string_literal       shift and go to state 87
    integer_literal                shift and go to state 85
    monadic_operator               shift and go to state 70
    dereferenced_reference         shift and go to state 62
    character_literal              shift and go to state 72
    array_element                  shift and go to state 75
    expression                     shift and go to state 101
    operand4                       shift and go to state 92
    literal_range                  shift and go to state 136
    primitive_value                shift and go to state 89

state 94

    (11) synonym_definition -> identifier_list mode ASSIGN . expression
    (72) expression -> . operand0
    (73) operand0 -> . operand1
    (74) operand0 -> . operand0 operator1 operand1
    (75) operand1 -> . operand2
    (76) operand1 -> . operand1 operator2 operand2
    (77) operand2 -> . operand3
    (78) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (79) operand3 -> . monadic_operator operand4
    (80) operand3 -> . operand4
    (87) monadic_operator -> . MINUS
    (88) monadic_operator -> . NOT
    (81) operand4 -> . array_location
    (82) operand4 -> . referenced_location
    (83) operand4 -> . primitive_value
    (71) array_location -> . location
    (89) referenced_location -> . ARROW array_location
    (106) primitive_value -> . literal
    (55) location -> . identifier
    (56) location -> . dereferenced_reference
    (57) location -> . string_element
    (58) location -> . string_slice
    (59) location -> . array_element
    (60) location -> . array_slice
    (107) literal -> . integer_literal
    (108) literal -> . boolean_literal
    (109) literal -> . character_literal
    (110) literal -> . empty_literal
    (111) literal -> . character_string_literal
    (21) identifier -> . ID
    (61) dereferenced_reference -> . array_location ARROW
    (62) string_element -> . identifier LBRACKET start_element LBRACKET
    (64) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (67) array_element -> . array_location LBRACKET expression_list RBRACKET
    (70) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (112) integer_literal -> . ICONST
    (113) boolean_literal -> . TRUE
    (114) boolean_literal -> . FALSE
    (115) character_literal -> . CCONST
    (116) empty_literal -> . NULL
    (117) character_string_literal -> . SCONST

    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 67
    ID              shift and go to state 10
    ICONST          shift and go to state 88
    TRUE            shift and go to state 69
    FALSE           shift and go to state 90
    CCONST          shift and go to state 86
    NULL            shift and go to state 74
    SCONST          shift and go to state 64

    operand1                       shift and go to state 77
    array_slice                    shift and go to state 71
    operand3                       shift and go to state 61
    operand4                       shift and go to state 92
    array_location                 shift and go to state 80
    boolean_literal                shift and go to state 81
    string_slice                   shift and go to state 63
    identifier                     shift and go to state 82
    location                       shift and go to state 65
    referenced_location            shift and go to state 66
    empty_literal                  shift and go to state 76
    literal                        shift and go to state 83
    string_element                 shift and go to state 78
    operand2                       shift and go to state 68
    character_string_literal       shift and go to state 87
    integer_literal                shift and go to state 85
    monadic_operator               shift and go to state 70
    operand0                       shift and go to state 79
    dereferenced_reference         shift and go to state 62
    character_literal              shift and go to state 72
    array_element                  shift and go to state 75
    expression                     shift and go to state 137
    primitive_value                shift and go to state 89

state 95

    (10) synonym_list -> synonym_definition COMMA synonym_list .

    SEMI            reduce using rule 10 (synonym_list -> synonym_definition COMMA synonym_list .)


state 96

    (15) declaration_list -> declaration COMMA declaration_list .

    SEMI            reduce using rule 15 (declaration_list -> declaration COMMA declaration_list .)


state 97

    (18) initialization -> ASSIGN . expression
    (72) expression -> . operand0
    (73) operand0 -> . operand1
    (74) operand0 -> . operand0 operator1 operand1
    (75) operand1 -> . operand2
    (76) operand1 -> . operand1 operator2 operand2
    (77) operand2 -> . operand3
    (78) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (79) operand3 -> . monadic_operator operand4
    (80) operand3 -> . operand4
    (87) monadic_operator -> . MINUS
    (88) monadic_operator -> . NOT
    (81) operand4 -> . array_location
    (82) operand4 -> . referenced_location
    (83) operand4 -> . primitive_value
    (71) array_location -> . location
    (89) referenced_location -> . ARROW array_location
    (106) primitive_value -> . literal
    (55) location -> . identifier
    (56) location -> . dereferenced_reference
    (57) location -> . string_element
    (58) location -> . string_slice
    (59) location -> . array_element
    (60) location -> . array_slice
    (107) literal -> . integer_literal
    (108) literal -> . boolean_literal
    (109) literal -> . character_literal
    (110) literal -> . empty_literal
    (111) literal -> . character_string_literal
    (21) identifier -> . ID
    (61) dereferenced_reference -> . array_location ARROW
    (62) string_element -> . identifier LBRACKET start_element LBRACKET
    (64) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (67) array_element -> . array_location LBRACKET expression_list RBRACKET
    (70) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (112) integer_literal -> . ICONST
    (113) boolean_literal -> . TRUE
    (114) boolean_literal -> . FALSE
    (115) character_literal -> . CCONST
    (116) empty_literal -> . NULL
    (117) character_string_literal -> . SCONST

    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 67
    ID              shift and go to state 10
    ICONST          shift and go to state 88
    TRUE            shift and go to state 69
    FALSE           shift and go to state 90
    CCONST          shift and go to state 86
    NULL            shift and go to state 74
    SCONST          shift and go to state 64

    operand1                       shift and go to state 77
    empty_literal                  shift and go to state 76
    operand3                       shift and go to state 61
    operand0                       shift and go to state 79
    array_location                 shift and go to state 80
    boolean_literal                shift and go to state 81
    string_slice                   shift and go to state 63
    identifier                     shift and go to state 82
    location                       shift and go to state 65
    referenced_location            shift and go to state 66
    literal                        shift and go to state 83
    dereferenced_reference         shift and go to state 62
    string_element                 shift and go to state 78
    operand2                       shift and go to state 68
    character_string_literal       shift and go to state 87
    integer_literal                shift and go to state 85
    monadic_operator               shift and go to state 70
    array_slice                    shift and go to state 71
    character_literal              shift and go to state 72
    array_element                  shift and go to state 75
    expression                     shift and go to state 138
    operand4                       shift and go to state 92
    primitive_value                shift and go to state 89

state 98

    (16) declaration -> identifier_list mode initialization .

    COMMA           reduce using rule 16 (declaration -> identifier_list mode initialization .)
    SEMI            reduce using rule 16 (declaration -> identifier_list mode initialization .)


state 99

    (39) discrete_range_mode -> discrete_mode_name LPAREN literal_range . RPAREN

    RPAREN          shift and go to state 139


state 100

    (41) literal_range -> lower_bound . COLON upper_bound

    COLON           shift and go to state 140


state 101

    (42) lower_bound -> expression .

    COLON           reduce using rule 42 (lower_bound -> expression .)


state 102

    (53) index_mode -> literal_range .

    COMMA           reduce using rule 53 (index_mode -> literal_range .)
    RBRACKET        reduce using rule 53 (index_mode -> literal_range .)


state 103

    (35) discrete_mode_name -> identifier .
    (55) location -> identifier .
    (62) string_element -> identifier . LBRACKET start_element LBRACKET
    (64) string_slice -> identifier . LBRACKET left_element COLON right_element RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    LPAREN          reduce using rule 35 (discrete_mode_name -> identifier .)
    ARROW           reduce using rule 55 (location -> identifier .)
    TIMES           reduce using rule 55 (location -> identifier .)
    DIVIDE          reduce using rule 55 (location -> identifier .)
    MODULO          reduce using rule 55 (location -> identifier .)
    PLUS            reduce using rule 55 (location -> identifier .)
    MINUS           reduce using rule 55 (location -> identifier .)
    CONCAT          reduce using rule 55 (location -> identifier .)
    AND             reduce using rule 55 (location -> identifier .)
    OR              reduce using rule 55 (location -> identifier .)
    EQUAL           reduce using rule 55 (location -> identifier .)
    NOTEQ           reduce using rule 55 (location -> identifier .)
    GREATER         reduce using rule 55 (location -> identifier .)
    GTEQUAL         reduce using rule 55 (location -> identifier .)
    LESS            reduce using rule 55 (location -> identifier .)
    LTEQUAL         reduce using rule 55 (location -> identifier .)
    IN              reduce using rule 55 (location -> identifier .)
    COLON           reduce using rule 55 (location -> identifier .)
    LBRACKET        shift and go to state 135

  ! LBRACKET        [ reduce using rule 55 (location -> identifier .) ]


state 104

    (50) index_mode_list -> index_mode .
    (51) index_mode_list -> index_mode . COMMA index_mode_list

    RBRACKET        reduce using rule 50 (index_mode_list -> index_mode .)
    COMMA           shift and go to state 141


state 105

    (49) array_mode -> ARRAY LBRACKET index_mode_list . RBRACKET element_mode

    RBRACKET        shift and go to state 142


state 106

    (52) index_mode -> discrete_mode .
    (40) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    COMMA           reduce using rule 52 (index_mode -> discrete_mode .)
    RBRACKET        reduce using rule 52 (index_mode -> discrete_mode .)
    LPAREN          shift and go to state 93


state 107

    (47) string_mode -> CHARS LBRACKET string_length . RBRACKET

    RBRACKET        shift and go to state 143


state 108

    (48) string_length -> integer_literal .

    RBRACKET        reduce using rule 48 (string_length -> integer_literal .)


state 109

    (89) referenced_location -> ARROW array_location .
    (61) dereferenced_reference -> array_location . ARROW
    (67) array_element -> array_location . LBRACKET expression_list RBRACKET
    (70) array_slice -> array_location . LBRACKET lower_bound COLON upper_bound RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    TIMES           reduce using rule 89 (referenced_location -> ARROW array_location .)
    DIVIDE          reduce using rule 89 (referenced_location -> ARROW array_location .)
    MODULO          reduce using rule 89 (referenced_location -> ARROW array_location .)
    PLUS            reduce using rule 89 (referenced_location -> ARROW array_location .)
    MINUS           reduce using rule 89 (referenced_location -> ARROW array_location .)
    CONCAT          reduce using rule 89 (referenced_location -> ARROW array_location .)
    AND             reduce using rule 89 (referenced_location -> ARROW array_location .)
    OR              reduce using rule 89 (referenced_location -> ARROW array_location .)
    EQUAL           reduce using rule 89 (referenced_location -> ARROW array_location .)
    NOTEQ           reduce using rule 89 (referenced_location -> ARROW array_location .)
    GREATER         reduce using rule 89 (referenced_location -> ARROW array_location .)
    GTEQUAL         reduce using rule 89 (referenced_location -> ARROW array_location .)
    LESS            reduce using rule 89 (referenced_location -> ARROW array_location .)
    LTEQUAL         reduce using rule 89 (referenced_location -> ARROW array_location .)
    IN              reduce using rule 89 (referenced_location -> ARROW array_location .)
    COMMA           reduce using rule 89 (referenced_location -> ARROW array_location .)
    SEMI            reduce using rule 89 (referenced_location -> ARROW array_location .)
    COLON           reduce using rule 89 (referenced_location -> ARROW array_location .)
    RBRACKET        reduce using rule 89 (referenced_location -> ARROW array_location .)
    RPAREN          reduce using rule 89 (referenced_location -> ARROW array_location .)
    ARROW           shift and go to state 134
    LBRACKET        shift and go to state 133

  ! LBRACKET        [ reduce using rule 89 (referenced_location -> ARROW array_location .) ]


state 110

    (84) arithmetic_multiplicative_operator -> TIMES .

    MINUS           reduce using rule 84 (arithmetic_multiplicative_operator -> TIMES .)
    NOT             reduce using rule 84 (arithmetic_multiplicative_operator -> TIMES .)
    ARROW           reduce using rule 84 (arithmetic_multiplicative_operator -> TIMES .)
    ID              reduce using rule 84 (arithmetic_multiplicative_operator -> TIMES .)
    ICONST          reduce using rule 84 (arithmetic_multiplicative_operator -> TIMES .)
    TRUE            reduce using rule 84 (arithmetic_multiplicative_operator -> TIMES .)
    FALSE           reduce using rule 84 (arithmetic_multiplicative_operator -> TIMES .)
    CCONST          reduce using rule 84 (arithmetic_multiplicative_operator -> TIMES .)
    NULL            reduce using rule 84 (arithmetic_multiplicative_operator -> TIMES .)
    SCONST          reduce using rule 84 (arithmetic_multiplicative_operator -> TIMES .)


state 111

    (85) arithmetic_multiplicative_operator -> DIVIDE .

    MINUS           reduce using rule 85 (arithmetic_multiplicative_operator -> DIVIDE .)
    NOT             reduce using rule 85 (arithmetic_multiplicative_operator -> DIVIDE .)
    ARROW           reduce using rule 85 (arithmetic_multiplicative_operator -> DIVIDE .)
    ID              reduce using rule 85 (arithmetic_multiplicative_operator -> DIVIDE .)
    ICONST          reduce using rule 85 (arithmetic_multiplicative_operator -> DIVIDE .)
    TRUE            reduce using rule 85 (arithmetic_multiplicative_operator -> DIVIDE .)
    FALSE           reduce using rule 85 (arithmetic_multiplicative_operator -> DIVIDE .)
    CCONST          reduce using rule 85 (arithmetic_multiplicative_operator -> DIVIDE .)
    NULL            reduce using rule 85 (arithmetic_multiplicative_operator -> DIVIDE .)
    SCONST          reduce using rule 85 (arithmetic_multiplicative_operator -> DIVIDE .)


state 112

    (78) operand2 -> operand2 arithmetic_multiplicative_operator . operand3
    (79) operand3 -> . monadic_operator operand4
    (80) operand3 -> . operand4
    (87) monadic_operator -> . MINUS
    (88) monadic_operator -> . NOT
    (81) operand4 -> . array_location
    (82) operand4 -> . referenced_location
    (83) operand4 -> . primitive_value
    (71) array_location -> . location
    (89) referenced_location -> . ARROW array_location
    (106) primitive_value -> . literal
    (55) location -> . identifier
    (56) location -> . dereferenced_reference
    (57) location -> . string_element
    (58) location -> . string_slice
    (59) location -> . array_element
    (60) location -> . array_slice
    (107) literal -> . integer_literal
    (108) literal -> . boolean_literal
    (109) literal -> . character_literal
    (110) literal -> . empty_literal
    (111) literal -> . character_string_literal
    (21) identifier -> . ID
    (61) dereferenced_reference -> . array_location ARROW
    (62) string_element -> . identifier LBRACKET start_element LBRACKET
    (64) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (67) array_element -> . array_location LBRACKET expression_list RBRACKET
    (70) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (112) integer_literal -> . ICONST
    (113) boolean_literal -> . TRUE
    (114) boolean_literal -> . FALSE
    (115) character_literal -> . CCONST
    (116) empty_literal -> . NULL
    (117) character_string_literal -> . SCONST

    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 67
    ID              shift and go to state 10
    ICONST          shift and go to state 88
    TRUE            shift and go to state 69
    FALSE           shift and go to state 90
    CCONST          shift and go to state 86
    NULL            shift and go to state 74
    SCONST          shift and go to state 64

    operand3                       shift and go to state 144
    dereferenced_reference         shift and go to state 62
    boolean_literal                shift and go to state 81
    string_slice                   shift and go to state 63
    identifier                     shift and go to state 82
    location                       shift and go to state 65
    referenced_location            shift and go to state 66
    literal                        shift and go to state 83
    string_element                 shift and go to state 78
    integer_literal                shift and go to state 85
    array_location                 shift and go to state 80
    character_string_literal       shift and go to state 87
    monadic_operator               shift and go to state 70
    array_slice                    shift and go to state 71
    character_literal              shift and go to state 72
    primitive_value                shift and go to state 89
    array_element                  shift and go to state 75
    operand4                       shift and go to state 92
    empty_literal                  shift and go to state 76

state 113

    (86) arithmetic_multiplicative_operator -> MODULO .

    MINUS           reduce using rule 86 (arithmetic_multiplicative_operator -> MODULO .)
    NOT             reduce using rule 86 (arithmetic_multiplicative_operator -> MODULO .)
    ARROW           reduce using rule 86 (arithmetic_multiplicative_operator -> MODULO .)
    ID              reduce using rule 86 (arithmetic_multiplicative_operator -> MODULO .)
    ICONST          reduce using rule 86 (arithmetic_multiplicative_operator -> MODULO .)
    TRUE            reduce using rule 86 (arithmetic_multiplicative_operator -> MODULO .)
    FALSE           reduce using rule 86 (arithmetic_multiplicative_operator -> MODULO .)
    CCONST          reduce using rule 86 (arithmetic_multiplicative_operator -> MODULO .)
    NULL            reduce using rule 86 (arithmetic_multiplicative_operator -> MODULO .)
    SCONST          reduce using rule 86 (arithmetic_multiplicative_operator -> MODULO .)


state 114

    (79) operand3 -> monadic_operator operand4 .

    TIMES           reduce using rule 79 (operand3 -> monadic_operator operand4 .)
    DIVIDE          reduce using rule 79 (operand3 -> monadic_operator operand4 .)
    MODULO          reduce using rule 79 (operand3 -> monadic_operator operand4 .)
    PLUS            reduce using rule 79 (operand3 -> monadic_operator operand4 .)
    MINUS           reduce using rule 79 (operand3 -> monadic_operator operand4 .)
    CONCAT          reduce using rule 79 (operand3 -> monadic_operator operand4 .)
    AND             reduce using rule 79 (operand3 -> monadic_operator operand4 .)
    OR              reduce using rule 79 (operand3 -> monadic_operator operand4 .)
    EQUAL           reduce using rule 79 (operand3 -> monadic_operator operand4 .)
    NOTEQ           reduce using rule 79 (operand3 -> monadic_operator operand4 .)
    GREATER         reduce using rule 79 (operand3 -> monadic_operator operand4 .)
    GTEQUAL         reduce using rule 79 (operand3 -> monadic_operator operand4 .)
    LESS            reduce using rule 79 (operand3 -> monadic_operator operand4 .)
    LTEQUAL         reduce using rule 79 (operand3 -> monadic_operator operand4 .)
    IN              reduce using rule 79 (operand3 -> monadic_operator operand4 .)
    RBRACKET        reduce using rule 79 (operand3 -> monadic_operator operand4 .)
    COLON           reduce using rule 79 (operand3 -> monadic_operator operand4 .)
    COMMA           reduce using rule 79 (operand3 -> monadic_operator operand4 .)
    SEMI            reduce using rule 79 (operand3 -> monadic_operator operand4 .)
    LBRACKET        reduce using rule 79 (operand3 -> monadic_operator operand4 .)
    RPAREN          reduce using rule 79 (operand3 -> monadic_operator operand4 .)


state 115

    (92) operator2 -> arithmetic_additive_operator .

    MINUS           reduce using rule 92 (operator2 -> arithmetic_additive_operator .)
    NOT             reduce using rule 92 (operator2 -> arithmetic_additive_operator .)
    ARROW           reduce using rule 92 (operator2 -> arithmetic_additive_operator .)
    ID              reduce using rule 92 (operator2 -> arithmetic_additive_operator .)
    ICONST          reduce using rule 92 (operator2 -> arithmetic_additive_operator .)
    TRUE            reduce using rule 92 (operator2 -> arithmetic_additive_operator .)
    FALSE           reduce using rule 92 (operator2 -> arithmetic_additive_operator .)
    CCONST          reduce using rule 92 (operator2 -> arithmetic_additive_operator .)
    NULL            reduce using rule 92 (operator2 -> arithmetic_additive_operator .)
    SCONST          reduce using rule 92 (operator2 -> arithmetic_additive_operator .)


state 116

    (96) string_concatenation_operator -> CONCAT .

    MINUS           reduce using rule 96 (string_concatenation_operator -> CONCAT .)
    NOT             reduce using rule 96 (string_concatenation_operator -> CONCAT .)
    ARROW           reduce using rule 96 (string_concatenation_operator -> CONCAT .)
    ID              reduce using rule 96 (string_concatenation_operator -> CONCAT .)
    ICONST          reduce using rule 96 (string_concatenation_operator -> CONCAT .)
    TRUE            reduce using rule 96 (string_concatenation_operator -> CONCAT .)
    FALSE           reduce using rule 96 (string_concatenation_operator -> CONCAT .)
    CCONST          reduce using rule 96 (string_concatenation_operator -> CONCAT .)
    NULL            reduce using rule 96 (string_concatenation_operator -> CONCAT .)
    SCONST          reduce using rule 96 (string_concatenation_operator -> CONCAT .)


state 117

    (94) arithmetic_additive_operator -> PLUS .

    MINUS           reduce using rule 94 (arithmetic_additive_operator -> PLUS .)
    NOT             reduce using rule 94 (arithmetic_additive_operator -> PLUS .)
    ARROW           reduce using rule 94 (arithmetic_additive_operator -> PLUS .)
    ID              reduce using rule 94 (arithmetic_additive_operator -> PLUS .)
    ICONST          reduce using rule 94 (arithmetic_additive_operator -> PLUS .)
    TRUE            reduce using rule 94 (arithmetic_additive_operator -> PLUS .)
    FALSE           reduce using rule 94 (arithmetic_additive_operator -> PLUS .)
    CCONST          reduce using rule 94 (arithmetic_additive_operator -> PLUS .)
    NULL            reduce using rule 94 (arithmetic_additive_operator -> PLUS .)
    SCONST          reduce using rule 94 (arithmetic_additive_operator -> PLUS .)


state 118

    (93) operator2 -> string_concatenation_operator .

    MINUS           reduce using rule 93 (operator2 -> string_concatenation_operator .)
    NOT             reduce using rule 93 (operator2 -> string_concatenation_operator .)
    ARROW           reduce using rule 93 (operator2 -> string_concatenation_operator .)
    ID              reduce using rule 93 (operator2 -> string_concatenation_operator .)
    ICONST          reduce using rule 93 (operator2 -> string_concatenation_operator .)
    TRUE            reduce using rule 93 (operator2 -> string_concatenation_operator .)
    FALSE           reduce using rule 93 (operator2 -> string_concatenation_operator .)
    CCONST          reduce using rule 93 (operator2 -> string_concatenation_operator .)
    NULL            reduce using rule 93 (operator2 -> string_concatenation_operator .)
    SCONST          reduce using rule 93 (operator2 -> string_concatenation_operator .)


state 119

    (76) operand1 -> operand1 operator2 . operand2
    (77) operand2 -> . operand3
    (78) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (79) operand3 -> . monadic_operator operand4
    (80) operand3 -> . operand4
    (87) monadic_operator -> . MINUS
    (88) monadic_operator -> . NOT
    (81) operand4 -> . array_location
    (82) operand4 -> . referenced_location
    (83) operand4 -> . primitive_value
    (71) array_location -> . location
    (89) referenced_location -> . ARROW array_location
    (106) primitive_value -> . literal
    (55) location -> . identifier
    (56) location -> . dereferenced_reference
    (57) location -> . string_element
    (58) location -> . string_slice
    (59) location -> . array_element
    (60) location -> . array_slice
    (107) literal -> . integer_literal
    (108) literal -> . boolean_literal
    (109) literal -> . character_literal
    (110) literal -> . empty_literal
    (111) literal -> . character_string_literal
    (21) identifier -> . ID
    (61) dereferenced_reference -> . array_location ARROW
    (62) string_element -> . identifier LBRACKET start_element LBRACKET
    (64) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (67) array_element -> . array_location LBRACKET expression_list RBRACKET
    (70) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (112) integer_literal -> . ICONST
    (113) boolean_literal -> . TRUE
    (114) boolean_literal -> . FALSE
    (115) character_literal -> . CCONST
    (116) empty_literal -> . NULL
    (117) character_string_literal -> . SCONST

    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 67
    ID              shift and go to state 10
    ICONST          shift and go to state 88
    TRUE            shift and go to state 69
    FALSE           shift and go to state 90
    CCONST          shift and go to state 86
    NULL            shift and go to state 74
    SCONST          shift and go to state 64

    operand3                       shift and go to state 61
    dereferenced_reference         shift and go to state 62
    boolean_literal                shift and go to state 81
    string_slice                   shift and go to state 63
    identifier                     shift and go to state 82
    location                       shift and go to state 65
    referenced_location            shift and go to state 66
    literal                        shift and go to state 83
    string_element                 shift and go to state 78
    integer_literal                shift and go to state 85
    array_location                 shift and go to state 80
    character_string_literal       shift and go to state 87
    operand2                       shift and go to state 145
    monadic_operator               shift and go to state 70
    array_slice                    shift and go to state 71
    character_literal              shift and go to state 72
    primitive_value                shift and go to state 89
    array_element                  shift and go to state 75
    empty_literal                  shift and go to state 76
    operand4                       shift and go to state 92

state 120

    (95) arithmetic_additive_operator -> MINUS .

    MINUS           reduce using rule 95 (arithmetic_additive_operator -> MINUS .)
    NOT             reduce using rule 95 (arithmetic_additive_operator -> MINUS .)
    ARROW           reduce using rule 95 (arithmetic_additive_operator -> MINUS .)
    ID              reduce using rule 95 (arithmetic_additive_operator -> MINUS .)
    ICONST          reduce using rule 95 (arithmetic_additive_operator -> MINUS .)
    TRUE            reduce using rule 95 (arithmetic_additive_operator -> MINUS .)
    FALSE           reduce using rule 95 (arithmetic_additive_operator -> MINUS .)
    CCONST          reduce using rule 95 (arithmetic_additive_operator -> MINUS .)
    NULL            reduce using rule 95 (arithmetic_additive_operator -> MINUS .)
    SCONST          reduce using rule 95 (arithmetic_additive_operator -> MINUS .)


state 121

    (98) relational_operator -> OR .

    MINUS           reduce using rule 98 (relational_operator -> OR .)
    NOT             reduce using rule 98 (relational_operator -> OR .)
    ARROW           reduce using rule 98 (relational_operator -> OR .)
    ID              reduce using rule 98 (relational_operator -> OR .)
    ICONST          reduce using rule 98 (relational_operator -> OR .)
    TRUE            reduce using rule 98 (relational_operator -> OR .)
    FALSE           reduce using rule 98 (relational_operator -> OR .)
    CCONST          reduce using rule 98 (relational_operator -> OR .)
    NULL            reduce using rule 98 (relational_operator -> OR .)
    SCONST          reduce using rule 98 (relational_operator -> OR .)


state 122

    (90) operator1 -> relational_operator .

    MINUS           reduce using rule 90 (operator1 -> relational_operator .)
    NOT             reduce using rule 90 (operator1 -> relational_operator .)
    ARROW           reduce using rule 90 (operator1 -> relational_operator .)
    ID              reduce using rule 90 (operator1 -> relational_operator .)
    ICONST          reduce using rule 90 (operator1 -> relational_operator .)
    TRUE            reduce using rule 90 (operator1 -> relational_operator .)
    FALSE           reduce using rule 90 (operator1 -> relational_operator .)
    CCONST          reduce using rule 90 (operator1 -> relational_operator .)
    NULL            reduce using rule 90 (operator1 -> relational_operator .)
    SCONST          reduce using rule 90 (operator1 -> relational_operator .)


state 123

    (101) relational_operator -> GREATER .

    MINUS           reduce using rule 101 (relational_operator -> GREATER .)
    NOT             reduce using rule 101 (relational_operator -> GREATER .)
    ARROW           reduce using rule 101 (relational_operator -> GREATER .)
    ID              reduce using rule 101 (relational_operator -> GREATER .)
    ICONST          reduce using rule 101 (relational_operator -> GREATER .)
    TRUE            reduce using rule 101 (relational_operator -> GREATER .)
    FALSE           reduce using rule 101 (relational_operator -> GREATER .)
    CCONST          reduce using rule 101 (relational_operator -> GREATER .)
    NULL            reduce using rule 101 (relational_operator -> GREATER .)
    SCONST          reduce using rule 101 (relational_operator -> GREATER .)


state 124

    (103) relational_operator -> LESS .

    MINUS           reduce using rule 103 (relational_operator -> LESS .)
    NOT             reduce using rule 103 (relational_operator -> LESS .)
    ARROW           reduce using rule 103 (relational_operator -> LESS .)
    ID              reduce using rule 103 (relational_operator -> LESS .)
    ICONST          reduce using rule 103 (relational_operator -> LESS .)
    TRUE            reduce using rule 103 (relational_operator -> LESS .)
    FALSE           reduce using rule 103 (relational_operator -> LESS .)
    CCONST          reduce using rule 103 (relational_operator -> LESS .)
    NULL            reduce using rule 103 (relational_operator -> LESS .)
    SCONST          reduce using rule 103 (relational_operator -> LESS .)


state 125

    (91) operator1 -> membership_operator .

    MINUS           reduce using rule 91 (operator1 -> membership_operator .)
    NOT             reduce using rule 91 (operator1 -> membership_operator .)
    ARROW           reduce using rule 91 (operator1 -> membership_operator .)
    ID              reduce using rule 91 (operator1 -> membership_operator .)
    ICONST          reduce using rule 91 (operator1 -> membership_operator .)
    TRUE            reduce using rule 91 (operator1 -> membership_operator .)
    FALSE           reduce using rule 91 (operator1 -> membership_operator .)
    CCONST          reduce using rule 91 (operator1 -> membership_operator .)
    NULL            reduce using rule 91 (operator1 -> membership_operator .)
    SCONST          reduce using rule 91 (operator1 -> membership_operator .)


state 126

    (99) relational_operator -> EQUAL .

    MINUS           reduce using rule 99 (relational_operator -> EQUAL .)
    NOT             reduce using rule 99 (relational_operator -> EQUAL .)
    ARROW           reduce using rule 99 (relational_operator -> EQUAL .)
    ID              reduce using rule 99 (relational_operator -> EQUAL .)
    ICONST          reduce using rule 99 (relational_operator -> EQUAL .)
    TRUE            reduce using rule 99 (relational_operator -> EQUAL .)
    FALSE           reduce using rule 99 (relational_operator -> EQUAL .)
    CCONST          reduce using rule 99 (relational_operator -> EQUAL .)
    NULL            reduce using rule 99 (relational_operator -> EQUAL .)
    SCONST          reduce using rule 99 (relational_operator -> EQUAL .)


state 127

    (105) membership_operator -> IN .

    MINUS           reduce using rule 105 (membership_operator -> IN .)
    NOT             reduce using rule 105 (membership_operator -> IN .)
    ARROW           reduce using rule 105 (membership_operator -> IN .)
    ID              reduce using rule 105 (membership_operator -> IN .)
    ICONST          reduce using rule 105 (membership_operator -> IN .)
    TRUE            reduce using rule 105 (membership_operator -> IN .)
    FALSE           reduce using rule 105 (membership_operator -> IN .)
    CCONST          reduce using rule 105 (membership_operator -> IN .)
    NULL            reduce using rule 105 (membership_operator -> IN .)
    SCONST          reduce using rule 105 (membership_operator -> IN .)


state 128

    (102) relational_operator -> GTEQUAL .

    MINUS           reduce using rule 102 (relational_operator -> GTEQUAL .)
    NOT             reduce using rule 102 (relational_operator -> GTEQUAL .)
    ARROW           reduce using rule 102 (relational_operator -> GTEQUAL .)
    ID              reduce using rule 102 (relational_operator -> GTEQUAL .)
    ICONST          reduce using rule 102 (relational_operator -> GTEQUAL .)
    TRUE            reduce using rule 102 (relational_operator -> GTEQUAL .)
    FALSE           reduce using rule 102 (relational_operator -> GTEQUAL .)
    CCONST          reduce using rule 102 (relational_operator -> GTEQUAL .)
    NULL            reduce using rule 102 (relational_operator -> GTEQUAL .)
    SCONST          reduce using rule 102 (relational_operator -> GTEQUAL .)


state 129

    (100) relational_operator -> NOTEQ .

    MINUS           reduce using rule 100 (relational_operator -> NOTEQ .)
    NOT             reduce using rule 100 (relational_operator -> NOTEQ .)
    ARROW           reduce using rule 100 (relational_operator -> NOTEQ .)
    ID              reduce using rule 100 (relational_operator -> NOTEQ .)
    ICONST          reduce using rule 100 (relational_operator -> NOTEQ .)
    TRUE            reduce using rule 100 (relational_operator -> NOTEQ .)
    FALSE           reduce using rule 100 (relational_operator -> NOTEQ .)
    CCONST          reduce using rule 100 (relational_operator -> NOTEQ .)
    NULL            reduce using rule 100 (relational_operator -> NOTEQ .)
    SCONST          reduce using rule 100 (relational_operator -> NOTEQ .)


state 130

    (74) operand0 -> operand0 operator1 . operand1
    (75) operand1 -> . operand2
    (76) operand1 -> . operand1 operator2 operand2
    (77) operand2 -> . operand3
    (78) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (79) operand3 -> . monadic_operator operand4
    (80) operand3 -> . operand4
    (87) monadic_operator -> . MINUS
    (88) monadic_operator -> . NOT
    (81) operand4 -> . array_location
    (82) operand4 -> . referenced_location
    (83) operand4 -> . primitive_value
    (71) array_location -> . location
    (89) referenced_location -> . ARROW array_location
    (106) primitive_value -> . literal
    (55) location -> . identifier
    (56) location -> . dereferenced_reference
    (57) location -> . string_element
    (58) location -> . string_slice
    (59) location -> . array_element
    (60) location -> . array_slice
    (107) literal -> . integer_literal
    (108) literal -> . boolean_literal
    (109) literal -> . character_literal
    (110) literal -> . empty_literal
    (111) literal -> . character_string_literal
    (21) identifier -> . ID
    (61) dereferenced_reference -> . array_location ARROW
    (62) string_element -> . identifier LBRACKET start_element LBRACKET
    (64) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (67) array_element -> . array_location LBRACKET expression_list RBRACKET
    (70) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (112) integer_literal -> . ICONST
    (113) boolean_literal -> . TRUE
    (114) boolean_literal -> . FALSE
    (115) character_literal -> . CCONST
    (116) empty_literal -> . NULL
    (117) character_string_literal -> . SCONST

    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 67
    ID              shift and go to state 10
    ICONST          shift and go to state 88
    TRUE            shift and go to state 69
    FALSE           shift and go to state 90
    CCONST          shift and go to state 86
    NULL            shift and go to state 74
    SCONST          shift and go to state 64

    operand1                       shift and go to state 146
    operand3                       shift and go to state 61
    array_location                 shift and go to state 80
    boolean_literal                shift and go to state 81
    string_slice                   shift and go to state 63
    identifier                     shift and go to state 82
    location                       shift and go to state 65
    referenced_location            shift and go to state 66
    literal                        shift and go to state 83
    dereferenced_reference         shift and go to state 62
    string_element                 shift and go to state 78
    integer_literal                shift and go to state 85
    character_string_literal       shift and go to state 87
    operand2                       shift and go to state 68
    monadic_operator               shift and go to state 70
    array_slice                    shift and go to state 71
    character_literal              shift and go to state 72
    array_element                  shift and go to state 75
    empty_literal                  shift and go to state 76
    operand4                       shift and go to state 92
    primitive_value                shift and go to state 89

state 131

    (97) relational_operator -> AND .

    MINUS           reduce using rule 97 (relational_operator -> AND .)
    NOT             reduce using rule 97 (relational_operator -> AND .)
    ARROW           reduce using rule 97 (relational_operator -> AND .)
    ID              reduce using rule 97 (relational_operator -> AND .)
    ICONST          reduce using rule 97 (relational_operator -> AND .)
    TRUE            reduce using rule 97 (relational_operator -> AND .)
    FALSE           reduce using rule 97 (relational_operator -> AND .)
    CCONST          reduce using rule 97 (relational_operator -> AND .)
    NULL            reduce using rule 97 (relational_operator -> AND .)
    SCONST          reduce using rule 97 (relational_operator -> AND .)


state 132

    (104) relational_operator -> LTEQUAL .

    MINUS           reduce using rule 104 (relational_operator -> LTEQUAL .)
    NOT             reduce using rule 104 (relational_operator -> LTEQUAL .)
    ARROW           reduce using rule 104 (relational_operator -> LTEQUAL .)
    ID              reduce using rule 104 (relational_operator -> LTEQUAL .)
    ICONST          reduce using rule 104 (relational_operator -> LTEQUAL .)
    TRUE            reduce using rule 104 (relational_operator -> LTEQUAL .)
    FALSE           reduce using rule 104 (relational_operator -> LTEQUAL .)
    CCONST          reduce using rule 104 (relational_operator -> LTEQUAL .)
    NULL            reduce using rule 104 (relational_operator -> LTEQUAL .)
    SCONST          reduce using rule 104 (relational_operator -> LTEQUAL .)


state 133

    (67) array_element -> array_location LBRACKET . expression_list RBRACKET
    (70) array_slice -> array_location LBRACKET . lower_bound COLON upper_bound RBRACKET
    (68) expression_list -> . expression
    (69) expression_list -> . expression COMMA expression_list
    (42) lower_bound -> . expression
    (72) expression -> . operand0
    (73) operand0 -> . operand1
    (74) operand0 -> . operand0 operator1 operand1
    (75) operand1 -> . operand2
    (76) operand1 -> . operand1 operator2 operand2
    (77) operand2 -> . operand3
    (78) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (79) operand3 -> . monadic_operator operand4
    (80) operand3 -> . operand4
    (87) monadic_operator -> . MINUS
    (88) monadic_operator -> . NOT
    (81) operand4 -> . array_location
    (82) operand4 -> . referenced_location
    (83) operand4 -> . primitive_value
    (71) array_location -> . location
    (89) referenced_location -> . ARROW array_location
    (106) primitive_value -> . literal
    (55) location -> . identifier
    (56) location -> . dereferenced_reference
    (57) location -> . string_element
    (58) location -> . string_slice
    (59) location -> . array_element
    (60) location -> . array_slice
    (107) literal -> . integer_literal
    (108) literal -> . boolean_literal
    (109) literal -> . character_literal
    (110) literal -> . empty_literal
    (111) literal -> . character_string_literal
    (21) identifier -> . ID
    (61) dereferenced_reference -> . array_location ARROW
    (62) string_element -> . identifier LBRACKET start_element LBRACKET
    (64) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (67) array_element -> . array_location LBRACKET expression_list RBRACKET
    (70) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (112) integer_literal -> . ICONST
    (113) boolean_literal -> . TRUE
    (114) boolean_literal -> . FALSE
    (115) character_literal -> . CCONST
    (116) empty_literal -> . NULL
    (117) character_string_literal -> . SCONST

    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 67
    ID              shift and go to state 10
    ICONST          shift and go to state 88
    TRUE            shift and go to state 69
    FALSE           shift and go to state 90
    CCONST          shift and go to state 86
    NULL            shift and go to state 74
    SCONST          shift and go to state 64

    operand1                       shift and go to state 77
    array_slice                    shift and go to state 71
    string_element                 shift and go to state 78
    operand0                       shift and go to state 79
    dereferenced_reference         shift and go to state 62
    boolean_literal                shift and go to state 81
    string_slice                   shift and go to state 63
    identifier                     shift and go to state 82
    location                       shift and go to state 65
    referenced_location            shift and go to state 66
    empty_literal                  shift and go to state 76
    literal                        shift and go to state 83
    operand3                       shift and go to state 61
    operand2                       shift and go to state 68
    integer_literal                shift and go to state 85
    monadic_operator               shift and go to state 70
    array_location                 shift and go to state 80
    character_literal              shift and go to state 72
    expression_list                shift and go to state 147
    array_element                  shift and go to state 75
    expression                     shift and go to state 149
    operand4                       shift and go to state 92
    lower_bound                    shift and go to state 148
    primitive_value                shift and go to state 89
    character_string_literal       shift and go to state 87

state 134

    (61) dereferenced_reference -> array_location ARROW .

    ARROW           reduce using rule 61 (dereferenced_reference -> array_location ARROW .)
    LBRACKET        reduce using rule 61 (dereferenced_reference -> array_location ARROW .)
    TIMES           reduce using rule 61 (dereferenced_reference -> array_location ARROW .)
    DIVIDE          reduce using rule 61 (dereferenced_reference -> array_location ARROW .)
    MODULO          reduce using rule 61 (dereferenced_reference -> array_location ARROW .)
    PLUS            reduce using rule 61 (dereferenced_reference -> array_location ARROW .)
    MINUS           reduce using rule 61 (dereferenced_reference -> array_location ARROW .)
    CONCAT          reduce using rule 61 (dereferenced_reference -> array_location ARROW .)
    AND             reduce using rule 61 (dereferenced_reference -> array_location ARROW .)
    OR              reduce using rule 61 (dereferenced_reference -> array_location ARROW .)
    EQUAL           reduce using rule 61 (dereferenced_reference -> array_location ARROW .)
    NOTEQ           reduce using rule 61 (dereferenced_reference -> array_location ARROW .)
    GREATER         reduce using rule 61 (dereferenced_reference -> array_location ARROW .)
    GTEQUAL         reduce using rule 61 (dereferenced_reference -> array_location ARROW .)
    LESS            reduce using rule 61 (dereferenced_reference -> array_location ARROW .)
    LTEQUAL         reduce using rule 61 (dereferenced_reference -> array_location ARROW .)
    IN              reduce using rule 61 (dereferenced_reference -> array_location ARROW .)
    COMMA           reduce using rule 61 (dereferenced_reference -> array_location ARROW .)
    SEMI            reduce using rule 61 (dereferenced_reference -> array_location ARROW .)
    COLON           reduce using rule 61 (dereferenced_reference -> array_location ARROW .)
    RBRACKET        reduce using rule 61 (dereferenced_reference -> array_location ARROW .)
    RPAREN          reduce using rule 61 (dereferenced_reference -> array_location ARROW .)


state 135

    (62) string_element -> identifier LBRACKET . start_element LBRACKET
    (64) string_slice -> identifier LBRACKET . left_element COLON right_element RBRACKET
    (63) start_element -> . expression
    (65) left_element -> . expression
    (72) expression -> . operand0
    (73) operand0 -> . operand1
    (74) operand0 -> . operand0 operator1 operand1
    (75) operand1 -> . operand2
    (76) operand1 -> . operand1 operator2 operand2
    (77) operand2 -> . operand3
    (78) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (79) operand3 -> . monadic_operator operand4
    (80) operand3 -> . operand4
    (87) monadic_operator -> . MINUS
    (88) monadic_operator -> . NOT
    (81) operand4 -> . array_location
    (82) operand4 -> . referenced_location
    (83) operand4 -> . primitive_value
    (71) array_location -> . location
    (89) referenced_location -> . ARROW array_location
    (106) primitive_value -> . literal
    (55) location -> . identifier
    (56) location -> . dereferenced_reference
    (57) location -> . string_element
    (58) location -> . string_slice
    (59) location -> . array_element
    (60) location -> . array_slice
    (107) literal -> . integer_literal
    (108) literal -> . boolean_literal
    (109) literal -> . character_literal
    (110) literal -> . empty_literal
    (111) literal -> . character_string_literal
    (21) identifier -> . ID
    (61) dereferenced_reference -> . array_location ARROW
    (62) string_element -> . identifier LBRACKET start_element LBRACKET
    (64) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (67) array_element -> . array_location LBRACKET expression_list RBRACKET
    (70) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (112) integer_literal -> . ICONST
    (113) boolean_literal -> . TRUE
    (114) boolean_literal -> . FALSE
    (115) character_literal -> . CCONST
    (116) empty_literal -> . NULL
    (117) character_string_literal -> . SCONST

    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 67
    ID              shift and go to state 10
    ICONST          shift and go to state 88
    TRUE            shift and go to state 69
    FALSE           shift and go to state 90
    CCONST          shift and go to state 86
    NULL            shift and go to state 74
    SCONST          shift and go to state 64

    operand1                       shift and go to state 77
    array_slice                    shift and go to state 71
    operand3                       shift and go to state 61
    operand0                       shift and go to state 79
    array_location                 shift and go to state 80
    boolean_literal                shift and go to state 81
    string_slice                   shift and go to state 63
    identifier                     shift and go to state 82
    location                       shift and go to state 65
    referenced_location            shift and go to state 66
    empty_literal                  shift and go to state 76
    literal                        shift and go to state 83
    start_element                  shift and go to state 151
    string_element                 shift and go to state 78
    integer_literal                shift and go to state 85
    left_element                   shift and go to state 150
    character_string_literal       shift and go to state 87
    operand2                       shift and go to state 68
    monadic_operator               shift and go to state 70
    dereferenced_reference         shift and go to state 62
    character_literal              shift and go to state 72
    array_element                  shift and go to state 75
    expression                     shift and go to state 152
    operand4                       shift and go to state 92
    primitive_value                shift and go to state 89

state 136

    (40) discrete_range_mode -> discrete_mode LPAREN literal_range . RPAREN

    RPAREN          shift and go to state 153


state 137

    (11) synonym_definition -> identifier_list mode ASSIGN expression .

    COMMA           reduce using rule 11 (synonym_definition -> identifier_list mode ASSIGN expression .)
    SEMI            reduce using rule 11 (synonym_definition -> identifier_list mode ASSIGN expression .)


state 138

    (18) initialization -> ASSIGN expression .

    COMMA           reduce using rule 18 (initialization -> ASSIGN expression .)
    SEMI            reduce using rule 18 (initialization -> ASSIGN expression .)


state 139

    (39) discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .

    LPAREN          reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    ASSIGN          reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    COMMA           reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    SEMI            reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    RBRACKET        reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)


state 140

    (41) literal_range -> lower_bound COLON . upper_bound
    (43) upper_bound -> . expression
    (72) expression -> . operand0
    (73) operand0 -> . operand1
    (74) operand0 -> . operand0 operator1 operand1
    (75) operand1 -> . operand2
    (76) operand1 -> . operand1 operator2 operand2
    (77) operand2 -> . operand3
    (78) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (79) operand3 -> . monadic_operator operand4
    (80) operand3 -> . operand4
    (87) monadic_operator -> . MINUS
    (88) monadic_operator -> . NOT
    (81) operand4 -> . array_location
    (82) operand4 -> . referenced_location
    (83) operand4 -> . primitive_value
    (71) array_location -> . location
    (89) referenced_location -> . ARROW array_location
    (106) primitive_value -> . literal
    (55) location -> . identifier
    (56) location -> . dereferenced_reference
    (57) location -> . string_element
    (58) location -> . string_slice
    (59) location -> . array_element
    (60) location -> . array_slice
    (107) literal -> . integer_literal
    (108) literal -> . boolean_literal
    (109) literal -> . character_literal
    (110) literal -> . empty_literal
    (111) literal -> . character_string_literal
    (21) identifier -> . ID
    (61) dereferenced_reference -> . array_location ARROW
    (62) string_element -> . identifier LBRACKET start_element LBRACKET
    (64) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (67) array_element -> . array_location LBRACKET expression_list RBRACKET
    (70) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (112) integer_literal -> . ICONST
    (113) boolean_literal -> . TRUE
    (114) boolean_literal -> . FALSE
    (115) character_literal -> . CCONST
    (116) empty_literal -> . NULL
    (117) character_string_literal -> . SCONST

    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 67
    ID              shift and go to state 10
    ICONST          shift and go to state 88
    TRUE            shift and go to state 69
    FALSE           shift and go to state 90
    CCONST          shift and go to state 86
    NULL            shift and go to state 74
    SCONST          shift and go to state 64

    operand1                       shift and go to state 77
    upper_bound                    shift and go to state 154
    array_slice                    shift and go to state 71
    operand3                       shift and go to state 61
    operand0                       shift and go to state 79
    array_location                 shift and go to state 80
    boolean_literal                shift and go to state 81
    string_slice                   shift and go to state 63
    identifier                     shift and go to state 82
    location                       shift and go to state 65
    referenced_location            shift and go to state 66
    empty_literal                  shift and go to state 76
    literal                        shift and go to state 83
    string_element                 shift and go to state 78
    operand2                       shift and go to state 68
    character_string_literal       shift and go to state 87
    integer_literal                shift and go to state 85
    monadic_operator               shift and go to state 70
    dereferenced_reference         shift and go to state 62
    character_literal              shift and go to state 72
    array_element                  shift and go to state 75
    expression                     shift and go to state 155
    operand4                       shift and go to state 92
    primitive_value                shift and go to state 89

state 141

    (51) index_mode_list -> index_mode COMMA . index_mode_list
    (50) index_mode_list -> . index_mode
    (51) index_mode_list -> . index_mode COMMA index_mode_list
    (52) index_mode -> . discrete_mode
    (53) index_mode -> . literal_range
    (31) discrete_mode -> . integer_mode
    (32) discrete_mode -> . boolean_mode
    (33) discrete_mode -> . character_mode
    (34) discrete_mode -> . discrete_range_mode
    (41) literal_range -> . lower_bound COLON upper_bound
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (42) lower_bound -> . expression
    (35) discrete_mode_name -> . identifier
    (72) expression -> . operand0
    (21) identifier -> . ID
    (73) operand0 -> . operand1
    (74) operand0 -> . operand0 operator1 operand1
    (75) operand1 -> . operand2
    (76) operand1 -> . operand1 operator2 operand2
    (77) operand2 -> . operand3
    (78) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (79) operand3 -> . monadic_operator operand4
    (80) operand3 -> . operand4
    (87) monadic_operator -> . MINUS
    (88) monadic_operator -> . NOT
    (81) operand4 -> . array_location
    (82) operand4 -> . referenced_location
    (83) operand4 -> . primitive_value
    (71) array_location -> . location
    (89) referenced_location -> . ARROW array_location
    (106) primitive_value -> . literal
    (55) location -> . identifier
    (56) location -> . dereferenced_reference
    (57) location -> . string_element
    (58) location -> . string_slice
    (59) location -> . array_element
    (60) location -> . array_slice
    (107) literal -> . integer_literal
    (108) literal -> . boolean_literal
    (109) literal -> . character_literal
    (110) literal -> . empty_literal
    (111) literal -> . character_string_literal
    (61) dereferenced_reference -> . array_location ARROW
    (62) string_element -> . identifier LBRACKET start_element LBRACKET
    (64) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (67) array_element -> . array_location LBRACKET expression_list RBRACKET
    (70) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (112) integer_literal -> . ICONST
    (113) boolean_literal -> . TRUE
    (114) boolean_literal -> . FALSE
    (115) character_literal -> . CCONST
    (116) empty_literal -> . NULL
    (117) character_string_literal -> . SCONST

    INT             shift and go to state 48
    BOOL            shift and go to state 38
    CHAR            shift and go to state 35
    ID              shift and go to state 10
    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 67
    ICONST          shift and go to state 88
    TRUE            shift and go to state 69
    FALSE           shift and go to state 90
    CCONST          shift and go to state 86
    NULL            shift and go to state 74
    SCONST          shift and go to state 64

    operand1                       shift and go to state 77
    array_slice                    shift and go to state 71
    operand3                       shift and go to state 61
    operand4                       shift and go to state 92
    discrete_mode_name             shift and go to state 31
    boolean_literal                shift and go to state 81
    string_slice                   shift and go to state 63
    identifier                     shift and go to state 103
    location                       shift and go to state 65
    referenced_location            shift and go to state 66
    empty_literal                  shift and go to state 76
    index_mode_list                shift and go to state 156
    boolean_mode                   shift and go to state 36
    dereferenced_reference         shift and go to state 62
    string_element                 shift and go to state 78
    operand2                       shift and go to state 68
    character_string_literal       shift and go to state 87
    index_mode                     shift and go to state 104
    integer_literal                shift and go to state 85
    discrete_mode                  shift and go to state 106
    monadic_operator               shift and go to state 70
    discrete_range_mode            shift and go to state 41
    literal_range                  shift and go to state 102
    array_location                 shift and go to state 80
    literal                        shift and go to state 83
    character_literal              shift and go to state 72
    primitive_value                shift and go to state 89
    array_element                  shift and go to state 75
    character_mode                 shift and go to state 43
    expression                     shift and go to state 101
    operand0                       shift and go to state 79
    lower_bound                    shift and go to state 100
    integer_mode                   shift and go to state 46

state 142

    (49) array_mode -> ARRAY LBRACKET index_mode_list RBRACKET . element_mode
    (54) element_mode -> . mode
    (26) mode -> . mode_name
    (27) mode -> . discrete_mode
    (28) mode -> . reference_mode
    (29) mode -> . composite_mode
    (30) mode_name -> . identifier
    (31) discrete_mode -> . integer_mode
    (32) discrete_mode -> . boolean_mode
    (33) discrete_mode -> . character_mode
    (34) discrete_mode -> . discrete_range_mode
    (44) reference_mode -> . REF mode
    (45) composite_mode -> . string_mode
    (46) composite_mode -> . array_mode
    (21) identifier -> . ID
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (47) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (49) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (35) discrete_mode_name -> . identifier

    REF             shift and go to state 34
    ID              shift and go to state 10
    INT             shift and go to state 48
    BOOL            shift and go to state 38
    CHAR            shift and go to state 35
    CHARS           shift and go to state 37
    ARRAY           shift and go to state 33

    mode_name                      shift and go to state 29
    reference_mode                 shift and go to state 30
    discrete_mode                  shift and go to state 40
    discrete_mode_name             shift and go to state 31
    discrete_range_mode            shift and go to state 41
    mode                           shift and go to state 157
    identifier                     shift and go to state 32
    element_mode                   shift and go to state 158
    character_mode                 shift and go to state 43
    boolean_mode                   shift and go to state 36
    string_mode                    shift and go to state 44
    array_mode                     shift and go to state 45
    integer_mode                   shift and go to state 46
    composite_mode                 shift and go to state 47

state 143

    (47) string_mode -> CHARS LBRACKET string_length RBRACKET .

    ASSIGN          reduce using rule 47 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    COMMA           reduce using rule 47 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    SEMI            reduce using rule 47 (string_mode -> CHARS LBRACKET string_length RBRACKET .)


state 144

    (78) operand2 -> operand2 arithmetic_multiplicative_operator operand3 .

    TIMES           reduce using rule 78 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    DIVIDE          reduce using rule 78 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    MODULO          reduce using rule 78 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    PLUS            reduce using rule 78 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    MINUS           reduce using rule 78 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    CONCAT          reduce using rule 78 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    AND             reduce using rule 78 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    OR              reduce using rule 78 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    EQUAL           reduce using rule 78 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    NOTEQ           reduce using rule 78 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    GREATER         reduce using rule 78 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    GTEQUAL         reduce using rule 78 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LESS            reduce using rule 78 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LTEQUAL         reduce using rule 78 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    IN              reduce using rule 78 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    COMMA           reduce using rule 78 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    SEMI            reduce using rule 78 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    COLON           reduce using rule 78 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    RBRACKET        reduce using rule 78 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LBRACKET        reduce using rule 78 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    RPAREN          reduce using rule 78 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)


state 145

    (76) operand1 -> operand1 operator2 operand2 .
    (78) operand2 -> operand2 . arithmetic_multiplicative_operator operand3
    (84) arithmetic_multiplicative_operator -> . TIMES
    (85) arithmetic_multiplicative_operator -> . DIVIDE
    (86) arithmetic_multiplicative_operator -> . MODULO

    PLUS            reduce using rule 76 (operand1 -> operand1 operator2 operand2 .)
    MINUS           reduce using rule 76 (operand1 -> operand1 operator2 operand2 .)
    CONCAT          reduce using rule 76 (operand1 -> operand1 operator2 operand2 .)
    AND             reduce using rule 76 (operand1 -> operand1 operator2 operand2 .)
    OR              reduce using rule 76 (operand1 -> operand1 operator2 operand2 .)
    EQUAL           reduce using rule 76 (operand1 -> operand1 operator2 operand2 .)
    NOTEQ           reduce using rule 76 (operand1 -> operand1 operator2 operand2 .)
    GREATER         reduce using rule 76 (operand1 -> operand1 operator2 operand2 .)
    GTEQUAL         reduce using rule 76 (operand1 -> operand1 operator2 operand2 .)
    LESS            reduce using rule 76 (operand1 -> operand1 operator2 operand2 .)
    LTEQUAL         reduce using rule 76 (operand1 -> operand1 operator2 operand2 .)
    IN              reduce using rule 76 (operand1 -> operand1 operator2 operand2 .)
    COLON           reduce using rule 76 (operand1 -> operand1 operator2 operand2 .)
    COMMA           reduce using rule 76 (operand1 -> operand1 operator2 operand2 .)
    SEMI            reduce using rule 76 (operand1 -> operand1 operator2 operand2 .)
    RBRACKET        reduce using rule 76 (operand1 -> operand1 operator2 operand2 .)
    LBRACKET        reduce using rule 76 (operand1 -> operand1 operator2 operand2 .)
    RPAREN          reduce using rule 76 (operand1 -> operand1 operator2 operand2 .)
    TIMES           shift and go to state 110
    DIVIDE          shift and go to state 111
    MODULO          shift and go to state 113

    arithmetic_multiplicative_operator shift and go to state 112

state 146

    (74) operand0 -> operand0 operator1 operand1 .
    (76) operand1 -> operand1 . operator2 operand2
    (92) operator2 -> . arithmetic_additive_operator
    (93) operator2 -> . string_concatenation_operator
    (94) arithmetic_additive_operator -> . PLUS
    (95) arithmetic_additive_operator -> . MINUS
    (96) string_concatenation_operator -> . CONCAT

    AND             reduce using rule 74 (operand0 -> operand0 operator1 operand1 .)
    OR              reduce using rule 74 (operand0 -> operand0 operator1 operand1 .)
    EQUAL           reduce using rule 74 (operand0 -> operand0 operator1 operand1 .)
    NOTEQ           reduce using rule 74 (operand0 -> operand0 operator1 operand1 .)
    GREATER         reduce using rule 74 (operand0 -> operand0 operator1 operand1 .)
    GTEQUAL         reduce using rule 74 (operand0 -> operand0 operator1 operand1 .)
    LESS            reduce using rule 74 (operand0 -> operand0 operator1 operand1 .)
    LTEQUAL         reduce using rule 74 (operand0 -> operand0 operator1 operand1 .)
    IN              reduce using rule 74 (operand0 -> operand0 operator1 operand1 .)
    COMMA           reduce using rule 74 (operand0 -> operand0 operator1 operand1 .)
    SEMI            reduce using rule 74 (operand0 -> operand0 operator1 operand1 .)
    RPAREN          reduce using rule 74 (operand0 -> operand0 operator1 operand1 .)
    RBRACKET        reduce using rule 74 (operand0 -> operand0 operator1 operand1 .)
    COLON           reduce using rule 74 (operand0 -> operand0 operator1 operand1 .)
    LBRACKET        reduce using rule 74 (operand0 -> operand0 operator1 operand1 .)
    PLUS            shift and go to state 117
    MINUS           shift and go to state 120
    CONCAT          shift and go to state 116

    arithmetic_additive_operator   shift and go to state 115
    string_concatenation_operator  shift and go to state 118
    operator2                      shift and go to state 119

state 147

    (67) array_element -> array_location LBRACKET expression_list . RBRACKET

    RBRACKET        shift and go to state 159


state 148

    (70) array_slice -> array_location LBRACKET lower_bound . COLON upper_bound RBRACKET

    COLON           shift and go to state 160


state 149

    (68) expression_list -> expression .
    (69) expression_list -> expression . COMMA expression_list
    (42) lower_bound -> expression .

    RBRACKET        reduce using rule 68 (expression_list -> expression .)
    COMMA           shift and go to state 161
    COLON           reduce using rule 42 (lower_bound -> expression .)


state 150

    (64) string_slice -> identifier LBRACKET left_element . COLON right_element RBRACKET

    COLON           shift and go to state 162


state 151

    (62) string_element -> identifier LBRACKET start_element . LBRACKET

    LBRACKET        shift and go to state 163


state 152

    (63) start_element -> expression .
    (65) left_element -> expression .

    LBRACKET        reduce using rule 63 (start_element -> expression .)
    COLON           reduce using rule 65 (left_element -> expression .)


state 153

    (40) discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .

    LPAREN          reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    ASSIGN          reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    COMMA           reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    SEMI            reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    RBRACKET        reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)


state 154

    (41) literal_range -> lower_bound COLON upper_bound .

    RPAREN          reduce using rule 41 (literal_range -> lower_bound COLON upper_bound .)
    COMMA           reduce using rule 41 (literal_range -> lower_bound COLON upper_bound .)
    RBRACKET        reduce using rule 41 (literal_range -> lower_bound COLON upper_bound .)


state 155

    (43) upper_bound -> expression .

    RBRACKET        reduce using rule 43 (upper_bound -> expression .)
    RPAREN          reduce using rule 43 (upper_bound -> expression .)
    COMMA           reduce using rule 43 (upper_bound -> expression .)


state 156

    (51) index_mode_list -> index_mode COMMA index_mode_list .

    RBRACKET        reduce using rule 51 (index_mode_list -> index_mode COMMA index_mode_list .)


state 157

    (54) element_mode -> mode .

    ASSIGN          reduce using rule 54 (element_mode -> mode .)
    COMMA           reduce using rule 54 (element_mode -> mode .)
    SEMI            reduce using rule 54 (element_mode -> mode .)


state 158

    (49) array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .

    COMMA           reduce using rule 49 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)
    SEMI            reduce using rule 49 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)
    ASSIGN          reduce using rule 49 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)


state 159

    (67) array_element -> array_location LBRACKET expression_list RBRACKET .

    ARROW           reduce using rule 67 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    LBRACKET        reduce using rule 67 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    TIMES           reduce using rule 67 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    DIVIDE          reduce using rule 67 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    MODULO          reduce using rule 67 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    PLUS            reduce using rule 67 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    MINUS           reduce using rule 67 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    CONCAT          reduce using rule 67 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    AND             reduce using rule 67 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    OR              reduce using rule 67 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    EQUAL           reduce using rule 67 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    NOTEQ           reduce using rule 67 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    GREATER         reduce using rule 67 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    GTEQUAL         reduce using rule 67 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    LESS            reduce using rule 67 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    LTEQUAL         reduce using rule 67 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    IN              reduce using rule 67 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    RBRACKET        reduce using rule 67 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    COLON           reduce using rule 67 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    RPAREN          reduce using rule 67 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    COMMA           reduce using rule 67 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    SEMI            reduce using rule 67 (array_element -> array_location LBRACKET expression_list RBRACKET .)


state 160

    (70) array_slice -> array_location LBRACKET lower_bound COLON . upper_bound RBRACKET
    (43) upper_bound -> . expression
    (72) expression -> . operand0
    (73) operand0 -> . operand1
    (74) operand0 -> . operand0 operator1 operand1
    (75) operand1 -> . operand2
    (76) operand1 -> . operand1 operator2 operand2
    (77) operand2 -> . operand3
    (78) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (79) operand3 -> . monadic_operator operand4
    (80) operand3 -> . operand4
    (87) monadic_operator -> . MINUS
    (88) monadic_operator -> . NOT
    (81) operand4 -> . array_location
    (82) operand4 -> . referenced_location
    (83) operand4 -> . primitive_value
    (71) array_location -> . location
    (89) referenced_location -> . ARROW array_location
    (106) primitive_value -> . literal
    (55) location -> . identifier
    (56) location -> . dereferenced_reference
    (57) location -> . string_element
    (58) location -> . string_slice
    (59) location -> . array_element
    (60) location -> . array_slice
    (107) literal -> . integer_literal
    (108) literal -> . boolean_literal
    (109) literal -> . character_literal
    (110) literal -> . empty_literal
    (111) literal -> . character_string_literal
    (21) identifier -> . ID
    (61) dereferenced_reference -> . array_location ARROW
    (62) string_element -> . identifier LBRACKET start_element LBRACKET
    (64) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (67) array_element -> . array_location LBRACKET expression_list RBRACKET
    (70) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (112) integer_literal -> . ICONST
    (113) boolean_literal -> . TRUE
    (114) boolean_literal -> . FALSE
    (115) character_literal -> . CCONST
    (116) empty_literal -> . NULL
    (117) character_string_literal -> . SCONST

    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 67
    ID              shift and go to state 10
    ICONST          shift and go to state 88
    TRUE            shift and go to state 69
    FALSE           shift and go to state 90
    CCONST          shift and go to state 86
    NULL            shift and go to state 74
    SCONST          shift and go to state 64

    operand1                       shift and go to state 77
    upper_bound                    shift and go to state 164
    array_slice                    shift and go to state 71
    operand3                       shift and go to state 61
    operand0                       shift and go to state 79
    array_location                 shift and go to state 80
    boolean_literal                shift and go to state 81
    string_slice                   shift and go to state 63
    identifier                     shift and go to state 82
    location                       shift and go to state 65
    referenced_location            shift and go to state 66
    empty_literal                  shift and go to state 76
    literal                        shift and go to state 83
    string_element                 shift and go to state 78
    operand2                       shift and go to state 68
    character_string_literal       shift and go to state 87
    integer_literal                shift and go to state 85
    monadic_operator               shift and go to state 70
    dereferenced_reference         shift and go to state 62
    character_literal              shift and go to state 72
    array_element                  shift and go to state 75
    expression                     shift and go to state 155
    operand4                       shift and go to state 92
    primitive_value                shift and go to state 89

state 161

    (69) expression_list -> expression COMMA . expression_list
    (68) expression_list -> . expression
    (69) expression_list -> . expression COMMA expression_list
    (72) expression -> . operand0
    (73) operand0 -> . operand1
    (74) operand0 -> . operand0 operator1 operand1
    (75) operand1 -> . operand2
    (76) operand1 -> . operand1 operator2 operand2
    (77) operand2 -> . operand3
    (78) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (79) operand3 -> . monadic_operator operand4
    (80) operand3 -> . operand4
    (87) monadic_operator -> . MINUS
    (88) monadic_operator -> . NOT
    (81) operand4 -> . array_location
    (82) operand4 -> . referenced_location
    (83) operand4 -> . primitive_value
    (71) array_location -> . location
    (89) referenced_location -> . ARROW array_location
    (106) primitive_value -> . literal
    (55) location -> . identifier
    (56) location -> . dereferenced_reference
    (57) location -> . string_element
    (58) location -> . string_slice
    (59) location -> . array_element
    (60) location -> . array_slice
    (107) literal -> . integer_literal
    (108) literal -> . boolean_literal
    (109) literal -> . character_literal
    (110) literal -> . empty_literal
    (111) literal -> . character_string_literal
    (21) identifier -> . ID
    (61) dereferenced_reference -> . array_location ARROW
    (62) string_element -> . identifier LBRACKET start_element LBRACKET
    (64) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (67) array_element -> . array_location LBRACKET expression_list RBRACKET
    (70) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (112) integer_literal -> . ICONST
    (113) boolean_literal -> . TRUE
    (114) boolean_literal -> . FALSE
    (115) character_literal -> . CCONST
    (116) empty_literal -> . NULL
    (117) character_string_literal -> . SCONST

    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 67
    ID              shift and go to state 10
    ICONST          shift and go to state 88
    TRUE            shift and go to state 69
    FALSE           shift and go to state 90
    CCONST          shift and go to state 86
    NULL            shift and go to state 74
    SCONST          shift and go to state 64

    operand1                       shift and go to state 77
    array_slice                    shift and go to state 71
    operand3                       shift and go to state 61
    operand0                       shift and go to state 79
    dereferenced_reference         shift and go to state 62
    boolean_literal                shift and go to state 81
    string_slice                   shift and go to state 63
    identifier                     shift and go to state 82
    location                       shift and go to state 65
    referenced_location            shift and go to state 66
    empty_literal                  shift and go to state 76
    literal                        shift and go to state 83
    string_element                 shift and go to state 78
    operand2                       shift and go to state 68
    integer_literal                shift and go to state 85
    monadic_operator               shift and go to state 70
    array_location                 shift and go to state 80
    character_literal              shift and go to state 72
    expression_list                shift and go to state 165
    array_element                  shift and go to state 75
    expression                     shift and go to state 166
    operand4                       shift and go to state 92
    primitive_value                shift and go to state 89
    character_string_literal       shift and go to state 87

state 162

    (64) string_slice -> identifier LBRACKET left_element COLON . right_element RBRACKET
    (66) right_element -> . expression
    (72) expression -> . operand0
    (73) operand0 -> . operand1
    (74) operand0 -> . operand0 operator1 operand1
    (75) operand1 -> . operand2
    (76) operand1 -> . operand1 operator2 operand2
    (77) operand2 -> . operand3
    (78) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (79) operand3 -> . monadic_operator operand4
    (80) operand3 -> . operand4
    (87) monadic_operator -> . MINUS
    (88) monadic_operator -> . NOT
    (81) operand4 -> . array_location
    (82) operand4 -> . referenced_location
    (83) operand4 -> . primitive_value
    (71) array_location -> . location
    (89) referenced_location -> . ARROW array_location
    (106) primitive_value -> . literal
    (55) location -> . identifier
    (56) location -> . dereferenced_reference
    (57) location -> . string_element
    (58) location -> . string_slice
    (59) location -> . array_element
    (60) location -> . array_slice
    (107) literal -> . integer_literal
    (108) literal -> . boolean_literal
    (109) literal -> . character_literal
    (110) literal -> . empty_literal
    (111) literal -> . character_string_literal
    (21) identifier -> . ID
    (61) dereferenced_reference -> . array_location ARROW
    (62) string_element -> . identifier LBRACKET start_element LBRACKET
    (64) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (67) array_element -> . array_location LBRACKET expression_list RBRACKET
    (70) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (112) integer_literal -> . ICONST
    (113) boolean_literal -> . TRUE
    (114) boolean_literal -> . FALSE
    (115) character_literal -> . CCONST
    (116) empty_literal -> . NULL
    (117) character_string_literal -> . SCONST

    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 67
    ID              shift and go to state 10
    ICONST          shift and go to state 88
    TRUE            shift and go to state 69
    FALSE           shift and go to state 90
    CCONST          shift and go to state 86
    NULL            shift and go to state 74
    SCONST          shift and go to state 64

    operand1                       shift and go to state 77
    right_element                  shift and go to state 167
    array_slice                    shift and go to state 71
    operand3                       shift and go to state 61
    operand0                       shift and go to state 79
    array_location                 shift and go to state 80
    boolean_literal                shift and go to state 81
    string_slice                   shift and go to state 63
    identifier                     shift and go to state 82
    location                       shift and go to state 65
    referenced_location            shift and go to state 66
    empty_literal                  shift and go to state 76
    literal                        shift and go to state 83
    string_element                 shift and go to state 78
    integer_literal                shift and go to state 85
    character_string_literal       shift and go to state 87
    operand2                       shift and go to state 68
    monadic_operator               shift and go to state 70
    dereferenced_reference         shift and go to state 62
    character_literal              shift and go to state 72
    array_element                  shift and go to state 75
    expression                     shift and go to state 168
    operand4                       shift and go to state 92
    primitive_value                shift and go to state 89

state 163

    (62) string_element -> identifier LBRACKET start_element LBRACKET .

    ARROW           reduce using rule 62 (string_element -> identifier LBRACKET start_element LBRACKET .)
    LBRACKET        reduce using rule 62 (string_element -> identifier LBRACKET start_element LBRACKET .)
    TIMES           reduce using rule 62 (string_element -> identifier LBRACKET start_element LBRACKET .)
    DIVIDE          reduce using rule 62 (string_element -> identifier LBRACKET start_element LBRACKET .)
    MODULO          reduce using rule 62 (string_element -> identifier LBRACKET start_element LBRACKET .)
    PLUS            reduce using rule 62 (string_element -> identifier LBRACKET start_element LBRACKET .)
    MINUS           reduce using rule 62 (string_element -> identifier LBRACKET start_element LBRACKET .)
    CONCAT          reduce using rule 62 (string_element -> identifier LBRACKET start_element LBRACKET .)
    AND             reduce using rule 62 (string_element -> identifier LBRACKET start_element LBRACKET .)
    OR              reduce using rule 62 (string_element -> identifier LBRACKET start_element LBRACKET .)
    EQUAL           reduce using rule 62 (string_element -> identifier LBRACKET start_element LBRACKET .)
    NOTEQ           reduce using rule 62 (string_element -> identifier LBRACKET start_element LBRACKET .)
    GREATER         reduce using rule 62 (string_element -> identifier LBRACKET start_element LBRACKET .)
    GTEQUAL         reduce using rule 62 (string_element -> identifier LBRACKET start_element LBRACKET .)
    LESS            reduce using rule 62 (string_element -> identifier LBRACKET start_element LBRACKET .)
    LTEQUAL         reduce using rule 62 (string_element -> identifier LBRACKET start_element LBRACKET .)
    IN              reduce using rule 62 (string_element -> identifier LBRACKET start_element LBRACKET .)
    COLON           reduce using rule 62 (string_element -> identifier LBRACKET start_element LBRACKET .)
    RBRACKET        reduce using rule 62 (string_element -> identifier LBRACKET start_element LBRACKET .)
    COMMA           reduce using rule 62 (string_element -> identifier LBRACKET start_element LBRACKET .)
    SEMI            reduce using rule 62 (string_element -> identifier LBRACKET start_element LBRACKET .)
    RPAREN          reduce using rule 62 (string_element -> identifier LBRACKET start_element LBRACKET .)


state 164

    (70) array_slice -> array_location LBRACKET lower_bound COLON upper_bound . RBRACKET

    RBRACKET        shift and go to state 169


state 165

    (69) expression_list -> expression COMMA expression_list .

    RBRACKET        reduce using rule 69 (expression_list -> expression COMMA expression_list .)


state 166

    (68) expression_list -> expression .
    (69) expression_list -> expression . COMMA expression_list

    RBRACKET        reduce using rule 68 (expression_list -> expression .)
    COMMA           shift and go to state 161


state 167

    (64) string_slice -> identifier LBRACKET left_element COLON right_element . RBRACKET

    RBRACKET        shift and go to state 170


state 168

    (66) right_element -> expression .

    RBRACKET        reduce using rule 66 (right_element -> expression .)


state 169

    (70) array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .

    ARROW           reduce using rule 70 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LBRACKET        reduce using rule 70 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    TIMES           reduce using rule 70 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    DIVIDE          reduce using rule 70 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    MODULO          reduce using rule 70 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    PLUS            reduce using rule 70 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    MINUS           reduce using rule 70 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    CONCAT          reduce using rule 70 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    AND             reduce using rule 70 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    OR              reduce using rule 70 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    EQUAL           reduce using rule 70 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    NOTEQ           reduce using rule 70 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    GREATER         reduce using rule 70 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    GTEQUAL         reduce using rule 70 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LESS            reduce using rule 70 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LTEQUAL         reduce using rule 70 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    IN              reduce using rule 70 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    COLON           reduce using rule 70 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    RBRACKET        reduce using rule 70 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    COMMA           reduce using rule 70 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    SEMI            reduce using rule 70 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    RPAREN          reduce using rule 70 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)


state 170

    (64) string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .

    ARROW           reduce using rule 64 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    LBRACKET        reduce using rule 64 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    TIMES           reduce using rule 64 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    DIVIDE          reduce using rule 64 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    MODULO          reduce using rule 64 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    PLUS            reduce using rule 64 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    MINUS           reduce using rule 64 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    CONCAT          reduce using rule 64 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    AND             reduce using rule 64 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    OR              reduce using rule 64 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    EQUAL           reduce using rule 64 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    NOTEQ           reduce using rule 64 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    GREATER         reduce using rule 64 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    GTEQUAL         reduce using rule 64 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    LESS            reduce using rule 64 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    LTEQUAL         reduce using rule 64 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    IN              reduce using rule 64 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    COLON           reduce using rule 64 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    RPAREN          reduce using rule 64 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    COMMA           reduce using rule 64 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    RBRACKET        reduce using rule 64 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    SEMI            reduce using rule 64 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LBRACKET in state 80 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 82 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 103 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 109 resolved as shift
