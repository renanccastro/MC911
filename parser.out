Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    UPPER
    BY
    ASC
    DOWN
    READ
    LOWER
    LENGTH
    RETURN
    DO
    EXIT
    OD
    RESULT
    PRINT
    ABS
    FOR
    TO
    NUM
    WHILE

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement statement_nullable
Rule 3     statement_nullable -> statement statement_nullable
Rule 4     statement_nullable -> empty
Rule 5     statement -> declaration_statement
Rule 6     statement -> synonym_statement
Rule 7     statement -> newmode_statement
Rule 8     statement -> procedure_statement
Rule 9     synonym_statement -> SYN synonym_list SEMI
Rule 10    synonym_list -> synonym_definition
Rule 11    synonym_list -> synonym_definition COMMA synonym_list
Rule 12    synonym_definition -> identifier_list mode ASSIGN expression
Rule 13    synonym_definition -> identifier_list ASSIGN expression
Rule 14    declaration_statement -> DCL declaration_list SEMI
Rule 15    declaration_list -> declaration
Rule 16    declaration_list -> declaration COMMA declaration_list
Rule 17    declaration -> identifier_list mode initialization
Rule 18    declaration -> identifier_list mode
Rule 19    initialization -> ASSIGN expression
Rule 20    identifier_list -> identifier
Rule 21    identifier_list -> identifier COMMA identifier_list
Rule 22    identifier -> ID
Rule 23    newmode_statement -> TYPE newmode_list SEMI
Rule 24    newmode_list -> mode_definition
Rule 25    newmode_list -> mode_definition COMMA newmode_list
Rule 26    mode_definition -> identifier_list ASSIGN mode
Rule 27    procedure_statement -> ID COLON procedure_definition
Rule 28    procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI
Rule 29    procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI
Rule 30    formal_parameter_list -> formal_parameter
Rule 31    formal_parameter_list -> formal_parameter COMMA formal_parameter
Rule 32    formal_parameter -> identifier_list mode LOC
Rule 33    formal_parameter -> identifier_list mode
Rule 34    result_spec -> RETURNS LPAREN mode LOC RPAREN
Rule 35    result_spec -> RETURNS LPAREN mode RPAREN
Rule 36    mode -> mode_name
Rule 37    mode -> discrete_mode
Rule 38    mode -> reference_mode
Rule 39    mode -> composite_mode
Rule 40    mode_name -> identifier
Rule 41    discrete_mode -> integer_mode
Rule 42    discrete_mode -> boolean_mode
Rule 43    discrete_mode -> character_mode
Rule 44    discrete_mode -> discrete_range_mode
Rule 45    discrete_mode_name -> identifier
Rule 46    integer_mode -> INT
Rule 47    boolean_mode -> BOOL
Rule 48    character_mode -> CHAR
Rule 49    discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN
Rule 50    discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN
Rule 51    literal_range -> lower_bound COLON upper_bound
Rule 52    lower_bound -> expression
Rule 53    upper_bound -> expression
Rule 54    reference_mode -> REF mode
Rule 55    composite_mode -> string_mode
Rule 56    composite_mode -> array_mode
Rule 57    string_mode -> CHARS LBRACKET string_length RBRACKET
Rule 58    string_length -> integer_literal
Rule 59    array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode
Rule 60    index_mode_list -> index_mode
Rule 61    index_mode_list -> index_mode COMMA index_mode_list
Rule 62    index_mode -> discrete_mode
Rule 63    index_mode -> literal_range
Rule 64    element_mode -> mode
Rule 65    location -> identifier
Rule 66    location -> dereferenced_reference
Rule 67    location -> string_element
Rule 68    location -> string_slice
Rule 69    location -> array_element
Rule 70    location -> array_slice
Rule 71    dereferenced_reference -> array_location ARROW
Rule 72    string_element -> identifier LBRACKET start_element LBRACKET
Rule 73    start_element -> expression
Rule 74    string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET
Rule 75    left_element -> expression
Rule 76    right_element -> expression
Rule 77    array_element -> array_location LBRACKET expression_list RBRACKET
Rule 78    expression_list -> expression
Rule 79    expression_list -> expression COMMA expression_list
Rule 80    array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET
Rule 81    array_location -> location
Rule 82    expression -> operand0
Rule 83    expression -> conditional_expression
Rule 84    conditional_expression -> IF expression then_expression else_expression FI
Rule 85    conditional_expression -> IF expression then_expression elsif_expression else_expression FI
Rule 86    then_expression -> THEN expression
Rule 87    else_expression -> ELSE expression
Rule 88    elsif_expression -> ELSIF expression then_expression
Rule 89    elsif_expression -> elsif_expression ELSIF expression then_expression
Rule 90    operand0 -> operand1
Rule 91    operand0 -> operand0 operator1 operand1
Rule 92    operand1 -> operand2
Rule 93    operand1 -> operand1 operator2 operand2
Rule 94    operand2 -> operand3
Rule 95    operand2 -> operand2 arithmetic_multiplicative_operator operand3
Rule 96    operand3 -> monadic_operator operand4
Rule 97    operand3 -> operand4
Rule 98    operand4 -> array_location
Rule 99    operand4 -> referenced_location
Rule 100   operand4 -> primitive_value
Rule 101   arithmetic_multiplicative_operator -> TIMES
Rule 102   arithmetic_multiplicative_operator -> DIVIDE
Rule 103   arithmetic_multiplicative_operator -> MODULO
Rule 104   monadic_operator -> MINUS
Rule 105   monadic_operator -> NOT
Rule 106   referenced_location -> ARROW array_location
Rule 107   operator1 -> relational_operator
Rule 108   operator1 -> membership_operator
Rule 109   operator2 -> arithmetic_additive_operator
Rule 110   operator2 -> string_concatenation_operator
Rule 111   arithmetic_additive_operator -> PLUS
Rule 112   arithmetic_additive_operator -> MINUS
Rule 113   string_concatenation_operator -> CONCAT
Rule 114   relational_operator -> AND
Rule 115   relational_operator -> OR
Rule 116   relational_operator -> EQUAL
Rule 117   relational_operator -> NOTEQ
Rule 118   relational_operator -> GREATER
Rule 119   relational_operator -> GTEQUAL
Rule 120   relational_operator -> LESS
Rule 121   relational_operator -> LTEQUAL
Rule 122   membership_operator -> IN
Rule 123   primitive_value -> literal
Rule 124   literal -> integer_literal
Rule 125   literal -> boolean_literal
Rule 126   literal -> character_literal
Rule 127   literal -> empty_literal
Rule 128   literal -> character_string_literal
Rule 129   integer_literal -> ICONST
Rule 130   boolean_literal -> TRUE
Rule 131   boolean_literal -> FALSE
Rule 132   character_literal -> CCONST
Rule 133   empty_literal -> NULL
Rule 134   character_string_literal -> SCONST
Rule 135   empty -> <empty>

Terminals, with rules where they appear

ABS                  : 
AND                  : 114
ARRAY                : 59
ARROW                : 71 106
ASC                  : 
ASSIGN               : 12 13 19 26
BOOL                 : 47
BY                   : 
CCONST               : 132
CHAR                 : 48
CHARS                : 57
COLON                : 27 51 74 80
COMMA                : 11 16 21 25 31 61 79
CONCAT               : 113
DCL                  : 14
DIVIDE               : 102
DO                   : 
DOWN                 : 
ELSE                 : 87
ELSIF                : 88 89
END                  : 28 29
EQUAL                : 116
EXIT                 : 
FALSE                : 131
FI                   : 84 85
FOR                  : 
GREATER              : 118
GTEQUAL              : 119
ICONST               : 129
ID                   : 22 27
IF                   : 84 85
IN                   : 122
INT                  : 46
LBRACKET             : 57 59 72 72 74 77 80
LENGTH               : 
LESS                 : 120
LOC                  : 32 34
LOWER                : 
LPAREN               : 28 29 34 35 49 50
LTEQUAL              : 121
MINUS                : 104 112
MODULO               : 103
NOT                  : 105
NOTEQ                : 117
NULL                 : 133
NUM                  : 
OD                   : 
OR                   : 115
PLUS                 : 111
PRINT                : 
PROC                 : 28 29
RBRACKET             : 57 59 74 77 80
READ                 : 
REF                  : 54
RESULT               : 
RETURN               : 
RETURNS              : 34 35
RPAREN               : 28 29 34 35 49 50
SCONST               : 134
SEMI                 : 9 14 23 28 28 29 29
SYN                  : 9
THEN                 : 86
TIMES                : 101
TO                   : 
TRUE                 : 130
TYPE                 : 23
UPPER                : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

arithmetic_additive_operator : 109
arithmetic_multiplicative_operator : 95
array_element        : 69
array_location       : 71 77 80 98 106
array_mode           : 56
array_slice          : 70
boolean_literal      : 125
boolean_mode         : 42
character_literal    : 126
character_mode       : 43
character_string_literal : 128
composite_mode       : 39
conditional_expression : 83
declaration          : 15 16
declaration_list     : 14 16
declaration_statement : 5
dereferenced_reference : 66
discrete_mode        : 37 50 62
discrete_mode_name   : 49
discrete_range_mode  : 44
element_mode         : 59
else_expression      : 84 85
elsif_expression     : 85 89
empty                : 4
empty_literal        : 127
expression           : 12 13 19 52 53 73 75 76 78 79 84 85 86 87 88 89
expression_list      : 77 79
formal_parameter     : 30 31 31
formal_parameter_list : 28 29
identifier           : 20 21 40 45 65 72 74
identifier_list      : 12 13 17 18 21 26 32 33
index_mode           : 60 61
index_mode_list      : 59 61
initialization       : 17
integer_literal      : 58 124
integer_mode         : 41
left_element         : 74
literal              : 123
literal_range        : 49 50 63
location             : 81
lower_bound          : 51 80
membership_operator  : 108
mode                 : 12 17 18 26 32 33 34 35 54 64
mode_definition      : 24 25
mode_name            : 36
monadic_operator     : 96
newmode_list         : 23 25
newmode_statement    : 7
operand0             : 82 91
operand1             : 90 91 93
operand2             : 92 93 95
operand3             : 94 95
operand4             : 96 97
operator1            : 91
operator2            : 93
primitive_value      : 100
procedure_definition : 27
procedure_statement  : 8
program              : 0
reference_mode       : 38
referenced_location  : 99
relational_operator  : 107
result_spec          : 28
right_element        : 74
start_element        : 72
statement            : 2 3
statement_list       : 1
statement_nullable   : 2 3 28 29
string_concatenation_operator : 110
string_element       : 67
string_length        : 57
string_mode          : 55
string_slice         : 68
synonym_definition   : 10 11
synonym_list         : 9 11
synonym_statement    : 6
then_expression      : 84 85 88 89
upper_bound          : 51 80

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement statement_nullable
    (5) statement -> . declaration_statement
    (6) statement -> . synonym_statement
    (7) statement -> . newmode_statement
    (8) statement -> . procedure_statement
    (14) declaration_statement -> . DCL declaration_list SEMI
    (9) synonym_statement -> . SYN synonym_list SEMI
    (23) newmode_statement -> . TYPE newmode_list SEMI
    (27) procedure_statement -> . ID COLON procedure_definition

    DCL             shift and go to state 7
    SYN             shift and go to state 11
    TYPE            shift and go to state 4
    ID              shift and go to state 2

    declaration_statement          shift and go to state 1
    statement_list                 shift and go to state 3
    synonym_statement              shift and go to state 6
    procedure_statement            shift and go to state 5
    newmode_statement              shift and go to state 8
    program                        shift and go to state 9
    statement                      shift and go to state 10

state 1

    (5) statement -> declaration_statement .

    DCL             reduce using rule 5 (statement -> declaration_statement .)
    SYN             reduce using rule 5 (statement -> declaration_statement .)
    TYPE            reduce using rule 5 (statement -> declaration_statement .)
    ID              reduce using rule 5 (statement -> declaration_statement .)
    $end            reduce using rule 5 (statement -> declaration_statement .)
    END             reduce using rule 5 (statement -> declaration_statement .)


state 2

    (27) procedure_statement -> ID . COLON procedure_definition

    COLON           shift and go to state 12


state 3

    (1) program -> statement_list .

    $end            reduce using rule 1 (program -> statement_list .)


state 4

    (23) newmode_statement -> TYPE . newmode_list SEMI
    (24) newmode_list -> . mode_definition
    (25) newmode_list -> . mode_definition COMMA newmode_list
    (26) mode_definition -> . identifier_list ASSIGN mode
    (20) identifier_list -> . identifier
    (21) identifier_list -> . identifier COMMA identifier_list
    (22) identifier -> . ID

    ID              shift and go to state 15

    identifier                     shift and go to state 16
    newmode_list                   shift and go to state 13
    mode_definition                shift and go to state 14
    identifier_list                shift and go to state 17

state 5

    (8) statement -> procedure_statement .

    DCL             reduce using rule 8 (statement -> procedure_statement .)
    SYN             reduce using rule 8 (statement -> procedure_statement .)
    TYPE            reduce using rule 8 (statement -> procedure_statement .)
    ID              reduce using rule 8 (statement -> procedure_statement .)
    $end            reduce using rule 8 (statement -> procedure_statement .)
    END             reduce using rule 8 (statement -> procedure_statement .)


state 6

    (6) statement -> synonym_statement .

    DCL             reduce using rule 6 (statement -> synonym_statement .)
    SYN             reduce using rule 6 (statement -> synonym_statement .)
    TYPE            reduce using rule 6 (statement -> synonym_statement .)
    ID              reduce using rule 6 (statement -> synonym_statement .)
    $end            reduce using rule 6 (statement -> synonym_statement .)
    END             reduce using rule 6 (statement -> synonym_statement .)


state 7

    (14) declaration_statement -> DCL . declaration_list SEMI
    (15) declaration_list -> . declaration
    (16) declaration_list -> . declaration COMMA declaration_list
    (17) declaration -> . identifier_list mode initialization
    (18) declaration -> . identifier_list mode
    (20) identifier_list -> . identifier
    (21) identifier_list -> . identifier COMMA identifier_list
    (22) identifier -> . ID

    ID              shift and go to state 15

    declaration_list               shift and go to state 18
    identifier                     shift and go to state 16
    declaration                    shift and go to state 19
    identifier_list                shift and go to state 20

state 8

    (7) statement -> newmode_statement .

    DCL             reduce using rule 7 (statement -> newmode_statement .)
    SYN             reduce using rule 7 (statement -> newmode_statement .)
    TYPE            reduce using rule 7 (statement -> newmode_statement .)
    ID              reduce using rule 7 (statement -> newmode_statement .)
    $end            reduce using rule 7 (statement -> newmode_statement .)
    END             reduce using rule 7 (statement -> newmode_statement .)


state 9

    (0) S' -> program .



state 10

    (2) statement_list -> statement . statement_nullable
    (3) statement_nullable -> . statement statement_nullable
    (4) statement_nullable -> . empty
    (5) statement -> . declaration_statement
    (6) statement -> . synonym_statement
    (7) statement -> . newmode_statement
    (8) statement -> . procedure_statement
    (135) empty -> .
    (14) declaration_statement -> . DCL declaration_list SEMI
    (9) synonym_statement -> . SYN synonym_list SEMI
    (23) newmode_statement -> . TYPE newmode_list SEMI
    (27) procedure_statement -> . ID COLON procedure_definition

    $end            reduce using rule 135 (empty -> .)
    DCL             shift and go to state 7
    SYN             shift and go to state 11
    TYPE            shift and go to state 4
    ID              shift and go to state 2

    declaration_statement          shift and go to state 1
    newmode_statement              shift and go to state 8
    synonym_statement              shift and go to state 6
    procedure_statement            shift and go to state 5
    statement_nullable             shift and go to state 23
    statement                      shift and go to state 22
    empty                          shift and go to state 21

state 11

    (9) synonym_statement -> SYN . synonym_list SEMI
    (10) synonym_list -> . synonym_definition
    (11) synonym_list -> . synonym_definition COMMA synonym_list
    (12) synonym_definition -> . identifier_list mode ASSIGN expression
    (13) synonym_definition -> . identifier_list ASSIGN expression
    (20) identifier_list -> . identifier
    (21) identifier_list -> . identifier COMMA identifier_list
    (22) identifier -> . ID

    ID              shift and go to state 15

    synonym_definition             shift and go to state 24
    identifier                     shift and go to state 16
    synonym_list                   shift and go to state 25
    identifier_list                shift and go to state 26

state 12

    (27) procedure_statement -> ID COLON . procedure_definition
    (28) procedure_definition -> . PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI
    (29) procedure_definition -> . PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI

    PROC            shift and go to state 27

    procedure_definition           shift and go to state 28

state 13

    (23) newmode_statement -> TYPE newmode_list . SEMI

    SEMI            shift and go to state 29


state 14

    (24) newmode_list -> mode_definition .
    (25) newmode_list -> mode_definition . COMMA newmode_list

    SEMI            reduce using rule 24 (newmode_list -> mode_definition .)
    COMMA           shift and go to state 30


state 15

    (22) identifier -> ID .

    LBRACKET        reduce using rule 22 (identifier -> ID .)
    ARROW           reduce using rule 22 (identifier -> ID .)
    TIMES           reduce using rule 22 (identifier -> ID .)
    DIVIDE          reduce using rule 22 (identifier -> ID .)
    MODULO          reduce using rule 22 (identifier -> ID .)
    PLUS            reduce using rule 22 (identifier -> ID .)
    MINUS           reduce using rule 22 (identifier -> ID .)
    CONCAT          reduce using rule 22 (identifier -> ID .)
    AND             reduce using rule 22 (identifier -> ID .)
    OR              reduce using rule 22 (identifier -> ID .)
    EQUAL           reduce using rule 22 (identifier -> ID .)
    NOTEQ           reduce using rule 22 (identifier -> ID .)
    GREATER         reduce using rule 22 (identifier -> ID .)
    GTEQUAL         reduce using rule 22 (identifier -> ID .)
    LESS            reduce using rule 22 (identifier -> ID .)
    LTEQUAL         reduce using rule 22 (identifier -> ID .)
    IN              reduce using rule 22 (identifier -> ID .)
    THEN            reduce using rule 22 (identifier -> ID .)
    LPAREN          reduce using rule 22 (identifier -> ID .)
    COLON           reduce using rule 22 (identifier -> ID .)
    COMMA           reduce using rule 22 (identifier -> ID .)
    RBRACKET        reduce using rule 22 (identifier -> ID .)
    SEMI            reduce using rule 22 (identifier -> ID .)
    RPAREN          reduce using rule 22 (identifier -> ID .)
    ELSE            reduce using rule 22 (identifier -> ID .)
    ELSIF           reduce using rule 22 (identifier -> ID .)
    FI              reduce using rule 22 (identifier -> ID .)
    REF             reduce using rule 22 (identifier -> ID .)
    ID              reduce using rule 22 (identifier -> ID .)
    INT             reduce using rule 22 (identifier -> ID .)
    BOOL            reduce using rule 22 (identifier -> ID .)
    CHAR            reduce using rule 22 (identifier -> ID .)
    CHARS           reduce using rule 22 (identifier -> ID .)
    ARRAY           reduce using rule 22 (identifier -> ID .)
    ASSIGN          reduce using rule 22 (identifier -> ID .)
    LOC             reduce using rule 22 (identifier -> ID .)


state 16

    (20) identifier_list -> identifier .
    (21) identifier_list -> identifier . COMMA identifier_list

    ASSIGN          reduce using rule 20 (identifier_list -> identifier .)
    REF             reduce using rule 20 (identifier_list -> identifier .)
    ID              reduce using rule 20 (identifier_list -> identifier .)
    INT             reduce using rule 20 (identifier_list -> identifier .)
    BOOL            reduce using rule 20 (identifier_list -> identifier .)
    CHAR            reduce using rule 20 (identifier_list -> identifier .)
    CHARS           reduce using rule 20 (identifier_list -> identifier .)
    ARRAY           reduce using rule 20 (identifier_list -> identifier .)
    COMMA           shift and go to state 31


state 17

    (26) mode_definition -> identifier_list . ASSIGN mode

    ASSIGN          shift and go to state 32


state 18

    (14) declaration_statement -> DCL declaration_list . SEMI

    SEMI            shift and go to state 33


state 19

    (15) declaration_list -> declaration .
    (16) declaration_list -> declaration . COMMA declaration_list

    SEMI            reduce using rule 15 (declaration_list -> declaration .)
    COMMA           shift and go to state 34


state 20

    (17) declaration -> identifier_list . mode initialization
    (18) declaration -> identifier_list . mode
    (36) mode -> . mode_name
    (37) mode -> . discrete_mode
    (38) mode -> . reference_mode
    (39) mode -> . composite_mode
    (40) mode_name -> . identifier
    (41) discrete_mode -> . integer_mode
    (42) discrete_mode -> . boolean_mode
    (43) discrete_mode -> . character_mode
    (44) discrete_mode -> . discrete_range_mode
    (54) reference_mode -> . REF mode
    (55) composite_mode -> . string_mode
    (56) composite_mode -> . array_mode
    (22) identifier -> . ID
    (46) integer_mode -> . INT
    (47) boolean_mode -> . BOOL
    (48) character_mode -> . CHAR
    (49) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (50) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (57) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (59) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (45) discrete_mode_name -> . identifier

    REF             shift and go to state 38
    ID              shift and go to state 15
    INT             shift and go to state 39
    BOOL            shift and go to state 53
    CHAR            shift and go to state 51
    CHARS           shift and go to state 43
    ARRAY           shift and go to state 52

    discrete_range_mode            shift and go to state 45
    string_mode                    shift and go to state 44
    identifier                     shift and go to state 36
    composite_mode                 shift and go to state 46
    character_mode                 shift and go to state 47
    discrete_mode_name             shift and go to state 48
    mode                           shift and go to state 49
    boolean_mode                   shift and go to state 50
    mode_name                      shift and go to state 41
    reference_mode                 shift and go to state 35
    array_mode                     shift and go to state 42
    integer_mode                   shift and go to state 40
    discrete_mode                  shift and go to state 37

state 21

    (4) statement_nullable -> empty .

    $end            reduce using rule 4 (statement_nullable -> empty .)
    END             reduce using rule 4 (statement_nullable -> empty .)


state 22

    (3) statement_nullable -> statement . statement_nullable
    (3) statement_nullable -> . statement statement_nullable
    (4) statement_nullable -> . empty
    (5) statement -> . declaration_statement
    (6) statement -> . synonym_statement
    (7) statement -> . newmode_statement
    (8) statement -> . procedure_statement
    (135) empty -> .
    (14) declaration_statement -> . DCL declaration_list SEMI
    (9) synonym_statement -> . SYN synonym_list SEMI
    (23) newmode_statement -> . TYPE newmode_list SEMI
    (27) procedure_statement -> . ID COLON procedure_definition

    $end            reduce using rule 135 (empty -> .)
    END             reduce using rule 135 (empty -> .)
    DCL             shift and go to state 7
    SYN             shift and go to state 11
    TYPE            shift and go to state 4
    ID              shift and go to state 2

    declaration_statement          shift and go to state 1
    newmode_statement              shift and go to state 8
    synonym_statement              shift and go to state 6
    procedure_statement            shift and go to state 5
    statement_nullable             shift and go to state 54
    statement                      shift and go to state 22
    empty                          shift and go to state 21

state 23

    (2) statement_list -> statement statement_nullable .

    $end            reduce using rule 2 (statement_list -> statement statement_nullable .)


state 24

    (10) synonym_list -> synonym_definition .
    (11) synonym_list -> synonym_definition . COMMA synonym_list

    SEMI            reduce using rule 10 (synonym_list -> synonym_definition .)
    COMMA           shift and go to state 55


state 25

    (9) synonym_statement -> SYN synonym_list . SEMI

    SEMI            shift and go to state 56


state 26

    (12) synonym_definition -> identifier_list . mode ASSIGN expression
    (13) synonym_definition -> identifier_list . ASSIGN expression
    (36) mode -> . mode_name
    (37) mode -> . discrete_mode
    (38) mode -> . reference_mode
    (39) mode -> . composite_mode
    (40) mode_name -> . identifier
    (41) discrete_mode -> . integer_mode
    (42) discrete_mode -> . boolean_mode
    (43) discrete_mode -> . character_mode
    (44) discrete_mode -> . discrete_range_mode
    (54) reference_mode -> . REF mode
    (55) composite_mode -> . string_mode
    (56) composite_mode -> . array_mode
    (22) identifier -> . ID
    (46) integer_mode -> . INT
    (47) boolean_mode -> . BOOL
    (48) character_mode -> . CHAR
    (49) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (50) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (57) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (59) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (45) discrete_mode_name -> . identifier

    ASSIGN          shift and go to state 57
    REF             shift and go to state 38
    ID              shift and go to state 15
    INT             shift and go to state 39
    BOOL            shift and go to state 53
    CHAR            shift and go to state 51
    CHARS           shift and go to state 43
    ARRAY           shift and go to state 52

    discrete_range_mode            shift and go to state 45
    identifier                     shift and go to state 36
    composite_mode                 shift and go to state 46
    character_mode                 shift and go to state 47
    array_mode                     shift and go to state 42
    discrete_mode_name             shift and go to state 48
    mode                           shift and go to state 58
    boolean_mode                   shift and go to state 50
    mode_name                      shift and go to state 41
    reference_mode                 shift and go to state 35
    integer_mode                   shift and go to state 40
    string_mode                    shift and go to state 44
    discrete_mode                  shift and go to state 37

state 27

    (28) procedure_definition -> PROC . LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI
    (29) procedure_definition -> PROC . LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI

    LPAREN          shift and go to state 59


state 28

    (27) procedure_statement -> ID COLON procedure_definition .

    DCL             reduce using rule 27 (procedure_statement -> ID COLON procedure_definition .)
    SYN             reduce using rule 27 (procedure_statement -> ID COLON procedure_definition .)
    TYPE            reduce using rule 27 (procedure_statement -> ID COLON procedure_definition .)
    ID              reduce using rule 27 (procedure_statement -> ID COLON procedure_definition .)
    $end            reduce using rule 27 (procedure_statement -> ID COLON procedure_definition .)
    END             reduce using rule 27 (procedure_statement -> ID COLON procedure_definition .)


state 29

    (23) newmode_statement -> TYPE newmode_list SEMI .

    DCL             reduce using rule 23 (newmode_statement -> TYPE newmode_list SEMI .)
    SYN             reduce using rule 23 (newmode_statement -> TYPE newmode_list SEMI .)
    TYPE            reduce using rule 23 (newmode_statement -> TYPE newmode_list SEMI .)
    ID              reduce using rule 23 (newmode_statement -> TYPE newmode_list SEMI .)
    $end            reduce using rule 23 (newmode_statement -> TYPE newmode_list SEMI .)
    END             reduce using rule 23 (newmode_statement -> TYPE newmode_list SEMI .)


state 30

    (25) newmode_list -> mode_definition COMMA . newmode_list
    (24) newmode_list -> . mode_definition
    (25) newmode_list -> . mode_definition COMMA newmode_list
    (26) mode_definition -> . identifier_list ASSIGN mode
    (20) identifier_list -> . identifier
    (21) identifier_list -> . identifier COMMA identifier_list
    (22) identifier -> . ID

    ID              shift and go to state 15

    identifier                     shift and go to state 16
    newmode_list                   shift and go to state 60
    mode_definition                shift and go to state 14
    identifier_list                shift and go to state 17

state 31

    (21) identifier_list -> identifier COMMA . identifier_list
    (20) identifier_list -> . identifier
    (21) identifier_list -> . identifier COMMA identifier_list
    (22) identifier -> . ID

    ID              shift and go to state 15

    identifier_list                shift and go to state 61
    identifier                     shift and go to state 16

state 32

    (26) mode_definition -> identifier_list ASSIGN . mode
    (36) mode -> . mode_name
    (37) mode -> . discrete_mode
    (38) mode -> . reference_mode
    (39) mode -> . composite_mode
    (40) mode_name -> . identifier
    (41) discrete_mode -> . integer_mode
    (42) discrete_mode -> . boolean_mode
    (43) discrete_mode -> . character_mode
    (44) discrete_mode -> . discrete_range_mode
    (54) reference_mode -> . REF mode
    (55) composite_mode -> . string_mode
    (56) composite_mode -> . array_mode
    (22) identifier -> . ID
    (46) integer_mode -> . INT
    (47) boolean_mode -> . BOOL
    (48) character_mode -> . CHAR
    (49) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (50) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (57) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (59) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (45) discrete_mode_name -> . identifier

    REF             shift and go to state 38
    ID              shift and go to state 15
    INT             shift and go to state 39
    BOOL            shift and go to state 53
    CHAR            shift and go to state 51
    CHARS           shift and go to state 43
    ARRAY           shift and go to state 52

    discrete_range_mode            shift and go to state 45
    identifier                     shift and go to state 36
    composite_mode                 shift and go to state 46
    character_mode                 shift and go to state 47
    discrete_mode_name             shift and go to state 48
    mode                           shift and go to state 62
    boolean_mode                   shift and go to state 50
    mode_name                      shift and go to state 41
    reference_mode                 shift and go to state 35
    array_mode                     shift and go to state 42
    integer_mode                   shift and go to state 40
    string_mode                    shift and go to state 44
    discrete_mode                  shift and go to state 37

state 33

    (14) declaration_statement -> DCL declaration_list SEMI .

    DCL             reduce using rule 14 (declaration_statement -> DCL declaration_list SEMI .)
    SYN             reduce using rule 14 (declaration_statement -> DCL declaration_list SEMI .)
    TYPE            reduce using rule 14 (declaration_statement -> DCL declaration_list SEMI .)
    ID              reduce using rule 14 (declaration_statement -> DCL declaration_list SEMI .)
    END             reduce using rule 14 (declaration_statement -> DCL declaration_list SEMI .)
    $end            reduce using rule 14 (declaration_statement -> DCL declaration_list SEMI .)


state 34

    (16) declaration_list -> declaration COMMA . declaration_list
    (15) declaration_list -> . declaration
    (16) declaration_list -> . declaration COMMA declaration_list
    (17) declaration -> . identifier_list mode initialization
    (18) declaration -> . identifier_list mode
    (20) identifier_list -> . identifier
    (21) identifier_list -> . identifier COMMA identifier_list
    (22) identifier -> . ID

    ID              shift and go to state 15

    declaration_list               shift and go to state 63
    identifier                     shift and go to state 16
    declaration                    shift and go to state 19
    identifier_list                shift and go to state 20

state 35

    (38) mode -> reference_mode .

    LOC             reduce using rule 38 (mode -> reference_mode .)
    RPAREN          reduce using rule 38 (mode -> reference_mode .)
    ASSIGN          reduce using rule 38 (mode -> reference_mode .)
    COMMA           reduce using rule 38 (mode -> reference_mode .)
    SEMI            reduce using rule 38 (mode -> reference_mode .)


state 36

    (40) mode_name -> identifier .
    (45) discrete_mode_name -> identifier .

    ASSIGN          reduce using rule 40 (mode_name -> identifier .)
    COMMA           reduce using rule 40 (mode_name -> identifier .)
    SEMI            reduce using rule 40 (mode_name -> identifier .)
    LOC             reduce using rule 40 (mode_name -> identifier .)
    RPAREN          reduce using rule 40 (mode_name -> identifier .)
    LPAREN          reduce using rule 45 (discrete_mode_name -> identifier .)


state 37

    (37) mode -> discrete_mode .
    (50) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    LOC             reduce using rule 37 (mode -> discrete_mode .)
    RPAREN          reduce using rule 37 (mode -> discrete_mode .)
    ASSIGN          reduce using rule 37 (mode -> discrete_mode .)
    COMMA           reduce using rule 37 (mode -> discrete_mode .)
    SEMI            reduce using rule 37 (mode -> discrete_mode .)
    LPAREN          shift and go to state 64


state 38

    (54) reference_mode -> REF . mode
    (36) mode -> . mode_name
    (37) mode -> . discrete_mode
    (38) mode -> . reference_mode
    (39) mode -> . composite_mode
    (40) mode_name -> . identifier
    (41) discrete_mode -> . integer_mode
    (42) discrete_mode -> . boolean_mode
    (43) discrete_mode -> . character_mode
    (44) discrete_mode -> . discrete_range_mode
    (54) reference_mode -> . REF mode
    (55) composite_mode -> . string_mode
    (56) composite_mode -> . array_mode
    (22) identifier -> . ID
    (46) integer_mode -> . INT
    (47) boolean_mode -> . BOOL
    (48) character_mode -> . CHAR
    (49) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (50) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (57) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (59) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (45) discrete_mode_name -> . identifier

    REF             shift and go to state 38
    ID              shift and go to state 15
    INT             shift and go to state 39
    BOOL            shift and go to state 53
    CHAR            shift and go to state 51
    CHARS           shift and go to state 43
    ARRAY           shift and go to state 52

    discrete_range_mode            shift and go to state 45
    identifier                     shift and go to state 36
    composite_mode                 shift and go to state 46
    discrete_mode                  shift and go to state 37
    discrete_mode_name             shift and go to state 48
    mode                           shift and go to state 65
    boolean_mode                   shift and go to state 50
    mode_name                      shift and go to state 41
    reference_mode                 shift and go to state 35
    array_mode                     shift and go to state 42
    integer_mode                   shift and go to state 40
    string_mode                    shift and go to state 44
    character_mode                 shift and go to state 47

state 39

    (46) integer_mode -> INT .

    LPAREN          reduce using rule 46 (integer_mode -> INT .)
    COMMA           reduce using rule 46 (integer_mode -> INT .)
    SEMI            reduce using rule 46 (integer_mode -> INT .)
    LOC             reduce using rule 46 (integer_mode -> INT .)
    RPAREN          reduce using rule 46 (integer_mode -> INT .)
    RBRACKET        reduce using rule 46 (integer_mode -> INT .)
    ASSIGN          reduce using rule 46 (integer_mode -> INT .)


state 40

    (41) discrete_mode -> integer_mode .

    LPAREN          reduce using rule 41 (discrete_mode -> integer_mode .)
    ASSIGN          reduce using rule 41 (discrete_mode -> integer_mode .)
    COMMA           reduce using rule 41 (discrete_mode -> integer_mode .)
    SEMI            reduce using rule 41 (discrete_mode -> integer_mode .)
    RBRACKET        reduce using rule 41 (discrete_mode -> integer_mode .)
    LOC             reduce using rule 41 (discrete_mode -> integer_mode .)
    RPAREN          reduce using rule 41 (discrete_mode -> integer_mode .)


state 41

    (36) mode -> mode_name .

    LOC             reduce using rule 36 (mode -> mode_name .)
    RPAREN          reduce using rule 36 (mode -> mode_name .)
    ASSIGN          reduce using rule 36 (mode -> mode_name .)
    COMMA           reduce using rule 36 (mode -> mode_name .)
    SEMI            reduce using rule 36 (mode -> mode_name .)


state 42

    (56) composite_mode -> array_mode .

    ASSIGN          reduce using rule 56 (composite_mode -> array_mode .)
    COMMA           reduce using rule 56 (composite_mode -> array_mode .)
    SEMI            reduce using rule 56 (composite_mode -> array_mode .)
    LOC             reduce using rule 56 (composite_mode -> array_mode .)
    RPAREN          reduce using rule 56 (composite_mode -> array_mode .)


state 43

    (57) string_mode -> CHARS . LBRACKET string_length RBRACKET

    LBRACKET        shift and go to state 66


state 44

    (55) composite_mode -> string_mode .

    ASSIGN          reduce using rule 55 (composite_mode -> string_mode .)
    COMMA           reduce using rule 55 (composite_mode -> string_mode .)
    SEMI            reduce using rule 55 (composite_mode -> string_mode .)
    LOC             reduce using rule 55 (composite_mode -> string_mode .)
    RPAREN          reduce using rule 55 (composite_mode -> string_mode .)


state 45

    (44) discrete_mode -> discrete_range_mode .

    LPAREN          reduce using rule 44 (discrete_mode -> discrete_range_mode .)
    ASSIGN          reduce using rule 44 (discrete_mode -> discrete_range_mode .)
    COMMA           reduce using rule 44 (discrete_mode -> discrete_range_mode .)
    SEMI            reduce using rule 44 (discrete_mode -> discrete_range_mode .)
    RBRACKET        reduce using rule 44 (discrete_mode -> discrete_range_mode .)
    LOC             reduce using rule 44 (discrete_mode -> discrete_range_mode .)
    RPAREN          reduce using rule 44 (discrete_mode -> discrete_range_mode .)


state 46

    (39) mode -> composite_mode .

    LOC             reduce using rule 39 (mode -> composite_mode .)
    RPAREN          reduce using rule 39 (mode -> composite_mode .)
    ASSIGN          reduce using rule 39 (mode -> composite_mode .)
    COMMA           reduce using rule 39 (mode -> composite_mode .)
    SEMI            reduce using rule 39 (mode -> composite_mode .)


state 47

    (43) discrete_mode -> character_mode .

    LPAREN          reduce using rule 43 (discrete_mode -> character_mode .)
    ASSIGN          reduce using rule 43 (discrete_mode -> character_mode .)
    COMMA           reduce using rule 43 (discrete_mode -> character_mode .)
    SEMI            reduce using rule 43 (discrete_mode -> character_mode .)
    RBRACKET        reduce using rule 43 (discrete_mode -> character_mode .)
    LOC             reduce using rule 43 (discrete_mode -> character_mode .)
    RPAREN          reduce using rule 43 (discrete_mode -> character_mode .)


state 48

    (49) discrete_range_mode -> discrete_mode_name . LPAREN literal_range RPAREN

    LPAREN          shift and go to state 67


state 49

    (17) declaration -> identifier_list mode . initialization
    (18) declaration -> identifier_list mode .
    (19) initialization -> . ASSIGN expression

    COMMA           reduce using rule 18 (declaration -> identifier_list mode .)
    SEMI            reduce using rule 18 (declaration -> identifier_list mode .)
    ASSIGN          shift and go to state 68

    initialization                 shift and go to state 69

state 50

    (42) discrete_mode -> boolean_mode .

    LPAREN          reduce using rule 42 (discrete_mode -> boolean_mode .)
    ASSIGN          reduce using rule 42 (discrete_mode -> boolean_mode .)
    COMMA           reduce using rule 42 (discrete_mode -> boolean_mode .)
    SEMI            reduce using rule 42 (discrete_mode -> boolean_mode .)
    RBRACKET        reduce using rule 42 (discrete_mode -> boolean_mode .)
    LOC             reduce using rule 42 (discrete_mode -> boolean_mode .)
    RPAREN          reduce using rule 42 (discrete_mode -> boolean_mode .)


state 51

    (48) character_mode -> CHAR .

    LPAREN          reduce using rule 48 (character_mode -> CHAR .)
    LOC             reduce using rule 48 (character_mode -> CHAR .)
    COMMA           reduce using rule 48 (character_mode -> CHAR .)
    RPAREN          reduce using rule 48 (character_mode -> CHAR .)
    RBRACKET        reduce using rule 48 (character_mode -> CHAR .)
    ASSIGN          reduce using rule 48 (character_mode -> CHAR .)
    SEMI            reduce using rule 48 (character_mode -> CHAR .)


state 52

    (59) array_mode -> ARRAY . LBRACKET index_mode_list RBRACKET element_mode

    LBRACKET        shift and go to state 70


state 53

    (47) boolean_mode -> BOOL .

    LPAREN          reduce using rule 47 (boolean_mode -> BOOL .)
    COMMA           reduce using rule 47 (boolean_mode -> BOOL .)
    RBRACKET        reduce using rule 47 (boolean_mode -> BOOL .)
    ASSIGN          reduce using rule 47 (boolean_mode -> BOOL .)
    SEMI            reduce using rule 47 (boolean_mode -> BOOL .)
    LOC             reduce using rule 47 (boolean_mode -> BOOL .)
    RPAREN          reduce using rule 47 (boolean_mode -> BOOL .)


state 54

    (3) statement_nullable -> statement statement_nullable .

    $end            reduce using rule 3 (statement_nullable -> statement statement_nullable .)
    END             reduce using rule 3 (statement_nullable -> statement statement_nullable .)


state 55

    (11) synonym_list -> synonym_definition COMMA . synonym_list
    (10) synonym_list -> . synonym_definition
    (11) synonym_list -> . synonym_definition COMMA synonym_list
    (12) synonym_definition -> . identifier_list mode ASSIGN expression
    (13) synonym_definition -> . identifier_list ASSIGN expression
    (20) identifier_list -> . identifier
    (21) identifier_list -> . identifier COMMA identifier_list
    (22) identifier -> . ID

    ID              shift and go to state 15

    synonym_definition             shift and go to state 24
    identifier                     shift and go to state 16
    synonym_list                   shift and go to state 71
    identifier_list                shift and go to state 26

state 56

    (9) synonym_statement -> SYN synonym_list SEMI .

    DCL             reduce using rule 9 (synonym_statement -> SYN synonym_list SEMI .)
    SYN             reduce using rule 9 (synonym_statement -> SYN synonym_list SEMI .)
    TYPE            reduce using rule 9 (synonym_statement -> SYN synonym_list SEMI .)
    ID              reduce using rule 9 (synonym_statement -> SYN synonym_list SEMI .)
    $end            reduce using rule 9 (synonym_statement -> SYN synonym_list SEMI .)
    END             reduce using rule 9 (synonym_statement -> SYN synonym_list SEMI .)


state 57

    (13) synonym_definition -> identifier_list ASSIGN . expression
    (82) expression -> . operand0
    (83) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (84) conditional_expression -> . IF expression then_expression else_expression FI
    (85) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (92) operand1 -> . operand2
    (93) operand1 -> . operand1 operator2 operand2
    (94) operand2 -> . operand3
    (95) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (96) operand3 -> . monadic_operator operand4
    (97) operand3 -> . operand4
    (104) monadic_operator -> . MINUS
    (105) monadic_operator -> . NOT
    (98) operand4 -> . array_location
    (99) operand4 -> . referenced_location
    (100) operand4 -> . primitive_value
    (81) array_location -> . location
    (106) referenced_location -> . ARROW array_location
    (123) primitive_value -> . literal
    (65) location -> . identifier
    (66) location -> . dereferenced_reference
    (67) location -> . string_element
    (68) location -> . string_slice
    (69) location -> . array_element
    (70) location -> . array_slice
    (124) literal -> . integer_literal
    (125) literal -> . boolean_literal
    (126) literal -> . character_literal
    (127) literal -> . empty_literal
    (128) literal -> . character_string_literal
    (22) identifier -> . ID
    (71) dereferenced_reference -> . array_location ARROW
    (72) string_element -> . identifier LBRACKET start_element LBRACKET
    (74) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (77) array_element -> . array_location LBRACKET expression_list RBRACKET
    (80) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (129) integer_literal -> . ICONST
    (130) boolean_literal -> . TRUE
    (131) boolean_literal -> . FALSE
    (132) character_literal -> . CCONST
    (133) empty_literal -> . NULL
    (134) character_string_literal -> . SCONST

    IF              shift and go to state 99
    MINUS           shift and go to state 90
    NOT             shift and go to state 96
    ARROW           shift and go to state 72
    ID              shift and go to state 15
    ICONST          shift and go to state 89
    TRUE            shift and go to state 87
    FALSE           shift and go to state 80
    CCONST          shift and go to state 91
    NULL            shift and go to state 97
    SCONST          shift and go to state 95

    monadic_operator               shift and go to state 93
    character_literal              shift and go to state 85
    character_string_literal       shift and go to state 94
    identifier                     shift and go to state 84
    array_location                 shift and go to state 73
    literal                        shift and go to state 74
    dereferenced_reference         shift and go to state 75
    operand3                       shift and go to state 76
    integer_literal                shift and go to state 77
    array_slice                    shift and go to state 83
    primitive_value                shift and go to state 78
    referenced_location            shift and go to state 79
    string_slice                   shift and go to state 98
    string_element                 shift and go to state 81
    location                       shift and go to state 82
    conditional_expression         shift and go to state 100
    operand2                       shift and go to state 103
    empty_literal                  shift and go to state 101
    operand1                       shift and go to state 86
    operand4                       shift and go to state 102
    expression                     shift and go to state 88
    boolean_literal                shift and go to state 104
    operand0                       shift and go to state 105
    array_element                  shift and go to state 92

state 58

    (12) synonym_definition -> identifier_list mode . ASSIGN expression

    ASSIGN          shift and go to state 106


state 59

    (28) procedure_definition -> PROC LPAREN . formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI
    (29) procedure_definition -> PROC LPAREN . formal_parameter_list RPAREN SEMI statement_nullable END SEMI
    (30) formal_parameter_list -> . formal_parameter
    (31) formal_parameter_list -> . formal_parameter COMMA formal_parameter
    (32) formal_parameter -> . identifier_list mode LOC
    (33) formal_parameter -> . identifier_list mode
    (20) identifier_list -> . identifier
    (21) identifier_list -> . identifier COMMA identifier_list
    (22) identifier -> . ID

    ID              shift and go to state 15

    formal_parameter               shift and go to state 107
    identifier                     shift and go to state 16
    formal_parameter_list          shift and go to state 108
    identifier_list                shift and go to state 109

state 60

    (25) newmode_list -> mode_definition COMMA newmode_list .

    SEMI            reduce using rule 25 (newmode_list -> mode_definition COMMA newmode_list .)


state 61

    (21) identifier_list -> identifier COMMA identifier_list .

    ASSIGN          reduce using rule 21 (identifier_list -> identifier COMMA identifier_list .)
    REF             reduce using rule 21 (identifier_list -> identifier COMMA identifier_list .)
    ID              reduce using rule 21 (identifier_list -> identifier COMMA identifier_list .)
    INT             reduce using rule 21 (identifier_list -> identifier COMMA identifier_list .)
    BOOL            reduce using rule 21 (identifier_list -> identifier COMMA identifier_list .)
    CHAR            reduce using rule 21 (identifier_list -> identifier COMMA identifier_list .)
    CHARS           reduce using rule 21 (identifier_list -> identifier COMMA identifier_list .)
    ARRAY           reduce using rule 21 (identifier_list -> identifier COMMA identifier_list .)


state 62

    (26) mode_definition -> identifier_list ASSIGN mode .

    COMMA           reduce using rule 26 (mode_definition -> identifier_list ASSIGN mode .)
    SEMI            reduce using rule 26 (mode_definition -> identifier_list ASSIGN mode .)


state 63

    (16) declaration_list -> declaration COMMA declaration_list .

    SEMI            reduce using rule 16 (declaration_list -> declaration COMMA declaration_list .)


state 64

    (50) discrete_range_mode -> discrete_mode LPAREN . literal_range RPAREN
    (51) literal_range -> . lower_bound COLON upper_bound
    (52) lower_bound -> . expression
    (82) expression -> . operand0
    (83) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (84) conditional_expression -> . IF expression then_expression else_expression FI
    (85) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (92) operand1 -> . operand2
    (93) operand1 -> . operand1 operator2 operand2
    (94) operand2 -> . operand3
    (95) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (96) operand3 -> . monadic_operator operand4
    (97) operand3 -> . operand4
    (104) monadic_operator -> . MINUS
    (105) monadic_operator -> . NOT
    (98) operand4 -> . array_location
    (99) operand4 -> . referenced_location
    (100) operand4 -> . primitive_value
    (81) array_location -> . location
    (106) referenced_location -> . ARROW array_location
    (123) primitive_value -> . literal
    (65) location -> . identifier
    (66) location -> . dereferenced_reference
    (67) location -> . string_element
    (68) location -> . string_slice
    (69) location -> . array_element
    (70) location -> . array_slice
    (124) literal -> . integer_literal
    (125) literal -> . boolean_literal
    (126) literal -> . character_literal
    (127) literal -> . empty_literal
    (128) literal -> . character_string_literal
    (22) identifier -> . ID
    (71) dereferenced_reference -> . array_location ARROW
    (72) string_element -> . identifier LBRACKET start_element LBRACKET
    (74) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (77) array_element -> . array_location LBRACKET expression_list RBRACKET
    (80) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (129) integer_literal -> . ICONST
    (130) boolean_literal -> . TRUE
    (131) boolean_literal -> . FALSE
    (132) character_literal -> . CCONST
    (133) empty_literal -> . NULL
    (134) character_string_literal -> . SCONST

    IF              shift and go to state 99
    MINUS           shift and go to state 90
    NOT             shift and go to state 96
    ARROW           shift and go to state 72
    ID              shift and go to state 15
    ICONST          shift and go to state 89
    TRUE            shift and go to state 87
    FALSE           shift and go to state 80
    CCONST          shift and go to state 91
    NULL            shift and go to state 97
    SCONST          shift and go to state 95

    monadic_operator               shift and go to state 93
    character_literal              shift and go to state 85
    character_string_literal       shift and go to state 94
    identifier                     shift and go to state 84
    array_location                 shift and go to state 73
    literal                        shift and go to state 74
    dereferenced_reference         shift and go to state 75
    lower_bound                    shift and go to state 112
    operand3                       shift and go to state 76
    integer_literal                shift and go to state 77
    array_slice                    shift and go to state 83
    primitive_value                shift and go to state 78
    referenced_location            shift and go to state 79
    literal_range                  shift and go to state 110
    string_slice                   shift and go to state 98
    string_element                 shift and go to state 81
    location                       shift and go to state 82
    conditional_expression         shift and go to state 100
    operand2                       shift and go to state 103
    empty_literal                  shift and go to state 101
    operand1                       shift and go to state 86
    operand4                       shift and go to state 102
    expression                     shift and go to state 111
    boolean_literal                shift and go to state 104
    operand0                       shift and go to state 105
    array_element                  shift and go to state 92

state 65

    (54) reference_mode -> REF mode .

    ASSIGN          reduce using rule 54 (reference_mode -> REF mode .)
    COMMA           reduce using rule 54 (reference_mode -> REF mode .)
    SEMI            reduce using rule 54 (reference_mode -> REF mode .)
    LOC             reduce using rule 54 (reference_mode -> REF mode .)
    RPAREN          reduce using rule 54 (reference_mode -> REF mode .)


state 66

    (57) string_mode -> CHARS LBRACKET . string_length RBRACKET
    (58) string_length -> . integer_literal
    (129) integer_literal -> . ICONST

    ICONST          shift and go to state 89

    integer_literal                shift and go to state 113
    string_length                  shift and go to state 114

state 67

    (49) discrete_range_mode -> discrete_mode_name LPAREN . literal_range RPAREN
    (51) literal_range -> . lower_bound COLON upper_bound
    (52) lower_bound -> . expression
    (82) expression -> . operand0
    (83) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (84) conditional_expression -> . IF expression then_expression else_expression FI
    (85) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (92) operand1 -> . operand2
    (93) operand1 -> . operand1 operator2 operand2
    (94) operand2 -> . operand3
    (95) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (96) operand3 -> . monadic_operator operand4
    (97) operand3 -> . operand4
    (104) monadic_operator -> . MINUS
    (105) monadic_operator -> . NOT
    (98) operand4 -> . array_location
    (99) operand4 -> . referenced_location
    (100) operand4 -> . primitive_value
    (81) array_location -> . location
    (106) referenced_location -> . ARROW array_location
    (123) primitive_value -> . literal
    (65) location -> . identifier
    (66) location -> . dereferenced_reference
    (67) location -> . string_element
    (68) location -> . string_slice
    (69) location -> . array_element
    (70) location -> . array_slice
    (124) literal -> . integer_literal
    (125) literal -> . boolean_literal
    (126) literal -> . character_literal
    (127) literal -> . empty_literal
    (128) literal -> . character_string_literal
    (22) identifier -> . ID
    (71) dereferenced_reference -> . array_location ARROW
    (72) string_element -> . identifier LBRACKET start_element LBRACKET
    (74) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (77) array_element -> . array_location LBRACKET expression_list RBRACKET
    (80) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (129) integer_literal -> . ICONST
    (130) boolean_literal -> . TRUE
    (131) boolean_literal -> . FALSE
    (132) character_literal -> . CCONST
    (133) empty_literal -> . NULL
    (134) character_string_literal -> . SCONST

    IF              shift and go to state 99
    MINUS           shift and go to state 90
    NOT             shift and go to state 96
    ARROW           shift and go to state 72
    ID              shift and go to state 15
    ICONST          shift and go to state 89
    TRUE            shift and go to state 87
    FALSE           shift and go to state 80
    CCONST          shift and go to state 91
    NULL            shift and go to state 97
    SCONST          shift and go to state 95

    monadic_operator               shift and go to state 93
    character_literal              shift and go to state 85
    character_string_literal       shift and go to state 94
    identifier                     shift and go to state 84
    array_location                 shift and go to state 73
    literal                        shift and go to state 74
    dereferenced_reference         shift and go to state 75
    lower_bound                    shift and go to state 112
    operand3                       shift and go to state 76
    integer_literal                shift and go to state 77
    array_slice                    shift and go to state 83
    primitive_value                shift and go to state 78
    referenced_location            shift and go to state 79
    literal_range                  shift and go to state 115
    string_slice                   shift and go to state 98
    string_element                 shift and go to state 81
    location                       shift and go to state 82
    conditional_expression         shift and go to state 100
    operand2                       shift and go to state 103
    empty_literal                  shift and go to state 101
    operand1                       shift and go to state 86
    operand4                       shift and go to state 102
    expression                     shift and go to state 111
    boolean_literal                shift and go to state 104
    operand0                       shift and go to state 105
    array_element                  shift and go to state 92

state 68

    (19) initialization -> ASSIGN . expression
    (82) expression -> . operand0
    (83) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (84) conditional_expression -> . IF expression then_expression else_expression FI
    (85) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (92) operand1 -> . operand2
    (93) operand1 -> . operand1 operator2 operand2
    (94) operand2 -> . operand3
    (95) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (96) operand3 -> . monadic_operator operand4
    (97) operand3 -> . operand4
    (104) monadic_operator -> . MINUS
    (105) monadic_operator -> . NOT
    (98) operand4 -> . array_location
    (99) operand4 -> . referenced_location
    (100) operand4 -> . primitive_value
    (81) array_location -> . location
    (106) referenced_location -> . ARROW array_location
    (123) primitive_value -> . literal
    (65) location -> . identifier
    (66) location -> . dereferenced_reference
    (67) location -> . string_element
    (68) location -> . string_slice
    (69) location -> . array_element
    (70) location -> . array_slice
    (124) literal -> . integer_literal
    (125) literal -> . boolean_literal
    (126) literal -> . character_literal
    (127) literal -> . empty_literal
    (128) literal -> . character_string_literal
    (22) identifier -> . ID
    (71) dereferenced_reference -> . array_location ARROW
    (72) string_element -> . identifier LBRACKET start_element LBRACKET
    (74) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (77) array_element -> . array_location LBRACKET expression_list RBRACKET
    (80) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (129) integer_literal -> . ICONST
    (130) boolean_literal -> . TRUE
    (131) boolean_literal -> . FALSE
    (132) character_literal -> . CCONST
    (133) empty_literal -> . NULL
    (134) character_string_literal -> . SCONST

    IF              shift and go to state 99
    MINUS           shift and go to state 90
    NOT             shift and go to state 96
    ARROW           shift and go to state 72
    ID              shift and go to state 15
    ICONST          shift and go to state 89
    TRUE            shift and go to state 87
    FALSE           shift and go to state 80
    CCONST          shift and go to state 91
    NULL            shift and go to state 97
    SCONST          shift and go to state 95

    monadic_operator               shift and go to state 93
    character_literal              shift and go to state 85
    character_string_literal       shift and go to state 94
    identifier                     shift and go to state 84
    array_location                 shift and go to state 73
    literal                        shift and go to state 74
    dereferenced_reference         shift and go to state 75
    operand3                       shift and go to state 76
    integer_literal                shift and go to state 77
    array_slice                    shift and go to state 83
    primitive_value                shift and go to state 78
    referenced_location            shift and go to state 79
    string_slice                   shift and go to state 98
    string_element                 shift and go to state 81
    location                       shift and go to state 82
    conditional_expression         shift and go to state 100
    operand2                       shift and go to state 103
    empty_literal                  shift and go to state 101
    operand1                       shift and go to state 86
    operand4                       shift and go to state 102
    expression                     shift and go to state 116
    boolean_literal                shift and go to state 104
    operand0                       shift and go to state 105
    array_element                  shift and go to state 92

state 69

    (17) declaration -> identifier_list mode initialization .

    COMMA           reduce using rule 17 (declaration -> identifier_list mode initialization .)
    SEMI            reduce using rule 17 (declaration -> identifier_list mode initialization .)


state 70

    (59) array_mode -> ARRAY LBRACKET . index_mode_list RBRACKET element_mode
    (60) index_mode_list -> . index_mode
    (61) index_mode_list -> . index_mode COMMA index_mode_list
    (62) index_mode -> . discrete_mode
    (63) index_mode -> . literal_range
    (41) discrete_mode -> . integer_mode
    (42) discrete_mode -> . boolean_mode
    (43) discrete_mode -> . character_mode
    (44) discrete_mode -> . discrete_range_mode
    (51) literal_range -> . lower_bound COLON upper_bound
    (46) integer_mode -> . INT
    (47) boolean_mode -> . BOOL
    (48) character_mode -> . CHAR
    (49) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (50) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (52) lower_bound -> . expression
    (45) discrete_mode_name -> . identifier
    (82) expression -> . operand0
    (83) expression -> . conditional_expression
    (22) identifier -> . ID
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (84) conditional_expression -> . IF expression then_expression else_expression FI
    (85) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (92) operand1 -> . operand2
    (93) operand1 -> . operand1 operator2 operand2
    (94) operand2 -> . operand3
    (95) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (96) operand3 -> . monadic_operator operand4
    (97) operand3 -> . operand4
    (104) monadic_operator -> . MINUS
    (105) monadic_operator -> . NOT
    (98) operand4 -> . array_location
    (99) operand4 -> . referenced_location
    (100) operand4 -> . primitive_value
    (81) array_location -> . location
    (106) referenced_location -> . ARROW array_location
    (123) primitive_value -> . literal
    (65) location -> . identifier
    (66) location -> . dereferenced_reference
    (67) location -> . string_element
    (68) location -> . string_slice
    (69) location -> . array_element
    (70) location -> . array_slice
    (124) literal -> . integer_literal
    (125) literal -> . boolean_literal
    (126) literal -> . character_literal
    (127) literal -> . empty_literal
    (128) literal -> . character_string_literal
    (71) dereferenced_reference -> . array_location ARROW
    (72) string_element -> . identifier LBRACKET start_element LBRACKET
    (74) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (77) array_element -> . array_location LBRACKET expression_list RBRACKET
    (80) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (129) integer_literal -> . ICONST
    (130) boolean_literal -> . TRUE
    (131) boolean_literal -> . FALSE
    (132) character_literal -> . CCONST
    (133) empty_literal -> . NULL
    (134) character_string_literal -> . SCONST

    INT             shift and go to state 39
    BOOL            shift and go to state 53
    CHAR            shift and go to state 51
    ID              shift and go to state 15
    IF              shift and go to state 99
    MINUS           shift and go to state 90
    NOT             shift and go to state 96
    ARROW           shift and go to state 72
    ICONST          shift and go to state 89
    TRUE            shift and go to state 87
    FALSE           shift and go to state 80
    CCONST          shift and go to state 91
    NULL            shift and go to state 97
    SCONST          shift and go to state 95

    literal                        shift and go to state 74
    literal_range                  shift and go to state 119
    dereferenced_reference         shift and go to state 75
    operand3                       shift and go to state 76
    integer_literal                shift and go to state 77
    primitive_value                shift and go to state 78
    referenced_location            shift and go to state 79
    string_element                 shift and go to state 81
    location                       shift and go to state 82
    discrete_range_mode            shift and go to state 45
    array_slice                    shift and go to state 83
    operand2                       shift and go to state 103
    character_mode                 shift and go to state 47
    character_literal              shift and go to state 85
    operand1                       shift and go to state 86
    boolean_mode                   shift and go to state 50
    integer_mode                   shift and go to state 40
    index_mode_list                shift and go to state 120
    array_element                  shift and go to state 92
    monadic_operator               shift and go to state 93
    character_string_literal       shift and go to state 94
    identifier                     shift and go to state 117
    discrete_mode                  shift and go to state 118
    expression                     shift and go to state 111
    lower_bound                    shift and go to state 112
    string_slice                   shift and go to state 98
    conditional_expression         shift and go to state 100
    array_location                 shift and go to state 73
    discrete_mode_name             shift and go to state 48
    empty_literal                  shift and go to state 101
    operand4                       shift and go to state 102
    boolean_literal                shift and go to state 104
    operand0                       shift and go to state 105
    index_mode                     shift and go to state 121

state 71

    (11) synonym_list -> synonym_definition COMMA synonym_list .

    SEMI            reduce using rule 11 (synonym_list -> synonym_definition COMMA synonym_list .)


state 72

    (106) referenced_location -> ARROW . array_location
    (81) array_location -> . location
    (65) location -> . identifier
    (66) location -> . dereferenced_reference
    (67) location -> . string_element
    (68) location -> . string_slice
    (69) location -> . array_element
    (70) location -> . array_slice
    (22) identifier -> . ID
    (71) dereferenced_reference -> . array_location ARROW
    (72) string_element -> . identifier LBRACKET start_element LBRACKET
    (74) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (77) array_element -> . array_location LBRACKET expression_list RBRACKET
    (80) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    ID              shift and go to state 15

    location                       shift and go to state 82
    identifier                     shift and go to state 84
    array_slice                    shift and go to state 83
    array_location                 shift and go to state 122
    dereferenced_reference         shift and go to state 75
    string_slice                   shift and go to state 98
    string_element                 shift and go to state 81
    array_element                  shift and go to state 92

state 73

    (98) operand4 -> array_location .
    (71) dereferenced_reference -> array_location . ARROW
    (77) array_element -> array_location . LBRACKET expression_list RBRACKET
    (80) array_slice -> array_location . LBRACKET lower_bound COLON upper_bound RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    TIMES           reduce using rule 98 (operand4 -> array_location .)
    DIVIDE          reduce using rule 98 (operand4 -> array_location .)
    MODULO          reduce using rule 98 (operand4 -> array_location .)
    PLUS            reduce using rule 98 (operand4 -> array_location .)
    MINUS           reduce using rule 98 (operand4 -> array_location .)
    CONCAT          reduce using rule 98 (operand4 -> array_location .)
    AND             reduce using rule 98 (operand4 -> array_location .)
    OR              reduce using rule 98 (operand4 -> array_location .)
    EQUAL           reduce using rule 98 (operand4 -> array_location .)
    NOTEQ           reduce using rule 98 (operand4 -> array_location .)
    GREATER         reduce using rule 98 (operand4 -> array_location .)
    GTEQUAL         reduce using rule 98 (operand4 -> array_location .)
    LESS            reduce using rule 98 (operand4 -> array_location .)
    LTEQUAL         reduce using rule 98 (operand4 -> array_location .)
    IN              reduce using rule 98 (operand4 -> array_location .)
    COMMA           reduce using rule 98 (operand4 -> array_location .)
    SEMI            reduce using rule 98 (operand4 -> array_location .)
    COLON           reduce using rule 98 (operand4 -> array_location .)
    THEN            reduce using rule 98 (operand4 -> array_location .)
    RBRACKET        reduce using rule 98 (operand4 -> array_location .)
    RPAREN          reduce using rule 98 (operand4 -> array_location .)
    ELSE            reduce using rule 98 (operand4 -> array_location .)
    ELSIF           reduce using rule 98 (operand4 -> array_location .)
    FI              reduce using rule 98 (operand4 -> array_location .)
    ARROW           shift and go to state 123
    LBRACKET        shift and go to state 124

  ! LBRACKET        [ reduce using rule 98 (operand4 -> array_location .) ]


state 74

    (123) primitive_value -> literal .

    TIMES           reduce using rule 123 (primitive_value -> literal .)
    DIVIDE          reduce using rule 123 (primitive_value -> literal .)
    MODULO          reduce using rule 123 (primitive_value -> literal .)
    PLUS            reduce using rule 123 (primitive_value -> literal .)
    MINUS           reduce using rule 123 (primitive_value -> literal .)
    CONCAT          reduce using rule 123 (primitive_value -> literal .)
    AND             reduce using rule 123 (primitive_value -> literal .)
    OR              reduce using rule 123 (primitive_value -> literal .)
    EQUAL           reduce using rule 123 (primitive_value -> literal .)
    NOTEQ           reduce using rule 123 (primitive_value -> literal .)
    GREATER         reduce using rule 123 (primitive_value -> literal .)
    GTEQUAL         reduce using rule 123 (primitive_value -> literal .)
    LESS            reduce using rule 123 (primitive_value -> literal .)
    LTEQUAL         reduce using rule 123 (primitive_value -> literal .)
    IN              reduce using rule 123 (primitive_value -> literal .)
    COMMA           reduce using rule 123 (primitive_value -> literal .)
    SEMI            reduce using rule 123 (primitive_value -> literal .)
    THEN            reduce using rule 123 (primitive_value -> literal .)
    COLON           reduce using rule 123 (primitive_value -> literal .)
    RBRACKET        reduce using rule 123 (primitive_value -> literal .)
    LBRACKET        reduce using rule 123 (primitive_value -> literal .)
    RPAREN          reduce using rule 123 (primitive_value -> literal .)
    ELSE            reduce using rule 123 (primitive_value -> literal .)
    ELSIF           reduce using rule 123 (primitive_value -> literal .)
    FI              reduce using rule 123 (primitive_value -> literal .)


state 75

    (66) location -> dereferenced_reference .

    ARROW           reduce using rule 66 (location -> dereferenced_reference .)
    LBRACKET        reduce using rule 66 (location -> dereferenced_reference .)
    TIMES           reduce using rule 66 (location -> dereferenced_reference .)
    DIVIDE          reduce using rule 66 (location -> dereferenced_reference .)
    MODULO          reduce using rule 66 (location -> dereferenced_reference .)
    PLUS            reduce using rule 66 (location -> dereferenced_reference .)
    MINUS           reduce using rule 66 (location -> dereferenced_reference .)
    CONCAT          reduce using rule 66 (location -> dereferenced_reference .)
    AND             reduce using rule 66 (location -> dereferenced_reference .)
    OR              reduce using rule 66 (location -> dereferenced_reference .)
    EQUAL           reduce using rule 66 (location -> dereferenced_reference .)
    NOTEQ           reduce using rule 66 (location -> dereferenced_reference .)
    GREATER         reduce using rule 66 (location -> dereferenced_reference .)
    GTEQUAL         reduce using rule 66 (location -> dereferenced_reference .)
    LESS            reduce using rule 66 (location -> dereferenced_reference .)
    LTEQUAL         reduce using rule 66 (location -> dereferenced_reference .)
    IN              reduce using rule 66 (location -> dereferenced_reference .)
    COMMA           reduce using rule 66 (location -> dereferenced_reference .)
    RBRACKET        reduce using rule 66 (location -> dereferenced_reference .)
    COLON           reduce using rule 66 (location -> dereferenced_reference .)
    SEMI            reduce using rule 66 (location -> dereferenced_reference .)
    THEN            reduce using rule 66 (location -> dereferenced_reference .)
    RPAREN          reduce using rule 66 (location -> dereferenced_reference .)
    ELSE            reduce using rule 66 (location -> dereferenced_reference .)
    ELSIF           reduce using rule 66 (location -> dereferenced_reference .)
    FI              reduce using rule 66 (location -> dereferenced_reference .)


state 76

    (94) operand2 -> operand3 .

    TIMES           reduce using rule 94 (operand2 -> operand3 .)
    DIVIDE          reduce using rule 94 (operand2 -> operand3 .)
    MODULO          reduce using rule 94 (operand2 -> operand3 .)
    PLUS            reduce using rule 94 (operand2 -> operand3 .)
    MINUS           reduce using rule 94 (operand2 -> operand3 .)
    CONCAT          reduce using rule 94 (operand2 -> operand3 .)
    AND             reduce using rule 94 (operand2 -> operand3 .)
    OR              reduce using rule 94 (operand2 -> operand3 .)
    EQUAL           reduce using rule 94 (operand2 -> operand3 .)
    NOTEQ           reduce using rule 94 (operand2 -> operand3 .)
    GREATER         reduce using rule 94 (operand2 -> operand3 .)
    GTEQUAL         reduce using rule 94 (operand2 -> operand3 .)
    LESS            reduce using rule 94 (operand2 -> operand3 .)
    LTEQUAL         reduce using rule 94 (operand2 -> operand3 .)
    IN              reduce using rule 94 (operand2 -> operand3 .)
    RBRACKET        reduce using rule 94 (operand2 -> operand3 .)
    ELSE            reduce using rule 94 (operand2 -> operand3 .)
    ELSIF           reduce using rule 94 (operand2 -> operand3 .)
    COMMA           reduce using rule 94 (operand2 -> operand3 .)
    SEMI            reduce using rule 94 (operand2 -> operand3 .)
    COLON           reduce using rule 94 (operand2 -> operand3 .)
    THEN            reduce using rule 94 (operand2 -> operand3 .)
    LBRACKET        reduce using rule 94 (operand2 -> operand3 .)
    RPAREN          reduce using rule 94 (operand2 -> operand3 .)
    FI              reduce using rule 94 (operand2 -> operand3 .)


state 77

    (124) literal -> integer_literal .

    TIMES           reduce using rule 124 (literal -> integer_literal .)
    DIVIDE          reduce using rule 124 (literal -> integer_literal .)
    MODULO          reduce using rule 124 (literal -> integer_literal .)
    PLUS            reduce using rule 124 (literal -> integer_literal .)
    MINUS           reduce using rule 124 (literal -> integer_literal .)
    CONCAT          reduce using rule 124 (literal -> integer_literal .)
    AND             reduce using rule 124 (literal -> integer_literal .)
    OR              reduce using rule 124 (literal -> integer_literal .)
    EQUAL           reduce using rule 124 (literal -> integer_literal .)
    NOTEQ           reduce using rule 124 (literal -> integer_literal .)
    GREATER         reduce using rule 124 (literal -> integer_literal .)
    GTEQUAL         reduce using rule 124 (literal -> integer_literal .)
    LESS            reduce using rule 124 (literal -> integer_literal .)
    LTEQUAL         reduce using rule 124 (literal -> integer_literal .)
    IN              reduce using rule 124 (literal -> integer_literal .)
    RBRACKET        reduce using rule 124 (literal -> integer_literal .)
    THEN            reduce using rule 124 (literal -> integer_literal .)
    RPAREN          reduce using rule 124 (literal -> integer_literal .)
    COMMA           reduce using rule 124 (literal -> integer_literal .)
    COLON           reduce using rule 124 (literal -> integer_literal .)
    FI              reduce using rule 124 (literal -> integer_literal .)
    SEMI            reduce using rule 124 (literal -> integer_literal .)
    LBRACKET        reduce using rule 124 (literal -> integer_literal .)
    ELSE            reduce using rule 124 (literal -> integer_literal .)
    ELSIF           reduce using rule 124 (literal -> integer_literal .)


state 78

    (100) operand4 -> primitive_value .

    TIMES           reduce using rule 100 (operand4 -> primitive_value .)
    DIVIDE          reduce using rule 100 (operand4 -> primitive_value .)
    MODULO          reduce using rule 100 (operand4 -> primitive_value .)
    PLUS            reduce using rule 100 (operand4 -> primitive_value .)
    MINUS           reduce using rule 100 (operand4 -> primitive_value .)
    CONCAT          reduce using rule 100 (operand4 -> primitive_value .)
    AND             reduce using rule 100 (operand4 -> primitive_value .)
    OR              reduce using rule 100 (operand4 -> primitive_value .)
    EQUAL           reduce using rule 100 (operand4 -> primitive_value .)
    NOTEQ           reduce using rule 100 (operand4 -> primitive_value .)
    GREATER         reduce using rule 100 (operand4 -> primitive_value .)
    GTEQUAL         reduce using rule 100 (operand4 -> primitive_value .)
    LESS            reduce using rule 100 (operand4 -> primitive_value .)
    LTEQUAL         reduce using rule 100 (operand4 -> primitive_value .)
    IN              reduce using rule 100 (operand4 -> primitive_value .)
    COMMA           reduce using rule 100 (operand4 -> primitive_value .)
    SEMI            reduce using rule 100 (operand4 -> primitive_value .)
    LBRACKET        reduce using rule 100 (operand4 -> primitive_value .)
    COLON           reduce using rule 100 (operand4 -> primitive_value .)
    THEN            reduce using rule 100 (operand4 -> primitive_value .)
    RBRACKET        reduce using rule 100 (operand4 -> primitive_value .)
    RPAREN          reduce using rule 100 (operand4 -> primitive_value .)
    ELSE            reduce using rule 100 (operand4 -> primitive_value .)
    ELSIF           reduce using rule 100 (operand4 -> primitive_value .)
    FI              reduce using rule 100 (operand4 -> primitive_value .)


state 79

    (99) operand4 -> referenced_location .

    TIMES           reduce using rule 99 (operand4 -> referenced_location .)
    DIVIDE          reduce using rule 99 (operand4 -> referenced_location .)
    MODULO          reduce using rule 99 (operand4 -> referenced_location .)
    PLUS            reduce using rule 99 (operand4 -> referenced_location .)
    MINUS           reduce using rule 99 (operand4 -> referenced_location .)
    CONCAT          reduce using rule 99 (operand4 -> referenced_location .)
    AND             reduce using rule 99 (operand4 -> referenced_location .)
    OR              reduce using rule 99 (operand4 -> referenced_location .)
    EQUAL           reduce using rule 99 (operand4 -> referenced_location .)
    NOTEQ           reduce using rule 99 (operand4 -> referenced_location .)
    GREATER         reduce using rule 99 (operand4 -> referenced_location .)
    GTEQUAL         reduce using rule 99 (operand4 -> referenced_location .)
    LESS            reduce using rule 99 (operand4 -> referenced_location .)
    LTEQUAL         reduce using rule 99 (operand4 -> referenced_location .)
    IN              reduce using rule 99 (operand4 -> referenced_location .)
    COMMA           reduce using rule 99 (operand4 -> referenced_location .)
    SEMI            reduce using rule 99 (operand4 -> referenced_location .)
    LBRACKET        reduce using rule 99 (operand4 -> referenced_location .)
    COLON           reduce using rule 99 (operand4 -> referenced_location .)
    THEN            reduce using rule 99 (operand4 -> referenced_location .)
    RBRACKET        reduce using rule 99 (operand4 -> referenced_location .)
    RPAREN          reduce using rule 99 (operand4 -> referenced_location .)
    ELSE            reduce using rule 99 (operand4 -> referenced_location .)
    ELSIF           reduce using rule 99 (operand4 -> referenced_location .)
    FI              reduce using rule 99 (operand4 -> referenced_location .)


state 80

    (131) boolean_literal -> FALSE .

    TIMES           reduce using rule 131 (boolean_literal -> FALSE .)
    DIVIDE          reduce using rule 131 (boolean_literal -> FALSE .)
    MODULO          reduce using rule 131 (boolean_literal -> FALSE .)
    PLUS            reduce using rule 131 (boolean_literal -> FALSE .)
    MINUS           reduce using rule 131 (boolean_literal -> FALSE .)
    CONCAT          reduce using rule 131 (boolean_literal -> FALSE .)
    AND             reduce using rule 131 (boolean_literal -> FALSE .)
    OR              reduce using rule 131 (boolean_literal -> FALSE .)
    EQUAL           reduce using rule 131 (boolean_literal -> FALSE .)
    NOTEQ           reduce using rule 131 (boolean_literal -> FALSE .)
    GREATER         reduce using rule 131 (boolean_literal -> FALSE .)
    GTEQUAL         reduce using rule 131 (boolean_literal -> FALSE .)
    LESS            reduce using rule 131 (boolean_literal -> FALSE .)
    LTEQUAL         reduce using rule 131 (boolean_literal -> FALSE .)
    IN              reduce using rule 131 (boolean_literal -> FALSE .)
    RBRACKET        reduce using rule 131 (boolean_literal -> FALSE .)
    COMMA           reduce using rule 131 (boolean_literal -> FALSE .)
    SEMI            reduce using rule 131 (boolean_literal -> FALSE .)
    COLON           reduce using rule 131 (boolean_literal -> FALSE .)
    THEN            reduce using rule 131 (boolean_literal -> FALSE .)
    LBRACKET        reduce using rule 131 (boolean_literal -> FALSE .)
    RPAREN          reduce using rule 131 (boolean_literal -> FALSE .)
    ELSE            reduce using rule 131 (boolean_literal -> FALSE .)
    ELSIF           reduce using rule 131 (boolean_literal -> FALSE .)
    FI              reduce using rule 131 (boolean_literal -> FALSE .)


state 81

    (67) location -> string_element .

    ARROW           reduce using rule 67 (location -> string_element .)
    LBRACKET        reduce using rule 67 (location -> string_element .)
    TIMES           reduce using rule 67 (location -> string_element .)
    DIVIDE          reduce using rule 67 (location -> string_element .)
    MODULO          reduce using rule 67 (location -> string_element .)
    PLUS            reduce using rule 67 (location -> string_element .)
    MINUS           reduce using rule 67 (location -> string_element .)
    CONCAT          reduce using rule 67 (location -> string_element .)
    AND             reduce using rule 67 (location -> string_element .)
    OR              reduce using rule 67 (location -> string_element .)
    EQUAL           reduce using rule 67 (location -> string_element .)
    NOTEQ           reduce using rule 67 (location -> string_element .)
    GREATER         reduce using rule 67 (location -> string_element .)
    GTEQUAL         reduce using rule 67 (location -> string_element .)
    LESS            reduce using rule 67 (location -> string_element .)
    LTEQUAL         reduce using rule 67 (location -> string_element .)
    IN              reduce using rule 67 (location -> string_element .)
    COMMA           reduce using rule 67 (location -> string_element .)
    RBRACKET        reduce using rule 67 (location -> string_element .)
    COLON           reduce using rule 67 (location -> string_element .)
    SEMI            reduce using rule 67 (location -> string_element .)
    THEN            reduce using rule 67 (location -> string_element .)
    RPAREN          reduce using rule 67 (location -> string_element .)
    ELSE            reduce using rule 67 (location -> string_element .)
    ELSIF           reduce using rule 67 (location -> string_element .)
    FI              reduce using rule 67 (location -> string_element .)


state 82

    (81) array_location -> location .

    ARROW           reduce using rule 81 (array_location -> location .)
    LBRACKET        reduce using rule 81 (array_location -> location .)
    TIMES           reduce using rule 81 (array_location -> location .)
    DIVIDE          reduce using rule 81 (array_location -> location .)
    MODULO          reduce using rule 81 (array_location -> location .)
    PLUS            reduce using rule 81 (array_location -> location .)
    MINUS           reduce using rule 81 (array_location -> location .)
    CONCAT          reduce using rule 81 (array_location -> location .)
    AND             reduce using rule 81 (array_location -> location .)
    OR              reduce using rule 81 (array_location -> location .)
    EQUAL           reduce using rule 81 (array_location -> location .)
    NOTEQ           reduce using rule 81 (array_location -> location .)
    GREATER         reduce using rule 81 (array_location -> location .)
    GTEQUAL         reduce using rule 81 (array_location -> location .)
    LESS            reduce using rule 81 (array_location -> location .)
    LTEQUAL         reduce using rule 81 (array_location -> location .)
    IN              reduce using rule 81 (array_location -> location .)
    RBRACKET        reduce using rule 81 (array_location -> location .)
    COMMA           reduce using rule 81 (array_location -> location .)
    SEMI            reduce using rule 81 (array_location -> location .)
    COLON           reduce using rule 81 (array_location -> location .)
    THEN            reduce using rule 81 (array_location -> location .)
    RPAREN          reduce using rule 81 (array_location -> location .)
    ELSE            reduce using rule 81 (array_location -> location .)
    ELSIF           reduce using rule 81 (array_location -> location .)
    FI              reduce using rule 81 (array_location -> location .)


state 83

    (70) location -> array_slice .

    ARROW           reduce using rule 70 (location -> array_slice .)
    LBRACKET        reduce using rule 70 (location -> array_slice .)
    TIMES           reduce using rule 70 (location -> array_slice .)
    DIVIDE          reduce using rule 70 (location -> array_slice .)
    MODULO          reduce using rule 70 (location -> array_slice .)
    PLUS            reduce using rule 70 (location -> array_slice .)
    MINUS           reduce using rule 70 (location -> array_slice .)
    CONCAT          reduce using rule 70 (location -> array_slice .)
    AND             reduce using rule 70 (location -> array_slice .)
    OR              reduce using rule 70 (location -> array_slice .)
    EQUAL           reduce using rule 70 (location -> array_slice .)
    NOTEQ           reduce using rule 70 (location -> array_slice .)
    GREATER         reduce using rule 70 (location -> array_slice .)
    GTEQUAL         reduce using rule 70 (location -> array_slice .)
    LESS            reduce using rule 70 (location -> array_slice .)
    LTEQUAL         reduce using rule 70 (location -> array_slice .)
    IN              reduce using rule 70 (location -> array_slice .)
    COMMA           reduce using rule 70 (location -> array_slice .)
    RBRACKET        reduce using rule 70 (location -> array_slice .)
    COLON           reduce using rule 70 (location -> array_slice .)
    SEMI            reduce using rule 70 (location -> array_slice .)
    THEN            reduce using rule 70 (location -> array_slice .)
    RPAREN          reduce using rule 70 (location -> array_slice .)
    ELSE            reduce using rule 70 (location -> array_slice .)
    ELSIF           reduce using rule 70 (location -> array_slice .)
    FI              reduce using rule 70 (location -> array_slice .)


state 84

    (65) location -> identifier .
    (72) string_element -> identifier . LBRACKET start_element LBRACKET
    (74) string_slice -> identifier . LBRACKET left_element COLON right_element RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    ARROW           reduce using rule 65 (location -> identifier .)
    TIMES           reduce using rule 65 (location -> identifier .)
    DIVIDE          reduce using rule 65 (location -> identifier .)
    MODULO          reduce using rule 65 (location -> identifier .)
    PLUS            reduce using rule 65 (location -> identifier .)
    MINUS           reduce using rule 65 (location -> identifier .)
    CONCAT          reduce using rule 65 (location -> identifier .)
    AND             reduce using rule 65 (location -> identifier .)
    OR              reduce using rule 65 (location -> identifier .)
    EQUAL           reduce using rule 65 (location -> identifier .)
    NOTEQ           reduce using rule 65 (location -> identifier .)
    GREATER         reduce using rule 65 (location -> identifier .)
    GTEQUAL         reduce using rule 65 (location -> identifier .)
    LESS            reduce using rule 65 (location -> identifier .)
    LTEQUAL         reduce using rule 65 (location -> identifier .)
    IN              reduce using rule 65 (location -> identifier .)
    COMMA           reduce using rule 65 (location -> identifier .)
    RBRACKET        reduce using rule 65 (location -> identifier .)
    COLON           reduce using rule 65 (location -> identifier .)
    SEMI            reduce using rule 65 (location -> identifier .)
    THEN            reduce using rule 65 (location -> identifier .)
    RPAREN          reduce using rule 65 (location -> identifier .)
    ELSE            reduce using rule 65 (location -> identifier .)
    ELSIF           reduce using rule 65 (location -> identifier .)
    FI              reduce using rule 65 (location -> identifier .)
    LBRACKET        shift and go to state 125

  ! LBRACKET        [ reduce using rule 65 (location -> identifier .) ]


state 85

    (126) literal -> character_literal .

    TIMES           reduce using rule 126 (literal -> character_literal .)
    DIVIDE          reduce using rule 126 (literal -> character_literal .)
    MODULO          reduce using rule 126 (literal -> character_literal .)
    PLUS            reduce using rule 126 (literal -> character_literal .)
    MINUS           reduce using rule 126 (literal -> character_literal .)
    CONCAT          reduce using rule 126 (literal -> character_literal .)
    AND             reduce using rule 126 (literal -> character_literal .)
    OR              reduce using rule 126 (literal -> character_literal .)
    EQUAL           reduce using rule 126 (literal -> character_literal .)
    NOTEQ           reduce using rule 126 (literal -> character_literal .)
    GREATER         reduce using rule 126 (literal -> character_literal .)
    GTEQUAL         reduce using rule 126 (literal -> character_literal .)
    LESS            reduce using rule 126 (literal -> character_literal .)
    LTEQUAL         reduce using rule 126 (literal -> character_literal .)
    IN              reduce using rule 126 (literal -> character_literal .)
    RBRACKET        reduce using rule 126 (literal -> character_literal .)
    THEN            reduce using rule 126 (literal -> character_literal .)
    RPAREN          reduce using rule 126 (literal -> character_literal .)
    COMMA           reduce using rule 126 (literal -> character_literal .)
    COLON           reduce using rule 126 (literal -> character_literal .)
    FI              reduce using rule 126 (literal -> character_literal .)
    SEMI            reduce using rule 126 (literal -> character_literal .)
    LBRACKET        reduce using rule 126 (literal -> character_literal .)
    ELSE            reduce using rule 126 (literal -> character_literal .)
    ELSIF           reduce using rule 126 (literal -> character_literal .)


state 86

    (90) operand0 -> operand1 .
    (93) operand1 -> operand1 . operator2 operand2
    (109) operator2 -> . arithmetic_additive_operator
    (110) operator2 -> . string_concatenation_operator
    (111) arithmetic_additive_operator -> . PLUS
    (112) arithmetic_additive_operator -> . MINUS
    (113) string_concatenation_operator -> . CONCAT

    AND             reduce using rule 90 (operand0 -> operand1 .)
    OR              reduce using rule 90 (operand0 -> operand1 .)
    EQUAL           reduce using rule 90 (operand0 -> operand1 .)
    NOTEQ           reduce using rule 90 (operand0 -> operand1 .)
    GREATER         reduce using rule 90 (operand0 -> operand1 .)
    GTEQUAL         reduce using rule 90 (operand0 -> operand1 .)
    LESS            reduce using rule 90 (operand0 -> operand1 .)
    LTEQUAL         reduce using rule 90 (operand0 -> operand1 .)
    IN              reduce using rule 90 (operand0 -> operand1 .)
    LBRACKET        reduce using rule 90 (operand0 -> operand1 .)
    COLON           reduce using rule 90 (operand0 -> operand1 .)
    RBRACKET        reduce using rule 90 (operand0 -> operand1 .)
    RPAREN          reduce using rule 90 (operand0 -> operand1 .)
    COMMA           reduce using rule 90 (operand0 -> operand1 .)
    SEMI            reduce using rule 90 (operand0 -> operand1 .)
    THEN            reduce using rule 90 (operand0 -> operand1 .)
    FI              reduce using rule 90 (operand0 -> operand1 .)
    ELSE            reduce using rule 90 (operand0 -> operand1 .)
    ELSIF           reduce using rule 90 (operand0 -> operand1 .)
    PLUS            shift and go to state 126
    MINUS           shift and go to state 131
    CONCAT          shift and go to state 130

    string_concatenation_operator  shift and go to state 129
    arithmetic_additive_operator   shift and go to state 128
    operator2                      shift and go to state 127

state 87

    (130) boolean_literal -> TRUE .

    TIMES           reduce using rule 130 (boolean_literal -> TRUE .)
    DIVIDE          reduce using rule 130 (boolean_literal -> TRUE .)
    MODULO          reduce using rule 130 (boolean_literal -> TRUE .)
    PLUS            reduce using rule 130 (boolean_literal -> TRUE .)
    MINUS           reduce using rule 130 (boolean_literal -> TRUE .)
    CONCAT          reduce using rule 130 (boolean_literal -> TRUE .)
    AND             reduce using rule 130 (boolean_literal -> TRUE .)
    OR              reduce using rule 130 (boolean_literal -> TRUE .)
    EQUAL           reduce using rule 130 (boolean_literal -> TRUE .)
    NOTEQ           reduce using rule 130 (boolean_literal -> TRUE .)
    GREATER         reduce using rule 130 (boolean_literal -> TRUE .)
    GTEQUAL         reduce using rule 130 (boolean_literal -> TRUE .)
    LESS            reduce using rule 130 (boolean_literal -> TRUE .)
    LTEQUAL         reduce using rule 130 (boolean_literal -> TRUE .)
    IN              reduce using rule 130 (boolean_literal -> TRUE .)
    RBRACKET        reduce using rule 130 (boolean_literal -> TRUE .)
    COMMA           reduce using rule 130 (boolean_literal -> TRUE .)
    SEMI            reduce using rule 130 (boolean_literal -> TRUE .)
    COLON           reduce using rule 130 (boolean_literal -> TRUE .)
    THEN            reduce using rule 130 (boolean_literal -> TRUE .)
    LBRACKET        reduce using rule 130 (boolean_literal -> TRUE .)
    RPAREN          reduce using rule 130 (boolean_literal -> TRUE .)
    ELSE            reduce using rule 130 (boolean_literal -> TRUE .)
    ELSIF           reduce using rule 130 (boolean_literal -> TRUE .)
    FI              reduce using rule 130 (boolean_literal -> TRUE .)


state 88

    (13) synonym_definition -> identifier_list ASSIGN expression .

    COMMA           reduce using rule 13 (synonym_definition -> identifier_list ASSIGN expression .)
    SEMI            reduce using rule 13 (synonym_definition -> identifier_list ASSIGN expression .)


state 89

    (129) integer_literal -> ICONST .

    TIMES           reduce using rule 129 (integer_literal -> ICONST .)
    DIVIDE          reduce using rule 129 (integer_literal -> ICONST .)
    MODULO          reduce using rule 129 (integer_literal -> ICONST .)
    PLUS            reduce using rule 129 (integer_literal -> ICONST .)
    MINUS           reduce using rule 129 (integer_literal -> ICONST .)
    CONCAT          reduce using rule 129 (integer_literal -> ICONST .)
    AND             reduce using rule 129 (integer_literal -> ICONST .)
    OR              reduce using rule 129 (integer_literal -> ICONST .)
    EQUAL           reduce using rule 129 (integer_literal -> ICONST .)
    NOTEQ           reduce using rule 129 (integer_literal -> ICONST .)
    GREATER         reduce using rule 129 (integer_literal -> ICONST .)
    GTEQUAL         reduce using rule 129 (integer_literal -> ICONST .)
    LESS            reduce using rule 129 (integer_literal -> ICONST .)
    LTEQUAL         reduce using rule 129 (integer_literal -> ICONST .)
    IN              reduce using rule 129 (integer_literal -> ICONST .)
    LBRACKET        reduce using rule 129 (integer_literal -> ICONST .)
    COLON           reduce using rule 129 (integer_literal -> ICONST .)
    COMMA           reduce using rule 129 (integer_literal -> ICONST .)
    SEMI            reduce using rule 129 (integer_literal -> ICONST .)
    THEN            reduce using rule 129 (integer_literal -> ICONST .)
    RBRACKET        reduce using rule 129 (integer_literal -> ICONST .)
    RPAREN          reduce using rule 129 (integer_literal -> ICONST .)
    ELSE            reduce using rule 129 (integer_literal -> ICONST .)
    ELSIF           reduce using rule 129 (integer_literal -> ICONST .)
    FI              reduce using rule 129 (integer_literal -> ICONST .)


state 90

    (104) monadic_operator -> MINUS .

    ARROW           reduce using rule 104 (monadic_operator -> MINUS .)
    ID              reduce using rule 104 (monadic_operator -> MINUS .)
    ICONST          reduce using rule 104 (monadic_operator -> MINUS .)
    TRUE            reduce using rule 104 (monadic_operator -> MINUS .)
    FALSE           reduce using rule 104 (monadic_operator -> MINUS .)
    CCONST          reduce using rule 104 (monadic_operator -> MINUS .)
    NULL            reduce using rule 104 (monadic_operator -> MINUS .)
    SCONST          reduce using rule 104 (monadic_operator -> MINUS .)


state 91

    (132) character_literal -> CCONST .

    TIMES           reduce using rule 132 (character_literal -> CCONST .)
    DIVIDE          reduce using rule 132 (character_literal -> CCONST .)
    MODULO          reduce using rule 132 (character_literal -> CCONST .)
    PLUS            reduce using rule 132 (character_literal -> CCONST .)
    MINUS           reduce using rule 132 (character_literal -> CCONST .)
    CONCAT          reduce using rule 132 (character_literal -> CCONST .)
    AND             reduce using rule 132 (character_literal -> CCONST .)
    OR              reduce using rule 132 (character_literal -> CCONST .)
    EQUAL           reduce using rule 132 (character_literal -> CCONST .)
    NOTEQ           reduce using rule 132 (character_literal -> CCONST .)
    GREATER         reduce using rule 132 (character_literal -> CCONST .)
    GTEQUAL         reduce using rule 132 (character_literal -> CCONST .)
    LESS            reduce using rule 132 (character_literal -> CCONST .)
    LTEQUAL         reduce using rule 132 (character_literal -> CCONST .)
    IN              reduce using rule 132 (character_literal -> CCONST .)
    FI              reduce using rule 132 (character_literal -> CCONST .)
    ELSE            reduce using rule 132 (character_literal -> CCONST .)
    ELSIF           reduce using rule 132 (character_literal -> CCONST .)
    COMMA           reduce using rule 132 (character_literal -> CCONST .)
    SEMI            reduce using rule 132 (character_literal -> CCONST .)
    COLON           reduce using rule 132 (character_literal -> CCONST .)
    THEN            reduce using rule 132 (character_literal -> CCONST .)
    RBRACKET        reduce using rule 132 (character_literal -> CCONST .)
    LBRACKET        reduce using rule 132 (character_literal -> CCONST .)
    RPAREN          reduce using rule 132 (character_literal -> CCONST .)


state 92

    (69) location -> array_element .

    ARROW           reduce using rule 69 (location -> array_element .)
    LBRACKET        reduce using rule 69 (location -> array_element .)
    TIMES           reduce using rule 69 (location -> array_element .)
    DIVIDE          reduce using rule 69 (location -> array_element .)
    MODULO          reduce using rule 69 (location -> array_element .)
    PLUS            reduce using rule 69 (location -> array_element .)
    MINUS           reduce using rule 69 (location -> array_element .)
    CONCAT          reduce using rule 69 (location -> array_element .)
    AND             reduce using rule 69 (location -> array_element .)
    OR              reduce using rule 69 (location -> array_element .)
    EQUAL           reduce using rule 69 (location -> array_element .)
    NOTEQ           reduce using rule 69 (location -> array_element .)
    GREATER         reduce using rule 69 (location -> array_element .)
    GTEQUAL         reduce using rule 69 (location -> array_element .)
    LESS            reduce using rule 69 (location -> array_element .)
    LTEQUAL         reduce using rule 69 (location -> array_element .)
    IN              reduce using rule 69 (location -> array_element .)
    COMMA           reduce using rule 69 (location -> array_element .)
    RBRACKET        reduce using rule 69 (location -> array_element .)
    COLON           reduce using rule 69 (location -> array_element .)
    SEMI            reduce using rule 69 (location -> array_element .)
    THEN            reduce using rule 69 (location -> array_element .)
    RPAREN          reduce using rule 69 (location -> array_element .)
    ELSE            reduce using rule 69 (location -> array_element .)
    ELSIF           reduce using rule 69 (location -> array_element .)
    FI              reduce using rule 69 (location -> array_element .)


state 93

    (96) operand3 -> monadic_operator . operand4
    (98) operand4 -> . array_location
    (99) operand4 -> . referenced_location
    (100) operand4 -> . primitive_value
    (81) array_location -> . location
    (106) referenced_location -> . ARROW array_location
    (123) primitive_value -> . literal
    (65) location -> . identifier
    (66) location -> . dereferenced_reference
    (67) location -> . string_element
    (68) location -> . string_slice
    (69) location -> . array_element
    (70) location -> . array_slice
    (124) literal -> . integer_literal
    (125) literal -> . boolean_literal
    (126) literal -> . character_literal
    (127) literal -> . empty_literal
    (128) literal -> . character_string_literal
    (22) identifier -> . ID
    (71) dereferenced_reference -> . array_location ARROW
    (72) string_element -> . identifier LBRACKET start_element LBRACKET
    (74) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (77) array_element -> . array_location LBRACKET expression_list RBRACKET
    (80) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (129) integer_literal -> . ICONST
    (130) boolean_literal -> . TRUE
    (131) boolean_literal -> . FALSE
    (132) character_literal -> . CCONST
    (133) empty_literal -> . NULL
    (134) character_string_literal -> . SCONST

    ARROW           shift and go to state 72
    ID              shift and go to state 15
    ICONST          shift and go to state 89
    TRUE            shift and go to state 87
    FALSE           shift and go to state 80
    CCONST          shift and go to state 91
    NULL            shift and go to state 97
    SCONST          shift and go to state 95

    character_string_literal       shift and go to state 94
    referenced_location            shift and go to state 79
    array_slice                    shift and go to state 83
    array_location                 shift and go to state 73
    literal                        shift and go to state 74
    dereferenced_reference         shift and go to state 75
    integer_literal                shift and go to state 77
    primitive_value                shift and go to state 78
    string_slice                   shift and go to state 98
    string_element                 shift and go to state 81
    location                       shift and go to state 82
    identifier                     shift and go to state 84
    character_literal              shift and go to state 85
    empty_literal                  shift and go to state 101
    operand4                       shift and go to state 132
    boolean_literal                shift and go to state 104
    array_element                  shift and go to state 92

state 94

    (128) literal -> character_string_literal .

    TIMES           reduce using rule 128 (literal -> character_string_literal .)
    DIVIDE          reduce using rule 128 (literal -> character_string_literal .)
    MODULO          reduce using rule 128 (literal -> character_string_literal .)
    PLUS            reduce using rule 128 (literal -> character_string_literal .)
    MINUS           reduce using rule 128 (literal -> character_string_literal .)
    CONCAT          reduce using rule 128 (literal -> character_string_literal .)
    AND             reduce using rule 128 (literal -> character_string_literal .)
    OR              reduce using rule 128 (literal -> character_string_literal .)
    EQUAL           reduce using rule 128 (literal -> character_string_literal .)
    NOTEQ           reduce using rule 128 (literal -> character_string_literal .)
    GREATER         reduce using rule 128 (literal -> character_string_literal .)
    GTEQUAL         reduce using rule 128 (literal -> character_string_literal .)
    LESS            reduce using rule 128 (literal -> character_string_literal .)
    LTEQUAL         reduce using rule 128 (literal -> character_string_literal .)
    IN              reduce using rule 128 (literal -> character_string_literal .)
    RBRACKET        reduce using rule 128 (literal -> character_string_literal .)
    THEN            reduce using rule 128 (literal -> character_string_literal .)
    RPAREN          reduce using rule 128 (literal -> character_string_literal .)
    COMMA           reduce using rule 128 (literal -> character_string_literal .)
    COLON           reduce using rule 128 (literal -> character_string_literal .)
    FI              reduce using rule 128 (literal -> character_string_literal .)
    SEMI            reduce using rule 128 (literal -> character_string_literal .)
    LBRACKET        reduce using rule 128 (literal -> character_string_literal .)
    ELSE            reduce using rule 128 (literal -> character_string_literal .)
    ELSIF           reduce using rule 128 (literal -> character_string_literal .)


state 95

    (134) character_string_literal -> SCONST .

    TIMES           reduce using rule 134 (character_string_literal -> SCONST .)
    DIVIDE          reduce using rule 134 (character_string_literal -> SCONST .)
    MODULO          reduce using rule 134 (character_string_literal -> SCONST .)
    PLUS            reduce using rule 134 (character_string_literal -> SCONST .)
    MINUS           reduce using rule 134 (character_string_literal -> SCONST .)
    CONCAT          reduce using rule 134 (character_string_literal -> SCONST .)
    AND             reduce using rule 134 (character_string_literal -> SCONST .)
    OR              reduce using rule 134 (character_string_literal -> SCONST .)
    EQUAL           reduce using rule 134 (character_string_literal -> SCONST .)
    NOTEQ           reduce using rule 134 (character_string_literal -> SCONST .)
    GREATER         reduce using rule 134 (character_string_literal -> SCONST .)
    GTEQUAL         reduce using rule 134 (character_string_literal -> SCONST .)
    LESS            reduce using rule 134 (character_string_literal -> SCONST .)
    LTEQUAL         reduce using rule 134 (character_string_literal -> SCONST .)
    IN              reduce using rule 134 (character_string_literal -> SCONST .)
    LBRACKET        reduce using rule 134 (character_string_literal -> SCONST .)
    COLON           reduce using rule 134 (character_string_literal -> SCONST .)
    COMMA           reduce using rule 134 (character_string_literal -> SCONST .)
    SEMI            reduce using rule 134 (character_string_literal -> SCONST .)
    THEN            reduce using rule 134 (character_string_literal -> SCONST .)
    RBRACKET        reduce using rule 134 (character_string_literal -> SCONST .)
    RPAREN          reduce using rule 134 (character_string_literal -> SCONST .)
    ELSE            reduce using rule 134 (character_string_literal -> SCONST .)
    ELSIF           reduce using rule 134 (character_string_literal -> SCONST .)
    FI              reduce using rule 134 (character_string_literal -> SCONST .)


state 96

    (105) monadic_operator -> NOT .

    ARROW           reduce using rule 105 (monadic_operator -> NOT .)
    ID              reduce using rule 105 (monadic_operator -> NOT .)
    ICONST          reduce using rule 105 (monadic_operator -> NOT .)
    TRUE            reduce using rule 105 (monadic_operator -> NOT .)
    FALSE           reduce using rule 105 (monadic_operator -> NOT .)
    CCONST          reduce using rule 105 (monadic_operator -> NOT .)
    NULL            reduce using rule 105 (monadic_operator -> NOT .)
    SCONST          reduce using rule 105 (monadic_operator -> NOT .)


state 97

    (133) empty_literal -> NULL .

    TIMES           reduce using rule 133 (empty_literal -> NULL .)
    DIVIDE          reduce using rule 133 (empty_literal -> NULL .)
    MODULO          reduce using rule 133 (empty_literal -> NULL .)
    PLUS            reduce using rule 133 (empty_literal -> NULL .)
    MINUS           reduce using rule 133 (empty_literal -> NULL .)
    CONCAT          reduce using rule 133 (empty_literal -> NULL .)
    AND             reduce using rule 133 (empty_literal -> NULL .)
    OR              reduce using rule 133 (empty_literal -> NULL .)
    EQUAL           reduce using rule 133 (empty_literal -> NULL .)
    NOTEQ           reduce using rule 133 (empty_literal -> NULL .)
    GREATER         reduce using rule 133 (empty_literal -> NULL .)
    GTEQUAL         reduce using rule 133 (empty_literal -> NULL .)
    LESS            reduce using rule 133 (empty_literal -> NULL .)
    LTEQUAL         reduce using rule 133 (empty_literal -> NULL .)
    IN              reduce using rule 133 (empty_literal -> NULL .)
    ELSE            reduce using rule 133 (empty_literal -> NULL .)
    ELSIF           reduce using rule 133 (empty_literal -> NULL .)
    COMMA           reduce using rule 133 (empty_literal -> NULL .)
    SEMI            reduce using rule 133 (empty_literal -> NULL .)
    COLON           reduce using rule 133 (empty_literal -> NULL .)
    THEN            reduce using rule 133 (empty_literal -> NULL .)
    RBRACKET        reduce using rule 133 (empty_literal -> NULL .)
    LBRACKET        reduce using rule 133 (empty_literal -> NULL .)
    RPAREN          reduce using rule 133 (empty_literal -> NULL .)
    FI              reduce using rule 133 (empty_literal -> NULL .)


state 98

    (68) location -> string_slice .

    ARROW           reduce using rule 68 (location -> string_slice .)
    LBRACKET        reduce using rule 68 (location -> string_slice .)
    TIMES           reduce using rule 68 (location -> string_slice .)
    DIVIDE          reduce using rule 68 (location -> string_slice .)
    MODULO          reduce using rule 68 (location -> string_slice .)
    PLUS            reduce using rule 68 (location -> string_slice .)
    MINUS           reduce using rule 68 (location -> string_slice .)
    CONCAT          reduce using rule 68 (location -> string_slice .)
    AND             reduce using rule 68 (location -> string_slice .)
    OR              reduce using rule 68 (location -> string_slice .)
    EQUAL           reduce using rule 68 (location -> string_slice .)
    NOTEQ           reduce using rule 68 (location -> string_slice .)
    GREATER         reduce using rule 68 (location -> string_slice .)
    GTEQUAL         reduce using rule 68 (location -> string_slice .)
    LESS            reduce using rule 68 (location -> string_slice .)
    LTEQUAL         reduce using rule 68 (location -> string_slice .)
    IN              reduce using rule 68 (location -> string_slice .)
    COMMA           reduce using rule 68 (location -> string_slice .)
    RBRACKET        reduce using rule 68 (location -> string_slice .)
    COLON           reduce using rule 68 (location -> string_slice .)
    SEMI            reduce using rule 68 (location -> string_slice .)
    THEN            reduce using rule 68 (location -> string_slice .)
    RPAREN          reduce using rule 68 (location -> string_slice .)
    ELSE            reduce using rule 68 (location -> string_slice .)
    ELSIF           reduce using rule 68 (location -> string_slice .)
    FI              reduce using rule 68 (location -> string_slice .)


state 99

    (84) conditional_expression -> IF . expression then_expression else_expression FI
    (85) conditional_expression -> IF . expression then_expression elsif_expression else_expression FI
    (82) expression -> . operand0
    (83) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (84) conditional_expression -> . IF expression then_expression else_expression FI
    (85) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (92) operand1 -> . operand2
    (93) operand1 -> . operand1 operator2 operand2
    (94) operand2 -> . operand3
    (95) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (96) operand3 -> . monadic_operator operand4
    (97) operand3 -> . operand4
    (104) monadic_operator -> . MINUS
    (105) monadic_operator -> . NOT
    (98) operand4 -> . array_location
    (99) operand4 -> . referenced_location
    (100) operand4 -> . primitive_value
    (81) array_location -> . location
    (106) referenced_location -> . ARROW array_location
    (123) primitive_value -> . literal
    (65) location -> . identifier
    (66) location -> . dereferenced_reference
    (67) location -> . string_element
    (68) location -> . string_slice
    (69) location -> . array_element
    (70) location -> . array_slice
    (124) literal -> . integer_literal
    (125) literal -> . boolean_literal
    (126) literal -> . character_literal
    (127) literal -> . empty_literal
    (128) literal -> . character_string_literal
    (22) identifier -> . ID
    (71) dereferenced_reference -> . array_location ARROW
    (72) string_element -> . identifier LBRACKET start_element LBRACKET
    (74) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (77) array_element -> . array_location LBRACKET expression_list RBRACKET
    (80) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (129) integer_literal -> . ICONST
    (130) boolean_literal -> . TRUE
    (131) boolean_literal -> . FALSE
    (132) character_literal -> . CCONST
    (133) empty_literal -> . NULL
    (134) character_string_literal -> . SCONST

    IF              shift and go to state 99
    MINUS           shift and go to state 90
    NOT             shift and go to state 96
    ARROW           shift and go to state 72
    ID              shift and go to state 15
    ICONST          shift and go to state 89
    TRUE            shift and go to state 87
    FALSE           shift and go to state 80
    CCONST          shift and go to state 91
    NULL            shift and go to state 97
    SCONST          shift and go to state 95

    monadic_operator               shift and go to state 93
    character_literal              shift and go to state 85
    character_string_literal       shift and go to state 94
    identifier                     shift and go to state 84
    literal                        shift and go to state 74
    dereferenced_reference         shift and go to state 75
    operand3                       shift and go to state 76
    integer_literal                shift and go to state 77
    array_slice                    shift and go to state 83
    primitive_value                shift and go to state 78
    referenced_location            shift and go to state 79
    string_slice                   shift and go to state 98
    string_element                 shift and go to state 81
    location                       shift and go to state 82
    conditional_expression         shift and go to state 100
    operand2                       shift and go to state 103
    array_location                 shift and go to state 73
    empty_literal                  shift and go to state 101
    operand1                       shift and go to state 86
    operand4                       shift and go to state 102
    expression                     shift and go to state 133
    boolean_literal                shift and go to state 104
    operand0                       shift and go to state 105
    array_element                  shift and go to state 92

state 100

    (83) expression -> conditional_expression .

    LBRACKET        reduce using rule 83 (expression -> conditional_expression .)
    COLON           reduce using rule 83 (expression -> conditional_expression .)
    COMMA           reduce using rule 83 (expression -> conditional_expression .)
    SEMI            reduce using rule 83 (expression -> conditional_expression .)
    RBRACKET        reduce using rule 83 (expression -> conditional_expression .)
    RPAREN          reduce using rule 83 (expression -> conditional_expression .)
    THEN            reduce using rule 83 (expression -> conditional_expression .)
    FI              reduce using rule 83 (expression -> conditional_expression .)
    ELSE            reduce using rule 83 (expression -> conditional_expression .)
    ELSIF           reduce using rule 83 (expression -> conditional_expression .)


state 101

    (127) literal -> empty_literal .

    TIMES           reduce using rule 127 (literal -> empty_literal .)
    DIVIDE          reduce using rule 127 (literal -> empty_literal .)
    MODULO          reduce using rule 127 (literal -> empty_literal .)
    PLUS            reduce using rule 127 (literal -> empty_literal .)
    MINUS           reduce using rule 127 (literal -> empty_literal .)
    CONCAT          reduce using rule 127 (literal -> empty_literal .)
    AND             reduce using rule 127 (literal -> empty_literal .)
    OR              reduce using rule 127 (literal -> empty_literal .)
    EQUAL           reduce using rule 127 (literal -> empty_literal .)
    NOTEQ           reduce using rule 127 (literal -> empty_literal .)
    GREATER         reduce using rule 127 (literal -> empty_literal .)
    GTEQUAL         reduce using rule 127 (literal -> empty_literal .)
    LESS            reduce using rule 127 (literal -> empty_literal .)
    LTEQUAL         reduce using rule 127 (literal -> empty_literal .)
    IN              reduce using rule 127 (literal -> empty_literal .)
    RBRACKET        reduce using rule 127 (literal -> empty_literal .)
    THEN            reduce using rule 127 (literal -> empty_literal .)
    RPAREN          reduce using rule 127 (literal -> empty_literal .)
    COMMA           reduce using rule 127 (literal -> empty_literal .)
    COLON           reduce using rule 127 (literal -> empty_literal .)
    FI              reduce using rule 127 (literal -> empty_literal .)
    SEMI            reduce using rule 127 (literal -> empty_literal .)
    LBRACKET        reduce using rule 127 (literal -> empty_literal .)
    ELSE            reduce using rule 127 (literal -> empty_literal .)
    ELSIF           reduce using rule 127 (literal -> empty_literal .)


state 102

    (97) operand3 -> operand4 .

    TIMES           reduce using rule 97 (operand3 -> operand4 .)
    DIVIDE          reduce using rule 97 (operand3 -> operand4 .)
    MODULO          reduce using rule 97 (operand3 -> operand4 .)
    PLUS            reduce using rule 97 (operand3 -> operand4 .)
    MINUS           reduce using rule 97 (operand3 -> operand4 .)
    CONCAT          reduce using rule 97 (operand3 -> operand4 .)
    AND             reduce using rule 97 (operand3 -> operand4 .)
    OR              reduce using rule 97 (operand3 -> operand4 .)
    EQUAL           reduce using rule 97 (operand3 -> operand4 .)
    NOTEQ           reduce using rule 97 (operand3 -> operand4 .)
    GREATER         reduce using rule 97 (operand3 -> operand4 .)
    GTEQUAL         reduce using rule 97 (operand3 -> operand4 .)
    LESS            reduce using rule 97 (operand3 -> operand4 .)
    LTEQUAL         reduce using rule 97 (operand3 -> operand4 .)
    IN              reduce using rule 97 (operand3 -> operand4 .)
    FI              reduce using rule 97 (operand3 -> operand4 .)
    COMMA           reduce using rule 97 (operand3 -> operand4 .)
    SEMI            reduce using rule 97 (operand3 -> operand4 .)
    COLON           reduce using rule 97 (operand3 -> operand4 .)
    THEN            reduce using rule 97 (operand3 -> operand4 .)
    RBRACKET        reduce using rule 97 (operand3 -> operand4 .)
    LBRACKET        reduce using rule 97 (operand3 -> operand4 .)
    RPAREN          reduce using rule 97 (operand3 -> operand4 .)
    ELSE            reduce using rule 97 (operand3 -> operand4 .)
    ELSIF           reduce using rule 97 (operand3 -> operand4 .)


state 103

    (92) operand1 -> operand2 .
    (95) operand2 -> operand2 . arithmetic_multiplicative_operator operand3
    (101) arithmetic_multiplicative_operator -> . TIMES
    (102) arithmetic_multiplicative_operator -> . DIVIDE
    (103) arithmetic_multiplicative_operator -> . MODULO

    PLUS            reduce using rule 92 (operand1 -> operand2 .)
    MINUS           reduce using rule 92 (operand1 -> operand2 .)
    CONCAT          reduce using rule 92 (operand1 -> operand2 .)
    AND             reduce using rule 92 (operand1 -> operand2 .)
    OR              reduce using rule 92 (operand1 -> operand2 .)
    EQUAL           reduce using rule 92 (operand1 -> operand2 .)
    NOTEQ           reduce using rule 92 (operand1 -> operand2 .)
    GREATER         reduce using rule 92 (operand1 -> operand2 .)
    GTEQUAL         reduce using rule 92 (operand1 -> operand2 .)
    LESS            reduce using rule 92 (operand1 -> operand2 .)
    LTEQUAL         reduce using rule 92 (operand1 -> operand2 .)
    IN              reduce using rule 92 (operand1 -> operand2 .)
    COLON           reduce using rule 92 (operand1 -> operand2 .)
    THEN            reduce using rule 92 (operand1 -> operand2 .)
    COMMA           reduce using rule 92 (operand1 -> operand2 .)
    SEMI            reduce using rule 92 (operand1 -> operand2 .)
    FI              reduce using rule 92 (operand1 -> operand2 .)
    RBRACKET        reduce using rule 92 (operand1 -> operand2 .)
    ELSE            reduce using rule 92 (operand1 -> operand2 .)
    ELSIF           reduce using rule 92 (operand1 -> operand2 .)
    RPAREN          reduce using rule 92 (operand1 -> operand2 .)
    LBRACKET        reduce using rule 92 (operand1 -> operand2 .)
    TIMES           shift and go to state 137
    DIVIDE          shift and go to state 134
    MODULO          shift and go to state 136

    arithmetic_multiplicative_operator shift and go to state 135

state 104

    (125) literal -> boolean_literal .

    TIMES           reduce using rule 125 (literal -> boolean_literal .)
    DIVIDE          reduce using rule 125 (literal -> boolean_literal .)
    MODULO          reduce using rule 125 (literal -> boolean_literal .)
    PLUS            reduce using rule 125 (literal -> boolean_literal .)
    MINUS           reduce using rule 125 (literal -> boolean_literal .)
    CONCAT          reduce using rule 125 (literal -> boolean_literal .)
    AND             reduce using rule 125 (literal -> boolean_literal .)
    OR              reduce using rule 125 (literal -> boolean_literal .)
    EQUAL           reduce using rule 125 (literal -> boolean_literal .)
    NOTEQ           reduce using rule 125 (literal -> boolean_literal .)
    GREATER         reduce using rule 125 (literal -> boolean_literal .)
    GTEQUAL         reduce using rule 125 (literal -> boolean_literal .)
    LESS            reduce using rule 125 (literal -> boolean_literal .)
    LTEQUAL         reduce using rule 125 (literal -> boolean_literal .)
    IN              reduce using rule 125 (literal -> boolean_literal .)
    RBRACKET        reduce using rule 125 (literal -> boolean_literal .)
    THEN            reduce using rule 125 (literal -> boolean_literal .)
    RPAREN          reduce using rule 125 (literal -> boolean_literal .)
    COMMA           reduce using rule 125 (literal -> boolean_literal .)
    COLON           reduce using rule 125 (literal -> boolean_literal .)
    FI              reduce using rule 125 (literal -> boolean_literal .)
    SEMI            reduce using rule 125 (literal -> boolean_literal .)
    LBRACKET        reduce using rule 125 (literal -> boolean_literal .)
    ELSE            reduce using rule 125 (literal -> boolean_literal .)
    ELSIF           reduce using rule 125 (literal -> boolean_literal .)


state 105

    (82) expression -> operand0 .
    (91) operand0 -> operand0 . operator1 operand1
    (107) operator1 -> . relational_operator
    (108) operator1 -> . membership_operator
    (114) relational_operator -> . AND
    (115) relational_operator -> . OR
    (116) relational_operator -> . EQUAL
    (117) relational_operator -> . NOTEQ
    (118) relational_operator -> . GREATER
    (119) relational_operator -> . GTEQUAL
    (120) relational_operator -> . LESS
    (121) relational_operator -> . LTEQUAL
    (122) membership_operator -> . IN

    LBRACKET        reduce using rule 82 (expression -> operand0 .)
    COLON           reduce using rule 82 (expression -> operand0 .)
    COMMA           reduce using rule 82 (expression -> operand0 .)
    SEMI            reduce using rule 82 (expression -> operand0 .)
    RBRACKET        reduce using rule 82 (expression -> operand0 .)
    RPAREN          reduce using rule 82 (expression -> operand0 .)
    THEN            reduce using rule 82 (expression -> operand0 .)
    FI              reduce using rule 82 (expression -> operand0 .)
    ELSE            reduce using rule 82 (expression -> operand0 .)
    ELSIF           reduce using rule 82 (expression -> operand0 .)
    AND             shift and go to state 139
    OR              shift and go to state 141
    EQUAL           shift and go to state 147
    NOTEQ           shift and go to state 146
    GREATER         shift and go to state 138
    GTEQUAL         shift and go to state 140
    LESS            shift and go to state 143
    LTEQUAL         shift and go to state 149
    IN              shift and go to state 148

    membership_operator            shift and go to state 142
    operator1                      shift and go to state 144
    relational_operator            shift and go to state 145

state 106

    (12) synonym_definition -> identifier_list mode ASSIGN . expression
    (82) expression -> . operand0
    (83) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (84) conditional_expression -> . IF expression then_expression else_expression FI
    (85) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (92) operand1 -> . operand2
    (93) operand1 -> . operand1 operator2 operand2
    (94) operand2 -> . operand3
    (95) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (96) operand3 -> . monadic_operator operand4
    (97) operand3 -> . operand4
    (104) monadic_operator -> . MINUS
    (105) monadic_operator -> . NOT
    (98) operand4 -> . array_location
    (99) operand4 -> . referenced_location
    (100) operand4 -> . primitive_value
    (81) array_location -> . location
    (106) referenced_location -> . ARROW array_location
    (123) primitive_value -> . literal
    (65) location -> . identifier
    (66) location -> . dereferenced_reference
    (67) location -> . string_element
    (68) location -> . string_slice
    (69) location -> . array_element
    (70) location -> . array_slice
    (124) literal -> . integer_literal
    (125) literal -> . boolean_literal
    (126) literal -> . character_literal
    (127) literal -> . empty_literal
    (128) literal -> . character_string_literal
    (22) identifier -> . ID
    (71) dereferenced_reference -> . array_location ARROW
    (72) string_element -> . identifier LBRACKET start_element LBRACKET
    (74) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (77) array_element -> . array_location LBRACKET expression_list RBRACKET
    (80) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (129) integer_literal -> . ICONST
    (130) boolean_literal -> . TRUE
    (131) boolean_literal -> . FALSE
    (132) character_literal -> . CCONST
    (133) empty_literal -> . NULL
    (134) character_string_literal -> . SCONST

    IF              shift and go to state 99
    MINUS           shift and go to state 90
    NOT             shift and go to state 96
    ARROW           shift and go to state 72
    ID              shift and go to state 15
    ICONST          shift and go to state 89
    TRUE            shift and go to state 87
    FALSE           shift and go to state 80
    CCONST          shift and go to state 91
    NULL            shift and go to state 97
    SCONST          shift and go to state 95

    monadic_operator               shift and go to state 93
    character_literal              shift and go to state 85
    character_string_literal       shift and go to state 94
    identifier                     shift and go to state 84
    array_location                 shift and go to state 73
    literal                        shift and go to state 74
    dereferenced_reference         shift and go to state 75
    operand3                       shift and go to state 76
    integer_literal                shift and go to state 77
    array_slice                    shift and go to state 83
    primitive_value                shift and go to state 78
    referenced_location            shift and go to state 79
    string_slice                   shift and go to state 98
    string_element                 shift and go to state 81
    location                       shift and go to state 82
    conditional_expression         shift and go to state 100
    operand2                       shift and go to state 103
    empty_literal                  shift and go to state 101
    operand1                       shift and go to state 86
    operand4                       shift and go to state 102
    expression                     shift and go to state 150
    boolean_literal                shift and go to state 104
    operand0                       shift and go to state 105
    array_element                  shift and go to state 92

state 107

    (30) formal_parameter_list -> formal_parameter .
    (31) formal_parameter_list -> formal_parameter . COMMA formal_parameter

    RPAREN          reduce using rule 30 (formal_parameter_list -> formal_parameter .)
    COMMA           shift and go to state 151


state 108

    (28) procedure_definition -> PROC LPAREN formal_parameter_list . RPAREN result_spec SEMI statement_nullable END SEMI
    (29) procedure_definition -> PROC LPAREN formal_parameter_list . RPAREN SEMI statement_nullable END SEMI

    RPAREN          shift and go to state 152


state 109

    (32) formal_parameter -> identifier_list . mode LOC
    (33) formal_parameter -> identifier_list . mode
    (36) mode -> . mode_name
    (37) mode -> . discrete_mode
    (38) mode -> . reference_mode
    (39) mode -> . composite_mode
    (40) mode_name -> . identifier
    (41) discrete_mode -> . integer_mode
    (42) discrete_mode -> . boolean_mode
    (43) discrete_mode -> . character_mode
    (44) discrete_mode -> . discrete_range_mode
    (54) reference_mode -> . REF mode
    (55) composite_mode -> . string_mode
    (56) composite_mode -> . array_mode
    (22) identifier -> . ID
    (46) integer_mode -> . INT
    (47) boolean_mode -> . BOOL
    (48) character_mode -> . CHAR
    (49) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (50) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (57) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (59) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (45) discrete_mode_name -> . identifier

    REF             shift and go to state 38
    ID              shift and go to state 15
    INT             shift and go to state 39
    BOOL            shift and go to state 53
    CHAR            shift and go to state 51
    CHARS           shift and go to state 43
    ARRAY           shift and go to state 52

    discrete_range_mode            shift and go to state 45
    identifier                     shift and go to state 36
    composite_mode                 shift and go to state 46
    character_mode                 shift and go to state 47
    discrete_mode_name             shift and go to state 48
    mode                           shift and go to state 153
    boolean_mode                   shift and go to state 50
    mode_name                      shift and go to state 41
    reference_mode                 shift and go to state 35
    array_mode                     shift and go to state 42
    integer_mode                   shift and go to state 40
    string_mode                    shift and go to state 44
    discrete_mode                  shift and go to state 37

state 110

    (50) discrete_range_mode -> discrete_mode LPAREN literal_range . RPAREN

    RPAREN          shift and go to state 154


state 111

    (52) lower_bound -> expression .

    COLON           reduce using rule 52 (lower_bound -> expression .)


state 112

    (51) literal_range -> lower_bound . COLON upper_bound

    COLON           shift and go to state 155


state 113

    (58) string_length -> integer_literal .

    RBRACKET        reduce using rule 58 (string_length -> integer_literal .)


state 114

    (57) string_mode -> CHARS LBRACKET string_length . RBRACKET

    RBRACKET        shift and go to state 156


state 115

    (49) discrete_range_mode -> discrete_mode_name LPAREN literal_range . RPAREN

    RPAREN          shift and go to state 157


state 116

    (19) initialization -> ASSIGN expression .

    COMMA           reduce using rule 19 (initialization -> ASSIGN expression .)
    SEMI            reduce using rule 19 (initialization -> ASSIGN expression .)


state 117

    (45) discrete_mode_name -> identifier .
    (65) location -> identifier .
    (72) string_element -> identifier . LBRACKET start_element LBRACKET
    (74) string_slice -> identifier . LBRACKET left_element COLON right_element RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    LPAREN          reduce using rule 45 (discrete_mode_name -> identifier .)
    ARROW           reduce using rule 65 (location -> identifier .)
    TIMES           reduce using rule 65 (location -> identifier .)
    DIVIDE          reduce using rule 65 (location -> identifier .)
    MODULO          reduce using rule 65 (location -> identifier .)
    PLUS            reduce using rule 65 (location -> identifier .)
    MINUS           reduce using rule 65 (location -> identifier .)
    CONCAT          reduce using rule 65 (location -> identifier .)
    AND             reduce using rule 65 (location -> identifier .)
    OR              reduce using rule 65 (location -> identifier .)
    EQUAL           reduce using rule 65 (location -> identifier .)
    NOTEQ           reduce using rule 65 (location -> identifier .)
    GREATER         reduce using rule 65 (location -> identifier .)
    GTEQUAL         reduce using rule 65 (location -> identifier .)
    LESS            reduce using rule 65 (location -> identifier .)
    LTEQUAL         reduce using rule 65 (location -> identifier .)
    IN              reduce using rule 65 (location -> identifier .)
    COLON           reduce using rule 65 (location -> identifier .)
    LBRACKET        shift and go to state 125

  ! LBRACKET        [ reduce using rule 65 (location -> identifier .) ]


state 118

    (62) index_mode -> discrete_mode .
    (50) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    COMMA           reduce using rule 62 (index_mode -> discrete_mode .)
    RBRACKET        reduce using rule 62 (index_mode -> discrete_mode .)
    LPAREN          shift and go to state 64


state 119

    (63) index_mode -> literal_range .

    COMMA           reduce using rule 63 (index_mode -> literal_range .)
    RBRACKET        reduce using rule 63 (index_mode -> literal_range .)


state 120

    (59) array_mode -> ARRAY LBRACKET index_mode_list . RBRACKET element_mode

    RBRACKET        shift and go to state 158


state 121

    (60) index_mode_list -> index_mode .
    (61) index_mode_list -> index_mode . COMMA index_mode_list

    RBRACKET        reduce using rule 60 (index_mode_list -> index_mode .)
    COMMA           shift and go to state 159


state 122

    (106) referenced_location -> ARROW array_location .
    (71) dereferenced_reference -> array_location . ARROW
    (77) array_element -> array_location . LBRACKET expression_list RBRACKET
    (80) array_slice -> array_location . LBRACKET lower_bound COLON upper_bound RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    TIMES           reduce using rule 106 (referenced_location -> ARROW array_location .)
    DIVIDE          reduce using rule 106 (referenced_location -> ARROW array_location .)
    MODULO          reduce using rule 106 (referenced_location -> ARROW array_location .)
    PLUS            reduce using rule 106 (referenced_location -> ARROW array_location .)
    MINUS           reduce using rule 106 (referenced_location -> ARROW array_location .)
    CONCAT          reduce using rule 106 (referenced_location -> ARROW array_location .)
    AND             reduce using rule 106 (referenced_location -> ARROW array_location .)
    OR              reduce using rule 106 (referenced_location -> ARROW array_location .)
    EQUAL           reduce using rule 106 (referenced_location -> ARROW array_location .)
    NOTEQ           reduce using rule 106 (referenced_location -> ARROW array_location .)
    GREATER         reduce using rule 106 (referenced_location -> ARROW array_location .)
    GTEQUAL         reduce using rule 106 (referenced_location -> ARROW array_location .)
    LESS            reduce using rule 106 (referenced_location -> ARROW array_location .)
    LTEQUAL         reduce using rule 106 (referenced_location -> ARROW array_location .)
    IN              reduce using rule 106 (referenced_location -> ARROW array_location .)
    COMMA           reduce using rule 106 (referenced_location -> ARROW array_location .)
    SEMI            reduce using rule 106 (referenced_location -> ARROW array_location .)
    COLON           reduce using rule 106 (referenced_location -> ARROW array_location .)
    THEN            reduce using rule 106 (referenced_location -> ARROW array_location .)
    RBRACKET        reduce using rule 106 (referenced_location -> ARROW array_location .)
    RPAREN          reduce using rule 106 (referenced_location -> ARROW array_location .)
    ELSE            reduce using rule 106 (referenced_location -> ARROW array_location .)
    ELSIF           reduce using rule 106 (referenced_location -> ARROW array_location .)
    FI              reduce using rule 106 (referenced_location -> ARROW array_location .)
    ARROW           shift and go to state 123
    LBRACKET        shift and go to state 124

  ! LBRACKET        [ reduce using rule 106 (referenced_location -> ARROW array_location .) ]


state 123

    (71) dereferenced_reference -> array_location ARROW .

    ARROW           reduce using rule 71 (dereferenced_reference -> array_location ARROW .)
    LBRACKET        reduce using rule 71 (dereferenced_reference -> array_location ARROW .)
    TIMES           reduce using rule 71 (dereferenced_reference -> array_location ARROW .)
    DIVIDE          reduce using rule 71 (dereferenced_reference -> array_location ARROW .)
    MODULO          reduce using rule 71 (dereferenced_reference -> array_location ARROW .)
    PLUS            reduce using rule 71 (dereferenced_reference -> array_location ARROW .)
    MINUS           reduce using rule 71 (dereferenced_reference -> array_location ARROW .)
    CONCAT          reduce using rule 71 (dereferenced_reference -> array_location ARROW .)
    AND             reduce using rule 71 (dereferenced_reference -> array_location ARROW .)
    OR              reduce using rule 71 (dereferenced_reference -> array_location ARROW .)
    EQUAL           reduce using rule 71 (dereferenced_reference -> array_location ARROW .)
    NOTEQ           reduce using rule 71 (dereferenced_reference -> array_location ARROW .)
    GREATER         reduce using rule 71 (dereferenced_reference -> array_location ARROW .)
    GTEQUAL         reduce using rule 71 (dereferenced_reference -> array_location ARROW .)
    LESS            reduce using rule 71 (dereferenced_reference -> array_location ARROW .)
    LTEQUAL         reduce using rule 71 (dereferenced_reference -> array_location ARROW .)
    IN              reduce using rule 71 (dereferenced_reference -> array_location ARROW .)
    RBRACKET        reduce using rule 71 (dereferenced_reference -> array_location ARROW .)
    COMMA           reduce using rule 71 (dereferenced_reference -> array_location ARROW .)
    COLON           reduce using rule 71 (dereferenced_reference -> array_location ARROW .)
    SEMI            reduce using rule 71 (dereferenced_reference -> array_location ARROW .)
    THEN            reduce using rule 71 (dereferenced_reference -> array_location ARROW .)
    RPAREN          reduce using rule 71 (dereferenced_reference -> array_location ARROW .)
    ELSE            reduce using rule 71 (dereferenced_reference -> array_location ARROW .)
    ELSIF           reduce using rule 71 (dereferenced_reference -> array_location ARROW .)
    FI              reduce using rule 71 (dereferenced_reference -> array_location ARROW .)


state 124

    (77) array_element -> array_location LBRACKET . expression_list RBRACKET
    (80) array_slice -> array_location LBRACKET . lower_bound COLON upper_bound RBRACKET
    (78) expression_list -> . expression
    (79) expression_list -> . expression COMMA expression_list
    (52) lower_bound -> . expression
    (82) expression -> . operand0
    (83) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (84) conditional_expression -> . IF expression then_expression else_expression FI
    (85) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (92) operand1 -> . operand2
    (93) operand1 -> . operand1 operator2 operand2
    (94) operand2 -> . operand3
    (95) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (96) operand3 -> . monadic_operator operand4
    (97) operand3 -> . operand4
    (104) monadic_operator -> . MINUS
    (105) monadic_operator -> . NOT
    (98) operand4 -> . array_location
    (99) operand4 -> . referenced_location
    (100) operand4 -> . primitive_value
    (81) array_location -> . location
    (106) referenced_location -> . ARROW array_location
    (123) primitive_value -> . literal
    (65) location -> . identifier
    (66) location -> . dereferenced_reference
    (67) location -> . string_element
    (68) location -> . string_slice
    (69) location -> . array_element
    (70) location -> . array_slice
    (124) literal -> . integer_literal
    (125) literal -> . boolean_literal
    (126) literal -> . character_literal
    (127) literal -> . empty_literal
    (128) literal -> . character_string_literal
    (22) identifier -> . ID
    (71) dereferenced_reference -> . array_location ARROW
    (72) string_element -> . identifier LBRACKET start_element LBRACKET
    (74) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (77) array_element -> . array_location LBRACKET expression_list RBRACKET
    (80) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (129) integer_literal -> . ICONST
    (130) boolean_literal -> . TRUE
    (131) boolean_literal -> . FALSE
    (132) character_literal -> . CCONST
    (133) empty_literal -> . NULL
    (134) character_string_literal -> . SCONST

    IF              shift and go to state 99
    MINUS           shift and go to state 90
    NOT             shift and go to state 96
    ARROW           shift and go to state 72
    ID              shift and go to state 15
    ICONST          shift and go to state 89
    TRUE            shift and go to state 87
    FALSE           shift and go to state 80
    CCONST          shift and go to state 91
    NULL            shift and go to state 97
    SCONST          shift and go to state 95

    monadic_operator               shift and go to state 93
    character_literal              shift and go to state 85
    character_string_literal       shift and go to state 94
    identifier                     shift and go to state 84
    array_location                 shift and go to state 73
    literal                        shift and go to state 74
    dereferenced_reference         shift and go to state 75
    lower_bound                    shift and go to state 161
    operand3                       shift and go to state 76
    integer_literal                shift and go to state 77
    array_slice                    shift and go to state 83
    primitive_value                shift and go to state 78
    referenced_location            shift and go to state 79
    string_slice                   shift and go to state 98
    string_element                 shift and go to state 81
    location                       shift and go to state 82
    expression_list                shift and go to state 162
    conditional_expression         shift and go to state 100
    operand2                       shift and go to state 103
    empty_literal                  shift and go to state 101
    operand1                       shift and go to state 86
    operand4                       shift and go to state 102
    expression                     shift and go to state 160
    boolean_literal                shift and go to state 104
    operand0                       shift and go to state 105
    array_element                  shift and go to state 92

state 125

    (72) string_element -> identifier LBRACKET . start_element LBRACKET
    (74) string_slice -> identifier LBRACKET . left_element COLON right_element RBRACKET
    (73) start_element -> . expression
    (75) left_element -> . expression
    (82) expression -> . operand0
    (83) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (84) conditional_expression -> . IF expression then_expression else_expression FI
    (85) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (92) operand1 -> . operand2
    (93) operand1 -> . operand1 operator2 operand2
    (94) operand2 -> . operand3
    (95) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (96) operand3 -> . monadic_operator operand4
    (97) operand3 -> . operand4
    (104) monadic_operator -> . MINUS
    (105) monadic_operator -> . NOT
    (98) operand4 -> . array_location
    (99) operand4 -> . referenced_location
    (100) operand4 -> . primitive_value
    (81) array_location -> . location
    (106) referenced_location -> . ARROW array_location
    (123) primitive_value -> . literal
    (65) location -> . identifier
    (66) location -> . dereferenced_reference
    (67) location -> . string_element
    (68) location -> . string_slice
    (69) location -> . array_element
    (70) location -> . array_slice
    (124) literal -> . integer_literal
    (125) literal -> . boolean_literal
    (126) literal -> . character_literal
    (127) literal -> . empty_literal
    (128) literal -> . character_string_literal
    (22) identifier -> . ID
    (71) dereferenced_reference -> . array_location ARROW
    (72) string_element -> . identifier LBRACKET start_element LBRACKET
    (74) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (77) array_element -> . array_location LBRACKET expression_list RBRACKET
    (80) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (129) integer_literal -> . ICONST
    (130) boolean_literal -> . TRUE
    (131) boolean_literal -> . FALSE
    (132) character_literal -> . CCONST
    (133) empty_literal -> . NULL
    (134) character_string_literal -> . SCONST

    IF              shift and go to state 99
    MINUS           shift and go to state 90
    NOT             shift and go to state 96
    ARROW           shift and go to state 72
    ID              shift and go to state 15
    ICONST          shift and go to state 89
    TRUE            shift and go to state 87
    FALSE           shift and go to state 80
    CCONST          shift and go to state 91
    NULL            shift and go to state 97
    SCONST          shift and go to state 95

    monadic_operator               shift and go to state 93
    character_literal              shift and go to state 85
    character_string_literal       shift and go to state 94
    start_element                  shift and go to state 165
    identifier                     shift and go to state 84
    array_location                 shift and go to state 73
    literal                        shift and go to state 74
    dereferenced_reference         shift and go to state 75
    operand3                       shift and go to state 76
    left_element                   shift and go to state 163
    integer_literal                shift and go to state 77
    location                       shift and go to state 82
    primitive_value                shift and go to state 78
    referenced_location            shift and go to state 79
    string_slice                   shift and go to state 98
    string_element                 shift and go to state 81
    conditional_expression         shift and go to state 100
    operand2                       shift and go to state 103
    empty_literal                  shift and go to state 101
    operand1                       shift and go to state 86
    operand4                       shift and go to state 102
    expression                     shift and go to state 164
    array_slice                    shift and go to state 83
    boolean_literal                shift and go to state 104
    operand0                       shift and go to state 105
    array_element                  shift and go to state 92

state 126

    (111) arithmetic_additive_operator -> PLUS .

    MINUS           reduce using rule 111 (arithmetic_additive_operator -> PLUS .)
    NOT             reduce using rule 111 (arithmetic_additive_operator -> PLUS .)
    ARROW           reduce using rule 111 (arithmetic_additive_operator -> PLUS .)
    ID              reduce using rule 111 (arithmetic_additive_operator -> PLUS .)
    ICONST          reduce using rule 111 (arithmetic_additive_operator -> PLUS .)
    TRUE            reduce using rule 111 (arithmetic_additive_operator -> PLUS .)
    FALSE           reduce using rule 111 (arithmetic_additive_operator -> PLUS .)
    CCONST          reduce using rule 111 (arithmetic_additive_operator -> PLUS .)
    NULL            reduce using rule 111 (arithmetic_additive_operator -> PLUS .)
    SCONST          reduce using rule 111 (arithmetic_additive_operator -> PLUS .)


state 127

    (93) operand1 -> operand1 operator2 . operand2
    (94) operand2 -> . operand3
    (95) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (96) operand3 -> . monadic_operator operand4
    (97) operand3 -> . operand4
    (104) monadic_operator -> . MINUS
    (105) monadic_operator -> . NOT
    (98) operand4 -> . array_location
    (99) operand4 -> . referenced_location
    (100) operand4 -> . primitive_value
    (81) array_location -> . location
    (106) referenced_location -> . ARROW array_location
    (123) primitive_value -> . literal
    (65) location -> . identifier
    (66) location -> . dereferenced_reference
    (67) location -> . string_element
    (68) location -> . string_slice
    (69) location -> . array_element
    (70) location -> . array_slice
    (124) literal -> . integer_literal
    (125) literal -> . boolean_literal
    (126) literal -> . character_literal
    (127) literal -> . empty_literal
    (128) literal -> . character_string_literal
    (22) identifier -> . ID
    (71) dereferenced_reference -> . array_location ARROW
    (72) string_element -> . identifier LBRACKET start_element LBRACKET
    (74) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (77) array_element -> . array_location LBRACKET expression_list RBRACKET
    (80) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (129) integer_literal -> . ICONST
    (130) boolean_literal -> . TRUE
    (131) boolean_literal -> . FALSE
    (132) character_literal -> . CCONST
    (133) empty_literal -> . NULL
    (134) character_string_literal -> . SCONST

    MINUS           shift and go to state 90
    NOT             shift and go to state 96
    ARROW           shift and go to state 72
    ID              shift and go to state 15
    ICONST          shift and go to state 89
    TRUE            shift and go to state 87
    FALSE           shift and go to state 80
    CCONST          shift and go to state 91
    NULL            shift and go to state 97
    SCONST          shift and go to state 95

    monadic_operator               shift and go to state 93
    character_string_literal       shift and go to state 94
    identifier                     shift and go to state 84
    literal                        shift and go to state 74
    dereferenced_reference         shift and go to state 75
    operand3                       shift and go to state 76
    integer_literal                shift and go to state 77
    array_slice                    shift and go to state 83
    referenced_location            shift and go to state 79
    string_slice                   shift and go to state 98
    string_element                 shift and go to state 81
    location                       shift and go to state 82
    array_location                 shift and go to state 73
    operand2                       shift and go to state 166
    character_literal              shift and go to state 85
    empty_literal                  shift and go to state 101
    operand4                       shift and go to state 102
    primitive_value                shift and go to state 78
    boolean_literal                shift and go to state 104
    array_element                  shift and go to state 92

state 128

    (109) operator2 -> arithmetic_additive_operator .

    MINUS           reduce using rule 109 (operator2 -> arithmetic_additive_operator .)
    NOT             reduce using rule 109 (operator2 -> arithmetic_additive_operator .)
    ARROW           reduce using rule 109 (operator2 -> arithmetic_additive_operator .)
    ID              reduce using rule 109 (operator2 -> arithmetic_additive_operator .)
    ICONST          reduce using rule 109 (operator2 -> arithmetic_additive_operator .)
    TRUE            reduce using rule 109 (operator2 -> arithmetic_additive_operator .)
    FALSE           reduce using rule 109 (operator2 -> arithmetic_additive_operator .)
    CCONST          reduce using rule 109 (operator2 -> arithmetic_additive_operator .)
    NULL            reduce using rule 109 (operator2 -> arithmetic_additive_operator .)
    SCONST          reduce using rule 109 (operator2 -> arithmetic_additive_operator .)


state 129

    (110) operator2 -> string_concatenation_operator .

    MINUS           reduce using rule 110 (operator2 -> string_concatenation_operator .)
    NOT             reduce using rule 110 (operator2 -> string_concatenation_operator .)
    ARROW           reduce using rule 110 (operator2 -> string_concatenation_operator .)
    ID              reduce using rule 110 (operator2 -> string_concatenation_operator .)
    ICONST          reduce using rule 110 (operator2 -> string_concatenation_operator .)
    TRUE            reduce using rule 110 (operator2 -> string_concatenation_operator .)
    FALSE           reduce using rule 110 (operator2 -> string_concatenation_operator .)
    CCONST          reduce using rule 110 (operator2 -> string_concatenation_operator .)
    NULL            reduce using rule 110 (operator2 -> string_concatenation_operator .)
    SCONST          reduce using rule 110 (operator2 -> string_concatenation_operator .)


state 130

    (113) string_concatenation_operator -> CONCAT .

    MINUS           reduce using rule 113 (string_concatenation_operator -> CONCAT .)
    NOT             reduce using rule 113 (string_concatenation_operator -> CONCAT .)
    ARROW           reduce using rule 113 (string_concatenation_operator -> CONCAT .)
    ID              reduce using rule 113 (string_concatenation_operator -> CONCAT .)
    ICONST          reduce using rule 113 (string_concatenation_operator -> CONCAT .)
    TRUE            reduce using rule 113 (string_concatenation_operator -> CONCAT .)
    FALSE           reduce using rule 113 (string_concatenation_operator -> CONCAT .)
    CCONST          reduce using rule 113 (string_concatenation_operator -> CONCAT .)
    NULL            reduce using rule 113 (string_concatenation_operator -> CONCAT .)
    SCONST          reduce using rule 113 (string_concatenation_operator -> CONCAT .)


state 131

    (112) arithmetic_additive_operator -> MINUS .

    MINUS           reduce using rule 112 (arithmetic_additive_operator -> MINUS .)
    NOT             reduce using rule 112 (arithmetic_additive_operator -> MINUS .)
    ARROW           reduce using rule 112 (arithmetic_additive_operator -> MINUS .)
    ID              reduce using rule 112 (arithmetic_additive_operator -> MINUS .)
    ICONST          reduce using rule 112 (arithmetic_additive_operator -> MINUS .)
    TRUE            reduce using rule 112 (arithmetic_additive_operator -> MINUS .)
    FALSE           reduce using rule 112 (arithmetic_additive_operator -> MINUS .)
    CCONST          reduce using rule 112 (arithmetic_additive_operator -> MINUS .)
    NULL            reduce using rule 112 (arithmetic_additive_operator -> MINUS .)
    SCONST          reduce using rule 112 (arithmetic_additive_operator -> MINUS .)


state 132

    (96) operand3 -> monadic_operator operand4 .

    TIMES           reduce using rule 96 (operand3 -> monadic_operator operand4 .)
    DIVIDE          reduce using rule 96 (operand3 -> monadic_operator operand4 .)
    MODULO          reduce using rule 96 (operand3 -> monadic_operator operand4 .)
    PLUS            reduce using rule 96 (operand3 -> monadic_operator operand4 .)
    MINUS           reduce using rule 96 (operand3 -> monadic_operator operand4 .)
    CONCAT          reduce using rule 96 (operand3 -> monadic_operator operand4 .)
    AND             reduce using rule 96 (operand3 -> monadic_operator operand4 .)
    OR              reduce using rule 96 (operand3 -> monadic_operator operand4 .)
    EQUAL           reduce using rule 96 (operand3 -> monadic_operator operand4 .)
    NOTEQ           reduce using rule 96 (operand3 -> monadic_operator operand4 .)
    GREATER         reduce using rule 96 (operand3 -> monadic_operator operand4 .)
    GTEQUAL         reduce using rule 96 (operand3 -> monadic_operator operand4 .)
    LESS            reduce using rule 96 (operand3 -> monadic_operator operand4 .)
    LTEQUAL         reduce using rule 96 (operand3 -> monadic_operator operand4 .)
    IN              reduce using rule 96 (operand3 -> monadic_operator operand4 .)
    FI              reduce using rule 96 (operand3 -> monadic_operator operand4 .)
    COMMA           reduce using rule 96 (operand3 -> monadic_operator operand4 .)
    SEMI            reduce using rule 96 (operand3 -> monadic_operator operand4 .)
    COLON           reduce using rule 96 (operand3 -> monadic_operator operand4 .)
    THEN            reduce using rule 96 (operand3 -> monadic_operator operand4 .)
    RBRACKET        reduce using rule 96 (operand3 -> monadic_operator operand4 .)
    LBRACKET        reduce using rule 96 (operand3 -> monadic_operator operand4 .)
    RPAREN          reduce using rule 96 (operand3 -> monadic_operator operand4 .)
    ELSE            reduce using rule 96 (operand3 -> monadic_operator operand4 .)
    ELSIF           reduce using rule 96 (operand3 -> monadic_operator operand4 .)


state 133

    (84) conditional_expression -> IF expression . then_expression else_expression FI
    (85) conditional_expression -> IF expression . then_expression elsif_expression else_expression FI
    (86) then_expression -> . THEN expression

    THEN            shift and go to state 167

    then_expression                shift and go to state 168

state 134

    (102) arithmetic_multiplicative_operator -> DIVIDE .

    MINUS           reduce using rule 102 (arithmetic_multiplicative_operator -> DIVIDE .)
    NOT             reduce using rule 102 (arithmetic_multiplicative_operator -> DIVIDE .)
    ARROW           reduce using rule 102 (arithmetic_multiplicative_operator -> DIVIDE .)
    ID              reduce using rule 102 (arithmetic_multiplicative_operator -> DIVIDE .)
    ICONST          reduce using rule 102 (arithmetic_multiplicative_operator -> DIVIDE .)
    TRUE            reduce using rule 102 (arithmetic_multiplicative_operator -> DIVIDE .)
    FALSE           reduce using rule 102 (arithmetic_multiplicative_operator -> DIVIDE .)
    CCONST          reduce using rule 102 (arithmetic_multiplicative_operator -> DIVIDE .)
    NULL            reduce using rule 102 (arithmetic_multiplicative_operator -> DIVIDE .)
    SCONST          reduce using rule 102 (arithmetic_multiplicative_operator -> DIVIDE .)


state 135

    (95) operand2 -> operand2 arithmetic_multiplicative_operator . operand3
    (96) operand3 -> . monadic_operator operand4
    (97) operand3 -> . operand4
    (104) monadic_operator -> . MINUS
    (105) monadic_operator -> . NOT
    (98) operand4 -> . array_location
    (99) operand4 -> . referenced_location
    (100) operand4 -> . primitive_value
    (81) array_location -> . location
    (106) referenced_location -> . ARROW array_location
    (123) primitive_value -> . literal
    (65) location -> . identifier
    (66) location -> . dereferenced_reference
    (67) location -> . string_element
    (68) location -> . string_slice
    (69) location -> . array_element
    (70) location -> . array_slice
    (124) literal -> . integer_literal
    (125) literal -> . boolean_literal
    (126) literal -> . character_literal
    (127) literal -> . empty_literal
    (128) literal -> . character_string_literal
    (22) identifier -> . ID
    (71) dereferenced_reference -> . array_location ARROW
    (72) string_element -> . identifier LBRACKET start_element LBRACKET
    (74) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (77) array_element -> . array_location LBRACKET expression_list RBRACKET
    (80) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (129) integer_literal -> . ICONST
    (130) boolean_literal -> . TRUE
    (131) boolean_literal -> . FALSE
    (132) character_literal -> . CCONST
    (133) empty_literal -> . NULL
    (134) character_string_literal -> . SCONST

    MINUS           shift and go to state 90
    NOT             shift and go to state 96
    ARROW           shift and go to state 72
    ID              shift and go to state 15
    ICONST          shift and go to state 89
    TRUE            shift and go to state 87
    FALSE           shift and go to state 80
    CCONST          shift and go to state 91
    NULL            shift and go to state 97
    SCONST          shift and go to state 95

    monadic_operator               shift and go to state 93
    character_string_literal       shift and go to state 94
    identifier                     shift and go to state 84
    array_location                 shift and go to state 73
    literal                        shift and go to state 74
    dereferenced_reference         shift and go to state 75
    operand3                       shift and go to state 169
    integer_literal                shift and go to state 77
    array_slice                    shift and go to state 83
    referenced_location            shift and go to state 79
    string_slice                   shift and go to state 98
    string_element                 shift and go to state 81
    location                       shift and go to state 82
    character_literal              shift and go to state 85
    empty_literal                  shift and go to state 101
    operand4                       shift and go to state 102
    primitive_value                shift and go to state 78
    boolean_literal                shift and go to state 104
    array_element                  shift and go to state 92

state 136

    (103) arithmetic_multiplicative_operator -> MODULO .

    MINUS           reduce using rule 103 (arithmetic_multiplicative_operator -> MODULO .)
    NOT             reduce using rule 103 (arithmetic_multiplicative_operator -> MODULO .)
    ARROW           reduce using rule 103 (arithmetic_multiplicative_operator -> MODULO .)
    ID              reduce using rule 103 (arithmetic_multiplicative_operator -> MODULO .)
    ICONST          reduce using rule 103 (arithmetic_multiplicative_operator -> MODULO .)
    TRUE            reduce using rule 103 (arithmetic_multiplicative_operator -> MODULO .)
    FALSE           reduce using rule 103 (arithmetic_multiplicative_operator -> MODULO .)
    CCONST          reduce using rule 103 (arithmetic_multiplicative_operator -> MODULO .)
    NULL            reduce using rule 103 (arithmetic_multiplicative_operator -> MODULO .)
    SCONST          reduce using rule 103 (arithmetic_multiplicative_operator -> MODULO .)


state 137

    (101) arithmetic_multiplicative_operator -> TIMES .

    MINUS           reduce using rule 101 (arithmetic_multiplicative_operator -> TIMES .)
    NOT             reduce using rule 101 (arithmetic_multiplicative_operator -> TIMES .)
    ARROW           reduce using rule 101 (arithmetic_multiplicative_operator -> TIMES .)
    ID              reduce using rule 101 (arithmetic_multiplicative_operator -> TIMES .)
    ICONST          reduce using rule 101 (arithmetic_multiplicative_operator -> TIMES .)
    TRUE            reduce using rule 101 (arithmetic_multiplicative_operator -> TIMES .)
    FALSE           reduce using rule 101 (arithmetic_multiplicative_operator -> TIMES .)
    CCONST          reduce using rule 101 (arithmetic_multiplicative_operator -> TIMES .)
    NULL            reduce using rule 101 (arithmetic_multiplicative_operator -> TIMES .)
    SCONST          reduce using rule 101 (arithmetic_multiplicative_operator -> TIMES .)


state 138

    (118) relational_operator -> GREATER .

    MINUS           reduce using rule 118 (relational_operator -> GREATER .)
    NOT             reduce using rule 118 (relational_operator -> GREATER .)
    ARROW           reduce using rule 118 (relational_operator -> GREATER .)
    ID              reduce using rule 118 (relational_operator -> GREATER .)
    ICONST          reduce using rule 118 (relational_operator -> GREATER .)
    TRUE            reduce using rule 118 (relational_operator -> GREATER .)
    FALSE           reduce using rule 118 (relational_operator -> GREATER .)
    CCONST          reduce using rule 118 (relational_operator -> GREATER .)
    NULL            reduce using rule 118 (relational_operator -> GREATER .)
    SCONST          reduce using rule 118 (relational_operator -> GREATER .)


state 139

    (114) relational_operator -> AND .

    MINUS           reduce using rule 114 (relational_operator -> AND .)
    NOT             reduce using rule 114 (relational_operator -> AND .)
    ARROW           reduce using rule 114 (relational_operator -> AND .)
    ID              reduce using rule 114 (relational_operator -> AND .)
    ICONST          reduce using rule 114 (relational_operator -> AND .)
    TRUE            reduce using rule 114 (relational_operator -> AND .)
    FALSE           reduce using rule 114 (relational_operator -> AND .)
    CCONST          reduce using rule 114 (relational_operator -> AND .)
    NULL            reduce using rule 114 (relational_operator -> AND .)
    SCONST          reduce using rule 114 (relational_operator -> AND .)


state 140

    (119) relational_operator -> GTEQUAL .

    MINUS           reduce using rule 119 (relational_operator -> GTEQUAL .)
    NOT             reduce using rule 119 (relational_operator -> GTEQUAL .)
    ARROW           reduce using rule 119 (relational_operator -> GTEQUAL .)
    ID              reduce using rule 119 (relational_operator -> GTEQUAL .)
    ICONST          reduce using rule 119 (relational_operator -> GTEQUAL .)
    TRUE            reduce using rule 119 (relational_operator -> GTEQUAL .)
    FALSE           reduce using rule 119 (relational_operator -> GTEQUAL .)
    CCONST          reduce using rule 119 (relational_operator -> GTEQUAL .)
    NULL            reduce using rule 119 (relational_operator -> GTEQUAL .)
    SCONST          reduce using rule 119 (relational_operator -> GTEQUAL .)


state 141

    (115) relational_operator -> OR .

    MINUS           reduce using rule 115 (relational_operator -> OR .)
    NOT             reduce using rule 115 (relational_operator -> OR .)
    ARROW           reduce using rule 115 (relational_operator -> OR .)
    ID              reduce using rule 115 (relational_operator -> OR .)
    ICONST          reduce using rule 115 (relational_operator -> OR .)
    TRUE            reduce using rule 115 (relational_operator -> OR .)
    FALSE           reduce using rule 115 (relational_operator -> OR .)
    CCONST          reduce using rule 115 (relational_operator -> OR .)
    NULL            reduce using rule 115 (relational_operator -> OR .)
    SCONST          reduce using rule 115 (relational_operator -> OR .)


state 142

    (108) operator1 -> membership_operator .

    MINUS           reduce using rule 108 (operator1 -> membership_operator .)
    NOT             reduce using rule 108 (operator1 -> membership_operator .)
    ARROW           reduce using rule 108 (operator1 -> membership_operator .)
    ID              reduce using rule 108 (operator1 -> membership_operator .)
    ICONST          reduce using rule 108 (operator1 -> membership_operator .)
    TRUE            reduce using rule 108 (operator1 -> membership_operator .)
    FALSE           reduce using rule 108 (operator1 -> membership_operator .)
    CCONST          reduce using rule 108 (operator1 -> membership_operator .)
    NULL            reduce using rule 108 (operator1 -> membership_operator .)
    SCONST          reduce using rule 108 (operator1 -> membership_operator .)


state 143

    (120) relational_operator -> LESS .

    MINUS           reduce using rule 120 (relational_operator -> LESS .)
    NOT             reduce using rule 120 (relational_operator -> LESS .)
    ARROW           reduce using rule 120 (relational_operator -> LESS .)
    ID              reduce using rule 120 (relational_operator -> LESS .)
    ICONST          reduce using rule 120 (relational_operator -> LESS .)
    TRUE            reduce using rule 120 (relational_operator -> LESS .)
    FALSE           reduce using rule 120 (relational_operator -> LESS .)
    CCONST          reduce using rule 120 (relational_operator -> LESS .)
    NULL            reduce using rule 120 (relational_operator -> LESS .)
    SCONST          reduce using rule 120 (relational_operator -> LESS .)


state 144

    (91) operand0 -> operand0 operator1 . operand1
    (92) operand1 -> . operand2
    (93) operand1 -> . operand1 operator2 operand2
    (94) operand2 -> . operand3
    (95) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (96) operand3 -> . monadic_operator operand4
    (97) operand3 -> . operand4
    (104) monadic_operator -> . MINUS
    (105) monadic_operator -> . NOT
    (98) operand4 -> . array_location
    (99) operand4 -> . referenced_location
    (100) operand4 -> . primitive_value
    (81) array_location -> . location
    (106) referenced_location -> . ARROW array_location
    (123) primitive_value -> . literal
    (65) location -> . identifier
    (66) location -> . dereferenced_reference
    (67) location -> . string_element
    (68) location -> . string_slice
    (69) location -> . array_element
    (70) location -> . array_slice
    (124) literal -> . integer_literal
    (125) literal -> . boolean_literal
    (126) literal -> . character_literal
    (127) literal -> . empty_literal
    (128) literal -> . character_string_literal
    (22) identifier -> . ID
    (71) dereferenced_reference -> . array_location ARROW
    (72) string_element -> . identifier LBRACKET start_element LBRACKET
    (74) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (77) array_element -> . array_location LBRACKET expression_list RBRACKET
    (80) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (129) integer_literal -> . ICONST
    (130) boolean_literal -> . TRUE
    (131) boolean_literal -> . FALSE
    (132) character_literal -> . CCONST
    (133) empty_literal -> . NULL
    (134) character_string_literal -> . SCONST

    MINUS           shift and go to state 90
    NOT             shift and go to state 96
    ARROW           shift and go to state 72
    ID              shift and go to state 15
    ICONST          shift and go to state 89
    TRUE            shift and go to state 87
    FALSE           shift and go to state 80
    CCONST          shift and go to state 91
    NULL            shift and go to state 97
    SCONST          shift and go to state 95

    monadic_operator               shift and go to state 93
    character_literal              shift and go to state 85
    character_string_literal       shift and go to state 94
    identifier                     shift and go to state 84
    literal                        shift and go to state 74
    dereferenced_reference         shift and go to state 75
    operand3                       shift and go to state 76
    integer_literal                shift and go to state 77
    array_slice                    shift and go to state 83
    referenced_location            shift and go to state 79
    string_slice                   shift and go to state 98
    string_element                 shift and go to state 81
    location                       shift and go to state 82
    operand2                       shift and go to state 103
    array_location                 shift and go to state 73
    empty_literal                  shift and go to state 101
    operand1                       shift and go to state 170
    operand4                       shift and go to state 102
    primitive_value                shift and go to state 78
    boolean_literal                shift and go to state 104
    array_element                  shift and go to state 92

state 145

    (107) operator1 -> relational_operator .

    MINUS           reduce using rule 107 (operator1 -> relational_operator .)
    NOT             reduce using rule 107 (operator1 -> relational_operator .)
    ARROW           reduce using rule 107 (operator1 -> relational_operator .)
    ID              reduce using rule 107 (operator1 -> relational_operator .)
    ICONST          reduce using rule 107 (operator1 -> relational_operator .)
    TRUE            reduce using rule 107 (operator1 -> relational_operator .)
    FALSE           reduce using rule 107 (operator1 -> relational_operator .)
    CCONST          reduce using rule 107 (operator1 -> relational_operator .)
    NULL            reduce using rule 107 (operator1 -> relational_operator .)
    SCONST          reduce using rule 107 (operator1 -> relational_operator .)


state 146

    (117) relational_operator -> NOTEQ .

    MINUS           reduce using rule 117 (relational_operator -> NOTEQ .)
    NOT             reduce using rule 117 (relational_operator -> NOTEQ .)
    ARROW           reduce using rule 117 (relational_operator -> NOTEQ .)
    ID              reduce using rule 117 (relational_operator -> NOTEQ .)
    ICONST          reduce using rule 117 (relational_operator -> NOTEQ .)
    TRUE            reduce using rule 117 (relational_operator -> NOTEQ .)
    FALSE           reduce using rule 117 (relational_operator -> NOTEQ .)
    CCONST          reduce using rule 117 (relational_operator -> NOTEQ .)
    NULL            reduce using rule 117 (relational_operator -> NOTEQ .)
    SCONST          reduce using rule 117 (relational_operator -> NOTEQ .)


state 147

    (116) relational_operator -> EQUAL .

    MINUS           reduce using rule 116 (relational_operator -> EQUAL .)
    NOT             reduce using rule 116 (relational_operator -> EQUAL .)
    ARROW           reduce using rule 116 (relational_operator -> EQUAL .)
    ID              reduce using rule 116 (relational_operator -> EQUAL .)
    ICONST          reduce using rule 116 (relational_operator -> EQUAL .)
    TRUE            reduce using rule 116 (relational_operator -> EQUAL .)
    FALSE           reduce using rule 116 (relational_operator -> EQUAL .)
    CCONST          reduce using rule 116 (relational_operator -> EQUAL .)
    NULL            reduce using rule 116 (relational_operator -> EQUAL .)
    SCONST          reduce using rule 116 (relational_operator -> EQUAL .)


state 148

    (122) membership_operator -> IN .

    MINUS           reduce using rule 122 (membership_operator -> IN .)
    NOT             reduce using rule 122 (membership_operator -> IN .)
    ARROW           reduce using rule 122 (membership_operator -> IN .)
    ID              reduce using rule 122 (membership_operator -> IN .)
    ICONST          reduce using rule 122 (membership_operator -> IN .)
    TRUE            reduce using rule 122 (membership_operator -> IN .)
    FALSE           reduce using rule 122 (membership_operator -> IN .)
    CCONST          reduce using rule 122 (membership_operator -> IN .)
    NULL            reduce using rule 122 (membership_operator -> IN .)
    SCONST          reduce using rule 122 (membership_operator -> IN .)


state 149

    (121) relational_operator -> LTEQUAL .

    MINUS           reduce using rule 121 (relational_operator -> LTEQUAL .)
    NOT             reduce using rule 121 (relational_operator -> LTEQUAL .)
    ARROW           reduce using rule 121 (relational_operator -> LTEQUAL .)
    ID              reduce using rule 121 (relational_operator -> LTEQUAL .)
    ICONST          reduce using rule 121 (relational_operator -> LTEQUAL .)
    TRUE            reduce using rule 121 (relational_operator -> LTEQUAL .)
    FALSE           reduce using rule 121 (relational_operator -> LTEQUAL .)
    CCONST          reduce using rule 121 (relational_operator -> LTEQUAL .)
    NULL            reduce using rule 121 (relational_operator -> LTEQUAL .)
    SCONST          reduce using rule 121 (relational_operator -> LTEQUAL .)


state 150

    (12) synonym_definition -> identifier_list mode ASSIGN expression .

    COMMA           reduce using rule 12 (synonym_definition -> identifier_list mode ASSIGN expression .)
    SEMI            reduce using rule 12 (synonym_definition -> identifier_list mode ASSIGN expression .)


state 151

    (31) formal_parameter_list -> formal_parameter COMMA . formal_parameter
    (32) formal_parameter -> . identifier_list mode LOC
    (33) formal_parameter -> . identifier_list mode
    (20) identifier_list -> . identifier
    (21) identifier_list -> . identifier COMMA identifier_list
    (22) identifier -> . ID

    ID              shift and go to state 15

    identifier                     shift and go to state 16
    formal_parameter               shift and go to state 171
    identifier_list                shift and go to state 109

state 152

    (28) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN . result_spec SEMI statement_nullable END SEMI
    (29) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN . SEMI statement_nullable END SEMI
    (34) result_spec -> . RETURNS LPAREN mode LOC RPAREN
    (35) result_spec -> . RETURNS LPAREN mode RPAREN

    SEMI            shift and go to state 174
    RETURNS         shift and go to state 172

    result_spec                    shift and go to state 173

state 153

    (32) formal_parameter -> identifier_list mode . LOC
    (33) formal_parameter -> identifier_list mode .

    LOC             shift and go to state 175
    COMMA           reduce using rule 33 (formal_parameter -> identifier_list mode .)
    RPAREN          reduce using rule 33 (formal_parameter -> identifier_list mode .)


state 154

    (50) discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .

    LPAREN          reduce using rule 50 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    ASSIGN          reduce using rule 50 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    COMMA           reduce using rule 50 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    SEMI            reduce using rule 50 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    RBRACKET        reduce using rule 50 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    LOC             reduce using rule 50 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    RPAREN          reduce using rule 50 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)


state 155

    (51) literal_range -> lower_bound COLON . upper_bound
    (53) upper_bound -> . expression
    (82) expression -> . operand0
    (83) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (84) conditional_expression -> . IF expression then_expression else_expression FI
    (85) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (92) operand1 -> . operand2
    (93) operand1 -> . operand1 operator2 operand2
    (94) operand2 -> . operand3
    (95) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (96) operand3 -> . monadic_operator operand4
    (97) operand3 -> . operand4
    (104) monadic_operator -> . MINUS
    (105) monadic_operator -> . NOT
    (98) operand4 -> . array_location
    (99) operand4 -> . referenced_location
    (100) operand4 -> . primitive_value
    (81) array_location -> . location
    (106) referenced_location -> . ARROW array_location
    (123) primitive_value -> . literal
    (65) location -> . identifier
    (66) location -> . dereferenced_reference
    (67) location -> . string_element
    (68) location -> . string_slice
    (69) location -> . array_element
    (70) location -> . array_slice
    (124) literal -> . integer_literal
    (125) literal -> . boolean_literal
    (126) literal -> . character_literal
    (127) literal -> . empty_literal
    (128) literal -> . character_string_literal
    (22) identifier -> . ID
    (71) dereferenced_reference -> . array_location ARROW
    (72) string_element -> . identifier LBRACKET start_element LBRACKET
    (74) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (77) array_element -> . array_location LBRACKET expression_list RBRACKET
    (80) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (129) integer_literal -> . ICONST
    (130) boolean_literal -> . TRUE
    (131) boolean_literal -> . FALSE
    (132) character_literal -> . CCONST
    (133) empty_literal -> . NULL
    (134) character_string_literal -> . SCONST

    IF              shift and go to state 99
    MINUS           shift and go to state 90
    NOT             shift and go to state 96
    ARROW           shift and go to state 72
    ID              shift and go to state 15
    ICONST          shift and go to state 89
    TRUE            shift and go to state 87
    FALSE           shift and go to state 80
    CCONST          shift and go to state 91
    NULL            shift and go to state 97
    SCONST          shift and go to state 95

    monadic_operator               shift and go to state 93
    character_literal              shift and go to state 85
    character_string_literal       shift and go to state 94
    identifier                     shift and go to state 84
    array_location                 shift and go to state 73
    literal                        shift and go to state 74
    dereferenced_reference         shift and go to state 75
    operand3                       shift and go to state 76
    integer_literal                shift and go to state 77
    array_slice                    shift and go to state 83
    primitive_value                shift and go to state 78
    referenced_location            shift and go to state 79
    string_slice                   shift and go to state 98
    string_element                 shift and go to state 81
    location                       shift and go to state 82
    conditional_expression         shift and go to state 100
    operand2                       shift and go to state 103
    upper_bound                    shift and go to state 177
    empty_literal                  shift and go to state 101
    operand1                       shift and go to state 86
    operand4                       shift and go to state 102
    expression                     shift and go to state 176
    boolean_literal                shift and go to state 104
    operand0                       shift and go to state 105
    array_element                  shift and go to state 92

state 156

    (57) string_mode -> CHARS LBRACKET string_length RBRACKET .

    ASSIGN          reduce using rule 57 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    COMMA           reduce using rule 57 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    SEMI            reduce using rule 57 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    LOC             reduce using rule 57 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    RPAREN          reduce using rule 57 (string_mode -> CHARS LBRACKET string_length RBRACKET .)


state 157

    (49) discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .

    LPAREN          reduce using rule 49 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    ASSIGN          reduce using rule 49 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    COMMA           reduce using rule 49 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    SEMI            reduce using rule 49 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    RBRACKET        reduce using rule 49 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    LOC             reduce using rule 49 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    RPAREN          reduce using rule 49 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)


state 158

    (59) array_mode -> ARRAY LBRACKET index_mode_list RBRACKET . element_mode
    (64) element_mode -> . mode
    (36) mode -> . mode_name
    (37) mode -> . discrete_mode
    (38) mode -> . reference_mode
    (39) mode -> . composite_mode
    (40) mode_name -> . identifier
    (41) discrete_mode -> . integer_mode
    (42) discrete_mode -> . boolean_mode
    (43) discrete_mode -> . character_mode
    (44) discrete_mode -> . discrete_range_mode
    (54) reference_mode -> . REF mode
    (55) composite_mode -> . string_mode
    (56) composite_mode -> . array_mode
    (22) identifier -> . ID
    (46) integer_mode -> . INT
    (47) boolean_mode -> . BOOL
    (48) character_mode -> . CHAR
    (49) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (50) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (57) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (59) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (45) discrete_mode_name -> . identifier

    REF             shift and go to state 38
    ID              shift and go to state 15
    INT             shift and go to state 39
    BOOL            shift and go to state 53
    CHAR            shift and go to state 51
    CHARS           shift and go to state 43
    ARRAY           shift and go to state 52

    discrete_range_mode            shift and go to state 45
    identifier                     shift and go to state 36
    composite_mode                 shift and go to state 46
    discrete_mode                  shift and go to state 37
    array_mode                     shift and go to state 42
    discrete_mode_name             shift and go to state 48
    mode                           shift and go to state 178
    boolean_mode                   shift and go to state 50
    mode_name                      shift and go to state 41
    reference_mode                 shift and go to state 35
    element_mode                   shift and go to state 179
    integer_mode                   shift and go to state 40
    string_mode                    shift and go to state 44
    character_mode                 shift and go to state 47

state 159

    (61) index_mode_list -> index_mode COMMA . index_mode_list
    (60) index_mode_list -> . index_mode
    (61) index_mode_list -> . index_mode COMMA index_mode_list
    (62) index_mode -> . discrete_mode
    (63) index_mode -> . literal_range
    (41) discrete_mode -> . integer_mode
    (42) discrete_mode -> . boolean_mode
    (43) discrete_mode -> . character_mode
    (44) discrete_mode -> . discrete_range_mode
    (51) literal_range -> . lower_bound COLON upper_bound
    (46) integer_mode -> . INT
    (47) boolean_mode -> . BOOL
    (48) character_mode -> . CHAR
    (49) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (50) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (52) lower_bound -> . expression
    (45) discrete_mode_name -> . identifier
    (82) expression -> . operand0
    (83) expression -> . conditional_expression
    (22) identifier -> . ID
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (84) conditional_expression -> . IF expression then_expression else_expression FI
    (85) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (92) operand1 -> . operand2
    (93) operand1 -> . operand1 operator2 operand2
    (94) operand2 -> . operand3
    (95) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (96) operand3 -> . monadic_operator operand4
    (97) operand3 -> . operand4
    (104) monadic_operator -> . MINUS
    (105) monadic_operator -> . NOT
    (98) operand4 -> . array_location
    (99) operand4 -> . referenced_location
    (100) operand4 -> . primitive_value
    (81) array_location -> . location
    (106) referenced_location -> . ARROW array_location
    (123) primitive_value -> . literal
    (65) location -> . identifier
    (66) location -> . dereferenced_reference
    (67) location -> . string_element
    (68) location -> . string_slice
    (69) location -> . array_element
    (70) location -> . array_slice
    (124) literal -> . integer_literal
    (125) literal -> . boolean_literal
    (126) literal -> . character_literal
    (127) literal -> . empty_literal
    (128) literal -> . character_string_literal
    (71) dereferenced_reference -> . array_location ARROW
    (72) string_element -> . identifier LBRACKET start_element LBRACKET
    (74) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (77) array_element -> . array_location LBRACKET expression_list RBRACKET
    (80) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (129) integer_literal -> . ICONST
    (130) boolean_literal -> . TRUE
    (131) boolean_literal -> . FALSE
    (132) character_literal -> . CCONST
    (133) empty_literal -> . NULL
    (134) character_string_literal -> . SCONST

    INT             shift and go to state 39
    BOOL            shift and go to state 53
    CHAR            shift and go to state 51
    ID              shift and go to state 15
    IF              shift and go to state 99
    MINUS           shift and go to state 90
    NOT             shift and go to state 96
    ARROW           shift and go to state 72
    ICONST          shift and go to state 89
    TRUE            shift and go to state 87
    FALSE           shift and go to state 80
    CCONST          shift and go to state 91
    NULL            shift and go to state 97
    SCONST          shift and go to state 95

    literal                        shift and go to state 74
    dereferenced_reference         shift and go to state 75
    operand3                       shift and go to state 76
    integer_literal                shift and go to state 77
    primitive_value                shift and go to state 78
    referenced_location            shift and go to state 79
    string_element                 shift and go to state 81
    location                       shift and go to state 82
    discrete_range_mode            shift and go to state 45
    array_slice                    shift and go to state 83
    operand2                       shift and go to state 103
    character_mode                 shift and go to state 47
    character_literal              shift and go to state 85
    operand1                       shift and go to state 86
    boolean_mode                   shift and go to state 50
    expression                     shift and go to state 111
    integer_mode                   shift and go to state 40
    array_element                  shift and go to state 92
    monadic_operator               shift and go to state 93
    character_string_literal       shift and go to state 94
    identifier                     shift and go to state 117
    discrete_mode                  shift and go to state 118
    lower_bound                    shift and go to state 112
    literal_range                  shift and go to state 119
    string_slice                   shift and go to state 98
    conditional_expression         shift and go to state 100
    array_location                 shift and go to state 73
    index_mode_list                shift and go to state 180
    discrete_mode_name             shift and go to state 48
    empty_literal                  shift and go to state 101
    operand4                       shift and go to state 102
    boolean_literal                shift and go to state 104
    operand0                       shift and go to state 105
    index_mode                     shift and go to state 121

state 160

    (78) expression_list -> expression .
    (79) expression_list -> expression . COMMA expression_list
    (52) lower_bound -> expression .

    RBRACKET        reduce using rule 78 (expression_list -> expression .)
    COMMA           shift and go to state 181
    COLON           reduce using rule 52 (lower_bound -> expression .)


state 161

    (80) array_slice -> array_location LBRACKET lower_bound . COLON upper_bound RBRACKET

    COLON           shift and go to state 182


state 162

    (77) array_element -> array_location LBRACKET expression_list . RBRACKET

    RBRACKET        shift and go to state 183


state 163

    (74) string_slice -> identifier LBRACKET left_element . COLON right_element RBRACKET

    COLON           shift and go to state 184


state 164

    (73) start_element -> expression .
    (75) left_element -> expression .

    LBRACKET        reduce using rule 73 (start_element -> expression .)
    COLON           reduce using rule 75 (left_element -> expression .)


state 165

    (72) string_element -> identifier LBRACKET start_element . LBRACKET

    LBRACKET        shift and go to state 185


state 166

    (93) operand1 -> operand1 operator2 operand2 .
    (95) operand2 -> operand2 . arithmetic_multiplicative_operator operand3
    (101) arithmetic_multiplicative_operator -> . TIMES
    (102) arithmetic_multiplicative_operator -> . DIVIDE
    (103) arithmetic_multiplicative_operator -> . MODULO

    PLUS            reduce using rule 93 (operand1 -> operand1 operator2 operand2 .)
    MINUS           reduce using rule 93 (operand1 -> operand1 operator2 operand2 .)
    CONCAT          reduce using rule 93 (operand1 -> operand1 operator2 operand2 .)
    AND             reduce using rule 93 (operand1 -> operand1 operator2 operand2 .)
    OR              reduce using rule 93 (operand1 -> operand1 operator2 operand2 .)
    EQUAL           reduce using rule 93 (operand1 -> operand1 operator2 operand2 .)
    NOTEQ           reduce using rule 93 (operand1 -> operand1 operator2 operand2 .)
    GREATER         reduce using rule 93 (operand1 -> operand1 operator2 operand2 .)
    GTEQUAL         reduce using rule 93 (operand1 -> operand1 operator2 operand2 .)
    LESS            reduce using rule 93 (operand1 -> operand1 operator2 operand2 .)
    LTEQUAL         reduce using rule 93 (operand1 -> operand1 operator2 operand2 .)
    IN              reduce using rule 93 (operand1 -> operand1 operator2 operand2 .)
    COLON           reduce using rule 93 (operand1 -> operand1 operator2 operand2 .)
    THEN            reduce using rule 93 (operand1 -> operand1 operator2 operand2 .)
    COMMA           reduce using rule 93 (operand1 -> operand1 operator2 operand2 .)
    SEMI            reduce using rule 93 (operand1 -> operand1 operator2 operand2 .)
    FI              reduce using rule 93 (operand1 -> operand1 operator2 operand2 .)
    RBRACKET        reduce using rule 93 (operand1 -> operand1 operator2 operand2 .)
    ELSE            reduce using rule 93 (operand1 -> operand1 operator2 operand2 .)
    ELSIF           reduce using rule 93 (operand1 -> operand1 operator2 operand2 .)
    RPAREN          reduce using rule 93 (operand1 -> operand1 operator2 operand2 .)
    LBRACKET        reduce using rule 93 (operand1 -> operand1 operator2 operand2 .)
    TIMES           shift and go to state 137
    DIVIDE          shift and go to state 134
    MODULO          shift and go to state 136

    arithmetic_multiplicative_operator shift and go to state 135

state 167

    (86) then_expression -> THEN . expression
    (82) expression -> . operand0
    (83) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (84) conditional_expression -> . IF expression then_expression else_expression FI
    (85) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (92) operand1 -> . operand2
    (93) operand1 -> . operand1 operator2 operand2
    (94) operand2 -> . operand3
    (95) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (96) operand3 -> . monadic_operator operand4
    (97) operand3 -> . operand4
    (104) monadic_operator -> . MINUS
    (105) monadic_operator -> . NOT
    (98) operand4 -> . array_location
    (99) operand4 -> . referenced_location
    (100) operand4 -> . primitive_value
    (81) array_location -> . location
    (106) referenced_location -> . ARROW array_location
    (123) primitive_value -> . literal
    (65) location -> . identifier
    (66) location -> . dereferenced_reference
    (67) location -> . string_element
    (68) location -> . string_slice
    (69) location -> . array_element
    (70) location -> . array_slice
    (124) literal -> . integer_literal
    (125) literal -> . boolean_literal
    (126) literal -> . character_literal
    (127) literal -> . empty_literal
    (128) literal -> . character_string_literal
    (22) identifier -> . ID
    (71) dereferenced_reference -> . array_location ARROW
    (72) string_element -> . identifier LBRACKET start_element LBRACKET
    (74) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (77) array_element -> . array_location LBRACKET expression_list RBRACKET
    (80) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (129) integer_literal -> . ICONST
    (130) boolean_literal -> . TRUE
    (131) boolean_literal -> . FALSE
    (132) character_literal -> . CCONST
    (133) empty_literal -> . NULL
    (134) character_string_literal -> . SCONST

    IF              shift and go to state 99
    MINUS           shift and go to state 90
    NOT             shift and go to state 96
    ARROW           shift and go to state 72
    ID              shift and go to state 15
    ICONST          shift and go to state 89
    TRUE            shift and go to state 87
    FALSE           shift and go to state 80
    CCONST          shift and go to state 91
    NULL            shift and go to state 97
    SCONST          shift and go to state 95

    monadic_operator               shift and go to state 93
    character_literal              shift and go to state 85
    character_string_literal       shift and go to state 94
    identifier                     shift and go to state 84
    array_location                 shift and go to state 73
    literal                        shift and go to state 74
    dereferenced_reference         shift and go to state 75
    operand3                       shift and go to state 76
    integer_literal                shift and go to state 77
    array_slice                    shift and go to state 83
    primitive_value                shift and go to state 78
    referenced_location            shift and go to state 79
    string_slice                   shift and go to state 98
    string_element                 shift and go to state 81
    location                       shift and go to state 82
    conditional_expression         shift and go to state 100
    operand2                       shift and go to state 103
    empty_literal                  shift and go to state 101
    operand1                       shift and go to state 86
    operand4                       shift and go to state 102
    expression                     shift and go to state 186
    boolean_literal                shift and go to state 104
    operand0                       shift and go to state 105
    array_element                  shift and go to state 92

state 168

    (84) conditional_expression -> IF expression then_expression . else_expression FI
    (85) conditional_expression -> IF expression then_expression . elsif_expression else_expression FI
    (87) else_expression -> . ELSE expression
    (88) elsif_expression -> . ELSIF expression then_expression
    (89) elsif_expression -> . elsif_expression ELSIF expression then_expression

    ELSE            shift and go to state 188
    ELSIF           shift and go to state 190

    else_expression                shift and go to state 189
    elsif_expression               shift and go to state 187

state 169

    (95) operand2 -> operand2 arithmetic_multiplicative_operator operand3 .

    TIMES           reduce using rule 95 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    DIVIDE          reduce using rule 95 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    MODULO          reduce using rule 95 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    PLUS            reduce using rule 95 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    MINUS           reduce using rule 95 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    CONCAT          reduce using rule 95 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    AND             reduce using rule 95 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    OR              reduce using rule 95 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    EQUAL           reduce using rule 95 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    NOTEQ           reduce using rule 95 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    GREATER         reduce using rule 95 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    GTEQUAL         reduce using rule 95 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LESS            reduce using rule 95 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LTEQUAL         reduce using rule 95 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    IN              reduce using rule 95 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    RBRACKET        reduce using rule 95 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    ELSE            reduce using rule 95 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    ELSIF           reduce using rule 95 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    COMMA           reduce using rule 95 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    SEMI            reduce using rule 95 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    COLON           reduce using rule 95 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    THEN            reduce using rule 95 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LBRACKET        reduce using rule 95 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    RPAREN          reduce using rule 95 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    FI              reduce using rule 95 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)


state 170

    (91) operand0 -> operand0 operator1 operand1 .
    (93) operand1 -> operand1 . operator2 operand2
    (109) operator2 -> . arithmetic_additive_operator
    (110) operator2 -> . string_concatenation_operator
    (111) arithmetic_additive_operator -> . PLUS
    (112) arithmetic_additive_operator -> . MINUS
    (113) string_concatenation_operator -> . CONCAT

    AND             reduce using rule 91 (operand0 -> operand0 operator1 operand1 .)
    OR              reduce using rule 91 (operand0 -> operand0 operator1 operand1 .)
    EQUAL           reduce using rule 91 (operand0 -> operand0 operator1 operand1 .)
    NOTEQ           reduce using rule 91 (operand0 -> operand0 operator1 operand1 .)
    GREATER         reduce using rule 91 (operand0 -> operand0 operator1 operand1 .)
    GTEQUAL         reduce using rule 91 (operand0 -> operand0 operator1 operand1 .)
    LESS            reduce using rule 91 (operand0 -> operand0 operator1 operand1 .)
    LTEQUAL         reduce using rule 91 (operand0 -> operand0 operator1 operand1 .)
    IN              reduce using rule 91 (operand0 -> operand0 operator1 operand1 .)
    LBRACKET        reduce using rule 91 (operand0 -> operand0 operator1 operand1 .)
    COLON           reduce using rule 91 (operand0 -> operand0 operator1 operand1 .)
    RBRACKET        reduce using rule 91 (operand0 -> operand0 operator1 operand1 .)
    RPAREN          reduce using rule 91 (operand0 -> operand0 operator1 operand1 .)
    COMMA           reduce using rule 91 (operand0 -> operand0 operator1 operand1 .)
    SEMI            reduce using rule 91 (operand0 -> operand0 operator1 operand1 .)
    THEN            reduce using rule 91 (operand0 -> operand0 operator1 operand1 .)
    FI              reduce using rule 91 (operand0 -> operand0 operator1 operand1 .)
    ELSE            reduce using rule 91 (operand0 -> operand0 operator1 operand1 .)
    ELSIF           reduce using rule 91 (operand0 -> operand0 operator1 operand1 .)
    PLUS            shift and go to state 126
    MINUS           shift and go to state 131
    CONCAT          shift and go to state 130

    operator2                      shift and go to state 127
    arithmetic_additive_operator   shift and go to state 128
    string_concatenation_operator  shift and go to state 129

state 171

    (31) formal_parameter_list -> formal_parameter COMMA formal_parameter .

    RPAREN          reduce using rule 31 (formal_parameter_list -> formal_parameter COMMA formal_parameter .)


state 172

    (34) result_spec -> RETURNS . LPAREN mode LOC RPAREN
    (35) result_spec -> RETURNS . LPAREN mode RPAREN

    LPAREN          shift and go to state 191


state 173

    (28) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec . SEMI statement_nullable END SEMI

    SEMI            shift and go to state 192


state 174

    (29) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI . statement_nullable END SEMI
    (3) statement_nullable -> . statement statement_nullable
    (4) statement_nullable -> . empty
    (5) statement -> . declaration_statement
    (6) statement -> . synonym_statement
    (7) statement -> . newmode_statement
    (8) statement -> . procedure_statement
    (135) empty -> .
    (14) declaration_statement -> . DCL declaration_list SEMI
    (9) synonym_statement -> . SYN synonym_list SEMI
    (23) newmode_statement -> . TYPE newmode_list SEMI
    (27) procedure_statement -> . ID COLON procedure_definition

    END             reduce using rule 135 (empty -> .)
    DCL             shift and go to state 7
    SYN             shift and go to state 11
    TYPE            shift and go to state 4
    ID              shift and go to state 2

    synonym_statement              shift and go to state 6
    procedure_statement            shift and go to state 5
    newmode_statement              shift and go to state 8
    statement_nullable             shift and go to state 193
    declaration_statement          shift and go to state 1
    statement                      shift and go to state 22
    empty                          shift and go to state 21

state 175

    (32) formal_parameter -> identifier_list mode LOC .

    COMMA           reduce using rule 32 (formal_parameter -> identifier_list mode LOC .)
    RPAREN          reduce using rule 32 (formal_parameter -> identifier_list mode LOC .)


state 176

    (53) upper_bound -> expression .

    RPAREN          reduce using rule 53 (upper_bound -> expression .)
    COMMA           reduce using rule 53 (upper_bound -> expression .)
    RBRACKET        reduce using rule 53 (upper_bound -> expression .)


state 177

    (51) literal_range -> lower_bound COLON upper_bound .

    COMMA           reduce using rule 51 (literal_range -> lower_bound COLON upper_bound .)
    RBRACKET        reduce using rule 51 (literal_range -> lower_bound COLON upper_bound .)
    RPAREN          reduce using rule 51 (literal_range -> lower_bound COLON upper_bound .)


state 178

    (64) element_mode -> mode .

    ASSIGN          reduce using rule 64 (element_mode -> mode .)
    COMMA           reduce using rule 64 (element_mode -> mode .)
    SEMI            reduce using rule 64 (element_mode -> mode .)
    LOC             reduce using rule 64 (element_mode -> mode .)
    RPAREN          reduce using rule 64 (element_mode -> mode .)


state 179

    (59) array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .

    ASSIGN          reduce using rule 59 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)
    COMMA           reduce using rule 59 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)
    SEMI            reduce using rule 59 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)
    LOC             reduce using rule 59 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)
    RPAREN          reduce using rule 59 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)


state 180

    (61) index_mode_list -> index_mode COMMA index_mode_list .

    RBRACKET        reduce using rule 61 (index_mode_list -> index_mode COMMA index_mode_list .)


state 181

    (79) expression_list -> expression COMMA . expression_list
    (78) expression_list -> . expression
    (79) expression_list -> . expression COMMA expression_list
    (82) expression -> . operand0
    (83) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (84) conditional_expression -> . IF expression then_expression else_expression FI
    (85) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (92) operand1 -> . operand2
    (93) operand1 -> . operand1 operator2 operand2
    (94) operand2 -> . operand3
    (95) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (96) operand3 -> . monadic_operator operand4
    (97) operand3 -> . operand4
    (104) monadic_operator -> . MINUS
    (105) monadic_operator -> . NOT
    (98) operand4 -> . array_location
    (99) operand4 -> . referenced_location
    (100) operand4 -> . primitive_value
    (81) array_location -> . location
    (106) referenced_location -> . ARROW array_location
    (123) primitive_value -> . literal
    (65) location -> . identifier
    (66) location -> . dereferenced_reference
    (67) location -> . string_element
    (68) location -> . string_slice
    (69) location -> . array_element
    (70) location -> . array_slice
    (124) literal -> . integer_literal
    (125) literal -> . boolean_literal
    (126) literal -> . character_literal
    (127) literal -> . empty_literal
    (128) literal -> . character_string_literal
    (22) identifier -> . ID
    (71) dereferenced_reference -> . array_location ARROW
    (72) string_element -> . identifier LBRACKET start_element LBRACKET
    (74) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (77) array_element -> . array_location LBRACKET expression_list RBRACKET
    (80) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (129) integer_literal -> . ICONST
    (130) boolean_literal -> . TRUE
    (131) boolean_literal -> . FALSE
    (132) character_literal -> . CCONST
    (133) empty_literal -> . NULL
    (134) character_string_literal -> . SCONST

    IF              shift and go to state 99
    MINUS           shift and go to state 90
    NOT             shift and go to state 96
    ARROW           shift and go to state 72
    ID              shift and go to state 15
    ICONST          shift and go to state 89
    TRUE            shift and go to state 87
    FALSE           shift and go to state 80
    CCONST          shift and go to state 91
    NULL            shift and go to state 97
    SCONST          shift and go to state 95

    monadic_operator               shift and go to state 93
    character_literal              shift and go to state 85
    character_string_literal       shift and go to state 94
    identifier                     shift and go to state 84
    array_location                 shift and go to state 73
    literal                        shift and go to state 74
    dereferenced_reference         shift and go to state 75
    operand3                       shift and go to state 76
    integer_literal                shift and go to state 77
    array_slice                    shift and go to state 83
    primitive_value                shift and go to state 78
    referenced_location            shift and go to state 79
    string_slice                   shift and go to state 98
    string_element                 shift and go to state 81
    location                       shift and go to state 82
    expression_list                shift and go to state 195
    conditional_expression         shift and go to state 100
    operand2                       shift and go to state 103
    empty_literal                  shift and go to state 101
    operand1                       shift and go to state 86
    operand4                       shift and go to state 102
    expression                     shift and go to state 194
    boolean_literal                shift and go to state 104
    operand0                       shift and go to state 105
    array_element                  shift and go to state 92

state 182

    (80) array_slice -> array_location LBRACKET lower_bound COLON . upper_bound RBRACKET
    (53) upper_bound -> . expression
    (82) expression -> . operand0
    (83) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (84) conditional_expression -> . IF expression then_expression else_expression FI
    (85) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (92) operand1 -> . operand2
    (93) operand1 -> . operand1 operator2 operand2
    (94) operand2 -> . operand3
    (95) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (96) operand3 -> . monadic_operator operand4
    (97) operand3 -> . operand4
    (104) monadic_operator -> . MINUS
    (105) monadic_operator -> . NOT
    (98) operand4 -> . array_location
    (99) operand4 -> . referenced_location
    (100) operand4 -> . primitive_value
    (81) array_location -> . location
    (106) referenced_location -> . ARROW array_location
    (123) primitive_value -> . literal
    (65) location -> . identifier
    (66) location -> . dereferenced_reference
    (67) location -> . string_element
    (68) location -> . string_slice
    (69) location -> . array_element
    (70) location -> . array_slice
    (124) literal -> . integer_literal
    (125) literal -> . boolean_literal
    (126) literal -> . character_literal
    (127) literal -> . empty_literal
    (128) literal -> . character_string_literal
    (22) identifier -> . ID
    (71) dereferenced_reference -> . array_location ARROW
    (72) string_element -> . identifier LBRACKET start_element LBRACKET
    (74) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (77) array_element -> . array_location LBRACKET expression_list RBRACKET
    (80) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (129) integer_literal -> . ICONST
    (130) boolean_literal -> . TRUE
    (131) boolean_literal -> . FALSE
    (132) character_literal -> . CCONST
    (133) empty_literal -> . NULL
    (134) character_string_literal -> . SCONST

    IF              shift and go to state 99
    MINUS           shift and go to state 90
    NOT             shift and go to state 96
    ARROW           shift and go to state 72
    ID              shift and go to state 15
    ICONST          shift and go to state 89
    TRUE            shift and go to state 87
    FALSE           shift and go to state 80
    CCONST          shift and go to state 91
    NULL            shift and go to state 97
    SCONST          shift and go to state 95

    monadic_operator               shift and go to state 93
    character_literal              shift and go to state 85
    character_string_literal       shift and go to state 94
    identifier                     shift and go to state 84
    array_location                 shift and go to state 73
    literal                        shift and go to state 74
    dereferenced_reference         shift and go to state 75
    operand3                       shift and go to state 76
    integer_literal                shift and go to state 77
    array_slice                    shift and go to state 83
    primitive_value                shift and go to state 78
    referenced_location            shift and go to state 79
    string_slice                   shift and go to state 98
    string_element                 shift and go to state 81
    location                       shift and go to state 82
    conditional_expression         shift and go to state 100
    operand2                       shift and go to state 103
    upper_bound                    shift and go to state 196
    empty_literal                  shift and go to state 101
    operand1                       shift and go to state 86
    operand4                       shift and go to state 102
    expression                     shift and go to state 176
    boolean_literal                shift and go to state 104
    operand0                       shift and go to state 105
    array_element                  shift and go to state 92

state 183

    (77) array_element -> array_location LBRACKET expression_list RBRACKET .

    ARROW           reduce using rule 77 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    LBRACKET        reduce using rule 77 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    TIMES           reduce using rule 77 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    DIVIDE          reduce using rule 77 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    MODULO          reduce using rule 77 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    PLUS            reduce using rule 77 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    MINUS           reduce using rule 77 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    CONCAT          reduce using rule 77 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    AND             reduce using rule 77 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    OR              reduce using rule 77 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    EQUAL           reduce using rule 77 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    NOTEQ           reduce using rule 77 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    GREATER         reduce using rule 77 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    GTEQUAL         reduce using rule 77 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    LESS            reduce using rule 77 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    LTEQUAL         reduce using rule 77 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    IN              reduce using rule 77 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    RPAREN          reduce using rule 77 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    COMMA           reduce using rule 77 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    RBRACKET        reduce using rule 77 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    SEMI            reduce using rule 77 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    COLON           reduce using rule 77 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    THEN            reduce using rule 77 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    ELSE            reduce using rule 77 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    ELSIF           reduce using rule 77 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    FI              reduce using rule 77 (array_element -> array_location LBRACKET expression_list RBRACKET .)


state 184

    (74) string_slice -> identifier LBRACKET left_element COLON . right_element RBRACKET
    (76) right_element -> . expression
    (82) expression -> . operand0
    (83) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (84) conditional_expression -> . IF expression then_expression else_expression FI
    (85) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (92) operand1 -> . operand2
    (93) operand1 -> . operand1 operator2 operand2
    (94) operand2 -> . operand3
    (95) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (96) operand3 -> . monadic_operator operand4
    (97) operand3 -> . operand4
    (104) monadic_operator -> . MINUS
    (105) monadic_operator -> . NOT
    (98) operand4 -> . array_location
    (99) operand4 -> . referenced_location
    (100) operand4 -> . primitive_value
    (81) array_location -> . location
    (106) referenced_location -> . ARROW array_location
    (123) primitive_value -> . literal
    (65) location -> . identifier
    (66) location -> . dereferenced_reference
    (67) location -> . string_element
    (68) location -> . string_slice
    (69) location -> . array_element
    (70) location -> . array_slice
    (124) literal -> . integer_literal
    (125) literal -> . boolean_literal
    (126) literal -> . character_literal
    (127) literal -> . empty_literal
    (128) literal -> . character_string_literal
    (22) identifier -> . ID
    (71) dereferenced_reference -> . array_location ARROW
    (72) string_element -> . identifier LBRACKET start_element LBRACKET
    (74) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (77) array_element -> . array_location LBRACKET expression_list RBRACKET
    (80) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (129) integer_literal -> . ICONST
    (130) boolean_literal -> . TRUE
    (131) boolean_literal -> . FALSE
    (132) character_literal -> . CCONST
    (133) empty_literal -> . NULL
    (134) character_string_literal -> . SCONST

    IF              shift and go to state 99
    MINUS           shift and go to state 90
    NOT             shift and go to state 96
    ARROW           shift and go to state 72
    ID              shift and go to state 15
    ICONST          shift and go to state 89
    TRUE            shift and go to state 87
    FALSE           shift and go to state 80
    CCONST          shift and go to state 91
    NULL            shift and go to state 97
    SCONST          shift and go to state 95

    location                       shift and go to state 82
    character_literal              shift and go to state 85
    character_string_literal       shift and go to state 94
    identifier                     shift and go to state 84
    array_location                 shift and go to state 73
    literal                        shift and go to state 74
    dereferenced_reference         shift and go to state 75
    operand3                       shift and go to state 76
    monadic_operator               shift and go to state 93
    array_slice                    shift and go to state 83
    primitive_value                shift and go to state 78
    referenced_location            shift and go to state 79
    string_slice                   shift and go to state 98
    string_element                 shift and go to state 81
    right_element                  shift and go to state 198
    conditional_expression         shift and go to state 100
    operand2                       shift and go to state 103
    integer_literal                shift and go to state 77
    empty_literal                  shift and go to state 101
    operand1                       shift and go to state 86
    operand4                       shift and go to state 102
    expression                     shift and go to state 197
    boolean_literal                shift and go to state 104
    operand0                       shift and go to state 105
    array_element                  shift and go to state 92

state 185

    (72) string_element -> identifier LBRACKET start_element LBRACKET .

    ARROW           reduce using rule 72 (string_element -> identifier LBRACKET start_element LBRACKET .)
    LBRACKET        reduce using rule 72 (string_element -> identifier LBRACKET start_element LBRACKET .)
    TIMES           reduce using rule 72 (string_element -> identifier LBRACKET start_element LBRACKET .)
    DIVIDE          reduce using rule 72 (string_element -> identifier LBRACKET start_element LBRACKET .)
    MODULO          reduce using rule 72 (string_element -> identifier LBRACKET start_element LBRACKET .)
    PLUS            reduce using rule 72 (string_element -> identifier LBRACKET start_element LBRACKET .)
    MINUS           reduce using rule 72 (string_element -> identifier LBRACKET start_element LBRACKET .)
    CONCAT          reduce using rule 72 (string_element -> identifier LBRACKET start_element LBRACKET .)
    AND             reduce using rule 72 (string_element -> identifier LBRACKET start_element LBRACKET .)
    OR              reduce using rule 72 (string_element -> identifier LBRACKET start_element LBRACKET .)
    EQUAL           reduce using rule 72 (string_element -> identifier LBRACKET start_element LBRACKET .)
    NOTEQ           reduce using rule 72 (string_element -> identifier LBRACKET start_element LBRACKET .)
    GREATER         reduce using rule 72 (string_element -> identifier LBRACKET start_element LBRACKET .)
    GTEQUAL         reduce using rule 72 (string_element -> identifier LBRACKET start_element LBRACKET .)
    LESS            reduce using rule 72 (string_element -> identifier LBRACKET start_element LBRACKET .)
    LTEQUAL         reduce using rule 72 (string_element -> identifier LBRACKET start_element LBRACKET .)
    IN              reduce using rule 72 (string_element -> identifier LBRACKET start_element LBRACKET .)
    ELSE            reduce using rule 72 (string_element -> identifier LBRACKET start_element LBRACKET .)
    ELSIF           reduce using rule 72 (string_element -> identifier LBRACKET start_element LBRACKET .)
    COMMA           reduce using rule 72 (string_element -> identifier LBRACKET start_element LBRACKET .)
    RBRACKET        reduce using rule 72 (string_element -> identifier LBRACKET start_element LBRACKET .)
    COLON           reduce using rule 72 (string_element -> identifier LBRACKET start_element LBRACKET .)
    THEN            reduce using rule 72 (string_element -> identifier LBRACKET start_element LBRACKET .)
    FI              reduce using rule 72 (string_element -> identifier LBRACKET start_element LBRACKET .)
    RPAREN          reduce using rule 72 (string_element -> identifier LBRACKET start_element LBRACKET .)
    SEMI            reduce using rule 72 (string_element -> identifier LBRACKET start_element LBRACKET .)


state 186

    (86) then_expression -> THEN expression .

    ELSIF           reduce using rule 86 (then_expression -> THEN expression .)
    ELSE            reduce using rule 86 (then_expression -> THEN expression .)


state 187

    (85) conditional_expression -> IF expression then_expression elsif_expression . else_expression FI
    (89) elsif_expression -> elsif_expression . ELSIF expression then_expression
    (87) else_expression -> . ELSE expression

    ELSIF           shift and go to state 200
    ELSE            shift and go to state 188

    else_expression                shift and go to state 199

state 188

    (87) else_expression -> ELSE . expression
    (82) expression -> . operand0
    (83) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (84) conditional_expression -> . IF expression then_expression else_expression FI
    (85) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (92) operand1 -> . operand2
    (93) operand1 -> . operand1 operator2 operand2
    (94) operand2 -> . operand3
    (95) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (96) operand3 -> . monadic_operator operand4
    (97) operand3 -> . operand4
    (104) monadic_operator -> . MINUS
    (105) monadic_operator -> . NOT
    (98) operand4 -> . array_location
    (99) operand4 -> . referenced_location
    (100) operand4 -> . primitive_value
    (81) array_location -> . location
    (106) referenced_location -> . ARROW array_location
    (123) primitive_value -> . literal
    (65) location -> . identifier
    (66) location -> . dereferenced_reference
    (67) location -> . string_element
    (68) location -> . string_slice
    (69) location -> . array_element
    (70) location -> . array_slice
    (124) literal -> . integer_literal
    (125) literal -> . boolean_literal
    (126) literal -> . character_literal
    (127) literal -> . empty_literal
    (128) literal -> . character_string_literal
    (22) identifier -> . ID
    (71) dereferenced_reference -> . array_location ARROW
    (72) string_element -> . identifier LBRACKET start_element LBRACKET
    (74) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (77) array_element -> . array_location LBRACKET expression_list RBRACKET
    (80) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (129) integer_literal -> . ICONST
    (130) boolean_literal -> . TRUE
    (131) boolean_literal -> . FALSE
    (132) character_literal -> . CCONST
    (133) empty_literal -> . NULL
    (134) character_string_literal -> . SCONST

    IF              shift and go to state 99
    MINUS           shift and go to state 90
    NOT             shift and go to state 96
    ARROW           shift and go to state 72
    ID              shift and go to state 15
    ICONST          shift and go to state 89
    TRUE            shift and go to state 87
    FALSE           shift and go to state 80
    CCONST          shift and go to state 91
    NULL            shift and go to state 97
    SCONST          shift and go to state 95

    monadic_operator               shift and go to state 93
    character_literal              shift and go to state 85
    character_string_literal       shift and go to state 94
    identifier                     shift and go to state 84
    array_location                 shift and go to state 73
    literal                        shift and go to state 74
    dereferenced_reference         shift and go to state 75
    operand3                       shift and go to state 76
    integer_literal                shift and go to state 77
    array_slice                    shift and go to state 83
    primitive_value                shift and go to state 78
    referenced_location            shift and go to state 79
    string_slice                   shift and go to state 98
    string_element                 shift and go to state 81
    location                       shift and go to state 82
    conditional_expression         shift and go to state 100
    operand2                       shift and go to state 103
    empty_literal                  shift and go to state 101
    operand1                       shift and go to state 86
    operand4                       shift and go to state 102
    expression                     shift and go to state 201
    boolean_literal                shift and go to state 104
    operand0                       shift and go to state 105
    array_element                  shift and go to state 92

state 189

    (84) conditional_expression -> IF expression then_expression else_expression . FI

    FI              shift and go to state 202


state 190

    (88) elsif_expression -> ELSIF . expression then_expression
    (82) expression -> . operand0
    (83) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (84) conditional_expression -> . IF expression then_expression else_expression FI
    (85) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (92) operand1 -> . operand2
    (93) operand1 -> . operand1 operator2 operand2
    (94) operand2 -> . operand3
    (95) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (96) operand3 -> . monadic_operator operand4
    (97) operand3 -> . operand4
    (104) monadic_operator -> . MINUS
    (105) monadic_operator -> . NOT
    (98) operand4 -> . array_location
    (99) operand4 -> . referenced_location
    (100) operand4 -> . primitive_value
    (81) array_location -> . location
    (106) referenced_location -> . ARROW array_location
    (123) primitive_value -> . literal
    (65) location -> . identifier
    (66) location -> . dereferenced_reference
    (67) location -> . string_element
    (68) location -> . string_slice
    (69) location -> . array_element
    (70) location -> . array_slice
    (124) literal -> . integer_literal
    (125) literal -> . boolean_literal
    (126) literal -> . character_literal
    (127) literal -> . empty_literal
    (128) literal -> . character_string_literal
    (22) identifier -> . ID
    (71) dereferenced_reference -> . array_location ARROW
    (72) string_element -> . identifier LBRACKET start_element LBRACKET
    (74) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (77) array_element -> . array_location LBRACKET expression_list RBRACKET
    (80) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (129) integer_literal -> . ICONST
    (130) boolean_literal -> . TRUE
    (131) boolean_literal -> . FALSE
    (132) character_literal -> . CCONST
    (133) empty_literal -> . NULL
    (134) character_string_literal -> . SCONST

    IF              shift and go to state 99
    MINUS           shift and go to state 90
    NOT             shift and go to state 96
    ARROW           shift and go to state 72
    ID              shift and go to state 15
    ICONST          shift and go to state 89
    TRUE            shift and go to state 87
    FALSE           shift and go to state 80
    CCONST          shift and go to state 91
    NULL            shift and go to state 97
    SCONST          shift and go to state 95

    monadic_operator               shift and go to state 93
    character_literal              shift and go to state 85
    character_string_literal       shift and go to state 94
    identifier                     shift and go to state 84
    literal                        shift and go to state 74
    dereferenced_reference         shift and go to state 75
    operand3                       shift and go to state 76
    integer_literal                shift and go to state 77
    array_slice                    shift and go to state 83
    primitive_value                shift and go to state 78
    referenced_location            shift and go to state 79
    string_slice                   shift and go to state 98
    string_element                 shift and go to state 81
    location                       shift and go to state 82
    conditional_expression         shift and go to state 100
    operand2                       shift and go to state 103
    array_location                 shift and go to state 73
    empty_literal                  shift and go to state 101
    operand1                       shift and go to state 86
    operand4                       shift and go to state 102
    expression                     shift and go to state 203
    boolean_literal                shift and go to state 104
    operand0                       shift and go to state 105
    array_element                  shift and go to state 92

state 191

    (34) result_spec -> RETURNS LPAREN . mode LOC RPAREN
    (35) result_spec -> RETURNS LPAREN . mode RPAREN
    (36) mode -> . mode_name
    (37) mode -> . discrete_mode
    (38) mode -> . reference_mode
    (39) mode -> . composite_mode
    (40) mode_name -> . identifier
    (41) discrete_mode -> . integer_mode
    (42) discrete_mode -> . boolean_mode
    (43) discrete_mode -> . character_mode
    (44) discrete_mode -> . discrete_range_mode
    (54) reference_mode -> . REF mode
    (55) composite_mode -> . string_mode
    (56) composite_mode -> . array_mode
    (22) identifier -> . ID
    (46) integer_mode -> . INT
    (47) boolean_mode -> . BOOL
    (48) character_mode -> . CHAR
    (49) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (50) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (57) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (59) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (45) discrete_mode_name -> . identifier

    REF             shift and go to state 38
    ID              shift and go to state 15
    INT             shift and go to state 39
    BOOL            shift and go to state 53
    CHAR            shift and go to state 51
    CHARS           shift and go to state 43
    ARRAY           shift and go to state 52

    discrete_range_mode            shift and go to state 45
    identifier                     shift and go to state 36
    composite_mode                 shift and go to state 46
    discrete_mode                  shift and go to state 37
    discrete_mode_name             shift and go to state 48
    mode                           shift and go to state 204
    boolean_mode                   shift and go to state 50
    mode_name                      shift and go to state 41
    reference_mode                 shift and go to state 35
    array_mode                     shift and go to state 42
    integer_mode                   shift and go to state 40
    string_mode                    shift and go to state 44
    character_mode                 shift and go to state 47

state 192

    (28) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI . statement_nullable END SEMI
    (3) statement_nullable -> . statement statement_nullable
    (4) statement_nullable -> . empty
    (5) statement -> . declaration_statement
    (6) statement -> . synonym_statement
    (7) statement -> . newmode_statement
    (8) statement -> . procedure_statement
    (135) empty -> .
    (14) declaration_statement -> . DCL declaration_list SEMI
    (9) synonym_statement -> . SYN synonym_list SEMI
    (23) newmode_statement -> . TYPE newmode_list SEMI
    (27) procedure_statement -> . ID COLON procedure_definition

    END             reduce using rule 135 (empty -> .)
    DCL             shift and go to state 7
    SYN             shift and go to state 11
    TYPE            shift and go to state 4
    ID              shift and go to state 2

    synonym_statement              shift and go to state 6
    procedure_statement            shift and go to state 5
    statement_nullable             shift and go to state 205
    newmode_statement              shift and go to state 8
    empty                          shift and go to state 21
    declaration_statement          shift and go to state 1
    statement                      shift and go to state 22

state 193

    (29) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable . END SEMI

    END             shift and go to state 206


state 194

    (78) expression_list -> expression .
    (79) expression_list -> expression . COMMA expression_list

    RBRACKET        reduce using rule 78 (expression_list -> expression .)
    COMMA           shift and go to state 181


state 195

    (79) expression_list -> expression COMMA expression_list .

    RBRACKET        reduce using rule 79 (expression_list -> expression COMMA expression_list .)


state 196

    (80) array_slice -> array_location LBRACKET lower_bound COLON upper_bound . RBRACKET

    RBRACKET        shift and go to state 207


state 197

    (76) right_element -> expression .

    RBRACKET        reduce using rule 76 (right_element -> expression .)


state 198

    (74) string_slice -> identifier LBRACKET left_element COLON right_element . RBRACKET

    RBRACKET        shift and go to state 208


state 199

    (85) conditional_expression -> IF expression then_expression elsif_expression else_expression . FI

    FI              shift and go to state 209


state 200

    (89) elsif_expression -> elsif_expression ELSIF . expression then_expression
    (82) expression -> . operand0
    (83) expression -> . conditional_expression
    (90) operand0 -> . operand1
    (91) operand0 -> . operand0 operator1 operand1
    (84) conditional_expression -> . IF expression then_expression else_expression FI
    (85) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (92) operand1 -> . operand2
    (93) operand1 -> . operand1 operator2 operand2
    (94) operand2 -> . operand3
    (95) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (96) operand3 -> . monadic_operator operand4
    (97) operand3 -> . operand4
    (104) monadic_operator -> . MINUS
    (105) monadic_operator -> . NOT
    (98) operand4 -> . array_location
    (99) operand4 -> . referenced_location
    (100) operand4 -> . primitive_value
    (81) array_location -> . location
    (106) referenced_location -> . ARROW array_location
    (123) primitive_value -> . literal
    (65) location -> . identifier
    (66) location -> . dereferenced_reference
    (67) location -> . string_element
    (68) location -> . string_slice
    (69) location -> . array_element
    (70) location -> . array_slice
    (124) literal -> . integer_literal
    (125) literal -> . boolean_literal
    (126) literal -> . character_literal
    (127) literal -> . empty_literal
    (128) literal -> . character_string_literal
    (22) identifier -> . ID
    (71) dereferenced_reference -> . array_location ARROW
    (72) string_element -> . identifier LBRACKET start_element LBRACKET
    (74) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (77) array_element -> . array_location LBRACKET expression_list RBRACKET
    (80) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (129) integer_literal -> . ICONST
    (130) boolean_literal -> . TRUE
    (131) boolean_literal -> . FALSE
    (132) character_literal -> . CCONST
    (133) empty_literal -> . NULL
    (134) character_string_literal -> . SCONST

    IF              shift and go to state 99
    MINUS           shift and go to state 90
    NOT             shift and go to state 96
    ARROW           shift and go to state 72
    ID              shift and go to state 15
    ICONST          shift and go to state 89
    TRUE            shift and go to state 87
    FALSE           shift and go to state 80
    CCONST          shift and go to state 91
    NULL            shift and go to state 97
    SCONST          shift and go to state 95

    monadic_operator               shift and go to state 93
    character_literal              shift and go to state 85
    character_string_literal       shift and go to state 94
    identifier                     shift and go to state 84
    array_location                 shift and go to state 73
    literal                        shift and go to state 74
    dereferenced_reference         shift and go to state 75
    operand3                       shift and go to state 76
    integer_literal                shift and go to state 77
    array_slice                    shift and go to state 83
    primitive_value                shift and go to state 78
    referenced_location            shift and go to state 79
    string_slice                   shift and go to state 98
    string_element                 shift and go to state 81
    location                       shift and go to state 82
    conditional_expression         shift and go to state 100
    operand2                       shift and go to state 103
    empty_literal                  shift and go to state 101
    operand1                       shift and go to state 86
    operand4                       shift and go to state 102
    expression                     shift and go to state 210
    boolean_literal                shift and go to state 104
    operand0                       shift and go to state 105
    array_element                  shift and go to state 92

state 201

    (87) else_expression -> ELSE expression .

    FI              reduce using rule 87 (else_expression -> ELSE expression .)


state 202

    (84) conditional_expression -> IF expression then_expression else_expression FI .

    COMMA           reduce using rule 84 (conditional_expression -> IF expression then_expression else_expression FI .)
    SEMI            reduce using rule 84 (conditional_expression -> IF expression then_expression else_expression FI .)
    COLON           reduce using rule 84 (conditional_expression -> IF expression then_expression else_expression FI .)
    RBRACKET        reduce using rule 84 (conditional_expression -> IF expression then_expression else_expression FI .)
    LBRACKET        reduce using rule 84 (conditional_expression -> IF expression then_expression else_expression FI .)
    THEN            reduce using rule 84 (conditional_expression -> IF expression then_expression else_expression FI .)
    FI              reduce using rule 84 (conditional_expression -> IF expression then_expression else_expression FI .)
    ELSE            reduce using rule 84 (conditional_expression -> IF expression then_expression else_expression FI .)
    ELSIF           reduce using rule 84 (conditional_expression -> IF expression then_expression else_expression FI .)
    RPAREN          reduce using rule 84 (conditional_expression -> IF expression then_expression else_expression FI .)


state 203

    (88) elsif_expression -> ELSIF expression . then_expression
    (86) then_expression -> . THEN expression

    THEN            shift and go to state 167

    then_expression                shift and go to state 211

state 204

    (34) result_spec -> RETURNS LPAREN mode . LOC RPAREN
    (35) result_spec -> RETURNS LPAREN mode . RPAREN

    LOC             shift and go to state 212
    RPAREN          shift and go to state 213


state 205

    (28) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable . END SEMI

    END             shift and go to state 214


state 206

    (29) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END . SEMI

    SEMI            shift and go to state 215


state 207

    (80) array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .

    ARROW           reduce using rule 80 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LBRACKET        reduce using rule 80 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    TIMES           reduce using rule 80 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    DIVIDE          reduce using rule 80 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    MODULO          reduce using rule 80 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    PLUS            reduce using rule 80 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    MINUS           reduce using rule 80 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    CONCAT          reduce using rule 80 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    AND             reduce using rule 80 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    OR              reduce using rule 80 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    EQUAL           reduce using rule 80 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    NOTEQ           reduce using rule 80 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    GREATER         reduce using rule 80 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    GTEQUAL         reduce using rule 80 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LESS            reduce using rule 80 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LTEQUAL         reduce using rule 80 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    IN              reduce using rule 80 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    COMMA           reduce using rule 80 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    SEMI            reduce using rule 80 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    COLON           reduce using rule 80 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    THEN            reduce using rule 80 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    RBRACKET        reduce using rule 80 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    RPAREN          reduce using rule 80 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    ELSE            reduce using rule 80 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    ELSIF           reduce using rule 80 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    FI              reduce using rule 80 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)


state 208

    (74) string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .

    ARROW           reduce using rule 74 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    LBRACKET        reduce using rule 74 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    TIMES           reduce using rule 74 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    DIVIDE          reduce using rule 74 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    MODULO          reduce using rule 74 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    PLUS            reduce using rule 74 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    MINUS           reduce using rule 74 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    CONCAT          reduce using rule 74 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    AND             reduce using rule 74 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    OR              reduce using rule 74 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    EQUAL           reduce using rule 74 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    NOTEQ           reduce using rule 74 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    GREATER         reduce using rule 74 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    GTEQUAL         reduce using rule 74 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    LESS            reduce using rule 74 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    LTEQUAL         reduce using rule 74 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    IN              reduce using rule 74 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    RBRACKET        reduce using rule 74 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    COMMA           reduce using rule 74 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    COLON           reduce using rule 74 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    SEMI            reduce using rule 74 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    THEN            reduce using rule 74 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    RPAREN          reduce using rule 74 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    ELSE            reduce using rule 74 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    ELSIF           reduce using rule 74 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    FI              reduce using rule 74 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)


state 209

    (85) conditional_expression -> IF expression then_expression elsif_expression else_expression FI .

    COMMA           reduce using rule 85 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    SEMI            reduce using rule 85 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    COLON           reduce using rule 85 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    RBRACKET        reduce using rule 85 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    LBRACKET        reduce using rule 85 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    THEN            reduce using rule 85 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    FI              reduce using rule 85 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    ELSE            reduce using rule 85 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    ELSIF           reduce using rule 85 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    RPAREN          reduce using rule 85 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)


state 210

    (89) elsif_expression -> elsif_expression ELSIF expression . then_expression
    (86) then_expression -> . THEN expression

    THEN            shift and go to state 167

    then_expression                shift and go to state 216

state 211

    (88) elsif_expression -> ELSIF expression then_expression .

    ELSIF           reduce using rule 88 (elsif_expression -> ELSIF expression then_expression .)
    ELSE            reduce using rule 88 (elsif_expression -> ELSIF expression then_expression .)


state 212

    (34) result_spec -> RETURNS LPAREN mode LOC . RPAREN

    RPAREN          shift and go to state 217


state 213

    (35) result_spec -> RETURNS LPAREN mode RPAREN .

    SEMI            reduce using rule 35 (result_spec -> RETURNS LPAREN mode RPAREN .)


state 214

    (28) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END . SEMI

    SEMI            shift and go to state 218


state 215

    (29) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .

    DCL             reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    SYN             reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    TYPE            reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    ID              reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    $end            reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    END             reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)


state 216

    (89) elsif_expression -> elsif_expression ELSIF expression then_expression .

    ELSIF           reduce using rule 89 (elsif_expression -> elsif_expression ELSIF expression then_expression .)
    ELSE            reduce using rule 89 (elsif_expression -> elsif_expression ELSIF expression then_expression .)


state 217

    (34) result_spec -> RETURNS LPAREN mode LOC RPAREN .

    SEMI            reduce using rule 34 (result_spec -> RETURNS LPAREN mode LOC RPAREN .)


state 218

    (28) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .

    DCL             reduce using rule 28 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    SYN             reduce using rule 28 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    TYPE            reduce using rule 28 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    ID              reduce using rule 28 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    $end            reduce using rule 28 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    END             reduce using rule 28 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LBRACKET in state 73 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 84 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 117 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 122 resolved as shift
