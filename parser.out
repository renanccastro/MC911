Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    DO
    LOWER
    RETURN
    LPAREN
    LESS
    NOTEQ
    THEN
    EQUAL
    LBRACKET
    WHILE
    COLON
    TO
    PRINT
    FI
    NULL
    REF
    MINUS
    RPAREN
    TRUE
    SCONST
    BY
    ASC
    READ
    NUM
    GTEQUAL
    PLUS
    ARRAY
    IF
    ASSIGN
    CCONST
    MODULO
    DIVIDE
    FOR
    UPPER
    END
    TIMES
    LOC
    RETURNS
    ABS
    ICONST
    RESULT
    ARROW
    IN
    ELSE
    LTEQUAL
    AND
    DOWN
    FALSE
    GREATER
    TYPE
    CHARS
    OD
    ELSIF
    SYN
    LENGTH
    EXIT
    NOT
    RBRACKET
    PROC
    OR

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement statement_nullable
Rule 3     statement_nullable -> statement statement_nullable
Rule 4     statement_nullable -> empty
Rule 5     statement -> declaration_statement
Rule 6     declaration_statement -> DCL declaration_list SEMI
Rule 7     declaration_list -> declaration
Rule 8     declaration_list -> declaration COMMA declaration
Rule 9     declaration -> identifier_list mode
Rule 10    identifier_list -> ID
Rule 11    identifier_list -> ID COMMA identifier_list
Rule 12    mode -> discrete_mode
Rule 13    discrete_mode -> integer_mode
Rule 14    discrete_mode -> boolean_mode
Rule 15    discrete_mode -> character_mode
Rule 16    integer_mode -> INT
Rule 17    boolean_mode -> BOOL
Rule 18    character_mode -> CHAR
Rule 19    empty -> <empty>

Terminals, with rules where they appear

ABS                  : 
AND                  : 
ARRAY                : 
ARROW                : 
ASC                  : 
ASSIGN               : 
BOOL                 : 17
BY                   : 
CCONST               : 
CHAR                 : 18
CHARS                : 
COLON                : 
COMMA                : 8 11
DCL                  : 6
DIVIDE               : 
DO                   : 
DOWN                 : 
ELSE                 : 
ELSIF                : 
END                  : 
EQUAL                : 
EXIT                 : 
FALSE                : 
FI                   : 
FOR                  : 
GREATER              : 
GTEQUAL              : 
ICONST               : 
ID                   : 10 11
IF                   : 
IN                   : 
INT                  : 16
LBRACKET             : 
LENGTH               : 
LESS                 : 
LOC                  : 
LOWER                : 
LPAREN               : 
LTEQUAL              : 
MINUS                : 
MODULO               : 
NOT                  : 
NOTEQ                : 
NULL                 : 
NUM                  : 
OD                   : 
OR                   : 
PLUS                 : 
PRINT                : 
PROC                 : 
RBRACKET             : 
READ                 : 
REF                  : 
RESULT               : 
RETURN               : 
RETURNS              : 
RPAREN               : 
SCONST               : 
SEMI                 : 6
SYN                  : 
THEN                 : 
TIMES                : 
TO                   : 
TRUE                 : 
TYPE                 : 
UPPER                : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

boolean_mode         : 14
character_mode       : 15
declaration          : 7 8 8
declaration_list     : 6
declaration_statement : 5
discrete_mode        : 12
empty                : 4
identifier_list      : 9 11
integer_mode         : 13
mode                 : 9
program              : 0
statement            : 2 3
statement_list       : 1
statement_nullable   : 2 3

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement statement_nullable
    (5) statement -> . declaration_statement
    (6) declaration_statement -> . DCL declaration_list SEMI

    DCL             shift and go to state 1

    program                        shift and go to state 2
    statement                      shift and go to state 3
    declaration_statement          shift and go to state 4
    statement_list                 shift and go to state 5

state 1

    (6) declaration_statement -> DCL . declaration_list SEMI
    (7) declaration_list -> . declaration
    (8) declaration_list -> . declaration COMMA declaration
    (9) declaration -> . identifier_list mode
    (10) identifier_list -> . ID
    (11) identifier_list -> . ID COMMA identifier_list

    ID              shift and go to state 9

    declaration                    shift and go to state 7
    identifier_list                shift and go to state 8
    declaration_list               shift and go to state 6

state 2

    (0) S' -> program .



state 3

    (2) statement_list -> statement . statement_nullable
    (3) statement_nullable -> . statement statement_nullable
    (4) statement_nullable -> . empty
    (5) statement -> . declaration_statement
    (19) empty -> .
    (6) declaration_statement -> . DCL declaration_list SEMI

    $end            reduce using rule 19 (empty -> .)
    DCL             shift and go to state 1

    statement_nullable             shift and go to state 10
    empty                          shift and go to state 12
    statement                      shift and go to state 11
    declaration_statement          shift and go to state 4

state 4

    (5) statement -> declaration_statement .

    DCL             reduce using rule 5 (statement -> declaration_statement .)
    $end            reduce using rule 5 (statement -> declaration_statement .)


state 5

    (1) program -> statement_list .

    $end            reduce using rule 1 (program -> statement_list .)


state 6

    (6) declaration_statement -> DCL declaration_list . SEMI

    SEMI            shift and go to state 13


state 7

    (7) declaration_list -> declaration .
    (8) declaration_list -> declaration . COMMA declaration

    SEMI            reduce using rule 7 (declaration_list -> declaration .)
    COMMA           shift and go to state 14


state 8

    (9) declaration -> identifier_list . mode
    (12) mode -> . discrete_mode
    (13) discrete_mode -> . integer_mode
    (14) discrete_mode -> . boolean_mode
    (15) discrete_mode -> . character_mode
    (16) integer_mode -> . INT
    (17) boolean_mode -> . BOOL
    (18) character_mode -> . CHAR

    INT             shift and go to state 15
    BOOL            shift and go to state 22
    CHAR            shift and go to state 18

    boolean_mode                   shift and go to state 16
    character_mode                 shift and go to state 17
    integer_mode                   shift and go to state 19
    mode                           shift and go to state 20
    discrete_mode                  shift and go to state 21

state 9

    (10) identifier_list -> ID .
    (11) identifier_list -> ID . COMMA identifier_list

    INT             reduce using rule 10 (identifier_list -> ID .)
    BOOL            reduce using rule 10 (identifier_list -> ID .)
    CHAR            reduce using rule 10 (identifier_list -> ID .)
    COMMA           shift and go to state 23


state 10

    (2) statement_list -> statement statement_nullable .

    $end            reduce using rule 2 (statement_list -> statement statement_nullable .)


state 11

    (3) statement_nullable -> statement . statement_nullable
    (3) statement_nullable -> . statement statement_nullable
    (4) statement_nullable -> . empty
    (5) statement -> . declaration_statement
    (19) empty -> .
    (6) declaration_statement -> . DCL declaration_list SEMI

    $end            reduce using rule 19 (empty -> .)
    DCL             shift and go to state 1

    statement_nullable             shift and go to state 24
    empty                          shift and go to state 12
    statement                      shift and go to state 11
    declaration_statement          shift and go to state 4

state 12

    (4) statement_nullable -> empty .

    $end            reduce using rule 4 (statement_nullable -> empty .)


state 13

    (6) declaration_statement -> DCL declaration_list SEMI .

    DCL             reduce using rule 6 (declaration_statement -> DCL declaration_list SEMI .)
    $end            reduce using rule 6 (declaration_statement -> DCL declaration_list SEMI .)


state 14

    (8) declaration_list -> declaration COMMA . declaration
    (9) declaration -> . identifier_list mode
    (10) identifier_list -> . ID
    (11) identifier_list -> . ID COMMA identifier_list

    ID              shift and go to state 9

    identifier_list                shift and go to state 8
    declaration                    shift and go to state 25

state 15

    (16) integer_mode -> INT .

    COMMA           reduce using rule 16 (integer_mode -> INT .)
    SEMI            reduce using rule 16 (integer_mode -> INT .)


state 16

    (14) discrete_mode -> boolean_mode .

    COMMA           reduce using rule 14 (discrete_mode -> boolean_mode .)
    SEMI            reduce using rule 14 (discrete_mode -> boolean_mode .)


state 17

    (15) discrete_mode -> character_mode .

    COMMA           reduce using rule 15 (discrete_mode -> character_mode .)
    SEMI            reduce using rule 15 (discrete_mode -> character_mode .)


state 18

    (18) character_mode -> CHAR .

    COMMA           reduce using rule 18 (character_mode -> CHAR .)
    SEMI            reduce using rule 18 (character_mode -> CHAR .)


state 19

    (13) discrete_mode -> integer_mode .

    COMMA           reduce using rule 13 (discrete_mode -> integer_mode .)
    SEMI            reduce using rule 13 (discrete_mode -> integer_mode .)


state 20

    (9) declaration -> identifier_list mode .

    COMMA           reduce using rule 9 (declaration -> identifier_list mode .)
    SEMI            reduce using rule 9 (declaration -> identifier_list mode .)


state 21

    (12) mode -> discrete_mode .

    COMMA           reduce using rule 12 (mode -> discrete_mode .)
    SEMI            reduce using rule 12 (mode -> discrete_mode .)


state 22

    (17) boolean_mode -> BOOL .

    COMMA           reduce using rule 17 (boolean_mode -> BOOL .)
    SEMI            reduce using rule 17 (boolean_mode -> BOOL .)


state 23

    (11) identifier_list -> ID COMMA . identifier_list
    (10) identifier_list -> . ID
    (11) identifier_list -> . ID COMMA identifier_list

    ID              shift and go to state 9

    identifier_list                shift and go to state 26

state 24

    (3) statement_nullable -> statement statement_nullable .

    $end            reduce using rule 3 (statement_nullable -> statement statement_nullable .)


state 25

    (8) declaration_list -> declaration COMMA declaration .

    SEMI            reduce using rule 8 (declaration_list -> declaration COMMA declaration .)


state 26

    (11) identifier_list -> ID COMMA identifier_list .

    INT             reduce using rule 11 (identifier_list -> ID COMMA identifier_list .)
    BOOL            reduce using rule 11 (identifier_list -> ID COMMA identifier_list .)
    CHAR            reduce using rule 11 (identifier_list -> ID COMMA identifier_list .)

