Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement statement_nullable
Rule 3     statement_nullable -> statement statement_nullable
Rule 4     statement_nullable -> empty
Rule 5     statement -> declaration_statement
Rule 6     statement -> synonym_statement
Rule 7     statement -> newmode_statement
Rule 8     statement -> action_statement
Rule 9     statement -> procedure_statement
Rule 10    synonym_statement -> SYN synonym_list SEMI
Rule 11    synonym_list -> synonym_definition
Rule 12    synonym_list -> synonym_definition COMMA synonym_list
Rule 13    synonym_definition -> identifier_list mode ASSIGN expression
Rule 14    synonym_definition -> identifier_list ASSIGN expression
Rule 15    declaration_statement -> DCL declaration_list SEMI
Rule 16    declaration_list -> declaration
Rule 17    declaration_list -> declaration COMMA declaration_list
Rule 18    declaration -> identifier_list mode initialization
Rule 19    declaration -> identifier_list mode
Rule 20    initialization -> ASSIGN expression
Rule 21    identifier_list -> identifier
Rule 22    identifier_list -> identifier COMMA identifier_list
Rule 23    identifier -> ID
Rule 24    newmode_statement -> TYPE newmode_list SEMI
Rule 25    newmode_list -> mode_definition
Rule 26    newmode_list -> mode_definition COMMA newmode_list
Rule 27    mode_definition -> identifier_list ASSIGN mode
Rule 28    procedure_statement -> ID COLON procedure_definition
Rule 29    procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI
Rule 30    procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI
Rule 31    procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI
Rule 32    procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI
Rule 33    formal_parameter_list -> formal_parameter
Rule 34    formal_parameter_list -> formal_parameter COMMA formal_parameter_list
Rule 35    formal_parameter -> identifier_list mode LOC
Rule 36    formal_parameter -> identifier_list mode
Rule 37    result_spec -> RETURNS LPAREN mode LOC RPAREN
Rule 38    result_spec -> RETURNS LPAREN mode RPAREN
Rule 39    mode -> mode_name
Rule 40    mode -> discrete_mode
Rule 41    mode -> reference_mode
Rule 42    mode -> composite_mode
Rule 43    mode_name -> identifier
Rule 44    discrete_mode -> integer_mode
Rule 45    discrete_mode -> boolean_mode
Rule 46    discrete_mode -> character_mode
Rule 47    discrete_mode -> discrete_range_mode
Rule 48    discrete_mode_name -> identifier
Rule 49    integer_mode -> INT
Rule 50    boolean_mode -> BOOL
Rule 51    character_mode -> CHAR
Rule 52    discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN
Rule 53    discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN
Rule 54    literal_range -> lower_bound COLON upper_bound
Rule 55    lower_bound -> expression
Rule 56    upper_bound -> expression
Rule 57    reference_mode -> REF mode
Rule 58    composite_mode -> string_mode
Rule 59    composite_mode -> array_mode
Rule 60    string_mode -> CHARS LBRACKET string_length RBRACKET
Rule 61    string_length -> integer_literal
Rule 62    array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode
Rule 63    index_mode_list -> index_mode
Rule 64    index_mode_list -> index_mode COMMA index_mode_list
Rule 65    index_mode -> discrete_mode
Rule 66    index_mode -> literal_range
Rule 67    element_mode -> mode
Rule 68    location -> identifier
Rule 69    location -> dereferenced_reference
Rule 70    location -> array_element
Rule 71    location -> array_slice
Rule 72    location -> call_action
Rule 73    dereferenced_reference -> array_location ARROW
Rule 74    array_element -> array_location LBRACKET expression_list RBRACKET
Rule 75    expression_list -> expression
Rule 76    expression_list -> expression COMMA expression_list
Rule 77    array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET
Rule 78    array_location -> location
Rule 79    expression -> operand0
Rule 80    expression -> conditional_expression
Rule 81    parenthesized_expression -> LPAREN expression RPAREN
Rule 82    conditional_expression -> IF expression then_expression else_expression FI
Rule 83    conditional_expression -> IF expression then_expression elsif_expression else_expression FI
Rule 84    then_expression -> THEN expression
Rule 85    else_expression -> ELSE expression
Rule 86    elsif_expression -> ELSIF expression then_expression
Rule 87    elsif_expression -> elsif_expression ELSIF expression then_expression
Rule 88    operand0 -> operand1
Rule 89    operand0 -> operand0 operator1 operand1
Rule 90    operand1 -> operand2
Rule 91    operand1 -> operand1 operator2 operand2
Rule 92    operand2 -> operand3
Rule 93    operand2 -> operand2 arithmetic_multiplicative_operator operand3
Rule 94    operand3 -> monadic_operator operand4
Rule 95    operand3 -> operand4
Rule 96    operand4 -> array_location
Rule 97    operand4 -> referenced_location
Rule 98    operand4 -> primitive_value
Rule 99    arithmetic_multiplicative_operator -> TIMES
Rule 100   arithmetic_multiplicative_operator -> DIVIDE
Rule 101   arithmetic_multiplicative_operator -> MODULO
Rule 102   monadic_operator -> MINUS
Rule 103   monadic_operator -> NOT
Rule 104   referenced_location -> ARROW array_location
Rule 105   operator1 -> membership_operator
Rule 106   operator1 -> relational_operator
Rule 107   relational_operator -> AND
Rule 108   relational_operator -> OR
Rule 109   relational_operator -> EQUAL
Rule 110   relational_operator -> NOTEQ
Rule 111   relational_operator -> GREATER
Rule 112   relational_operator -> GTEQUAL
Rule 113   relational_operator -> LESS
Rule 114   relational_operator -> LTEQUAL
Rule 115   operator2 -> arithmetic_additive_operator
Rule 116   operator2 -> string_concatenation_operator
Rule 117   arithmetic_additive_operator -> PLUS
Rule 118   arithmetic_additive_operator -> MINUS
Rule 119   string_concatenation_operator -> CONCAT
Rule 120   membership_operator -> IN
Rule 121   primitive_value -> literal
Rule 122   primitive_value -> value_array_element
Rule 123   primitive_value -> value_array_slice
Rule 124   primitive_value -> parenthesized_expression
Rule 125   literal -> integer_literal
Rule 126   literal -> boolean_literal
Rule 127   literal -> character_literal
Rule 128   literal -> empty_literal
Rule 129   literal -> character_string_literal
Rule 130   value_array_element -> primitive_value LBRACKET expression_list RBRACKET
Rule 131   value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET
Rule 132   integer_literal -> ICONST
Rule 133   boolean_literal -> TRUE
Rule 134   boolean_literal -> FALSE
Rule 135   character_literal -> CCONST
Rule 136   character_literal -> HAT LPAREN ICONST RPAREN
Rule 137   empty_literal -> NULL
Rule 138   character_string_literal -> SCONST
Rule 139   action_statement -> identifier COLON action SEMI
Rule 140   action_statement -> action SEMI
Rule 141   action -> bracketed_action
Rule 142   action -> assignment_action
Rule 143   action -> call_action
Rule 144   action -> exit_action
Rule 145   action -> result_action
Rule 146   action -> return_action
Rule 147   bracketed_action -> if_action
Rule 148   bracketed_action -> do_action
Rule 149   assignment_action -> array_location assigning_operator expression
Rule 150   assigning_operator -> closed_dyadic_operator ASSIGN
Rule 151   assigning_operator -> ASSIGN
Rule 152   closed_dyadic_operator -> arithmetic_additive_operator
Rule 153   closed_dyadic_operator -> arithmetic_multiplicative_operator
Rule 154   closed_dyadic_operator -> string_concatenation_operator
Rule 155   if_action -> IF expression then_clause else_clause FI
Rule 156   if_action -> IF expression then_clause FI
Rule 157   then_clause -> THEN action_statement_list
Rule 158   else_clause -> ELSE action_statement_list
Rule 159   else_clause -> ELSIF expression then_clause else_clause
Rule 160   else_clause -> ELSIF expression then_clause
Rule 161   action_statement_list -> action_statement action_statement_nullable
Rule 162   action_statement_nullable -> action_statement action_statement_nullable
Rule 163   action_statement_nullable -> empty
Rule 164   call_action -> procedure_call
Rule 165   call_action -> builtin_call
Rule 166   builtin_call -> builtin_name LPAREN parameter_list RPAREN
Rule 167   builtin_call -> builtin_name LPAREN RPAREN
Rule 168   builtin_name -> ABS
Rule 169   builtin_name -> ASC
Rule 170   builtin_name -> NUM
Rule 171   builtin_name -> UPPER
Rule 172   builtin_name -> LOWER
Rule 173   builtin_name -> LENGTH
Rule 174   builtin_name -> READ
Rule 175   builtin_name -> PRINT
Rule 176   procedure_call -> ID LPAREN parameter_list RPAREN
Rule 177   procedure_call -> ID LPAREN RPAREN
Rule 178   parameter_list -> expression
Rule 179   parameter_list -> expression COMMA parameter_list
Rule 180   exit_action -> EXIT identifier
Rule 181   return_action -> RETURN result
Rule 182   result -> expression
Rule 183   result -> empty
Rule 184   result_action -> RESULT expression
Rule 185   do_action -> DO control_part SEMI action_statement_nullable OD
Rule 186   do_action -> DO action_statement_nullable OD
Rule 187   control_part -> for_control while_control
Rule 188   control_part -> for_control
Rule 189   control_part -> while_control
Rule 190   for_control -> FOR iteration
Rule 191   iteration -> step_enumeration
Rule 192   iteration -> range_enumeration
Rule 193   step_enumeration -> identifier ASSIGN expression step_value DOWN end_value
Rule 194   step_enumeration -> identifier ASSIGN expression step_value end_value
Rule 195   step_enumeration -> identifier ASSIGN expression DOWN end_value
Rule 196   step_enumeration -> identifier ASSIGN expression end_value
Rule 197   step_value -> BY expression
Rule 198   end_value -> TO expression
Rule 199   range_enumeration -> identifier DOWN IN discrete_mode
Rule 200   range_enumeration -> identifier IN discrete_mode
Rule 201   while_control -> WHILE expression
Rule 202   empty -> <empty>

Terminals, with rules where they appear

ABS                  : 168
AND                  : 107
ARRAY                : 62
ARROW                : 73 104
ASC                  : 169
ASSIGN               : 13 14 20 27 150 151 193 194 195 196
BOOL                 : 50
BY                   : 197
CCONST               : 135
CHAR                 : 51
CHARS                : 60
COLON                : 28 54 77 131 139
COMMA                : 12 17 22 26 34 64 76 179
CONCAT               : 119
DCL                  : 15
DIVIDE               : 100
DO                   : 185 186
DOWN                 : 193 195 199
ELSE                 : 85 158
ELSIF                : 86 87 159 160
END                  : 29 30 31 32
EQUAL                : 109
EXIT                 : 180
FALSE                : 134
FI                   : 82 83 155 156
FOR                  : 190
GREATER              : 111
GTEQUAL              : 112
HAT                  : 136
ICONST               : 132 136
ID                   : 23 28 176 177
IF                   : 82 83 155 156
IN                   : 120 199 200
INT                  : 49
LBRACKET             : 60 62 74 77 130 131
LENGTH               : 173
LESS                 : 113
LOC                  : 35 37
LOWER                : 172
LPAREN               : 29 30 31 32 37 38 52 53 81 136 166 167 176 177
LTEQUAL              : 114
MINUS                : 102 118
MODULO               : 101
NOT                  : 103
NOTEQ                : 110
NULL                 : 137
NUM                  : 170
OD                   : 185 186
OR                   : 108
PLUS                 : 117
PRINT                : 175
PROC                 : 29 30 31 32
RBRACKET             : 60 62 74 77 130 131
READ                 : 174
REF                  : 57
RESULT               : 184
RETURN               : 181
RETURNS              : 37 38
RPAREN               : 29 30 31 32 37 38 52 53 81 136 166 167 176 177
SCONST               : 138
SEMI                 : 10 15 24 29 29 30 30 31 31 32 32 139 140 185
SYN                  : 10
THEN                 : 84 157
TIMES                : 99
TO                   : 198
TRUE                 : 133
TYPE                 : 24
UPPER                : 171
WHILE                : 201
error                : 

Nonterminals, with rules where they appear

action               : 139 140
action_statement     : 8 161 162
action_statement_list : 157 158
action_statement_nullable : 161 162 185 186
arithmetic_additive_operator : 115 152
arithmetic_multiplicative_operator : 93 153
array_element        : 70
array_location       : 73 74 77 96 104 149
array_mode           : 59
array_slice          : 71
assigning_operator   : 149
assignment_action    : 142
boolean_literal      : 126
boolean_mode         : 45
bracketed_action     : 141
builtin_call         : 165
builtin_name         : 166 167
call_action          : 72 143
character_literal    : 127
character_mode       : 46
character_string_literal : 129
closed_dyadic_operator : 150
composite_mode       : 42
conditional_expression : 80
control_part         : 185
declaration          : 16 17
declaration_list     : 15 17
declaration_statement : 5
dereferenced_reference : 69
discrete_mode        : 40 53 65 199 200
discrete_mode_name   : 52
discrete_range_mode  : 47
do_action            : 148
element_mode         : 62
else_clause          : 155 159
else_expression      : 82 83
elsif_expression     : 83 87
empty                : 4 163 183
empty_literal        : 128
end_value            : 193 194 195 196
exit_action          : 144
expression           : 13 14 20 55 56 75 76 81 82 83 84 85 86 87 131 131 149 155 156 159 160 178 179 182 184 193 194 195 196 197 198 201
expression_list      : 74 76 130
for_control          : 187 188
formal_parameter     : 33 34
formal_parameter_list : 29 30 34
identifier           : 21 22 43 48 68 139 180 193 194 195 196 199 200
identifier_list      : 13 14 18 19 22 27 35 36
if_action            : 147
index_mode           : 63 64
index_mode_list      : 62 64
initialization       : 18
integer_literal      : 61 125
integer_mode         : 44
iteration            : 190
literal              : 121
literal_range        : 52 53 66
location             : 78
lower_bound          : 54 77
membership_operator  : 105
mode                 : 13 18 19 27 35 36 37 38 57 67
mode_definition      : 25 26
mode_name            : 39
monadic_operator     : 94
newmode_list         : 24 26
newmode_statement    : 7
operand0             : 79 89
operand1             : 88 89 91
operand2             : 90 91 93
operand3             : 92 93
operand4             : 94 95
operator1            : 89
operator2            : 91
parameter_list       : 166 176 179
parenthesized_expression : 124
primitive_value      : 98 130 131
procedure_call       : 164
procedure_definition : 28
procedure_statement  : 9
program              : 0
range_enumeration    : 192
reference_mode       : 41
referenced_location  : 97
relational_operator  : 106
result               : 181
result_action        : 145
result_spec          : 29 31
return_action        : 146
statement            : 2 3
statement_list       : 1
statement_nullable   : 2 3 29 30 31 32
step_enumeration     : 191
step_value           : 193 194
string_concatenation_operator : 116 154
string_length        : 60
string_mode          : 58
synonym_definition   : 11 12
synonym_list         : 10 12
synonym_statement    : 6
then_clause          : 155 156 159 160
then_expression      : 82 83 86 87
upper_bound          : 54 77
value_array_element  : 122
value_array_slice    : 123
while_control        : 187 189

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement statement_nullable
    (5) statement -> . declaration_statement
    (6) statement -> . synonym_statement
    (7) statement -> . newmode_statement
    (8) statement -> . action_statement
    (9) statement -> . procedure_statement
    (15) declaration_statement -> . DCL declaration_list SEMI
    (10) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (139) action_statement -> . identifier COLON action SEMI
    (140) action_statement -> . action SEMI
    (28) procedure_statement -> . ID COLON procedure_definition
    (23) identifier -> . ID
    (141) action -> . bracketed_action
    (142) action -> . assignment_action
    (143) action -> . call_action
    (144) action -> . exit_action
    (145) action -> . result_action
    (146) action -> . return_action
    (147) bracketed_action -> . if_action
    (148) bracketed_action -> . do_action
    (149) assignment_action -> . array_location assigning_operator expression
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (180) exit_action -> . EXIT identifier
    (184) result_action -> . RESULT expression
    (181) return_action -> . RETURN result
    (155) if_action -> . IF expression then_clause else_clause FI
    (156) if_action -> . IF expression then_clause FI
    (185) do_action -> . DO control_part SEMI action_statement_nullable OD
    (186) do_action -> . DO action_statement_nullable OD
    (78) array_location -> . location
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    DCL             shift and go to state 4
    SYN             shift and go to state 30
    TYPE            shift and go to state 22
    ID              shift and go to state 12
    EXIT            shift and go to state 37
    RESULT          shift and go to state 43
    RETURN          shift and go to state 21
    IF              shift and go to state 6
    DO              shift and go to state 26
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    declaration_statement          shift and go to state 20
    builtin_call                   shift and go to state 1
    synonym_statement              shift and go to state 2
    action                         shift and go to state 24
    procedure_call                 shift and go to state 3
    assignment_action              shift and go to state 13
    location                       shift and go to state 38
    dereferenced_reference         shift and go to state 32
    identifier                     shift and go to state 7
    program                        shift and go to state 8
    array_element                  shift and go to state 9
    array_slice                    shift and go to state 28
    builtin_name                   shift and go to state 29
    bracketed_action               shift and go to state 31
    action_statement               shift and go to state 27
    result_action                  shift and go to state 23
    do_action                      shift and go to state 33
    statement                      shift and go to state 34
    call_action                    shift and go to state 35
    procedure_statement            shift and go to state 36
    return_action                  shift and go to state 15
    statement_list                 shift and go to state 16
    if_action                      shift and go to state 39
    array_location                 shift and go to state 18
    newmode_statement              shift and go to state 41
    exit_action                    shift and go to state 42

state 1

    (165) call_action -> builtin_call .

    ARROW           reduce using rule 165 (call_action -> builtin_call .)
    LBRACKET        reduce using rule 165 (call_action -> builtin_call .)
    TIMES           reduce using rule 165 (call_action -> builtin_call .)
    DIVIDE          reduce using rule 165 (call_action -> builtin_call .)
    MODULO          reduce using rule 165 (call_action -> builtin_call .)
    PLUS            reduce using rule 165 (call_action -> builtin_call .)
    MINUS           reduce using rule 165 (call_action -> builtin_call .)
    CONCAT          reduce using rule 165 (call_action -> builtin_call .)
    IN              reduce using rule 165 (call_action -> builtin_call .)
    AND             reduce using rule 165 (call_action -> builtin_call .)
    OR              reduce using rule 165 (call_action -> builtin_call .)
    EQUAL           reduce using rule 165 (call_action -> builtin_call .)
    NOTEQ           reduce using rule 165 (call_action -> builtin_call .)
    GREATER         reduce using rule 165 (call_action -> builtin_call .)
    GTEQUAL         reduce using rule 165 (call_action -> builtin_call .)
    LESS            reduce using rule 165 (call_action -> builtin_call .)
    LTEQUAL         reduce using rule 165 (call_action -> builtin_call .)
    COLON           reduce using rule 165 (call_action -> builtin_call .)
    SEMI            reduce using rule 165 (call_action -> builtin_call .)
    THEN            reduce using rule 165 (call_action -> builtin_call .)
    RPAREN          reduce using rule 165 (call_action -> builtin_call .)
    COMMA           reduce using rule 165 (call_action -> builtin_call .)
    RBRACKET        reduce using rule 165 (call_action -> builtin_call .)
    ELSE            reduce using rule 165 (call_action -> builtin_call .)
    ELSIF           reduce using rule 165 (call_action -> builtin_call .)
    DOWN            reduce using rule 165 (call_action -> builtin_call .)
    BY              reduce using rule 165 (call_action -> builtin_call .)
    TO              reduce using rule 165 (call_action -> builtin_call .)
    FI              reduce using rule 165 (call_action -> builtin_call .)
    WHILE           reduce using rule 165 (call_action -> builtin_call .)
    ASSIGN          reduce using rule 165 (call_action -> builtin_call .)


state 2

    (6) statement -> synonym_statement .

    DCL             reduce using rule 6 (statement -> synonym_statement .)
    SYN             reduce using rule 6 (statement -> synonym_statement .)
    TYPE            reduce using rule 6 (statement -> synonym_statement .)
    ID              reduce using rule 6 (statement -> synonym_statement .)
    EXIT            reduce using rule 6 (statement -> synonym_statement .)
    RESULT          reduce using rule 6 (statement -> synonym_statement .)
    RETURN          reduce using rule 6 (statement -> synonym_statement .)
    IF              reduce using rule 6 (statement -> synonym_statement .)
    DO              reduce using rule 6 (statement -> synonym_statement .)
    ABS             reduce using rule 6 (statement -> synonym_statement .)
    ASC             reduce using rule 6 (statement -> synonym_statement .)
    NUM             reduce using rule 6 (statement -> synonym_statement .)
    UPPER           reduce using rule 6 (statement -> synonym_statement .)
    LOWER           reduce using rule 6 (statement -> synonym_statement .)
    LENGTH          reduce using rule 6 (statement -> synonym_statement .)
    READ            reduce using rule 6 (statement -> synonym_statement .)
    PRINT           reduce using rule 6 (statement -> synonym_statement .)
    END             reduce using rule 6 (statement -> synonym_statement .)
    $end            reduce using rule 6 (statement -> synonym_statement .)


state 3

    (164) call_action -> procedure_call .

    ARROW           reduce using rule 164 (call_action -> procedure_call .)
    LBRACKET        reduce using rule 164 (call_action -> procedure_call .)
    TIMES           reduce using rule 164 (call_action -> procedure_call .)
    DIVIDE          reduce using rule 164 (call_action -> procedure_call .)
    MODULO          reduce using rule 164 (call_action -> procedure_call .)
    PLUS            reduce using rule 164 (call_action -> procedure_call .)
    MINUS           reduce using rule 164 (call_action -> procedure_call .)
    CONCAT          reduce using rule 164 (call_action -> procedure_call .)
    IN              reduce using rule 164 (call_action -> procedure_call .)
    AND             reduce using rule 164 (call_action -> procedure_call .)
    OR              reduce using rule 164 (call_action -> procedure_call .)
    EQUAL           reduce using rule 164 (call_action -> procedure_call .)
    NOTEQ           reduce using rule 164 (call_action -> procedure_call .)
    GREATER         reduce using rule 164 (call_action -> procedure_call .)
    GTEQUAL         reduce using rule 164 (call_action -> procedure_call .)
    LESS            reduce using rule 164 (call_action -> procedure_call .)
    LTEQUAL         reduce using rule 164 (call_action -> procedure_call .)
    COLON           reduce using rule 164 (call_action -> procedure_call .)
    SEMI            reduce using rule 164 (call_action -> procedure_call .)
    THEN            reduce using rule 164 (call_action -> procedure_call .)
    RPAREN          reduce using rule 164 (call_action -> procedure_call .)
    COMMA           reduce using rule 164 (call_action -> procedure_call .)
    RBRACKET        reduce using rule 164 (call_action -> procedure_call .)
    ELSE            reduce using rule 164 (call_action -> procedure_call .)
    ELSIF           reduce using rule 164 (call_action -> procedure_call .)
    DOWN            reduce using rule 164 (call_action -> procedure_call .)
    BY              reduce using rule 164 (call_action -> procedure_call .)
    TO              reduce using rule 164 (call_action -> procedure_call .)
    FI              reduce using rule 164 (call_action -> procedure_call .)
    WHILE           reduce using rule 164 (call_action -> procedure_call .)
    ASSIGN          reduce using rule 164 (call_action -> procedure_call .)


state 4

    (15) declaration_statement -> DCL . declaration_list SEMI
    (16) declaration_list -> . declaration
    (17) declaration_list -> . declaration COMMA declaration_list
    (18) declaration -> . identifier_list mode initialization
    (19) declaration -> . identifier_list mode
    (21) identifier_list -> . identifier
    (22) identifier_list -> . identifier COMMA identifier_list
    (23) identifier -> . ID

    ID              shift and go to state 44

    declaration                    shift and go to state 46
    declaration_list               shift and go to state 47
    identifier                     shift and go to state 45
    identifier_list                shift and go to state 48

state 5

    (169) builtin_name -> ASC .

    LPAREN          reduce using rule 169 (builtin_name -> ASC .)


state 6

    (155) if_action -> IF . expression then_clause else_clause FI
    (156) if_action -> IF . expression then_clause FI
    (79) expression -> . operand0
    (80) expression -> . conditional_expression
    (88) operand0 -> . operand1
    (89) operand0 -> . operand0 operator1 operand1
    (82) conditional_expression -> . IF expression then_expression else_expression FI
    (83) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (90) operand1 -> . operand2
    (91) operand1 -> . operand1 operator2 operand2
    (92) operand2 -> . operand3
    (93) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (94) operand3 -> . monadic_operator operand4
    (95) operand3 -> . operand4
    (102) monadic_operator -> . MINUS
    (103) monadic_operator -> . NOT
    (96) operand4 -> . array_location
    (97) operand4 -> . referenced_location
    (98) operand4 -> . primitive_value
    (78) array_location -> . location
    (104) referenced_location -> . ARROW array_location
    (121) primitive_value -> . literal
    (122) primitive_value -> . value_array_element
    (123) primitive_value -> . value_array_slice
    (124) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (125) literal -> . integer_literal
    (126) literal -> . boolean_literal
    (127) literal -> . character_literal
    (128) literal -> . empty_literal
    (129) literal -> . character_string_literal
    (130) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (131) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (81) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (132) integer_literal -> . ICONST
    (133) boolean_literal -> . TRUE
    (134) boolean_literal -> . FALSE
    (135) character_literal -> . CCONST
    (136) character_literal -> . HAT LPAREN ICONST RPAREN
    (137) empty_literal -> . NULL
    (138) character_string_literal -> . SCONST
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT

    IF              shift and go to state 53
    MINUS           shift and go to state 75
    NOT             shift and go to state 78
    ARROW           shift and go to state 54
    LPAREN          shift and go to state 51
    ID              shift and go to state 58
    ICONST          shift and go to state 72
    TRUE            shift and go to state 64
    FALSE           shift and go to state 63
    CCONST          shift and go to state 74
    HAT             shift and go to state 60
    NULL            shift and go to state 59
    SCONST          shift and go to state 69
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    operand1                       shift and go to state 49
    operand2                       shift and go to state 50
    boolean_literal                shift and go to state 71
    procedure_call                 shift and go to state 3
    empty_literal                  shift and go to state 68
    primitive_value                shift and go to state 52
    integer_literal                shift and go to state 77
    identifier                     shift and go to state 55
    builtin_call                   shift and go to state 1
    conditional_expression         shift and go to state 56
    value_array_slice              shift and go to state 57
    builtin_name                   shift and go to state 29
    dereferenced_reference         shift and go to state 32
    literal                        shift and go to state 61
    array_element                  shift and go to state 9
    referenced_location            shift and go to state 82
    operand0                       shift and go to state 62
    operand4                       shift and go to state 73
    array_slice                    shift and go to state 28
    operand3                       shift and go to state 65
    location                       shift and go to state 38
    character_string_literal       shift and go to state 66
    character_literal              shift and go to state 76
    call_action                    shift and go to state 80
    array_location                 shift and go to state 67
    value_array_element            shift and go to state 79
    monadic_operator               shift and go to state 81
    expression                     shift and go to state 83
    parenthesized_expression       shift and go to state 70

state 7

    (139) action_statement -> identifier . COLON action SEMI
    (68) location -> identifier .

    COLON           shift and go to state 84
    ARROW           reduce using rule 68 (location -> identifier .)
    LBRACKET        reduce using rule 68 (location -> identifier .)
    ASSIGN          reduce using rule 68 (location -> identifier .)
    PLUS            reduce using rule 68 (location -> identifier .)
    MINUS           reduce using rule 68 (location -> identifier .)
    TIMES           reduce using rule 68 (location -> identifier .)
    DIVIDE          reduce using rule 68 (location -> identifier .)
    MODULO          reduce using rule 68 (location -> identifier .)
    CONCAT          reduce using rule 68 (location -> identifier .)


state 8

    (0) S' -> program .



state 9

    (70) location -> array_element .

    ARROW           reduce using rule 70 (location -> array_element .)
    LBRACKET        reduce using rule 70 (location -> array_element .)
    ASSIGN          reduce using rule 70 (location -> array_element .)
    PLUS            reduce using rule 70 (location -> array_element .)
    MINUS           reduce using rule 70 (location -> array_element .)
    TIMES           reduce using rule 70 (location -> array_element .)
    DIVIDE          reduce using rule 70 (location -> array_element .)
    MODULO          reduce using rule 70 (location -> array_element .)
    CONCAT          reduce using rule 70 (location -> array_element .)
    IN              reduce using rule 70 (location -> array_element .)
    AND             reduce using rule 70 (location -> array_element .)
    OR              reduce using rule 70 (location -> array_element .)
    EQUAL           reduce using rule 70 (location -> array_element .)
    NOTEQ           reduce using rule 70 (location -> array_element .)
    GREATER         reduce using rule 70 (location -> array_element .)
    GTEQUAL         reduce using rule 70 (location -> array_element .)
    LESS            reduce using rule 70 (location -> array_element .)
    LTEQUAL         reduce using rule 70 (location -> array_element .)
    COMMA           reduce using rule 70 (location -> array_element .)
    RPAREN          reduce using rule 70 (location -> array_element .)
    THEN            reduce using rule 70 (location -> array_element .)
    COLON           reduce using rule 70 (location -> array_element .)
    RBRACKET        reduce using rule 70 (location -> array_element .)
    DOWN            reduce using rule 70 (location -> array_element .)
    BY              reduce using rule 70 (location -> array_element .)
    TO              reduce using rule 70 (location -> array_element .)
    FI              reduce using rule 70 (location -> array_element .)
    SEMI            reduce using rule 70 (location -> array_element .)
    ELSE            reduce using rule 70 (location -> array_element .)
    ELSIF           reduce using rule 70 (location -> array_element .)
    WHILE           reduce using rule 70 (location -> array_element .)


state 10

    (170) builtin_name -> NUM .

    LPAREN          reduce using rule 170 (builtin_name -> NUM .)


state 11

    (174) builtin_name -> READ .

    LPAREN          reduce using rule 174 (builtin_name -> READ .)


state 12

    (28) procedure_statement -> ID . COLON procedure_definition
    (23) identifier -> ID .
    (176) procedure_call -> ID . LPAREN parameter_list RPAREN
    (177) procedure_call -> ID . LPAREN RPAREN

  ! shift/reduce conflict for COLON resolved as shift
    COLON           shift and go to state 86
    ARROW           reduce using rule 23 (identifier -> ID .)
    LBRACKET        reduce using rule 23 (identifier -> ID .)
    ASSIGN          reduce using rule 23 (identifier -> ID .)
    PLUS            reduce using rule 23 (identifier -> ID .)
    MINUS           reduce using rule 23 (identifier -> ID .)
    TIMES           reduce using rule 23 (identifier -> ID .)
    DIVIDE          reduce using rule 23 (identifier -> ID .)
    MODULO          reduce using rule 23 (identifier -> ID .)
    CONCAT          reduce using rule 23 (identifier -> ID .)
    LPAREN          shift and go to state 85

  ! COLON           [ reduce using rule 23 (identifier -> ID .) ]


state 13

    (142) action -> assignment_action .

    SEMI            reduce using rule 142 (action -> assignment_action .)


state 14

    (173) builtin_name -> LENGTH .

    LPAREN          reduce using rule 173 (builtin_name -> LENGTH .)


state 15

    (146) action -> return_action .

    SEMI            reduce using rule 146 (action -> return_action .)


state 16

    (1) program -> statement_list .

    $end            reduce using rule 1 (program -> statement_list .)


state 17

    (172) builtin_name -> LOWER .

    LPAREN          reduce using rule 172 (builtin_name -> LOWER .)


state 18

    (149) assignment_action -> array_location . assigning_operator expression
    (73) dereferenced_reference -> array_location . ARROW
    (74) array_element -> array_location . LBRACKET expression_list RBRACKET
    (77) array_slice -> array_location . LBRACKET lower_bound COLON upper_bound RBRACKET
    (150) assigning_operator -> . closed_dyadic_operator ASSIGN
    (151) assigning_operator -> . ASSIGN
    (152) closed_dyadic_operator -> . arithmetic_additive_operator
    (153) closed_dyadic_operator -> . arithmetic_multiplicative_operator
    (154) closed_dyadic_operator -> . string_concatenation_operator
    (117) arithmetic_additive_operator -> . PLUS
    (118) arithmetic_additive_operator -> . MINUS
    (99) arithmetic_multiplicative_operator -> . TIMES
    (100) arithmetic_multiplicative_operator -> . DIVIDE
    (101) arithmetic_multiplicative_operator -> . MODULO
    (119) string_concatenation_operator -> . CONCAT

    ARROW           shift and go to state 95
    LBRACKET        shift and go to state 89
    ASSIGN          shift and go to state 94
    PLUS            shift and go to state 97
    MINUS           shift and go to state 96
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 92
    MODULO          shift and go to state 93
    CONCAT          shift and go to state 88

    closed_dyadic_operator         shift and go to state 91
    arithmetic_multiplicative_operator shift and go to state 87
    string_concatenation_operator  shift and go to state 90
    assigning_operator             shift and go to state 98
    arithmetic_additive_operator   shift and go to state 99

state 19

    (168) builtin_name -> ABS .

    LPAREN          reduce using rule 168 (builtin_name -> ABS .)


state 20

    (5) statement -> declaration_statement .

    DCL             reduce using rule 5 (statement -> declaration_statement .)
    SYN             reduce using rule 5 (statement -> declaration_statement .)
    TYPE            reduce using rule 5 (statement -> declaration_statement .)
    ID              reduce using rule 5 (statement -> declaration_statement .)
    EXIT            reduce using rule 5 (statement -> declaration_statement .)
    RESULT          reduce using rule 5 (statement -> declaration_statement .)
    RETURN          reduce using rule 5 (statement -> declaration_statement .)
    IF              reduce using rule 5 (statement -> declaration_statement .)
    DO              reduce using rule 5 (statement -> declaration_statement .)
    ABS             reduce using rule 5 (statement -> declaration_statement .)
    ASC             reduce using rule 5 (statement -> declaration_statement .)
    NUM             reduce using rule 5 (statement -> declaration_statement .)
    UPPER           reduce using rule 5 (statement -> declaration_statement .)
    LOWER           reduce using rule 5 (statement -> declaration_statement .)
    LENGTH          reduce using rule 5 (statement -> declaration_statement .)
    READ            reduce using rule 5 (statement -> declaration_statement .)
    PRINT           reduce using rule 5 (statement -> declaration_statement .)
    END             reduce using rule 5 (statement -> declaration_statement .)
    $end            reduce using rule 5 (statement -> declaration_statement .)


state 21

    (181) return_action -> RETURN . result
    (182) result -> . expression
    (183) result -> . empty
    (79) expression -> . operand0
    (80) expression -> . conditional_expression
    (202) empty -> .
    (88) operand0 -> . operand1
    (89) operand0 -> . operand0 operator1 operand1
    (82) conditional_expression -> . IF expression then_expression else_expression FI
    (83) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (90) operand1 -> . operand2
    (91) operand1 -> . operand1 operator2 operand2
    (92) operand2 -> . operand3
    (93) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (94) operand3 -> . monadic_operator operand4
    (95) operand3 -> . operand4
    (102) monadic_operator -> . MINUS
    (103) monadic_operator -> . NOT
    (96) operand4 -> . array_location
    (97) operand4 -> . referenced_location
    (98) operand4 -> . primitive_value
    (78) array_location -> . location
    (104) referenced_location -> . ARROW array_location
    (121) primitive_value -> . literal
    (122) primitive_value -> . value_array_element
    (123) primitive_value -> . value_array_slice
    (124) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (125) literal -> . integer_literal
    (126) literal -> . boolean_literal
    (127) literal -> . character_literal
    (128) literal -> . empty_literal
    (129) literal -> . character_string_literal
    (130) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (131) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (81) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (132) integer_literal -> . ICONST
    (133) boolean_literal -> . TRUE
    (134) boolean_literal -> . FALSE
    (135) character_literal -> . CCONST
    (136) character_literal -> . HAT LPAREN ICONST RPAREN
    (137) empty_literal -> . NULL
    (138) character_string_literal -> . SCONST
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT

    SEMI            reduce using rule 202 (empty -> .)
    IF              shift and go to state 53
    MINUS           shift and go to state 75
    NOT             shift and go to state 78
    ARROW           shift and go to state 54
    LPAREN          shift and go to state 51
    ID              shift and go to state 58
    ICONST          shift and go to state 72
    TRUE            shift and go to state 64
    FALSE           shift and go to state 63
    CCONST          shift and go to state 74
    HAT             shift and go to state 60
    NULL            shift and go to state 59
    SCONST          shift and go to state 69
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    operand1                       shift and go to state 49
    operand2                       shift and go to state 50
    operand0                       shift and go to state 62
    boolean_literal                shift and go to state 71
    empty_literal                  shift and go to state 68
    array_slice                    shift and go to state 28
    procedure_call                 shift and go to state 3
    result                         shift and go to state 102
    primitive_value                shift and go to state 52
    integer_literal                shift and go to state 77
    identifier                     shift and go to state 55
    builtin_call                   shift and go to state 1
    conditional_expression         shift and go to state 56
    value_array_slice              shift and go to state 57
    builtin_name                   shift and go to state 29
    dereferenced_reference         shift and go to state 32
    literal                        shift and go to state 61
    array_element                  shift and go to state 9
    operand4                       shift and go to state 73
    empty                          shift and go to state 101
    operand3                       shift and go to state 65
    location                       shift and go to state 38
    character_string_literal       shift and go to state 66
    character_literal              shift and go to state 76
    call_action                    shift and go to state 80
    array_location                 shift and go to state 67
    value_array_element            shift and go to state 79
    monadic_operator               shift and go to state 81
    referenced_location            shift and go to state 82
    expression                     shift and go to state 103
    parenthesized_expression       shift and go to state 70

state 22

    (24) newmode_statement -> TYPE . newmode_list SEMI
    (25) newmode_list -> . mode_definition
    (26) newmode_list -> . mode_definition COMMA newmode_list
    (27) mode_definition -> . identifier_list ASSIGN mode
    (21) identifier_list -> . identifier
    (22) identifier_list -> . identifier COMMA identifier_list
    (23) identifier -> . ID

    ID              shift and go to state 44

    newmode_list                   shift and go to state 104
    mode_definition                shift and go to state 105
    identifier                     shift and go to state 45
    identifier_list                shift and go to state 106

state 23

    (145) action -> result_action .

    SEMI            reduce using rule 145 (action -> result_action .)


state 24

    (140) action_statement -> action . SEMI

    SEMI            shift and go to state 107


state 25

    (175) builtin_name -> PRINT .

    LPAREN          reduce using rule 175 (builtin_name -> PRINT .)


state 26

    (185) do_action -> DO . control_part SEMI action_statement_nullable OD
    (186) do_action -> DO . action_statement_nullable OD
    (187) control_part -> . for_control while_control
    (188) control_part -> . for_control
    (189) control_part -> . while_control
    (162) action_statement_nullable -> . action_statement action_statement_nullable
    (163) action_statement_nullable -> . empty
    (190) for_control -> . FOR iteration
    (201) while_control -> . WHILE expression
    (139) action_statement -> . identifier COLON action SEMI
    (140) action_statement -> . action SEMI
    (202) empty -> .
    (23) identifier -> . ID
    (141) action -> . bracketed_action
    (142) action -> . assignment_action
    (143) action -> . call_action
    (144) action -> . exit_action
    (145) action -> . result_action
    (146) action -> . return_action
    (147) bracketed_action -> . if_action
    (148) bracketed_action -> . do_action
    (149) assignment_action -> . array_location assigning_operator expression
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (180) exit_action -> . EXIT identifier
    (184) result_action -> . RESULT expression
    (181) return_action -> . RETURN result
    (155) if_action -> . IF expression then_clause else_clause FI
    (156) if_action -> . IF expression then_clause FI
    (185) do_action -> . DO control_part SEMI action_statement_nullable OD
    (186) do_action -> . DO action_statement_nullable OD
    (78) array_location -> . location
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    FOR             shift and go to state 114
    WHILE           shift and go to state 111
    OD              reduce using rule 202 (empty -> .)
    ID              shift and go to state 58
    EXIT            shift and go to state 37
    RESULT          shift and go to state 43
    RETURN          shift and go to state 21
    IF              shift and go to state 6
    DO              shift and go to state 26
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    builtin_call                   shift and go to state 1
    result_action                  shift and go to state 23
    action                         shift and go to state 24
    procedure_call                 shift and go to state 3
    control_part                   shift and go to state 108
    action_statement_nullable      shift and go to state 110
    for_control                    shift and go to state 109
    dereferenced_reference         shift and go to state 32
    identifier                     shift and go to state 7
    action_statement               shift and go to state 113
    array_element                  shift and go to state 9
    while_control                  shift and go to state 112
    builtin_name                   shift and go to state 29
    bracketed_action               shift and go to state 31
    do_action                      shift and go to state 33
    call_action                    shift and go to state 35
    empty                          shift and go to state 115
    array_slice                    shift and go to state 28
    return_action                  shift and go to state 15
    location                       shift and go to state 38
    if_action                      shift and go to state 39
    array_location                 shift and go to state 18
    assignment_action              shift and go to state 13
    exit_action                    shift and go to state 42

state 27

    (8) statement -> action_statement .

    DCL             reduce using rule 8 (statement -> action_statement .)
    SYN             reduce using rule 8 (statement -> action_statement .)
    TYPE            reduce using rule 8 (statement -> action_statement .)
    ID              reduce using rule 8 (statement -> action_statement .)
    EXIT            reduce using rule 8 (statement -> action_statement .)
    RESULT          reduce using rule 8 (statement -> action_statement .)
    RETURN          reduce using rule 8 (statement -> action_statement .)
    IF              reduce using rule 8 (statement -> action_statement .)
    DO              reduce using rule 8 (statement -> action_statement .)
    ABS             reduce using rule 8 (statement -> action_statement .)
    ASC             reduce using rule 8 (statement -> action_statement .)
    NUM             reduce using rule 8 (statement -> action_statement .)
    UPPER           reduce using rule 8 (statement -> action_statement .)
    LOWER           reduce using rule 8 (statement -> action_statement .)
    LENGTH          reduce using rule 8 (statement -> action_statement .)
    READ            reduce using rule 8 (statement -> action_statement .)
    PRINT           reduce using rule 8 (statement -> action_statement .)
    END             reduce using rule 8 (statement -> action_statement .)
    $end            reduce using rule 8 (statement -> action_statement .)


state 28

    (71) location -> array_slice .

    ARROW           reduce using rule 71 (location -> array_slice .)
    LBRACKET        reduce using rule 71 (location -> array_slice .)
    ASSIGN          reduce using rule 71 (location -> array_slice .)
    PLUS            reduce using rule 71 (location -> array_slice .)
    MINUS           reduce using rule 71 (location -> array_slice .)
    TIMES           reduce using rule 71 (location -> array_slice .)
    DIVIDE          reduce using rule 71 (location -> array_slice .)
    MODULO          reduce using rule 71 (location -> array_slice .)
    CONCAT          reduce using rule 71 (location -> array_slice .)
    IN              reduce using rule 71 (location -> array_slice .)
    AND             reduce using rule 71 (location -> array_slice .)
    OR              reduce using rule 71 (location -> array_slice .)
    EQUAL           reduce using rule 71 (location -> array_slice .)
    NOTEQ           reduce using rule 71 (location -> array_slice .)
    GREATER         reduce using rule 71 (location -> array_slice .)
    GTEQUAL         reduce using rule 71 (location -> array_slice .)
    LESS            reduce using rule 71 (location -> array_slice .)
    LTEQUAL         reduce using rule 71 (location -> array_slice .)
    COMMA           reduce using rule 71 (location -> array_slice .)
    RPAREN          reduce using rule 71 (location -> array_slice .)
    THEN            reduce using rule 71 (location -> array_slice .)
    COLON           reduce using rule 71 (location -> array_slice .)
    RBRACKET        reduce using rule 71 (location -> array_slice .)
    DOWN            reduce using rule 71 (location -> array_slice .)
    BY              reduce using rule 71 (location -> array_slice .)
    TO              reduce using rule 71 (location -> array_slice .)
    FI              reduce using rule 71 (location -> array_slice .)
    SEMI            reduce using rule 71 (location -> array_slice .)
    ELSE            reduce using rule 71 (location -> array_slice .)
    ELSIF           reduce using rule 71 (location -> array_slice .)
    WHILE           reduce using rule 71 (location -> array_slice .)


state 29

    (166) builtin_call -> builtin_name . LPAREN parameter_list RPAREN
    (167) builtin_call -> builtin_name . LPAREN RPAREN

    LPAREN          shift and go to state 116


state 30

    (10) synonym_statement -> SYN . synonym_list SEMI
    (11) synonym_list -> . synonym_definition
    (12) synonym_list -> . synonym_definition COMMA synonym_list
    (13) synonym_definition -> . identifier_list mode ASSIGN expression
    (14) synonym_definition -> . identifier_list ASSIGN expression
    (21) identifier_list -> . identifier
    (22) identifier_list -> . identifier COMMA identifier_list
    (23) identifier -> . ID

    ID              shift and go to state 44

    synonym_list                   shift and go to state 117
    identifier_list                shift and go to state 119
    synonym_definition             shift and go to state 118
    identifier                     shift and go to state 45

state 31

    (141) action -> bracketed_action .

    SEMI            reduce using rule 141 (action -> bracketed_action .)


state 32

    (69) location -> dereferenced_reference .

    ARROW           reduce using rule 69 (location -> dereferenced_reference .)
    LBRACKET        reduce using rule 69 (location -> dereferenced_reference .)
    ASSIGN          reduce using rule 69 (location -> dereferenced_reference .)
    PLUS            reduce using rule 69 (location -> dereferenced_reference .)
    MINUS           reduce using rule 69 (location -> dereferenced_reference .)
    TIMES           reduce using rule 69 (location -> dereferenced_reference .)
    DIVIDE          reduce using rule 69 (location -> dereferenced_reference .)
    MODULO          reduce using rule 69 (location -> dereferenced_reference .)
    CONCAT          reduce using rule 69 (location -> dereferenced_reference .)
    IN              reduce using rule 69 (location -> dereferenced_reference .)
    AND             reduce using rule 69 (location -> dereferenced_reference .)
    OR              reduce using rule 69 (location -> dereferenced_reference .)
    EQUAL           reduce using rule 69 (location -> dereferenced_reference .)
    NOTEQ           reduce using rule 69 (location -> dereferenced_reference .)
    GREATER         reduce using rule 69 (location -> dereferenced_reference .)
    GTEQUAL         reduce using rule 69 (location -> dereferenced_reference .)
    LESS            reduce using rule 69 (location -> dereferenced_reference .)
    LTEQUAL         reduce using rule 69 (location -> dereferenced_reference .)
    COMMA           reduce using rule 69 (location -> dereferenced_reference .)
    RPAREN          reduce using rule 69 (location -> dereferenced_reference .)
    THEN            reduce using rule 69 (location -> dereferenced_reference .)
    COLON           reduce using rule 69 (location -> dereferenced_reference .)
    RBRACKET        reduce using rule 69 (location -> dereferenced_reference .)
    DOWN            reduce using rule 69 (location -> dereferenced_reference .)
    BY              reduce using rule 69 (location -> dereferenced_reference .)
    TO              reduce using rule 69 (location -> dereferenced_reference .)
    FI              reduce using rule 69 (location -> dereferenced_reference .)
    SEMI            reduce using rule 69 (location -> dereferenced_reference .)
    ELSE            reduce using rule 69 (location -> dereferenced_reference .)
    ELSIF           reduce using rule 69 (location -> dereferenced_reference .)
    WHILE           reduce using rule 69 (location -> dereferenced_reference .)


state 33

    (148) bracketed_action -> do_action .

    SEMI            reduce using rule 148 (bracketed_action -> do_action .)


state 34

    (2) statement_list -> statement . statement_nullable
    (3) statement_nullable -> . statement statement_nullable
    (4) statement_nullable -> . empty
    (5) statement -> . declaration_statement
    (6) statement -> . synonym_statement
    (7) statement -> . newmode_statement
    (8) statement -> . action_statement
    (9) statement -> . procedure_statement
    (202) empty -> .
    (15) declaration_statement -> . DCL declaration_list SEMI
    (10) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (139) action_statement -> . identifier COLON action SEMI
    (140) action_statement -> . action SEMI
    (28) procedure_statement -> . ID COLON procedure_definition
    (23) identifier -> . ID
    (141) action -> . bracketed_action
    (142) action -> . assignment_action
    (143) action -> . call_action
    (144) action -> . exit_action
    (145) action -> . result_action
    (146) action -> . return_action
    (147) bracketed_action -> . if_action
    (148) bracketed_action -> . do_action
    (149) assignment_action -> . array_location assigning_operator expression
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (180) exit_action -> . EXIT identifier
    (184) result_action -> . RESULT expression
    (181) return_action -> . RETURN result
    (155) if_action -> . IF expression then_clause else_clause FI
    (156) if_action -> . IF expression then_clause FI
    (185) do_action -> . DO control_part SEMI action_statement_nullable OD
    (186) do_action -> . DO action_statement_nullable OD
    (78) array_location -> . location
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    $end            reduce using rule 202 (empty -> .)
    DCL             shift and go to state 4
    SYN             shift and go to state 30
    TYPE            shift and go to state 22
    ID              shift and go to state 12
    EXIT            shift and go to state 37
    RESULT          shift and go to state 43
    RETURN          shift and go to state 21
    IF              shift and go to state 6
    DO              shift and go to state 26
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    declaration_statement          shift and go to state 20
    synonym_statement              shift and go to state 2
    builtin_call                   shift and go to state 1
    result_action                  shift and go to state 23
    action                         shift and go to state 24
    procedure_call                 shift and go to state 3
    assignment_action              shift and go to state 13
    statement_nullable             shift and go to state 120
    location                       shift and go to state 38
    identifier                     shift and go to state 7
    action_statement               shift and go to state 27
    array_element                  shift and go to state 9
    array_slice                    shift and go to state 28
    builtin_name                   shift and go to state 29
    bracketed_action               shift and go to state 31
    dereferenced_reference         shift and go to state 32
    do_action                      shift and go to state 33
    statement                      shift and go to state 121
    call_action                    shift and go to state 35
    empty                          shift and go to state 122
    procedure_statement            shift and go to state 36
    return_action                  shift and go to state 15
    if_action                      shift and go to state 39
    array_location                 shift and go to state 18
    newmode_statement              shift and go to state 41
    exit_action                    shift and go to state 42

state 35

    (143) action -> call_action .
    (72) location -> call_action .

    SEMI            reduce using rule 143 (action -> call_action .)
    ARROW           reduce using rule 72 (location -> call_action .)
    LBRACKET        reduce using rule 72 (location -> call_action .)
    ASSIGN          reduce using rule 72 (location -> call_action .)
    PLUS            reduce using rule 72 (location -> call_action .)
    MINUS           reduce using rule 72 (location -> call_action .)
    TIMES           reduce using rule 72 (location -> call_action .)
    DIVIDE          reduce using rule 72 (location -> call_action .)
    MODULO          reduce using rule 72 (location -> call_action .)
    CONCAT          reduce using rule 72 (location -> call_action .)


state 36

    (9) statement -> procedure_statement .

    DCL             reduce using rule 9 (statement -> procedure_statement .)
    SYN             reduce using rule 9 (statement -> procedure_statement .)
    TYPE            reduce using rule 9 (statement -> procedure_statement .)
    ID              reduce using rule 9 (statement -> procedure_statement .)
    EXIT            reduce using rule 9 (statement -> procedure_statement .)
    RESULT          reduce using rule 9 (statement -> procedure_statement .)
    RETURN          reduce using rule 9 (statement -> procedure_statement .)
    IF              reduce using rule 9 (statement -> procedure_statement .)
    DO              reduce using rule 9 (statement -> procedure_statement .)
    ABS             reduce using rule 9 (statement -> procedure_statement .)
    ASC             reduce using rule 9 (statement -> procedure_statement .)
    NUM             reduce using rule 9 (statement -> procedure_statement .)
    UPPER           reduce using rule 9 (statement -> procedure_statement .)
    LOWER           reduce using rule 9 (statement -> procedure_statement .)
    LENGTH          reduce using rule 9 (statement -> procedure_statement .)
    READ            reduce using rule 9 (statement -> procedure_statement .)
    PRINT           reduce using rule 9 (statement -> procedure_statement .)
    END             reduce using rule 9 (statement -> procedure_statement .)
    $end            reduce using rule 9 (statement -> procedure_statement .)


state 37

    (180) exit_action -> EXIT . identifier
    (23) identifier -> . ID

    ID              shift and go to state 44

    identifier                     shift and go to state 123

state 38

    (78) array_location -> location .

    ARROW           reduce using rule 78 (array_location -> location .)
    LBRACKET        reduce using rule 78 (array_location -> location .)
    TIMES           reduce using rule 78 (array_location -> location .)
    DIVIDE          reduce using rule 78 (array_location -> location .)
    MODULO          reduce using rule 78 (array_location -> location .)
    PLUS            reduce using rule 78 (array_location -> location .)
    MINUS           reduce using rule 78 (array_location -> location .)
    CONCAT          reduce using rule 78 (array_location -> location .)
    IN              reduce using rule 78 (array_location -> location .)
    AND             reduce using rule 78 (array_location -> location .)
    OR              reduce using rule 78 (array_location -> location .)
    EQUAL           reduce using rule 78 (array_location -> location .)
    NOTEQ           reduce using rule 78 (array_location -> location .)
    GREATER         reduce using rule 78 (array_location -> location .)
    GTEQUAL         reduce using rule 78 (array_location -> location .)
    LESS            reduce using rule 78 (array_location -> location .)
    LTEQUAL         reduce using rule 78 (array_location -> location .)
    THEN            reduce using rule 78 (array_location -> location .)
    SEMI            reduce using rule 78 (array_location -> location .)
    RPAREN          reduce using rule 78 (array_location -> location .)
    COMMA           reduce using rule 78 (array_location -> location .)
    RBRACKET        reduce using rule 78 (array_location -> location .)
    COLON           reduce using rule 78 (array_location -> location .)
    ELSE            reduce using rule 78 (array_location -> location .)
    ELSIF           reduce using rule 78 (array_location -> location .)
    DOWN            reduce using rule 78 (array_location -> location .)
    BY              reduce using rule 78 (array_location -> location .)
    TO              reduce using rule 78 (array_location -> location .)
    FI              reduce using rule 78 (array_location -> location .)
    WHILE           reduce using rule 78 (array_location -> location .)
    ASSIGN          reduce using rule 78 (array_location -> location .)


state 39

    (147) bracketed_action -> if_action .

    SEMI            reduce using rule 147 (bracketed_action -> if_action .)


state 40

    (171) builtin_name -> UPPER .

    LPAREN          reduce using rule 171 (builtin_name -> UPPER .)


state 41

    (7) statement -> newmode_statement .

    DCL             reduce using rule 7 (statement -> newmode_statement .)
    SYN             reduce using rule 7 (statement -> newmode_statement .)
    TYPE            reduce using rule 7 (statement -> newmode_statement .)
    ID              reduce using rule 7 (statement -> newmode_statement .)
    EXIT            reduce using rule 7 (statement -> newmode_statement .)
    RESULT          reduce using rule 7 (statement -> newmode_statement .)
    RETURN          reduce using rule 7 (statement -> newmode_statement .)
    IF              reduce using rule 7 (statement -> newmode_statement .)
    DO              reduce using rule 7 (statement -> newmode_statement .)
    ABS             reduce using rule 7 (statement -> newmode_statement .)
    ASC             reduce using rule 7 (statement -> newmode_statement .)
    NUM             reduce using rule 7 (statement -> newmode_statement .)
    UPPER           reduce using rule 7 (statement -> newmode_statement .)
    LOWER           reduce using rule 7 (statement -> newmode_statement .)
    LENGTH          reduce using rule 7 (statement -> newmode_statement .)
    READ            reduce using rule 7 (statement -> newmode_statement .)
    PRINT           reduce using rule 7 (statement -> newmode_statement .)
    END             reduce using rule 7 (statement -> newmode_statement .)
    $end            reduce using rule 7 (statement -> newmode_statement .)


state 42

    (144) action -> exit_action .

    SEMI            reduce using rule 144 (action -> exit_action .)


state 43

    (184) result_action -> RESULT . expression
    (79) expression -> . operand0
    (80) expression -> . conditional_expression
    (88) operand0 -> . operand1
    (89) operand0 -> . operand0 operator1 operand1
    (82) conditional_expression -> . IF expression then_expression else_expression FI
    (83) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (90) operand1 -> . operand2
    (91) operand1 -> . operand1 operator2 operand2
    (92) operand2 -> . operand3
    (93) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (94) operand3 -> . monadic_operator operand4
    (95) operand3 -> . operand4
    (102) monadic_operator -> . MINUS
    (103) monadic_operator -> . NOT
    (96) operand4 -> . array_location
    (97) operand4 -> . referenced_location
    (98) operand4 -> . primitive_value
    (78) array_location -> . location
    (104) referenced_location -> . ARROW array_location
    (121) primitive_value -> . literal
    (122) primitive_value -> . value_array_element
    (123) primitive_value -> . value_array_slice
    (124) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (125) literal -> . integer_literal
    (126) literal -> . boolean_literal
    (127) literal -> . character_literal
    (128) literal -> . empty_literal
    (129) literal -> . character_string_literal
    (130) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (131) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (81) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (132) integer_literal -> . ICONST
    (133) boolean_literal -> . TRUE
    (134) boolean_literal -> . FALSE
    (135) character_literal -> . CCONST
    (136) character_literal -> . HAT LPAREN ICONST RPAREN
    (137) empty_literal -> . NULL
    (138) character_string_literal -> . SCONST
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT

    IF              shift and go to state 53
    MINUS           shift and go to state 75
    NOT             shift and go to state 78
    ARROW           shift and go to state 54
    LPAREN          shift and go to state 51
    ID              shift and go to state 58
    ICONST          shift and go to state 72
    TRUE            shift and go to state 64
    FALSE           shift and go to state 63
    CCONST          shift and go to state 74
    HAT             shift and go to state 60
    NULL            shift and go to state 59
    SCONST          shift and go to state 69
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    operand1                       shift and go to state 49
    operand2                       shift and go to state 50
    boolean_literal                shift and go to state 71
    procedure_call                 shift and go to state 3
    empty_literal                  shift and go to state 68
    primitive_value                shift and go to state 52
    integer_literal                shift and go to state 77
    identifier                     shift and go to state 55
    builtin_call                   shift and go to state 1
    conditional_expression         shift and go to state 56
    value_array_slice              shift and go to state 57
    builtin_name                   shift and go to state 29
    dereferenced_reference         shift and go to state 32
    literal                        shift and go to state 61
    array_element                  shift and go to state 9
    operand0                       shift and go to state 62
    operand4                       shift and go to state 73
    array_slice                    shift and go to state 28
    operand3                       shift and go to state 65
    location                       shift and go to state 38
    character_string_literal       shift and go to state 66
    character_literal              shift and go to state 76
    call_action                    shift and go to state 80
    array_location                 shift and go to state 67
    value_array_element            shift and go to state 79
    monadic_operator               shift and go to state 81
    referenced_location            shift and go to state 82
    expression                     shift and go to state 124
    parenthesized_expression       shift and go to state 70

state 44

    (23) identifier -> ID .

    COMMA           reduce using rule 23 (identifier -> ID .)
    ASSIGN          reduce using rule 23 (identifier -> ID .)
    REF             reduce using rule 23 (identifier -> ID .)
    ID              reduce using rule 23 (identifier -> ID .)
    INT             reduce using rule 23 (identifier -> ID .)
    BOOL            reduce using rule 23 (identifier -> ID .)
    CHAR            reduce using rule 23 (identifier -> ID .)
    CHARS           reduce using rule 23 (identifier -> ID .)
    ARRAY           reduce using rule 23 (identifier -> ID .)
    SEMI            reduce using rule 23 (identifier -> ID .)
    LOC             reduce using rule 23 (identifier -> ID .)
    RPAREN          reduce using rule 23 (identifier -> ID .)
    LPAREN          reduce using rule 23 (identifier -> ID .)
    DOWN            reduce using rule 23 (identifier -> ID .)
    IN              reduce using rule 23 (identifier -> ID .)


state 45

    (21) identifier_list -> identifier .
    (22) identifier_list -> identifier . COMMA identifier_list

    ASSIGN          reduce using rule 21 (identifier_list -> identifier .)
    REF             reduce using rule 21 (identifier_list -> identifier .)
    ID              reduce using rule 21 (identifier_list -> identifier .)
    INT             reduce using rule 21 (identifier_list -> identifier .)
    BOOL            reduce using rule 21 (identifier_list -> identifier .)
    CHAR            reduce using rule 21 (identifier_list -> identifier .)
    CHARS           reduce using rule 21 (identifier_list -> identifier .)
    ARRAY           reduce using rule 21 (identifier_list -> identifier .)
    COMMA           shift and go to state 125


state 46

    (16) declaration_list -> declaration .
    (17) declaration_list -> declaration . COMMA declaration_list

    SEMI            reduce using rule 16 (declaration_list -> declaration .)
    COMMA           shift and go to state 126


state 47

    (15) declaration_statement -> DCL declaration_list . SEMI

    SEMI            shift and go to state 127


state 48

    (18) declaration -> identifier_list . mode initialization
    (19) declaration -> identifier_list . mode
    (39) mode -> . mode_name
    (40) mode -> . discrete_mode
    (41) mode -> . reference_mode
    (42) mode -> . composite_mode
    (43) mode_name -> . identifier
    (44) discrete_mode -> . integer_mode
    (45) discrete_mode -> . boolean_mode
    (46) discrete_mode -> . character_mode
    (47) discrete_mode -> . discrete_range_mode
    (57) reference_mode -> . REF mode
    (58) composite_mode -> . string_mode
    (59) composite_mode -> . array_mode
    (23) identifier -> . ID
    (49) integer_mode -> . INT
    (50) boolean_mode -> . BOOL
    (51) character_mode -> . CHAR
    (52) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (53) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (60) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (62) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (48) discrete_mode_name -> . identifier

    REF             shift and go to state 143
    ID              shift and go to state 44
    INT             shift and go to state 136
    BOOL            shift and go to state 133
    CHAR            shift and go to state 144
    CHARS           shift and go to state 129
    ARRAY           shift and go to state 131

    discrete_range_mode            shift and go to state 137
    integer_mode                   shift and go to state 138
    array_mode                     shift and go to state 130
    discrete_mode_name             shift and go to state 132
    boolean_mode                   shift and go to state 139
    composite_mode                 shift and go to state 140
    mode_name                      shift and go to state 141
    reference_mode                 shift and go to state 142
    discrete_mode                  shift and go to state 134
    character_mode                 shift and go to state 128
    mode                           shift and go to state 145
    string_mode                    shift and go to state 146
    identifier                     shift and go to state 135

state 49

    (88) operand0 -> operand1 .
    (91) operand1 -> operand1 . operator2 operand2
    (115) operator2 -> . arithmetic_additive_operator
    (116) operator2 -> . string_concatenation_operator
    (117) arithmetic_additive_operator -> . PLUS
    (118) arithmetic_additive_operator -> . MINUS
    (119) string_concatenation_operator -> . CONCAT

    IN              reduce using rule 88 (operand0 -> operand1 .)
    AND             reduce using rule 88 (operand0 -> operand1 .)
    OR              reduce using rule 88 (operand0 -> operand1 .)
    EQUAL           reduce using rule 88 (operand0 -> operand1 .)
    NOTEQ           reduce using rule 88 (operand0 -> operand1 .)
    GREATER         reduce using rule 88 (operand0 -> operand1 .)
    GTEQUAL         reduce using rule 88 (operand0 -> operand1 .)
    LESS            reduce using rule 88 (operand0 -> operand1 .)
    LTEQUAL         reduce using rule 88 (operand0 -> operand1 .)
    RBRACKET        reduce using rule 88 (operand0 -> operand1 .)
    COMMA           reduce using rule 88 (operand0 -> operand1 .)
    SEMI            reduce using rule 88 (operand0 -> operand1 .)
    COLON           reduce using rule 88 (operand0 -> operand1 .)
    RPAREN          reduce using rule 88 (operand0 -> operand1 .)
    DOWN            reduce using rule 88 (operand0 -> operand1 .)
    TO              reduce using rule 88 (operand0 -> operand1 .)
    THEN            reduce using rule 88 (operand0 -> operand1 .)
    WHILE           reduce using rule 88 (operand0 -> operand1 .)
    FI              reduce using rule 88 (operand0 -> operand1 .)
    ELSE            reduce using rule 88 (operand0 -> operand1 .)
    ELSIF           reduce using rule 88 (operand0 -> operand1 .)
    BY              reduce using rule 88 (operand0 -> operand1 .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 96
    CONCAT          shift and go to state 88

    operator2                      shift and go to state 149
    arithmetic_additive_operator   shift and go to state 147
    string_concatenation_operator  shift and go to state 148

state 50

    (90) operand1 -> operand2 .
    (93) operand2 -> operand2 . arithmetic_multiplicative_operator operand3
    (99) arithmetic_multiplicative_operator -> . TIMES
    (100) arithmetic_multiplicative_operator -> . DIVIDE
    (101) arithmetic_multiplicative_operator -> . MODULO

    PLUS            reduce using rule 90 (operand1 -> operand2 .)
    MINUS           reduce using rule 90 (operand1 -> operand2 .)
    CONCAT          reduce using rule 90 (operand1 -> operand2 .)
    IN              reduce using rule 90 (operand1 -> operand2 .)
    AND             reduce using rule 90 (operand1 -> operand2 .)
    OR              reduce using rule 90 (operand1 -> operand2 .)
    EQUAL           reduce using rule 90 (operand1 -> operand2 .)
    NOTEQ           reduce using rule 90 (operand1 -> operand2 .)
    GREATER         reduce using rule 90 (operand1 -> operand2 .)
    GTEQUAL         reduce using rule 90 (operand1 -> operand2 .)
    LESS            reduce using rule 90 (operand1 -> operand2 .)
    LTEQUAL         reduce using rule 90 (operand1 -> operand2 .)
    THEN            reduce using rule 90 (operand1 -> operand2 .)
    ELSE            reduce using rule 90 (operand1 -> operand2 .)
    ELSIF           reduce using rule 90 (operand1 -> operand2 .)
    COMMA           reduce using rule 90 (operand1 -> operand2 .)
    RPAREN          reduce using rule 90 (operand1 -> operand2 .)
    SEMI            reduce using rule 90 (operand1 -> operand2 .)
    RBRACKET        reduce using rule 90 (operand1 -> operand2 .)
    COLON           reduce using rule 90 (operand1 -> operand2 .)
    DOWN            reduce using rule 90 (operand1 -> operand2 .)
    TO              reduce using rule 90 (operand1 -> operand2 .)
    BY              reduce using rule 90 (operand1 -> operand2 .)
    FI              reduce using rule 90 (operand1 -> operand2 .)
    WHILE           reduce using rule 90 (operand1 -> operand2 .)
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 92
    MODULO          shift and go to state 93

    arithmetic_multiplicative_operator shift and go to state 150

state 51

    (81) parenthesized_expression -> LPAREN . expression RPAREN
    (79) expression -> . operand0
    (80) expression -> . conditional_expression
    (88) operand0 -> . operand1
    (89) operand0 -> . operand0 operator1 operand1
    (82) conditional_expression -> . IF expression then_expression else_expression FI
    (83) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (90) operand1 -> . operand2
    (91) operand1 -> . operand1 operator2 operand2
    (92) operand2 -> . operand3
    (93) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (94) operand3 -> . monadic_operator operand4
    (95) operand3 -> . operand4
    (102) monadic_operator -> . MINUS
    (103) monadic_operator -> . NOT
    (96) operand4 -> . array_location
    (97) operand4 -> . referenced_location
    (98) operand4 -> . primitive_value
    (78) array_location -> . location
    (104) referenced_location -> . ARROW array_location
    (121) primitive_value -> . literal
    (122) primitive_value -> . value_array_element
    (123) primitive_value -> . value_array_slice
    (124) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (125) literal -> . integer_literal
    (126) literal -> . boolean_literal
    (127) literal -> . character_literal
    (128) literal -> . empty_literal
    (129) literal -> . character_string_literal
    (130) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (131) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (81) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (132) integer_literal -> . ICONST
    (133) boolean_literal -> . TRUE
    (134) boolean_literal -> . FALSE
    (135) character_literal -> . CCONST
    (136) character_literal -> . HAT LPAREN ICONST RPAREN
    (137) empty_literal -> . NULL
    (138) character_string_literal -> . SCONST
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT

    IF              shift and go to state 53
    MINUS           shift and go to state 75
    NOT             shift and go to state 78
    ARROW           shift and go to state 54
    LPAREN          shift and go to state 51
    ID              shift and go to state 58
    ICONST          shift and go to state 72
    TRUE            shift and go to state 64
    FALSE           shift and go to state 63
    CCONST          shift and go to state 74
    HAT             shift and go to state 60
    NULL            shift and go to state 59
    SCONST          shift and go to state 69
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    operand1                       shift and go to state 49
    operand2                       shift and go to state 50
    boolean_literal                shift and go to state 71
    procedure_call                 shift and go to state 3
    empty_literal                  shift and go to state 68
    primitive_value                shift and go to state 52
    integer_literal                shift and go to state 77
    identifier                     shift and go to state 55
    builtin_call                   shift and go to state 1
    conditional_expression         shift and go to state 56
    value_array_slice              shift and go to state 57
    builtin_name                   shift and go to state 29
    dereferenced_reference         shift and go to state 32
    literal                        shift and go to state 61
    array_element                  shift and go to state 9
    operand0                       shift and go to state 62
    operand4                       shift and go to state 73
    array_slice                    shift and go to state 28
    operand3                       shift and go to state 65
    location                       shift and go to state 38
    character_string_literal       shift and go to state 66
    character_literal              shift and go to state 76
    call_action                    shift and go to state 80
    array_location                 shift and go to state 67
    value_array_element            shift and go to state 79
    monadic_operator               shift and go to state 81
    referenced_location            shift and go to state 82
    expression                     shift and go to state 151
    parenthesized_expression       shift and go to state 70

state 52

    (98) operand4 -> primitive_value .
    (130) value_array_element -> primitive_value . LBRACKET expression_list RBRACKET
    (131) value_array_slice -> primitive_value . LBRACKET expression COLON expression RBRACKET

    TIMES           reduce using rule 98 (operand4 -> primitive_value .)
    DIVIDE          reduce using rule 98 (operand4 -> primitive_value .)
    MODULO          reduce using rule 98 (operand4 -> primitive_value .)
    PLUS            reduce using rule 98 (operand4 -> primitive_value .)
    MINUS           reduce using rule 98 (operand4 -> primitive_value .)
    CONCAT          reduce using rule 98 (operand4 -> primitive_value .)
    IN              reduce using rule 98 (operand4 -> primitive_value .)
    AND             reduce using rule 98 (operand4 -> primitive_value .)
    OR              reduce using rule 98 (operand4 -> primitive_value .)
    EQUAL           reduce using rule 98 (operand4 -> primitive_value .)
    NOTEQ           reduce using rule 98 (operand4 -> primitive_value .)
    GREATER         reduce using rule 98 (operand4 -> primitive_value .)
    GTEQUAL         reduce using rule 98 (operand4 -> primitive_value .)
    LESS            reduce using rule 98 (operand4 -> primitive_value .)
    LTEQUAL         reduce using rule 98 (operand4 -> primitive_value .)
    ELSE            reduce using rule 98 (operand4 -> primitive_value .)
    ELSIF           reduce using rule 98 (operand4 -> primitive_value .)
    DOWN            reduce using rule 98 (operand4 -> primitive_value .)
    TO              reduce using rule 98 (operand4 -> primitive_value .)
    COMMA           reduce using rule 98 (operand4 -> primitive_value .)
    RBRACKET        reduce using rule 98 (operand4 -> primitive_value .)
    COLON           reduce using rule 98 (operand4 -> primitive_value .)
    THEN            reduce using rule 98 (operand4 -> primitive_value .)
    SEMI            reduce using rule 98 (operand4 -> primitive_value .)
    RPAREN          reduce using rule 98 (operand4 -> primitive_value .)
    BY              reduce using rule 98 (operand4 -> primitive_value .)
    FI              reduce using rule 98 (operand4 -> primitive_value .)
    WHILE           reduce using rule 98 (operand4 -> primitive_value .)
    LBRACKET        shift and go to state 152


state 53

    (82) conditional_expression -> IF . expression then_expression else_expression FI
    (83) conditional_expression -> IF . expression then_expression elsif_expression else_expression FI
    (79) expression -> . operand0
    (80) expression -> . conditional_expression
    (88) operand0 -> . operand1
    (89) operand0 -> . operand0 operator1 operand1
    (82) conditional_expression -> . IF expression then_expression else_expression FI
    (83) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (90) operand1 -> . operand2
    (91) operand1 -> . operand1 operator2 operand2
    (92) operand2 -> . operand3
    (93) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (94) operand3 -> . monadic_operator operand4
    (95) operand3 -> . operand4
    (102) monadic_operator -> . MINUS
    (103) monadic_operator -> . NOT
    (96) operand4 -> . array_location
    (97) operand4 -> . referenced_location
    (98) operand4 -> . primitive_value
    (78) array_location -> . location
    (104) referenced_location -> . ARROW array_location
    (121) primitive_value -> . literal
    (122) primitive_value -> . value_array_element
    (123) primitive_value -> . value_array_slice
    (124) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (125) literal -> . integer_literal
    (126) literal -> . boolean_literal
    (127) literal -> . character_literal
    (128) literal -> . empty_literal
    (129) literal -> . character_string_literal
    (130) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (131) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (81) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (132) integer_literal -> . ICONST
    (133) boolean_literal -> . TRUE
    (134) boolean_literal -> . FALSE
    (135) character_literal -> . CCONST
    (136) character_literal -> . HAT LPAREN ICONST RPAREN
    (137) empty_literal -> . NULL
    (138) character_string_literal -> . SCONST
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT

    IF              shift and go to state 53
    MINUS           shift and go to state 75
    NOT             shift and go to state 78
    ARROW           shift and go to state 54
    LPAREN          shift and go to state 51
    ID              shift and go to state 58
    ICONST          shift and go to state 72
    TRUE            shift and go to state 64
    FALSE           shift and go to state 63
    CCONST          shift and go to state 74
    HAT             shift and go to state 60
    NULL            shift and go to state 59
    SCONST          shift and go to state 69
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    operand1                       shift and go to state 49
    operand2                       shift and go to state 50
    boolean_literal                shift and go to state 71
    procedure_call                 shift and go to state 3
    empty_literal                  shift and go to state 68
    primitive_value                shift and go to state 52
    integer_literal                shift and go to state 77
    identifier                     shift and go to state 55
    builtin_call                   shift and go to state 1
    conditional_expression         shift and go to state 56
    value_array_slice              shift and go to state 57
    builtin_name                   shift and go to state 29
    dereferenced_reference         shift and go to state 32
    literal                        shift and go to state 61
    array_element                  shift and go to state 9
    operand0                       shift and go to state 62
    operand4                       shift and go to state 73
    array_slice                    shift and go to state 28
    operand3                       shift and go to state 65
    location                       shift and go to state 38
    character_string_literal       shift and go to state 66
    character_literal              shift and go to state 76
    call_action                    shift and go to state 80
    array_location                 shift and go to state 67
    value_array_element            shift and go to state 79
    monadic_operator               shift and go to state 81
    referenced_location            shift and go to state 82
    expression                     shift and go to state 153
    parenthesized_expression       shift and go to state 70

state 54

    (104) referenced_location -> ARROW . array_location
    (78) array_location -> . location
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT

    ID              shift and go to state 58
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    builtin_name                   shift and go to state 29
    builtin_call                   shift and go to state 1
    dereferenced_reference         shift and go to state 32
    call_action                    shift and go to state 80
    procedure_call                 shift and go to state 3
    array_element                  shift and go to state 9
    location                       shift and go to state 38
    array_location                 shift and go to state 154
    identifier                     shift and go to state 55
    array_slice                    shift and go to state 28

state 55

    (68) location -> identifier .

    ARROW           reduce using rule 68 (location -> identifier .)
    LBRACKET        reduce using rule 68 (location -> identifier .)
    TIMES           reduce using rule 68 (location -> identifier .)
    DIVIDE          reduce using rule 68 (location -> identifier .)
    MODULO          reduce using rule 68 (location -> identifier .)
    PLUS            reduce using rule 68 (location -> identifier .)
    MINUS           reduce using rule 68 (location -> identifier .)
    CONCAT          reduce using rule 68 (location -> identifier .)
    IN              reduce using rule 68 (location -> identifier .)
    AND             reduce using rule 68 (location -> identifier .)
    OR              reduce using rule 68 (location -> identifier .)
    EQUAL           reduce using rule 68 (location -> identifier .)
    NOTEQ           reduce using rule 68 (location -> identifier .)
    GREATER         reduce using rule 68 (location -> identifier .)
    GTEQUAL         reduce using rule 68 (location -> identifier .)
    LESS            reduce using rule 68 (location -> identifier .)
    LTEQUAL         reduce using rule 68 (location -> identifier .)
    COMMA           reduce using rule 68 (location -> identifier .)
    RPAREN          reduce using rule 68 (location -> identifier .)
    THEN            reduce using rule 68 (location -> identifier .)
    COLON           reduce using rule 68 (location -> identifier .)
    RBRACKET        reduce using rule 68 (location -> identifier .)
    ASSIGN          reduce using rule 68 (location -> identifier .)
    DOWN            reduce using rule 68 (location -> identifier .)
    BY              reduce using rule 68 (location -> identifier .)
    TO              reduce using rule 68 (location -> identifier .)
    FI              reduce using rule 68 (location -> identifier .)
    SEMI            reduce using rule 68 (location -> identifier .)
    ELSE            reduce using rule 68 (location -> identifier .)
    ELSIF           reduce using rule 68 (location -> identifier .)
    WHILE           reduce using rule 68 (location -> identifier .)


state 56

    (80) expression -> conditional_expression .

    COMMA           reduce using rule 80 (expression -> conditional_expression .)
    RBRACKET        reduce using rule 80 (expression -> conditional_expression .)
    COLON           reduce using rule 80 (expression -> conditional_expression .)
    THEN            reduce using rule 80 (expression -> conditional_expression .)
    SEMI            reduce using rule 80 (expression -> conditional_expression .)
    ELSE            reduce using rule 80 (expression -> conditional_expression .)
    ELSIF           reduce using rule 80 (expression -> conditional_expression .)
    RPAREN          reduce using rule 80 (expression -> conditional_expression .)
    DOWN            reduce using rule 80 (expression -> conditional_expression .)
    BY              reduce using rule 80 (expression -> conditional_expression .)
    TO              reduce using rule 80 (expression -> conditional_expression .)
    FI              reduce using rule 80 (expression -> conditional_expression .)
    WHILE           reduce using rule 80 (expression -> conditional_expression .)


state 57

    (123) primitive_value -> value_array_slice .

    LBRACKET        reduce using rule 123 (primitive_value -> value_array_slice .)
    TIMES           reduce using rule 123 (primitive_value -> value_array_slice .)
    DIVIDE          reduce using rule 123 (primitive_value -> value_array_slice .)
    MODULO          reduce using rule 123 (primitive_value -> value_array_slice .)
    PLUS            reduce using rule 123 (primitive_value -> value_array_slice .)
    MINUS           reduce using rule 123 (primitive_value -> value_array_slice .)
    CONCAT          reduce using rule 123 (primitive_value -> value_array_slice .)
    IN              reduce using rule 123 (primitive_value -> value_array_slice .)
    AND             reduce using rule 123 (primitive_value -> value_array_slice .)
    OR              reduce using rule 123 (primitive_value -> value_array_slice .)
    EQUAL           reduce using rule 123 (primitive_value -> value_array_slice .)
    NOTEQ           reduce using rule 123 (primitive_value -> value_array_slice .)
    GREATER         reduce using rule 123 (primitive_value -> value_array_slice .)
    GTEQUAL         reduce using rule 123 (primitive_value -> value_array_slice .)
    LESS            reduce using rule 123 (primitive_value -> value_array_slice .)
    LTEQUAL         reduce using rule 123 (primitive_value -> value_array_slice .)
    DOWN            reduce using rule 123 (primitive_value -> value_array_slice .)
    BY              reduce using rule 123 (primitive_value -> value_array_slice .)
    TO              reduce using rule 123 (primitive_value -> value_array_slice .)
    THEN            reduce using rule 123 (primitive_value -> value_array_slice .)
    SEMI            reduce using rule 123 (primitive_value -> value_array_slice .)
    RPAREN          reduce using rule 123 (primitive_value -> value_array_slice .)
    COMMA           reduce using rule 123 (primitive_value -> value_array_slice .)
    RBRACKET        reduce using rule 123 (primitive_value -> value_array_slice .)
    COLON           reduce using rule 123 (primitive_value -> value_array_slice .)
    ELSE            reduce using rule 123 (primitive_value -> value_array_slice .)
    ELSIF           reduce using rule 123 (primitive_value -> value_array_slice .)
    FI              reduce using rule 123 (primitive_value -> value_array_slice .)
    WHILE           reduce using rule 123 (primitive_value -> value_array_slice .)


state 58

    (23) identifier -> ID .
    (176) procedure_call -> ID . LPAREN parameter_list RPAREN
    (177) procedure_call -> ID . LPAREN RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    ARROW           reduce using rule 23 (identifier -> ID .)
    LBRACKET        reduce using rule 23 (identifier -> ID .)
    TIMES           reduce using rule 23 (identifier -> ID .)
    DIVIDE          reduce using rule 23 (identifier -> ID .)
    MODULO          reduce using rule 23 (identifier -> ID .)
    PLUS            reduce using rule 23 (identifier -> ID .)
    MINUS           reduce using rule 23 (identifier -> ID .)
    CONCAT          reduce using rule 23 (identifier -> ID .)
    IN              reduce using rule 23 (identifier -> ID .)
    AND             reduce using rule 23 (identifier -> ID .)
    OR              reduce using rule 23 (identifier -> ID .)
    EQUAL           reduce using rule 23 (identifier -> ID .)
    NOTEQ           reduce using rule 23 (identifier -> ID .)
    GREATER         reduce using rule 23 (identifier -> ID .)
    GTEQUAL         reduce using rule 23 (identifier -> ID .)
    LESS            reduce using rule 23 (identifier -> ID .)
    LTEQUAL         reduce using rule 23 (identifier -> ID .)
    COMMA           reduce using rule 23 (identifier -> ID .)
    RBRACKET        reduce using rule 23 (identifier -> ID .)
    COLON           reduce using rule 23 (identifier -> ID .)
    THEN            reduce using rule 23 (identifier -> ID .)
    ASSIGN          reduce using rule 23 (identifier -> ID .)
    RPAREN          reduce using rule 23 (identifier -> ID .)
    SEMI            reduce using rule 23 (identifier -> ID .)
    ELSE            reduce using rule 23 (identifier -> ID .)
    ELSIF           reduce using rule 23 (identifier -> ID .)
    DOWN            reduce using rule 23 (identifier -> ID .)
    BY              reduce using rule 23 (identifier -> ID .)
    TO              reduce using rule 23 (identifier -> ID .)
    FI              reduce using rule 23 (identifier -> ID .)
    WHILE           reduce using rule 23 (identifier -> ID .)
    LPAREN          shift and go to state 85

  ! LPAREN          [ reduce using rule 23 (identifier -> ID .) ]


state 59

    (137) empty_literal -> NULL .

    LBRACKET        reduce using rule 137 (empty_literal -> NULL .)
    TIMES           reduce using rule 137 (empty_literal -> NULL .)
    DIVIDE          reduce using rule 137 (empty_literal -> NULL .)
    MODULO          reduce using rule 137 (empty_literal -> NULL .)
    PLUS            reduce using rule 137 (empty_literal -> NULL .)
    MINUS           reduce using rule 137 (empty_literal -> NULL .)
    CONCAT          reduce using rule 137 (empty_literal -> NULL .)
    IN              reduce using rule 137 (empty_literal -> NULL .)
    AND             reduce using rule 137 (empty_literal -> NULL .)
    OR              reduce using rule 137 (empty_literal -> NULL .)
    EQUAL           reduce using rule 137 (empty_literal -> NULL .)
    NOTEQ           reduce using rule 137 (empty_literal -> NULL .)
    GREATER         reduce using rule 137 (empty_literal -> NULL .)
    GTEQUAL         reduce using rule 137 (empty_literal -> NULL .)
    LESS            reduce using rule 137 (empty_literal -> NULL .)
    LTEQUAL         reduce using rule 137 (empty_literal -> NULL .)
    COMMA           reduce using rule 137 (empty_literal -> NULL .)
    SEMI            reduce using rule 137 (empty_literal -> NULL .)
    DOWN            reduce using rule 137 (empty_literal -> NULL .)
    TO              reduce using rule 137 (empty_literal -> NULL .)
    RBRACKET        reduce using rule 137 (empty_literal -> NULL .)
    COLON           reduce using rule 137 (empty_literal -> NULL .)
    RPAREN          reduce using rule 137 (empty_literal -> NULL .)
    THEN            reduce using rule 137 (empty_literal -> NULL .)
    ELSE            reduce using rule 137 (empty_literal -> NULL .)
    ELSIF           reduce using rule 137 (empty_literal -> NULL .)
    BY              reduce using rule 137 (empty_literal -> NULL .)
    FI              reduce using rule 137 (empty_literal -> NULL .)
    WHILE           reduce using rule 137 (empty_literal -> NULL .)


state 60

    (136) character_literal -> HAT . LPAREN ICONST RPAREN

    LPAREN          shift and go to state 155


state 61

    (121) primitive_value -> literal .

    LBRACKET        reduce using rule 121 (primitive_value -> literal .)
    TIMES           reduce using rule 121 (primitive_value -> literal .)
    DIVIDE          reduce using rule 121 (primitive_value -> literal .)
    MODULO          reduce using rule 121 (primitive_value -> literal .)
    PLUS            reduce using rule 121 (primitive_value -> literal .)
    MINUS           reduce using rule 121 (primitive_value -> literal .)
    CONCAT          reduce using rule 121 (primitive_value -> literal .)
    IN              reduce using rule 121 (primitive_value -> literal .)
    AND             reduce using rule 121 (primitive_value -> literal .)
    OR              reduce using rule 121 (primitive_value -> literal .)
    EQUAL           reduce using rule 121 (primitive_value -> literal .)
    NOTEQ           reduce using rule 121 (primitive_value -> literal .)
    GREATER         reduce using rule 121 (primitive_value -> literal .)
    GTEQUAL         reduce using rule 121 (primitive_value -> literal .)
    LESS            reduce using rule 121 (primitive_value -> literal .)
    LTEQUAL         reduce using rule 121 (primitive_value -> literal .)
    DOWN            reduce using rule 121 (primitive_value -> literal .)
    BY              reduce using rule 121 (primitive_value -> literal .)
    TO              reduce using rule 121 (primitive_value -> literal .)
    THEN            reduce using rule 121 (primitive_value -> literal .)
    SEMI            reduce using rule 121 (primitive_value -> literal .)
    RPAREN          reduce using rule 121 (primitive_value -> literal .)
    COMMA           reduce using rule 121 (primitive_value -> literal .)
    RBRACKET        reduce using rule 121 (primitive_value -> literal .)
    COLON           reduce using rule 121 (primitive_value -> literal .)
    ELSE            reduce using rule 121 (primitive_value -> literal .)
    ELSIF           reduce using rule 121 (primitive_value -> literal .)
    FI              reduce using rule 121 (primitive_value -> literal .)
    WHILE           reduce using rule 121 (primitive_value -> literal .)


state 62

    (79) expression -> operand0 .
    (89) operand0 -> operand0 . operator1 operand1
    (105) operator1 -> . membership_operator
    (106) operator1 -> . relational_operator
    (120) membership_operator -> . IN
    (107) relational_operator -> . AND
    (108) relational_operator -> . OR
    (109) relational_operator -> . EQUAL
    (110) relational_operator -> . NOTEQ
    (111) relational_operator -> . GREATER
    (112) relational_operator -> . GTEQUAL
    (113) relational_operator -> . LESS
    (114) relational_operator -> . LTEQUAL

    COMMA           reduce using rule 79 (expression -> operand0 .)
    RBRACKET        reduce using rule 79 (expression -> operand0 .)
    COLON           reduce using rule 79 (expression -> operand0 .)
    THEN            reduce using rule 79 (expression -> operand0 .)
    SEMI            reduce using rule 79 (expression -> operand0 .)
    ELSE            reduce using rule 79 (expression -> operand0 .)
    ELSIF           reduce using rule 79 (expression -> operand0 .)
    RPAREN          reduce using rule 79 (expression -> operand0 .)
    DOWN            reduce using rule 79 (expression -> operand0 .)
    BY              reduce using rule 79 (expression -> operand0 .)
    TO              reduce using rule 79 (expression -> operand0 .)
    FI              reduce using rule 79 (expression -> operand0 .)
    WHILE           reduce using rule 79 (expression -> operand0 .)
    IN              shift and go to state 156
    AND             shift and go to state 159
    OR              shift and go to state 158
    EQUAL           shift and go to state 157
    NOTEQ           shift and go to state 166
    GREATER         shift and go to state 167
    GTEQUAL         shift and go to state 163
    LESS            shift and go to state 162
    LTEQUAL         shift and go to state 165

    membership_operator            shift and go to state 164
    operator1                      shift and go to state 160
    relational_operator            shift and go to state 161

state 63

    (134) boolean_literal -> FALSE .

    LBRACKET        reduce using rule 134 (boolean_literal -> FALSE .)
    TIMES           reduce using rule 134 (boolean_literal -> FALSE .)
    DIVIDE          reduce using rule 134 (boolean_literal -> FALSE .)
    MODULO          reduce using rule 134 (boolean_literal -> FALSE .)
    PLUS            reduce using rule 134 (boolean_literal -> FALSE .)
    MINUS           reduce using rule 134 (boolean_literal -> FALSE .)
    CONCAT          reduce using rule 134 (boolean_literal -> FALSE .)
    IN              reduce using rule 134 (boolean_literal -> FALSE .)
    AND             reduce using rule 134 (boolean_literal -> FALSE .)
    OR              reduce using rule 134 (boolean_literal -> FALSE .)
    EQUAL           reduce using rule 134 (boolean_literal -> FALSE .)
    NOTEQ           reduce using rule 134 (boolean_literal -> FALSE .)
    GREATER         reduce using rule 134 (boolean_literal -> FALSE .)
    GTEQUAL         reduce using rule 134 (boolean_literal -> FALSE .)
    LESS            reduce using rule 134 (boolean_literal -> FALSE .)
    LTEQUAL         reduce using rule 134 (boolean_literal -> FALSE .)
    COMMA           reduce using rule 134 (boolean_literal -> FALSE .)
    RPAREN          reduce using rule 134 (boolean_literal -> FALSE .)
    SEMI            reduce using rule 134 (boolean_literal -> FALSE .)
    WHILE           reduce using rule 134 (boolean_literal -> FALSE .)
    THEN            reduce using rule 134 (boolean_literal -> FALSE .)
    RBRACKET        reduce using rule 134 (boolean_literal -> FALSE .)
    COLON           reduce using rule 134 (boolean_literal -> FALSE .)
    ELSE            reduce using rule 134 (boolean_literal -> FALSE .)
    ELSIF           reduce using rule 134 (boolean_literal -> FALSE .)
    DOWN            reduce using rule 134 (boolean_literal -> FALSE .)
    BY              reduce using rule 134 (boolean_literal -> FALSE .)
    TO              reduce using rule 134 (boolean_literal -> FALSE .)
    FI              reduce using rule 134 (boolean_literal -> FALSE .)


state 64

    (133) boolean_literal -> TRUE .

    LBRACKET        reduce using rule 133 (boolean_literal -> TRUE .)
    TIMES           reduce using rule 133 (boolean_literal -> TRUE .)
    DIVIDE          reduce using rule 133 (boolean_literal -> TRUE .)
    MODULO          reduce using rule 133 (boolean_literal -> TRUE .)
    PLUS            reduce using rule 133 (boolean_literal -> TRUE .)
    MINUS           reduce using rule 133 (boolean_literal -> TRUE .)
    CONCAT          reduce using rule 133 (boolean_literal -> TRUE .)
    IN              reduce using rule 133 (boolean_literal -> TRUE .)
    AND             reduce using rule 133 (boolean_literal -> TRUE .)
    OR              reduce using rule 133 (boolean_literal -> TRUE .)
    EQUAL           reduce using rule 133 (boolean_literal -> TRUE .)
    NOTEQ           reduce using rule 133 (boolean_literal -> TRUE .)
    GREATER         reduce using rule 133 (boolean_literal -> TRUE .)
    GTEQUAL         reduce using rule 133 (boolean_literal -> TRUE .)
    LESS            reduce using rule 133 (boolean_literal -> TRUE .)
    LTEQUAL         reduce using rule 133 (boolean_literal -> TRUE .)
    COMMA           reduce using rule 133 (boolean_literal -> TRUE .)
    RPAREN          reduce using rule 133 (boolean_literal -> TRUE .)
    SEMI            reduce using rule 133 (boolean_literal -> TRUE .)
    WHILE           reduce using rule 133 (boolean_literal -> TRUE .)
    THEN            reduce using rule 133 (boolean_literal -> TRUE .)
    RBRACKET        reduce using rule 133 (boolean_literal -> TRUE .)
    COLON           reduce using rule 133 (boolean_literal -> TRUE .)
    ELSE            reduce using rule 133 (boolean_literal -> TRUE .)
    ELSIF           reduce using rule 133 (boolean_literal -> TRUE .)
    DOWN            reduce using rule 133 (boolean_literal -> TRUE .)
    BY              reduce using rule 133 (boolean_literal -> TRUE .)
    TO              reduce using rule 133 (boolean_literal -> TRUE .)
    FI              reduce using rule 133 (boolean_literal -> TRUE .)


state 65

    (92) operand2 -> operand3 .

    TIMES           reduce using rule 92 (operand2 -> operand3 .)
    DIVIDE          reduce using rule 92 (operand2 -> operand3 .)
    MODULO          reduce using rule 92 (operand2 -> operand3 .)
    PLUS            reduce using rule 92 (operand2 -> operand3 .)
    MINUS           reduce using rule 92 (operand2 -> operand3 .)
    CONCAT          reduce using rule 92 (operand2 -> operand3 .)
    IN              reduce using rule 92 (operand2 -> operand3 .)
    AND             reduce using rule 92 (operand2 -> operand3 .)
    OR              reduce using rule 92 (operand2 -> operand3 .)
    EQUAL           reduce using rule 92 (operand2 -> operand3 .)
    NOTEQ           reduce using rule 92 (operand2 -> operand3 .)
    GREATER         reduce using rule 92 (operand2 -> operand3 .)
    GTEQUAL         reduce using rule 92 (operand2 -> operand3 .)
    LESS            reduce using rule 92 (operand2 -> operand3 .)
    LTEQUAL         reduce using rule 92 (operand2 -> operand3 .)
    DOWN            reduce using rule 92 (operand2 -> operand3 .)
    TO              reduce using rule 92 (operand2 -> operand3 .)
    SEMI            reduce using rule 92 (operand2 -> operand3 .)
    THEN            reduce using rule 92 (operand2 -> operand3 .)
    RBRACKET        reduce using rule 92 (operand2 -> operand3 .)
    ELSE            reduce using rule 92 (operand2 -> operand3 .)
    ELSIF           reduce using rule 92 (operand2 -> operand3 .)
    COMMA           reduce using rule 92 (operand2 -> operand3 .)
    RPAREN          reduce using rule 92 (operand2 -> operand3 .)
    COLON           reduce using rule 92 (operand2 -> operand3 .)
    BY              reduce using rule 92 (operand2 -> operand3 .)
    FI              reduce using rule 92 (operand2 -> operand3 .)
    WHILE           reduce using rule 92 (operand2 -> operand3 .)


state 66

    (129) literal -> character_string_literal .

    LBRACKET        reduce using rule 129 (literal -> character_string_literal .)
    TIMES           reduce using rule 129 (literal -> character_string_literal .)
    DIVIDE          reduce using rule 129 (literal -> character_string_literal .)
    MODULO          reduce using rule 129 (literal -> character_string_literal .)
    PLUS            reduce using rule 129 (literal -> character_string_literal .)
    MINUS           reduce using rule 129 (literal -> character_string_literal .)
    CONCAT          reduce using rule 129 (literal -> character_string_literal .)
    IN              reduce using rule 129 (literal -> character_string_literal .)
    AND             reduce using rule 129 (literal -> character_string_literal .)
    OR              reduce using rule 129 (literal -> character_string_literal .)
    EQUAL           reduce using rule 129 (literal -> character_string_literal .)
    NOTEQ           reduce using rule 129 (literal -> character_string_literal .)
    GREATER         reduce using rule 129 (literal -> character_string_literal .)
    GTEQUAL         reduce using rule 129 (literal -> character_string_literal .)
    LESS            reduce using rule 129 (literal -> character_string_literal .)
    LTEQUAL         reduce using rule 129 (literal -> character_string_literal .)
    COMMA           reduce using rule 129 (literal -> character_string_literal .)
    RPAREN          reduce using rule 129 (literal -> character_string_literal .)
    THEN            reduce using rule 129 (literal -> character_string_literal .)
    SEMI            reduce using rule 129 (literal -> character_string_literal .)
    ELSE            reduce using rule 129 (literal -> character_string_literal .)
    ELSIF           reduce using rule 129 (literal -> character_string_literal .)
    FI              reduce using rule 129 (literal -> character_string_literal .)
    COLON           reduce using rule 129 (literal -> character_string_literal .)
    DOWN            reduce using rule 129 (literal -> character_string_literal .)
    BY              reduce using rule 129 (literal -> character_string_literal .)
    TO              reduce using rule 129 (literal -> character_string_literal .)
    RBRACKET        reduce using rule 129 (literal -> character_string_literal .)
    WHILE           reduce using rule 129 (literal -> character_string_literal .)


state 67

    (96) operand4 -> array_location .
    (73) dereferenced_reference -> array_location . ARROW
    (74) array_element -> array_location . LBRACKET expression_list RBRACKET
    (77) array_slice -> array_location . LBRACKET lower_bound COLON upper_bound RBRACKET

    TIMES           reduce using rule 96 (operand4 -> array_location .)
    DIVIDE          reduce using rule 96 (operand4 -> array_location .)
    MODULO          reduce using rule 96 (operand4 -> array_location .)
    PLUS            reduce using rule 96 (operand4 -> array_location .)
    MINUS           reduce using rule 96 (operand4 -> array_location .)
    CONCAT          reduce using rule 96 (operand4 -> array_location .)
    IN              reduce using rule 96 (operand4 -> array_location .)
    AND             reduce using rule 96 (operand4 -> array_location .)
    OR              reduce using rule 96 (operand4 -> array_location .)
    EQUAL           reduce using rule 96 (operand4 -> array_location .)
    NOTEQ           reduce using rule 96 (operand4 -> array_location .)
    GREATER         reduce using rule 96 (operand4 -> array_location .)
    GTEQUAL         reduce using rule 96 (operand4 -> array_location .)
    LESS            reduce using rule 96 (operand4 -> array_location .)
    LTEQUAL         reduce using rule 96 (operand4 -> array_location .)
    ELSE            reduce using rule 96 (operand4 -> array_location .)
    ELSIF           reduce using rule 96 (operand4 -> array_location .)
    DOWN            reduce using rule 96 (operand4 -> array_location .)
    TO              reduce using rule 96 (operand4 -> array_location .)
    COMMA           reduce using rule 96 (operand4 -> array_location .)
    RBRACKET        reduce using rule 96 (operand4 -> array_location .)
    COLON           reduce using rule 96 (operand4 -> array_location .)
    THEN            reduce using rule 96 (operand4 -> array_location .)
    SEMI            reduce using rule 96 (operand4 -> array_location .)
    RPAREN          reduce using rule 96 (operand4 -> array_location .)
    BY              reduce using rule 96 (operand4 -> array_location .)
    FI              reduce using rule 96 (operand4 -> array_location .)
    WHILE           reduce using rule 96 (operand4 -> array_location .)
    ARROW           shift and go to state 95
    LBRACKET        shift and go to state 89


state 68

    (128) literal -> empty_literal .

    LBRACKET        reduce using rule 128 (literal -> empty_literal .)
    TIMES           reduce using rule 128 (literal -> empty_literal .)
    DIVIDE          reduce using rule 128 (literal -> empty_literal .)
    MODULO          reduce using rule 128 (literal -> empty_literal .)
    PLUS            reduce using rule 128 (literal -> empty_literal .)
    MINUS           reduce using rule 128 (literal -> empty_literal .)
    CONCAT          reduce using rule 128 (literal -> empty_literal .)
    IN              reduce using rule 128 (literal -> empty_literal .)
    AND             reduce using rule 128 (literal -> empty_literal .)
    OR              reduce using rule 128 (literal -> empty_literal .)
    EQUAL           reduce using rule 128 (literal -> empty_literal .)
    NOTEQ           reduce using rule 128 (literal -> empty_literal .)
    GREATER         reduce using rule 128 (literal -> empty_literal .)
    GTEQUAL         reduce using rule 128 (literal -> empty_literal .)
    LESS            reduce using rule 128 (literal -> empty_literal .)
    LTEQUAL         reduce using rule 128 (literal -> empty_literal .)
    COMMA           reduce using rule 128 (literal -> empty_literal .)
    RPAREN          reduce using rule 128 (literal -> empty_literal .)
    THEN            reduce using rule 128 (literal -> empty_literal .)
    SEMI            reduce using rule 128 (literal -> empty_literal .)
    ELSE            reduce using rule 128 (literal -> empty_literal .)
    ELSIF           reduce using rule 128 (literal -> empty_literal .)
    FI              reduce using rule 128 (literal -> empty_literal .)
    COLON           reduce using rule 128 (literal -> empty_literal .)
    DOWN            reduce using rule 128 (literal -> empty_literal .)
    BY              reduce using rule 128 (literal -> empty_literal .)
    TO              reduce using rule 128 (literal -> empty_literal .)
    RBRACKET        reduce using rule 128 (literal -> empty_literal .)
    WHILE           reduce using rule 128 (literal -> empty_literal .)


state 69

    (138) character_string_literal -> SCONST .

    LBRACKET        reduce using rule 138 (character_string_literal -> SCONST .)
    TIMES           reduce using rule 138 (character_string_literal -> SCONST .)
    DIVIDE          reduce using rule 138 (character_string_literal -> SCONST .)
    MODULO          reduce using rule 138 (character_string_literal -> SCONST .)
    PLUS            reduce using rule 138 (character_string_literal -> SCONST .)
    MINUS           reduce using rule 138 (character_string_literal -> SCONST .)
    CONCAT          reduce using rule 138 (character_string_literal -> SCONST .)
    IN              reduce using rule 138 (character_string_literal -> SCONST .)
    AND             reduce using rule 138 (character_string_literal -> SCONST .)
    OR              reduce using rule 138 (character_string_literal -> SCONST .)
    EQUAL           reduce using rule 138 (character_string_literal -> SCONST .)
    NOTEQ           reduce using rule 138 (character_string_literal -> SCONST .)
    GREATER         reduce using rule 138 (character_string_literal -> SCONST .)
    GTEQUAL         reduce using rule 138 (character_string_literal -> SCONST .)
    LESS            reduce using rule 138 (character_string_literal -> SCONST .)
    LTEQUAL         reduce using rule 138 (character_string_literal -> SCONST .)
    COMMA           reduce using rule 138 (character_string_literal -> SCONST .)
    SEMI            reduce using rule 138 (character_string_literal -> SCONST .)
    WHILE           reduce using rule 138 (character_string_literal -> SCONST .)
    FI              reduce using rule 138 (character_string_literal -> SCONST .)
    COLON           reduce using rule 138 (character_string_literal -> SCONST .)
    DOWN            reduce using rule 138 (character_string_literal -> SCONST .)
    BY              reduce using rule 138 (character_string_literal -> SCONST .)
    TO              reduce using rule 138 (character_string_literal -> SCONST .)
    THEN            reduce using rule 138 (character_string_literal -> SCONST .)
    ELSE            reduce using rule 138 (character_string_literal -> SCONST .)
    ELSIF           reduce using rule 138 (character_string_literal -> SCONST .)
    RPAREN          reduce using rule 138 (character_string_literal -> SCONST .)
    RBRACKET        reduce using rule 138 (character_string_literal -> SCONST .)


state 70

    (124) primitive_value -> parenthesized_expression .

    LBRACKET        reduce using rule 124 (primitive_value -> parenthesized_expression .)
    TIMES           reduce using rule 124 (primitive_value -> parenthesized_expression .)
    DIVIDE          reduce using rule 124 (primitive_value -> parenthesized_expression .)
    MODULO          reduce using rule 124 (primitive_value -> parenthesized_expression .)
    PLUS            reduce using rule 124 (primitive_value -> parenthesized_expression .)
    MINUS           reduce using rule 124 (primitive_value -> parenthesized_expression .)
    CONCAT          reduce using rule 124 (primitive_value -> parenthesized_expression .)
    IN              reduce using rule 124 (primitive_value -> parenthesized_expression .)
    AND             reduce using rule 124 (primitive_value -> parenthesized_expression .)
    OR              reduce using rule 124 (primitive_value -> parenthesized_expression .)
    EQUAL           reduce using rule 124 (primitive_value -> parenthesized_expression .)
    NOTEQ           reduce using rule 124 (primitive_value -> parenthesized_expression .)
    GREATER         reduce using rule 124 (primitive_value -> parenthesized_expression .)
    GTEQUAL         reduce using rule 124 (primitive_value -> parenthesized_expression .)
    LESS            reduce using rule 124 (primitive_value -> parenthesized_expression .)
    LTEQUAL         reduce using rule 124 (primitive_value -> parenthesized_expression .)
    DOWN            reduce using rule 124 (primitive_value -> parenthesized_expression .)
    BY              reduce using rule 124 (primitive_value -> parenthesized_expression .)
    TO              reduce using rule 124 (primitive_value -> parenthesized_expression .)
    THEN            reduce using rule 124 (primitive_value -> parenthesized_expression .)
    SEMI            reduce using rule 124 (primitive_value -> parenthesized_expression .)
    RPAREN          reduce using rule 124 (primitive_value -> parenthesized_expression .)
    COMMA           reduce using rule 124 (primitive_value -> parenthesized_expression .)
    RBRACKET        reduce using rule 124 (primitive_value -> parenthesized_expression .)
    COLON           reduce using rule 124 (primitive_value -> parenthesized_expression .)
    ELSE            reduce using rule 124 (primitive_value -> parenthesized_expression .)
    ELSIF           reduce using rule 124 (primitive_value -> parenthesized_expression .)
    FI              reduce using rule 124 (primitive_value -> parenthesized_expression .)
    WHILE           reduce using rule 124 (primitive_value -> parenthesized_expression .)


state 71

    (126) literal -> boolean_literal .

    LBRACKET        reduce using rule 126 (literal -> boolean_literal .)
    TIMES           reduce using rule 126 (literal -> boolean_literal .)
    DIVIDE          reduce using rule 126 (literal -> boolean_literal .)
    MODULO          reduce using rule 126 (literal -> boolean_literal .)
    PLUS            reduce using rule 126 (literal -> boolean_literal .)
    MINUS           reduce using rule 126 (literal -> boolean_literal .)
    CONCAT          reduce using rule 126 (literal -> boolean_literal .)
    IN              reduce using rule 126 (literal -> boolean_literal .)
    AND             reduce using rule 126 (literal -> boolean_literal .)
    OR              reduce using rule 126 (literal -> boolean_literal .)
    EQUAL           reduce using rule 126 (literal -> boolean_literal .)
    NOTEQ           reduce using rule 126 (literal -> boolean_literal .)
    GREATER         reduce using rule 126 (literal -> boolean_literal .)
    GTEQUAL         reduce using rule 126 (literal -> boolean_literal .)
    LESS            reduce using rule 126 (literal -> boolean_literal .)
    LTEQUAL         reduce using rule 126 (literal -> boolean_literal .)
    COMMA           reduce using rule 126 (literal -> boolean_literal .)
    RPAREN          reduce using rule 126 (literal -> boolean_literal .)
    THEN            reduce using rule 126 (literal -> boolean_literal .)
    SEMI            reduce using rule 126 (literal -> boolean_literal .)
    ELSE            reduce using rule 126 (literal -> boolean_literal .)
    ELSIF           reduce using rule 126 (literal -> boolean_literal .)
    FI              reduce using rule 126 (literal -> boolean_literal .)
    COLON           reduce using rule 126 (literal -> boolean_literal .)
    DOWN            reduce using rule 126 (literal -> boolean_literal .)
    BY              reduce using rule 126 (literal -> boolean_literal .)
    TO              reduce using rule 126 (literal -> boolean_literal .)
    RBRACKET        reduce using rule 126 (literal -> boolean_literal .)
    WHILE           reduce using rule 126 (literal -> boolean_literal .)


state 72

    (132) integer_literal -> ICONST .

    LBRACKET        reduce using rule 132 (integer_literal -> ICONST .)
    TIMES           reduce using rule 132 (integer_literal -> ICONST .)
    DIVIDE          reduce using rule 132 (integer_literal -> ICONST .)
    MODULO          reduce using rule 132 (integer_literal -> ICONST .)
    PLUS            reduce using rule 132 (integer_literal -> ICONST .)
    MINUS           reduce using rule 132 (integer_literal -> ICONST .)
    CONCAT          reduce using rule 132 (integer_literal -> ICONST .)
    IN              reduce using rule 132 (integer_literal -> ICONST .)
    AND             reduce using rule 132 (integer_literal -> ICONST .)
    OR              reduce using rule 132 (integer_literal -> ICONST .)
    EQUAL           reduce using rule 132 (integer_literal -> ICONST .)
    NOTEQ           reduce using rule 132 (integer_literal -> ICONST .)
    GREATER         reduce using rule 132 (integer_literal -> ICONST .)
    GTEQUAL         reduce using rule 132 (integer_literal -> ICONST .)
    LESS            reduce using rule 132 (integer_literal -> ICONST .)
    LTEQUAL         reduce using rule 132 (integer_literal -> ICONST .)
    RBRACKET        reduce using rule 132 (integer_literal -> ICONST .)
    WHILE           reduce using rule 132 (integer_literal -> ICONST .)
    SEMI            reduce using rule 132 (integer_literal -> ICONST .)
    DOWN            reduce using rule 132 (integer_literal -> ICONST .)
    TO              reduce using rule 132 (integer_literal -> ICONST .)
    COMMA           reduce using rule 132 (integer_literal -> ICONST .)
    RPAREN          reduce using rule 132 (integer_literal -> ICONST .)
    THEN            reduce using rule 132 (integer_literal -> ICONST .)
    COLON           reduce using rule 132 (integer_literal -> ICONST .)
    ELSE            reduce using rule 132 (integer_literal -> ICONST .)
    ELSIF           reduce using rule 132 (integer_literal -> ICONST .)
    BY              reduce using rule 132 (integer_literal -> ICONST .)
    FI              reduce using rule 132 (integer_literal -> ICONST .)


state 73

    (95) operand3 -> operand4 .

    TIMES           reduce using rule 95 (operand3 -> operand4 .)
    DIVIDE          reduce using rule 95 (operand3 -> operand4 .)
    MODULO          reduce using rule 95 (operand3 -> operand4 .)
    PLUS            reduce using rule 95 (operand3 -> operand4 .)
    MINUS           reduce using rule 95 (operand3 -> operand4 .)
    CONCAT          reduce using rule 95 (operand3 -> operand4 .)
    IN              reduce using rule 95 (operand3 -> operand4 .)
    AND             reduce using rule 95 (operand3 -> operand4 .)
    OR              reduce using rule 95 (operand3 -> operand4 .)
    EQUAL           reduce using rule 95 (operand3 -> operand4 .)
    NOTEQ           reduce using rule 95 (operand3 -> operand4 .)
    GREATER         reduce using rule 95 (operand3 -> operand4 .)
    GTEQUAL         reduce using rule 95 (operand3 -> operand4 .)
    LESS            reduce using rule 95 (operand3 -> operand4 .)
    LTEQUAL         reduce using rule 95 (operand3 -> operand4 .)
    COLON           reduce using rule 95 (operand3 -> operand4 .)
    COMMA           reduce using rule 95 (operand3 -> operand4 .)
    RPAREN          reduce using rule 95 (operand3 -> operand4 .)
    THEN            reduce using rule 95 (operand3 -> operand4 .)
    SEMI            reduce using rule 95 (operand3 -> operand4 .)
    RBRACKET        reduce using rule 95 (operand3 -> operand4 .)
    ELSE            reduce using rule 95 (operand3 -> operand4 .)
    ELSIF           reduce using rule 95 (operand3 -> operand4 .)
    DOWN            reduce using rule 95 (operand3 -> operand4 .)
    BY              reduce using rule 95 (operand3 -> operand4 .)
    TO              reduce using rule 95 (operand3 -> operand4 .)
    FI              reduce using rule 95 (operand3 -> operand4 .)
    WHILE           reduce using rule 95 (operand3 -> operand4 .)


state 74

    (135) character_literal -> CCONST .

    LBRACKET        reduce using rule 135 (character_literal -> CCONST .)
    TIMES           reduce using rule 135 (character_literal -> CCONST .)
    DIVIDE          reduce using rule 135 (character_literal -> CCONST .)
    MODULO          reduce using rule 135 (character_literal -> CCONST .)
    PLUS            reduce using rule 135 (character_literal -> CCONST .)
    MINUS           reduce using rule 135 (character_literal -> CCONST .)
    CONCAT          reduce using rule 135 (character_literal -> CCONST .)
    IN              reduce using rule 135 (character_literal -> CCONST .)
    AND             reduce using rule 135 (character_literal -> CCONST .)
    OR              reduce using rule 135 (character_literal -> CCONST .)
    EQUAL           reduce using rule 135 (character_literal -> CCONST .)
    NOTEQ           reduce using rule 135 (character_literal -> CCONST .)
    GREATER         reduce using rule 135 (character_literal -> CCONST .)
    GTEQUAL         reduce using rule 135 (character_literal -> CCONST .)
    LESS            reduce using rule 135 (character_literal -> CCONST .)
    LTEQUAL         reduce using rule 135 (character_literal -> CCONST .)
    COMMA           reduce using rule 135 (character_literal -> CCONST .)
    SEMI            reduce using rule 135 (character_literal -> CCONST .)
    THEN            reduce using rule 135 (character_literal -> CCONST .)
    COLON           reduce using rule 135 (character_literal -> CCONST .)
    ELSE            reduce using rule 135 (character_literal -> CCONST .)
    ELSIF           reduce using rule 135 (character_literal -> CCONST .)
    RPAREN          reduce using rule 135 (character_literal -> CCONST .)
    RBRACKET        reduce using rule 135 (character_literal -> CCONST .)
    DOWN            reduce using rule 135 (character_literal -> CCONST .)
    BY              reduce using rule 135 (character_literal -> CCONST .)
    TO              reduce using rule 135 (character_literal -> CCONST .)
    FI              reduce using rule 135 (character_literal -> CCONST .)
    WHILE           reduce using rule 135 (character_literal -> CCONST .)


state 75

    (102) monadic_operator -> MINUS .

    ARROW           reduce using rule 102 (monadic_operator -> MINUS .)
    LPAREN          reduce using rule 102 (monadic_operator -> MINUS .)
    ID              reduce using rule 102 (monadic_operator -> MINUS .)
    ICONST          reduce using rule 102 (monadic_operator -> MINUS .)
    TRUE            reduce using rule 102 (monadic_operator -> MINUS .)
    FALSE           reduce using rule 102 (monadic_operator -> MINUS .)
    CCONST          reduce using rule 102 (monadic_operator -> MINUS .)
    HAT             reduce using rule 102 (monadic_operator -> MINUS .)
    NULL            reduce using rule 102 (monadic_operator -> MINUS .)
    SCONST          reduce using rule 102 (monadic_operator -> MINUS .)
    ABS             reduce using rule 102 (monadic_operator -> MINUS .)
    ASC             reduce using rule 102 (monadic_operator -> MINUS .)
    NUM             reduce using rule 102 (monadic_operator -> MINUS .)
    UPPER           reduce using rule 102 (monadic_operator -> MINUS .)
    LOWER           reduce using rule 102 (monadic_operator -> MINUS .)
    LENGTH          reduce using rule 102 (monadic_operator -> MINUS .)
    READ            reduce using rule 102 (monadic_operator -> MINUS .)
    PRINT           reduce using rule 102 (monadic_operator -> MINUS .)


state 76

    (127) literal -> character_literal .

    LBRACKET        reduce using rule 127 (literal -> character_literal .)
    TIMES           reduce using rule 127 (literal -> character_literal .)
    DIVIDE          reduce using rule 127 (literal -> character_literal .)
    MODULO          reduce using rule 127 (literal -> character_literal .)
    PLUS            reduce using rule 127 (literal -> character_literal .)
    MINUS           reduce using rule 127 (literal -> character_literal .)
    CONCAT          reduce using rule 127 (literal -> character_literal .)
    IN              reduce using rule 127 (literal -> character_literal .)
    AND             reduce using rule 127 (literal -> character_literal .)
    OR              reduce using rule 127 (literal -> character_literal .)
    EQUAL           reduce using rule 127 (literal -> character_literal .)
    NOTEQ           reduce using rule 127 (literal -> character_literal .)
    GREATER         reduce using rule 127 (literal -> character_literal .)
    GTEQUAL         reduce using rule 127 (literal -> character_literal .)
    LESS            reduce using rule 127 (literal -> character_literal .)
    LTEQUAL         reduce using rule 127 (literal -> character_literal .)
    COMMA           reduce using rule 127 (literal -> character_literal .)
    RPAREN          reduce using rule 127 (literal -> character_literal .)
    THEN            reduce using rule 127 (literal -> character_literal .)
    SEMI            reduce using rule 127 (literal -> character_literal .)
    ELSE            reduce using rule 127 (literal -> character_literal .)
    ELSIF           reduce using rule 127 (literal -> character_literal .)
    FI              reduce using rule 127 (literal -> character_literal .)
    COLON           reduce using rule 127 (literal -> character_literal .)
    DOWN            reduce using rule 127 (literal -> character_literal .)
    BY              reduce using rule 127 (literal -> character_literal .)
    TO              reduce using rule 127 (literal -> character_literal .)
    RBRACKET        reduce using rule 127 (literal -> character_literal .)
    WHILE           reduce using rule 127 (literal -> character_literal .)


state 77

    (125) literal -> integer_literal .

    LBRACKET        reduce using rule 125 (literal -> integer_literal .)
    TIMES           reduce using rule 125 (literal -> integer_literal .)
    DIVIDE          reduce using rule 125 (literal -> integer_literal .)
    MODULO          reduce using rule 125 (literal -> integer_literal .)
    PLUS            reduce using rule 125 (literal -> integer_literal .)
    MINUS           reduce using rule 125 (literal -> integer_literal .)
    CONCAT          reduce using rule 125 (literal -> integer_literal .)
    IN              reduce using rule 125 (literal -> integer_literal .)
    AND             reduce using rule 125 (literal -> integer_literal .)
    OR              reduce using rule 125 (literal -> integer_literal .)
    EQUAL           reduce using rule 125 (literal -> integer_literal .)
    NOTEQ           reduce using rule 125 (literal -> integer_literal .)
    GREATER         reduce using rule 125 (literal -> integer_literal .)
    GTEQUAL         reduce using rule 125 (literal -> integer_literal .)
    LESS            reduce using rule 125 (literal -> integer_literal .)
    LTEQUAL         reduce using rule 125 (literal -> integer_literal .)
    COMMA           reduce using rule 125 (literal -> integer_literal .)
    RPAREN          reduce using rule 125 (literal -> integer_literal .)
    THEN            reduce using rule 125 (literal -> integer_literal .)
    SEMI            reduce using rule 125 (literal -> integer_literal .)
    ELSE            reduce using rule 125 (literal -> integer_literal .)
    ELSIF           reduce using rule 125 (literal -> integer_literal .)
    FI              reduce using rule 125 (literal -> integer_literal .)
    COLON           reduce using rule 125 (literal -> integer_literal .)
    DOWN            reduce using rule 125 (literal -> integer_literal .)
    BY              reduce using rule 125 (literal -> integer_literal .)
    TO              reduce using rule 125 (literal -> integer_literal .)
    RBRACKET        reduce using rule 125 (literal -> integer_literal .)
    WHILE           reduce using rule 125 (literal -> integer_literal .)


state 78

    (103) monadic_operator -> NOT .

    ARROW           reduce using rule 103 (monadic_operator -> NOT .)
    LPAREN          reduce using rule 103 (monadic_operator -> NOT .)
    ID              reduce using rule 103 (monadic_operator -> NOT .)
    ICONST          reduce using rule 103 (monadic_operator -> NOT .)
    TRUE            reduce using rule 103 (monadic_operator -> NOT .)
    FALSE           reduce using rule 103 (monadic_operator -> NOT .)
    CCONST          reduce using rule 103 (monadic_operator -> NOT .)
    HAT             reduce using rule 103 (monadic_operator -> NOT .)
    NULL            reduce using rule 103 (monadic_operator -> NOT .)
    SCONST          reduce using rule 103 (monadic_operator -> NOT .)
    ABS             reduce using rule 103 (monadic_operator -> NOT .)
    ASC             reduce using rule 103 (monadic_operator -> NOT .)
    NUM             reduce using rule 103 (monadic_operator -> NOT .)
    UPPER           reduce using rule 103 (monadic_operator -> NOT .)
    LOWER           reduce using rule 103 (monadic_operator -> NOT .)
    LENGTH          reduce using rule 103 (monadic_operator -> NOT .)
    READ            reduce using rule 103 (monadic_operator -> NOT .)
    PRINT           reduce using rule 103 (monadic_operator -> NOT .)


state 79

    (122) primitive_value -> value_array_element .

    LBRACKET        reduce using rule 122 (primitive_value -> value_array_element .)
    TIMES           reduce using rule 122 (primitive_value -> value_array_element .)
    DIVIDE          reduce using rule 122 (primitive_value -> value_array_element .)
    MODULO          reduce using rule 122 (primitive_value -> value_array_element .)
    PLUS            reduce using rule 122 (primitive_value -> value_array_element .)
    MINUS           reduce using rule 122 (primitive_value -> value_array_element .)
    CONCAT          reduce using rule 122 (primitive_value -> value_array_element .)
    IN              reduce using rule 122 (primitive_value -> value_array_element .)
    AND             reduce using rule 122 (primitive_value -> value_array_element .)
    OR              reduce using rule 122 (primitive_value -> value_array_element .)
    EQUAL           reduce using rule 122 (primitive_value -> value_array_element .)
    NOTEQ           reduce using rule 122 (primitive_value -> value_array_element .)
    GREATER         reduce using rule 122 (primitive_value -> value_array_element .)
    GTEQUAL         reduce using rule 122 (primitive_value -> value_array_element .)
    LESS            reduce using rule 122 (primitive_value -> value_array_element .)
    LTEQUAL         reduce using rule 122 (primitive_value -> value_array_element .)
    DOWN            reduce using rule 122 (primitive_value -> value_array_element .)
    BY              reduce using rule 122 (primitive_value -> value_array_element .)
    TO              reduce using rule 122 (primitive_value -> value_array_element .)
    THEN            reduce using rule 122 (primitive_value -> value_array_element .)
    SEMI            reduce using rule 122 (primitive_value -> value_array_element .)
    RPAREN          reduce using rule 122 (primitive_value -> value_array_element .)
    COMMA           reduce using rule 122 (primitive_value -> value_array_element .)
    RBRACKET        reduce using rule 122 (primitive_value -> value_array_element .)
    COLON           reduce using rule 122 (primitive_value -> value_array_element .)
    ELSE            reduce using rule 122 (primitive_value -> value_array_element .)
    ELSIF           reduce using rule 122 (primitive_value -> value_array_element .)
    FI              reduce using rule 122 (primitive_value -> value_array_element .)
    WHILE           reduce using rule 122 (primitive_value -> value_array_element .)


state 80

    (72) location -> call_action .

    ARROW           reduce using rule 72 (location -> call_action .)
    LBRACKET        reduce using rule 72 (location -> call_action .)
    TIMES           reduce using rule 72 (location -> call_action .)
    DIVIDE          reduce using rule 72 (location -> call_action .)
    MODULO          reduce using rule 72 (location -> call_action .)
    PLUS            reduce using rule 72 (location -> call_action .)
    MINUS           reduce using rule 72 (location -> call_action .)
    CONCAT          reduce using rule 72 (location -> call_action .)
    IN              reduce using rule 72 (location -> call_action .)
    AND             reduce using rule 72 (location -> call_action .)
    OR              reduce using rule 72 (location -> call_action .)
    EQUAL           reduce using rule 72 (location -> call_action .)
    NOTEQ           reduce using rule 72 (location -> call_action .)
    GREATER         reduce using rule 72 (location -> call_action .)
    GTEQUAL         reduce using rule 72 (location -> call_action .)
    LESS            reduce using rule 72 (location -> call_action .)
    LTEQUAL         reduce using rule 72 (location -> call_action .)
    COMMA           reduce using rule 72 (location -> call_action .)
    RPAREN          reduce using rule 72 (location -> call_action .)
    THEN            reduce using rule 72 (location -> call_action .)
    COLON           reduce using rule 72 (location -> call_action .)
    RBRACKET        reduce using rule 72 (location -> call_action .)
    DOWN            reduce using rule 72 (location -> call_action .)
    BY              reduce using rule 72 (location -> call_action .)
    TO              reduce using rule 72 (location -> call_action .)
    FI              reduce using rule 72 (location -> call_action .)
    SEMI            reduce using rule 72 (location -> call_action .)
    ELSE            reduce using rule 72 (location -> call_action .)
    ELSIF           reduce using rule 72 (location -> call_action .)
    WHILE           reduce using rule 72 (location -> call_action .)


state 81

    (94) operand3 -> monadic_operator . operand4
    (96) operand4 -> . array_location
    (97) operand4 -> . referenced_location
    (98) operand4 -> . primitive_value
    (78) array_location -> . location
    (104) referenced_location -> . ARROW array_location
    (121) primitive_value -> . literal
    (122) primitive_value -> . value_array_element
    (123) primitive_value -> . value_array_slice
    (124) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (125) literal -> . integer_literal
    (126) literal -> . boolean_literal
    (127) literal -> . character_literal
    (128) literal -> . empty_literal
    (129) literal -> . character_string_literal
    (130) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (131) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (81) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (132) integer_literal -> . ICONST
    (133) boolean_literal -> . TRUE
    (134) boolean_literal -> . FALSE
    (135) character_literal -> . CCONST
    (136) character_literal -> . HAT LPAREN ICONST RPAREN
    (137) empty_literal -> . NULL
    (138) character_string_literal -> . SCONST
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT

    ARROW           shift and go to state 54
    LPAREN          shift and go to state 51
    ID              shift and go to state 58
    ICONST          shift and go to state 72
    TRUE            shift and go to state 64
    FALSE           shift and go to state 63
    CCONST          shift and go to state 74
    HAT             shift and go to state 60
    NULL            shift and go to state 59
    SCONST          shift and go to state 69
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    builtin_call                   shift and go to state 1
    boolean_literal                shift and go to state 71
    procedure_call                 shift and go to state 3
    primitive_value                shift and go to state 52
    identifier                     shift and go to state 55
    array_element                  shift and go to state 9
    array_slice                    shift and go to state 28
    character_string_literal       shift and go to state 66
    builtin_name                   shift and go to state 29
    dereferenced_reference         shift and go to state 32
    literal                        shift and go to state 61
    call_action                    shift and go to state 80
    referenced_location            shift and go to state 82
    operand4                       shift and go to state 168
    integer_literal                shift and go to state 77
    location                       shift and go to state 38
    empty_literal                  shift and go to state 68
    value_array_slice              shift and go to state 57
    array_location                 shift and go to state 67
    value_array_element            shift and go to state 79
    character_literal              shift and go to state 76
    parenthesized_expression       shift and go to state 70

state 82

    (97) operand4 -> referenced_location .

    TIMES           reduce using rule 97 (operand4 -> referenced_location .)
    DIVIDE          reduce using rule 97 (operand4 -> referenced_location .)
    MODULO          reduce using rule 97 (operand4 -> referenced_location .)
    PLUS            reduce using rule 97 (operand4 -> referenced_location .)
    MINUS           reduce using rule 97 (operand4 -> referenced_location .)
    CONCAT          reduce using rule 97 (operand4 -> referenced_location .)
    IN              reduce using rule 97 (operand4 -> referenced_location .)
    AND             reduce using rule 97 (operand4 -> referenced_location .)
    OR              reduce using rule 97 (operand4 -> referenced_location .)
    EQUAL           reduce using rule 97 (operand4 -> referenced_location .)
    NOTEQ           reduce using rule 97 (operand4 -> referenced_location .)
    GREATER         reduce using rule 97 (operand4 -> referenced_location .)
    GTEQUAL         reduce using rule 97 (operand4 -> referenced_location .)
    LESS            reduce using rule 97 (operand4 -> referenced_location .)
    LTEQUAL         reduce using rule 97 (operand4 -> referenced_location .)
    ELSE            reduce using rule 97 (operand4 -> referenced_location .)
    ELSIF           reduce using rule 97 (operand4 -> referenced_location .)
    DOWN            reduce using rule 97 (operand4 -> referenced_location .)
    TO              reduce using rule 97 (operand4 -> referenced_location .)
    COMMA           reduce using rule 97 (operand4 -> referenced_location .)
    RBRACKET        reduce using rule 97 (operand4 -> referenced_location .)
    COLON           reduce using rule 97 (operand4 -> referenced_location .)
    THEN            reduce using rule 97 (operand4 -> referenced_location .)
    SEMI            reduce using rule 97 (operand4 -> referenced_location .)
    RPAREN          reduce using rule 97 (operand4 -> referenced_location .)
    BY              reduce using rule 97 (operand4 -> referenced_location .)
    FI              reduce using rule 97 (operand4 -> referenced_location .)
    WHILE           reduce using rule 97 (operand4 -> referenced_location .)


state 83

    (155) if_action -> IF expression . then_clause else_clause FI
    (156) if_action -> IF expression . then_clause FI
    (157) then_clause -> . THEN action_statement_list

    THEN            shift and go to state 170

    then_clause                    shift and go to state 169

state 84

    (139) action_statement -> identifier COLON . action SEMI
    (141) action -> . bracketed_action
    (142) action -> . assignment_action
    (143) action -> . call_action
    (144) action -> . exit_action
    (145) action -> . result_action
    (146) action -> . return_action
    (147) bracketed_action -> . if_action
    (148) bracketed_action -> . do_action
    (149) assignment_action -> . array_location assigning_operator expression
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (180) exit_action -> . EXIT identifier
    (184) result_action -> . RESULT expression
    (181) return_action -> . RETURN result
    (155) if_action -> . IF expression then_clause else_clause FI
    (156) if_action -> . IF expression then_clause FI
    (185) do_action -> . DO control_part SEMI action_statement_nullable OD
    (186) do_action -> . DO action_statement_nullable OD
    (78) array_location -> . location
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    EXIT            shift and go to state 37
    RESULT          shift and go to state 43
    RETURN          shift and go to state 21
    IF              shift and go to state 6
    DO              shift and go to state 26
    ID              shift and go to state 171
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    builtin_call                   shift and go to state 1
    result_action                  shift and go to state 23
    action                         shift and go to state 172
    procedure_call                 shift and go to state 3
    assignment_action              shift and go to state 13
    bracketed_action               shift and go to state 31
    identifier                     shift and go to state 55
    array_element                  shift and go to state 9
    array_slice                    shift and go to state 28
    builtin_name                   shift and go to state 29
    dereferenced_reference         shift and go to state 32
    do_action                      shift and go to state 33
    return_action                  shift and go to state 15
    call_action                    shift and go to state 35
    if_action                      shift and go to state 39
    location                       shift and go to state 38
    array_location                 shift and go to state 18
    exit_action                    shift and go to state 42

state 85

    (176) procedure_call -> ID LPAREN . parameter_list RPAREN
    (177) procedure_call -> ID LPAREN . RPAREN
    (178) parameter_list -> . expression
    (179) parameter_list -> . expression COMMA parameter_list
    (79) expression -> . operand0
    (80) expression -> . conditional_expression
    (88) operand0 -> . operand1
    (89) operand0 -> . operand0 operator1 operand1
    (82) conditional_expression -> . IF expression then_expression else_expression FI
    (83) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (90) operand1 -> . operand2
    (91) operand1 -> . operand1 operator2 operand2
    (92) operand2 -> . operand3
    (93) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (94) operand3 -> . monadic_operator operand4
    (95) operand3 -> . operand4
    (102) monadic_operator -> . MINUS
    (103) monadic_operator -> . NOT
    (96) operand4 -> . array_location
    (97) operand4 -> . referenced_location
    (98) operand4 -> . primitive_value
    (78) array_location -> . location
    (104) referenced_location -> . ARROW array_location
    (121) primitive_value -> . literal
    (122) primitive_value -> . value_array_element
    (123) primitive_value -> . value_array_slice
    (124) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (125) literal -> . integer_literal
    (126) literal -> . boolean_literal
    (127) literal -> . character_literal
    (128) literal -> . empty_literal
    (129) literal -> . character_string_literal
    (130) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (131) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (81) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (132) integer_literal -> . ICONST
    (133) boolean_literal -> . TRUE
    (134) boolean_literal -> . FALSE
    (135) character_literal -> . CCONST
    (136) character_literal -> . HAT LPAREN ICONST RPAREN
    (137) empty_literal -> . NULL
    (138) character_string_literal -> . SCONST
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT

    RPAREN          shift and go to state 174
    IF              shift and go to state 53
    MINUS           shift and go to state 75
    NOT             shift and go to state 78
    ARROW           shift and go to state 54
    LPAREN          shift and go to state 51
    ID              shift and go to state 58
    ICONST          shift and go to state 72
    TRUE            shift and go to state 64
    FALSE           shift and go to state 63
    CCONST          shift and go to state 74
    HAT             shift and go to state 60
    NULL            shift and go to state 59
    SCONST          shift and go to state 69
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    operand1                       shift and go to state 49
    operand2                       shift and go to state 50
    parameter_list                 shift and go to state 173
    boolean_literal                shift and go to state 71
    procedure_call                 shift and go to state 3
    empty_literal                  shift and go to state 68
    primitive_value                shift and go to state 52
    integer_literal                shift and go to state 77
    identifier                     shift and go to state 55
    builtin_call                   shift and go to state 1
    conditional_expression         shift and go to state 56
    value_array_slice              shift and go to state 57
    builtin_name                   shift and go to state 29
    dereferenced_reference         shift and go to state 32
    literal                        shift and go to state 61
    array_element                  shift and go to state 9
    operand0                       shift and go to state 62
    operand4                       shift and go to state 73
    array_slice                    shift and go to state 28
    operand3                       shift and go to state 65
    location                       shift and go to state 38
    character_string_literal       shift and go to state 66
    character_literal              shift and go to state 76
    call_action                    shift and go to state 80
    array_location                 shift and go to state 67
    value_array_element            shift and go to state 79
    monadic_operator               shift and go to state 81
    referenced_location            shift and go to state 82
    expression                     shift and go to state 175
    parenthesized_expression       shift and go to state 70

state 86

    (28) procedure_statement -> ID COLON . procedure_definition
    (29) procedure_definition -> . PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI
    (30) procedure_definition -> . PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI
    (31) procedure_definition -> . PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI
    (32) procedure_definition -> . PROC LPAREN RPAREN SEMI statement_nullable END SEMI

    PROC            shift and go to state 176

    procedure_definition           shift and go to state 177

state 87

    (153) closed_dyadic_operator -> arithmetic_multiplicative_operator .

    ASSIGN          reduce using rule 153 (closed_dyadic_operator -> arithmetic_multiplicative_operator .)


state 88

    (119) string_concatenation_operator -> CONCAT .

    MINUS           reduce using rule 119 (string_concatenation_operator -> CONCAT .)
    NOT             reduce using rule 119 (string_concatenation_operator -> CONCAT .)
    ARROW           reduce using rule 119 (string_concatenation_operator -> CONCAT .)
    LPAREN          reduce using rule 119 (string_concatenation_operator -> CONCAT .)
    ID              reduce using rule 119 (string_concatenation_operator -> CONCAT .)
    ICONST          reduce using rule 119 (string_concatenation_operator -> CONCAT .)
    TRUE            reduce using rule 119 (string_concatenation_operator -> CONCAT .)
    FALSE           reduce using rule 119 (string_concatenation_operator -> CONCAT .)
    CCONST          reduce using rule 119 (string_concatenation_operator -> CONCAT .)
    HAT             reduce using rule 119 (string_concatenation_operator -> CONCAT .)
    NULL            reduce using rule 119 (string_concatenation_operator -> CONCAT .)
    SCONST          reduce using rule 119 (string_concatenation_operator -> CONCAT .)
    ABS             reduce using rule 119 (string_concatenation_operator -> CONCAT .)
    ASC             reduce using rule 119 (string_concatenation_operator -> CONCAT .)
    NUM             reduce using rule 119 (string_concatenation_operator -> CONCAT .)
    UPPER           reduce using rule 119 (string_concatenation_operator -> CONCAT .)
    LOWER           reduce using rule 119 (string_concatenation_operator -> CONCAT .)
    LENGTH          reduce using rule 119 (string_concatenation_operator -> CONCAT .)
    READ            reduce using rule 119 (string_concatenation_operator -> CONCAT .)
    PRINT           reduce using rule 119 (string_concatenation_operator -> CONCAT .)
    ASSIGN          reduce using rule 119 (string_concatenation_operator -> CONCAT .)


state 89

    (74) array_element -> array_location LBRACKET . expression_list RBRACKET
    (77) array_slice -> array_location LBRACKET . lower_bound COLON upper_bound RBRACKET
    (75) expression_list -> . expression
    (76) expression_list -> . expression COMMA expression_list
    (55) lower_bound -> . expression
    (79) expression -> . operand0
    (80) expression -> . conditional_expression
    (88) operand0 -> . operand1
    (89) operand0 -> . operand0 operator1 operand1
    (82) conditional_expression -> . IF expression then_expression else_expression FI
    (83) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (90) operand1 -> . operand2
    (91) operand1 -> . operand1 operator2 operand2
    (92) operand2 -> . operand3
    (93) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (94) operand3 -> . monadic_operator operand4
    (95) operand3 -> . operand4
    (102) monadic_operator -> . MINUS
    (103) monadic_operator -> . NOT
    (96) operand4 -> . array_location
    (97) operand4 -> . referenced_location
    (98) operand4 -> . primitive_value
    (78) array_location -> . location
    (104) referenced_location -> . ARROW array_location
    (121) primitive_value -> . literal
    (122) primitive_value -> . value_array_element
    (123) primitive_value -> . value_array_slice
    (124) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (125) literal -> . integer_literal
    (126) literal -> . boolean_literal
    (127) literal -> . character_literal
    (128) literal -> . empty_literal
    (129) literal -> . character_string_literal
    (130) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (131) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (81) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (132) integer_literal -> . ICONST
    (133) boolean_literal -> . TRUE
    (134) boolean_literal -> . FALSE
    (135) character_literal -> . CCONST
    (136) character_literal -> . HAT LPAREN ICONST RPAREN
    (137) empty_literal -> . NULL
    (138) character_string_literal -> . SCONST
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT

    IF              shift and go to state 53
    MINUS           shift and go to state 75
    NOT             shift and go to state 78
    ARROW           shift and go to state 54
    LPAREN          shift and go to state 51
    ID              shift and go to state 58
    ICONST          shift and go to state 72
    TRUE            shift and go to state 64
    FALSE           shift and go to state 63
    CCONST          shift and go to state 74
    HAT             shift and go to state 60
    NULL            shift and go to state 59
    SCONST          shift and go to state 69
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    operand1                       shift and go to state 49
    operand2                       shift and go to state 50
    operand0                       shift and go to state 62
    expression_list                shift and go to state 178
    boolean_literal                shift and go to state 71
    procedure_call                 shift and go to state 3
    array_element                  shift and go to state 9
    empty_literal                  shift and go to state 68
    primitive_value                shift and go to state 52
    integer_literal                shift and go to state 77
    identifier                     shift and go to state 55
    builtin_call                   shift and go to state 1
    conditional_expression         shift and go to state 56
    value_array_slice              shift and go to state 57
    builtin_name                   shift and go to state 29
    dereferenced_reference         shift and go to state 32
    literal                        shift and go to state 61
    lower_bound                    shift and go to state 179
    operand4                       shift and go to state 73
    array_slice                    shift and go to state 28
    operand3                       shift and go to state 65
    location                       shift and go to state 38
    character_string_literal       shift and go to state 66
    character_literal              shift and go to state 76
    call_action                    shift and go to state 80
    array_location                 shift and go to state 67
    value_array_element            shift and go to state 79
    monadic_operator               shift and go to state 81
    referenced_location            shift and go to state 82
    expression                     shift and go to state 180
    parenthesized_expression       shift and go to state 70

state 90

    (154) closed_dyadic_operator -> string_concatenation_operator .

    ASSIGN          reduce using rule 154 (closed_dyadic_operator -> string_concatenation_operator .)


state 91

    (150) assigning_operator -> closed_dyadic_operator . ASSIGN

    ASSIGN          shift and go to state 181


state 92

    (100) arithmetic_multiplicative_operator -> DIVIDE .

    MINUS           reduce using rule 100 (arithmetic_multiplicative_operator -> DIVIDE .)
    NOT             reduce using rule 100 (arithmetic_multiplicative_operator -> DIVIDE .)
    ARROW           reduce using rule 100 (arithmetic_multiplicative_operator -> DIVIDE .)
    LPAREN          reduce using rule 100 (arithmetic_multiplicative_operator -> DIVIDE .)
    ID              reduce using rule 100 (arithmetic_multiplicative_operator -> DIVIDE .)
    ICONST          reduce using rule 100 (arithmetic_multiplicative_operator -> DIVIDE .)
    TRUE            reduce using rule 100 (arithmetic_multiplicative_operator -> DIVIDE .)
    FALSE           reduce using rule 100 (arithmetic_multiplicative_operator -> DIVIDE .)
    CCONST          reduce using rule 100 (arithmetic_multiplicative_operator -> DIVIDE .)
    HAT             reduce using rule 100 (arithmetic_multiplicative_operator -> DIVIDE .)
    NULL            reduce using rule 100 (arithmetic_multiplicative_operator -> DIVIDE .)
    SCONST          reduce using rule 100 (arithmetic_multiplicative_operator -> DIVIDE .)
    ABS             reduce using rule 100 (arithmetic_multiplicative_operator -> DIVIDE .)
    ASC             reduce using rule 100 (arithmetic_multiplicative_operator -> DIVIDE .)
    NUM             reduce using rule 100 (arithmetic_multiplicative_operator -> DIVIDE .)
    UPPER           reduce using rule 100 (arithmetic_multiplicative_operator -> DIVIDE .)
    LOWER           reduce using rule 100 (arithmetic_multiplicative_operator -> DIVIDE .)
    LENGTH          reduce using rule 100 (arithmetic_multiplicative_operator -> DIVIDE .)
    READ            reduce using rule 100 (arithmetic_multiplicative_operator -> DIVIDE .)
    PRINT           reduce using rule 100 (arithmetic_multiplicative_operator -> DIVIDE .)
    ASSIGN          reduce using rule 100 (arithmetic_multiplicative_operator -> DIVIDE .)


state 93

    (101) arithmetic_multiplicative_operator -> MODULO .

    MINUS           reduce using rule 101 (arithmetic_multiplicative_operator -> MODULO .)
    NOT             reduce using rule 101 (arithmetic_multiplicative_operator -> MODULO .)
    ARROW           reduce using rule 101 (arithmetic_multiplicative_operator -> MODULO .)
    LPAREN          reduce using rule 101 (arithmetic_multiplicative_operator -> MODULO .)
    ID              reduce using rule 101 (arithmetic_multiplicative_operator -> MODULO .)
    ICONST          reduce using rule 101 (arithmetic_multiplicative_operator -> MODULO .)
    TRUE            reduce using rule 101 (arithmetic_multiplicative_operator -> MODULO .)
    FALSE           reduce using rule 101 (arithmetic_multiplicative_operator -> MODULO .)
    CCONST          reduce using rule 101 (arithmetic_multiplicative_operator -> MODULO .)
    HAT             reduce using rule 101 (arithmetic_multiplicative_operator -> MODULO .)
    NULL            reduce using rule 101 (arithmetic_multiplicative_operator -> MODULO .)
    SCONST          reduce using rule 101 (arithmetic_multiplicative_operator -> MODULO .)
    ABS             reduce using rule 101 (arithmetic_multiplicative_operator -> MODULO .)
    ASC             reduce using rule 101 (arithmetic_multiplicative_operator -> MODULO .)
    NUM             reduce using rule 101 (arithmetic_multiplicative_operator -> MODULO .)
    UPPER           reduce using rule 101 (arithmetic_multiplicative_operator -> MODULO .)
    LOWER           reduce using rule 101 (arithmetic_multiplicative_operator -> MODULO .)
    LENGTH          reduce using rule 101 (arithmetic_multiplicative_operator -> MODULO .)
    READ            reduce using rule 101 (arithmetic_multiplicative_operator -> MODULO .)
    PRINT           reduce using rule 101 (arithmetic_multiplicative_operator -> MODULO .)
    ASSIGN          reduce using rule 101 (arithmetic_multiplicative_operator -> MODULO .)


state 94

    (151) assigning_operator -> ASSIGN .

    IF              reduce using rule 151 (assigning_operator -> ASSIGN .)
    MINUS           reduce using rule 151 (assigning_operator -> ASSIGN .)
    NOT             reduce using rule 151 (assigning_operator -> ASSIGN .)
    ARROW           reduce using rule 151 (assigning_operator -> ASSIGN .)
    LPAREN          reduce using rule 151 (assigning_operator -> ASSIGN .)
    ID              reduce using rule 151 (assigning_operator -> ASSIGN .)
    ICONST          reduce using rule 151 (assigning_operator -> ASSIGN .)
    TRUE            reduce using rule 151 (assigning_operator -> ASSIGN .)
    FALSE           reduce using rule 151 (assigning_operator -> ASSIGN .)
    CCONST          reduce using rule 151 (assigning_operator -> ASSIGN .)
    HAT             reduce using rule 151 (assigning_operator -> ASSIGN .)
    NULL            reduce using rule 151 (assigning_operator -> ASSIGN .)
    SCONST          reduce using rule 151 (assigning_operator -> ASSIGN .)
    ABS             reduce using rule 151 (assigning_operator -> ASSIGN .)
    ASC             reduce using rule 151 (assigning_operator -> ASSIGN .)
    NUM             reduce using rule 151 (assigning_operator -> ASSIGN .)
    UPPER           reduce using rule 151 (assigning_operator -> ASSIGN .)
    LOWER           reduce using rule 151 (assigning_operator -> ASSIGN .)
    LENGTH          reduce using rule 151 (assigning_operator -> ASSIGN .)
    READ            reduce using rule 151 (assigning_operator -> ASSIGN .)
    PRINT           reduce using rule 151 (assigning_operator -> ASSIGN .)


state 95

    (73) dereferenced_reference -> array_location ARROW .

    ARROW           reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    LBRACKET        reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    TIMES           reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    DIVIDE          reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    MODULO          reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    PLUS            reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    MINUS           reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    CONCAT          reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    IN              reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    AND             reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    OR              reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    EQUAL           reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    NOTEQ           reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    GREATER         reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    GTEQUAL         reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    LESS            reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    LTEQUAL         reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    COLON           reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    ASSIGN          reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    THEN            reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    COMMA           reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    SEMI            reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    RBRACKET        reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    RPAREN          reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    ELSE            reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    ELSIF           reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    DOWN            reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    BY              reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    TO              reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    FI              reduce using rule 73 (dereferenced_reference -> array_location ARROW .)
    WHILE           reduce using rule 73 (dereferenced_reference -> array_location ARROW .)


state 96

    (118) arithmetic_additive_operator -> MINUS .

    MINUS           reduce using rule 118 (arithmetic_additive_operator -> MINUS .)
    NOT             reduce using rule 118 (arithmetic_additive_operator -> MINUS .)
    ARROW           reduce using rule 118 (arithmetic_additive_operator -> MINUS .)
    LPAREN          reduce using rule 118 (arithmetic_additive_operator -> MINUS .)
    ID              reduce using rule 118 (arithmetic_additive_operator -> MINUS .)
    ICONST          reduce using rule 118 (arithmetic_additive_operator -> MINUS .)
    TRUE            reduce using rule 118 (arithmetic_additive_operator -> MINUS .)
    FALSE           reduce using rule 118 (arithmetic_additive_operator -> MINUS .)
    CCONST          reduce using rule 118 (arithmetic_additive_operator -> MINUS .)
    HAT             reduce using rule 118 (arithmetic_additive_operator -> MINUS .)
    NULL            reduce using rule 118 (arithmetic_additive_operator -> MINUS .)
    SCONST          reduce using rule 118 (arithmetic_additive_operator -> MINUS .)
    ABS             reduce using rule 118 (arithmetic_additive_operator -> MINUS .)
    ASC             reduce using rule 118 (arithmetic_additive_operator -> MINUS .)
    NUM             reduce using rule 118 (arithmetic_additive_operator -> MINUS .)
    UPPER           reduce using rule 118 (arithmetic_additive_operator -> MINUS .)
    LOWER           reduce using rule 118 (arithmetic_additive_operator -> MINUS .)
    LENGTH          reduce using rule 118 (arithmetic_additive_operator -> MINUS .)
    READ            reduce using rule 118 (arithmetic_additive_operator -> MINUS .)
    PRINT           reduce using rule 118 (arithmetic_additive_operator -> MINUS .)
    ASSIGN          reduce using rule 118 (arithmetic_additive_operator -> MINUS .)


state 97

    (117) arithmetic_additive_operator -> PLUS .

    MINUS           reduce using rule 117 (arithmetic_additive_operator -> PLUS .)
    NOT             reduce using rule 117 (arithmetic_additive_operator -> PLUS .)
    ARROW           reduce using rule 117 (arithmetic_additive_operator -> PLUS .)
    LPAREN          reduce using rule 117 (arithmetic_additive_operator -> PLUS .)
    ID              reduce using rule 117 (arithmetic_additive_operator -> PLUS .)
    ICONST          reduce using rule 117 (arithmetic_additive_operator -> PLUS .)
    TRUE            reduce using rule 117 (arithmetic_additive_operator -> PLUS .)
    FALSE           reduce using rule 117 (arithmetic_additive_operator -> PLUS .)
    CCONST          reduce using rule 117 (arithmetic_additive_operator -> PLUS .)
    HAT             reduce using rule 117 (arithmetic_additive_operator -> PLUS .)
    NULL            reduce using rule 117 (arithmetic_additive_operator -> PLUS .)
    SCONST          reduce using rule 117 (arithmetic_additive_operator -> PLUS .)
    ABS             reduce using rule 117 (arithmetic_additive_operator -> PLUS .)
    ASC             reduce using rule 117 (arithmetic_additive_operator -> PLUS .)
    NUM             reduce using rule 117 (arithmetic_additive_operator -> PLUS .)
    UPPER           reduce using rule 117 (arithmetic_additive_operator -> PLUS .)
    LOWER           reduce using rule 117 (arithmetic_additive_operator -> PLUS .)
    LENGTH          reduce using rule 117 (arithmetic_additive_operator -> PLUS .)
    READ            reduce using rule 117 (arithmetic_additive_operator -> PLUS .)
    PRINT           reduce using rule 117 (arithmetic_additive_operator -> PLUS .)
    ASSIGN          reduce using rule 117 (arithmetic_additive_operator -> PLUS .)


state 98

    (149) assignment_action -> array_location assigning_operator . expression
    (79) expression -> . operand0
    (80) expression -> . conditional_expression
    (88) operand0 -> . operand1
    (89) operand0 -> . operand0 operator1 operand1
    (82) conditional_expression -> . IF expression then_expression else_expression FI
    (83) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (90) operand1 -> . operand2
    (91) operand1 -> . operand1 operator2 operand2
    (92) operand2 -> . operand3
    (93) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (94) operand3 -> . monadic_operator operand4
    (95) operand3 -> . operand4
    (102) monadic_operator -> . MINUS
    (103) monadic_operator -> . NOT
    (96) operand4 -> . array_location
    (97) operand4 -> . referenced_location
    (98) operand4 -> . primitive_value
    (78) array_location -> . location
    (104) referenced_location -> . ARROW array_location
    (121) primitive_value -> . literal
    (122) primitive_value -> . value_array_element
    (123) primitive_value -> . value_array_slice
    (124) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (125) literal -> . integer_literal
    (126) literal -> . boolean_literal
    (127) literal -> . character_literal
    (128) literal -> . empty_literal
    (129) literal -> . character_string_literal
    (130) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (131) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (81) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (132) integer_literal -> . ICONST
    (133) boolean_literal -> . TRUE
    (134) boolean_literal -> . FALSE
    (135) character_literal -> . CCONST
    (136) character_literal -> . HAT LPAREN ICONST RPAREN
    (137) empty_literal -> . NULL
    (138) character_string_literal -> . SCONST
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT

    IF              shift and go to state 53
    MINUS           shift and go to state 75
    NOT             shift and go to state 78
    ARROW           shift and go to state 54
    LPAREN          shift and go to state 51
    ID              shift and go to state 58
    ICONST          shift and go to state 72
    TRUE            shift and go to state 64
    FALSE           shift and go to state 63
    CCONST          shift and go to state 74
    HAT             shift and go to state 60
    NULL            shift and go to state 59
    SCONST          shift and go to state 69
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    operand1                       shift and go to state 49
    operand2                       shift and go to state 50
    operand0                       shift and go to state 62
    boolean_literal                shift and go to state 71
    procedure_call                 shift and go to state 3
    empty_literal                  shift and go to state 68
    primitive_value                shift and go to state 52
    integer_literal                shift and go to state 77
    identifier                     shift and go to state 55
    builtin_call                   shift and go to state 1
    conditional_expression         shift and go to state 56
    value_array_slice              shift and go to state 57
    builtin_name                   shift and go to state 29
    dereferenced_reference         shift and go to state 32
    literal                        shift and go to state 61
    array_element                  shift and go to state 9
    operand4                       shift and go to state 73
    array_slice                    shift and go to state 28
    operand3                       shift and go to state 65
    location                       shift and go to state 38
    value_array_element            shift and go to state 79
    character_string_literal       shift and go to state 66
    character_literal              shift and go to state 76
    call_action                    shift and go to state 80
    array_location                 shift and go to state 67
    monadic_operator               shift and go to state 81
    referenced_location            shift and go to state 82
    expression                     shift and go to state 182
    parenthesized_expression       shift and go to state 70

state 99

    (152) closed_dyadic_operator -> arithmetic_additive_operator .

    ASSIGN          reduce using rule 152 (closed_dyadic_operator -> arithmetic_additive_operator .)


state 100

    (99) arithmetic_multiplicative_operator -> TIMES .

    MINUS           reduce using rule 99 (arithmetic_multiplicative_operator -> TIMES .)
    NOT             reduce using rule 99 (arithmetic_multiplicative_operator -> TIMES .)
    ARROW           reduce using rule 99 (arithmetic_multiplicative_operator -> TIMES .)
    LPAREN          reduce using rule 99 (arithmetic_multiplicative_operator -> TIMES .)
    ID              reduce using rule 99 (arithmetic_multiplicative_operator -> TIMES .)
    ICONST          reduce using rule 99 (arithmetic_multiplicative_operator -> TIMES .)
    TRUE            reduce using rule 99 (arithmetic_multiplicative_operator -> TIMES .)
    FALSE           reduce using rule 99 (arithmetic_multiplicative_operator -> TIMES .)
    CCONST          reduce using rule 99 (arithmetic_multiplicative_operator -> TIMES .)
    HAT             reduce using rule 99 (arithmetic_multiplicative_operator -> TIMES .)
    NULL            reduce using rule 99 (arithmetic_multiplicative_operator -> TIMES .)
    SCONST          reduce using rule 99 (arithmetic_multiplicative_operator -> TIMES .)
    ABS             reduce using rule 99 (arithmetic_multiplicative_operator -> TIMES .)
    ASC             reduce using rule 99 (arithmetic_multiplicative_operator -> TIMES .)
    NUM             reduce using rule 99 (arithmetic_multiplicative_operator -> TIMES .)
    UPPER           reduce using rule 99 (arithmetic_multiplicative_operator -> TIMES .)
    LOWER           reduce using rule 99 (arithmetic_multiplicative_operator -> TIMES .)
    LENGTH          reduce using rule 99 (arithmetic_multiplicative_operator -> TIMES .)
    READ            reduce using rule 99 (arithmetic_multiplicative_operator -> TIMES .)
    PRINT           reduce using rule 99 (arithmetic_multiplicative_operator -> TIMES .)
    ASSIGN          reduce using rule 99 (arithmetic_multiplicative_operator -> TIMES .)


state 101

    (183) result -> empty .

    SEMI            reduce using rule 183 (result -> empty .)


state 102

    (181) return_action -> RETURN result .

    SEMI            reduce using rule 181 (return_action -> RETURN result .)


state 103

    (182) result -> expression .

    SEMI            reduce using rule 182 (result -> expression .)


state 104

    (24) newmode_statement -> TYPE newmode_list . SEMI

    SEMI            shift and go to state 183


state 105

    (25) newmode_list -> mode_definition .
    (26) newmode_list -> mode_definition . COMMA newmode_list

    SEMI            reduce using rule 25 (newmode_list -> mode_definition .)
    COMMA           shift and go to state 184


state 106

    (27) mode_definition -> identifier_list . ASSIGN mode

    ASSIGN          shift and go to state 185


state 107

    (140) action_statement -> action SEMI .

    DCL             reduce using rule 140 (action_statement -> action SEMI .)
    SYN             reduce using rule 140 (action_statement -> action SEMI .)
    TYPE            reduce using rule 140 (action_statement -> action SEMI .)
    ID              reduce using rule 140 (action_statement -> action SEMI .)
    EXIT            reduce using rule 140 (action_statement -> action SEMI .)
    RESULT          reduce using rule 140 (action_statement -> action SEMI .)
    RETURN          reduce using rule 140 (action_statement -> action SEMI .)
    IF              reduce using rule 140 (action_statement -> action SEMI .)
    DO              reduce using rule 140 (action_statement -> action SEMI .)
    ABS             reduce using rule 140 (action_statement -> action SEMI .)
    ASC             reduce using rule 140 (action_statement -> action SEMI .)
    NUM             reduce using rule 140 (action_statement -> action SEMI .)
    UPPER           reduce using rule 140 (action_statement -> action SEMI .)
    LOWER           reduce using rule 140 (action_statement -> action SEMI .)
    LENGTH          reduce using rule 140 (action_statement -> action SEMI .)
    READ            reduce using rule 140 (action_statement -> action SEMI .)
    PRINT           reduce using rule 140 (action_statement -> action SEMI .)
    $end            reduce using rule 140 (action_statement -> action SEMI .)
    OD              reduce using rule 140 (action_statement -> action SEMI .)
    FI              reduce using rule 140 (action_statement -> action SEMI .)
    ELSE            reduce using rule 140 (action_statement -> action SEMI .)
    ELSIF           reduce using rule 140 (action_statement -> action SEMI .)
    END             reduce using rule 140 (action_statement -> action SEMI .)


state 108

    (185) do_action -> DO control_part . SEMI action_statement_nullable OD

    SEMI            shift and go to state 186


state 109

    (187) control_part -> for_control . while_control
    (188) control_part -> for_control .
    (201) while_control -> . WHILE expression

    SEMI            reduce using rule 188 (control_part -> for_control .)
    WHILE           shift and go to state 111

    while_control                  shift and go to state 187

state 110

    (186) do_action -> DO action_statement_nullable . OD

    OD              shift and go to state 188


state 111

    (201) while_control -> WHILE . expression
    (79) expression -> . operand0
    (80) expression -> . conditional_expression
    (88) operand0 -> . operand1
    (89) operand0 -> . operand0 operator1 operand1
    (82) conditional_expression -> . IF expression then_expression else_expression FI
    (83) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (90) operand1 -> . operand2
    (91) operand1 -> . operand1 operator2 operand2
    (92) operand2 -> . operand3
    (93) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (94) operand3 -> . monadic_operator operand4
    (95) operand3 -> . operand4
    (102) monadic_operator -> . MINUS
    (103) monadic_operator -> . NOT
    (96) operand4 -> . array_location
    (97) operand4 -> . referenced_location
    (98) operand4 -> . primitive_value
    (78) array_location -> . location
    (104) referenced_location -> . ARROW array_location
    (121) primitive_value -> . literal
    (122) primitive_value -> . value_array_element
    (123) primitive_value -> . value_array_slice
    (124) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (125) literal -> . integer_literal
    (126) literal -> . boolean_literal
    (127) literal -> . character_literal
    (128) literal -> . empty_literal
    (129) literal -> . character_string_literal
    (130) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (131) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (81) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (132) integer_literal -> . ICONST
    (133) boolean_literal -> . TRUE
    (134) boolean_literal -> . FALSE
    (135) character_literal -> . CCONST
    (136) character_literal -> . HAT LPAREN ICONST RPAREN
    (137) empty_literal -> . NULL
    (138) character_string_literal -> . SCONST
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT

    IF              shift and go to state 53
    MINUS           shift and go to state 75
    NOT             shift and go to state 78
    ARROW           shift and go to state 54
    LPAREN          shift and go to state 51
    ID              shift and go to state 58
    ICONST          shift and go to state 72
    TRUE            shift and go to state 64
    FALSE           shift and go to state 63
    CCONST          shift and go to state 74
    HAT             shift and go to state 60
    NULL            shift and go to state 59
    SCONST          shift and go to state 69
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    operand1                       shift and go to state 49
    operand2                       shift and go to state 50
    boolean_literal                shift and go to state 71
    procedure_call                 shift and go to state 3
    empty_literal                  shift and go to state 68
    primitive_value                shift and go to state 52
    integer_literal                shift and go to state 77
    identifier                     shift and go to state 55
    builtin_call                   shift and go to state 1
    conditional_expression         shift and go to state 56
    value_array_slice              shift and go to state 57
    builtin_name                   shift and go to state 29
    dereferenced_reference         shift and go to state 32
    literal                        shift and go to state 61
    array_element                  shift and go to state 9
    operand0                       shift and go to state 62
    operand4                       shift and go to state 73
    array_slice                    shift and go to state 28
    operand3                       shift and go to state 65
    location                       shift and go to state 38
    character_string_literal       shift and go to state 66
    character_literal              shift and go to state 76
    call_action                    shift and go to state 80
    array_location                 shift and go to state 67
    value_array_element            shift and go to state 79
    monadic_operator               shift and go to state 81
    referenced_location            shift and go to state 82
    expression                     shift and go to state 189
    parenthesized_expression       shift and go to state 70

state 112

    (189) control_part -> while_control .

    SEMI            reduce using rule 189 (control_part -> while_control .)


state 113

    (162) action_statement_nullable -> action_statement . action_statement_nullable
    (162) action_statement_nullable -> . action_statement action_statement_nullable
    (163) action_statement_nullable -> . empty
    (139) action_statement -> . identifier COLON action SEMI
    (140) action_statement -> . action SEMI
    (202) empty -> .
    (23) identifier -> . ID
    (141) action -> . bracketed_action
    (142) action -> . assignment_action
    (143) action -> . call_action
    (144) action -> . exit_action
    (145) action -> . result_action
    (146) action -> . return_action
    (147) bracketed_action -> . if_action
    (148) bracketed_action -> . do_action
    (149) assignment_action -> . array_location assigning_operator expression
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (180) exit_action -> . EXIT identifier
    (184) result_action -> . RESULT expression
    (181) return_action -> . RETURN result
    (155) if_action -> . IF expression then_clause else_clause FI
    (156) if_action -> . IF expression then_clause FI
    (185) do_action -> . DO control_part SEMI action_statement_nullable OD
    (186) do_action -> . DO action_statement_nullable OD
    (78) array_location -> . location
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    OD              reduce using rule 202 (empty -> .)
    FI              reduce using rule 202 (empty -> .)
    ELSE            reduce using rule 202 (empty -> .)
    ELSIF           reduce using rule 202 (empty -> .)
    ID              shift and go to state 58
    EXIT            shift and go to state 37
    RESULT          shift and go to state 43
    RETURN          shift and go to state 21
    IF              shift and go to state 6
    DO              shift and go to state 26
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    builtin_call                   shift and go to state 1
    result_action                  shift and go to state 23
    action                         shift and go to state 24
    procedure_call                 shift and go to state 3
    action_statement_nullable      shift and go to state 190
    bracketed_action               shift and go to state 31
    identifier                     shift and go to state 7
    action_statement               shift and go to state 113
    array_element                  shift and go to state 9
    array_slice                    shift and go to state 28
    builtin_name                   shift and go to state 29
    assignment_action              shift and go to state 13
    dereferenced_reference         shift and go to state 32
    do_action                      shift and go to state 33
    call_action                    shift and go to state 35
    empty                          shift and go to state 115
    return_action                  shift and go to state 15
    location                       shift and go to state 38
    if_action                      shift and go to state 39
    array_location                 shift and go to state 18
    exit_action                    shift and go to state 42

state 114

    (190) for_control -> FOR . iteration
    (191) iteration -> . step_enumeration
    (192) iteration -> . range_enumeration
    (193) step_enumeration -> . identifier ASSIGN expression step_value DOWN end_value
    (194) step_enumeration -> . identifier ASSIGN expression step_value end_value
    (195) step_enumeration -> . identifier ASSIGN expression DOWN end_value
    (196) step_enumeration -> . identifier ASSIGN expression end_value
    (199) range_enumeration -> . identifier DOWN IN discrete_mode
    (200) range_enumeration -> . identifier IN discrete_mode
    (23) identifier -> . ID

    ID              shift and go to state 44

    step_enumeration               shift and go to state 193
    iteration                      shift and go to state 191
    range_enumeration              shift and go to state 192
    identifier                     shift and go to state 194

state 115

    (163) action_statement_nullable -> empty .

    OD              reduce using rule 163 (action_statement_nullable -> empty .)
    FI              reduce using rule 163 (action_statement_nullable -> empty .)
    ELSE            reduce using rule 163 (action_statement_nullable -> empty .)
    ELSIF           reduce using rule 163 (action_statement_nullable -> empty .)


state 116

    (166) builtin_call -> builtin_name LPAREN . parameter_list RPAREN
    (167) builtin_call -> builtin_name LPAREN . RPAREN
    (178) parameter_list -> . expression
    (179) parameter_list -> . expression COMMA parameter_list
    (79) expression -> . operand0
    (80) expression -> . conditional_expression
    (88) operand0 -> . operand1
    (89) operand0 -> . operand0 operator1 operand1
    (82) conditional_expression -> . IF expression then_expression else_expression FI
    (83) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (90) operand1 -> . operand2
    (91) operand1 -> . operand1 operator2 operand2
    (92) operand2 -> . operand3
    (93) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (94) operand3 -> . monadic_operator operand4
    (95) operand3 -> . operand4
    (102) monadic_operator -> . MINUS
    (103) monadic_operator -> . NOT
    (96) operand4 -> . array_location
    (97) operand4 -> . referenced_location
    (98) operand4 -> . primitive_value
    (78) array_location -> . location
    (104) referenced_location -> . ARROW array_location
    (121) primitive_value -> . literal
    (122) primitive_value -> . value_array_element
    (123) primitive_value -> . value_array_slice
    (124) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (125) literal -> . integer_literal
    (126) literal -> . boolean_literal
    (127) literal -> . character_literal
    (128) literal -> . empty_literal
    (129) literal -> . character_string_literal
    (130) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (131) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (81) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (132) integer_literal -> . ICONST
    (133) boolean_literal -> . TRUE
    (134) boolean_literal -> . FALSE
    (135) character_literal -> . CCONST
    (136) character_literal -> . HAT LPAREN ICONST RPAREN
    (137) empty_literal -> . NULL
    (138) character_string_literal -> . SCONST
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT

    RPAREN          shift and go to state 196
    IF              shift and go to state 53
    MINUS           shift and go to state 75
    NOT             shift and go to state 78
    ARROW           shift and go to state 54
    LPAREN          shift and go to state 51
    ID              shift and go to state 58
    ICONST          shift and go to state 72
    TRUE            shift and go to state 64
    FALSE           shift and go to state 63
    CCONST          shift and go to state 74
    HAT             shift and go to state 60
    NULL            shift and go to state 59
    SCONST          shift and go to state 69
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    operand1                       shift and go to state 49
    operand2                       shift and go to state 50
    operand0                       shift and go to state 62
    parameter_list                 shift and go to state 195
    boolean_literal                shift and go to state 71
    procedure_call                 shift and go to state 3
    empty_literal                  shift and go to state 68
    primitive_value                shift and go to state 52
    integer_literal                shift and go to state 77
    identifier                     shift and go to state 55
    builtin_call                   shift and go to state 1
    conditional_expression         shift and go to state 56
    value_array_slice              shift and go to state 57
    builtin_name                   shift and go to state 29
    dereferenced_reference         shift and go to state 32
    literal                        shift and go to state 61
    array_element                  shift and go to state 9
    operand4                       shift and go to state 73
    array_slice                    shift and go to state 28
    operand3                       shift and go to state 65
    location                       shift and go to state 38
    character_string_literal       shift and go to state 66
    character_literal              shift and go to state 76
    call_action                    shift and go to state 80
    array_location                 shift and go to state 67
    value_array_element            shift and go to state 79
    monadic_operator               shift and go to state 81
    referenced_location            shift and go to state 82
    expression                     shift and go to state 175
    parenthesized_expression       shift and go to state 70

state 117

    (10) synonym_statement -> SYN synonym_list . SEMI

    SEMI            shift and go to state 197


state 118

    (11) synonym_list -> synonym_definition .
    (12) synonym_list -> synonym_definition . COMMA synonym_list

    SEMI            reduce using rule 11 (synonym_list -> synonym_definition .)
    COMMA           shift and go to state 198


state 119

    (13) synonym_definition -> identifier_list . mode ASSIGN expression
    (14) synonym_definition -> identifier_list . ASSIGN expression
    (39) mode -> . mode_name
    (40) mode -> . discrete_mode
    (41) mode -> . reference_mode
    (42) mode -> . composite_mode
    (43) mode_name -> . identifier
    (44) discrete_mode -> . integer_mode
    (45) discrete_mode -> . boolean_mode
    (46) discrete_mode -> . character_mode
    (47) discrete_mode -> . discrete_range_mode
    (57) reference_mode -> . REF mode
    (58) composite_mode -> . string_mode
    (59) composite_mode -> . array_mode
    (23) identifier -> . ID
    (49) integer_mode -> . INT
    (50) boolean_mode -> . BOOL
    (51) character_mode -> . CHAR
    (52) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (53) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (60) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (62) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (48) discrete_mode_name -> . identifier

    ASSIGN          shift and go to state 199
    REF             shift and go to state 143
    ID              shift and go to state 44
    INT             shift and go to state 136
    BOOL            shift and go to state 133
    CHAR            shift and go to state 144
    CHARS           shift and go to state 129
    ARRAY           shift and go to state 131

    discrete_range_mode            shift and go to state 137
    character_mode                 shift and go to state 128
    integer_mode                   shift and go to state 138
    array_mode                     shift and go to state 130
    discrete_mode_name             shift and go to state 132
    boolean_mode                   shift and go to state 139
    composite_mode                 shift and go to state 140
    mode_name                      shift and go to state 141
    reference_mode                 shift and go to state 142
    mode                           shift and go to state 200
    string_mode                    shift and go to state 146
    identifier                     shift and go to state 135
    discrete_mode                  shift and go to state 134

state 120

    (2) statement_list -> statement statement_nullable .

    $end            reduce using rule 2 (statement_list -> statement statement_nullable .)


state 121

    (3) statement_nullable -> statement . statement_nullable
    (3) statement_nullable -> . statement statement_nullable
    (4) statement_nullable -> . empty
    (5) statement -> . declaration_statement
    (6) statement -> . synonym_statement
    (7) statement -> . newmode_statement
    (8) statement -> . action_statement
    (9) statement -> . procedure_statement
    (202) empty -> .
    (15) declaration_statement -> . DCL declaration_list SEMI
    (10) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (139) action_statement -> . identifier COLON action SEMI
    (140) action_statement -> . action SEMI
    (28) procedure_statement -> . ID COLON procedure_definition
    (23) identifier -> . ID
    (141) action -> . bracketed_action
    (142) action -> . assignment_action
    (143) action -> . call_action
    (144) action -> . exit_action
    (145) action -> . result_action
    (146) action -> . return_action
    (147) bracketed_action -> . if_action
    (148) bracketed_action -> . do_action
    (149) assignment_action -> . array_location assigning_operator expression
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (180) exit_action -> . EXIT identifier
    (184) result_action -> . RESULT expression
    (181) return_action -> . RETURN result
    (155) if_action -> . IF expression then_clause else_clause FI
    (156) if_action -> . IF expression then_clause FI
    (185) do_action -> . DO control_part SEMI action_statement_nullable OD
    (186) do_action -> . DO action_statement_nullable OD
    (78) array_location -> . location
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    $end            reduce using rule 202 (empty -> .)
    END             reduce using rule 202 (empty -> .)
    DCL             shift and go to state 4
    SYN             shift and go to state 30
    TYPE            shift and go to state 22
    ID              shift and go to state 12
    EXIT            shift and go to state 37
    RESULT          shift and go to state 43
    RETURN          shift and go to state 21
    IF              shift and go to state 6
    DO              shift and go to state 26
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    declaration_statement          shift and go to state 20
    synonym_statement              shift and go to state 2
    builtin_call                   shift and go to state 1
    result_action                  shift and go to state 23
    action                         shift and go to state 24
    procedure_call                 shift and go to state 3
    assignment_action              shift and go to state 13
    statement_nullable             shift and go to state 201
    location                       shift and go to state 38
    identifier                     shift and go to state 7
    action_statement               shift and go to state 27
    array_element                  shift and go to state 9
    array_slice                    shift and go to state 28
    builtin_name                   shift and go to state 29
    bracketed_action               shift and go to state 31
    dereferenced_reference         shift and go to state 32
    do_action                      shift and go to state 33
    statement                      shift and go to state 121
    call_action                    shift and go to state 35
    empty                          shift and go to state 122
    procedure_statement            shift and go to state 36
    return_action                  shift and go to state 15
    if_action                      shift and go to state 39
    array_location                 shift and go to state 18
    newmode_statement              shift and go to state 41
    exit_action                    shift and go to state 42

state 122

    (4) statement_nullable -> empty .

    END             reduce using rule 4 (statement_nullable -> empty .)
    $end            reduce using rule 4 (statement_nullable -> empty .)


state 123

    (180) exit_action -> EXIT identifier .

    SEMI            reduce using rule 180 (exit_action -> EXIT identifier .)


state 124

    (184) result_action -> RESULT expression .

    SEMI            reduce using rule 184 (result_action -> RESULT expression .)


state 125

    (22) identifier_list -> identifier COMMA . identifier_list
    (21) identifier_list -> . identifier
    (22) identifier_list -> . identifier COMMA identifier_list
    (23) identifier -> . ID

    ID              shift and go to state 44

    identifier                     shift and go to state 45
    identifier_list                shift and go to state 202

state 126

    (17) declaration_list -> declaration COMMA . declaration_list
    (16) declaration_list -> . declaration
    (17) declaration_list -> . declaration COMMA declaration_list
    (18) declaration -> . identifier_list mode initialization
    (19) declaration -> . identifier_list mode
    (21) identifier_list -> . identifier
    (22) identifier_list -> . identifier COMMA identifier_list
    (23) identifier -> . ID

    ID              shift and go to state 44

    declaration                    shift and go to state 46
    declaration_list               shift and go to state 203
    identifier                     shift and go to state 45
    identifier_list                shift and go to state 48

state 127

    (15) declaration_statement -> DCL declaration_list SEMI .

    DCL             reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    SYN             reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    TYPE            reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    ID              reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    EXIT            reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    RESULT          reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    RETURN          reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    IF              reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    DO              reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    ABS             reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    ASC             reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    NUM             reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    UPPER           reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    LOWER           reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    LENGTH          reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    READ            reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    PRINT           reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    END             reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)
    $end            reduce using rule 15 (declaration_statement -> DCL declaration_list SEMI .)


state 128

    (46) discrete_mode -> character_mode .

    LPAREN          reduce using rule 46 (discrete_mode -> character_mode .)
    WHILE           reduce using rule 46 (discrete_mode -> character_mode .)
    SEMI            reduce using rule 46 (discrete_mode -> character_mode .)
    LOC             reduce using rule 46 (discrete_mode -> character_mode .)
    RPAREN          reduce using rule 46 (discrete_mode -> character_mode .)
    COMMA           reduce using rule 46 (discrete_mode -> character_mode .)
    RBRACKET        reduce using rule 46 (discrete_mode -> character_mode .)
    ASSIGN          reduce using rule 46 (discrete_mode -> character_mode .)


state 129

    (60) string_mode -> CHARS . LBRACKET string_length RBRACKET

    LBRACKET        shift and go to state 204


state 130

    (59) composite_mode -> array_mode .

    ASSIGN          reduce using rule 59 (composite_mode -> array_mode .)
    COMMA           reduce using rule 59 (composite_mode -> array_mode .)
    SEMI            reduce using rule 59 (composite_mode -> array_mode .)
    LOC             reduce using rule 59 (composite_mode -> array_mode .)
    RPAREN          reduce using rule 59 (composite_mode -> array_mode .)


state 131

    (62) array_mode -> ARRAY . LBRACKET index_mode_list RBRACKET element_mode

    LBRACKET        shift and go to state 205


state 132

    (52) discrete_range_mode -> discrete_mode_name . LPAREN literal_range RPAREN

    LPAREN          shift and go to state 206


state 133

    (50) boolean_mode -> BOOL .

    LPAREN          reduce using rule 50 (boolean_mode -> BOOL .)
    LOC             reduce using rule 50 (boolean_mode -> BOOL .)
    RPAREN          reduce using rule 50 (boolean_mode -> BOOL .)
    ASSIGN          reduce using rule 50 (boolean_mode -> BOOL .)
    COMMA           reduce using rule 50 (boolean_mode -> BOOL .)
    SEMI            reduce using rule 50 (boolean_mode -> BOOL .)
    WHILE           reduce using rule 50 (boolean_mode -> BOOL .)
    RBRACKET        reduce using rule 50 (boolean_mode -> BOOL .)


state 134

    (40) mode -> discrete_mode .
    (53) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    ASSIGN          reduce using rule 40 (mode -> discrete_mode .)
    COMMA           reduce using rule 40 (mode -> discrete_mode .)
    SEMI            reduce using rule 40 (mode -> discrete_mode .)
    LOC             reduce using rule 40 (mode -> discrete_mode .)
    RPAREN          reduce using rule 40 (mode -> discrete_mode .)
    LPAREN          shift and go to state 207


state 135

    (43) mode_name -> identifier .
    (48) discrete_mode_name -> identifier .

    LOC             reduce using rule 43 (mode_name -> identifier .)
    COMMA           reduce using rule 43 (mode_name -> identifier .)
    RPAREN          reduce using rule 43 (mode_name -> identifier .)
    ASSIGN          reduce using rule 43 (mode_name -> identifier .)
    SEMI            reduce using rule 43 (mode_name -> identifier .)
    LPAREN          reduce using rule 48 (discrete_mode_name -> identifier .)


state 136

    (49) integer_mode -> INT .

    LPAREN          reduce using rule 49 (integer_mode -> INT .)
    ASSIGN          reduce using rule 49 (integer_mode -> INT .)
    COMMA           reduce using rule 49 (integer_mode -> INT .)
    SEMI            reduce using rule 49 (integer_mode -> INT .)
    LOC             reduce using rule 49 (integer_mode -> INT .)
    RPAREN          reduce using rule 49 (integer_mode -> INT .)
    WHILE           reduce using rule 49 (integer_mode -> INT .)
    RBRACKET        reduce using rule 49 (integer_mode -> INT .)


state 137

    (47) discrete_mode -> discrete_range_mode .

    LPAREN          reduce using rule 47 (discrete_mode -> discrete_range_mode .)
    WHILE           reduce using rule 47 (discrete_mode -> discrete_range_mode .)
    SEMI            reduce using rule 47 (discrete_mode -> discrete_range_mode .)
    LOC             reduce using rule 47 (discrete_mode -> discrete_range_mode .)
    RPAREN          reduce using rule 47 (discrete_mode -> discrete_range_mode .)
    COMMA           reduce using rule 47 (discrete_mode -> discrete_range_mode .)
    RBRACKET        reduce using rule 47 (discrete_mode -> discrete_range_mode .)
    ASSIGN          reduce using rule 47 (discrete_mode -> discrete_range_mode .)


state 138

    (44) discrete_mode -> integer_mode .

    LPAREN          reduce using rule 44 (discrete_mode -> integer_mode .)
    WHILE           reduce using rule 44 (discrete_mode -> integer_mode .)
    SEMI            reduce using rule 44 (discrete_mode -> integer_mode .)
    LOC             reduce using rule 44 (discrete_mode -> integer_mode .)
    RPAREN          reduce using rule 44 (discrete_mode -> integer_mode .)
    COMMA           reduce using rule 44 (discrete_mode -> integer_mode .)
    RBRACKET        reduce using rule 44 (discrete_mode -> integer_mode .)
    ASSIGN          reduce using rule 44 (discrete_mode -> integer_mode .)


state 139

    (45) discrete_mode -> boolean_mode .

    LPAREN          reduce using rule 45 (discrete_mode -> boolean_mode .)
    WHILE           reduce using rule 45 (discrete_mode -> boolean_mode .)
    SEMI            reduce using rule 45 (discrete_mode -> boolean_mode .)
    LOC             reduce using rule 45 (discrete_mode -> boolean_mode .)
    RPAREN          reduce using rule 45 (discrete_mode -> boolean_mode .)
    COMMA           reduce using rule 45 (discrete_mode -> boolean_mode .)
    RBRACKET        reduce using rule 45 (discrete_mode -> boolean_mode .)
    ASSIGN          reduce using rule 45 (discrete_mode -> boolean_mode .)


state 140

    (42) mode -> composite_mode .

    ASSIGN          reduce using rule 42 (mode -> composite_mode .)
    COMMA           reduce using rule 42 (mode -> composite_mode .)
    SEMI            reduce using rule 42 (mode -> composite_mode .)
    LOC             reduce using rule 42 (mode -> composite_mode .)
    RPAREN          reduce using rule 42 (mode -> composite_mode .)


state 141

    (39) mode -> mode_name .

    ASSIGN          reduce using rule 39 (mode -> mode_name .)
    COMMA           reduce using rule 39 (mode -> mode_name .)
    SEMI            reduce using rule 39 (mode -> mode_name .)
    LOC             reduce using rule 39 (mode -> mode_name .)
    RPAREN          reduce using rule 39 (mode -> mode_name .)


state 142

    (41) mode -> reference_mode .

    ASSIGN          reduce using rule 41 (mode -> reference_mode .)
    COMMA           reduce using rule 41 (mode -> reference_mode .)
    SEMI            reduce using rule 41 (mode -> reference_mode .)
    LOC             reduce using rule 41 (mode -> reference_mode .)
    RPAREN          reduce using rule 41 (mode -> reference_mode .)


state 143

    (57) reference_mode -> REF . mode
    (39) mode -> . mode_name
    (40) mode -> . discrete_mode
    (41) mode -> . reference_mode
    (42) mode -> . composite_mode
    (43) mode_name -> . identifier
    (44) discrete_mode -> . integer_mode
    (45) discrete_mode -> . boolean_mode
    (46) discrete_mode -> . character_mode
    (47) discrete_mode -> . discrete_range_mode
    (57) reference_mode -> . REF mode
    (58) composite_mode -> . string_mode
    (59) composite_mode -> . array_mode
    (23) identifier -> . ID
    (49) integer_mode -> . INT
    (50) boolean_mode -> . BOOL
    (51) character_mode -> . CHAR
    (52) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (53) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (60) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (62) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (48) discrete_mode_name -> . identifier

    REF             shift and go to state 143
    ID              shift and go to state 44
    INT             shift and go to state 136
    BOOL            shift and go to state 133
    CHAR            shift and go to state 144
    CHARS           shift and go to state 129
    ARRAY           shift and go to state 131

    discrete_range_mode            shift and go to state 137
    character_mode                 shift and go to state 128
    integer_mode                   shift and go to state 138
    array_mode                     shift and go to state 130
    discrete_mode_name             shift and go to state 132
    boolean_mode                   shift and go to state 139
    composite_mode                 shift and go to state 140
    mode_name                      shift and go to state 141
    reference_mode                 shift and go to state 142
    discrete_mode                  shift and go to state 134
    mode                           shift and go to state 208
    string_mode                    shift and go to state 146
    identifier                     shift and go to state 135

state 144

    (51) character_mode -> CHAR .

    LPAREN          reduce using rule 51 (character_mode -> CHAR .)
    ASSIGN          reduce using rule 51 (character_mode -> CHAR .)
    COMMA           reduce using rule 51 (character_mode -> CHAR .)
    SEMI            reduce using rule 51 (character_mode -> CHAR .)
    LOC             reduce using rule 51 (character_mode -> CHAR .)
    RPAREN          reduce using rule 51 (character_mode -> CHAR .)
    WHILE           reduce using rule 51 (character_mode -> CHAR .)
    RBRACKET        reduce using rule 51 (character_mode -> CHAR .)


state 145

    (18) declaration -> identifier_list mode . initialization
    (19) declaration -> identifier_list mode .
    (20) initialization -> . ASSIGN expression

    COMMA           reduce using rule 19 (declaration -> identifier_list mode .)
    SEMI            reduce using rule 19 (declaration -> identifier_list mode .)
    ASSIGN          shift and go to state 209

    initialization                 shift and go to state 210

state 146

    (58) composite_mode -> string_mode .

    ASSIGN          reduce using rule 58 (composite_mode -> string_mode .)
    COMMA           reduce using rule 58 (composite_mode -> string_mode .)
    SEMI            reduce using rule 58 (composite_mode -> string_mode .)
    LOC             reduce using rule 58 (composite_mode -> string_mode .)
    RPAREN          reduce using rule 58 (composite_mode -> string_mode .)


state 147

    (115) operator2 -> arithmetic_additive_operator .

    MINUS           reduce using rule 115 (operator2 -> arithmetic_additive_operator .)
    NOT             reduce using rule 115 (operator2 -> arithmetic_additive_operator .)
    ARROW           reduce using rule 115 (operator2 -> arithmetic_additive_operator .)
    LPAREN          reduce using rule 115 (operator2 -> arithmetic_additive_operator .)
    ID              reduce using rule 115 (operator2 -> arithmetic_additive_operator .)
    ICONST          reduce using rule 115 (operator2 -> arithmetic_additive_operator .)
    TRUE            reduce using rule 115 (operator2 -> arithmetic_additive_operator .)
    FALSE           reduce using rule 115 (operator2 -> arithmetic_additive_operator .)
    CCONST          reduce using rule 115 (operator2 -> arithmetic_additive_operator .)
    HAT             reduce using rule 115 (operator2 -> arithmetic_additive_operator .)
    NULL            reduce using rule 115 (operator2 -> arithmetic_additive_operator .)
    SCONST          reduce using rule 115 (operator2 -> arithmetic_additive_operator .)
    ABS             reduce using rule 115 (operator2 -> arithmetic_additive_operator .)
    ASC             reduce using rule 115 (operator2 -> arithmetic_additive_operator .)
    NUM             reduce using rule 115 (operator2 -> arithmetic_additive_operator .)
    UPPER           reduce using rule 115 (operator2 -> arithmetic_additive_operator .)
    LOWER           reduce using rule 115 (operator2 -> arithmetic_additive_operator .)
    LENGTH          reduce using rule 115 (operator2 -> arithmetic_additive_operator .)
    READ            reduce using rule 115 (operator2 -> arithmetic_additive_operator .)
    PRINT           reduce using rule 115 (operator2 -> arithmetic_additive_operator .)


state 148

    (116) operator2 -> string_concatenation_operator .

    MINUS           reduce using rule 116 (operator2 -> string_concatenation_operator .)
    NOT             reduce using rule 116 (operator2 -> string_concatenation_operator .)
    ARROW           reduce using rule 116 (operator2 -> string_concatenation_operator .)
    LPAREN          reduce using rule 116 (operator2 -> string_concatenation_operator .)
    ID              reduce using rule 116 (operator2 -> string_concatenation_operator .)
    ICONST          reduce using rule 116 (operator2 -> string_concatenation_operator .)
    TRUE            reduce using rule 116 (operator2 -> string_concatenation_operator .)
    FALSE           reduce using rule 116 (operator2 -> string_concatenation_operator .)
    CCONST          reduce using rule 116 (operator2 -> string_concatenation_operator .)
    HAT             reduce using rule 116 (operator2 -> string_concatenation_operator .)
    NULL            reduce using rule 116 (operator2 -> string_concatenation_operator .)
    SCONST          reduce using rule 116 (operator2 -> string_concatenation_operator .)
    ABS             reduce using rule 116 (operator2 -> string_concatenation_operator .)
    ASC             reduce using rule 116 (operator2 -> string_concatenation_operator .)
    NUM             reduce using rule 116 (operator2 -> string_concatenation_operator .)
    UPPER           reduce using rule 116 (operator2 -> string_concatenation_operator .)
    LOWER           reduce using rule 116 (operator2 -> string_concatenation_operator .)
    LENGTH          reduce using rule 116 (operator2 -> string_concatenation_operator .)
    READ            reduce using rule 116 (operator2 -> string_concatenation_operator .)
    PRINT           reduce using rule 116 (operator2 -> string_concatenation_operator .)


state 149

    (91) operand1 -> operand1 operator2 . operand2
    (92) operand2 -> . operand3
    (93) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (94) operand3 -> . monadic_operator operand4
    (95) operand3 -> . operand4
    (102) monadic_operator -> . MINUS
    (103) monadic_operator -> . NOT
    (96) operand4 -> . array_location
    (97) operand4 -> . referenced_location
    (98) operand4 -> . primitive_value
    (78) array_location -> . location
    (104) referenced_location -> . ARROW array_location
    (121) primitive_value -> . literal
    (122) primitive_value -> . value_array_element
    (123) primitive_value -> . value_array_slice
    (124) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (125) literal -> . integer_literal
    (126) literal -> . boolean_literal
    (127) literal -> . character_literal
    (128) literal -> . empty_literal
    (129) literal -> . character_string_literal
    (130) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (131) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (81) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (132) integer_literal -> . ICONST
    (133) boolean_literal -> . TRUE
    (134) boolean_literal -> . FALSE
    (135) character_literal -> . CCONST
    (136) character_literal -> . HAT LPAREN ICONST RPAREN
    (137) empty_literal -> . NULL
    (138) character_string_literal -> . SCONST
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT

    MINUS           shift and go to state 75
    NOT             shift and go to state 78
    ARROW           shift and go to state 54
    LPAREN          shift and go to state 51
    ID              shift and go to state 58
    ICONST          shift and go to state 72
    TRUE            shift and go to state 64
    FALSE           shift and go to state 63
    CCONST          shift and go to state 74
    HAT             shift and go to state 60
    NULL            shift and go to state 59
    SCONST          shift and go to state 69
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    operand2                       shift and go to state 211
    builtin_call                   shift and go to state 1
    boolean_literal                shift and go to state 71
    procedure_call                 shift and go to state 3
    operand4                       shift and go to state 73
    identifier                     shift and go to state 55
    array_element                  shift and go to state 9
    array_slice                    shift and go to state 28
    value_array_slice              shift and go to state 57
    builtin_name                   shift and go to state 29
    integer_literal                shift and go to state 77
    dereferenced_reference         shift and go to state 32
    literal                        shift and go to state 61
    call_action                    shift and go to state 80
    referenced_location            shift and go to state 82
    primitive_value                shift and go to state 52
    operand3                       shift and go to state 65
    location                       shift and go to state 38
    value_array_element            shift and go to state 79
    character_string_literal       shift and go to state 66
    array_location                 shift and go to state 67
    empty_literal                  shift and go to state 68
    monadic_operator               shift and go to state 81
    character_literal              shift and go to state 76
    parenthesized_expression       shift and go to state 70

state 150

    (93) operand2 -> operand2 arithmetic_multiplicative_operator . operand3
    (94) operand3 -> . monadic_operator operand4
    (95) operand3 -> . operand4
    (102) monadic_operator -> . MINUS
    (103) monadic_operator -> . NOT
    (96) operand4 -> . array_location
    (97) operand4 -> . referenced_location
    (98) operand4 -> . primitive_value
    (78) array_location -> . location
    (104) referenced_location -> . ARROW array_location
    (121) primitive_value -> . literal
    (122) primitive_value -> . value_array_element
    (123) primitive_value -> . value_array_slice
    (124) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (125) literal -> . integer_literal
    (126) literal -> . boolean_literal
    (127) literal -> . character_literal
    (128) literal -> . empty_literal
    (129) literal -> . character_string_literal
    (130) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (131) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (81) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (132) integer_literal -> . ICONST
    (133) boolean_literal -> . TRUE
    (134) boolean_literal -> . FALSE
    (135) character_literal -> . CCONST
    (136) character_literal -> . HAT LPAREN ICONST RPAREN
    (137) empty_literal -> . NULL
    (138) character_string_literal -> . SCONST
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT

    MINUS           shift and go to state 75
    NOT             shift and go to state 78
    ARROW           shift and go to state 54
    LPAREN          shift and go to state 51
    ID              shift and go to state 58
    ICONST          shift and go to state 72
    TRUE            shift and go to state 64
    FALSE           shift and go to state 63
    CCONST          shift and go to state 74
    HAT             shift and go to state 60
    NULL            shift and go to state 59
    SCONST          shift and go to state 69
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    builtin_call                   shift and go to state 1
    boolean_literal                shift and go to state 71
    procedure_call                 shift and go to state 3
    operand4                       shift and go to state 73
    identifier                     shift and go to state 55
    array_element                  shift and go to state 9
    array_slice                    shift and go to state 28
    value_array_slice              shift and go to state 57
    builtin_name                   shift and go to state 29
    operand3                       shift and go to state 212
    dereferenced_reference         shift and go to state 32
    literal                        shift and go to state 61
    call_action                    shift and go to state 80
    referenced_location            shift and go to state 82
    primitive_value                shift and go to state 52
    integer_literal                shift and go to state 77
    location                       shift and go to state 38
    value_array_element            shift and go to state 79
    character_string_literal       shift and go to state 66
    array_location                 shift and go to state 67
    empty_literal                  shift and go to state 68
    monadic_operator               shift and go to state 81
    character_literal              shift and go to state 76
    parenthesized_expression       shift and go to state 70

state 151

    (81) parenthesized_expression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 213


state 152

    (130) value_array_element -> primitive_value LBRACKET . expression_list RBRACKET
    (131) value_array_slice -> primitive_value LBRACKET . expression COLON expression RBRACKET
    (75) expression_list -> . expression
    (76) expression_list -> . expression COMMA expression_list
    (79) expression -> . operand0
    (80) expression -> . conditional_expression
    (88) operand0 -> . operand1
    (89) operand0 -> . operand0 operator1 operand1
    (82) conditional_expression -> . IF expression then_expression else_expression FI
    (83) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (90) operand1 -> . operand2
    (91) operand1 -> . operand1 operator2 operand2
    (92) operand2 -> . operand3
    (93) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (94) operand3 -> . monadic_operator operand4
    (95) operand3 -> . operand4
    (102) monadic_operator -> . MINUS
    (103) monadic_operator -> . NOT
    (96) operand4 -> . array_location
    (97) operand4 -> . referenced_location
    (98) operand4 -> . primitive_value
    (78) array_location -> . location
    (104) referenced_location -> . ARROW array_location
    (121) primitive_value -> . literal
    (122) primitive_value -> . value_array_element
    (123) primitive_value -> . value_array_slice
    (124) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (125) literal -> . integer_literal
    (126) literal -> . boolean_literal
    (127) literal -> . character_literal
    (128) literal -> . empty_literal
    (129) literal -> . character_string_literal
    (130) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (131) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (81) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (132) integer_literal -> . ICONST
    (133) boolean_literal -> . TRUE
    (134) boolean_literal -> . FALSE
    (135) character_literal -> . CCONST
    (136) character_literal -> . HAT LPAREN ICONST RPAREN
    (137) empty_literal -> . NULL
    (138) character_string_literal -> . SCONST
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT

    IF              shift and go to state 53
    MINUS           shift and go to state 75
    NOT             shift and go to state 78
    ARROW           shift and go to state 54
    LPAREN          shift and go to state 51
    ID              shift and go to state 58
    ICONST          shift and go to state 72
    TRUE            shift and go to state 64
    FALSE           shift and go to state 63
    CCONST          shift and go to state 74
    HAT             shift and go to state 60
    NULL            shift and go to state 59
    SCONST          shift and go to state 69
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    operand1                       shift and go to state 49
    operand2                       shift and go to state 50
    operand0                       shift and go to state 62
    expression_list                shift and go to state 214
    boolean_literal                shift and go to state 71
    procedure_call                 shift and go to state 3
    empty_literal                  shift and go to state 68
    operand4                       shift and go to state 73
    integer_literal                shift and go to state 77
    identifier                     shift and go to state 55
    builtin_call                   shift and go to state 1
    conditional_expression         shift and go to state 56
    value_array_slice              shift and go to state 57
    builtin_name                   shift and go to state 29
    dereferenced_reference         shift and go to state 32
    literal                        shift and go to state 61
    array_element                  shift and go to state 9
    primitive_value                shift and go to state 52
    array_slice                    shift and go to state 28
    operand3                       shift and go to state 65
    location                       shift and go to state 38
    character_string_literal       shift and go to state 66
    character_literal              shift and go to state 76
    call_action                    shift and go to state 80
    array_location                 shift and go to state 67
    value_array_element            shift and go to state 79
    monadic_operator               shift and go to state 81
    referenced_location            shift and go to state 82
    expression                     shift and go to state 215
    parenthesized_expression       shift and go to state 70

state 153

    (82) conditional_expression -> IF expression . then_expression else_expression FI
    (83) conditional_expression -> IF expression . then_expression elsif_expression else_expression FI
    (84) then_expression -> . THEN expression

    THEN            shift and go to state 217

    then_expression                shift and go to state 216

state 154

    (104) referenced_location -> ARROW array_location .
    (73) dereferenced_reference -> array_location . ARROW
    (74) array_element -> array_location . LBRACKET expression_list RBRACKET
    (77) array_slice -> array_location . LBRACKET lower_bound COLON upper_bound RBRACKET

    TIMES           reduce using rule 104 (referenced_location -> ARROW array_location .)
    DIVIDE          reduce using rule 104 (referenced_location -> ARROW array_location .)
    MODULO          reduce using rule 104 (referenced_location -> ARROW array_location .)
    PLUS            reduce using rule 104 (referenced_location -> ARROW array_location .)
    MINUS           reduce using rule 104 (referenced_location -> ARROW array_location .)
    CONCAT          reduce using rule 104 (referenced_location -> ARROW array_location .)
    IN              reduce using rule 104 (referenced_location -> ARROW array_location .)
    AND             reduce using rule 104 (referenced_location -> ARROW array_location .)
    OR              reduce using rule 104 (referenced_location -> ARROW array_location .)
    EQUAL           reduce using rule 104 (referenced_location -> ARROW array_location .)
    NOTEQ           reduce using rule 104 (referenced_location -> ARROW array_location .)
    GREATER         reduce using rule 104 (referenced_location -> ARROW array_location .)
    GTEQUAL         reduce using rule 104 (referenced_location -> ARROW array_location .)
    LESS            reduce using rule 104 (referenced_location -> ARROW array_location .)
    LTEQUAL         reduce using rule 104 (referenced_location -> ARROW array_location .)
    THEN            reduce using rule 104 (referenced_location -> ARROW array_location .)
    RBRACKET        reduce using rule 104 (referenced_location -> ARROW array_location .)
    FI              reduce using rule 104 (referenced_location -> ARROW array_location .)
    COLON           reduce using rule 104 (referenced_location -> ARROW array_location .)
    DOWN            reduce using rule 104 (referenced_location -> ARROW array_location .)
    BY              reduce using rule 104 (referenced_location -> ARROW array_location .)
    TO              reduce using rule 104 (referenced_location -> ARROW array_location .)
    COMMA           reduce using rule 104 (referenced_location -> ARROW array_location .)
    SEMI            reduce using rule 104 (referenced_location -> ARROW array_location .)
    RPAREN          reduce using rule 104 (referenced_location -> ARROW array_location .)
    ELSE            reduce using rule 104 (referenced_location -> ARROW array_location .)
    ELSIF           reduce using rule 104 (referenced_location -> ARROW array_location .)
    WHILE           reduce using rule 104 (referenced_location -> ARROW array_location .)
    ARROW           shift and go to state 95
    LBRACKET        shift and go to state 89


state 155

    (136) character_literal -> HAT LPAREN . ICONST RPAREN

    ICONST          shift and go to state 218


state 156

    (120) membership_operator -> IN .

    MINUS           reduce using rule 120 (membership_operator -> IN .)
    NOT             reduce using rule 120 (membership_operator -> IN .)
    ARROW           reduce using rule 120 (membership_operator -> IN .)
    LPAREN          reduce using rule 120 (membership_operator -> IN .)
    ID              reduce using rule 120 (membership_operator -> IN .)
    ICONST          reduce using rule 120 (membership_operator -> IN .)
    TRUE            reduce using rule 120 (membership_operator -> IN .)
    FALSE           reduce using rule 120 (membership_operator -> IN .)
    CCONST          reduce using rule 120 (membership_operator -> IN .)
    HAT             reduce using rule 120 (membership_operator -> IN .)
    NULL            reduce using rule 120 (membership_operator -> IN .)
    SCONST          reduce using rule 120 (membership_operator -> IN .)
    ABS             reduce using rule 120 (membership_operator -> IN .)
    ASC             reduce using rule 120 (membership_operator -> IN .)
    NUM             reduce using rule 120 (membership_operator -> IN .)
    UPPER           reduce using rule 120 (membership_operator -> IN .)
    LOWER           reduce using rule 120 (membership_operator -> IN .)
    LENGTH          reduce using rule 120 (membership_operator -> IN .)
    READ            reduce using rule 120 (membership_operator -> IN .)
    PRINT           reduce using rule 120 (membership_operator -> IN .)


state 157

    (109) relational_operator -> EQUAL .

    MINUS           reduce using rule 109 (relational_operator -> EQUAL .)
    NOT             reduce using rule 109 (relational_operator -> EQUAL .)
    ARROW           reduce using rule 109 (relational_operator -> EQUAL .)
    LPAREN          reduce using rule 109 (relational_operator -> EQUAL .)
    ID              reduce using rule 109 (relational_operator -> EQUAL .)
    ICONST          reduce using rule 109 (relational_operator -> EQUAL .)
    TRUE            reduce using rule 109 (relational_operator -> EQUAL .)
    FALSE           reduce using rule 109 (relational_operator -> EQUAL .)
    CCONST          reduce using rule 109 (relational_operator -> EQUAL .)
    HAT             reduce using rule 109 (relational_operator -> EQUAL .)
    NULL            reduce using rule 109 (relational_operator -> EQUAL .)
    SCONST          reduce using rule 109 (relational_operator -> EQUAL .)
    ABS             reduce using rule 109 (relational_operator -> EQUAL .)
    ASC             reduce using rule 109 (relational_operator -> EQUAL .)
    NUM             reduce using rule 109 (relational_operator -> EQUAL .)
    UPPER           reduce using rule 109 (relational_operator -> EQUAL .)
    LOWER           reduce using rule 109 (relational_operator -> EQUAL .)
    LENGTH          reduce using rule 109 (relational_operator -> EQUAL .)
    READ            reduce using rule 109 (relational_operator -> EQUAL .)
    PRINT           reduce using rule 109 (relational_operator -> EQUAL .)


state 158

    (108) relational_operator -> OR .

    MINUS           reduce using rule 108 (relational_operator -> OR .)
    NOT             reduce using rule 108 (relational_operator -> OR .)
    ARROW           reduce using rule 108 (relational_operator -> OR .)
    LPAREN          reduce using rule 108 (relational_operator -> OR .)
    ID              reduce using rule 108 (relational_operator -> OR .)
    ICONST          reduce using rule 108 (relational_operator -> OR .)
    TRUE            reduce using rule 108 (relational_operator -> OR .)
    FALSE           reduce using rule 108 (relational_operator -> OR .)
    CCONST          reduce using rule 108 (relational_operator -> OR .)
    HAT             reduce using rule 108 (relational_operator -> OR .)
    NULL            reduce using rule 108 (relational_operator -> OR .)
    SCONST          reduce using rule 108 (relational_operator -> OR .)
    ABS             reduce using rule 108 (relational_operator -> OR .)
    ASC             reduce using rule 108 (relational_operator -> OR .)
    NUM             reduce using rule 108 (relational_operator -> OR .)
    UPPER           reduce using rule 108 (relational_operator -> OR .)
    LOWER           reduce using rule 108 (relational_operator -> OR .)
    LENGTH          reduce using rule 108 (relational_operator -> OR .)
    READ            reduce using rule 108 (relational_operator -> OR .)
    PRINT           reduce using rule 108 (relational_operator -> OR .)


state 159

    (107) relational_operator -> AND .

    MINUS           reduce using rule 107 (relational_operator -> AND .)
    NOT             reduce using rule 107 (relational_operator -> AND .)
    ARROW           reduce using rule 107 (relational_operator -> AND .)
    LPAREN          reduce using rule 107 (relational_operator -> AND .)
    ID              reduce using rule 107 (relational_operator -> AND .)
    ICONST          reduce using rule 107 (relational_operator -> AND .)
    TRUE            reduce using rule 107 (relational_operator -> AND .)
    FALSE           reduce using rule 107 (relational_operator -> AND .)
    CCONST          reduce using rule 107 (relational_operator -> AND .)
    HAT             reduce using rule 107 (relational_operator -> AND .)
    NULL            reduce using rule 107 (relational_operator -> AND .)
    SCONST          reduce using rule 107 (relational_operator -> AND .)
    ABS             reduce using rule 107 (relational_operator -> AND .)
    ASC             reduce using rule 107 (relational_operator -> AND .)
    NUM             reduce using rule 107 (relational_operator -> AND .)
    UPPER           reduce using rule 107 (relational_operator -> AND .)
    LOWER           reduce using rule 107 (relational_operator -> AND .)
    LENGTH          reduce using rule 107 (relational_operator -> AND .)
    READ            reduce using rule 107 (relational_operator -> AND .)
    PRINT           reduce using rule 107 (relational_operator -> AND .)


state 160

    (89) operand0 -> operand0 operator1 . operand1
    (90) operand1 -> . operand2
    (91) operand1 -> . operand1 operator2 operand2
    (92) operand2 -> . operand3
    (93) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (94) operand3 -> . monadic_operator operand4
    (95) operand3 -> . operand4
    (102) monadic_operator -> . MINUS
    (103) monadic_operator -> . NOT
    (96) operand4 -> . array_location
    (97) operand4 -> . referenced_location
    (98) operand4 -> . primitive_value
    (78) array_location -> . location
    (104) referenced_location -> . ARROW array_location
    (121) primitive_value -> . literal
    (122) primitive_value -> . value_array_element
    (123) primitive_value -> . value_array_slice
    (124) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (125) literal -> . integer_literal
    (126) literal -> . boolean_literal
    (127) literal -> . character_literal
    (128) literal -> . empty_literal
    (129) literal -> . character_string_literal
    (130) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (131) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (81) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (132) integer_literal -> . ICONST
    (133) boolean_literal -> . TRUE
    (134) boolean_literal -> . FALSE
    (135) character_literal -> . CCONST
    (136) character_literal -> . HAT LPAREN ICONST RPAREN
    (137) empty_literal -> . NULL
    (138) character_string_literal -> . SCONST
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT

    MINUS           shift and go to state 75
    NOT             shift and go to state 78
    ARROW           shift and go to state 54
    LPAREN          shift and go to state 51
    ID              shift and go to state 58
    ICONST          shift and go to state 72
    TRUE            shift and go to state 64
    FALSE           shift and go to state 63
    CCONST          shift and go to state 74
    HAT             shift and go to state 60
    NULL            shift and go to state 59
    SCONST          shift and go to state 69
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    operand1                       shift and go to state 219
    operand2                       shift and go to state 50
    boolean_literal                shift and go to state 71
    procedure_call                 shift and go to state 3
    empty_literal                  shift and go to state 68
    primitive_value                shift and go to state 52
    identifier                     shift and go to state 55
    builtin_call                   shift and go to state 1
    array_element                  shift and go to state 9
    array_slice                    shift and go to state 28
    value_array_slice              shift and go to state 57
    builtin_name                   shift and go to state 29
    integer_literal                shift and go to state 77
    dereferenced_reference         shift and go to state 32
    literal                        shift and go to state 61
    call_action                    shift and go to state 80
    referenced_location            shift and go to state 82
    operand4                       shift and go to state 73
    operand3                       shift and go to state 65
    location                       shift and go to state 38
    value_array_element            shift and go to state 79
    character_string_literal       shift and go to state 66
    array_location                 shift and go to state 67
    character_literal              shift and go to state 76
    monadic_operator               shift and go to state 81
    parenthesized_expression       shift and go to state 70

state 161

    (106) operator1 -> relational_operator .

    MINUS           reduce using rule 106 (operator1 -> relational_operator .)
    NOT             reduce using rule 106 (operator1 -> relational_operator .)
    ARROW           reduce using rule 106 (operator1 -> relational_operator .)
    LPAREN          reduce using rule 106 (operator1 -> relational_operator .)
    ID              reduce using rule 106 (operator1 -> relational_operator .)
    ICONST          reduce using rule 106 (operator1 -> relational_operator .)
    TRUE            reduce using rule 106 (operator1 -> relational_operator .)
    FALSE           reduce using rule 106 (operator1 -> relational_operator .)
    CCONST          reduce using rule 106 (operator1 -> relational_operator .)
    HAT             reduce using rule 106 (operator1 -> relational_operator .)
    NULL            reduce using rule 106 (operator1 -> relational_operator .)
    SCONST          reduce using rule 106 (operator1 -> relational_operator .)
    ABS             reduce using rule 106 (operator1 -> relational_operator .)
    ASC             reduce using rule 106 (operator1 -> relational_operator .)
    NUM             reduce using rule 106 (operator1 -> relational_operator .)
    UPPER           reduce using rule 106 (operator1 -> relational_operator .)
    LOWER           reduce using rule 106 (operator1 -> relational_operator .)
    LENGTH          reduce using rule 106 (operator1 -> relational_operator .)
    READ            reduce using rule 106 (operator1 -> relational_operator .)
    PRINT           reduce using rule 106 (operator1 -> relational_operator .)


state 162

    (113) relational_operator -> LESS .

    MINUS           reduce using rule 113 (relational_operator -> LESS .)
    NOT             reduce using rule 113 (relational_operator -> LESS .)
    ARROW           reduce using rule 113 (relational_operator -> LESS .)
    LPAREN          reduce using rule 113 (relational_operator -> LESS .)
    ID              reduce using rule 113 (relational_operator -> LESS .)
    ICONST          reduce using rule 113 (relational_operator -> LESS .)
    TRUE            reduce using rule 113 (relational_operator -> LESS .)
    FALSE           reduce using rule 113 (relational_operator -> LESS .)
    CCONST          reduce using rule 113 (relational_operator -> LESS .)
    HAT             reduce using rule 113 (relational_operator -> LESS .)
    NULL            reduce using rule 113 (relational_operator -> LESS .)
    SCONST          reduce using rule 113 (relational_operator -> LESS .)
    ABS             reduce using rule 113 (relational_operator -> LESS .)
    ASC             reduce using rule 113 (relational_operator -> LESS .)
    NUM             reduce using rule 113 (relational_operator -> LESS .)
    UPPER           reduce using rule 113 (relational_operator -> LESS .)
    LOWER           reduce using rule 113 (relational_operator -> LESS .)
    LENGTH          reduce using rule 113 (relational_operator -> LESS .)
    READ            reduce using rule 113 (relational_operator -> LESS .)
    PRINT           reduce using rule 113 (relational_operator -> LESS .)


state 163

    (112) relational_operator -> GTEQUAL .

    MINUS           reduce using rule 112 (relational_operator -> GTEQUAL .)
    NOT             reduce using rule 112 (relational_operator -> GTEQUAL .)
    ARROW           reduce using rule 112 (relational_operator -> GTEQUAL .)
    LPAREN          reduce using rule 112 (relational_operator -> GTEQUAL .)
    ID              reduce using rule 112 (relational_operator -> GTEQUAL .)
    ICONST          reduce using rule 112 (relational_operator -> GTEQUAL .)
    TRUE            reduce using rule 112 (relational_operator -> GTEQUAL .)
    FALSE           reduce using rule 112 (relational_operator -> GTEQUAL .)
    CCONST          reduce using rule 112 (relational_operator -> GTEQUAL .)
    HAT             reduce using rule 112 (relational_operator -> GTEQUAL .)
    NULL            reduce using rule 112 (relational_operator -> GTEQUAL .)
    SCONST          reduce using rule 112 (relational_operator -> GTEQUAL .)
    ABS             reduce using rule 112 (relational_operator -> GTEQUAL .)
    ASC             reduce using rule 112 (relational_operator -> GTEQUAL .)
    NUM             reduce using rule 112 (relational_operator -> GTEQUAL .)
    UPPER           reduce using rule 112 (relational_operator -> GTEQUAL .)
    LOWER           reduce using rule 112 (relational_operator -> GTEQUAL .)
    LENGTH          reduce using rule 112 (relational_operator -> GTEQUAL .)
    READ            reduce using rule 112 (relational_operator -> GTEQUAL .)
    PRINT           reduce using rule 112 (relational_operator -> GTEQUAL .)


state 164

    (105) operator1 -> membership_operator .

    MINUS           reduce using rule 105 (operator1 -> membership_operator .)
    NOT             reduce using rule 105 (operator1 -> membership_operator .)
    ARROW           reduce using rule 105 (operator1 -> membership_operator .)
    LPAREN          reduce using rule 105 (operator1 -> membership_operator .)
    ID              reduce using rule 105 (operator1 -> membership_operator .)
    ICONST          reduce using rule 105 (operator1 -> membership_operator .)
    TRUE            reduce using rule 105 (operator1 -> membership_operator .)
    FALSE           reduce using rule 105 (operator1 -> membership_operator .)
    CCONST          reduce using rule 105 (operator1 -> membership_operator .)
    HAT             reduce using rule 105 (operator1 -> membership_operator .)
    NULL            reduce using rule 105 (operator1 -> membership_operator .)
    SCONST          reduce using rule 105 (operator1 -> membership_operator .)
    ABS             reduce using rule 105 (operator1 -> membership_operator .)
    ASC             reduce using rule 105 (operator1 -> membership_operator .)
    NUM             reduce using rule 105 (operator1 -> membership_operator .)
    UPPER           reduce using rule 105 (operator1 -> membership_operator .)
    LOWER           reduce using rule 105 (operator1 -> membership_operator .)
    LENGTH          reduce using rule 105 (operator1 -> membership_operator .)
    READ            reduce using rule 105 (operator1 -> membership_operator .)
    PRINT           reduce using rule 105 (operator1 -> membership_operator .)


state 165

    (114) relational_operator -> LTEQUAL .

    MINUS           reduce using rule 114 (relational_operator -> LTEQUAL .)
    NOT             reduce using rule 114 (relational_operator -> LTEQUAL .)
    ARROW           reduce using rule 114 (relational_operator -> LTEQUAL .)
    LPAREN          reduce using rule 114 (relational_operator -> LTEQUAL .)
    ID              reduce using rule 114 (relational_operator -> LTEQUAL .)
    ICONST          reduce using rule 114 (relational_operator -> LTEQUAL .)
    TRUE            reduce using rule 114 (relational_operator -> LTEQUAL .)
    FALSE           reduce using rule 114 (relational_operator -> LTEQUAL .)
    CCONST          reduce using rule 114 (relational_operator -> LTEQUAL .)
    HAT             reduce using rule 114 (relational_operator -> LTEQUAL .)
    NULL            reduce using rule 114 (relational_operator -> LTEQUAL .)
    SCONST          reduce using rule 114 (relational_operator -> LTEQUAL .)
    ABS             reduce using rule 114 (relational_operator -> LTEQUAL .)
    ASC             reduce using rule 114 (relational_operator -> LTEQUAL .)
    NUM             reduce using rule 114 (relational_operator -> LTEQUAL .)
    UPPER           reduce using rule 114 (relational_operator -> LTEQUAL .)
    LOWER           reduce using rule 114 (relational_operator -> LTEQUAL .)
    LENGTH          reduce using rule 114 (relational_operator -> LTEQUAL .)
    READ            reduce using rule 114 (relational_operator -> LTEQUAL .)
    PRINT           reduce using rule 114 (relational_operator -> LTEQUAL .)


state 166

    (110) relational_operator -> NOTEQ .

    MINUS           reduce using rule 110 (relational_operator -> NOTEQ .)
    NOT             reduce using rule 110 (relational_operator -> NOTEQ .)
    ARROW           reduce using rule 110 (relational_operator -> NOTEQ .)
    LPAREN          reduce using rule 110 (relational_operator -> NOTEQ .)
    ID              reduce using rule 110 (relational_operator -> NOTEQ .)
    ICONST          reduce using rule 110 (relational_operator -> NOTEQ .)
    TRUE            reduce using rule 110 (relational_operator -> NOTEQ .)
    FALSE           reduce using rule 110 (relational_operator -> NOTEQ .)
    CCONST          reduce using rule 110 (relational_operator -> NOTEQ .)
    HAT             reduce using rule 110 (relational_operator -> NOTEQ .)
    NULL            reduce using rule 110 (relational_operator -> NOTEQ .)
    SCONST          reduce using rule 110 (relational_operator -> NOTEQ .)
    ABS             reduce using rule 110 (relational_operator -> NOTEQ .)
    ASC             reduce using rule 110 (relational_operator -> NOTEQ .)
    NUM             reduce using rule 110 (relational_operator -> NOTEQ .)
    UPPER           reduce using rule 110 (relational_operator -> NOTEQ .)
    LOWER           reduce using rule 110 (relational_operator -> NOTEQ .)
    LENGTH          reduce using rule 110 (relational_operator -> NOTEQ .)
    READ            reduce using rule 110 (relational_operator -> NOTEQ .)
    PRINT           reduce using rule 110 (relational_operator -> NOTEQ .)


state 167

    (111) relational_operator -> GREATER .

    MINUS           reduce using rule 111 (relational_operator -> GREATER .)
    NOT             reduce using rule 111 (relational_operator -> GREATER .)
    ARROW           reduce using rule 111 (relational_operator -> GREATER .)
    LPAREN          reduce using rule 111 (relational_operator -> GREATER .)
    ID              reduce using rule 111 (relational_operator -> GREATER .)
    ICONST          reduce using rule 111 (relational_operator -> GREATER .)
    TRUE            reduce using rule 111 (relational_operator -> GREATER .)
    FALSE           reduce using rule 111 (relational_operator -> GREATER .)
    CCONST          reduce using rule 111 (relational_operator -> GREATER .)
    HAT             reduce using rule 111 (relational_operator -> GREATER .)
    NULL            reduce using rule 111 (relational_operator -> GREATER .)
    SCONST          reduce using rule 111 (relational_operator -> GREATER .)
    ABS             reduce using rule 111 (relational_operator -> GREATER .)
    ASC             reduce using rule 111 (relational_operator -> GREATER .)
    NUM             reduce using rule 111 (relational_operator -> GREATER .)
    UPPER           reduce using rule 111 (relational_operator -> GREATER .)
    LOWER           reduce using rule 111 (relational_operator -> GREATER .)
    LENGTH          reduce using rule 111 (relational_operator -> GREATER .)
    READ            reduce using rule 111 (relational_operator -> GREATER .)
    PRINT           reduce using rule 111 (relational_operator -> GREATER .)


state 168

    (94) operand3 -> monadic_operator operand4 .

    TIMES           reduce using rule 94 (operand3 -> monadic_operator operand4 .)
    DIVIDE          reduce using rule 94 (operand3 -> monadic_operator operand4 .)
    MODULO          reduce using rule 94 (operand3 -> monadic_operator operand4 .)
    PLUS            reduce using rule 94 (operand3 -> monadic_operator operand4 .)
    MINUS           reduce using rule 94 (operand3 -> monadic_operator operand4 .)
    CONCAT          reduce using rule 94 (operand3 -> monadic_operator operand4 .)
    IN              reduce using rule 94 (operand3 -> monadic_operator operand4 .)
    AND             reduce using rule 94 (operand3 -> monadic_operator operand4 .)
    OR              reduce using rule 94 (operand3 -> monadic_operator operand4 .)
    EQUAL           reduce using rule 94 (operand3 -> monadic_operator operand4 .)
    NOTEQ           reduce using rule 94 (operand3 -> monadic_operator operand4 .)
    GREATER         reduce using rule 94 (operand3 -> monadic_operator operand4 .)
    GTEQUAL         reduce using rule 94 (operand3 -> monadic_operator operand4 .)
    LESS            reduce using rule 94 (operand3 -> monadic_operator operand4 .)
    LTEQUAL         reduce using rule 94 (operand3 -> monadic_operator operand4 .)
    COLON           reduce using rule 94 (operand3 -> monadic_operator operand4 .)
    COMMA           reduce using rule 94 (operand3 -> monadic_operator operand4 .)
    RPAREN          reduce using rule 94 (operand3 -> monadic_operator operand4 .)
    THEN            reduce using rule 94 (operand3 -> monadic_operator operand4 .)
    SEMI            reduce using rule 94 (operand3 -> monadic_operator operand4 .)
    RBRACKET        reduce using rule 94 (operand3 -> monadic_operator operand4 .)
    ELSE            reduce using rule 94 (operand3 -> monadic_operator operand4 .)
    ELSIF           reduce using rule 94 (operand3 -> monadic_operator operand4 .)
    DOWN            reduce using rule 94 (operand3 -> monadic_operator operand4 .)
    BY              reduce using rule 94 (operand3 -> monadic_operator operand4 .)
    TO              reduce using rule 94 (operand3 -> monadic_operator operand4 .)
    FI              reduce using rule 94 (operand3 -> monadic_operator operand4 .)
    WHILE           reduce using rule 94 (operand3 -> monadic_operator operand4 .)


state 169

    (155) if_action -> IF expression then_clause . else_clause FI
    (156) if_action -> IF expression then_clause . FI
    (158) else_clause -> . ELSE action_statement_list
    (159) else_clause -> . ELSIF expression then_clause else_clause
    (160) else_clause -> . ELSIF expression then_clause

    FI              shift and go to state 221
    ELSE            shift and go to state 220
    ELSIF           shift and go to state 222

    else_clause                    shift and go to state 223

state 170

    (157) then_clause -> THEN . action_statement_list
    (161) action_statement_list -> . action_statement action_statement_nullable
    (139) action_statement -> . identifier COLON action SEMI
    (140) action_statement -> . action SEMI
    (23) identifier -> . ID
    (141) action -> . bracketed_action
    (142) action -> . assignment_action
    (143) action -> . call_action
    (144) action -> . exit_action
    (145) action -> . result_action
    (146) action -> . return_action
    (147) bracketed_action -> . if_action
    (148) bracketed_action -> . do_action
    (149) assignment_action -> . array_location assigning_operator expression
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (180) exit_action -> . EXIT identifier
    (184) result_action -> . RESULT expression
    (181) return_action -> . RETURN result
    (155) if_action -> . IF expression then_clause else_clause FI
    (156) if_action -> . IF expression then_clause FI
    (185) do_action -> . DO control_part SEMI action_statement_nullable OD
    (186) do_action -> . DO action_statement_nullable OD
    (78) array_location -> . location
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    ID              shift and go to state 58
    EXIT            shift and go to state 37
    RESULT          shift and go to state 43
    RETURN          shift and go to state 21
    IF              shift and go to state 6
    DO              shift and go to state 26
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    builtin_call                   shift and go to state 1
    result_action                  shift and go to state 23
    action                         shift and go to state 24
    procedure_call                 shift and go to state 3
    bracketed_action               shift and go to state 31
    identifier                     shift and go to state 7
    action_statement               shift and go to state 224
    array_element                  shift and go to state 9
    array_slice                    shift and go to state 28
    action_statement_list          shift and go to state 225
    builtin_name                   shift and go to state 29
    assignment_action              shift and go to state 13
    dereferenced_reference         shift and go to state 32
    do_action                      shift and go to state 33
    call_action                    shift and go to state 35
    return_action                  shift and go to state 15
    location                       shift and go to state 38
    if_action                      shift and go to state 39
    array_location                 shift and go to state 18
    exit_action                    shift and go to state 42

state 171

    (176) procedure_call -> ID . LPAREN parameter_list RPAREN
    (177) procedure_call -> ID . LPAREN RPAREN
    (23) identifier -> ID .

    LPAREN          shift and go to state 85
    ARROW           reduce using rule 23 (identifier -> ID .)
    LBRACKET        reduce using rule 23 (identifier -> ID .)
    ASSIGN          reduce using rule 23 (identifier -> ID .)
    PLUS            reduce using rule 23 (identifier -> ID .)
    MINUS           reduce using rule 23 (identifier -> ID .)
    TIMES           reduce using rule 23 (identifier -> ID .)
    DIVIDE          reduce using rule 23 (identifier -> ID .)
    MODULO          reduce using rule 23 (identifier -> ID .)
    CONCAT          reduce using rule 23 (identifier -> ID .)


state 172

    (139) action_statement -> identifier COLON action . SEMI

    SEMI            shift and go to state 226


state 173

    (176) procedure_call -> ID LPAREN parameter_list . RPAREN

    RPAREN          shift and go to state 227


state 174

    (177) procedure_call -> ID LPAREN RPAREN .

    ARROW           reduce using rule 177 (procedure_call -> ID LPAREN RPAREN .)
    LBRACKET        reduce using rule 177 (procedure_call -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 177 (procedure_call -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 177 (procedure_call -> ID LPAREN RPAREN .)
    MODULO          reduce using rule 177 (procedure_call -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 177 (procedure_call -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 177 (procedure_call -> ID LPAREN RPAREN .)
    CONCAT          reduce using rule 177 (procedure_call -> ID LPAREN RPAREN .)
    IN              reduce using rule 177 (procedure_call -> ID LPAREN RPAREN .)
    AND             reduce using rule 177 (procedure_call -> ID LPAREN RPAREN .)
    OR              reduce using rule 177 (procedure_call -> ID LPAREN RPAREN .)
    EQUAL           reduce using rule 177 (procedure_call -> ID LPAREN RPAREN .)
    NOTEQ           reduce using rule 177 (procedure_call -> ID LPAREN RPAREN .)
    GREATER         reduce using rule 177 (procedure_call -> ID LPAREN RPAREN .)
    GTEQUAL         reduce using rule 177 (procedure_call -> ID LPAREN RPAREN .)
    LESS            reduce using rule 177 (procedure_call -> ID LPAREN RPAREN .)
    LTEQUAL         reduce using rule 177 (procedure_call -> ID LPAREN RPAREN .)
    ELSE            reduce using rule 177 (procedure_call -> ID LPAREN RPAREN .)
    ELSIF           reduce using rule 177 (procedure_call -> ID LPAREN RPAREN .)
    SEMI            reduce using rule 177 (procedure_call -> ID LPAREN RPAREN .)
    THEN            reduce using rule 177 (procedure_call -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 177 (procedure_call -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 177 (procedure_call -> ID LPAREN RPAREN .)
    RBRACKET        reduce using rule 177 (procedure_call -> ID LPAREN RPAREN .)
    COLON           reduce using rule 177 (procedure_call -> ID LPAREN RPAREN .)
    DOWN            reduce using rule 177 (procedure_call -> ID LPAREN RPAREN .)
    BY              reduce using rule 177 (procedure_call -> ID LPAREN RPAREN .)
    TO              reduce using rule 177 (procedure_call -> ID LPAREN RPAREN .)
    FI              reduce using rule 177 (procedure_call -> ID LPAREN RPAREN .)
    WHILE           reduce using rule 177 (procedure_call -> ID LPAREN RPAREN .)
    ASSIGN          reduce using rule 177 (procedure_call -> ID LPAREN RPAREN .)


state 175

    (178) parameter_list -> expression .
    (179) parameter_list -> expression . COMMA parameter_list

    RPAREN          reduce using rule 178 (parameter_list -> expression .)
    COMMA           shift and go to state 228


state 176

    (29) procedure_definition -> PROC . LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI
    (30) procedure_definition -> PROC . LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI
    (31) procedure_definition -> PROC . LPAREN RPAREN result_spec SEMI statement_nullable END SEMI
    (32) procedure_definition -> PROC . LPAREN RPAREN SEMI statement_nullable END SEMI

    LPAREN          shift and go to state 229


state 177

    (28) procedure_statement -> ID COLON procedure_definition .

    DCL             reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    SYN             reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    TYPE            reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    ID              reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    EXIT            reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    RESULT          reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    RETURN          reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    IF              reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    DO              reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    ABS             reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    ASC             reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    NUM             reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    UPPER           reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    LOWER           reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    LENGTH          reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    READ            reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    PRINT           reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    $end            reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)
    END             reduce using rule 28 (procedure_statement -> ID COLON procedure_definition .)


state 178

    (74) array_element -> array_location LBRACKET expression_list . RBRACKET

    RBRACKET        shift and go to state 230


state 179

    (77) array_slice -> array_location LBRACKET lower_bound . COLON upper_bound RBRACKET

    COLON           shift and go to state 231


state 180

    (75) expression_list -> expression .
    (76) expression_list -> expression . COMMA expression_list
    (55) lower_bound -> expression .

    RBRACKET        reduce using rule 75 (expression_list -> expression .)
    COMMA           shift and go to state 232
    COLON           reduce using rule 55 (lower_bound -> expression .)


state 181

    (150) assigning_operator -> closed_dyadic_operator ASSIGN .

    IF              reduce using rule 150 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    MINUS           reduce using rule 150 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    NOT             reduce using rule 150 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    ARROW           reduce using rule 150 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    LPAREN          reduce using rule 150 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    ID              reduce using rule 150 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    ICONST          reduce using rule 150 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    TRUE            reduce using rule 150 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    FALSE           reduce using rule 150 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    CCONST          reduce using rule 150 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    HAT             reduce using rule 150 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    NULL            reduce using rule 150 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    SCONST          reduce using rule 150 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    ABS             reduce using rule 150 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    ASC             reduce using rule 150 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    NUM             reduce using rule 150 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    UPPER           reduce using rule 150 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    LOWER           reduce using rule 150 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    LENGTH          reduce using rule 150 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    READ            reduce using rule 150 (assigning_operator -> closed_dyadic_operator ASSIGN .)
    PRINT           reduce using rule 150 (assigning_operator -> closed_dyadic_operator ASSIGN .)


state 182

    (149) assignment_action -> array_location assigning_operator expression .

    SEMI            reduce using rule 149 (assignment_action -> array_location assigning_operator expression .)


state 183

    (24) newmode_statement -> TYPE newmode_list SEMI .

    DCL             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    SYN             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    TYPE            reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    ID              reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    EXIT            reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    RESULT          reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    RETURN          reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    IF              reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    DO              reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    ABS             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    ASC             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    NUM             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    UPPER           reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    LOWER           reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    LENGTH          reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    READ            reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    PRINT           reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    $end            reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    END             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)


state 184

    (26) newmode_list -> mode_definition COMMA . newmode_list
    (25) newmode_list -> . mode_definition
    (26) newmode_list -> . mode_definition COMMA newmode_list
    (27) mode_definition -> . identifier_list ASSIGN mode
    (21) identifier_list -> . identifier
    (22) identifier_list -> . identifier COMMA identifier_list
    (23) identifier -> . ID

    ID              shift and go to state 44

    newmode_list                   shift and go to state 233
    mode_definition                shift and go to state 105
    identifier                     shift and go to state 45
    identifier_list                shift and go to state 106

state 185

    (27) mode_definition -> identifier_list ASSIGN . mode
    (39) mode -> . mode_name
    (40) mode -> . discrete_mode
    (41) mode -> . reference_mode
    (42) mode -> . composite_mode
    (43) mode_name -> . identifier
    (44) discrete_mode -> . integer_mode
    (45) discrete_mode -> . boolean_mode
    (46) discrete_mode -> . character_mode
    (47) discrete_mode -> . discrete_range_mode
    (57) reference_mode -> . REF mode
    (58) composite_mode -> . string_mode
    (59) composite_mode -> . array_mode
    (23) identifier -> . ID
    (49) integer_mode -> . INT
    (50) boolean_mode -> . BOOL
    (51) character_mode -> . CHAR
    (52) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (53) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (60) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (62) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (48) discrete_mode_name -> . identifier

    REF             shift and go to state 143
    ID              shift and go to state 44
    INT             shift and go to state 136
    BOOL            shift and go to state 133
    CHAR            shift and go to state 144
    CHARS           shift and go to state 129
    ARRAY           shift and go to state 131

    discrete_range_mode            shift and go to state 137
    character_mode                 shift and go to state 128
    integer_mode                   shift and go to state 138
    array_mode                     shift and go to state 130
    discrete_mode_name             shift and go to state 132
    boolean_mode                   shift and go to state 139
    composite_mode                 shift and go to state 140
    mode_name                      shift and go to state 141
    reference_mode                 shift and go to state 142
    discrete_mode                  shift and go to state 134
    mode                           shift and go to state 234
    string_mode                    shift and go to state 146
    identifier                     shift and go to state 135

state 186

    (185) do_action -> DO control_part SEMI . action_statement_nullable OD
    (162) action_statement_nullable -> . action_statement action_statement_nullable
    (163) action_statement_nullable -> . empty
    (139) action_statement -> . identifier COLON action SEMI
    (140) action_statement -> . action SEMI
    (202) empty -> .
    (23) identifier -> . ID
    (141) action -> . bracketed_action
    (142) action -> . assignment_action
    (143) action -> . call_action
    (144) action -> . exit_action
    (145) action -> . result_action
    (146) action -> . return_action
    (147) bracketed_action -> . if_action
    (148) bracketed_action -> . do_action
    (149) assignment_action -> . array_location assigning_operator expression
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (180) exit_action -> . EXIT identifier
    (184) result_action -> . RESULT expression
    (181) return_action -> . RETURN result
    (155) if_action -> . IF expression then_clause else_clause FI
    (156) if_action -> . IF expression then_clause FI
    (185) do_action -> . DO control_part SEMI action_statement_nullable OD
    (186) do_action -> . DO action_statement_nullable OD
    (78) array_location -> . location
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    OD              reduce using rule 202 (empty -> .)
    ID              shift and go to state 58
    EXIT            shift and go to state 37
    RESULT          shift and go to state 43
    RETURN          shift and go to state 21
    IF              shift and go to state 6
    DO              shift and go to state 26
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    builtin_call                   shift and go to state 1
    result_action                  shift and go to state 23
    action                         shift and go to state 24
    procedure_call                 shift and go to state 3
    action_statement_nullable      shift and go to state 235
    bracketed_action               shift and go to state 31
    identifier                     shift and go to state 7
    action_statement               shift and go to state 113
    array_element                  shift and go to state 9
    array_slice                    shift and go to state 28
    builtin_name                   shift and go to state 29
    assignment_action              shift and go to state 13
    dereferenced_reference         shift and go to state 32
    do_action                      shift and go to state 33
    call_action                    shift and go to state 35
    empty                          shift and go to state 115
    return_action                  shift and go to state 15
    location                       shift and go to state 38
    if_action                      shift and go to state 39
    array_location                 shift and go to state 18
    exit_action                    shift and go to state 42

state 187

    (187) control_part -> for_control while_control .

    SEMI            reduce using rule 187 (control_part -> for_control while_control .)


state 188

    (186) do_action -> DO action_statement_nullable OD .

    SEMI            reduce using rule 186 (do_action -> DO action_statement_nullable OD .)


state 189

    (201) while_control -> WHILE expression .

    SEMI            reduce using rule 201 (while_control -> WHILE expression .)


state 190

    (162) action_statement_nullable -> action_statement action_statement_nullable .

    OD              reduce using rule 162 (action_statement_nullable -> action_statement action_statement_nullable .)
    FI              reduce using rule 162 (action_statement_nullable -> action_statement action_statement_nullable .)
    ELSE            reduce using rule 162 (action_statement_nullable -> action_statement action_statement_nullable .)
    ELSIF           reduce using rule 162 (action_statement_nullable -> action_statement action_statement_nullable .)


state 191

    (190) for_control -> FOR iteration .

    WHILE           reduce using rule 190 (for_control -> FOR iteration .)
    SEMI            reduce using rule 190 (for_control -> FOR iteration .)


state 192

    (192) iteration -> range_enumeration .

    WHILE           reduce using rule 192 (iteration -> range_enumeration .)
    SEMI            reduce using rule 192 (iteration -> range_enumeration .)


state 193

    (191) iteration -> step_enumeration .

    WHILE           reduce using rule 191 (iteration -> step_enumeration .)
    SEMI            reduce using rule 191 (iteration -> step_enumeration .)


state 194

    (193) step_enumeration -> identifier . ASSIGN expression step_value DOWN end_value
    (194) step_enumeration -> identifier . ASSIGN expression step_value end_value
    (195) step_enumeration -> identifier . ASSIGN expression DOWN end_value
    (196) step_enumeration -> identifier . ASSIGN expression end_value
    (199) range_enumeration -> identifier . DOWN IN discrete_mode
    (200) range_enumeration -> identifier . IN discrete_mode

    ASSIGN          shift and go to state 236
    DOWN            shift and go to state 237
    IN              shift and go to state 238


state 195

    (166) builtin_call -> builtin_name LPAREN parameter_list . RPAREN

    RPAREN          shift and go to state 239


state 196

    (167) builtin_call -> builtin_name LPAREN RPAREN .

    SEMI            reduce using rule 167 (builtin_call -> builtin_name LPAREN RPAREN .)
    ARROW           reduce using rule 167 (builtin_call -> builtin_name LPAREN RPAREN .)
    LBRACKET        reduce using rule 167 (builtin_call -> builtin_name LPAREN RPAREN .)
    ASSIGN          reduce using rule 167 (builtin_call -> builtin_name LPAREN RPAREN .)
    PLUS            reduce using rule 167 (builtin_call -> builtin_name LPAREN RPAREN .)
    MINUS           reduce using rule 167 (builtin_call -> builtin_name LPAREN RPAREN .)
    TIMES           reduce using rule 167 (builtin_call -> builtin_name LPAREN RPAREN .)
    DIVIDE          reduce using rule 167 (builtin_call -> builtin_name LPAREN RPAREN .)
    MODULO          reduce using rule 167 (builtin_call -> builtin_name LPAREN RPAREN .)
    CONCAT          reduce using rule 167 (builtin_call -> builtin_name LPAREN RPAREN .)
    IN              reduce using rule 167 (builtin_call -> builtin_name LPAREN RPAREN .)
    AND             reduce using rule 167 (builtin_call -> builtin_name LPAREN RPAREN .)
    OR              reduce using rule 167 (builtin_call -> builtin_name LPAREN RPAREN .)
    EQUAL           reduce using rule 167 (builtin_call -> builtin_name LPAREN RPAREN .)
    NOTEQ           reduce using rule 167 (builtin_call -> builtin_name LPAREN RPAREN .)
    GREATER         reduce using rule 167 (builtin_call -> builtin_name LPAREN RPAREN .)
    GTEQUAL         reduce using rule 167 (builtin_call -> builtin_name LPAREN RPAREN .)
    LESS            reduce using rule 167 (builtin_call -> builtin_name LPAREN RPAREN .)
    LTEQUAL         reduce using rule 167 (builtin_call -> builtin_name LPAREN RPAREN .)
    COMMA           reduce using rule 167 (builtin_call -> builtin_name LPAREN RPAREN .)
    ELSE            reduce using rule 167 (builtin_call -> builtin_name LPAREN RPAREN .)
    ELSIF           reduce using rule 167 (builtin_call -> builtin_name LPAREN RPAREN .)
    THEN            reduce using rule 167 (builtin_call -> builtin_name LPAREN RPAREN .)
    RBRACKET        reduce using rule 167 (builtin_call -> builtin_name LPAREN RPAREN .)
    RPAREN          reduce using rule 167 (builtin_call -> builtin_name LPAREN RPAREN .)
    COLON           reduce using rule 167 (builtin_call -> builtin_name LPAREN RPAREN .)
    DOWN            reduce using rule 167 (builtin_call -> builtin_name LPAREN RPAREN .)
    TO              reduce using rule 167 (builtin_call -> builtin_name LPAREN RPAREN .)
    BY              reduce using rule 167 (builtin_call -> builtin_name LPAREN RPAREN .)
    FI              reduce using rule 167 (builtin_call -> builtin_name LPAREN RPAREN .)
    WHILE           reduce using rule 167 (builtin_call -> builtin_name LPAREN RPAREN .)


state 197

    (10) synonym_statement -> SYN synonym_list SEMI .

    DCL             reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    SYN             reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    TYPE            reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    ID              reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    EXIT            reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    RESULT          reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    RETURN          reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    IF              reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    DO              reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    ABS             reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    ASC             reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    NUM             reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    UPPER           reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    LOWER           reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    LENGTH          reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    READ            reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    PRINT           reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    $end            reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)
    END             reduce using rule 10 (synonym_statement -> SYN synonym_list SEMI .)


state 198

    (12) synonym_list -> synonym_definition COMMA . synonym_list
    (11) synonym_list -> . synonym_definition
    (12) synonym_list -> . synonym_definition COMMA synonym_list
    (13) synonym_definition -> . identifier_list mode ASSIGN expression
    (14) synonym_definition -> . identifier_list ASSIGN expression
    (21) identifier_list -> . identifier
    (22) identifier_list -> . identifier COMMA identifier_list
    (23) identifier -> . ID

    ID              shift and go to state 44

    synonym_list                   shift and go to state 240
    identifier_list                shift and go to state 119
    synonym_definition             shift and go to state 118
    identifier                     shift and go to state 45

state 199

    (14) synonym_definition -> identifier_list ASSIGN . expression
    (79) expression -> . operand0
    (80) expression -> . conditional_expression
    (88) operand0 -> . operand1
    (89) operand0 -> . operand0 operator1 operand1
    (82) conditional_expression -> . IF expression then_expression else_expression FI
    (83) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (90) operand1 -> . operand2
    (91) operand1 -> . operand1 operator2 operand2
    (92) operand2 -> . operand3
    (93) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (94) operand3 -> . monadic_operator operand4
    (95) operand3 -> . operand4
    (102) monadic_operator -> . MINUS
    (103) monadic_operator -> . NOT
    (96) operand4 -> . array_location
    (97) operand4 -> . referenced_location
    (98) operand4 -> . primitive_value
    (78) array_location -> . location
    (104) referenced_location -> . ARROW array_location
    (121) primitive_value -> . literal
    (122) primitive_value -> . value_array_element
    (123) primitive_value -> . value_array_slice
    (124) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (125) literal -> . integer_literal
    (126) literal -> . boolean_literal
    (127) literal -> . character_literal
    (128) literal -> . empty_literal
    (129) literal -> . character_string_literal
    (130) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (131) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (81) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (132) integer_literal -> . ICONST
    (133) boolean_literal -> . TRUE
    (134) boolean_literal -> . FALSE
    (135) character_literal -> . CCONST
    (136) character_literal -> . HAT LPAREN ICONST RPAREN
    (137) empty_literal -> . NULL
    (138) character_string_literal -> . SCONST
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT

    IF              shift and go to state 53
    MINUS           shift and go to state 75
    NOT             shift and go to state 78
    ARROW           shift and go to state 54
    LPAREN          shift and go to state 51
    ID              shift and go to state 58
    ICONST          shift and go to state 72
    TRUE            shift and go to state 64
    FALSE           shift and go to state 63
    CCONST          shift and go to state 74
    HAT             shift and go to state 60
    NULL            shift and go to state 59
    SCONST          shift and go to state 69
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    operand1                       shift and go to state 49
    operand2                       shift and go to state 50
    boolean_literal                shift and go to state 71
    procedure_call                 shift and go to state 3
    character_string_literal       shift and go to state 66
    empty_literal                  shift and go to state 68
    primitive_value                shift and go to state 52
    integer_literal                shift and go to state 77
    identifier                     shift and go to state 55
    builtin_call                   shift and go to state 1
    conditional_expression         shift and go to state 56
    value_array_slice              shift and go to state 57
    builtin_name                   shift and go to state 29
    dereferenced_reference         shift and go to state 32
    literal                        shift and go to state 61
    array_element                  shift and go to state 9
    operand0                       shift and go to state 62
    operand4                       shift and go to state 73
    array_slice                    shift and go to state 28
    operand3                       shift and go to state 65
    location                       shift and go to state 38
    character_literal              shift and go to state 76
    call_action                    shift and go to state 80
    array_location                 shift and go to state 67
    value_array_element            shift and go to state 79
    monadic_operator               shift and go to state 81
    referenced_location            shift and go to state 82
    expression                     shift and go to state 241
    parenthesized_expression       shift and go to state 70

state 200

    (13) synonym_definition -> identifier_list mode . ASSIGN expression

    ASSIGN          shift and go to state 242


state 201

    (3) statement_nullable -> statement statement_nullable .

    END             reduce using rule 3 (statement_nullable -> statement statement_nullable .)
    $end            reduce using rule 3 (statement_nullable -> statement statement_nullable .)


state 202

    (22) identifier_list -> identifier COMMA identifier_list .

    ASSIGN          reduce using rule 22 (identifier_list -> identifier COMMA identifier_list .)
    REF             reduce using rule 22 (identifier_list -> identifier COMMA identifier_list .)
    ID              reduce using rule 22 (identifier_list -> identifier COMMA identifier_list .)
    INT             reduce using rule 22 (identifier_list -> identifier COMMA identifier_list .)
    BOOL            reduce using rule 22 (identifier_list -> identifier COMMA identifier_list .)
    CHAR            reduce using rule 22 (identifier_list -> identifier COMMA identifier_list .)
    CHARS           reduce using rule 22 (identifier_list -> identifier COMMA identifier_list .)
    ARRAY           reduce using rule 22 (identifier_list -> identifier COMMA identifier_list .)


state 203

    (17) declaration_list -> declaration COMMA declaration_list .

    SEMI            reduce using rule 17 (declaration_list -> declaration COMMA declaration_list .)


state 204

    (60) string_mode -> CHARS LBRACKET . string_length RBRACKET
    (61) string_length -> . integer_literal
    (132) integer_literal -> . ICONST

    ICONST          shift and go to state 72

    integer_literal                shift and go to state 243
    string_length                  shift and go to state 244

state 205

    (62) array_mode -> ARRAY LBRACKET . index_mode_list RBRACKET element_mode
    (63) index_mode_list -> . index_mode
    (64) index_mode_list -> . index_mode COMMA index_mode_list
    (65) index_mode -> . discrete_mode
    (66) index_mode -> . literal_range
    (44) discrete_mode -> . integer_mode
    (45) discrete_mode -> . boolean_mode
    (46) discrete_mode -> . character_mode
    (47) discrete_mode -> . discrete_range_mode
    (54) literal_range -> . lower_bound COLON upper_bound
    (49) integer_mode -> . INT
    (50) boolean_mode -> . BOOL
    (51) character_mode -> . CHAR
    (52) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (53) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (55) lower_bound -> . expression
    (48) discrete_mode_name -> . identifier
    (79) expression -> . operand0
    (80) expression -> . conditional_expression
    (23) identifier -> . ID
    (88) operand0 -> . operand1
    (89) operand0 -> . operand0 operator1 operand1
    (82) conditional_expression -> . IF expression then_expression else_expression FI
    (83) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (90) operand1 -> . operand2
    (91) operand1 -> . operand1 operator2 operand2
    (92) operand2 -> . operand3
    (93) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (94) operand3 -> . monadic_operator operand4
    (95) operand3 -> . operand4
    (102) monadic_operator -> . MINUS
    (103) monadic_operator -> . NOT
    (96) operand4 -> . array_location
    (97) operand4 -> . referenced_location
    (98) operand4 -> . primitive_value
    (78) array_location -> . location
    (104) referenced_location -> . ARROW array_location
    (121) primitive_value -> . literal
    (122) primitive_value -> . value_array_element
    (123) primitive_value -> . value_array_slice
    (124) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (125) literal -> . integer_literal
    (126) literal -> . boolean_literal
    (127) literal -> . character_literal
    (128) literal -> . empty_literal
    (129) literal -> . character_string_literal
    (130) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (131) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (81) parenthesized_expression -> . LPAREN expression RPAREN
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (132) integer_literal -> . ICONST
    (133) boolean_literal -> . TRUE
    (134) boolean_literal -> . FALSE
    (135) character_literal -> . CCONST
    (136) character_literal -> . HAT LPAREN ICONST RPAREN
    (137) empty_literal -> . NULL
    (138) character_string_literal -> . SCONST
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT

    INT             shift and go to state 136
    BOOL            shift and go to state 133
    CHAR            shift and go to state 144
    ID              shift and go to state 58
    IF              shift and go to state 53
    MINUS           shift and go to state 75
    NOT             shift and go to state 78
    ARROW           shift and go to state 54
    LPAREN          shift and go to state 51
    ICONST          shift and go to state 72
    TRUE            shift and go to state 64
    FALSE           shift and go to state 63
    CCONST          shift and go to state 74
    HAT             shift and go to state 60
    NULL            shift and go to state 59
    SCONST          shift and go to state 69
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    operand1                       shift and go to state 49
    operand2                       shift and go to state 50
    builtin_call                   shift and go to state 1
    procedure_call                 shift and go to state 3
    primitive_value                shift and go to state 52
    identifier                     shift and go to state 245
    array_element                  shift and go to state 9
    conditional_expression         shift and go to state 56
    value_array_slice              shift and go to state 57
    index_mode_list                shift and go to state 246
    literal                        shift and go to state 61
    operand0                       shift and go to state 62
    boolean_mode                   shift and go to state 139
    operand3                       shift and go to state 65
    character_string_literal       shift and go to state 66
    array_location                 shift and go to state 67
    value_array_element            shift and go to state 79
    lower_bound                    shift and go to state 247
    character_mode                 shift and go to state 128
    boolean_literal                shift and go to state 71
    operand4                       shift and go to state 73
    discrete_mode                  shift and go to state 248
    array_slice                    shift and go to state 28
    builtin_name                   shift and go to state 29
    discrete_range_mode            shift and go to state 137
    dereferenced_reference         shift and go to state 32
    integer_mode                   shift and go to state 138
    call_action                    shift and go to state 80
    character_literal              shift and go to state 76
    discrete_mode_name             shift and go to state 132
    integer_literal                shift and go to state 77
    location                       shift and go to state 38
    empty_literal                  shift and go to state 68
    expression                     shift and go to state 251
    index_mode                     shift and go to state 250
    parenthesized_expression       shift and go to state 70
    monadic_operator               shift and go to state 81
    referenced_location            shift and go to state 82
    literal_range                  shift and go to state 249

state 206

    (52) discrete_range_mode -> discrete_mode_name LPAREN . literal_range RPAREN
    (54) literal_range -> . lower_bound COLON upper_bound
    (55) lower_bound -> . expression
    (79) expression -> . operand0
    (80) expression -> . conditional_expression
    (88) operand0 -> . operand1
    (89) operand0 -> . operand0 operator1 operand1
    (82) conditional_expression -> . IF expression then_expression else_expression FI
    (83) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (90) operand1 -> . operand2
    (91) operand1 -> . operand1 operator2 operand2
    (92) operand2 -> . operand3
    (93) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (94) operand3 -> . monadic_operator operand4
    (95) operand3 -> . operand4
    (102) monadic_operator -> . MINUS
    (103) monadic_operator -> . NOT
    (96) operand4 -> . array_location
    (97) operand4 -> . referenced_location
    (98) operand4 -> . primitive_value
    (78) array_location -> . location
    (104) referenced_location -> . ARROW array_location
    (121) primitive_value -> . literal
    (122) primitive_value -> . value_array_element
    (123) primitive_value -> . value_array_slice
    (124) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (125) literal -> . integer_literal
    (126) literal -> . boolean_literal
    (127) literal -> . character_literal
    (128) literal -> . empty_literal
    (129) literal -> . character_string_literal
    (130) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (131) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (81) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (132) integer_literal -> . ICONST
    (133) boolean_literal -> . TRUE
    (134) boolean_literal -> . FALSE
    (135) character_literal -> . CCONST
    (136) character_literal -> . HAT LPAREN ICONST RPAREN
    (137) empty_literal -> . NULL
    (138) character_string_literal -> . SCONST
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT

    IF              shift and go to state 53
    MINUS           shift and go to state 75
    NOT             shift and go to state 78
    ARROW           shift and go to state 54
    LPAREN          shift and go to state 51
    ID              shift and go to state 58
    ICONST          shift and go to state 72
    TRUE            shift and go to state 64
    FALSE           shift and go to state 63
    CCONST          shift and go to state 74
    HAT             shift and go to state 60
    NULL            shift and go to state 59
    SCONST          shift and go to state 69
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    operand1                       shift and go to state 49
    operand2                       shift and go to state 50
    operand0                       shift and go to state 62
    boolean_literal                shift and go to state 71
    procedure_call                 shift and go to state 3
    array_element                  shift and go to state 9
    empty_literal                  shift and go to state 68
    primitive_value                shift and go to state 52
    character_string_literal       shift and go to state 66
    integer_literal                shift and go to state 77
    identifier                     shift and go to state 55
    builtin_call                   shift and go to state 1
    conditional_expression         shift and go to state 56
    value_array_slice              shift and go to state 57
    builtin_name                   shift and go to state 29
    dereferenced_reference         shift and go to state 32
    literal                        shift and go to state 61
    lower_bound                    shift and go to state 247
    operand4                       shift and go to state 73
    array_slice                    shift and go to state 28
    operand3                       shift and go to state 65
    location                       shift and go to state 38
    literal_range                  shift and go to state 252
    character_literal              shift and go to state 76
    call_action                    shift and go to state 80
    array_location                 shift and go to state 67
    value_array_element            shift and go to state 79
    monadic_operator               shift and go to state 81
    referenced_location            shift and go to state 82
    expression                     shift and go to state 251
    parenthesized_expression       shift and go to state 70

state 207

    (53) discrete_range_mode -> discrete_mode LPAREN . literal_range RPAREN
    (54) literal_range -> . lower_bound COLON upper_bound
    (55) lower_bound -> . expression
    (79) expression -> . operand0
    (80) expression -> . conditional_expression
    (88) operand0 -> . operand1
    (89) operand0 -> . operand0 operator1 operand1
    (82) conditional_expression -> . IF expression then_expression else_expression FI
    (83) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (90) operand1 -> . operand2
    (91) operand1 -> . operand1 operator2 operand2
    (92) operand2 -> . operand3
    (93) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (94) operand3 -> . monadic_operator operand4
    (95) operand3 -> . operand4
    (102) monadic_operator -> . MINUS
    (103) monadic_operator -> . NOT
    (96) operand4 -> . array_location
    (97) operand4 -> . referenced_location
    (98) operand4 -> . primitive_value
    (78) array_location -> . location
    (104) referenced_location -> . ARROW array_location
    (121) primitive_value -> . literal
    (122) primitive_value -> . value_array_element
    (123) primitive_value -> . value_array_slice
    (124) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (125) literal -> . integer_literal
    (126) literal -> . boolean_literal
    (127) literal -> . character_literal
    (128) literal -> . empty_literal
    (129) literal -> . character_string_literal
    (130) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (131) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (81) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (132) integer_literal -> . ICONST
    (133) boolean_literal -> . TRUE
    (134) boolean_literal -> . FALSE
    (135) character_literal -> . CCONST
    (136) character_literal -> . HAT LPAREN ICONST RPAREN
    (137) empty_literal -> . NULL
    (138) character_string_literal -> . SCONST
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT

    IF              shift and go to state 53
    MINUS           shift and go to state 75
    NOT             shift and go to state 78
    ARROW           shift and go to state 54
    LPAREN          shift and go to state 51
    ID              shift and go to state 58
    ICONST          shift and go to state 72
    TRUE            shift and go to state 64
    FALSE           shift and go to state 63
    CCONST          shift and go to state 74
    HAT             shift and go to state 60
    NULL            shift and go to state 59
    SCONST          shift and go to state 69
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    operand1                       shift and go to state 49
    operand2                       shift and go to state 50
    operand0                       shift and go to state 62
    boolean_literal                shift and go to state 71
    character_string_literal       shift and go to state 66
    array_element                  shift and go to state 9
    empty_literal                  shift and go to state 68
    primitive_value                shift and go to state 52
    integer_literal                shift and go to state 77
    identifier                     shift and go to state 55
    builtin_call                   shift and go to state 1
    conditional_expression         shift and go to state 56
    value_array_slice              shift and go to state 57
    builtin_name                   shift and go to state 29
    dereferenced_reference         shift and go to state 32
    literal                        shift and go to state 61
    lower_bound                    shift and go to state 247
    operand4                       shift and go to state 73
    array_slice                    shift and go to state 28
    operand3                       shift and go to state 65
    procedure_call                 shift and go to state 3
    location                       shift and go to state 38
    literal_range                  shift and go to state 253
    character_literal              shift and go to state 76
    call_action                    shift and go to state 80
    array_location                 shift and go to state 67
    value_array_element            shift and go to state 79
    monadic_operator               shift and go to state 81
    referenced_location            shift and go to state 82
    expression                     shift and go to state 251
    parenthesized_expression       shift and go to state 70

state 208

    (57) reference_mode -> REF mode .

    COMMA           reduce using rule 57 (reference_mode -> REF mode .)
    SEMI            reduce using rule 57 (reference_mode -> REF mode .)
    ASSIGN          reduce using rule 57 (reference_mode -> REF mode .)
    LOC             reduce using rule 57 (reference_mode -> REF mode .)
    RPAREN          reduce using rule 57 (reference_mode -> REF mode .)


state 209

    (20) initialization -> ASSIGN . expression
    (79) expression -> . operand0
    (80) expression -> . conditional_expression
    (88) operand0 -> . operand1
    (89) operand0 -> . operand0 operator1 operand1
    (82) conditional_expression -> . IF expression then_expression else_expression FI
    (83) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (90) operand1 -> . operand2
    (91) operand1 -> . operand1 operator2 operand2
    (92) operand2 -> . operand3
    (93) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (94) operand3 -> . monadic_operator operand4
    (95) operand3 -> . operand4
    (102) monadic_operator -> . MINUS
    (103) monadic_operator -> . NOT
    (96) operand4 -> . array_location
    (97) operand4 -> . referenced_location
    (98) operand4 -> . primitive_value
    (78) array_location -> . location
    (104) referenced_location -> . ARROW array_location
    (121) primitive_value -> . literal
    (122) primitive_value -> . value_array_element
    (123) primitive_value -> . value_array_slice
    (124) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (125) literal -> . integer_literal
    (126) literal -> . boolean_literal
    (127) literal -> . character_literal
    (128) literal -> . empty_literal
    (129) literal -> . character_string_literal
    (130) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (131) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (81) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (132) integer_literal -> . ICONST
    (133) boolean_literal -> . TRUE
    (134) boolean_literal -> . FALSE
    (135) character_literal -> . CCONST
    (136) character_literal -> . HAT LPAREN ICONST RPAREN
    (137) empty_literal -> . NULL
    (138) character_string_literal -> . SCONST
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT

    IF              shift and go to state 53
    MINUS           shift and go to state 75
    NOT             shift and go to state 78
    ARROW           shift and go to state 54
    LPAREN          shift and go to state 51
    ID              shift and go to state 58
    ICONST          shift and go to state 72
    TRUE            shift and go to state 64
    FALSE           shift and go to state 63
    CCONST          shift and go to state 74
    HAT             shift and go to state 60
    NULL            shift and go to state 59
    SCONST          shift and go to state 69
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    operand1                       shift and go to state 49
    operand2                       shift and go to state 50
    boolean_literal                shift and go to state 71
    procedure_call                 shift and go to state 3
    empty_literal                  shift and go to state 68
    primitive_value                shift and go to state 52
    integer_literal                shift and go to state 77
    identifier                     shift and go to state 55
    builtin_call                   shift and go to state 1
    conditional_expression         shift and go to state 56
    value_array_slice              shift and go to state 57
    builtin_name                   shift and go to state 29
    dereferenced_reference         shift and go to state 32
    literal                        shift and go to state 61
    array_element                  shift and go to state 9
    operand0                       shift and go to state 62
    operand4                       shift and go to state 73
    array_slice                    shift and go to state 28
    operand3                       shift and go to state 65
    location                       shift and go to state 38
    character_string_literal       shift and go to state 66
    character_literal              shift and go to state 76
    call_action                    shift and go to state 80
    array_location                 shift and go to state 67
    value_array_element            shift and go to state 79
    monadic_operator               shift and go to state 81
    referenced_location            shift and go to state 82
    expression                     shift and go to state 254
    parenthesized_expression       shift and go to state 70

state 210

    (18) declaration -> identifier_list mode initialization .

    COMMA           reduce using rule 18 (declaration -> identifier_list mode initialization .)
    SEMI            reduce using rule 18 (declaration -> identifier_list mode initialization .)


state 211

    (91) operand1 -> operand1 operator2 operand2 .
    (93) operand2 -> operand2 . arithmetic_multiplicative_operator operand3
    (99) arithmetic_multiplicative_operator -> . TIMES
    (100) arithmetic_multiplicative_operator -> . DIVIDE
    (101) arithmetic_multiplicative_operator -> . MODULO

    PLUS            reduce using rule 91 (operand1 -> operand1 operator2 operand2 .)
    MINUS           reduce using rule 91 (operand1 -> operand1 operator2 operand2 .)
    CONCAT          reduce using rule 91 (operand1 -> operand1 operator2 operand2 .)
    IN              reduce using rule 91 (operand1 -> operand1 operator2 operand2 .)
    AND             reduce using rule 91 (operand1 -> operand1 operator2 operand2 .)
    OR              reduce using rule 91 (operand1 -> operand1 operator2 operand2 .)
    EQUAL           reduce using rule 91 (operand1 -> operand1 operator2 operand2 .)
    NOTEQ           reduce using rule 91 (operand1 -> operand1 operator2 operand2 .)
    GREATER         reduce using rule 91 (operand1 -> operand1 operator2 operand2 .)
    GTEQUAL         reduce using rule 91 (operand1 -> operand1 operator2 operand2 .)
    LESS            reduce using rule 91 (operand1 -> operand1 operator2 operand2 .)
    LTEQUAL         reduce using rule 91 (operand1 -> operand1 operator2 operand2 .)
    THEN            reduce using rule 91 (operand1 -> operand1 operator2 operand2 .)
    ELSE            reduce using rule 91 (operand1 -> operand1 operator2 operand2 .)
    ELSIF           reduce using rule 91 (operand1 -> operand1 operator2 operand2 .)
    COMMA           reduce using rule 91 (operand1 -> operand1 operator2 operand2 .)
    RPAREN          reduce using rule 91 (operand1 -> operand1 operator2 operand2 .)
    SEMI            reduce using rule 91 (operand1 -> operand1 operator2 operand2 .)
    RBRACKET        reduce using rule 91 (operand1 -> operand1 operator2 operand2 .)
    COLON           reduce using rule 91 (operand1 -> operand1 operator2 operand2 .)
    DOWN            reduce using rule 91 (operand1 -> operand1 operator2 operand2 .)
    TO              reduce using rule 91 (operand1 -> operand1 operator2 operand2 .)
    BY              reduce using rule 91 (operand1 -> operand1 operator2 operand2 .)
    FI              reduce using rule 91 (operand1 -> operand1 operator2 operand2 .)
    WHILE           reduce using rule 91 (operand1 -> operand1 operator2 operand2 .)
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 92
    MODULO          shift and go to state 93

    arithmetic_multiplicative_operator shift and go to state 150

state 212

    (93) operand2 -> operand2 arithmetic_multiplicative_operator operand3 .

    TIMES           reduce using rule 93 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    DIVIDE          reduce using rule 93 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    MODULO          reduce using rule 93 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    PLUS            reduce using rule 93 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    MINUS           reduce using rule 93 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    CONCAT          reduce using rule 93 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    IN              reduce using rule 93 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    AND             reduce using rule 93 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    OR              reduce using rule 93 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    EQUAL           reduce using rule 93 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    NOTEQ           reduce using rule 93 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    GREATER         reduce using rule 93 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    GTEQUAL         reduce using rule 93 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LESS            reduce using rule 93 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LTEQUAL         reduce using rule 93 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    DOWN            reduce using rule 93 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    TO              reduce using rule 93 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    SEMI            reduce using rule 93 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    THEN            reduce using rule 93 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    RBRACKET        reduce using rule 93 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    ELSE            reduce using rule 93 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    ELSIF           reduce using rule 93 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    COMMA           reduce using rule 93 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    RPAREN          reduce using rule 93 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    COLON           reduce using rule 93 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    BY              reduce using rule 93 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    FI              reduce using rule 93 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    WHILE           reduce using rule 93 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)


state 213

    (81) parenthesized_expression -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 81 (parenthesized_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 81 (parenthesized_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 81 (parenthesized_expression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 81 (parenthesized_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 81 (parenthesized_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 81 (parenthesized_expression -> LPAREN expression RPAREN .)
    CONCAT          reduce using rule 81 (parenthesized_expression -> LPAREN expression RPAREN .)
    IN              reduce using rule 81 (parenthesized_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 81 (parenthesized_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 81 (parenthesized_expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 81 (parenthesized_expression -> LPAREN expression RPAREN .)
    NOTEQ           reduce using rule 81 (parenthesized_expression -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 81 (parenthesized_expression -> LPAREN expression RPAREN .)
    GTEQUAL         reduce using rule 81 (parenthesized_expression -> LPAREN expression RPAREN .)
    LESS            reduce using rule 81 (parenthesized_expression -> LPAREN expression RPAREN .)
    LTEQUAL         reduce using rule 81 (parenthesized_expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 81 (parenthesized_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 81 (parenthesized_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 81 (parenthesized_expression -> LPAREN expression RPAREN .)
    FI              reduce using rule 81 (parenthesized_expression -> LPAREN expression RPAREN .)
    DOWN            reduce using rule 81 (parenthesized_expression -> LPAREN expression RPAREN .)
    BY              reduce using rule 81 (parenthesized_expression -> LPAREN expression RPAREN .)
    TO              reduce using rule 81 (parenthesized_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 81 (parenthesized_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 81 (parenthesized_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 81 (parenthesized_expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 81 (parenthesized_expression -> LPAREN expression RPAREN .)
    ELSIF           reduce using rule 81 (parenthesized_expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 81 (parenthesized_expression -> LPAREN expression RPAREN .)


state 214

    (130) value_array_element -> primitive_value LBRACKET expression_list . RBRACKET

    RBRACKET        shift and go to state 255


state 215

    (131) value_array_slice -> primitive_value LBRACKET expression . COLON expression RBRACKET
    (75) expression_list -> expression .
    (76) expression_list -> expression . COMMA expression_list

    COLON           shift and go to state 256
    RBRACKET        reduce using rule 75 (expression_list -> expression .)
    COMMA           shift and go to state 232


state 216

    (82) conditional_expression -> IF expression then_expression . else_expression FI
    (83) conditional_expression -> IF expression then_expression . elsif_expression else_expression FI
    (85) else_expression -> . ELSE expression
    (86) elsif_expression -> . ELSIF expression then_expression
    (87) elsif_expression -> . elsif_expression ELSIF expression then_expression

    ELSE            shift and go to state 258
    ELSIF           shift and go to state 260

    else_expression                shift and go to state 257
    elsif_expression               shift and go to state 259

state 217

    (84) then_expression -> THEN . expression
    (79) expression -> . operand0
    (80) expression -> . conditional_expression
    (88) operand0 -> . operand1
    (89) operand0 -> . operand0 operator1 operand1
    (82) conditional_expression -> . IF expression then_expression else_expression FI
    (83) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (90) operand1 -> . operand2
    (91) operand1 -> . operand1 operator2 operand2
    (92) operand2 -> . operand3
    (93) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (94) operand3 -> . monadic_operator operand4
    (95) operand3 -> . operand4
    (102) monadic_operator -> . MINUS
    (103) monadic_operator -> . NOT
    (96) operand4 -> . array_location
    (97) operand4 -> . referenced_location
    (98) operand4 -> . primitive_value
    (78) array_location -> . location
    (104) referenced_location -> . ARROW array_location
    (121) primitive_value -> . literal
    (122) primitive_value -> . value_array_element
    (123) primitive_value -> . value_array_slice
    (124) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (125) literal -> . integer_literal
    (126) literal -> . boolean_literal
    (127) literal -> . character_literal
    (128) literal -> . empty_literal
    (129) literal -> . character_string_literal
    (130) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (131) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (81) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (132) integer_literal -> . ICONST
    (133) boolean_literal -> . TRUE
    (134) boolean_literal -> . FALSE
    (135) character_literal -> . CCONST
    (136) character_literal -> . HAT LPAREN ICONST RPAREN
    (137) empty_literal -> . NULL
    (138) character_string_literal -> . SCONST
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT

    IF              shift and go to state 53
    MINUS           shift and go to state 75
    NOT             shift and go to state 78
    ARROW           shift and go to state 54
    LPAREN          shift and go to state 51
    ID              shift and go to state 58
    ICONST          shift and go to state 72
    TRUE            shift and go to state 64
    FALSE           shift and go to state 63
    CCONST          shift and go to state 74
    HAT             shift and go to state 60
    NULL            shift and go to state 59
    SCONST          shift and go to state 69
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    operand1                       shift and go to state 49
    operand2                       shift and go to state 50
    boolean_literal                shift and go to state 71
    procedure_call                 shift and go to state 3
    empty_literal                  shift and go to state 68
    primitive_value                shift and go to state 52
    integer_literal                shift and go to state 77
    identifier                     shift and go to state 55
    builtin_call                   shift and go to state 1
    conditional_expression         shift and go to state 56
    value_array_slice              shift and go to state 57
    builtin_name                   shift and go to state 29
    dereferenced_reference         shift and go to state 32
    literal                        shift and go to state 61
    array_element                  shift and go to state 9
    operand0                       shift and go to state 62
    operand4                       shift and go to state 73
    array_slice                    shift and go to state 28
    operand3                       shift and go to state 65
    location                       shift and go to state 38
    character_string_literal       shift and go to state 66
    character_literal              shift and go to state 76
    call_action                    shift and go to state 80
    array_location                 shift and go to state 67
    value_array_element            shift and go to state 79
    monadic_operator               shift and go to state 81
    referenced_location            shift and go to state 82
    expression                     shift and go to state 261
    parenthesized_expression       shift and go to state 70

state 218

    (136) character_literal -> HAT LPAREN ICONST . RPAREN

    RPAREN          shift and go to state 262


state 219

    (89) operand0 -> operand0 operator1 operand1 .
    (91) operand1 -> operand1 . operator2 operand2
    (115) operator2 -> . arithmetic_additive_operator
    (116) operator2 -> . string_concatenation_operator
    (117) arithmetic_additive_operator -> . PLUS
    (118) arithmetic_additive_operator -> . MINUS
    (119) string_concatenation_operator -> . CONCAT

    IN              reduce using rule 89 (operand0 -> operand0 operator1 operand1 .)
    AND             reduce using rule 89 (operand0 -> operand0 operator1 operand1 .)
    OR              reduce using rule 89 (operand0 -> operand0 operator1 operand1 .)
    EQUAL           reduce using rule 89 (operand0 -> operand0 operator1 operand1 .)
    NOTEQ           reduce using rule 89 (operand0 -> operand0 operator1 operand1 .)
    GREATER         reduce using rule 89 (operand0 -> operand0 operator1 operand1 .)
    GTEQUAL         reduce using rule 89 (operand0 -> operand0 operator1 operand1 .)
    LESS            reduce using rule 89 (operand0 -> operand0 operator1 operand1 .)
    LTEQUAL         reduce using rule 89 (operand0 -> operand0 operator1 operand1 .)
    RBRACKET        reduce using rule 89 (operand0 -> operand0 operator1 operand1 .)
    COMMA           reduce using rule 89 (operand0 -> operand0 operator1 operand1 .)
    SEMI            reduce using rule 89 (operand0 -> operand0 operator1 operand1 .)
    COLON           reduce using rule 89 (operand0 -> operand0 operator1 operand1 .)
    RPAREN          reduce using rule 89 (operand0 -> operand0 operator1 operand1 .)
    DOWN            reduce using rule 89 (operand0 -> operand0 operator1 operand1 .)
    TO              reduce using rule 89 (operand0 -> operand0 operator1 operand1 .)
    THEN            reduce using rule 89 (operand0 -> operand0 operator1 operand1 .)
    WHILE           reduce using rule 89 (operand0 -> operand0 operator1 operand1 .)
    FI              reduce using rule 89 (operand0 -> operand0 operator1 operand1 .)
    ELSE            reduce using rule 89 (operand0 -> operand0 operator1 operand1 .)
    ELSIF           reduce using rule 89 (operand0 -> operand0 operator1 operand1 .)
    BY              reduce using rule 89 (operand0 -> operand0 operator1 operand1 .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 96
    CONCAT          shift and go to state 88

    operator2                      shift and go to state 149
    arithmetic_additive_operator   shift and go to state 147
    string_concatenation_operator  shift and go to state 148

state 220

    (158) else_clause -> ELSE . action_statement_list
    (161) action_statement_list -> . action_statement action_statement_nullable
    (139) action_statement -> . identifier COLON action SEMI
    (140) action_statement -> . action SEMI
    (23) identifier -> . ID
    (141) action -> . bracketed_action
    (142) action -> . assignment_action
    (143) action -> . call_action
    (144) action -> . exit_action
    (145) action -> . result_action
    (146) action -> . return_action
    (147) bracketed_action -> . if_action
    (148) bracketed_action -> . do_action
    (149) assignment_action -> . array_location assigning_operator expression
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (180) exit_action -> . EXIT identifier
    (184) result_action -> . RESULT expression
    (181) return_action -> . RETURN result
    (155) if_action -> . IF expression then_clause else_clause FI
    (156) if_action -> . IF expression then_clause FI
    (185) do_action -> . DO control_part SEMI action_statement_nullable OD
    (186) do_action -> . DO action_statement_nullable OD
    (78) array_location -> . location
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    ID              shift and go to state 58
    EXIT            shift and go to state 37
    RESULT          shift and go to state 43
    RETURN          shift and go to state 21
    IF              shift and go to state 6
    DO              shift and go to state 26
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    builtin_call                   shift and go to state 1
    result_action                  shift and go to state 23
    action                         shift and go to state 24
    procedure_call                 shift and go to state 3
    bracketed_action               shift and go to state 31
    identifier                     shift and go to state 7
    action_statement               shift and go to state 224
    array_element                  shift and go to state 9
    array_slice                    shift and go to state 28
    action_statement_list          shift and go to state 263
    builtin_name                   shift and go to state 29
    assignment_action              shift and go to state 13
    dereferenced_reference         shift and go to state 32
    do_action                      shift and go to state 33
    call_action                    shift and go to state 35
    return_action                  shift and go to state 15
    location                       shift and go to state 38
    if_action                      shift and go to state 39
    array_location                 shift and go to state 18
    exit_action                    shift and go to state 42

state 221

    (156) if_action -> IF expression then_clause FI .

    SEMI            reduce using rule 156 (if_action -> IF expression then_clause FI .)


state 222

    (159) else_clause -> ELSIF . expression then_clause else_clause
    (160) else_clause -> ELSIF . expression then_clause
    (79) expression -> . operand0
    (80) expression -> . conditional_expression
    (88) operand0 -> . operand1
    (89) operand0 -> . operand0 operator1 operand1
    (82) conditional_expression -> . IF expression then_expression else_expression FI
    (83) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (90) operand1 -> . operand2
    (91) operand1 -> . operand1 operator2 operand2
    (92) operand2 -> . operand3
    (93) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (94) operand3 -> . monadic_operator operand4
    (95) operand3 -> . operand4
    (102) monadic_operator -> . MINUS
    (103) monadic_operator -> . NOT
    (96) operand4 -> . array_location
    (97) operand4 -> . referenced_location
    (98) operand4 -> . primitive_value
    (78) array_location -> . location
    (104) referenced_location -> . ARROW array_location
    (121) primitive_value -> . literal
    (122) primitive_value -> . value_array_element
    (123) primitive_value -> . value_array_slice
    (124) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (125) literal -> . integer_literal
    (126) literal -> . boolean_literal
    (127) literal -> . character_literal
    (128) literal -> . empty_literal
    (129) literal -> . character_string_literal
    (130) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (131) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (81) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (132) integer_literal -> . ICONST
    (133) boolean_literal -> . TRUE
    (134) boolean_literal -> . FALSE
    (135) character_literal -> . CCONST
    (136) character_literal -> . HAT LPAREN ICONST RPAREN
    (137) empty_literal -> . NULL
    (138) character_string_literal -> . SCONST
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT

    IF              shift and go to state 53
    MINUS           shift and go to state 75
    NOT             shift and go to state 78
    ARROW           shift and go to state 54
    LPAREN          shift and go to state 51
    ID              shift and go to state 58
    ICONST          shift and go to state 72
    TRUE            shift and go to state 64
    FALSE           shift and go to state 63
    CCONST          shift and go to state 74
    HAT             shift and go to state 60
    NULL            shift and go to state 59
    SCONST          shift and go to state 69
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    operand1                       shift and go to state 49
    operand2                       shift and go to state 50
    boolean_literal                shift and go to state 71
    procedure_call                 shift and go to state 3
    empty_literal                  shift and go to state 68
    primitive_value                shift and go to state 52
    integer_literal                shift and go to state 77
    identifier                     shift and go to state 55
    builtin_call                   shift and go to state 1
    conditional_expression         shift and go to state 56
    value_array_slice              shift and go to state 57
    builtin_name                   shift and go to state 29
    dereferenced_reference         shift and go to state 32
    literal                        shift and go to state 61
    array_element                  shift and go to state 9
    referenced_location            shift and go to state 82
    operand0                       shift and go to state 62
    operand4                       shift and go to state 73
    array_slice                    shift and go to state 28
    operand3                       shift and go to state 65
    location                       shift and go to state 38
    character_string_literal       shift and go to state 66
    character_literal              shift and go to state 76
    call_action                    shift and go to state 80
    array_location                 shift and go to state 67
    value_array_element            shift and go to state 79
    monadic_operator               shift and go to state 81
    expression                     shift and go to state 264
    parenthesized_expression       shift and go to state 70

state 223

    (155) if_action -> IF expression then_clause else_clause . FI

    FI              shift and go to state 265


state 224

    (161) action_statement_list -> action_statement . action_statement_nullable
    (162) action_statement_nullable -> . action_statement action_statement_nullable
    (163) action_statement_nullable -> . empty
    (139) action_statement -> . identifier COLON action SEMI
    (140) action_statement -> . action SEMI
    (202) empty -> .
    (23) identifier -> . ID
    (141) action -> . bracketed_action
    (142) action -> . assignment_action
    (143) action -> . call_action
    (144) action -> . exit_action
    (145) action -> . result_action
    (146) action -> . return_action
    (147) bracketed_action -> . if_action
    (148) bracketed_action -> . do_action
    (149) assignment_action -> . array_location assigning_operator expression
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (180) exit_action -> . EXIT identifier
    (184) result_action -> . RESULT expression
    (181) return_action -> . RETURN result
    (155) if_action -> . IF expression then_clause else_clause FI
    (156) if_action -> . IF expression then_clause FI
    (185) do_action -> . DO control_part SEMI action_statement_nullable OD
    (186) do_action -> . DO action_statement_nullable OD
    (78) array_location -> . location
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    FI              reduce using rule 202 (empty -> .)
    ELSE            reduce using rule 202 (empty -> .)
    ELSIF           reduce using rule 202 (empty -> .)
    ID              shift and go to state 58
    EXIT            shift and go to state 37
    RESULT          shift and go to state 43
    RETURN          shift and go to state 21
    IF              shift and go to state 6
    DO              shift and go to state 26
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    builtin_call                   shift and go to state 1
    result_action                  shift and go to state 23
    action                         shift and go to state 24
    procedure_call                 shift and go to state 3
    action_statement_nullable      shift and go to state 266
    bracketed_action               shift and go to state 31
    identifier                     shift and go to state 7
    action_statement               shift and go to state 113
    array_element                  shift and go to state 9
    array_slice                    shift and go to state 28
    builtin_name                   shift and go to state 29
    assignment_action              shift and go to state 13
    dereferenced_reference         shift and go to state 32
    do_action                      shift and go to state 33
    call_action                    shift and go to state 35
    empty                          shift and go to state 115
    return_action                  shift and go to state 15
    location                       shift and go to state 38
    if_action                      shift and go to state 39
    array_location                 shift and go to state 18
    exit_action                    shift and go to state 42

state 225

    (157) then_clause -> THEN action_statement_list .

    ELSE            reduce using rule 157 (then_clause -> THEN action_statement_list .)
    ELSIF           reduce using rule 157 (then_clause -> THEN action_statement_list .)
    FI              reduce using rule 157 (then_clause -> THEN action_statement_list .)


state 226

    (139) action_statement -> identifier COLON action SEMI .

    DCL             reduce using rule 139 (action_statement -> identifier COLON action SEMI .)
    SYN             reduce using rule 139 (action_statement -> identifier COLON action SEMI .)
    TYPE            reduce using rule 139 (action_statement -> identifier COLON action SEMI .)
    ID              reduce using rule 139 (action_statement -> identifier COLON action SEMI .)
    EXIT            reduce using rule 139 (action_statement -> identifier COLON action SEMI .)
    RESULT          reduce using rule 139 (action_statement -> identifier COLON action SEMI .)
    RETURN          reduce using rule 139 (action_statement -> identifier COLON action SEMI .)
    IF              reduce using rule 139 (action_statement -> identifier COLON action SEMI .)
    DO              reduce using rule 139 (action_statement -> identifier COLON action SEMI .)
    ABS             reduce using rule 139 (action_statement -> identifier COLON action SEMI .)
    ASC             reduce using rule 139 (action_statement -> identifier COLON action SEMI .)
    NUM             reduce using rule 139 (action_statement -> identifier COLON action SEMI .)
    UPPER           reduce using rule 139 (action_statement -> identifier COLON action SEMI .)
    LOWER           reduce using rule 139 (action_statement -> identifier COLON action SEMI .)
    LENGTH          reduce using rule 139 (action_statement -> identifier COLON action SEMI .)
    READ            reduce using rule 139 (action_statement -> identifier COLON action SEMI .)
    PRINT           reduce using rule 139 (action_statement -> identifier COLON action SEMI .)
    $end            reduce using rule 139 (action_statement -> identifier COLON action SEMI .)
    OD              reduce using rule 139 (action_statement -> identifier COLON action SEMI .)
    FI              reduce using rule 139 (action_statement -> identifier COLON action SEMI .)
    ELSE            reduce using rule 139 (action_statement -> identifier COLON action SEMI .)
    ELSIF           reduce using rule 139 (action_statement -> identifier COLON action SEMI .)
    END             reduce using rule 139 (action_statement -> identifier COLON action SEMI .)


state 227

    (176) procedure_call -> ID LPAREN parameter_list RPAREN .

    ARROW           reduce using rule 176 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    LBRACKET        reduce using rule 176 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    TIMES           reduce using rule 176 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    DIVIDE          reduce using rule 176 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    MODULO          reduce using rule 176 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    PLUS            reduce using rule 176 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    MINUS           reduce using rule 176 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    CONCAT          reduce using rule 176 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    IN              reduce using rule 176 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    AND             reduce using rule 176 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    OR              reduce using rule 176 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    EQUAL           reduce using rule 176 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    NOTEQ           reduce using rule 176 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    GREATER         reduce using rule 176 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    GTEQUAL         reduce using rule 176 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    LESS            reduce using rule 176 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    LTEQUAL         reduce using rule 176 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    ELSE            reduce using rule 176 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    ELSIF           reduce using rule 176 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    SEMI            reduce using rule 176 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    THEN            reduce using rule 176 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 176 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 176 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    RBRACKET        reduce using rule 176 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    COLON           reduce using rule 176 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    DOWN            reduce using rule 176 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    BY              reduce using rule 176 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    TO              reduce using rule 176 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    FI              reduce using rule 176 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    WHILE           reduce using rule 176 (procedure_call -> ID LPAREN parameter_list RPAREN .)
    ASSIGN          reduce using rule 176 (procedure_call -> ID LPAREN parameter_list RPAREN .)


state 228

    (179) parameter_list -> expression COMMA . parameter_list
    (178) parameter_list -> . expression
    (179) parameter_list -> . expression COMMA parameter_list
    (79) expression -> . operand0
    (80) expression -> . conditional_expression
    (88) operand0 -> . operand1
    (89) operand0 -> . operand0 operator1 operand1
    (82) conditional_expression -> . IF expression then_expression else_expression FI
    (83) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (90) operand1 -> . operand2
    (91) operand1 -> . operand1 operator2 operand2
    (92) operand2 -> . operand3
    (93) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (94) operand3 -> . monadic_operator operand4
    (95) operand3 -> . operand4
    (102) monadic_operator -> . MINUS
    (103) monadic_operator -> . NOT
    (96) operand4 -> . array_location
    (97) operand4 -> . referenced_location
    (98) operand4 -> . primitive_value
    (78) array_location -> . location
    (104) referenced_location -> . ARROW array_location
    (121) primitive_value -> . literal
    (122) primitive_value -> . value_array_element
    (123) primitive_value -> . value_array_slice
    (124) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (125) literal -> . integer_literal
    (126) literal -> . boolean_literal
    (127) literal -> . character_literal
    (128) literal -> . empty_literal
    (129) literal -> . character_string_literal
    (130) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (131) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (81) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (132) integer_literal -> . ICONST
    (133) boolean_literal -> . TRUE
    (134) boolean_literal -> . FALSE
    (135) character_literal -> . CCONST
    (136) character_literal -> . HAT LPAREN ICONST RPAREN
    (137) empty_literal -> . NULL
    (138) character_string_literal -> . SCONST
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT

    IF              shift and go to state 53
    MINUS           shift and go to state 75
    NOT             shift and go to state 78
    ARROW           shift and go to state 54
    LPAREN          shift and go to state 51
    ID              shift and go to state 58
    ICONST          shift and go to state 72
    TRUE            shift and go to state 64
    FALSE           shift and go to state 63
    CCONST          shift and go to state 74
    HAT             shift and go to state 60
    NULL            shift and go to state 59
    SCONST          shift and go to state 69
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    operand1                       shift and go to state 49
    operand2                       shift and go to state 50
    parameter_list                 shift and go to state 267
    boolean_literal                shift and go to state 71
    procedure_call                 shift and go to state 3
    empty_literal                  shift and go to state 68
    primitive_value                shift and go to state 52
    integer_literal                shift and go to state 77
    identifier                     shift and go to state 55
    builtin_call                   shift and go to state 1
    conditional_expression         shift and go to state 56
    value_array_slice              shift and go to state 57
    builtin_name                   shift and go to state 29
    dereferenced_reference         shift and go to state 32
    literal                        shift and go to state 61
    array_element                  shift and go to state 9
    operand0                       shift and go to state 62
    operand4                       shift and go to state 73
    array_slice                    shift and go to state 28
    operand3                       shift and go to state 65
    location                       shift and go to state 38
    character_string_literal       shift and go to state 66
    character_literal              shift and go to state 76
    call_action                    shift and go to state 80
    array_location                 shift and go to state 67
    value_array_element            shift and go to state 79
    monadic_operator               shift and go to state 81
    referenced_location            shift and go to state 82
    expression                     shift and go to state 175
    parenthesized_expression       shift and go to state 70

state 229

    (29) procedure_definition -> PROC LPAREN . formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI
    (30) procedure_definition -> PROC LPAREN . formal_parameter_list RPAREN SEMI statement_nullable END SEMI
    (31) procedure_definition -> PROC LPAREN . RPAREN result_spec SEMI statement_nullable END SEMI
    (32) procedure_definition -> PROC LPAREN . RPAREN SEMI statement_nullable END SEMI
    (33) formal_parameter_list -> . formal_parameter
    (34) formal_parameter_list -> . formal_parameter COMMA formal_parameter_list
    (35) formal_parameter -> . identifier_list mode LOC
    (36) formal_parameter -> . identifier_list mode
    (21) identifier_list -> . identifier
    (22) identifier_list -> . identifier COMMA identifier_list
    (23) identifier -> . ID

    RPAREN          shift and go to state 268
    ID              shift and go to state 44

    formal_parameter_list          shift and go to state 270
    formal_parameter               shift and go to state 269
    identifier                     shift and go to state 45
    identifier_list                shift and go to state 271

state 230

    (74) array_element -> array_location LBRACKET expression_list RBRACKET .

    ARROW           reduce using rule 74 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    LBRACKET        reduce using rule 74 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    TIMES           reduce using rule 74 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    DIVIDE          reduce using rule 74 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    MODULO          reduce using rule 74 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    PLUS            reduce using rule 74 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    MINUS           reduce using rule 74 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    CONCAT          reduce using rule 74 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    IN              reduce using rule 74 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    AND             reduce using rule 74 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    OR              reduce using rule 74 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    EQUAL           reduce using rule 74 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    NOTEQ           reduce using rule 74 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    GREATER         reduce using rule 74 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    GTEQUAL         reduce using rule 74 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    LESS            reduce using rule 74 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    LTEQUAL         reduce using rule 74 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    SEMI            reduce using rule 74 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    ASSIGN          reduce using rule 74 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    COLON           reduce using rule 74 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    FI              reduce using rule 74 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    COMMA           reduce using rule 74 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    RBRACKET        reduce using rule 74 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    DOWN            reduce using rule 74 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    TO              reduce using rule 74 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    THEN            reduce using rule 74 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    RPAREN          reduce using rule 74 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    ELSE            reduce using rule 74 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    ELSIF           reduce using rule 74 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    BY              reduce using rule 74 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    WHILE           reduce using rule 74 (array_element -> array_location LBRACKET expression_list RBRACKET .)


state 231

    (77) array_slice -> array_location LBRACKET lower_bound COLON . upper_bound RBRACKET
    (56) upper_bound -> . expression
    (79) expression -> . operand0
    (80) expression -> . conditional_expression
    (88) operand0 -> . operand1
    (89) operand0 -> . operand0 operator1 operand1
    (82) conditional_expression -> . IF expression then_expression else_expression FI
    (83) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (90) operand1 -> . operand2
    (91) operand1 -> . operand1 operator2 operand2
    (92) operand2 -> . operand3
    (93) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (94) operand3 -> . monadic_operator operand4
    (95) operand3 -> . operand4
    (102) monadic_operator -> . MINUS
    (103) monadic_operator -> . NOT
    (96) operand4 -> . array_location
    (97) operand4 -> . referenced_location
    (98) operand4 -> . primitive_value
    (78) array_location -> . location
    (104) referenced_location -> . ARROW array_location
    (121) primitive_value -> . literal
    (122) primitive_value -> . value_array_element
    (123) primitive_value -> . value_array_slice
    (124) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (125) literal -> . integer_literal
    (126) literal -> . boolean_literal
    (127) literal -> . character_literal
    (128) literal -> . empty_literal
    (129) literal -> . character_string_literal
    (130) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (131) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (81) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (132) integer_literal -> . ICONST
    (133) boolean_literal -> . TRUE
    (134) boolean_literal -> . FALSE
    (135) character_literal -> . CCONST
    (136) character_literal -> . HAT LPAREN ICONST RPAREN
    (137) empty_literal -> . NULL
    (138) character_string_literal -> . SCONST
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT

    IF              shift and go to state 53
    MINUS           shift and go to state 75
    NOT             shift and go to state 78
    ARROW           shift and go to state 54
    LPAREN          shift and go to state 51
    ID              shift and go to state 58
    ICONST          shift and go to state 72
    TRUE            shift and go to state 64
    FALSE           shift and go to state 63
    CCONST          shift and go to state 74
    HAT             shift and go to state 60
    NULL            shift and go to state 59
    SCONST          shift and go to state 69
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    operand1                       shift and go to state 49
    operand2                       shift and go to state 50
    operand0                       shift and go to state 62
    boolean_literal                shift and go to state 71
    procedure_call                 shift and go to state 3
    array_element                  shift and go to state 9
    empty_literal                  shift and go to state 68
    primitive_value                shift and go to state 52
    upper_bound                    shift and go to state 272
    integer_literal                shift and go to state 77
    identifier                     shift and go to state 55
    builtin_call                   shift and go to state 1
    conditional_expression         shift and go to state 56
    value_array_slice              shift and go to state 57
    builtin_name                   shift and go to state 29
    dereferenced_reference         shift and go to state 32
    literal                        shift and go to state 61
    monadic_operator               shift and go to state 81
    operand4                       shift and go to state 73
    array_slice                    shift and go to state 28
    operand3                       shift and go to state 65
    location                       shift and go to state 38
    character_string_literal       shift and go to state 66
    character_literal              shift and go to state 76
    call_action                    shift and go to state 80
    array_location                 shift and go to state 67
    value_array_element            shift and go to state 79
    referenced_location            shift and go to state 82
    expression                     shift and go to state 273
    parenthesized_expression       shift and go to state 70

state 232

    (76) expression_list -> expression COMMA . expression_list
    (75) expression_list -> . expression
    (76) expression_list -> . expression COMMA expression_list
    (79) expression -> . operand0
    (80) expression -> . conditional_expression
    (88) operand0 -> . operand1
    (89) operand0 -> . operand0 operator1 operand1
    (82) conditional_expression -> . IF expression then_expression else_expression FI
    (83) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (90) operand1 -> . operand2
    (91) operand1 -> . operand1 operator2 operand2
    (92) operand2 -> . operand3
    (93) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (94) operand3 -> . monadic_operator operand4
    (95) operand3 -> . operand4
    (102) monadic_operator -> . MINUS
    (103) monadic_operator -> . NOT
    (96) operand4 -> . array_location
    (97) operand4 -> . referenced_location
    (98) operand4 -> . primitive_value
    (78) array_location -> . location
    (104) referenced_location -> . ARROW array_location
    (121) primitive_value -> . literal
    (122) primitive_value -> . value_array_element
    (123) primitive_value -> . value_array_slice
    (124) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (125) literal -> . integer_literal
    (126) literal -> . boolean_literal
    (127) literal -> . character_literal
    (128) literal -> . empty_literal
    (129) literal -> . character_string_literal
    (130) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (131) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (81) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (132) integer_literal -> . ICONST
    (133) boolean_literal -> . TRUE
    (134) boolean_literal -> . FALSE
    (135) character_literal -> . CCONST
    (136) character_literal -> . HAT LPAREN ICONST RPAREN
    (137) empty_literal -> . NULL
    (138) character_string_literal -> . SCONST
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT

    IF              shift and go to state 53
    MINUS           shift and go to state 75
    NOT             shift and go to state 78
    ARROW           shift and go to state 54
    LPAREN          shift and go to state 51
    ID              shift and go to state 58
    ICONST          shift and go to state 72
    TRUE            shift and go to state 64
    FALSE           shift and go to state 63
    CCONST          shift and go to state 74
    HAT             shift and go to state 60
    NULL            shift and go to state 59
    SCONST          shift and go to state 69
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    operand1                       shift and go to state 49
    operand2                       shift and go to state 50
    expression_list                shift and go to state 274
    boolean_literal                shift and go to state 71
    procedure_call                 shift and go to state 3
    empty_literal                  shift and go to state 68
    primitive_value                shift and go to state 52
    integer_literal                shift and go to state 77
    identifier                     shift and go to state 55
    builtin_call                   shift and go to state 1
    conditional_expression         shift and go to state 56
    value_array_slice              shift and go to state 57
    builtin_name                   shift and go to state 29
    dereferenced_reference         shift and go to state 32
    literal                        shift and go to state 61
    array_element                  shift and go to state 9
    operand0                       shift and go to state 62
    operand4                       shift and go to state 73
    array_slice                    shift and go to state 28
    operand3                       shift and go to state 65
    location                       shift and go to state 38
    character_string_literal       shift and go to state 66
    character_literal              shift and go to state 76
    call_action                    shift and go to state 80
    array_location                 shift and go to state 67
    value_array_element            shift and go to state 79
    monadic_operator               shift and go to state 81
    referenced_location            shift and go to state 82
    expression                     shift and go to state 275
    parenthesized_expression       shift and go to state 70

state 233

    (26) newmode_list -> mode_definition COMMA newmode_list .

    SEMI            reduce using rule 26 (newmode_list -> mode_definition COMMA newmode_list .)


state 234

    (27) mode_definition -> identifier_list ASSIGN mode .

    COMMA           reduce using rule 27 (mode_definition -> identifier_list ASSIGN mode .)
    SEMI            reduce using rule 27 (mode_definition -> identifier_list ASSIGN mode .)


state 235

    (185) do_action -> DO control_part SEMI action_statement_nullable . OD

    OD              shift and go to state 276


state 236

    (193) step_enumeration -> identifier ASSIGN . expression step_value DOWN end_value
    (194) step_enumeration -> identifier ASSIGN . expression step_value end_value
    (195) step_enumeration -> identifier ASSIGN . expression DOWN end_value
    (196) step_enumeration -> identifier ASSIGN . expression end_value
    (79) expression -> . operand0
    (80) expression -> . conditional_expression
    (88) operand0 -> . operand1
    (89) operand0 -> . operand0 operator1 operand1
    (82) conditional_expression -> . IF expression then_expression else_expression FI
    (83) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (90) operand1 -> . operand2
    (91) operand1 -> . operand1 operator2 operand2
    (92) operand2 -> . operand3
    (93) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (94) operand3 -> . monadic_operator operand4
    (95) operand3 -> . operand4
    (102) monadic_operator -> . MINUS
    (103) monadic_operator -> . NOT
    (96) operand4 -> . array_location
    (97) operand4 -> . referenced_location
    (98) operand4 -> . primitive_value
    (78) array_location -> . location
    (104) referenced_location -> . ARROW array_location
    (121) primitive_value -> . literal
    (122) primitive_value -> . value_array_element
    (123) primitive_value -> . value_array_slice
    (124) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (125) literal -> . integer_literal
    (126) literal -> . boolean_literal
    (127) literal -> . character_literal
    (128) literal -> . empty_literal
    (129) literal -> . character_string_literal
    (130) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (131) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (81) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (132) integer_literal -> . ICONST
    (133) boolean_literal -> . TRUE
    (134) boolean_literal -> . FALSE
    (135) character_literal -> . CCONST
    (136) character_literal -> . HAT LPAREN ICONST RPAREN
    (137) empty_literal -> . NULL
    (138) character_string_literal -> . SCONST
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT

    IF              shift and go to state 53
    MINUS           shift and go to state 75
    NOT             shift and go to state 78
    ARROW           shift and go to state 54
    LPAREN          shift and go to state 51
    ID              shift and go to state 58
    ICONST          shift and go to state 72
    TRUE            shift and go to state 64
    FALSE           shift and go to state 63
    CCONST          shift and go to state 74
    HAT             shift and go to state 60
    NULL            shift and go to state 59
    SCONST          shift and go to state 69
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    operand1                       shift and go to state 49
    operand2                       shift and go to state 50
    operand0                       shift and go to state 62
    character_literal              shift and go to state 76
    boolean_literal                shift and go to state 71
    array_slice                    shift and go to state 28
    procedure_call                 shift and go to state 3
    empty_literal                  shift and go to state 68
    primitive_value                shift and go to state 52
    integer_literal                shift and go to state 77
    identifier                     shift and go to state 55
    builtin_call                   shift and go to state 1
    conditional_expression         shift and go to state 56
    value_array_slice              shift and go to state 57
    builtin_name                   shift and go to state 29
    dereferenced_reference         shift and go to state 32
    literal                        shift and go to state 61
    array_element                  shift and go to state 9
    operand4                       shift and go to state 73
    operand3                       shift and go to state 65
    location                       shift and go to state 38
    character_string_literal       shift and go to state 66
    call_action                    shift and go to state 80
    array_location                 shift and go to state 67
    value_array_element            shift and go to state 79
    monadic_operator               shift and go to state 81
    referenced_location            shift and go to state 82
    expression                     shift and go to state 277
    parenthesized_expression       shift and go to state 70

state 237

    (199) range_enumeration -> identifier DOWN . IN discrete_mode

    IN              shift and go to state 278


state 238

    (200) range_enumeration -> identifier IN . discrete_mode
    (44) discrete_mode -> . integer_mode
    (45) discrete_mode -> . boolean_mode
    (46) discrete_mode -> . character_mode
    (47) discrete_mode -> . discrete_range_mode
    (49) integer_mode -> . INT
    (50) boolean_mode -> . BOOL
    (51) character_mode -> . CHAR
    (52) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (53) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (48) discrete_mode_name -> . identifier
    (23) identifier -> . ID

    INT             shift and go to state 136
    BOOL            shift and go to state 133
    CHAR            shift and go to state 144
    ID              shift and go to state 44

    discrete_mode_name             shift and go to state 132
    discrete_range_mode            shift and go to state 137
    character_mode                 shift and go to state 128
    discrete_mode                  shift and go to state 279
    integer_mode                   shift and go to state 138
    identifier                     shift and go to state 280
    boolean_mode                   shift and go to state 139

state 239

    (166) builtin_call -> builtin_name LPAREN parameter_list RPAREN .

    SEMI            reduce using rule 166 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    ARROW           reduce using rule 166 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    LBRACKET        reduce using rule 166 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    ASSIGN          reduce using rule 166 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    PLUS            reduce using rule 166 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    MINUS           reduce using rule 166 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    TIMES           reduce using rule 166 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    DIVIDE          reduce using rule 166 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    MODULO          reduce using rule 166 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    CONCAT          reduce using rule 166 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    IN              reduce using rule 166 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    AND             reduce using rule 166 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    OR              reduce using rule 166 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    EQUAL           reduce using rule 166 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    NOTEQ           reduce using rule 166 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    GREATER         reduce using rule 166 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    GTEQUAL         reduce using rule 166 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    LESS            reduce using rule 166 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    LTEQUAL         reduce using rule 166 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 166 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    ELSE            reduce using rule 166 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    ELSIF           reduce using rule 166 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    THEN            reduce using rule 166 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    RBRACKET        reduce using rule 166 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 166 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    COLON           reduce using rule 166 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    DOWN            reduce using rule 166 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    TO              reduce using rule 166 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    BY              reduce using rule 166 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    FI              reduce using rule 166 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    WHILE           reduce using rule 166 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)


state 240

    (12) synonym_list -> synonym_definition COMMA synonym_list .

    SEMI            reduce using rule 12 (synonym_list -> synonym_definition COMMA synonym_list .)


state 241

    (14) synonym_definition -> identifier_list ASSIGN expression .

    COMMA           reduce using rule 14 (synonym_definition -> identifier_list ASSIGN expression .)
    SEMI            reduce using rule 14 (synonym_definition -> identifier_list ASSIGN expression .)


state 242

    (13) synonym_definition -> identifier_list mode ASSIGN . expression
    (79) expression -> . operand0
    (80) expression -> . conditional_expression
    (88) operand0 -> . operand1
    (89) operand0 -> . operand0 operator1 operand1
    (82) conditional_expression -> . IF expression then_expression else_expression FI
    (83) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (90) operand1 -> . operand2
    (91) operand1 -> . operand1 operator2 operand2
    (92) operand2 -> . operand3
    (93) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (94) operand3 -> . monadic_operator operand4
    (95) operand3 -> . operand4
    (102) monadic_operator -> . MINUS
    (103) monadic_operator -> . NOT
    (96) operand4 -> . array_location
    (97) operand4 -> . referenced_location
    (98) operand4 -> . primitive_value
    (78) array_location -> . location
    (104) referenced_location -> . ARROW array_location
    (121) primitive_value -> . literal
    (122) primitive_value -> . value_array_element
    (123) primitive_value -> . value_array_slice
    (124) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (125) literal -> . integer_literal
    (126) literal -> . boolean_literal
    (127) literal -> . character_literal
    (128) literal -> . empty_literal
    (129) literal -> . character_string_literal
    (130) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (131) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (81) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (132) integer_literal -> . ICONST
    (133) boolean_literal -> . TRUE
    (134) boolean_literal -> . FALSE
    (135) character_literal -> . CCONST
    (136) character_literal -> . HAT LPAREN ICONST RPAREN
    (137) empty_literal -> . NULL
    (138) character_string_literal -> . SCONST
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT

    IF              shift and go to state 53
    MINUS           shift and go to state 75
    NOT             shift and go to state 78
    ARROW           shift and go to state 54
    LPAREN          shift and go to state 51
    ID              shift and go to state 58
    ICONST          shift and go to state 72
    TRUE            shift and go to state 64
    FALSE           shift and go to state 63
    CCONST          shift and go to state 74
    HAT             shift and go to state 60
    NULL            shift and go to state 59
    SCONST          shift and go to state 69
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    operand1                       shift and go to state 49
    operand2                       shift and go to state 50
    operand0                       shift and go to state 62
    boolean_literal                shift and go to state 71
    procedure_call                 shift and go to state 3
    character_string_literal       shift and go to state 66
    empty_literal                  shift and go to state 68
    primitive_value                shift and go to state 52
    integer_literal                shift and go to state 77
    identifier                     shift and go to state 55
    builtin_call                   shift and go to state 1
    conditional_expression         shift and go to state 56
    value_array_slice              shift and go to state 57
    builtin_name                   shift and go to state 29
    dereferenced_reference         shift and go to state 32
    literal                        shift and go to state 61
    array_element                  shift and go to state 9
    operand4                       shift and go to state 73
    array_slice                    shift and go to state 28
    operand3                       shift and go to state 65
    location                       shift and go to state 38
    character_literal              shift and go to state 76
    call_action                    shift and go to state 80
    array_location                 shift and go to state 67
    value_array_element            shift and go to state 79
    monadic_operator               shift and go to state 81
    referenced_location            shift and go to state 82
    expression                     shift and go to state 281
    parenthesized_expression       shift and go to state 70

state 243

    (61) string_length -> integer_literal .

    RBRACKET        reduce using rule 61 (string_length -> integer_literal .)


state 244

    (60) string_mode -> CHARS LBRACKET string_length . RBRACKET

    RBRACKET        shift and go to state 282


state 245

    (48) discrete_mode_name -> identifier .
    (68) location -> identifier .

    LPAREN          reduce using rule 48 (discrete_mode_name -> identifier .)
    ARROW           reduce using rule 68 (location -> identifier .)
    LBRACKET        reduce using rule 68 (location -> identifier .)
    TIMES           reduce using rule 68 (location -> identifier .)
    DIVIDE          reduce using rule 68 (location -> identifier .)
    MODULO          reduce using rule 68 (location -> identifier .)
    PLUS            reduce using rule 68 (location -> identifier .)
    MINUS           reduce using rule 68 (location -> identifier .)
    CONCAT          reduce using rule 68 (location -> identifier .)
    IN              reduce using rule 68 (location -> identifier .)
    AND             reduce using rule 68 (location -> identifier .)
    OR              reduce using rule 68 (location -> identifier .)
    EQUAL           reduce using rule 68 (location -> identifier .)
    NOTEQ           reduce using rule 68 (location -> identifier .)
    GREATER         reduce using rule 68 (location -> identifier .)
    GTEQUAL         reduce using rule 68 (location -> identifier .)
    LESS            reduce using rule 68 (location -> identifier .)
    LTEQUAL         reduce using rule 68 (location -> identifier .)
    COLON           reduce using rule 68 (location -> identifier .)


state 246

    (62) array_mode -> ARRAY LBRACKET index_mode_list . RBRACKET element_mode

    RBRACKET        shift and go to state 283


state 247

    (54) literal_range -> lower_bound . COLON upper_bound

    COLON           shift and go to state 284


state 248

    (65) index_mode -> discrete_mode .
    (53) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    COMMA           reduce using rule 65 (index_mode -> discrete_mode .)
    RBRACKET        reduce using rule 65 (index_mode -> discrete_mode .)
    LPAREN          shift and go to state 207


state 249

    (66) index_mode -> literal_range .

    COMMA           reduce using rule 66 (index_mode -> literal_range .)
    RBRACKET        reduce using rule 66 (index_mode -> literal_range .)


state 250

    (63) index_mode_list -> index_mode .
    (64) index_mode_list -> index_mode . COMMA index_mode_list

    RBRACKET        reduce using rule 63 (index_mode_list -> index_mode .)
    COMMA           shift and go to state 285


state 251

    (55) lower_bound -> expression .

    COLON           reduce using rule 55 (lower_bound -> expression .)


state 252

    (52) discrete_range_mode -> discrete_mode_name LPAREN literal_range . RPAREN

    RPAREN          shift and go to state 286


state 253

    (53) discrete_range_mode -> discrete_mode LPAREN literal_range . RPAREN

    RPAREN          shift and go to state 287


state 254

    (20) initialization -> ASSIGN expression .

    COMMA           reduce using rule 20 (initialization -> ASSIGN expression .)
    SEMI            reduce using rule 20 (initialization -> ASSIGN expression .)


state 255

    (130) value_array_element -> primitive_value LBRACKET expression_list RBRACKET .

    LBRACKET        reduce using rule 130 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    TIMES           reduce using rule 130 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    DIVIDE          reduce using rule 130 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    MODULO          reduce using rule 130 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    PLUS            reduce using rule 130 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    MINUS           reduce using rule 130 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    CONCAT          reduce using rule 130 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    IN              reduce using rule 130 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    AND             reduce using rule 130 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    OR              reduce using rule 130 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    EQUAL           reduce using rule 130 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    NOTEQ           reduce using rule 130 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    GREATER         reduce using rule 130 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    GTEQUAL         reduce using rule 130 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    LESS            reduce using rule 130 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    LTEQUAL         reduce using rule 130 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    DOWN            reduce using rule 130 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    TO              reduce using rule 130 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    THEN            reduce using rule 130 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    SEMI            reduce using rule 130 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    FI              reduce using rule 130 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    COLON           reduce using rule 130 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    RPAREN          reduce using rule 130 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    COMMA           reduce using rule 130 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    RBRACKET        reduce using rule 130 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    ELSE            reduce using rule 130 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    ELSIF           reduce using rule 130 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    BY              reduce using rule 130 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)
    WHILE           reduce using rule 130 (value_array_element -> primitive_value LBRACKET expression_list RBRACKET .)


state 256

    (131) value_array_slice -> primitive_value LBRACKET expression COLON . expression RBRACKET
    (79) expression -> . operand0
    (80) expression -> . conditional_expression
    (88) operand0 -> . operand1
    (89) operand0 -> . operand0 operator1 operand1
    (82) conditional_expression -> . IF expression then_expression else_expression FI
    (83) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (90) operand1 -> . operand2
    (91) operand1 -> . operand1 operator2 operand2
    (92) operand2 -> . operand3
    (93) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (94) operand3 -> . monadic_operator operand4
    (95) operand3 -> . operand4
    (102) monadic_operator -> . MINUS
    (103) monadic_operator -> . NOT
    (96) operand4 -> . array_location
    (97) operand4 -> . referenced_location
    (98) operand4 -> . primitive_value
    (78) array_location -> . location
    (104) referenced_location -> . ARROW array_location
    (121) primitive_value -> . literal
    (122) primitive_value -> . value_array_element
    (123) primitive_value -> . value_array_slice
    (124) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (125) literal -> . integer_literal
    (126) literal -> . boolean_literal
    (127) literal -> . character_literal
    (128) literal -> . empty_literal
    (129) literal -> . character_string_literal
    (130) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (131) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (81) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (132) integer_literal -> . ICONST
    (133) boolean_literal -> . TRUE
    (134) boolean_literal -> . FALSE
    (135) character_literal -> . CCONST
    (136) character_literal -> . HAT LPAREN ICONST RPAREN
    (137) empty_literal -> . NULL
    (138) character_string_literal -> . SCONST
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT

    IF              shift and go to state 53
    MINUS           shift and go to state 75
    NOT             shift and go to state 78
    ARROW           shift and go to state 54
    LPAREN          shift and go to state 51
    ID              shift and go to state 58
    ICONST          shift and go to state 72
    TRUE            shift and go to state 64
    FALSE           shift and go to state 63
    CCONST          shift and go to state 74
    HAT             shift and go to state 60
    NULL            shift and go to state 59
    SCONST          shift and go to state 69
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    operand1                       shift and go to state 49
    operand2                       shift and go to state 50
    boolean_literal                shift and go to state 71
    procedure_call                 shift and go to state 3
    empty_literal                  shift and go to state 68
    operand4                       shift and go to state 73
    integer_literal                shift and go to state 77
    identifier                     shift and go to state 55
    builtin_call                   shift and go to state 1
    conditional_expression         shift and go to state 56
    value_array_slice              shift and go to state 57
    builtin_name                   shift and go to state 29
    dereferenced_reference         shift and go to state 32
    literal                        shift and go to state 61
    array_element                  shift and go to state 9
    operand0                       shift and go to state 62
    primitive_value                shift and go to state 52
    array_slice                    shift and go to state 28
    operand3                       shift and go to state 65
    location                       shift and go to state 38
    character_string_literal       shift and go to state 66
    character_literal              shift and go to state 76
    call_action                    shift and go to state 80
    array_location                 shift and go to state 67
    value_array_element            shift and go to state 79
    monadic_operator               shift and go to state 81
    referenced_location            shift and go to state 82
    expression                     shift and go to state 288
    parenthesized_expression       shift and go to state 70

state 257

    (82) conditional_expression -> IF expression then_expression else_expression . FI

    FI              shift and go to state 289


state 258

    (85) else_expression -> ELSE . expression
    (79) expression -> . operand0
    (80) expression -> . conditional_expression
    (88) operand0 -> . operand1
    (89) operand0 -> . operand0 operator1 operand1
    (82) conditional_expression -> . IF expression then_expression else_expression FI
    (83) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (90) operand1 -> . operand2
    (91) operand1 -> . operand1 operator2 operand2
    (92) operand2 -> . operand3
    (93) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (94) operand3 -> . monadic_operator operand4
    (95) operand3 -> . operand4
    (102) monadic_operator -> . MINUS
    (103) monadic_operator -> . NOT
    (96) operand4 -> . array_location
    (97) operand4 -> . referenced_location
    (98) operand4 -> . primitive_value
    (78) array_location -> . location
    (104) referenced_location -> . ARROW array_location
    (121) primitive_value -> . literal
    (122) primitive_value -> . value_array_element
    (123) primitive_value -> . value_array_slice
    (124) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (125) literal -> . integer_literal
    (126) literal -> . boolean_literal
    (127) literal -> . character_literal
    (128) literal -> . empty_literal
    (129) literal -> . character_string_literal
    (130) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (131) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (81) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (132) integer_literal -> . ICONST
    (133) boolean_literal -> . TRUE
    (134) boolean_literal -> . FALSE
    (135) character_literal -> . CCONST
    (136) character_literal -> . HAT LPAREN ICONST RPAREN
    (137) empty_literal -> . NULL
    (138) character_string_literal -> . SCONST
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT

    IF              shift and go to state 53
    MINUS           shift and go to state 75
    NOT             shift and go to state 78
    ARROW           shift and go to state 54
    LPAREN          shift and go to state 51
    ID              shift and go to state 58
    ICONST          shift and go to state 72
    TRUE            shift and go to state 64
    FALSE           shift and go to state 63
    CCONST          shift and go to state 74
    HAT             shift and go to state 60
    NULL            shift and go to state 59
    SCONST          shift and go to state 69
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    operand1                       shift and go to state 49
    operand2                       shift and go to state 50
    boolean_literal                shift and go to state 71
    procedure_call                 shift and go to state 3
    empty_literal                  shift and go to state 68
    primitive_value                shift and go to state 52
    integer_literal                shift and go to state 77
    identifier                     shift and go to state 55
    builtin_call                   shift and go to state 1
    conditional_expression         shift and go to state 56
    value_array_slice              shift and go to state 57
    builtin_name                   shift and go to state 29
    dereferenced_reference         shift and go to state 32
    literal                        shift and go to state 61
    array_element                  shift and go to state 9
    operand0                       shift and go to state 62
    operand4                       shift and go to state 73
    array_slice                    shift and go to state 28
    operand3                       shift and go to state 65
    location                       shift and go to state 38
    character_string_literal       shift and go to state 66
    character_literal              shift and go to state 76
    call_action                    shift and go to state 80
    array_location                 shift and go to state 67
    value_array_element            shift and go to state 79
    monadic_operator               shift and go to state 81
    referenced_location            shift and go to state 82
    expression                     shift and go to state 290
    parenthesized_expression       shift and go to state 70

state 259

    (83) conditional_expression -> IF expression then_expression elsif_expression . else_expression FI
    (87) elsif_expression -> elsif_expression . ELSIF expression then_expression
    (85) else_expression -> . ELSE expression

    ELSIF           shift and go to state 292
    ELSE            shift and go to state 258

    else_expression                shift and go to state 291

state 260

    (86) elsif_expression -> ELSIF . expression then_expression
    (79) expression -> . operand0
    (80) expression -> . conditional_expression
    (88) operand0 -> . operand1
    (89) operand0 -> . operand0 operator1 operand1
    (82) conditional_expression -> . IF expression then_expression else_expression FI
    (83) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (90) operand1 -> . operand2
    (91) operand1 -> . operand1 operator2 operand2
    (92) operand2 -> . operand3
    (93) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (94) operand3 -> . monadic_operator operand4
    (95) operand3 -> . operand4
    (102) monadic_operator -> . MINUS
    (103) monadic_operator -> . NOT
    (96) operand4 -> . array_location
    (97) operand4 -> . referenced_location
    (98) operand4 -> . primitive_value
    (78) array_location -> . location
    (104) referenced_location -> . ARROW array_location
    (121) primitive_value -> . literal
    (122) primitive_value -> . value_array_element
    (123) primitive_value -> . value_array_slice
    (124) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (125) literal -> . integer_literal
    (126) literal -> . boolean_literal
    (127) literal -> . character_literal
    (128) literal -> . empty_literal
    (129) literal -> . character_string_literal
    (130) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (131) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (81) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (132) integer_literal -> . ICONST
    (133) boolean_literal -> . TRUE
    (134) boolean_literal -> . FALSE
    (135) character_literal -> . CCONST
    (136) character_literal -> . HAT LPAREN ICONST RPAREN
    (137) empty_literal -> . NULL
    (138) character_string_literal -> . SCONST
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT

    IF              shift and go to state 53
    MINUS           shift and go to state 75
    NOT             shift and go to state 78
    ARROW           shift and go to state 54
    LPAREN          shift and go to state 51
    ID              shift and go to state 58
    ICONST          shift and go to state 72
    TRUE            shift and go to state 64
    FALSE           shift and go to state 63
    CCONST          shift and go to state 74
    HAT             shift and go to state 60
    NULL            shift and go to state 59
    SCONST          shift and go to state 69
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    operand1                       shift and go to state 49
    operand2                       shift and go to state 50
    boolean_literal                shift and go to state 71
    procedure_call                 shift and go to state 3
    empty_literal                  shift and go to state 68
    primitive_value                shift and go to state 52
    integer_literal                shift and go to state 77
    identifier                     shift and go to state 55
    builtin_call                   shift and go to state 1
    conditional_expression         shift and go to state 56
    value_array_slice              shift and go to state 57
    builtin_name                   shift and go to state 29
    dereferenced_reference         shift and go to state 32
    literal                        shift and go to state 61
    array_element                  shift and go to state 9
    operand0                       shift and go to state 62
    operand4                       shift and go to state 73
    array_slice                    shift and go to state 28
    operand3                       shift and go to state 65
    location                       shift and go to state 38
    character_string_literal       shift and go to state 66
    character_literal              shift and go to state 76
    call_action                    shift and go to state 80
    array_location                 shift and go to state 67
    value_array_element            shift and go to state 79
    monadic_operator               shift and go to state 81
    referenced_location            shift and go to state 82
    expression                     shift and go to state 293
    parenthesized_expression       shift and go to state 70

state 261

    (84) then_expression -> THEN expression .

    ELSE            reduce using rule 84 (then_expression -> THEN expression .)
    ELSIF           reduce using rule 84 (then_expression -> THEN expression .)


state 262

    (136) character_literal -> HAT LPAREN ICONST RPAREN .

    LBRACKET        reduce using rule 136 (character_literal -> HAT LPAREN ICONST RPAREN .)
    TIMES           reduce using rule 136 (character_literal -> HAT LPAREN ICONST RPAREN .)
    DIVIDE          reduce using rule 136 (character_literal -> HAT LPAREN ICONST RPAREN .)
    MODULO          reduce using rule 136 (character_literal -> HAT LPAREN ICONST RPAREN .)
    PLUS            reduce using rule 136 (character_literal -> HAT LPAREN ICONST RPAREN .)
    MINUS           reduce using rule 136 (character_literal -> HAT LPAREN ICONST RPAREN .)
    CONCAT          reduce using rule 136 (character_literal -> HAT LPAREN ICONST RPAREN .)
    IN              reduce using rule 136 (character_literal -> HAT LPAREN ICONST RPAREN .)
    AND             reduce using rule 136 (character_literal -> HAT LPAREN ICONST RPAREN .)
    OR              reduce using rule 136 (character_literal -> HAT LPAREN ICONST RPAREN .)
    EQUAL           reduce using rule 136 (character_literal -> HAT LPAREN ICONST RPAREN .)
    NOTEQ           reduce using rule 136 (character_literal -> HAT LPAREN ICONST RPAREN .)
    GREATER         reduce using rule 136 (character_literal -> HAT LPAREN ICONST RPAREN .)
    GTEQUAL         reduce using rule 136 (character_literal -> HAT LPAREN ICONST RPAREN .)
    LESS            reduce using rule 136 (character_literal -> HAT LPAREN ICONST RPAREN .)
    LTEQUAL         reduce using rule 136 (character_literal -> HAT LPAREN ICONST RPAREN .)
    COMMA           reduce using rule 136 (character_literal -> HAT LPAREN ICONST RPAREN .)
    SEMI            reduce using rule 136 (character_literal -> HAT LPAREN ICONST RPAREN .)
    THEN            reduce using rule 136 (character_literal -> HAT LPAREN ICONST RPAREN .)
    COLON           reduce using rule 136 (character_literal -> HAT LPAREN ICONST RPAREN .)
    ELSE            reduce using rule 136 (character_literal -> HAT LPAREN ICONST RPAREN .)
    ELSIF           reduce using rule 136 (character_literal -> HAT LPAREN ICONST RPAREN .)
    RPAREN          reduce using rule 136 (character_literal -> HAT LPAREN ICONST RPAREN .)
    RBRACKET        reduce using rule 136 (character_literal -> HAT LPAREN ICONST RPAREN .)
    DOWN            reduce using rule 136 (character_literal -> HAT LPAREN ICONST RPAREN .)
    BY              reduce using rule 136 (character_literal -> HAT LPAREN ICONST RPAREN .)
    TO              reduce using rule 136 (character_literal -> HAT LPAREN ICONST RPAREN .)
    FI              reduce using rule 136 (character_literal -> HAT LPAREN ICONST RPAREN .)
    WHILE           reduce using rule 136 (character_literal -> HAT LPAREN ICONST RPAREN .)


state 263

    (158) else_clause -> ELSE action_statement_list .

    FI              reduce using rule 158 (else_clause -> ELSE action_statement_list .)


state 264

    (159) else_clause -> ELSIF expression . then_clause else_clause
    (160) else_clause -> ELSIF expression . then_clause
    (157) then_clause -> . THEN action_statement_list

    THEN            shift and go to state 170

    then_clause                    shift and go to state 294

state 265

    (155) if_action -> IF expression then_clause else_clause FI .

    SEMI            reduce using rule 155 (if_action -> IF expression then_clause else_clause FI .)


state 266

    (161) action_statement_list -> action_statement action_statement_nullable .

    FI              reduce using rule 161 (action_statement_list -> action_statement action_statement_nullable .)
    ELSE            reduce using rule 161 (action_statement_list -> action_statement action_statement_nullable .)
    ELSIF           reduce using rule 161 (action_statement_list -> action_statement action_statement_nullable .)


state 267

    (179) parameter_list -> expression COMMA parameter_list .

    RPAREN          reduce using rule 179 (parameter_list -> expression COMMA parameter_list .)


state 268

    (31) procedure_definition -> PROC LPAREN RPAREN . result_spec SEMI statement_nullable END SEMI
    (32) procedure_definition -> PROC LPAREN RPAREN . SEMI statement_nullable END SEMI
    (37) result_spec -> . RETURNS LPAREN mode LOC RPAREN
    (38) result_spec -> . RETURNS LPAREN mode RPAREN

    SEMI            shift and go to state 297
    RETURNS         shift and go to state 295

    result_spec                    shift and go to state 296

state 269

    (33) formal_parameter_list -> formal_parameter .
    (34) formal_parameter_list -> formal_parameter . COMMA formal_parameter_list

    RPAREN          reduce using rule 33 (formal_parameter_list -> formal_parameter .)
    COMMA           shift and go to state 298


state 270

    (29) procedure_definition -> PROC LPAREN formal_parameter_list . RPAREN result_spec SEMI statement_nullable END SEMI
    (30) procedure_definition -> PROC LPAREN formal_parameter_list . RPAREN SEMI statement_nullable END SEMI

    RPAREN          shift and go to state 299


state 271

    (35) formal_parameter -> identifier_list . mode LOC
    (36) formal_parameter -> identifier_list . mode
    (39) mode -> . mode_name
    (40) mode -> . discrete_mode
    (41) mode -> . reference_mode
    (42) mode -> . composite_mode
    (43) mode_name -> . identifier
    (44) discrete_mode -> . integer_mode
    (45) discrete_mode -> . boolean_mode
    (46) discrete_mode -> . character_mode
    (47) discrete_mode -> . discrete_range_mode
    (57) reference_mode -> . REF mode
    (58) composite_mode -> . string_mode
    (59) composite_mode -> . array_mode
    (23) identifier -> . ID
    (49) integer_mode -> . INT
    (50) boolean_mode -> . BOOL
    (51) character_mode -> . CHAR
    (52) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (53) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (60) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (62) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (48) discrete_mode_name -> . identifier

    REF             shift and go to state 143
    ID              shift and go to state 44
    INT             shift and go to state 136
    BOOL            shift and go to state 133
    CHAR            shift and go to state 144
    CHARS           shift and go to state 129
    ARRAY           shift and go to state 131

    discrete_range_mode            shift and go to state 137
    character_mode                 shift and go to state 128
    integer_mode                   shift and go to state 138
    array_mode                     shift and go to state 130
    discrete_mode_name             shift and go to state 132
    boolean_mode                   shift and go to state 139
    composite_mode                 shift and go to state 140
    mode_name                      shift and go to state 141
    reference_mode                 shift and go to state 142
    discrete_mode                  shift and go to state 134
    mode                           shift and go to state 300
    string_mode                    shift and go to state 146
    identifier                     shift and go to state 135

state 272

    (77) array_slice -> array_location LBRACKET lower_bound COLON upper_bound . RBRACKET

    RBRACKET        shift and go to state 301


state 273

    (56) upper_bound -> expression .

    RBRACKET        reduce using rule 56 (upper_bound -> expression .)
    COMMA           reduce using rule 56 (upper_bound -> expression .)
    RPAREN          reduce using rule 56 (upper_bound -> expression .)


state 274

    (76) expression_list -> expression COMMA expression_list .

    RBRACKET        reduce using rule 76 (expression_list -> expression COMMA expression_list .)


state 275

    (75) expression_list -> expression .
    (76) expression_list -> expression . COMMA expression_list

    RBRACKET        reduce using rule 75 (expression_list -> expression .)
    COMMA           shift and go to state 232


state 276

    (185) do_action -> DO control_part SEMI action_statement_nullable OD .

    SEMI            reduce using rule 185 (do_action -> DO control_part SEMI action_statement_nullable OD .)


state 277

    (193) step_enumeration -> identifier ASSIGN expression . step_value DOWN end_value
    (194) step_enumeration -> identifier ASSIGN expression . step_value end_value
    (195) step_enumeration -> identifier ASSIGN expression . DOWN end_value
    (196) step_enumeration -> identifier ASSIGN expression . end_value
    (197) step_value -> . BY expression
    (198) end_value -> . TO expression

    DOWN            shift and go to state 305
    BY              shift and go to state 303
    TO              shift and go to state 302

    step_value                     shift and go to state 304
    end_value                      shift and go to state 306

state 278

    (199) range_enumeration -> identifier DOWN IN . discrete_mode
    (44) discrete_mode -> . integer_mode
    (45) discrete_mode -> . boolean_mode
    (46) discrete_mode -> . character_mode
    (47) discrete_mode -> . discrete_range_mode
    (49) integer_mode -> . INT
    (50) boolean_mode -> . BOOL
    (51) character_mode -> . CHAR
    (52) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (53) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (48) discrete_mode_name -> . identifier
    (23) identifier -> . ID

    INT             shift and go to state 136
    BOOL            shift and go to state 133
    CHAR            shift and go to state 144
    ID              shift and go to state 44

    discrete_mode_name             shift and go to state 132
    discrete_range_mode            shift and go to state 137
    character_mode                 shift and go to state 128
    discrete_mode                  shift and go to state 307
    integer_mode                   shift and go to state 138
    identifier                     shift and go to state 280
    boolean_mode                   shift and go to state 139

state 279

    (200) range_enumeration -> identifier IN discrete_mode .
    (53) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    WHILE           reduce using rule 200 (range_enumeration -> identifier IN discrete_mode .)
    SEMI            reduce using rule 200 (range_enumeration -> identifier IN discrete_mode .)
    LPAREN          shift and go to state 207


state 280

    (48) discrete_mode_name -> identifier .

    LPAREN          reduce using rule 48 (discrete_mode_name -> identifier .)


state 281

    (13) synonym_definition -> identifier_list mode ASSIGN expression .

    COMMA           reduce using rule 13 (synonym_definition -> identifier_list mode ASSIGN expression .)
    SEMI            reduce using rule 13 (synonym_definition -> identifier_list mode ASSIGN expression .)


state 282

    (60) string_mode -> CHARS LBRACKET string_length RBRACKET .

    COMMA           reduce using rule 60 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    SEMI            reduce using rule 60 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    ASSIGN          reduce using rule 60 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    LOC             reduce using rule 60 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    RPAREN          reduce using rule 60 (string_mode -> CHARS LBRACKET string_length RBRACKET .)


state 283

    (62) array_mode -> ARRAY LBRACKET index_mode_list RBRACKET . element_mode
    (67) element_mode -> . mode
    (39) mode -> . mode_name
    (40) mode -> . discrete_mode
    (41) mode -> . reference_mode
    (42) mode -> . composite_mode
    (43) mode_name -> . identifier
    (44) discrete_mode -> . integer_mode
    (45) discrete_mode -> . boolean_mode
    (46) discrete_mode -> . character_mode
    (47) discrete_mode -> . discrete_range_mode
    (57) reference_mode -> . REF mode
    (58) composite_mode -> . string_mode
    (59) composite_mode -> . array_mode
    (23) identifier -> . ID
    (49) integer_mode -> . INT
    (50) boolean_mode -> . BOOL
    (51) character_mode -> . CHAR
    (52) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (53) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (60) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (62) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (48) discrete_mode_name -> . identifier

    REF             shift and go to state 143
    ID              shift and go to state 44
    INT             shift and go to state 136
    BOOL            shift and go to state 133
    CHAR            shift and go to state 144
    CHARS           shift and go to state 129
    ARRAY           shift and go to state 131

    discrete_range_mode            shift and go to state 137
    character_mode                 shift and go to state 128
    integer_mode                   shift and go to state 138
    array_mode                     shift and go to state 130
    discrete_mode_name             shift and go to state 132
    boolean_mode                   shift and go to state 139
    composite_mode                 shift and go to state 140
    mode_name                      shift and go to state 141
    reference_mode                 shift and go to state 142
    discrete_mode                  shift and go to state 134
    mode                           shift and go to state 309
    string_mode                    shift and go to state 146
    identifier                     shift and go to state 135
    element_mode                   shift and go to state 308

state 284

    (54) literal_range -> lower_bound COLON . upper_bound
    (56) upper_bound -> . expression
    (79) expression -> . operand0
    (80) expression -> . conditional_expression
    (88) operand0 -> . operand1
    (89) operand0 -> . operand0 operator1 operand1
    (82) conditional_expression -> . IF expression then_expression else_expression FI
    (83) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (90) operand1 -> . operand2
    (91) operand1 -> . operand1 operator2 operand2
    (92) operand2 -> . operand3
    (93) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (94) operand3 -> . monadic_operator operand4
    (95) operand3 -> . operand4
    (102) monadic_operator -> . MINUS
    (103) monadic_operator -> . NOT
    (96) operand4 -> . array_location
    (97) operand4 -> . referenced_location
    (98) operand4 -> . primitive_value
    (78) array_location -> . location
    (104) referenced_location -> . ARROW array_location
    (121) primitive_value -> . literal
    (122) primitive_value -> . value_array_element
    (123) primitive_value -> . value_array_slice
    (124) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (125) literal -> . integer_literal
    (126) literal -> . boolean_literal
    (127) literal -> . character_literal
    (128) literal -> . empty_literal
    (129) literal -> . character_string_literal
    (130) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (131) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (81) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (132) integer_literal -> . ICONST
    (133) boolean_literal -> . TRUE
    (134) boolean_literal -> . FALSE
    (135) character_literal -> . CCONST
    (136) character_literal -> . HAT LPAREN ICONST RPAREN
    (137) empty_literal -> . NULL
    (138) character_string_literal -> . SCONST
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT

    IF              shift and go to state 53
    MINUS           shift and go to state 75
    NOT             shift and go to state 78
    ARROW           shift and go to state 54
    LPAREN          shift and go to state 51
    ID              shift and go to state 58
    ICONST          shift and go to state 72
    TRUE            shift and go to state 64
    FALSE           shift and go to state 63
    CCONST          shift and go to state 74
    HAT             shift and go to state 60
    NULL            shift and go to state 59
    SCONST          shift and go to state 69
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    operand1                       shift and go to state 49
    operand2                       shift and go to state 50
    operand0                       shift and go to state 62
    boolean_literal                shift and go to state 71
    procedure_call                 shift and go to state 3
    array_element                  shift and go to state 9
    empty_literal                  shift and go to state 68
    primitive_value                shift and go to state 52
    upper_bound                    shift and go to state 310
    integer_literal                shift and go to state 77
    identifier                     shift and go to state 55
    builtin_call                   shift and go to state 1
    conditional_expression         shift and go to state 56
    value_array_slice              shift and go to state 57
    builtin_name                   shift and go to state 29
    dereferenced_reference         shift and go to state 32
    literal                        shift and go to state 61
    monadic_operator               shift and go to state 81
    operand4                       shift and go to state 73
    array_slice                    shift and go to state 28
    operand3                       shift and go to state 65
    location                       shift and go to state 38
    character_string_literal       shift and go to state 66
    character_literal              shift and go to state 76
    call_action                    shift and go to state 80
    array_location                 shift and go to state 67
    value_array_element            shift and go to state 79
    referenced_location            shift and go to state 82
    expression                     shift and go to state 273
    parenthesized_expression       shift and go to state 70

state 285

    (64) index_mode_list -> index_mode COMMA . index_mode_list
    (63) index_mode_list -> . index_mode
    (64) index_mode_list -> . index_mode COMMA index_mode_list
    (65) index_mode -> . discrete_mode
    (66) index_mode -> . literal_range
    (44) discrete_mode -> . integer_mode
    (45) discrete_mode -> . boolean_mode
    (46) discrete_mode -> . character_mode
    (47) discrete_mode -> . discrete_range_mode
    (54) literal_range -> . lower_bound COLON upper_bound
    (49) integer_mode -> . INT
    (50) boolean_mode -> . BOOL
    (51) character_mode -> . CHAR
    (52) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (53) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (55) lower_bound -> . expression
    (48) discrete_mode_name -> . identifier
    (79) expression -> . operand0
    (80) expression -> . conditional_expression
    (23) identifier -> . ID
    (88) operand0 -> . operand1
    (89) operand0 -> . operand0 operator1 operand1
    (82) conditional_expression -> . IF expression then_expression else_expression FI
    (83) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (90) operand1 -> . operand2
    (91) operand1 -> . operand1 operator2 operand2
    (92) operand2 -> . operand3
    (93) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (94) operand3 -> . monadic_operator operand4
    (95) operand3 -> . operand4
    (102) monadic_operator -> . MINUS
    (103) monadic_operator -> . NOT
    (96) operand4 -> . array_location
    (97) operand4 -> . referenced_location
    (98) operand4 -> . primitive_value
    (78) array_location -> . location
    (104) referenced_location -> . ARROW array_location
    (121) primitive_value -> . literal
    (122) primitive_value -> . value_array_element
    (123) primitive_value -> . value_array_slice
    (124) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (125) literal -> . integer_literal
    (126) literal -> . boolean_literal
    (127) literal -> . character_literal
    (128) literal -> . empty_literal
    (129) literal -> . character_string_literal
    (130) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (131) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (81) parenthesized_expression -> . LPAREN expression RPAREN
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (132) integer_literal -> . ICONST
    (133) boolean_literal -> . TRUE
    (134) boolean_literal -> . FALSE
    (135) character_literal -> . CCONST
    (136) character_literal -> . HAT LPAREN ICONST RPAREN
    (137) empty_literal -> . NULL
    (138) character_string_literal -> . SCONST
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT

    INT             shift and go to state 136
    BOOL            shift and go to state 133
    CHAR            shift and go to state 144
    ID              shift and go to state 58
    IF              shift and go to state 53
    MINUS           shift and go to state 75
    NOT             shift and go to state 78
    ARROW           shift and go to state 54
    LPAREN          shift and go to state 51
    ICONST          shift and go to state 72
    TRUE            shift and go to state 64
    FALSE           shift and go to state 63
    CCONST          shift and go to state 74
    HAT             shift and go to state 60
    NULL            shift and go to state 59
    SCONST          shift and go to state 69
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    operand1                       shift and go to state 49
    operand2                       shift and go to state 50
    builtin_call                   shift and go to state 1
    procedure_call                 shift and go to state 3
    primitive_value                shift and go to state 52
    identifier                     shift and go to state 245
    array_element                  shift and go to state 9
    conditional_expression         shift and go to state 56
    character_string_literal       shift and go to state 66
    index_mode_list                shift and go to state 311
    literal                        shift and go to state 61
    operand0                       shift and go to state 62
    boolean_mode                   shift and go to state 139
    operand3                       shift and go to state 65
    value_array_slice              shift and go to state 57
    array_location                 shift and go to state 67
    value_array_element            shift and go to state 79
    lower_bound                    shift and go to state 247
    character_mode                 shift and go to state 128
    boolean_literal                shift and go to state 71
    operand4                       shift and go to state 73
    discrete_mode                  shift and go to state 248
    array_slice                    shift and go to state 28
    builtin_name                   shift and go to state 29
    discrete_range_mode            shift and go to state 137
    dereferenced_reference         shift and go to state 32
    integer_mode                   shift and go to state 138
    call_action                    shift and go to state 80
    character_literal              shift and go to state 76
    discrete_mode_name             shift and go to state 132
    integer_literal                shift and go to state 77
    location                       shift and go to state 38
    empty_literal                  shift and go to state 68
    expression                     shift and go to state 251
    index_mode                     shift and go to state 250
    parenthesized_expression       shift and go to state 70
    monadic_operator               shift and go to state 81
    referenced_location            shift and go to state 82
    literal_range                  shift and go to state 249

state 286

    (52) discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .

    LPAREN          reduce using rule 52 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    WHILE           reduce using rule 52 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    SEMI            reduce using rule 52 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    LOC             reduce using rule 52 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    RPAREN          reduce using rule 52 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    ASSIGN          reduce using rule 52 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    COMMA           reduce using rule 52 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    RBRACKET        reduce using rule 52 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)


state 287

    (53) discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .

    LPAREN          reduce using rule 53 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    WHILE           reduce using rule 53 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    SEMI            reduce using rule 53 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    LOC             reduce using rule 53 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    RPAREN          reduce using rule 53 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    ASSIGN          reduce using rule 53 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    COMMA           reduce using rule 53 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    RBRACKET        reduce using rule 53 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)


state 288

    (131) value_array_slice -> primitive_value LBRACKET expression COLON expression . RBRACKET

    RBRACKET        shift and go to state 312


state 289

    (82) conditional_expression -> IF expression then_expression else_expression FI .

    SEMI            reduce using rule 82 (conditional_expression -> IF expression then_expression else_expression FI .)
    COLON           reduce using rule 82 (conditional_expression -> IF expression then_expression else_expression FI .)
    COMMA           reduce using rule 82 (conditional_expression -> IF expression then_expression else_expression FI .)
    RBRACKET        reduce using rule 82 (conditional_expression -> IF expression then_expression else_expression FI .)
    DOWN            reduce using rule 82 (conditional_expression -> IF expression then_expression else_expression FI .)
    TO              reduce using rule 82 (conditional_expression -> IF expression then_expression else_expression FI .)
    WHILE           reduce using rule 82 (conditional_expression -> IF expression then_expression else_expression FI .)
    RPAREN          reduce using rule 82 (conditional_expression -> IF expression then_expression else_expression FI .)
    THEN            reduce using rule 82 (conditional_expression -> IF expression then_expression else_expression FI .)
    BY              reduce using rule 82 (conditional_expression -> IF expression then_expression else_expression FI .)
    FI              reduce using rule 82 (conditional_expression -> IF expression then_expression else_expression FI .)
    ELSE            reduce using rule 82 (conditional_expression -> IF expression then_expression else_expression FI .)
    ELSIF           reduce using rule 82 (conditional_expression -> IF expression then_expression else_expression FI .)


state 290

    (85) else_expression -> ELSE expression .

    FI              reduce using rule 85 (else_expression -> ELSE expression .)


state 291

    (83) conditional_expression -> IF expression then_expression elsif_expression else_expression . FI

    FI              shift and go to state 313


state 292

    (87) elsif_expression -> elsif_expression ELSIF . expression then_expression
    (79) expression -> . operand0
    (80) expression -> . conditional_expression
    (88) operand0 -> . operand1
    (89) operand0 -> . operand0 operator1 operand1
    (82) conditional_expression -> . IF expression then_expression else_expression FI
    (83) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (90) operand1 -> . operand2
    (91) operand1 -> . operand1 operator2 operand2
    (92) operand2 -> . operand3
    (93) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (94) operand3 -> . monadic_operator operand4
    (95) operand3 -> . operand4
    (102) monadic_operator -> . MINUS
    (103) monadic_operator -> . NOT
    (96) operand4 -> . array_location
    (97) operand4 -> . referenced_location
    (98) operand4 -> . primitive_value
    (78) array_location -> . location
    (104) referenced_location -> . ARROW array_location
    (121) primitive_value -> . literal
    (122) primitive_value -> . value_array_element
    (123) primitive_value -> . value_array_slice
    (124) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (125) literal -> . integer_literal
    (126) literal -> . boolean_literal
    (127) literal -> . character_literal
    (128) literal -> . empty_literal
    (129) literal -> . character_string_literal
    (130) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (131) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (81) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (132) integer_literal -> . ICONST
    (133) boolean_literal -> . TRUE
    (134) boolean_literal -> . FALSE
    (135) character_literal -> . CCONST
    (136) character_literal -> . HAT LPAREN ICONST RPAREN
    (137) empty_literal -> . NULL
    (138) character_string_literal -> . SCONST
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT

    IF              shift and go to state 53
    MINUS           shift and go to state 75
    NOT             shift and go to state 78
    ARROW           shift and go to state 54
    LPAREN          shift and go to state 51
    ID              shift and go to state 58
    ICONST          shift and go to state 72
    TRUE            shift and go to state 64
    FALSE           shift and go to state 63
    CCONST          shift and go to state 74
    HAT             shift and go to state 60
    NULL            shift and go to state 59
    SCONST          shift and go to state 69
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    operand1                       shift and go to state 49
    operand2                       shift and go to state 50
    boolean_literal                shift and go to state 71
    procedure_call                 shift and go to state 3
    empty_literal                  shift and go to state 68
    primitive_value                shift and go to state 52
    integer_literal                shift and go to state 77
    identifier                     shift and go to state 55
    builtin_call                   shift and go to state 1
    conditional_expression         shift and go to state 56
    value_array_slice              shift and go to state 57
    builtin_name                   shift and go to state 29
    dereferenced_reference         shift and go to state 32
    literal                        shift and go to state 61
    array_element                  shift and go to state 9
    operand0                       shift and go to state 62
    operand4                       shift and go to state 73
    array_slice                    shift and go to state 28
    operand3                       shift and go to state 65
    location                       shift and go to state 38
    character_string_literal       shift and go to state 66
    character_literal              shift and go to state 76
    call_action                    shift and go to state 80
    array_location                 shift and go to state 67
    value_array_element            shift and go to state 79
    monadic_operator               shift and go to state 81
    referenced_location            shift and go to state 82
    expression                     shift and go to state 314
    parenthesized_expression       shift and go to state 70

state 293

    (86) elsif_expression -> ELSIF expression . then_expression
    (84) then_expression -> . THEN expression

    THEN            shift and go to state 217

    then_expression                shift and go to state 315

state 294

    (159) else_clause -> ELSIF expression then_clause . else_clause
    (160) else_clause -> ELSIF expression then_clause .
    (158) else_clause -> . ELSE action_statement_list
    (159) else_clause -> . ELSIF expression then_clause else_clause
    (160) else_clause -> . ELSIF expression then_clause

    FI              reduce using rule 160 (else_clause -> ELSIF expression then_clause .)
    ELSE            shift and go to state 220
    ELSIF           shift and go to state 222

    else_clause                    shift and go to state 316

state 295

    (37) result_spec -> RETURNS . LPAREN mode LOC RPAREN
    (38) result_spec -> RETURNS . LPAREN mode RPAREN

    LPAREN          shift and go to state 317


state 296

    (31) procedure_definition -> PROC LPAREN RPAREN result_spec . SEMI statement_nullable END SEMI

    SEMI            shift and go to state 318


state 297

    (32) procedure_definition -> PROC LPAREN RPAREN SEMI . statement_nullable END SEMI
    (3) statement_nullable -> . statement statement_nullable
    (4) statement_nullable -> . empty
    (5) statement -> . declaration_statement
    (6) statement -> . synonym_statement
    (7) statement -> . newmode_statement
    (8) statement -> . action_statement
    (9) statement -> . procedure_statement
    (202) empty -> .
    (15) declaration_statement -> . DCL declaration_list SEMI
    (10) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (139) action_statement -> . identifier COLON action SEMI
    (140) action_statement -> . action SEMI
    (28) procedure_statement -> . ID COLON procedure_definition
    (23) identifier -> . ID
    (141) action -> . bracketed_action
    (142) action -> . assignment_action
    (143) action -> . call_action
    (144) action -> . exit_action
    (145) action -> . result_action
    (146) action -> . return_action
    (147) bracketed_action -> . if_action
    (148) bracketed_action -> . do_action
    (149) assignment_action -> . array_location assigning_operator expression
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (180) exit_action -> . EXIT identifier
    (184) result_action -> . RESULT expression
    (181) return_action -> . RETURN result
    (155) if_action -> . IF expression then_clause else_clause FI
    (156) if_action -> . IF expression then_clause FI
    (185) do_action -> . DO control_part SEMI action_statement_nullable OD
    (186) do_action -> . DO action_statement_nullable OD
    (78) array_location -> . location
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    END             reduce using rule 202 (empty -> .)
    DCL             shift and go to state 4
    SYN             shift and go to state 30
    TYPE            shift and go to state 22
    ID              shift and go to state 12
    EXIT            shift and go to state 37
    RESULT          shift and go to state 43
    RETURN          shift and go to state 21
    IF              shift and go to state 6
    DO              shift and go to state 26
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    declaration_statement          shift and go to state 20
    synonym_statement              shift and go to state 2
    builtin_call                   shift and go to state 1
    result_action                  shift and go to state 23
    action                         shift and go to state 24
    procedure_call                 shift and go to state 3
    assignment_action              shift and go to state 13
    statement_nullable             shift and go to state 319
    location                       shift and go to state 38
    identifier                     shift and go to state 7
    action_statement               shift and go to state 27
    array_element                  shift and go to state 9
    array_slice                    shift and go to state 28
    builtin_name                   shift and go to state 29
    bracketed_action               shift and go to state 31
    dereferenced_reference         shift and go to state 32
    do_action                      shift and go to state 33
    statement                      shift and go to state 121
    call_action                    shift and go to state 35
    empty                          shift and go to state 122
    procedure_statement            shift and go to state 36
    return_action                  shift and go to state 15
    if_action                      shift and go to state 39
    array_location                 shift and go to state 18
    newmode_statement              shift and go to state 41
    exit_action                    shift and go to state 42

state 298

    (34) formal_parameter_list -> formal_parameter COMMA . formal_parameter_list
    (33) formal_parameter_list -> . formal_parameter
    (34) formal_parameter_list -> . formal_parameter COMMA formal_parameter_list
    (35) formal_parameter -> . identifier_list mode LOC
    (36) formal_parameter -> . identifier_list mode
    (21) identifier_list -> . identifier
    (22) identifier_list -> . identifier COMMA identifier_list
    (23) identifier -> . ID

    ID              shift and go to state 44

    formal_parameter_list          shift and go to state 320
    formal_parameter               shift and go to state 269
    identifier_list                shift and go to state 271
    identifier                     shift and go to state 45

state 299

    (29) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN . result_spec SEMI statement_nullable END SEMI
    (30) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN . SEMI statement_nullable END SEMI
    (37) result_spec -> . RETURNS LPAREN mode LOC RPAREN
    (38) result_spec -> . RETURNS LPAREN mode RPAREN

    SEMI            shift and go to state 322
    RETURNS         shift and go to state 295

    result_spec                    shift and go to state 321

state 300

    (35) formal_parameter -> identifier_list mode . LOC
    (36) formal_parameter -> identifier_list mode .

    LOC             shift and go to state 323
    COMMA           reduce using rule 36 (formal_parameter -> identifier_list mode .)
    RPAREN          reduce using rule 36 (formal_parameter -> identifier_list mode .)


state 301

    (77) array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .

    ARROW           reduce using rule 77 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LBRACKET        reduce using rule 77 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    TIMES           reduce using rule 77 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    DIVIDE          reduce using rule 77 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    MODULO          reduce using rule 77 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    PLUS            reduce using rule 77 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    MINUS           reduce using rule 77 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    CONCAT          reduce using rule 77 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    IN              reduce using rule 77 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    AND             reduce using rule 77 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    OR              reduce using rule 77 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    EQUAL           reduce using rule 77 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    NOTEQ           reduce using rule 77 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    GREATER         reduce using rule 77 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    GTEQUAL         reduce using rule 77 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LESS            reduce using rule 77 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LTEQUAL         reduce using rule 77 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    DOWN            reduce using rule 77 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    BY              reduce using rule 77 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    TO              reduce using rule 77 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    THEN            reduce using rule 77 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    SEMI            reduce using rule 77 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    RPAREN          reduce using rule 77 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    COMMA           reduce using rule 77 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    RBRACKET        reduce using rule 77 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    COLON           reduce using rule 77 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    ELSE            reduce using rule 77 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    ELSIF           reduce using rule 77 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    FI              reduce using rule 77 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    WHILE           reduce using rule 77 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    ASSIGN          reduce using rule 77 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)


state 302

    (198) end_value -> TO . expression
    (79) expression -> . operand0
    (80) expression -> . conditional_expression
    (88) operand0 -> . operand1
    (89) operand0 -> . operand0 operator1 operand1
    (82) conditional_expression -> . IF expression then_expression else_expression FI
    (83) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (90) operand1 -> . operand2
    (91) operand1 -> . operand1 operator2 operand2
    (92) operand2 -> . operand3
    (93) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (94) operand3 -> . monadic_operator operand4
    (95) operand3 -> . operand4
    (102) monadic_operator -> . MINUS
    (103) monadic_operator -> . NOT
    (96) operand4 -> . array_location
    (97) operand4 -> . referenced_location
    (98) operand4 -> . primitive_value
    (78) array_location -> . location
    (104) referenced_location -> . ARROW array_location
    (121) primitive_value -> . literal
    (122) primitive_value -> . value_array_element
    (123) primitive_value -> . value_array_slice
    (124) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (125) literal -> . integer_literal
    (126) literal -> . boolean_literal
    (127) literal -> . character_literal
    (128) literal -> . empty_literal
    (129) literal -> . character_string_literal
    (130) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (131) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (81) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (132) integer_literal -> . ICONST
    (133) boolean_literal -> . TRUE
    (134) boolean_literal -> . FALSE
    (135) character_literal -> . CCONST
    (136) character_literal -> . HAT LPAREN ICONST RPAREN
    (137) empty_literal -> . NULL
    (138) character_string_literal -> . SCONST
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT

    IF              shift and go to state 53
    MINUS           shift and go to state 75
    NOT             shift and go to state 78
    ARROW           shift and go to state 54
    LPAREN          shift and go to state 51
    ID              shift and go to state 58
    ICONST          shift and go to state 72
    TRUE            shift and go to state 64
    FALSE           shift and go to state 63
    CCONST          shift and go to state 74
    HAT             shift and go to state 60
    NULL            shift and go to state 59
    SCONST          shift and go to state 69
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    operand1                       shift and go to state 49
    operand2                       shift and go to state 50
    boolean_literal                shift and go to state 71
    procedure_call                 shift and go to state 3
    empty_literal                  shift and go to state 68
    primitive_value                shift and go to state 52
    integer_literal                shift and go to state 77
    identifier                     shift and go to state 55
    builtin_call                   shift and go to state 1
    conditional_expression         shift and go to state 56
    value_array_slice              shift and go to state 57
    builtin_name                   shift and go to state 29
    dereferenced_reference         shift and go to state 32
    literal                        shift and go to state 61
    array_element                  shift and go to state 9
    operand0                       shift and go to state 62
    operand4                       shift and go to state 73
    array_slice                    shift and go to state 28
    operand3                       shift and go to state 65
    location                       shift and go to state 38
    character_string_literal       shift and go to state 66
    character_literal              shift and go to state 76
    call_action                    shift and go to state 80
    array_location                 shift and go to state 67
    value_array_element            shift and go to state 79
    monadic_operator               shift and go to state 81
    referenced_location            shift and go to state 82
    expression                     shift and go to state 324
    parenthesized_expression       shift and go to state 70

state 303

    (197) step_value -> BY . expression
    (79) expression -> . operand0
    (80) expression -> . conditional_expression
    (88) operand0 -> . operand1
    (89) operand0 -> . operand0 operator1 operand1
    (82) conditional_expression -> . IF expression then_expression else_expression FI
    (83) conditional_expression -> . IF expression then_expression elsif_expression else_expression FI
    (90) operand1 -> . operand2
    (91) operand1 -> . operand1 operator2 operand2
    (92) operand2 -> . operand3
    (93) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (94) operand3 -> . monadic_operator operand4
    (95) operand3 -> . operand4
    (102) monadic_operator -> . MINUS
    (103) monadic_operator -> . NOT
    (96) operand4 -> . array_location
    (97) operand4 -> . referenced_location
    (98) operand4 -> . primitive_value
    (78) array_location -> . location
    (104) referenced_location -> . ARROW array_location
    (121) primitive_value -> . literal
    (122) primitive_value -> . value_array_element
    (123) primitive_value -> . value_array_slice
    (124) primitive_value -> . parenthesized_expression
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (125) literal -> . integer_literal
    (126) literal -> . boolean_literal
    (127) literal -> . character_literal
    (128) literal -> . empty_literal
    (129) literal -> . character_string_literal
    (130) value_array_element -> . primitive_value LBRACKET expression_list RBRACKET
    (131) value_array_slice -> . primitive_value LBRACKET expression COLON expression RBRACKET
    (81) parenthesized_expression -> . LPAREN expression RPAREN
    (23) identifier -> . ID
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (132) integer_literal -> . ICONST
    (133) boolean_literal -> . TRUE
    (134) boolean_literal -> . FALSE
    (135) character_literal -> . CCONST
    (136) character_literal -> . HAT LPAREN ICONST RPAREN
    (137) empty_literal -> . NULL
    (138) character_string_literal -> . SCONST
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT

    IF              shift and go to state 53
    MINUS           shift and go to state 75
    NOT             shift and go to state 78
    ARROW           shift and go to state 54
    LPAREN          shift and go to state 51
    ID              shift and go to state 58
    ICONST          shift and go to state 72
    TRUE            shift and go to state 64
    FALSE           shift and go to state 63
    CCONST          shift and go to state 74
    HAT             shift and go to state 60
    NULL            shift and go to state 59
    SCONST          shift and go to state 69
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    operand1                       shift and go to state 49
    operand2                       shift and go to state 50
    boolean_literal                shift and go to state 71
    procedure_call                 shift and go to state 3
    empty_literal                  shift and go to state 68
    primitive_value                shift and go to state 52
    integer_literal                shift and go to state 77
    identifier                     shift and go to state 55
    builtin_call                   shift and go to state 1
    conditional_expression         shift and go to state 56
    value_array_slice              shift and go to state 57
    builtin_name                   shift and go to state 29
    dereferenced_reference         shift and go to state 32
    literal                        shift and go to state 61
    array_element                  shift and go to state 9
    operand0                       shift and go to state 62
    operand4                       shift and go to state 73
    array_slice                    shift and go to state 28
    operand3                       shift and go to state 65
    location                       shift and go to state 38
    character_string_literal       shift and go to state 66
    character_literal              shift and go to state 76
    call_action                    shift and go to state 80
    array_location                 shift and go to state 67
    value_array_element            shift and go to state 79
    monadic_operator               shift and go to state 81
    referenced_location            shift and go to state 82
    expression                     shift and go to state 325
    parenthesized_expression       shift and go to state 70

state 304

    (193) step_enumeration -> identifier ASSIGN expression step_value . DOWN end_value
    (194) step_enumeration -> identifier ASSIGN expression step_value . end_value
    (198) end_value -> . TO expression

    DOWN            shift and go to state 326
    TO              shift and go to state 302

    end_value                      shift and go to state 327

state 305

    (195) step_enumeration -> identifier ASSIGN expression DOWN . end_value
    (198) end_value -> . TO expression

    TO              shift and go to state 302

    end_value                      shift and go to state 328

state 306

    (196) step_enumeration -> identifier ASSIGN expression end_value .

    WHILE           reduce using rule 196 (step_enumeration -> identifier ASSIGN expression end_value .)
    SEMI            reduce using rule 196 (step_enumeration -> identifier ASSIGN expression end_value .)


state 307

    (199) range_enumeration -> identifier DOWN IN discrete_mode .
    (53) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    WHILE           reduce using rule 199 (range_enumeration -> identifier DOWN IN discrete_mode .)
    SEMI            reduce using rule 199 (range_enumeration -> identifier DOWN IN discrete_mode .)
    LPAREN          shift and go to state 207


state 308

    (62) array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .

    ASSIGN          reduce using rule 62 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)
    COMMA           reduce using rule 62 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)
    SEMI            reduce using rule 62 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)
    LOC             reduce using rule 62 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)
    RPAREN          reduce using rule 62 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)


state 309

    (67) element_mode -> mode .

    ASSIGN          reduce using rule 67 (element_mode -> mode .)
    COMMA           reduce using rule 67 (element_mode -> mode .)
    SEMI            reduce using rule 67 (element_mode -> mode .)
    LOC             reduce using rule 67 (element_mode -> mode .)
    RPAREN          reduce using rule 67 (element_mode -> mode .)


state 310

    (54) literal_range -> lower_bound COLON upper_bound .

    RPAREN          reduce using rule 54 (literal_range -> lower_bound COLON upper_bound .)
    COMMA           reduce using rule 54 (literal_range -> lower_bound COLON upper_bound .)
    RBRACKET        reduce using rule 54 (literal_range -> lower_bound COLON upper_bound .)


state 311

    (64) index_mode_list -> index_mode COMMA index_mode_list .

    RBRACKET        reduce using rule 64 (index_mode_list -> index_mode COMMA index_mode_list .)


state 312

    (131) value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .

    LBRACKET        reduce using rule 131 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    TIMES           reduce using rule 131 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    DIVIDE          reduce using rule 131 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    MODULO          reduce using rule 131 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    PLUS            reduce using rule 131 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    MINUS           reduce using rule 131 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    CONCAT          reduce using rule 131 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    IN              reduce using rule 131 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    AND             reduce using rule 131 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    OR              reduce using rule 131 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    EQUAL           reduce using rule 131 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    NOTEQ           reduce using rule 131 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    GREATER         reduce using rule 131 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    GTEQUAL         reduce using rule 131 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    LESS            reduce using rule 131 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    LTEQUAL         reduce using rule 131 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    SEMI            reduce using rule 131 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    WHILE           reduce using rule 131 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    COLON           reduce using rule 131 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    THEN            reduce using rule 131 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    DOWN            reduce using rule 131 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    TO              reduce using rule 131 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    COMMA           reduce using rule 131 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    RPAREN          reduce using rule 131 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    RBRACKET        reduce using rule 131 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    ELSE            reduce using rule 131 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    ELSIF           reduce using rule 131 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    BY              reduce using rule 131 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)
    FI              reduce using rule 131 (value_array_slice -> primitive_value LBRACKET expression COLON expression RBRACKET .)


state 313

    (83) conditional_expression -> IF expression then_expression elsif_expression else_expression FI .

    SEMI            reduce using rule 83 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    COLON           reduce using rule 83 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    COMMA           reduce using rule 83 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    RBRACKET        reduce using rule 83 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    DOWN            reduce using rule 83 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    TO              reduce using rule 83 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    WHILE           reduce using rule 83 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    RPAREN          reduce using rule 83 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    THEN            reduce using rule 83 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    BY              reduce using rule 83 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    FI              reduce using rule 83 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    ELSE            reduce using rule 83 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)
    ELSIF           reduce using rule 83 (conditional_expression -> IF expression then_expression elsif_expression else_expression FI .)


state 314

    (87) elsif_expression -> elsif_expression ELSIF expression . then_expression
    (84) then_expression -> . THEN expression

    THEN            shift and go to state 217

    then_expression                shift and go to state 329

state 315

    (86) elsif_expression -> ELSIF expression then_expression .

    ELSIF           reduce using rule 86 (elsif_expression -> ELSIF expression then_expression .)
    ELSE            reduce using rule 86 (elsif_expression -> ELSIF expression then_expression .)


state 316

    (159) else_clause -> ELSIF expression then_clause else_clause .

    FI              reduce using rule 159 (else_clause -> ELSIF expression then_clause else_clause .)


state 317

    (37) result_spec -> RETURNS LPAREN . mode LOC RPAREN
    (38) result_spec -> RETURNS LPAREN . mode RPAREN
    (39) mode -> . mode_name
    (40) mode -> . discrete_mode
    (41) mode -> . reference_mode
    (42) mode -> . composite_mode
    (43) mode_name -> . identifier
    (44) discrete_mode -> . integer_mode
    (45) discrete_mode -> . boolean_mode
    (46) discrete_mode -> . character_mode
    (47) discrete_mode -> . discrete_range_mode
    (57) reference_mode -> . REF mode
    (58) composite_mode -> . string_mode
    (59) composite_mode -> . array_mode
    (23) identifier -> . ID
    (49) integer_mode -> . INT
    (50) boolean_mode -> . BOOL
    (51) character_mode -> . CHAR
    (52) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (53) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (60) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (62) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode
    (48) discrete_mode_name -> . identifier

    REF             shift and go to state 143
    ID              shift and go to state 44
    INT             shift and go to state 136
    BOOL            shift and go to state 133
    CHAR            shift and go to state 144
    CHARS           shift and go to state 129
    ARRAY           shift and go to state 131

    discrete_range_mode            shift and go to state 137
    character_mode                 shift and go to state 128
    integer_mode                   shift and go to state 138
    array_mode                     shift and go to state 130
    discrete_mode_name             shift and go to state 132
    boolean_mode                   shift and go to state 139
    composite_mode                 shift and go to state 140
    mode_name                      shift and go to state 141
    reference_mode                 shift and go to state 142
    discrete_mode                  shift and go to state 134
    mode                           shift and go to state 330
    string_mode                    shift and go to state 146
    identifier                     shift and go to state 135

state 318

    (31) procedure_definition -> PROC LPAREN RPAREN result_spec SEMI . statement_nullable END SEMI
    (3) statement_nullable -> . statement statement_nullable
    (4) statement_nullable -> . empty
    (5) statement -> . declaration_statement
    (6) statement -> . synonym_statement
    (7) statement -> . newmode_statement
    (8) statement -> . action_statement
    (9) statement -> . procedure_statement
    (202) empty -> .
    (15) declaration_statement -> . DCL declaration_list SEMI
    (10) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (139) action_statement -> . identifier COLON action SEMI
    (140) action_statement -> . action SEMI
    (28) procedure_statement -> . ID COLON procedure_definition
    (23) identifier -> . ID
    (141) action -> . bracketed_action
    (142) action -> . assignment_action
    (143) action -> . call_action
    (144) action -> . exit_action
    (145) action -> . result_action
    (146) action -> . return_action
    (147) bracketed_action -> . if_action
    (148) bracketed_action -> . do_action
    (149) assignment_action -> . array_location assigning_operator expression
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (180) exit_action -> . EXIT identifier
    (184) result_action -> . RESULT expression
    (181) return_action -> . RETURN result
    (155) if_action -> . IF expression then_clause else_clause FI
    (156) if_action -> . IF expression then_clause FI
    (185) do_action -> . DO control_part SEMI action_statement_nullable OD
    (186) do_action -> . DO action_statement_nullable OD
    (78) array_location -> . location
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    END             reduce using rule 202 (empty -> .)
    DCL             shift and go to state 4
    SYN             shift and go to state 30
    TYPE            shift and go to state 22
    ID              shift and go to state 12
    EXIT            shift and go to state 37
    RESULT          shift and go to state 43
    RETURN          shift and go to state 21
    IF              shift and go to state 6
    DO              shift and go to state 26
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    declaration_statement          shift and go to state 20
    synonym_statement              shift and go to state 2
    builtin_call                   shift and go to state 1
    result_action                  shift and go to state 23
    action                         shift and go to state 24
    procedure_call                 shift and go to state 3
    assignment_action              shift and go to state 13
    statement_nullable             shift and go to state 331
    location                       shift and go to state 38
    identifier                     shift and go to state 7
    action_statement               shift and go to state 27
    array_element                  shift and go to state 9
    array_slice                    shift and go to state 28
    builtin_name                   shift and go to state 29
    bracketed_action               shift and go to state 31
    dereferenced_reference         shift and go to state 32
    do_action                      shift and go to state 33
    statement                      shift and go to state 121
    call_action                    shift and go to state 35
    empty                          shift and go to state 122
    procedure_statement            shift and go to state 36
    return_action                  shift and go to state 15
    if_action                      shift and go to state 39
    array_location                 shift and go to state 18
    newmode_statement              shift and go to state 41
    exit_action                    shift and go to state 42

state 319

    (32) procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable . END SEMI

    END             shift and go to state 332


state 320

    (34) formal_parameter_list -> formal_parameter COMMA formal_parameter_list .

    RPAREN          reduce using rule 34 (formal_parameter_list -> formal_parameter COMMA formal_parameter_list .)


state 321

    (29) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec . SEMI statement_nullable END SEMI

    SEMI            shift and go to state 333


state 322

    (30) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI . statement_nullable END SEMI
    (3) statement_nullable -> . statement statement_nullable
    (4) statement_nullable -> . empty
    (5) statement -> . declaration_statement
    (6) statement -> . synonym_statement
    (7) statement -> . newmode_statement
    (8) statement -> . action_statement
    (9) statement -> . procedure_statement
    (202) empty -> .
    (15) declaration_statement -> . DCL declaration_list SEMI
    (10) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (139) action_statement -> . identifier COLON action SEMI
    (140) action_statement -> . action SEMI
    (28) procedure_statement -> . ID COLON procedure_definition
    (23) identifier -> . ID
    (141) action -> . bracketed_action
    (142) action -> . assignment_action
    (143) action -> . call_action
    (144) action -> . exit_action
    (145) action -> . result_action
    (146) action -> . return_action
    (147) bracketed_action -> . if_action
    (148) bracketed_action -> . do_action
    (149) assignment_action -> . array_location assigning_operator expression
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (180) exit_action -> . EXIT identifier
    (184) result_action -> . RESULT expression
    (181) return_action -> . RETURN result
    (155) if_action -> . IF expression then_clause else_clause FI
    (156) if_action -> . IF expression then_clause FI
    (185) do_action -> . DO control_part SEMI action_statement_nullable OD
    (186) do_action -> . DO action_statement_nullable OD
    (78) array_location -> . location
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    END             reduce using rule 202 (empty -> .)
    DCL             shift and go to state 4
    SYN             shift and go to state 30
    TYPE            shift and go to state 22
    ID              shift and go to state 12
    EXIT            shift and go to state 37
    RESULT          shift and go to state 43
    RETURN          shift and go to state 21
    IF              shift and go to state 6
    DO              shift and go to state 26
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    declaration_statement          shift and go to state 20
    synonym_statement              shift and go to state 2
    builtin_call                   shift and go to state 1
    result_action                  shift and go to state 23
    action                         shift and go to state 24
    procedure_call                 shift and go to state 3
    assignment_action              shift and go to state 13
    statement_nullable             shift and go to state 334
    location                       shift and go to state 38
    identifier                     shift and go to state 7
    action_statement               shift and go to state 27
    array_element                  shift and go to state 9
    array_slice                    shift and go to state 28
    builtin_name                   shift and go to state 29
    bracketed_action               shift and go to state 31
    dereferenced_reference         shift and go to state 32
    do_action                      shift and go to state 33
    statement                      shift and go to state 121
    call_action                    shift and go to state 35
    empty                          shift and go to state 122
    procedure_statement            shift and go to state 36
    return_action                  shift and go to state 15
    if_action                      shift and go to state 39
    array_location                 shift and go to state 18
    newmode_statement              shift and go to state 41
    exit_action                    shift and go to state 42

state 323

    (35) formal_parameter -> identifier_list mode LOC .

    COMMA           reduce using rule 35 (formal_parameter -> identifier_list mode LOC .)
    RPAREN          reduce using rule 35 (formal_parameter -> identifier_list mode LOC .)


state 324

    (198) end_value -> TO expression .

    WHILE           reduce using rule 198 (end_value -> TO expression .)
    SEMI            reduce using rule 198 (end_value -> TO expression .)


state 325

    (197) step_value -> BY expression .

    DOWN            reduce using rule 197 (step_value -> BY expression .)
    TO              reduce using rule 197 (step_value -> BY expression .)


state 326

    (193) step_enumeration -> identifier ASSIGN expression step_value DOWN . end_value
    (198) end_value -> . TO expression

    TO              shift and go to state 302

    end_value                      shift and go to state 335

state 327

    (194) step_enumeration -> identifier ASSIGN expression step_value end_value .

    WHILE           reduce using rule 194 (step_enumeration -> identifier ASSIGN expression step_value end_value .)
    SEMI            reduce using rule 194 (step_enumeration -> identifier ASSIGN expression step_value end_value .)


state 328

    (195) step_enumeration -> identifier ASSIGN expression DOWN end_value .

    WHILE           reduce using rule 195 (step_enumeration -> identifier ASSIGN expression DOWN end_value .)
    SEMI            reduce using rule 195 (step_enumeration -> identifier ASSIGN expression DOWN end_value .)


state 329

    (87) elsif_expression -> elsif_expression ELSIF expression then_expression .

    ELSIF           reduce using rule 87 (elsif_expression -> elsif_expression ELSIF expression then_expression .)
    ELSE            reduce using rule 87 (elsif_expression -> elsif_expression ELSIF expression then_expression .)


state 330

    (37) result_spec -> RETURNS LPAREN mode . LOC RPAREN
    (38) result_spec -> RETURNS LPAREN mode . RPAREN

    LOC             shift and go to state 337
    RPAREN          shift and go to state 336


state 331

    (31) procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable . END SEMI

    END             shift and go to state 338


state 332

    (32) procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END . SEMI

    SEMI            shift and go to state 339


state 333

    (29) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI . statement_nullable END SEMI
    (3) statement_nullable -> . statement statement_nullable
    (4) statement_nullable -> . empty
    (5) statement -> . declaration_statement
    (6) statement -> . synonym_statement
    (7) statement -> . newmode_statement
    (8) statement -> . action_statement
    (9) statement -> . procedure_statement
    (202) empty -> .
    (15) declaration_statement -> . DCL declaration_list SEMI
    (10) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (139) action_statement -> . identifier COLON action SEMI
    (140) action_statement -> . action SEMI
    (28) procedure_statement -> . ID COLON procedure_definition
    (23) identifier -> . ID
    (141) action -> . bracketed_action
    (142) action -> . assignment_action
    (143) action -> . call_action
    (144) action -> . exit_action
    (145) action -> . result_action
    (146) action -> . return_action
    (147) bracketed_action -> . if_action
    (148) bracketed_action -> . do_action
    (149) assignment_action -> . array_location assigning_operator expression
    (164) call_action -> . procedure_call
    (165) call_action -> . builtin_call
    (180) exit_action -> . EXIT identifier
    (184) result_action -> . RESULT expression
    (181) return_action -> . RETURN result
    (155) if_action -> . IF expression then_clause else_clause FI
    (156) if_action -> . IF expression then_clause FI
    (185) do_action -> . DO control_part SEMI action_statement_nullable OD
    (186) do_action -> . DO action_statement_nullable OD
    (78) array_location -> . location
    (176) procedure_call -> . ID LPAREN parameter_list RPAREN
    (177) procedure_call -> . ID LPAREN RPAREN
    (166) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (167) builtin_call -> . builtin_name LPAREN RPAREN
    (68) location -> . identifier
    (69) location -> . dereferenced_reference
    (70) location -> . array_element
    (71) location -> . array_slice
    (72) location -> . call_action
    (168) builtin_name -> . ABS
    (169) builtin_name -> . ASC
    (170) builtin_name -> . NUM
    (171) builtin_name -> . UPPER
    (172) builtin_name -> . LOWER
    (173) builtin_name -> . LENGTH
    (174) builtin_name -> . READ
    (175) builtin_name -> . PRINT
    (73) dereferenced_reference -> . array_location ARROW
    (74) array_element -> . array_location LBRACKET expression_list RBRACKET
    (77) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET

    END             reduce using rule 202 (empty -> .)
    DCL             shift and go to state 4
    SYN             shift and go to state 30
    TYPE            shift and go to state 22
    ID              shift and go to state 12
    EXIT            shift and go to state 37
    RESULT          shift and go to state 43
    RETURN          shift and go to state 21
    IF              shift and go to state 6
    DO              shift and go to state 26
    ABS             shift and go to state 19
    ASC             shift and go to state 5
    NUM             shift and go to state 10
    UPPER           shift and go to state 40
    LOWER           shift and go to state 17
    LENGTH          shift and go to state 14
    READ            shift and go to state 11
    PRINT           shift and go to state 25

    declaration_statement          shift and go to state 20
    builtin_call                   shift and go to state 1
    result_action                  shift and go to state 23
    action                         shift and go to state 24
    procedure_call                 shift and go to state 3
    assignment_action              shift and go to state 13
    statement_nullable             shift and go to state 340
    location                       shift and go to state 38
    identifier                     shift and go to state 7
    action_statement               shift and go to state 27
    array_element                  shift and go to state 9
    array_slice                    shift and go to state 28
    builtin_name                   shift and go to state 29
    bracketed_action               shift and go to state 31
    dereferenced_reference         shift and go to state 32
    do_action                      shift and go to state 33
    statement                      shift and go to state 121
    call_action                    shift and go to state 35
    empty                          shift and go to state 122
    procedure_statement            shift and go to state 36
    synonym_statement              shift and go to state 2
    if_action                      shift and go to state 39
    array_location                 shift and go to state 18
    newmode_statement              shift and go to state 41
    exit_action                    shift and go to state 42
    return_action                  shift and go to state 15

state 334

    (30) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable . END SEMI

    END             shift and go to state 341


state 335

    (193) step_enumeration -> identifier ASSIGN expression step_value DOWN end_value .

    WHILE           reduce using rule 193 (step_enumeration -> identifier ASSIGN expression step_value DOWN end_value .)
    SEMI            reduce using rule 193 (step_enumeration -> identifier ASSIGN expression step_value DOWN end_value .)


state 336

    (38) result_spec -> RETURNS LPAREN mode RPAREN .

    SEMI            reduce using rule 38 (result_spec -> RETURNS LPAREN mode RPAREN .)


state 337

    (37) result_spec -> RETURNS LPAREN mode LOC . RPAREN

    RPAREN          shift and go to state 342


state 338

    (31) procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END . SEMI

    SEMI            shift and go to state 343


state 339

    (32) procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI .

    DCL             reduce using rule 32 (procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI .)
    SYN             reduce using rule 32 (procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI .)
    TYPE            reduce using rule 32 (procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI .)
    ID              reduce using rule 32 (procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI .)
    EXIT            reduce using rule 32 (procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI .)
    RESULT          reduce using rule 32 (procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI .)
    RETURN          reduce using rule 32 (procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI .)
    IF              reduce using rule 32 (procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI .)
    DO              reduce using rule 32 (procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI .)
    ABS             reduce using rule 32 (procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI .)
    ASC             reduce using rule 32 (procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI .)
    NUM             reduce using rule 32 (procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI .)
    UPPER           reduce using rule 32 (procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI .)
    LOWER           reduce using rule 32 (procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI .)
    LENGTH          reduce using rule 32 (procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI .)
    READ            reduce using rule 32 (procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI .)
    PRINT           reduce using rule 32 (procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI .)
    $end            reduce using rule 32 (procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI .)
    END             reduce using rule 32 (procedure_definition -> PROC LPAREN RPAREN SEMI statement_nullable END SEMI .)


state 340

    (29) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable . END SEMI

    END             shift and go to state 344


state 341

    (30) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END . SEMI

    SEMI            shift and go to state 345


state 342

    (37) result_spec -> RETURNS LPAREN mode LOC RPAREN .

    SEMI            reduce using rule 37 (result_spec -> RETURNS LPAREN mode LOC RPAREN .)


state 343

    (31) procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI .

    DCL             reduce using rule 31 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI .)
    SYN             reduce using rule 31 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI .)
    TYPE            reduce using rule 31 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI .)
    ID              reduce using rule 31 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI .)
    EXIT            reduce using rule 31 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI .)
    RESULT          reduce using rule 31 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI .)
    RETURN          reduce using rule 31 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI .)
    IF              reduce using rule 31 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI .)
    DO              reduce using rule 31 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI .)
    ABS             reduce using rule 31 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI .)
    ASC             reduce using rule 31 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI .)
    NUM             reduce using rule 31 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI .)
    UPPER           reduce using rule 31 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI .)
    LOWER           reduce using rule 31 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI .)
    LENGTH          reduce using rule 31 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI .)
    READ            reduce using rule 31 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI .)
    PRINT           reduce using rule 31 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI .)
    $end            reduce using rule 31 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI .)
    END             reduce using rule 31 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_nullable END SEMI .)


state 344

    (29) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END . SEMI

    SEMI            shift and go to state 346


state 345

    (30) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .

    DCL             reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    SYN             reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    TYPE            reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    ID              reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    EXIT            reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    RESULT          reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    RETURN          reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    IF              reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    DO              reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    ABS             reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    ASC             reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    NUM             reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    UPPER           reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    LOWER           reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    LENGTH          reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    READ            reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    PRINT           reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    $end            reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)
    END             reduce using rule 30 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_nullable END SEMI .)


state 346

    (29) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .

    DCL             reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    SYN             reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    TYPE            reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    ID              reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    EXIT            reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    RESULT          reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    RETURN          reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    IF              reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    DO              reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    ABS             reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    ASC             reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    NUM             reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    UPPER           reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    LOWER           reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    LENGTH          reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    READ            reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    PRINT           reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    $end            reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)
    END             reduce using rule 29 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_nullable END SEMI .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COLON in state 12 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 58 resolved as shift
